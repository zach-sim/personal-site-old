{"version":3,"sources":["../static/js/0.7fa53421.chunk.js","components/Visualisation.jsx","../node_modules/crossfilter2/src/identity.js","../node_modules/dc/dc.js","../node_modules/d3/d3.js","../node_modules/dc/node_modules/crossfilter2/index.js","../node_modules/dc/node_modules/crossfilter2/crossfilter.js","../node_modules/crossfilter2/src/heap.js","../node_modules/crossfilter2/src/insertionsort.js","../node_modules/crossfilter2/index.js","../node_modules/crossfilter2/src/crossfilter.js","../node_modules/crossfilter2/src/array.js","../node_modules/crossfilter2/src/filter.js","../node_modules/crossfilter2/src/null.js","../node_modules/crossfilter2/src/zero.js","../node_modules/crossfilter2/src/heapselect.js","../node_modules/crossfilter2/src/bisect.js","../node_modules/crossfilter2/src/permute.js","../node_modules/crossfilter2/src/quicksort.js","../node_modules/crossfilter2/src/reduce.js","../node_modules/crossfilter2/package.json","../node_modules/lodash.result/index.js","webpack:///./node_modules/dc/dc.css?6aae","../node_modules/dc/dc.css","webpack:///./src/components/chart.css?4c7c","components/chart.css"],"names":["webpackJsonp","266","module","__webpack_exports__","__webpack_require__","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","__WEBPACK_IMPORTED_MODULE_0_react__","__WEBPACK_IMPORTED_MODULE_0_react___default","n","__WEBPACK_IMPORTED_MODULE_1_prop_types__","__WEBPACK_IMPORTED_MODULE_1_prop_types___default","__WEBPACK_IMPORTED_MODULE_2_crossfilter2__","__WEBPACK_IMPORTED_MODULE_2_crossfilter2___default","__WEBPACK_IMPORTED_MODULE_3_dc__","__WEBPACK_IMPORTED_MODULE_3_dc___default","__WEBPACK_IMPORTED_MODULE_4_react_loading_animation__","__WEBPACK_IMPORTED_MODULE_4_react_loading_animation___default","__WEBPACK_IMPORTED_MODULE_5_dc_dc_css__","__WEBPACK_IMPORTED_MODULE_6__chart_css__","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","Vis","data","Charts","_class","_temp","_PureComponent","Visualisation","this","_this","getPrototypeOf","state","loading","ndx","resize","bind","console","time","timeEnd","setState","window","addEventListener","removeEventListener","a","disableTransitions","renderAll","createElement","width","height","childContextTypes","object","isRequired","269","exports","crossfilter_identity","d","270","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","_dc","d3","crossfilter","dc","version","constants","CHART_CLASS","DEBUG_GROUP_CLASS","STACK_CLASS","DESELECTED_CLASS","SELECTED_CLASS","NODE_INDEX_NAME","GROUP_INDEX_NAME","DEFAULT_CHART_GROUP","EVENT_DELAY","NEGLIGIBLE_NUMBER","_renderlet","chartRegistry","initializeChartGroup","group","_chartMap","has","chart","e","indexOf","register","push","deregister","anchorName","splice","clear","list","registerChart","deregisterChart","hasChart","deregisterAllCharts","filterAll","charts","refocusAll","focus","render","redrawAll","redraw","transition","selection","duration","delay","name","s","undefined","optionalTransition","enable","afterTransition","callback","empty","each","units","integers","start","end","Math","abs","ordinal","domain","fp","precision","_f","resolution","utils","isNegligible","floor","ceil","round","override","obj","functionName","newFunction","existingFunction","renderlet","_","arguments","instanceOfChart","o","__dcFlag__","errors","Exception","msg","_msg","message","toString","stack","Error","InvalidStateException","apply","BadArgumentException","dateFormat","format","printers","filters","filter","Array","printSingleValue","pluck","f","Date","isFloat","fformat","isInteger","add","l","r","t","replace","getTime","offset","percentage","subtract","isNumber","clamp","val","min","max","_idCounter","uniqueId","nameToId","toLowerCase","appendOrSelect","parent","selector","tag","element","select","append","safeNumber","logger","enableDebugLog","warn","log","debug","deprecate","fn","deprecated","warned","events","current","trigger","closure","setTimeout","RangedFilter","low","high","range","isFiltered","filterType","TwoDimensionalFilter","RangedTwoDimensionalFilter","fromBottomLeft","Infinity","x","y","baseMixin","_chart","sizeSvg","_svg","_useViewBoxResizing","attr","generateSvg","root","checkForMandatoryAttributes","applyFilters","dimension","fs","_filterHandler","_dimension","_group","_anchor","_root","_isChild","_width","_height","_orderSort","_legend","_commitHandler","_minWidth","_defaultWidthCalc","getBoundingClientRect","_widthCalc","_minHeight","_defaultHeightCalc","_heightCalc","_keyAccessor","_valueAccessor","_label","_ordering","_renderLabel","_title","keyAccessor","valueAccessor","_renderTitle","_controlsUseVisibility","_transitionDuration","_transitionDelay","_filterPrinter","_mandatoryAttributes","_chartGroup","_listeners","dispatch","_filters","filterRange","filterFunction","filterExact","_data","all","functor","node","minWidth","minHeight","useViewBoxResizing","expireCache","_groupName","ordering","orderFunction","quicksort","by","_computeOrderedGroups","dataCopy","slice","selectAll","anchor","chartGroup","classed","id","chartID","rootElement","svg","svgElement","resetSvg","remove","filterPrinter","filterPrinterFunction","controlsUseVisibility","useVisibility","turnOnControls","attribute","style","text","turnOffControls","transitionDuration","transitionDelay","preRender","forEach","result","_doRender","_activateRenderlets","event","pretransition","preRedraw","_doRedraw","commitHandler","redrawGroup","error","renderGroup","_invokeFilteredListener","filtered","_invokeZoomedListener","zoomed","_hasFilterHandler","some","hasFilterHandler","hasFilter","_removeFilterHandler","removeFilterHandler","_addFilterHandler","addFilterHandler","_resetFilterHandler","resetFilterHandler","replaceFilter","highlightSelected","fadeDeselected","resetHighlight","onClick","datum","filterHandler","legendables","legendHighlight","legendReset","legendToggle","isLegendableHidden","label","labelFunction","enableLabels","renderLabel","title","titleFunction","renderTitle","renderletFunction","on","legend","options","opts","applyOptions","listener","marginMixin","_margin","top","right","bottom","left","margins","effectiveWidth","effectiveHeight","colorMixin","_colors","scale","category20c","_defaultAccessor","_colorAccessor","colors","colorScale","quantize","ordinalColors","linearColors","linear","interpolate","interpolateHcl","colorAccessor","defaultColorAccessor","colorDomain","calculateColorDomain","newDomain","getColor","colorCalculator","coordinateGridMixin","compareDomains","d1","d2","elem","prepareXAxis","g","isOrdinal","elasticX","_x","_ordinalXDomain","xAxisMin","xAxisMax","xdom","_lastXDomain","rescale","rangeBands","xAxisLength","_rangeBandPadding","_useOuterPadding","_outerRangeBandPadding","_xAxis","renderVerticalGridLines","gridLineG","VERTICAL_CLASS","_renderVerticalGridLine","insert","GRID_LINE_CLASS","ticks","tickValues","lines","linesGEnter","enter","_xAxisY","exit","brushHeight","getClipPathId","generateClipPath","defs","_parent","chartBodyClip","padding","_clipPadding","yAxisHeight","drawChart","_brushOn","_prepareYAxis","plotData","_resizing","renderXAxis","elasticY","renderYAxis","renderBrush","redrawBrush","fadeDeselectedArea","configureMouseZoom","_mouseZoomable","_enableMouseZoom","_hasBeenMouseZoomable","_disableMouseZoom","zoomHandler","_refocused","_zoomOutRestrict","constraint","_xOriginalDomain","_rangeChart","intersectExtents","constrained","constrainExtent","domFilter","rangesEqual","ext1","ext2","extent","size","range1","range2","valueOf","hasRangeSelected","category10","_g","_chartBodyG","_xAxisLabel","_y","_yAxisLabel","_round","_unitCount","_focusChart","axis","orient","_xUnits","_xAxisPadding","_xAxisPaddingUnit","_xElasticity","_xAxisLabelPadding","_yAxis","_yAxisPadding","_yElasticity","_yAxisLabelPadding","_brush","brush","_renderHorizontalGridLine","_zoomScale","_zoom","behavior","zoom","_nullZoom","_useRightYAxis","resizing","rangeChart","focusChart","zoomScale","zoomOutRestrict","_generateG","href","location","split","gElement","mouseZoomable","chartBodyG","xScale","xOriginalDomain","xUnits","xAxis","xAxisPadding","xAxisPaddingUnit","unit","xUnitCount","useRightYAxis","map","axisXG","axisXLab","xAxisLabel","labelText","yAxisMin","yAxisMax","rangeRound","_renderHorizontalGridLinesForAxis","renderYAxisLabel","axisClass","rotation","labelXPosition","axisYLab","labelYPosition","Y_AXIS_LABEL_CLASS","renderYAxisAt","position","axisYG","axisPosition","_yAxisX","labelPosition","yAxisLabel","yScale","yAxis","renderHorizontalGridLines","yAxisPadding","_filter","_brushing","gBrush","setBrushY","setHandlePaths","resizeHandlePath","extendBrush","brushIsEmpty","rangedFilter","doTransition","clipPadding","_preprocessData","scaleExtent","refocused","c","brushOn","stackMixin","prepareValues","layer","layerIdx","valAccessor","accessor","String","values","hidden","domainFilter","_evadeDomainFilter","xDomain","p","findLayerByName","_stack","flattenStack","valueses","concat","visability","_stackLayout","layout","_titles","_hidableStacks","hidableStacks","hideStack","stackName","showStack","getValueAccessorByIndex","index","y0","titleAccessor","stackLayout","evadeDomainFilter","layers","flat","color","capMixin","_cap","_takeFront","_othersLabel","kv","_othersGrouper","topItems","restItems","restItemsSum","sum","restKeys","others","othersLabel","cappedKeyAccessor","cappedValueAccessor","rest","items","cap","count","takeFront","othersGrouper","grouperFunction","_onClick","bubbleMixin","_maxBubbleRelativeSize","_minRadiusWithLabel","_sortBubbleSize","_elasticRadius","BUBBLE_NODE_CLASS","BUBBLE_CLASS","MIN_RADIUS","radiusAccessor","radiusValueAccessor","sort","b","descending","_r","_rValueAccessor","bubbleRadiusScale","elasticRadius","calculateRadiusDomain","rMin","rMax","bubbleR","isNaN","shouldLabel","labelOpacity","labelPointerEvent","_doRenderLabel","bubbleGEnter","doUpdateLabels","labels","_doRenderTitles","doUpdateTitles","sortBubbleSize","minRadius","radius","minRadiusWithLabel","maxBubbleRelativeSize","relativeSize","isSelectedNode","pieChart","maxRadius","_radius","_givenRadius","pieData","arc","buildArcs","pie","pieLayout","_emptyCssClass","_emptyTitle","slices","_sliceGroupCssClass","_sliceCssClass","_labelGroupCssClass","_labelCssClass","createElements","updateElements","removeElements","highlightFilter","cx","cy","slicesEnter","createSliceNodes","createSlicePath","createTitles","createLabels","slicePath","fill","safeArc","attrTween","tweenPie","positionLabels","_applyLabelText","highlightSlice","whether","classes","_externalLabelRadius","_drawPaths","updateLabelPaths","polyline","arc2","outerRadius","_externalRadiusPadding","innerRadius","_current","startAngle","endAngle","centroid","updateSlicePaths","updateLabels","updateTitles","slicePaths","isSelectedSlice","_innerRadius","sliceTooSmall","angle","_minAngleForLabel","sliceHasNoData","isOffCanvas","path","highlightSliceFromLegendable","legendable","highlighted","_cx","_cy","slicesCap","externalRadiusPadding","minAngleForLabel","emptyTitle","externalLabels","externalLabelRadius","drawPaths","barChart","barHeight","renderLabels","layerIndex","_centerBar","_barWidth","LABEL_PADDING","renderBars","bars","_gap","calculateBarWidth","numberOfBars","rangeBand","barPadding","MIN_BAR_WIDTH","colorFilter","inv","item","match","_alwaysUseRounding","_rescale","_render","last","centerBar","outerPadding","gap","alwaysUseRounding","_xAxisMax","lineChart","drawLine","layersEnter","line","_interpolate","tension","_tension","_defined","defined","_dashStyle","safeD","drawArea","_renderArea","area","drawDots","chartBody","xyTipsOn","tooltipListClass","TOOLTIP_G_CLASS","tooltips","points","createRefLines","dots","DOT_CIRCLE_CLASS","getDotRadius","_dataPointFillOpacity","_dataPointStrokeOpacity","dot","showDot","showRefLines","hideDot","hideRefLines","drawLabels","Y_AXIS_REF_LINE_CLASS","X_AXIS_REF_LINE_CLASS","_dotRadius","yAxisX","yAxisRefPathD","xAxisRefPathD","_dataPointRadius","dashstyle","join","_xyTipsOn","layersList","dashStyle","renderArea","dotRadius","renderDataPoints","fillOpacity","strokeOpacity","_legendables","dataCount","_formatNumber","_html","html","formatNumber","formatter","tot","selected","dataTable","renderGroups","bAllFunctions","_columns","thead","headrow","headcols","HEAD_CSS_CLASS","_doColumnHeaderFormat","groups","nestEntries","rowGroup","_showGroups","GROUP_CSS_CLASS","LABEL_CSS_CLASS","entries","_order","ascending","_size","nest","sortKeys","_sortBy","_beginSlice","_endSlice","renderRows","rows","order","ROW_CSS_CLASS","rowEnter","v","COLUMN_CSS_CLASS","_doColumnValueFormat","_doColumnHeaderFnToString","_doColumnHeaderCapitalize","charAt","toUpperCase","i1","i2","lastIndexOf","substring","beginSlice","endSlice","columns","sortBy","showGroups","dataGrid","GRID_CSS_CLASS","itemGroup","_htmlGroup","renderItems","ITEM_CSS_CLASS","JSON","stringify","htmlGroup","sortByFunction","bubbleChart","renderNodes","bubbleG","bubbleLocator","updateNodes","removeNodes","bubbleX","bubbleY","compositeChart","calculateYAxisRanges","lyAxisMin","lyAxisMax","ryAxisMin","ryAxisMax","ranges","rightYAxisMin","rightYAxisMax","alignYAxes","alignYAxisRanges","extentRatio","prepareRightYAxis","needDomain","rightY","needRange","rightYAxis","prepareLeftYAxis","generateChildG","child","SUB_CHART_CLASS","leftYAxisChildren","_children","rightYAxisChildren","getYAxisMin","getYAxisMax","getAllXAxisMinFromChildCharts","getAllXAxisMaxFromChildCharts","_rightY","_childOptions","_shareColors","_shareTitle","_alignYAxes","_rightYAxis","_rightYAxisLabel","_rightYAxisLabelPadding","_rightAxisGridLines","__generateG","rightYAxisLabel","useRightAxisGridLines","childOptions","compose","subChartArray","children","shareColors","shareTitle","reduce","j","seriesChart","keySort","clearChart","_charts","resetChildren","keys","_seriesAccessor","_chartFunction","_seriesSort","_valueSort","childrenChanged","keep","nester","sortValues","nesting","sub","subChart","_compose","chartFunction","seriesAccessor","seriesSort","sortFunction","valueSort","geoChoroplethChart","generateLayeredData","isDataLayer","regionG","renderRegionG","renderPaths","groupAll","geoJson","layerSelector","isSelected","isDeselected","layerNameClass","regionClass","baseClasses","getKey","_geoJsons","paths","currentFill","_projectionFlag","_geoPath","geo","states","selectedRegion","overlayGeoJson","json","projection","geoJsons","geoPath","removeGeoJson","bubbleOverlay","initOverlayG","BUBBLE_OVERLAY_CLASS","initializeBubbles","mapData","_points","point","nodeG","getNodeG","circle","bubbleNodeClass","updateBubbles","flag","debugG","debugText","mouse","rowChart","calculateAxisScale","_elasticX","_rowData","drawAxis","axisG","drawGridLines","_rowCssClass","rootValue","_fixedBarHeight","_hasLabelOffsetY","_labelOffsetY","rect","isSelectedRow","translateX","renderTitleLabel","_titleRowCssClass","lab","_labelOffsetX","_dyOffset","titlelab","_titleLabelOffsetX","x0","_renderTitleLabel","rowsCap","fixedBarHeight","labelOffsetX","labelOffsetY","labelOffsety","titleLabelOffsetX","legendItemHeight","_itemHeight","_maxItems","_horizontal","_legendWidth","_itemWidth","_autoItemWidth","_legendText","itemEnter","clientHeight","_cumulativeLegendTextWidth","row","itemWidth","getBBox","translateBy","itemHeight","horizontal","legendWidth","autoItemWidth","legendText","maxItems","scatterPlot","elementSize","_existenceAccessor","_filtered","pow","_symbolSize","_excludedSize","_emptySize","renderTitles","symbol","resizeSymbolsWhere","condition","symbols","oldSize","_symbol","originalKeyAccessor","existenceAccessor","_locator","_highlightedSize","_excludedColor","_excludedOpacity","_emptyOpacity","_nonemptyOpacity","_emptyColor","__filter","excludedOpacity","excludedColor","type","customSymbol","symbolSize","highlightedSize","excludedSize","hiddenSize","emptySize","emptyColor","emptyOpacity","nonemptyOpacity","ranged2DFilter","numberDisplay","maxBin","sorted","_lastValue","one","none","valObj","newValue","span","ease","tween","interpStart","isFinite","interp","interpolateNumber","num","innerHTML","heatMap","filterAxis","cellsOnAxis","unfilteredCellsOnAxis","_chartBody","_cols","_rows","_colOrdering","_rowOrdering","_colScale","_rowScale","_xBorderRadius","_yBorderRadius","_colsLabel","_rowsLabel","colsLabel","rowsLabel","_xAxisOnClick","_yAxisOnClick","_boxOnClick","rowOrdering","cols","colOrdering","rowCount","colCount","boxWidth","boxHeight","rangeRoundBands","boxes","gEnter","boxOnClick","gCols","gColsText","xAxisOnClick","gRows","gRowsText","yAxisOnClick","handler","xBorderRadius","yBorderRadius","boxWhiskers","boxQuartiles","quantile","box","quartileData","quartiles","whiskerIndices","whiskers","whiskerData","outlierIndices","x1","__chart__","center","medianLine","whisker","outlier","Number","tickFormat","boxTick","whiskerTick","timer","flush","boxPlot","DEFAULT_WHISKERS_IQR","k","q1","q3","iqr","renderBoxes","boxesG","boxTransform","_box","updateBoxes","removeBoxes","_whiskersIqr","_whiskers","_tickFormat","_boxWidth","innerChartWidth","boxPadding","_calculatedBoxWidth","selectMenu","renderOptions","_select","OPTION_CSS_CLASS","onChange","selectedOptions","option","_promptValue","_multiple","setAttributes","_numberVisible","_promptText","_filterDisplayed","property","promptText","filterDisplayed","multiple","promptValue","numberVisible","abstractBubbleChart","baseChart","capped","colorChart","coordinateGridChart","marginable","stackableChart","271","d3_documentElement","ownerDocument","document","documentElement","d3_window","defaultView","d3_ascending","NaN","d3_number","d3_numeric","d3_bisector","compare","lo","hi","mid","d3_transposeLength","d3_range_integerScale","d3_class","ctor","properties","d3_Map","d3_map_escape","d3_map_proto","d3_map_zero","d3_map_unescape","d3_map_has","d3_map_remove","d3_map_keys","d3_map_size","d3_map_empty","d3_Set","d3_identity","d3_rebind","source","method","d3_vendorSymbol","d3_vendorPrefixes","prefixName","d3_noop","d3_dispatch","d3_dispatch_event","z","listeners","listenerByName","get","set","d3_eventPreventDefault","preventDefault","d3_eventSource","sourceEvent","d3_eventDispatch","of","thiz","argumentz","e1","e0","d3_selection","d3_subclass","d3_selectionPrototype","d3_selection_selector","d3_select","d3_selection_selectorAll","d3_selectAll","d3_selection_attr","attrNull","removeAttribute","attrNullNS","removeAttributeNS","space","local","attrConstant","setAttribute","attrConstantNS","setAttributeNS","attrFunction","attrFunctionNS","ns","qualify","d3_collapse","trim","d3_selection_classedRe","RegExp","requote","d3_selection_classes","d3_selection_classed","classedConstant","classedFunction","d3_selection_classedName","re","classList","getAttribute","lastIndex","test","d3_selection_style","priority","styleNull","removeProperty","styleConstant","setProperty","styleFunction","d3_selection_property","propertyNull","propertyConstant","propertyFunction","d3_selection_creator","namespace","namespaceURI","d3_nsXhtml","createElementNS","createNS","d3_selectionRemove","parentNode","removeChild","d3_selection_dataNode","__data__","d3_selection_filter","d3_selectMatches","d3_selection_sortComparator","comparator","d3_selection_each","m","d3_selection_enter","d3_selection_enterPrototype","d3_selection_enterInsertBefore","i0","j0","update","d3_selection_on","capture","onRemove","$","onAdd","wrap","d3_array","removeAll","d3_selection_onListener","d3_selection_onFilters","d3_selection_onFilter","related","relatedTarget","compareDocumentPosition","d3_event_dragSuppress","d3_event_dragId","click","w","d3_event_dragSelect","suppressClick","off","d3_mousePoint","container","changedTouches","ownerSVGElement","createSVGPoint","d3_mouse_bug44083","scrollX","scrollY","margin","border","ctm","getScreenCTM","pageX","pageY","clientX","clientY","matrixTransform","inverse","clientLeft","clientTop","d3_behavior_dragTouchId","identifier","d3_sgn","d3_cross2d","d3_acos","π","acos","d3_asin","halfπ","asin","d3_sinh","exp","d3_cosh","d3_tanh","d3_haversin","sin","d3_color","d3_hsl","h","d3_rgb_parse","d3_rgb_hsl","d3_hsl_rgb","m1","m2","vv","d3_rgb","d3_hcl","d3_lab","d3_lab_hcl","d3_rgb_lab","rgb","d3_hcl_lab","cos","d3_radians","d3_lab_rgb","d3_lab_xyz","d3_lab_X","d3_lab_Y","d3_lab_Z","d3_xyz_rgb","atan2","d3_degrees","sqrt","d3_xyz_lab","d3_rgbNumber","d3_rgbString","d3_rgb_hex","hsl","exec","parseFloat","d3_rgb_parseNumber","d3_rgb_names","parseInt","d3_rgb_xyz","d3_functor","d3_xhrType","response","url","mimeType","d3_xhr","respond","status","request","d3_xhrHasResponse","xhr","load","headers","XMLHttpRequest","responseType","XDomainRequest","onload","onerror","onreadystatechange","readyState","onprogress","progress","header","send","open","setRequestHeader","overrideMimeType","beforesend","abort","rebind","d3_xhr_fixCallback","responseText","d3_timer","then","now","d3_timer_queueTail","d3_timer_queueHead","d3_timer_interval","d3_timer_timeout","clearTimeout","d3_timer_frame","d3_timer_step","d3_timer_mark","d3_timer_sweep","t0","t1","d3_format_precision","LN10","d3_formatPrefix","d3_locale_numberFormat","locale","locale_decimal","decimal","locale_thousands","thousands","locale_grouping","grouping","locale_currency","currency","formatGroup","reverse","specifier","d3_format_re","align","sign","zfill","comma","prefix","suffix","integer","exponent","d3_format_types","d3_format_typeDefault","zcomma","fullSuffix","negative","formatPrefix","before","after","d3_date_utc","UTC","d3_time_interval","step","number","date","d0","d3_date","dt","times","range_utc","utc","d3_time_interval_utc","d3_locale_timeFormat","d3_time_format","template","string","charCodeAt","d3_time_formatPads","d3_time_formats","parse","H","M","S","L","Z","d3_time_parse","localZ","setFullYear","W","getDay","U","setHours","d3_time_parsers","d3_time_parseWeekdayAbbrev","d3_time_dayAbbrevRe","d3_time_dayAbbrevLookup","d3_time_parseWeekday","d3_time_dayRe","d3_time_dayLookup","d3_time_parseMonthAbbrev","d3_time_monthAbbrevRe","d3_time_monthAbbrevLookup","d3_time_parseMonth","d3_time_monthRe","d3_time_monthLookup","d3_time_parseLocaleFull","d3_time_parseLocaleDate","d3_time_parseLocaleTime","X","d3_time_parseAmPm","d3_time_periodLookup","locale_dateTime","dateTime","locale_date","locale_time","locale_periods","periods","locale_days","days","locale_shortDays","shortDays","locale_months","months","locale_shortMonths","shortMonths","multi","d3_time_formatMulti","d3_time_formatRe","d3_time_formatLookup","A","getMonth","B","d3_time_formatPad","getDate","getHours","I","d3_time","dayOfYear","getMilliseconds","getMinutes","getSeconds","sundayOfYear","mondayOfYear","getFullYear","Y","d3_time_zone","%","d3_time_parseDay","d3_time_parseHour24","d3_time_parseDayOfYear","d3_time_parseMilliseconds","d3_time_parseMonthNumber","d3_time_parseMinutes","d3_time_parseSeconds","d3_time_parseWeekNumberSunday","d3_time_parseWeekdayNumber","d3_time_parseWeekNumberMonday","d3_time_parseYear","d3_time_parseFullYear","d3_time_parseZone","d3_time_parseLiteralPercent","names","d3_time_numberRe","d3_time_expandYear","getTimezoneOffset","zs","zh","zm","d3_time_percentRe","formats","d3_adder","d3_adderSum","bv","av","d3_geo_streamGeometry","geometry","d3_geo_streamGeometryType","hasOwnProperty","d3_geo_streamLine","coordinates","closed","coordinate","lineStart","lineEnd","d3_geo_streamPolygon","polygonStart","polygonEnd","d3_geo_areaRingStart","nextPoint","λ","φ","dλ","λ0","sdλ","adλ","cosφ","sinφ","sinφ0","u","cosφ0","d3_geo_areaRingSum","λ00","φ00","d3_geo_area","d3_geo_cartesian","spherical","d3_geo_cartesianDot","d3_geo_cartesianCross","d3_geo_cartesianAdd","d3_geo_cartesianScale","vector","d3_geo_cartesianNormalize","d3_geo_spherical","cartesian","d3_geo_sphericalEqual","ε","d3_geo_centroidPoint","d3_geo_centroidPointXYZ","d3_geo_centroidW0","d3_geo_centroidX0","d3_geo_centroidY0","d3_geo_centroidZ0","d3_geo_centroidLineStart","z0","d3_geo_centroidW1","d3_geo_centroidX1","d3_geo_centroidY1","d3_geo_centroidZ1","d3_geo_centroid","d3_geo_centroidLineEnd","d3_geo_centroidRingStart","cz","d3_geo_centroidX2","d3_geo_centroidY2","d3_geo_centroidZ2","d3_geo_compose","invert","d3_true","d3_geo_clipPolygon","segments","clipStartInside","subject","clip","segment","p0","p1","d3_geo_clipPolygonIntersection","d3_geo_clipPolygonLinkCircular","entry","isSubject","array","other","d3_geo_clip","pointVisible","clipLine","clipStart","rotate","pointLine","pointRing","ring","ringListener","ringStart","ringEnd","clean","ringSegments","buffer","pop","polygon","polygonStarted","shift","d3_geo_clipSegmentLength1","rotatedClipStart","merge","d3_geo_pointInPolygon","d3_geo_clipSort","sphere","d3_geo_clipBufferListener","rejoin","d3_geo_clipAntimeridianLine","φ0","sλ0","λ1","φ1","sλ1","d3_geo_clipAntimeridianIntersect","cosφ1","sinλ0_λ1","atan","d3_geo_clipAntimeridianInterpolate","from","to","direction","meridian","parallel","meridianNormal","polarAngle","winding","reset","point0","antimeridian","τ","intersection","φarc","d3_geo_clipCircle","visible","cr","c0","v0","v00","point2","point1","smallRadius","code","intersect","notHemisphere","two","pa","pb","n1","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","uu","t2","q","δλ","polar","d3_geo_circleInterpolate","d3_geom_clipLine","y1","ax","ay","bx","dx","dy","d3_geo_clipExtent","corner","comparePoints","ca","cb","insidePolygon","wn","a1","linePoint","first","v_","x_","y_","x__","y__","v__","bufferListener","d3_geo_clipExtentMAX","listener_","inside","d3_geo_conic","projectAt","d3_geo_projectionMutator","parallels","d3_geo_conicEqualArea","forward","ρ","C","ρ0","ρ0_y","d3_geo_pathAreaRingStart","d3_geo_pathAreaPolygon","x00","y00","d3_geo_pathArea","d3_geo_pathBoundsPoint","d3_geo_pathBoundsX0","d3_geo_pathBoundsX1","d3_geo_pathBoundsY0","d3_geo_pathBoundsY1","d3_geo_pathBuffer","pointCircle","pointLineStart","stream","lineEndPolygon","d3_geo_pathBufferCircle","pointRadius","d3_geo_pathCentroidPoint","d3_geo_pathCentroidLineStart","d3_geo_pathCentroid","d3_geo_pathCentroidLineEnd","d3_geo_pathCentroidRingStart","d3_geo_pathContext","context","moveTo","lineTo","closePath","d3_geo_resample","project","resample","maxDepth","resampleRecursive","resampleNone","d3_geo_transformPoint","resampleLineTo","a0","b0","ringPoint","a00","b00","c00","b1","depth","δ2","φ2","λ2","x2","y2","dx2","dy2","dz","cosMinDistance","d3_geo_pathProjectStream","d3_geo_projectionRadians","d3_geo_transform","d3_geo_projection","projectRotate","δx","δy","d3_geo_rotation","δφ","δγ","invalidate","valid","projectResample","preclip","d3_geo_clipAntimeridian","postclip","clipAngle","clipExtent","output","translate","d3_geo_equirectangular","d3_geo_identityRotation","d3_geo_rotationλ","d3_geo_rotationφγ","d3_geo_forwardRotationλ","cosδφ","sinδφ","cosδγ","sinδγ","sr","d3_geo_circleAngle","PI","d3_geo_graticuleX","d3_geo_graticuleY","d3_source","d3_target","d3_geo_interpolate","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","distance","d3_geo_lengthLineStart","cosΔλ","d3_geo_lengthSum","d3_geo_length","d3_geo_azimuthal","azimuthal","cosλ","sinc","cosc","d3_geo_conicConformal","F","tan","d3_geo_mercator","d3_geo_conicEquidistant","G","d3_geo_mercatorProjection","clipAuto","d3_geo_transverseMercator","d3_geom_pointX","d3_geom_pointY","d3_geom_hullUpper","hull","hs","d3_geom_hullOrder","d3_geom_polygonInside","d3_geom_polygonIntersect","x3","x21","x43","y3","y21","y43","ua","d3_geom_polygonClosed","d3_geom_voronoiBeach","d3_geom_voronoiRedBlackNode","edge","site","d3_geom_voronoiCreateBeach","beach","d3_geom_voronoiBeachPool","d3_geom_voronoiDetachBeach","d3_geom_voronoiDetachCircle","d3_geom_voronoiBeaches","d3_geom_voronoiRemoveBeach","vertex","previous","P","next","N","disappearing","lArc","unshift","rArc","iArc","nArcs","d3_geom_voronoiSetEdgeEnd","d3_geom_voronoiCreateEdge","d3_geom_voronoiAttachCircle","d3_geom_voronoiAddBeach","dxl","dxr","directrix","d3_geom_voronoiLeftBreakPoint","d3_geom_voronoiRightBreakPoint","R","newArc","lSite","rSite","hb","hc","rfocx","rfocy","pby2","lfocx","lfocy","plby2","hl","aby2","d3_geom_voronoiCell","edges","d3_geom_voronoiCloseCells","cell","iHalfEdge","halfEdges","nHalfEdges","cells","d3_geom_voronoiCells","iCell","prepare","d3_geom_voronoiHalfEdge","d3_geom_voronoiCreateBorderEdge","d3_geom_voronoiHalfEdgeOrder","d3_geom_voronoiCircle","cSite","ε2","ha","d3_geom_voronoiCirclePool","d3_geom_voronoiCircles","d3_geom_voronoiFirstCircle","d3_geom_voronoiClipEdges","d3_geom_voronoiEdges","d3_geom_voronoiConnectEdge","vb","fm","fb","va","lx","ly","rx","ry","fx","fy","d3_geom_voronoiEdge","d3_geom_voronoiRedBlackTree","d3_geom_voronoiRedBlackRotateLeft","tree","d3_geom_voronoiRedBlackRotateRight","d3_geom_voronoiRedBlackFirst","d3_geom_voronoi","sites","bbox","d3_geom_voronoiVertexOrder","diagram","d3_geom_voronoiTriangleArea","d3_geom_quadtreeCompatX","d3_geom_quadtreeCompatY","d3_geom_quadtreeNode","leaf","nodes","d3_geom_quadtreeVisit","sx","sy","d3_geom_quadtreeFind","closestPoint","minDistance2","find","distance2","xm","ym","below","d3_interpolateRgb","ar","ag","ab","br","bg","bb","d3_interpolateObject","d3_interpolate","d3_interpolateNumber","d3_interpolateString","am","bm","bs","bi","d3_interpolate_numberA","d3_interpolate_numberB","interpolators","d3_interpolateArray","na","nb","n0","d3_ease_clamp","d3_ease_reverse","d3_ease_reflect","d3_ease_quad","d3_ease_cubic","d3_ease_cubicInOut","t3","d3_ease_poly","d3_ease_sin","d3_ease_exp","d3_ease_circle","d3_ease_elastic","d3_ease_back","d3_ease_bounce","d3_interpolateHcl","hcl","ah","ac","al","bh","bc","bl","d3_interpolateHsl","as","d3_interpolateLab","aa","ba","d3_interpolateRound","d3_transform","r0","r1","kx","d3_transformNormalize","kz","d3_transformDot","ky","d3_transformCombine","skew","d3_interpolateTransformPop","d3_interpolateTranslate","ta","tb","d3_interpolateRotate","ra","rb","d3_interpolateSkew","wa","wb","d3_interpolateScale","ka","kb","d3_interpolateTransform","transform","d3_uninterpolateNumber","d3_uninterpolateClamp","d3_layout_bundlePath","link","lca","d3_layout_bundleLeastCommonAncestor","d3_layout_bundleAncestors","ancestors","aNodes","bNodes","aNode","bNode","sharedNode","d3_layout_forceDragstart","fixed","d3_layout_forceDragend","d3_layout_forceMouseover","px","py","d3_layout_forceMouseout","d3_layout_forceAccumulate","quad","alpha","charges","charge","random","pointCharge","d3_layout_hierarchyRebind","hierarchy","links","d3_layout_hierarchyLinks","d3_layout_hierarchyVisitBefore","d3_layout_hierarchyVisitAfter","nodes2","d3_layout_hierarchyChildren","d3_layout_hierarchyValue","d3_layout_hierarchySort","d3_layout_stackX","d3_layout_stackY","d3_layout_stackOut","d3_layout_stackOrderDefault","d3_layout_stackOffsetZero","d3_layout_stackMaxIndex","d3_layout_stackReduceSum","d3_layout_stackSum","d3_layout_histogramBinSturges","d3_layout_histogramBinFixed","LN2","d3_layout_histogramRange","d3_layout_packSort","d3_layout_packInsert","_pack_next","_pack_prev","d3_layout_packSplice","d3_layout_packIntersects","dr","d3_layout_packSiblings","bound","xMin","xMax","yMin","yMax","d3_layout_packLink","d3_layout_packPlace","isect","s1","s2","d3_layout_packUnlink","d3_layout_packTransform","db","da","d3_layout_treeSeparation","d3_layout_treeLeft","d3_layout_treeRight","d3_layout_treeMove","wm","wp","change","d3_layout_treeShift","d3_layout_treeAncestor","vim","ancestor","d3_layout_clusterY","d3_layout_clusterX","d3_layout_clusterLeft","d3_layout_clusterRight","d3_layout_treemapPadNull","d3_layout_treemapPad","d3_scaleExtent","stop","d3_scaleRange","rangeExtent","d3_scale_bilinear","uninterpolate","d3_scale_nice","nice","d3_scale_niceStep","d3_scale_niceIdentity","d3_scale_polylinear","bisect","d3_scale_linear","input","d3_scale_linearTicks","d3_scale_linearTickFormat","d3_scale_linearNice","copy","d3_scale_linearRebind","d3_scale_linearTickRange","err","d3_scale_linearPrecision","d3_scale_linearFormatPrecision","d3_scale_linearFormatSignificant","d3_scale_log","base","positive","niced","d3_scale_logNiceNegative","d3_scale_logFormat","d3_scale_pow","powp","d3_scale_powPow","powb","d3_scale_ordinal","ranger","steps","xi","rangePoints","rangeRoundPoints","d3_scale_quantile","thresholds","quantiles","invertExtent","d3_scale_quantize","d3_scale_threshold","d3_scale_identity","identity","d3_zero","d3_svg_arcInnerRadius","d3_svg_arcOuterRadius","d3_svg_arcStartAngle","d3_svg_arcEndAngle","d3_svg_arcPadAngle","padAngle","d3_svg_arcSweep","d3_svg_arcCornerTangents","rc","cw","x01","y01","ox","oy","D","cx0","cx1","dx0","dy0","dx1","dy1","d3_svg_line","d3_svg_lineLinear","interpolateKey","d3_svg_lineInterpolators","d3_svg_lineLinearClosed","d3_svg_lineStep","d3_svg_lineStepBefore","d3_svg_lineStepAfter","d3_svg_lineCardinalOpen","d3_svg_lineHermite","d3_svg_lineCardinalTangents","d3_svg_lineCardinalClosed","d3_svg_lineCardinal","tangents","pi","lp","p2","d3_svg_lineBasis","d3_svg_lineDot4","d3_svg_lineBasisBezier3","d3_svg_lineBasisBezier","d3_svg_lineBasisOpen","d3_svg_lineBasisClosed","d3_svg_lineBundle","d3_svg_lineBasisBezier1","d3_svg_lineBasisBezier2","d3_svg_lineSlope","d3_svg_lineFiniteDifferences","d3_svg_lineMonotoneTangents","d3_svg_lineMonotone","d3_svg_lineRadial","d3_svg_area","points1","interpolateReverse","points0","fx0","fy0","fx1","fy1","d3_svg_chordRadius","d3_svg_diagonalProjection","d3_svg_diagonalRadialProjection","d3_svg_symbolSize","d3_svg_symbolType","d3_svg_symbolCircle","d3_selection_interruptNS","lock","activeId","active","interrupt","d3_transition","d3_transitionPrototype","d3_transition_tween","d3_transition_text","textContent","d3_transitionNamespace","d3_transitionNode","inherit","schedule","elapsed","cancelId","cancel","tick","tweens","d3_svg_axisX","d3_svg_axisY","d3_time_formatIsoNative","toISOString","d3_time_scale","methods","tickMethod","d3_time_scaleSteps","year","d3_time_scaleMilliseconds","d3_time_scaleDate","interval","skip","skipped","d3_json","d3_html","d3_document","createRange","selectNode","body","createContextualFragment","d3_arraySlice","childNodes","nodeType","d3_element_prototype","Element","d3_element_setAttribute","d3_element_setAttributeNS","d3_style_prototype","CSSStyleDeclaration","d3_style_setProperty","mean","median","numbers","variance","deviation","d3_bisect","bisectLeft","bisectRight","bisector","shuffle","permute","indexes","permutes","pairs","transpose","matrix","zip","arrays","merged","isArray","mapType","rollup","keyValue","setter","valuesByKey","sortKey","keyMap","d3_requote_re","querySelector","querySelectorAll","d3_selectMatcher","matches","Sizzle","matchesSelector","subgroup","subnode","subgroups","d3_nsPrefix","xhtml","xlink","xml","xmlns","getAttributeNS","contains","getComputedStyle","getPropertyValue","appendChild","insertBefore","groupData","nodeData","enterNodes","exitNodes","nodeByKeyValue","keyValues","nextSibling","args","upgroup","mouseenter","mouseleave","navigator","userAgent","touch","touches","drag","mousedown","touchstart","dragstart","move","moved","position1","dragId","position0","dragged","dragOffset","ended","dragSubject","dragName","dragRestore","that","correspondingElement","origin","τε","SQRT2","interpolateZoom","ux0","uy0","w0","ux1","uy1","w1","coshr0","mousedowned","d3_behavior_zoomWheel","mousewheeled","dblclicked","touchstarted","view","scaleTo","translateTo","zoomTo","center0","zoomstarted","zooming","zoomended","location0","mousemove","mouseup","d3_selection_interrupt","relocate","scale0","locations0","started","touchmove","touchend","targets","changed","touchtime","distance0","l0","l1","distance1","scale1","zoomName","mousewheelTimer","translate0","d3_behavior_zoomDelta","shiftKey","d3_behavior_zoomInfinity","deltaY","deltaMode","wheelDelta","detail","view1","d3_transitionInheritId","d3_hslPrototype","brighter","darker","d3_hclPrototype","d3_lab_K","d3_labPrototype","d3_rgbPrototype","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","dsv","delimiter","typedResponse","formatRow","formatValue","reFormat","delimiterCode","parseRows","Function","token","EOF","eol","EOL","formatRows","fieldSet","fields","field","csv","tsv","d3_formatPrefixes","fromCharCode","toPrecision","toExponential","toFixed","getUTCDate","getUTCDay","getUTCFullYear","getUTCHours","getUTCMilliseconds","getUTCMinutes","getUTCMonth","getUTCSeconds","setDate","d3_time_prototype","setUTCDate","setDay","setUTCDay","setUTCFullYear","setUTCHours","setMilliseconds","setUTCMilliseconds","setMinutes","setUTCMinutes","setMonth","setUTCMonth","setSeconds","setUTCSeconds","setTime","day","years","week","sunday","weeks","weekOfYear","-","0","numberFormat","timeFormat","d3_locale_enUS","d3_adderTemp","d3_geo_streamObjectType","Feature","feature","FeatureCollection","features","Sphere","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeometryCollection","geometries","d3_geo_areaSum","bounds","normal","equatorial","inflection","λ_","λi","φi","dλSum","λ__","φ__","compareRanges","withinRange","best","conicEqualArea","raw","albers","albersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","alaska","hawaii","pointStream","lower48Stream","alaskaStream","hawaiiStream","d3_geo_pathAreaSum","d3_geo_pathBounds","contextStream","cacheStream","projectStream","projectionMutator","equirectangular","Δλ","sinΔλ","sinφ1","graticule","X0","DX","X1","Y0","DY","Y1","outline","majorExtent","minorExtent","majorStep","minorStep","greatArc","source_","target_","d3_geo_azimuthalEqualArea","cosλcosφ","azimuthalEqualArea","d3_geo_azimuthalEquidistant","azimuthalEquidistant","conicConformal","conicEquidistant","d3_geo_gnomonic","gnomonic","mercator","d3_geo_orthographic","orthographic","d3_geo_stereographic","stereographic","transverseMercator","geom","vertices","flippedPoints","upper","lower","skipLeft","skipRight","d3_geom_polygonPrototype","grandpa","uncle","sibling","voronoi","polygons","d3_geom_voronoiClipExtent","triangles","s0","delaunay","quadtree","nx","ny","insertChild","nPoint","xs","ys","x1_","y1_","x2_","y2_","compat","visit","interpolateRgb","interpolateObject","interpolateString","interpolateArray","d3_ease_default","d3_ease","poly","cubic","elastic","back","bounce","d3_ease_mode","in","out","in-out","out-in","interpolateHsl","interpolateLab","interpolateRound","baseVal","consolidate","d3_transformIdentity","interpolateTransform","bundle","chord","relayout","groupSums","groupIndex","subgroupIndex","chords","sortGroups","sortSubgroups","di","dj","subindex","sortChords","resort","force","repulse","dw","dn","theta2","chargeDistance2","dragmove","resume","distances","strengths","friction","linkDistance","d3_layout_forceLinkDistance","linkStrength","d3_layout_forceLinkStrength","d3_layout_forceChargeDistance2","gravity","weight","chargeDistance","theta","neighbors","candidates","childs","revalue","partition","arcs","d3_layout_pieSortByValue","series","orders","offsets","d3_layout_stackOrders","d3_layout_stackOffsets","inside-out","sums","tops","bottoms","default","silhouette","wiggle","s3","o0","expand","zero","histogram","bin","bins","valuer","binner","frequency","pack","root0","root1","wrapTree","firstWalk","secondWalk","nodeSize","sizeNode","tx","separation","node1","queue","siblings","midpoint","apportion","vip","vop","vom","sip","sop","sim","som","cluster","previousNode","treemap","squarify","score","pad","remaining","mode","worst","stickify","rmax","rmin","ratio","stickies","sticky","padFunction","padConstant","µ","σ","logNormal","bates","irwinHall","d3_category10","category20","d3_category20","category20b","d3_category20b","d3_category20c","threshold","circleSegment","rp","ap","padRadius","d3_svg_arcAuto","h1","h0","cornerRadius","rc1","rc0","oc","kc","lc","t30","t12","t03","t21","linear-closed","step-before","step-after","basis","basis-open","basis-closed","cardinal","cardinal-open","cardinal-closed","monotone","radial","equals","curve","diagonal","p3","projection_","d3_svg_symbols","cross","diamond","d3_svg_symbolTan30","square","triangle-down","d3_svg_symbolSqrt3","triangle-up","symbolTypes","d3_transitionId","d3_transitionInherit","subnodes","nameNS","attrTweenNS","styleString","styleTween","inheritId","id0","id1","tickTransform","tickArguments_","tickFormat_","tickEnter","tickExit","tickUpdate","tickSpacing","innerTickSize","tickPadding","pathUpdate","lineEnter","lineUpdate","textEnter","textUpdate","outerTickSize","d3_svg_axisDefaultOrient","d3_svg_axisOrients","tickSize","tickSubdivide","brushstart","background","resizes","d3_svg_brushCursor","gUpdate","backgroundUpdate","redrawX","redrawY","xExtent","yExtent","keydown","keyCode","dragging","keyup","brushmove","altKey","resizingX","move1","resizingY","event_","yClamp","xClamp","yExtentDomain","xExtentDomain","brushend","eventTarget","ex","ey","d3_svg_brushResizes","extent1","extent0","yi","nw","ne","se","sw","d3_time_formatUtc","d3_time_formatIso","iso","second","seconds","minute","minutes","hour","timezone","hours","month","d3_time_scaleLocalMethods","d3_time_scaleLocalFormat","d3_time_scaleUtcMethods","d3_time_scaleUtcFormat","responseXML","272","273","bisect_by","heap_by","heap","sift","heapselect_by","heapselect","insertionsort_by","insertionsort","quicksort_by","quicksort_sizeThreshold","sixth","i5","i3","i4","e2","e3","e4","x4","e5","x5","pivot1","pivotValue1","pivot2","pivotValue2","less","great","pivotsEqual","ek","xk","greatValue","lessValue","crossfilter_arrayUntyped","crossfilter_arrayLengthenUntyped","crossfilter_arrayWidenUntyped","crossfilter_filterExact","crossfilter_filterRange","crossfilter_filterAll","crossfilter_null","crossfilter_zero","crossfilter_reduceIncrement","crossfilter_reduceDecrement","crossfilter_reduceAdd","crossfilter_reduceSubtract","newData","crossfilter_arrayLengthen","dataListeners","removeData","newIndex","crossfilter_index","removed","filterListeners","removeDataListeners","preAdd","newValues","crossfilter_range","refilter","lo1","hi1","refilterFunction","lo0","hi0","oldValues","oldIndex","postAdd","indexListeners","reIndex","filterIndexBounds","filterIndexFunction","added","groupIncrement","groupCapacity","crossfilter_arrayWiden","groupWidth","crossfilter_capacity","g0","oldGroups","reduceAdd","initial","reduceInitial","k0","resetNeeded","updateMany","resetMany","updateOne","resetOne","oldK","seenGroups","filterOne","reduceRemove","reduceCount","reduceSum","orderNatural","dispose","dimensionGroups","reduceValue","crossfilter_array8","crossfilter_array16","crossfilter_array32","Uint8Array","Uint16Array","Uint32Array","274","275","276","277","lengthen","triggerOnChange","index1","index2","index3","index4","truncate","isElementFiltered","ignore_dimensions","len","mask","subarrays","zeroExceptMask","iterable","newIterablesIndexCount","newIterablesIndexFilterStatus","unsortedIndex","iterablesEmptyRows","sortMap","iterablesIndexCount","iterablesIndexFilterStatus","old_n0","oldIterablesIndexFilterStatus","oldiiclength","xfilterArray","arrayLengthen","index5","valueIndexAdded","valueIndexRemoved","newAdded","newRemoved","xfilterFilter","indexLength","top_offset","toSkip","bottom_offset","arrayWiden","n0old","zeroExcept","filterOffset","notFilter","onlyExcept","xfilterReduce","reduceIncrement","reduceDecrement","reduceSubtract","xfilterHeapselect","xfilterHeap","masks","accessorPath","tmp","only","allFiltered","callbacks","eventName","bitarray","array8","array16","array32","packageJson","278","crossfilter_bitarray","dest","src","onlyOffset","onlyOne","279","280","281","282","xFilterHeap","283","284","deep","285","xFilterInsertionsort","286","287","_from","_id","_inBundle","_integrity","_location","_phantomChildren","_requested","registry","escapedName","rawSpec","saveSpec","fetchSpec","_requiredBy","_resolved","_shasum","_spec","_where","author","bugs","bundleDependencies","contributors","dependencies","lodash.result","description","devDependencies","browserify","eslint","package-json-versionify","semver","uglify-js","vows","eslintConfig","env","browser","globals","extends","files","homepage","keywords","license","main","maintainers","repository","scripts","benchmark","build","288","global","getValue","isHostObject","Hash","hashClear","nativeCreate","hashDelete","hashGet","HASH_UNDEFINED","hashHas","hashSet","ListCache","listCacheClear","listCacheDelete","assocIndexOf","listCacheGet","listCacheHas","listCacheSet","MapCache","mapCacheClear","hash","Map","mapCacheDelete","getMapData","mapCacheGet","mapCacheHas","mapCacheSet","eq","baseIsNative","isObject","isMasked","isFunction","reIsNative","reIsHostCtor","toSource","baseToString","isSymbol","symbolToString","INFINITY","castPath","stringToPath","isKeyable","getNative","isKey","reIsPlainProp","reIsDeepProp","func","maskSrcKey","toKey","funcToString","memoize","resolver","FUNC_ERROR_TEXT","memoized","cache","Cache","objectToString","funcTag","genTag","isObjectLike","symbolTag","defaultValue","reLeadingDot","rePropName","reRegExpChar","reEscapeChar","freeGlobal","freeSelf","arrayProto","funcProto","objectProto","coreJsData","uid","IE_PROTO","Symbol","symbolProto","quote","289","content","locals","290","sources","mappings","file","sourcesContent","sourceRoot","291","292"],"mappings":"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","file":"static/js/0.7fa53421.chunk.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 266:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_crossfilter2__ = __webpack_require__(276);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_crossfilter2___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_crossfilter2__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_dc__ = __webpack_require__(270);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_dc___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_dc__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_react_loading_animation__ = __webpack_require__(107);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_react_loading_animation___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_react_loading_animation__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_dc_dc_css__ = __webpack_require__(289);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_dc_dc_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_dc_dc_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__chart_css__ = __webpack_require__(291);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__chart_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__chart_css__);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Vis=function Vis(data,Charts){var _class,_temp;return _temp=_class=function(_PureComponent){_inherits(Visualisation,_PureComponent);function Visualisation(){_classCallCheck(this,Visualisation);var _this=_possibleConstructorReturn(this,(Visualisation.__proto__||Object.getPrototypeOf(Visualisation)).call(this));_this.state={loading:true};_this.ndx={};_this.resize=_this.resize.bind(_this);return _this;}_createClass(Visualisation,[{key:\"componentDidMount\",value:function componentDidMount(){console.time(\"ndx\");this.ndx=__WEBPACK_IMPORTED_MODULE_2_crossfilter2___default()(data);console.timeEnd(\"ndx\");this.setState({loading:false});window.addEventListener(\"resize\",this.resize);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){window.removeEventListener(\"resize\",this.resize);}},{key:\"getChildContext\",value:function getChildContext(){return{ndx:this.ndx};}},{key:\"resize\",value:function resize(){// TODO: maybe throttle this\n__WEBPACK_IMPORTED_MODULE_3_dc___default.a.disableTransitions=true;__WEBPACK_IMPORTED_MODULE_3_dc___default.a.renderAll();__WEBPACK_IMPORTED_MODULE_3_dc___default.a.disableTransitions=false;}},{key:\"render\",value:function render(){if(this.state.loading){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4_react_loading_animation___default.a,{width:\"300px\",height:\"300px\"});}else{return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(Charts,null);}}}]);return Visualisation;}(__WEBPACK_IMPORTED_MODULE_0_react__[\"PureComponent\"]),_class.childContextTypes={ndx:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object.isRequired},_temp;};/* harmony default export */ __webpack_exports__[\"default\"] = (Vis);\n\n/***/ }),\n\n/***/ 269:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction crossfilter_identity(d) {\n  return d;\n}\n\nmodule.exports = crossfilter_identity;\n\n\n/***/ }),\n\n/***/ 270:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n *  dc 2.1.8\n *  http://dc-js.github.io/dc.js/\n *  Copyright 2012-2016 Nick Zhu & the dc.js Developers\n *  https://github.com/dc-js/dc.js/blob/master/AUTHORS\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n(function() { function _dc(d3, crossfilter) {\n'use strict';\n\n/**\n * The entire dc.js library is scoped under the **dc** name space. It does not introduce\n * anything else into the global name space.\n *\n * Most `dc` functions are designed to allow function chaining, meaning they return the current chart\n * instance whenever it is appropriate.  The getter forms of functions do not participate in function\n * chaining because they return values that are not the chart, although some,\n * such as {@link dc.baseMixin#svg .svg} and {@link dc.coordinateGridMixin#xAxis .xAxis},\n * return values that are themselves chainable d3 objects.\n * @namespace dc\n * @version 2.1.8\n * @example\n * // Example chaining\n * chart.width(300)\n *      .height(300)\n *      .filter('sunday');\n */\n/*jshint -W079*/\nvar dc = {\n    version: '2.1.8',\n    constants: {\n        CHART_CLASS: 'dc-chart',\n        DEBUG_GROUP_CLASS: 'debug',\n        STACK_CLASS: 'stack',\n        DESELECTED_CLASS: 'deselected',\n        SELECTED_CLASS: 'selected',\n        NODE_INDEX_NAME: '__index__',\n        GROUP_INDEX_NAME: '__group_index__',\n        DEFAULT_CHART_GROUP: '__default_chart_group__',\n        EVENT_DELAY: 40,\n        NEGLIGIBLE_NUMBER: 1e-10\n    },\n    _renderlet: null\n};\n/*jshint +W079*/\n\n/**\n * The dc.chartRegistry object maintains sets of all instantiated dc.js charts under named groups\n * and the default group.\n *\n * A chart group often corresponds to a crossfilter instance. It specifies\n * the set of charts which should be updated when a filter changes on one of the charts or when the\n * global functions {@link dc.filterAll dc.filterAll}, {@link dc.refocusAll dc.refocusAll},\n * {@link dc.renderAll dc.renderAll}, {@link dc.redrawAll dc.redrawAll}, or chart functions\n * {@link dc.baseMixin#renderGroup baseMixin.renderGroup},\n * {@link dc.baseMixin#redrawGroup baseMixin.redrawGroup} are called.\n *\n * @namespace chartRegistry\n * @memberof dc\n * @type {{has, register, deregister, clear, list}}\n */\ndc.chartRegistry = (function () {\n    // chartGroup:string => charts:array\n    var _chartMap = {};\n\n    function initializeChartGroup (group) {\n        if (!group) {\n            group = dc.constants.DEFAULT_CHART_GROUP;\n        }\n\n        if (!_chartMap[group]) {\n            _chartMap[group] = [];\n        }\n\n        return group;\n    }\n\n    return {\n        /**\n         * Determine if a given chart instance resides in any group in the registry.\n         * @method has\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @returns {Boolean}\n         */\n        has: function (chart) {\n            for (var e in _chartMap) {\n                if (_chartMap[e].indexOf(chart) >= 0) {\n                    return true;\n                }\n            }\n            return false;\n        },\n\n        /**\n         * Add given chart instance to the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method register\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        register: function (chart, group) {\n            group = initializeChartGroup(group);\n            _chartMap[group].push(chart);\n        },\n\n        /**\n         * Remove given chart instance from the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method deregister\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        deregister: function (chart, group) {\n            group = initializeChartGroup(group);\n            for (var i = 0; i < _chartMap[group].length; i++) {\n                if (_chartMap[group][i].anchorName() === chart.anchorName()) {\n                    _chartMap[group].splice(i, 1);\n                    break;\n                }\n            }\n        },\n\n        /**\n         * Clear given group if one is provided, otherwise clears all groups.\n         * @method clear\n         * @memberof dc.chartRegistry\n         * @param {String} group Group name\n         */\n        clear: function (group) {\n            if (group) {\n                delete _chartMap[group];\n            } else {\n                _chartMap = {};\n            }\n        },\n\n        /**\n         * Get an array of each chart instance in the given group.\n         * If no group is provided, the charts in the default group are returned.\n         * @method list\n         * @memberof dc.chartRegistry\n         * @param {String} [group] Group name\n         * @returns {Array<Object>}\n         */\n        list: function (group) {\n            group = initializeChartGroup(group);\n            return _chartMap[group];\n        }\n    };\n})();\n\n/**\n * Add given chart instance to the given group, creating the group if necessary.\n * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n * @memberof dc\n * @method registerChart\n * @param {Object} chart dc.js chart instance\n * @param {String} [group] Group name\n */\ndc.registerChart = function (chart, group) {\n    dc.chartRegistry.register(chart, group);\n};\n\n/**\n * Remove given chart instance from the given group, creating the group if necessary.\n * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n * @memberof dc\n * @method deregisterChart\n * @param {Object} chart dc.js chart instance\n * @param {String} [group] Group name\n */\ndc.deregisterChart = function (chart, group) {\n    dc.chartRegistry.deregister(chart, group);\n};\n\n/**\n * Determine if a given chart instance resides in any group in the registry.\n * @memberof dc\n * @method hasChart\n * @param {Object} chart dc.js chart instance\n * @returns {Boolean}\n */\ndc.hasChart = function (chart) {\n    return dc.chartRegistry.has(chart);\n};\n\n/**\n * Clear given group if one is provided, otherwise clears all groups.\n * @memberof dc\n * @method deregisterAllCharts\n * @param {String} group Group name\n */\ndc.deregisterAllCharts = function (group) {\n    dc.chartRegistry.clear(group);\n};\n\n/**\n * Clear all filters on all charts within the given chart group. If the chart group is not given then\n * only charts that belong to the default chart group will be reset.\n * @memberof dc\n * @method filterAll\n * @param {String} [group]\n */\ndc.filterAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].filterAll();\n    }\n};\n\n/**\n * Reset zoom level / focus on all charts that belong to the given chart group. If the chart group is\n * not given then only charts that belong to the default chart group will be reset.\n * @memberof dc\n * @method refocusAll\n * @param {String} [group]\n */\ndc.refocusAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        if (charts[i].focus) {\n            charts[i].focus();\n        }\n    }\n};\n\n/**\n * Re-render all charts belong to the given chart group. If the chart group is not given then only\n * charts that belong to the default chart group will be re-rendered.\n * @memberof dc\n * @method renderAll\n * @param {String} [group]\n */\ndc.renderAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].render();\n    }\n\n    if (dc._renderlet !== null) {\n        dc._renderlet(group);\n    }\n};\n\n/**\n * Redraw all charts belong to the given chart group. If the chart group is not given then only charts\n * that belong to the default chart group will be re-drawn. Redraw is different from re-render since\n * when redrawing dc tries to update the graphic incrementally, using transitions, instead of starting\n * from scratch.\n * @memberof dc\n * @method redrawAll\n * @param {String} [group]\n */\ndc.redrawAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].redraw();\n    }\n\n    if (dc._renderlet !== null) {\n        dc._renderlet(group);\n    }\n};\n\n/**\n * If this boolean is set truthy, all transitions will be disabled, and changes to the charts will happen\n * immediately.\n * @memberof dc\n * @member disableTransitions\n * @type {Boolean}\n * @default false\n */\ndc.disableTransitions = false;\n\n/**\n * Start a transition on a selection if transitions are globally enabled\n * ({@link dc.disableTransitions} is false) and the duration is greater than zero; otherwise return\n * the selection. Since most operations are the same on a d3 selection and a d3 transition, this\n * allows a common code path for both cases.\n * @memberof dc\n * @method transition\n * @param {d3.selection} selection - the selection to be transitioned\n * @param {Number|Function} [duration=250] - the duration of the transition in milliseconds, a\n * function returning the duration, or 0 for no transition\n * @param {Number|Function} [delay] - the delay of the transition in milliseconds, or a function\n * returning the delay, or 0 for no delay\n * @param {String} [name] - the name of the transition (if concurrent transitions on the same\n * elements are needed)\n * @returns {d3.transition|d3.selection}\n */\ndc.transition = function (selection, duration, delay, name) {\n    if (dc.disableTransitions || duration <= 0) {\n        return selection;\n    }\n\n    var s = selection.transition(name);\n\n    if (duration >= 0 || duration !== undefined) {\n        s = s.duration(duration);\n    }\n    if (delay >= 0 || delay !== undefined) {\n        s = s.delay(delay);\n    }\n\n    return s;\n};\n\n/* somewhat silly, but to avoid duplicating logic */\ndc.optionalTransition = function (enable, duration, delay, name) {\n    if (enable) {\n        return function (selection) {\n            return dc.transition(selection, duration, delay, name);\n        };\n    } else {\n        return function (selection) {\n            return selection;\n        };\n    }\n};\n\n// See http://stackoverflow.com/a/20773846\ndc.afterTransition = function (transition, callback) {\n    if (transition.empty() || !transition.duration) {\n        callback.call(transition);\n    } else {\n        var n = 0;\n        transition\n            .each(function () { ++n; })\n            .each('end', function () {\n                if (!--n) {\n                    callback.call(transition);\n                }\n            });\n    }\n};\n\n/**\n * @namespace units\n * @memberof dc\n * @type {{}}\n */\ndc.units = {};\n\n/**\n * The default value for {@link dc.coordinateGridMixin#xUnits .xUnits} for the\n * {@link dc.coordinateGridMixin Coordinate Grid Chart} and should\n * be used when the x values are a sequence of integers.\n * It is a function that counts the number of integers in the range supplied in its start and end parameters.\n * @method integers\n * @memberof dc.units\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @example\n * chart.xUnits(dc.units.integers) // already the default\n * @param {Number} start\n * @param {Number} end\n * @returns {Number}\n */\ndc.units.integers = function (start, end) {\n    return Math.abs(end - start);\n};\n\n/**\n * This argument can be passed to the {@link dc.coordinateGridMixin#xUnits .xUnits} function of the to\n * specify ordinal units for the x axis. Usually this parameter is used in combination with passing\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal} to\n * {@link dc.coordinateGridMixin#x .x}.\n * It just returns the domain passed to it, which for ordinal charts is an array of all values.\n * @method ordinal\n * @memberof dc.units\n * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal}\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @see {@link dc.coordinateGridMixin#x coordinateGridMixin.x}\n * @example\n * chart.xUnits(dc.units.ordinal)\n *      .x(d3.scale.ordinal())\n * @param {*} start\n * @param {*} end\n * @param {Array<String>} domain\n * @returns {Array<String>}\n */\ndc.units.ordinal = function (start, end, domain) {\n    return domain;\n};\n\n/**\n * @namespace fp\n * @memberof dc.units\n * @type {{}}\n */\ndc.units.fp = {};\n/**\n * This function generates an argument for the {@link dc.coordinateGridMixin Coordinate Grid Chart}\n * {@link dc.coordinateGridMixin#xUnits .xUnits} function specifying that the x values are floating-point\n * numbers with the given precision.\n * The returned function determines how many values at the given precision will fit into the range\n * supplied in its start and end parameters.\n * @method precision\n * @memberof dc.units.fp\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @example\n * // specify values (and ticks) every 0.1 units\n * chart.xUnits(dc.units.fp.precision(0.1)\n * // there are 500 units between 0.5 and 1 if the precision is 0.001\n * var thousandths = dc.units.fp.precision(0.001);\n * thousandths(0.5, 1.0) // returns 500\n * @param {Number} precision\n * @returns {Function} start-end unit function\n */\ndc.units.fp.precision = function (precision) {\n    var _f = function (s, e) {\n        var d = Math.abs((e - s) / _f.resolution);\n        if (dc.utils.isNegligible(d - Math.floor(d))) {\n            return Math.floor(d);\n        } else {\n            return Math.ceil(d);\n        }\n    };\n    _f.resolution = precision;\n    return _f;\n};\n\ndc.round = {};\ndc.round.floor = function (n) {\n    return Math.floor(n);\n};\ndc.round.ceil = function (n) {\n    return Math.ceil(n);\n};\ndc.round.round = function (n) {\n    return Math.round(n);\n};\n\ndc.override = function (obj, functionName, newFunction) {\n    var existingFunction = obj[functionName];\n    obj['_' + functionName] = existingFunction;\n    obj[functionName] = newFunction;\n};\n\ndc.renderlet = function (_) {\n    if (!arguments.length) {\n        return dc._renderlet;\n    }\n    dc._renderlet = _;\n    return dc;\n};\n\ndc.instanceOfChart = function (o) {\n    return o instanceof Object && o.__dcFlag__ && true;\n};\n\ndc.errors = {};\n\ndc.errors.Exception = function (msg) {\n    var _msg = msg || 'Unexpected internal error';\n\n    this.message = _msg;\n\n    this.toString = function () {\n        return _msg;\n    };\n    this.stack = (new Error()).stack;\n};\ndc.errors.Exception.prototype = Object.create(Error.prototype);\ndc.errors.Exception.prototype.constructor = dc.errors.Exception;\n\ndc.errors.InvalidStateException = function () {\n    dc.errors.Exception.apply(this, arguments);\n};\n\ndc.errors.InvalidStateException.prototype = Object.create(dc.errors.Exception.prototype);\ndc.errors.InvalidStateException.prototype.constructor = dc.errors.InvalidStateException;\n\ndc.errors.BadArgumentException = function () {\n    dc.errors.Exception.apply(this, arguments);\n};\n\ndc.errors.BadArgumentException.prototype = Object.create(dc.errors.Exception.prototype);\ndc.errors.BadArgumentException.prototype.constructor = dc.errors.BadArgumentException;\n\n/**\n * The default date format for dc.js\n * @name dateFormat\n * @memberof dc\n * @type {Function}\n * @default d3.time.format('%m/%d/%Y')\n */\ndc.dateFormat = d3.time.format('%m/%d/%Y');\n\n/**\n * @namespace printers\n * @memberof dc\n * @type {{}}\n */\ndc.printers = {};\n\n/**\n * Converts a list of filters into a readable string.\n * @method filters\n * @memberof dc.printers\n * @param {Array<dc.filters>} filters\n * @returns {String}\n */\ndc.printers.filters = function (filters) {\n    var s = '';\n\n    for (var i = 0; i < filters.length; ++i) {\n        if (i > 0) {\n            s += ', ';\n        }\n        s += dc.printers.filter(filters[i]);\n    }\n\n    return s;\n};\n\n/**\n * Converts a filter into a readable string.\n * @method filter\n * @memberof dc.printers\n * @param {dc.filters|any|Array<any>} filter\n * @returns {String}\n */\ndc.printers.filter = function (filter) {\n    var s = '';\n\n    if (typeof filter !== 'undefined' && filter !== null) {\n        if (filter instanceof Array) {\n            if (filter.length >= 2) {\n                s = '[' + dc.utils.printSingleValue(filter[0]) + ' -> ' + dc.utils.printSingleValue(filter[1]) + ']';\n            } else if (filter.length >= 1) {\n                s = dc.utils.printSingleValue(filter[0]);\n            }\n        } else {\n            s = dc.utils.printSingleValue(filter);\n        }\n    }\n\n    return s;\n};\n\n/**\n * Returns a function that given a string property name, can be used to pluck the property off an object.  A function\n * can be passed as the second argument to also alter the data being returned.\n *\n * This can be a useful shorthand method to create accessor functions.\n * @method pluck\n * @memberof dc\n * @example\n * var xPluck = dc.pluck('x');\n * var objA = {x: 1};\n * xPluck(objA) // 1\n * @example\n * var xPosition = dc.pluck('x', function (x, i) {\n *     // `this` is the original datum,\n *     // `x` is the x property of the datum,\n *     // `i` is the position in the array\n *     return this.radius + x;\n * });\n * dc.selectAll('.circle').data(...).x(xPosition);\n * @param {String} n\n * @param {Function} [f]\n * @returns {Function}\n */\ndc.pluck = function (n, f) {\n    if (!f) {\n        return function (d) { return d[n]; };\n    }\n    return function (d, i) { return f.call(d, d[n], i); };\n};\n\n/**\n * @namespace utils\n * @memberof dc\n * @type {{}}\n */\ndc.utils = {};\n\n/**\n * Print a single value filter.\n * @method printSingleValue\n * @memberof dc.utils\n * @param {any} filter\n * @returns {String}\n */\ndc.utils.printSingleValue = function (filter) {\n    var s = '' + filter;\n\n    if (filter instanceof Date) {\n        s = dc.dateFormat(filter);\n    } else if (typeof(filter) === 'string') {\n        s = filter;\n    } else if (dc.utils.isFloat(filter)) {\n        s = dc.utils.printSingleValue.fformat(filter);\n    } else if (dc.utils.isInteger(filter)) {\n        s = Math.round(filter);\n    }\n\n    return s;\n};\ndc.utils.printSingleValue.fformat = d3.format('.2f');\n\n/**\n * Arbitrary add one value to another.\n * @method add\n * @memberof dc.utils\n * @todo\n * These assume than any string r is a percentage (whether or not it includes %).\n * They also generate strange results if l is a string.\n * @param {String|Date|Number} l the value to modify\n * @param {Number} r the amount by which to modify the value\n * @param {String} [t] if `l` is a `Date`, the\n * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n * the `d3.time` namespace\n * @returns {String|Date|Number}\n */\ndc.utils.add = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() + r);\n        }\n        t = t || 'day';\n        return d3.time[t].offset(l, r);\n    } else if (typeof r === 'string') {\n        var percentage = (+r / 100);\n        return l > 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l + r;\n    }\n};\n\n/**\n * Arbitrary subtract one value from another.\n * @method subtract\n * @memberof dc.utils\n * @todo\n * These assume than any string r is a percentage (whether or not it includes %).\n * They also generate strange results if l is a string.\n * @param {String|Date|Number} l the value to modify\n * @param {Number} r the amount by which to modify the value\n * @param {String} [t] if `l` is a `Date`, the\n * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n * the `d3.time` namespace\n * @returns {String|Date|Number}\n */\ndc.utils.subtract = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() - r);\n        }\n        t = t || 'day';\n        return d3.time[t].offset(l, -r);\n    } else if (typeof r === 'string') {\n        var percentage = (+r / 100);\n        return l < 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l - r;\n    }\n};\n\n/**\n * Is the value a number?\n * @method isNumber\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isNumber = function (n) {\n    return n === +n;\n};\n\n/**\n * Is the value a float?\n * @method isFloat\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isFloat = function (n) {\n    return n === +n && n !== (n | 0);\n};\n\n/**\n * Is the value an integer?\n * @method isInteger\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isInteger = function (n) {\n    return n === +n && n === (n | 0);\n};\n\n/**\n * Is the value very close to zero?\n * @method isNegligible\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isNegligible = function (n) {\n    return !dc.utils.isNumber(n) || (n < dc.constants.NEGLIGIBLE_NUMBER && n > -dc.constants.NEGLIGIBLE_NUMBER);\n};\n\n/**\n * Ensure the value is no greater or less than the min/max values.  If it is return the boundary value.\n * @method clamp\n * @memberof dc.utils\n * @param {any} val\n * @param {any} min\n * @param {any} max\n * @returns {any}\n */\ndc.utils.clamp = function (val, min, max) {\n    return val < min ? min : (val > max ? max : val);\n};\n\n/**\n * Using a simple static counter, provide a unique integer id.\n * @method uniqueId\n * @memberof dc.utils\n * @returns {Number}\n */\nvar _idCounter = 0;\ndc.utils.uniqueId = function () {\n    return ++_idCounter;\n};\n\n/**\n * Convert a name to an ID.\n * @method nameToId\n * @memberof dc.utils\n * @param {String} name\n * @returns {String}\n */\ndc.utils.nameToId = function (name) {\n    return name.toLowerCase().replace(/[\\s]/g, '_').replace(/[\\.']/g, '');\n};\n\n/**\n * Append or select an item on a parent element.\n * @method appendOrSelect\n * @memberof dc.utils\n * @param {d3.selection} parent\n * @param {String} selector\n * @param {String} tag\n * @returns {d3.selection}\n */\ndc.utils.appendOrSelect = function (parent, selector, tag) {\n    tag = tag || selector;\n    var element = parent.select(selector);\n    if (element.empty()) {\n        element = parent.append(tag);\n    }\n    return element;\n};\n\n/**\n * Return the number if the value is a number; else 0.\n * @method safeNumber\n * @memberof dc.utils\n * @param {Number|any} n\n * @returns {Number}\n */\ndc.utils.safeNumber = function (n) { return dc.utils.isNumber(+n) ? +n : 0;};\n\ndc.logger = {};\n\ndc.logger.enableDebugLog = false;\n\ndc.logger.warn = function (msg) {\n    if (console) {\n        if (console.warn) {\n            console.warn(msg);\n        } else if (console.log) {\n            console.log(msg);\n        }\n    }\n\n    return dc.logger;\n};\n\ndc.logger.debug = function (msg) {\n    if (dc.logger.enableDebugLog && console) {\n        if (console.debug) {\n            console.debug(msg);\n        } else if (console.log) {\n            console.log(msg);\n        }\n    }\n\n    return dc.logger;\n};\n\ndc.logger.deprecate = function (fn, msg) {\n    // Allow logging of deprecation\n    var warned = false;\n    function deprecated () {\n        if (!warned) {\n            dc.logger.warn(msg);\n            warned = true;\n        }\n        return fn.apply(this, arguments);\n    }\n    return deprecated;\n};\n\ndc.events = {\n    current: null\n};\n\n/**\n * This function triggers a throttled event function with a specified delay (in milli-seconds).  Events\n * that are triggered repetitively due to user interaction such brush dragging might flood the library\n * and invoke more renders than can be executed in time. Using this function to wrap your event\n * function allows the library to smooth out the rendering by throttling events and only responding to\n * the most recent event.\n * @name events.trigger\n * @memberof dc\n * @example\n * chart.on('renderlet', function(chart) {\n *     // smooth the rendering through event throttling\n *     dc.events.trigger(function(){\n *         // focus some other chart to the range selected by user on this chart\n *         someOtherChart.focus(chart.filter());\n *     });\n * })\n * @param {Function} closure\n * @param {Number} [delay]\n */\ndc.events.trigger = function (closure, delay) {\n    if (!delay) {\n        closure();\n        return;\n    }\n\n    dc.events.current = closure;\n\n    setTimeout(function () {\n        if (closure === dc.events.current) {\n            closure();\n        }\n    }, delay);\n};\n\n/**\n * The dc.js filters are functions which are passed into crossfilter to chose which records will be\n * accumulated to produce values for the charts.  In the crossfilter model, any filters applied on one\n * dimension will affect all the other dimensions but not that one.  dc always applies a filter\n * function to the dimension; the function combines multiple filters and if any of them accept a\n * record, it is filtered in.\n *\n * These filter constructors are used as appropriate by the various charts to implement brushing.  We\n * mention below which chart uses which filter.  In some cases, many instances of a filter will be added.\n *\n * Each of the dc.js filters is an object with the following properties:\n * * `isFiltered` - a function that returns true if a value is within the filter\n * * `filterType` - a string identifying the filter, here the name of the constructor\n *\n * Currently these filter objects are also arrays, but this is not a requirement. Custom filters\n * can be used as long as they have the properties above.\n * @namespace filters\n * @memberof dc\n * @type {{}}\n */\ndc.filters = {};\n\n/**\n * RangedFilter is a filter which accepts keys between `low` and `high`.  It is used to implement X\n * axis brushing for the {@link dc.coordinateGridMixin coordinate grid charts}.\n *\n * Its `filterType` is 'RangedFilter'\n * @name RangedFilter\n * @memberof dc.filters\n * @param {Number} low\n * @param {Number} high\n * @returns {Array<Number>}\n * @constructor\n */\ndc.filters.RangedFilter = function (low, high) {\n    var range = new Array(low, high);\n    range.isFiltered = function (value) {\n        return value >= this[0] && value < this[1];\n    };\n    range.filterType = 'RangedFilter';\n\n    return range;\n};\n\n/**\n * TwoDimensionalFilter is a filter which accepts a single two-dimensional value.  It is used by the\n * {@link dc.heatMap heat map chart} to include particular cells as they are clicked.  (Rows and columns are\n * filtered by filtering all the cells in the row or column.)\n *\n * Its `filterType` is 'TwoDimensionalFilter'\n * @name TwoDimensionalFilter\n * @memberof dc.filters\n * @param {Array<Number>} filter\n * @returns {Array<Number>}\n * @constructor\n */\ndc.filters.TwoDimensionalFilter = function (filter) {\n    if (filter === null) { return null; }\n\n    var f = filter;\n    f.isFiltered = function (value) {\n        return value.length && value.length === f.length &&\n               value[0] === f[0] && value[1] === f[1];\n    };\n    f.filterType = 'TwoDimensionalFilter';\n\n    return f;\n};\n\n/**\n * The RangedTwoDimensionalFilter allows filtering all values which fit within a rectangular\n * region. It is used by the {@link dc.scatterPlot scatter plot} to implement rectangular brushing.\n *\n * It takes two two-dimensional points in the form `[[x1,y1],[x2,y2]]`, and normalizes them so that\n * `x1 <= x2` and `y1 <= y2`. It then returns a filter which accepts any points which are in the\n * rectangular range including the lower values but excluding the higher values.\n *\n * If an array of two values are given to the RangedTwoDimensionalFilter, it interprets the values as\n * two x coordinates `x1` and `x2` and returns a filter which accepts any points for which `x1 <= x <\n * x2`.\n *\n * Its `filterType` is 'RangedTwoDimensionalFilter'\n * @name RangedTwoDimensionalFilter\n * @memberof dc.filters\n * @param {Array<Array<Number>>} filter\n * @returns {Array<Array<Number>>}\n * @constructor\n */\ndc.filters.RangedTwoDimensionalFilter = function (filter) {\n    if (filter === null) { return null; }\n\n    var f = filter;\n    var fromBottomLeft;\n\n    if (f[0] instanceof Array) {\n        fromBottomLeft = [\n            [Math.min(filter[0][0], filter[1][0]), Math.min(filter[0][1], filter[1][1])],\n            [Math.max(filter[0][0], filter[1][0]), Math.max(filter[0][1], filter[1][1])]\n        ];\n    } else {\n        fromBottomLeft = [[filter[0], -Infinity], [filter[1], Infinity]];\n    }\n\n    f.isFiltered = function (value) {\n        var x, y;\n\n        if (value instanceof Array) {\n            x = value[0];\n            y = value[1];\n        } else {\n            x = value;\n            y = fromBottomLeft[0][1];\n        }\n\n        return x >= fromBottomLeft[0][0] && x < fromBottomLeft[1][0] &&\n               y >= fromBottomLeft[0][1] && y < fromBottomLeft[1][1];\n    };\n    f.filterType = 'RangedTwoDimensionalFilter';\n\n    return f;\n};\n\n/**\n * `dc.baseMixin` is an abstract functional object representing a basic `dc` chart object\n * for all chart and widget implementations. Methods from the {@link #dc.baseMixin dc.baseMixin} are inherited\n * and available on all chart implementations in the `dc` library.\n * @name baseMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.baseMixin}\n */\ndc.baseMixin = function (_chart) {\n    _chart.__dcFlag__ = dc.utils.uniqueId();\n\n    var _dimension;\n    var _group;\n\n    var _anchor;\n    var _root;\n    var _svg;\n    var _isChild;\n\n    var _minWidth = 200;\n    var _defaultWidthCalc = function (element) {\n        var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n        return (width && width > _minWidth) ? width : _minWidth;\n    };\n    var _widthCalc = _defaultWidthCalc;\n\n    var _minHeight = 200;\n    var _defaultHeightCalc = function (element) {\n        var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n        return (height && height > _minHeight) ? height : _minHeight;\n    };\n    var _heightCalc = _defaultHeightCalc;\n    var _width, _height;\n    var _useViewBoxResizing = false;\n\n    var _keyAccessor = dc.pluck('key');\n    var _valueAccessor = dc.pluck('value');\n    var _label = dc.pluck('key');\n\n    var _ordering = dc.pluck('key');\n    var _orderSort;\n\n    var _renderLabel = false;\n\n    var _title = function (d) {\n        return _chart.keyAccessor()(d) + ': ' + _chart.valueAccessor()(d);\n    };\n    var _renderTitle = true;\n    var _controlsUseVisibility = false;\n\n    var _transitionDuration = 750;\n\n    var _transitionDelay = 0;\n\n    var _filterPrinter = dc.printers.filters;\n\n    var _mandatoryAttributes = ['dimension', 'group'];\n\n    var _chartGroup = dc.constants.DEFAULT_CHART_GROUP;\n\n    var _listeners = d3.dispatch(\n        'preRender',\n        'postRender',\n        'preRedraw',\n        'postRedraw',\n        'filtered',\n        'zoomed',\n        'renderlet',\n        'pretransition');\n\n    var _legend;\n    var _commitHandler;\n\n    var _filters = [];\n    var _filterHandler = function (dimension, filters) {\n        if (filters.length === 0) {\n            dimension.filter(null);\n        } else if (filters.length === 1 && !filters[0].isFiltered) {\n            // single value and not a function-based filter\n            dimension.filterExact(filters[0]);\n        } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n            // single range-based filter\n            dimension.filterRange(filters[0]);\n        } else {\n            dimension.filterFunction(function (d) {\n                for (var i = 0; i < filters.length; i++) {\n                    var filter = filters[i];\n                    if (filter.isFiltered && filter.isFiltered(d)) {\n                        return true;\n                    } else if (filter <= d && filter >= d) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n        }\n        return filters;\n    };\n\n    var _data = function (group) {\n        return group.all();\n    };\n\n    /**\n     * Set or get the height attribute of a chart. The height is applied to the SVGElement generated by\n     * the chart when rendered (or re-rendered). If a value is given, then it will be used to calculate\n     * the new height and the chart returned for method chaining.  The value can either be a numeric, a\n     * function, or falsy. If no value is specified then the value of the current height attribute will\n     * be returned.\n     *\n     * By default, without an explicit height being given, the chart will select the width of its\n     * anchor element. If that isn't possible it defaults to 200 (provided by the\n     * {@link dc.baseMixin#minHeight minHeight} property). Setting the value falsy will return\n     * the chart to the default behavior.\n     * @method height\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#minHeight minHeight}\n     * @example\n     * // Default height\n     * chart.height(function (element) {\n     *     var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n     *     return (height && height > chart.minHeight()) ? height : chart.minHeight();\n     * });\n     *\n     * chart.height(250); // Set the chart's height to 250px;\n     * chart.height(function(anchor) { return doSomethingWith(anchor); }); // set the chart's height with a function\n     * chart.height(null); // reset the height to the default auto calculation\n     * @param {Number|Function} [height]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.height = function (height) {\n        if (!arguments.length) {\n            if (!dc.utils.isNumber(_height)) {\n                // only calculate once\n                _height = _heightCalc(_root.node());\n            }\n            return _height;\n        }\n        _heightCalc = d3.functor(height || _defaultHeightCalc);\n        _height = undefined;\n        return _chart;\n    };\n\n    /**\n     * Set or get the width attribute of a chart.\n     * @method width\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#height height}\n     * @see {@link dc.baseMixin#minWidth minWidth}\n     * @example\n     * // Default width\n     * chart.width(function (element) {\n     *     var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n     *     return (width && width > chart.minWidth()) ? width : chart.minWidth();\n     * });\n     * @param {Number|Function} [width]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.width = function (width) {\n        if (!arguments.length) {\n            if (!dc.utils.isNumber(_width)) {\n                // only calculate once\n                _width = _widthCalc(_root.node());\n            }\n            return _width;\n        }\n        _widthCalc = d3.functor(width || _defaultWidthCalc);\n        _width = undefined;\n        return _chart;\n    };\n\n    /**\n     * Set or get the minimum width attribute of a chart. This only has effect when used with the default\n     * {@link dc.baseMixin#width width} function.\n     * @method minWidth\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#width width}\n     * @param {Number} [minWidth=200]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.minWidth = function (minWidth) {\n        if (!arguments.length) {\n            return _minWidth;\n        }\n        _minWidth = minWidth;\n        return _chart;\n    };\n\n    /**\n     * Set or get the minimum height attribute of a chart. This only has effect when used with the default\n     * {@link dc.baseMixin#height height} function.\n     * @method minHeight\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#height height}\n     * @param {Number} [minHeight=200]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.minHeight = function (minHeight) {\n        if (!arguments.length) {\n            return _minHeight;\n        }\n        _minHeight = minHeight;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off using the SVG\n     * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox `viewBox` attribute}.\n     * When enabled, `viewBox` will be set on the svg root element instead of `width` and `height`.\n     * Requires that the chart aspect ratio be defined using chart.width(w) and chart.height(h).\n     *\n     * This will maintain the aspect ratio while enabling the chart to resize responsively to the\n     * space given to the chart using CSS. For example, the chart can use `width: 100%; height:\n     * 100%` or absolute positioning to resize to its parent div.\n     *\n     * Since the text will be sized as if the chart is drawn according to the width and height, and\n     * will be resized if the chart is any other size, you need to set the chart width and height so\n     * that the text looks good. In practice, 600x400 seems to work pretty well for most charts.\n     *\n     * You can see examples of this resizing strategy in the [Chart Resizing\n     * Examples](http://dc-js.github.io/dc.js/resizing/); just add `?resize=viewbox` to any of the\n     * one-chart examples to enable `useViewBoxResizing`.\n     * @method useViewBoxResizing\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [useViewBoxResizing=false]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.useViewBoxResizing = function (useViewBoxResizing) {\n        if (!arguments.length) {\n            return _useViewBoxResizing;\n        }\n        _useViewBoxResizing = useViewBoxResizing;\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the dimension attribute of a chart. In `dc`, a dimension can be any valid\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter dimension}\n     *\n     * If a value is given, then it will be used as the new dimension. If no value is specified then\n     * the current dimension will be returned.\n     * @method dimension\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter.dimension}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(dc.pluck('key'));\n     * chart.dimension(dimension);\n     * @param {crossfilter.dimension} [dimension]\n     * @returns {crossfilter.dimension|dc.baseMixin}\n     */\n    _chart.dimension = function (dimension) {\n        if (!arguments.length) {\n            return _dimension;\n        }\n        _dimension = dimension;\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * Set the data callback or retrieve the chart's data set. The data callback is passed the chart's\n     * group and by default will return\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all}.\n     * This behavior may be modified to, for instance, return only the top 5 groups.\n     * @method data\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // Default data function\n     * chart.data(function (group) { return group.all(); });\n     *\n     * chart.data(function (group) { return group.top(5); });\n     * @param {Function} [callback]\n     * @returns {*|dc.baseMixin}\n     */\n    _chart.data = function (callback) {\n        if (!arguments.length) {\n            return _data.call(_chart, _group);\n        }\n        _data = d3.functor(callback);\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the group attribute of a chart. In `dc` a group is a\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter group}.\n     * Usually the group should be created from the particular dimension associated with the same chart. If a value is\n     * given, then it will be used as the new group.\n     *\n     * If no value specified then the current group will be returned.\n     * If `name` is specified then it will be used to generate legend label.\n     * @method group\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(dc.pluck('key'));\n     * chart.dimension(dimension);\n     * chart.group(dimension.group(crossfilter.reduceSum()));\n     * @param {crossfilter.group} [group]\n     * @param {String} [name]\n     * @returns {crossfilter.group|dc.baseMixin}\n     */\n    _chart.group = function (group, name) {\n        if (!arguments.length) {\n            return _group;\n        }\n        _group = group;\n        _chart._groupName = name;\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * Get or set an accessor to order ordinal dimensions.  The chart uses\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n     * to sort elements; this accessor returns the value to order on.\n     * @method ordering\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n     * @example\n     * // Default ordering accessor\n     * _chart.ordering(dc.pluck('key'));\n     * @param {Function} [orderFunction]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.ordering = function (orderFunction) {\n        if (!arguments.length) {\n            return _ordering;\n        }\n        _ordering = orderFunction;\n        _orderSort = crossfilter.quicksort.by(_ordering);\n        _chart.expireCache();\n        return _chart;\n    };\n\n    _chart._computeOrderedGroups = function (data) {\n        var dataCopy = data.slice(0);\n\n        if (dataCopy.length <= 1) {\n            return dataCopy;\n        }\n\n        if (!_orderSort) {\n            _orderSort = crossfilter.quicksort.by(_ordering);\n        }\n\n        return _orderSort(dataCopy, 0, dataCopy.length);\n    };\n\n    /**\n     * Clear all filters associated with this chart. The same effect can be achieved by calling\n     * {@link dc.baseMixin#filter chart.filter(null)}.\n     * @method filterAll\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.filterAll = function () {\n        return _chart.filter(null);\n    };\n\n    /**\n     * Execute d3 single selection in the chart's scope using the given selector and return the d3\n     * selection.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @method select\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_select d3.select}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').select(selector)\n     * chart.select(selector)\n     * @returns {d3.selection}\n     */\n    _chart.select = function (s) {\n        return _root.select(s);\n    };\n\n    /**\n     * Execute in scope d3 selectAll using the given selector and return d3 selection result.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @method selectAll\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_selectAll d3.selectAll}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').selectAll(selector)\n     * chart.selectAll(selector)\n     * @returns {d3.selection}\n     */\n    _chart.selectAll = function (s) {\n        return _root ? _root.selectAll(s) : null;\n    };\n\n    /**\n     * Set the root SVGElement to either be an existing chart's root; or any valid [d3 single\n     * selector](https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements) specifying a dom\n     * block element such as a div; or a dom element or d3 selection. Optionally registers the chart\n     * within the chartGroup. This class is called internally on chart initialization, but be called\n     * again to relocate the chart. However, it will orphan any previously created SVGElements.\n     * @method anchor\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {anchorChart|anchorSelector|anchorNode} [parent]\n     * @param {String} [chartGroup]\n     * @returns {String|node|d3.selection|dc.baseMixin}\n     */\n    _chart.anchor = function (parent, chartGroup) {\n        if (!arguments.length) {\n            return _anchor;\n        }\n        if (dc.instanceOfChart(parent)) {\n            _anchor = parent.anchor();\n            _root = parent.root();\n            _isChild = true;\n        } else if (parent) {\n            if (parent.select && parent.classed) { // detect d3 selection\n                _anchor = parent.node();\n            } else {\n                _anchor = parent;\n            }\n            _root = d3.select(_anchor);\n            _root.classed(dc.constants.CHART_CLASS, true);\n            dc.registerChart(_chart, chartGroup);\n            _isChild = false;\n        } else {\n            throw new dc.errors.BadArgumentException('parent must be defined');\n        }\n        _chartGroup = chartGroup;\n        return _chart;\n    };\n\n    /**\n     * Returns the DOM id for the chart's anchored location.\n     * @method anchorName\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {String}\n     */\n    _chart.anchorName = function () {\n        var a = _chart.anchor();\n        if (a && a.id) {\n            return a.id;\n        }\n        if (a && a.replace) {\n            return a.replace('#', '');\n        }\n        return 'dc-chart' + _chart.chartID();\n    };\n\n    /**\n     * Returns the root element where a chart resides. Usually it will be the parent div element where\n     * the SVGElement was created. You can also pass in a new root element however this is usually handled by\n     * dc internally. Resetting the root element on a chart outside of dc internals may have\n     * unexpected consequences.\n     * @method root\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement HTMLElement}\n     * @param {HTMLElement} [rootElement]\n     * @returns {HTMLElement|dc.baseMixin}\n     */\n    _chart.root = function (rootElement) {\n        if (!arguments.length) {\n            return _root;\n        }\n        _root = rootElement;\n        return _chart;\n    };\n\n    /**\n     * Returns the top SVGElement for this specific chart. You can also pass in a new SVGElement,\n     * however this is usually handled by dc internally. Resetting the SVGElement on a chart outside\n     * of dc internals may have unexpected consequences.\n     * @method svg\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @param {SVGElement|d3.selection} [svgElement]\n     * @returns {SVGElement|d3.selection|dc.baseMixin}\n     */\n    _chart.svg = function (svgElement) {\n        if (!arguments.length) {\n            return _svg;\n        }\n        _svg = svgElement;\n        return _chart;\n    };\n\n    /**\n     * Remove the chart's SVGElements from the dom and recreate the container SVGElement.\n     * @method resetSvg\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @returns {SVGElement}\n     */\n    _chart.resetSvg = function () {\n        _chart.select('svg').remove();\n        return generateSvg();\n    };\n\n    function sizeSvg () {\n        if (_svg) {\n            if (!_useViewBoxResizing) {\n                _svg\n                    .attr('width', _chart.width())\n                    .attr('height', _chart.height());\n            } else if (!_svg.attr('viewBox')) {\n                _svg\n                    .attr('viewBox', '0 0 ' + _chart.width() + ' ' + _chart.height());\n            }\n        }\n    }\n\n    function generateSvg () {\n        _svg = _chart.root().append('svg');\n        sizeSvg();\n        return _svg;\n    }\n\n    /**\n     * Set or get the filter printer function. The filter printer function is used to generate human\n     * friendly text for filter value(s) associated with the chart instance. The text will get shown\n     * in the `.filter element; see {@link dc.baseMixin#turnOnControls turnOnControls}.\n     *\n     * By default dc charts use a default filter printer {@link dc.printers.filters dc.printers.filters}\n     * that provides simple printing support for both single value and ranged filters.\n     * @method filterPrinter\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // for a chart with an ordinal brush, print the filters in upper case\n     * chart.filterPrinter(function(filters) {\n     *   return filters.map(function(f) { return f.toUpperCase(); }).join(', ');\n     * });\n     * // for a chart with a range brush, print the filter as start and extent\n     * chart.filterPrinter(function(filters) {\n     *   return 'start ' + dc.utils.printSingleValue(filters[0][0]) +\n     *     ' extent ' + dc.utils.printSingleValue(filters[0][1] - filters[0][0]);\n     * });\n     * @param {Function} [filterPrinterFunction=dc.printers.filters]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.filterPrinter = function (filterPrinterFunction) {\n        if (!arguments.length) {\n            return _filterPrinter;\n        }\n        _filterPrinter = filterPrinterFunction;\n        return _chart;\n    };\n\n    /**\n     * If set, use the `visibility` attribute instead of the `display` attribute for showing/hiding\n     * chart reset and filter controls, for less disruption to the layout.\n     * @method controlsUseVisibility\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [controlsUseVisibility=false]\n     * @returns {Boolean|dc.baseMixin}\n     **/\n    _chart.controlsUseVisibility = function (useVisibility) {\n        if (!arguments.length) {\n            return _controlsUseVisibility;\n        }\n        _controlsUseVisibility = useVisibility;\n        return _chart;\n    };\n\n    /**\n     * Turn on optional control elements within the root element. dc currently supports the\n     * following html control elements.\n     * * root.selectAll('.reset') - elements are turned on if the chart has an active filter. This type\n     * of control element is usually used to store a reset link to allow user to reset filter on a\n     * certain chart. This element will be turned off automatically if the filter is cleared.\n     * * root.selectAll('.filter') elements are turned on if the chart has an active filter. The text\n     * content of this element is then replaced with the current filter value using the filter printer\n     * function. This type of element will be turned off automatically if the filter is cleared.\n     * @method turnOnControls\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.turnOnControls = function () {\n        if (_root) {\n            var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n            _chart.selectAll('.reset').style(attribute, null);\n            _chart.selectAll('.filter').text(_filterPrinter(_chart.filters())).style(attribute, null);\n        }\n        return _chart;\n    };\n\n    /**\n     * Turn off optional control elements within the root element.\n     * @method turnOffControls\n     * @memberof dc.baseMixin\n     * @see {@link dc.baseMixin#turnOnControls turnOnControls}\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.turnOffControls = function () {\n        if (_root) {\n            var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n            var value = _chart.controlsUseVisibility() ? 'hidden' : 'none';\n            _chart.selectAll('.reset').style(attribute, value);\n            _chart.selectAll('.filter').style(attribute, value).text(_chart.filter());\n        }\n        return _chart;\n    };\n\n    /**\n     * Set or get the animation transition duration (in milliseconds) for this chart instance.\n     * @method transitionDuration\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Number} [duration=750]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.transitionDuration = function (duration) {\n        if (!arguments.length) {\n            return _transitionDuration;\n        }\n        _transitionDuration = duration;\n        return _chart;\n    };\n\n    /**\n     * Set or get the animation transition delay (in milliseconds) for this chart instance.\n     * @method transitionDelay\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Number} [delay=0]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.transitionDelay = function (delay) {\n        if (!arguments.length) {\n            return _transitionDelay;\n        }\n        _transitionDelay = delay;\n        return _chart;\n    };\n\n    _chart._mandatoryAttributes = function (_) {\n        if (!arguments.length) {\n            return _mandatoryAttributes;\n        }\n        _mandatoryAttributes = _;\n        return _chart;\n    };\n\n    function checkForMandatoryAttributes (a) {\n        if (!_chart[a] || !_chart[a]()) {\n            throw new dc.errors.InvalidStateException('Mandatory attribute chart.' + a +\n                ' is missing on chart[#' + _chart.anchorName() + ']');\n        }\n    }\n\n    /**\n     * Invoking this method will force the chart to re-render everything from scratch. Generally it\n     * should only be used to render the chart for the first time on the page or if you want to make\n     * sure everything is redrawn from scratch instead of relying on the default incremental redrawing\n     * behaviour.\n     * @method render\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.render = function () {\n        _height = _width = undefined; // force recalculate\n        _listeners.preRender(_chart);\n\n        if (_mandatoryAttributes) {\n            _mandatoryAttributes.forEach(checkForMandatoryAttributes);\n        }\n\n        var result = _chart._doRender();\n\n        if (_legend) {\n            _legend.render();\n        }\n\n        _chart._activateRenderlets('postRender');\n\n        return result;\n    };\n\n    _chart._activateRenderlets = function (event) {\n        _listeners.pretransition(_chart);\n        if (_chart.transitionDuration() > 0 && _svg) {\n            _svg.transition().duration(_chart.transitionDuration()).delay(_chart.transitionDelay())\n                .each('end', function () {\n                    _listeners.renderlet(_chart);\n                    if (event) {\n                        _listeners[event](_chart);\n                    }\n                });\n        } else {\n            _listeners.renderlet(_chart);\n            if (event) {\n                _listeners[event](_chart);\n            }\n        }\n    };\n\n    /**\n     * Calling redraw will cause the chart to re-render data changes incrementally. If there is no\n     * change in the underlying data dimension then calling this method will have no effect on the\n     * chart. Most chart interaction in dc will automatically trigger this method through internal\n     * events (in particular {@link dc.redrawAll dc.redrawAll}); therefore, you only need to\n     * manually invoke this function if data is manipulated outside of dc's control (for example if\n     * data is loaded in the background using\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}).\n     * @method redraw\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.redraw = function () {\n        sizeSvg();\n        _listeners.preRedraw(_chart);\n\n        var result = _chart._doRedraw();\n\n        if (_legend) {\n            _legend.render();\n        }\n\n        _chart._activateRenderlets('postRedraw');\n\n        return result;\n    };\n\n    /**\n     * Gets/sets the commit handler. If the chart has a commit handler, the handler will be called when\n     * the chart's filters have changed, in order to send the filter data asynchronously to a server.\n     *\n     * Unlike other functions in dc.js, the commit handler is asynchronous. It takes two arguments:\n     * a flag indicating whether this is a render (true) or a redraw (false), and a callback to be\n     * triggered once the commit is filtered. The callback has the standard node.js continuation signature\n     * with error first and result second.\n     * @method commitHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.commitHandler = function (commitHandler) {\n        if (!arguments.length) {\n            return _commitHandler;\n        }\n        _commitHandler = commitHandler;\n        return _chart;\n    };\n\n    /**\n     * Redraws all charts in the same group as this chart, typically in reaction to a filter\n     * change. If the chart has a {@link dc.baseMixin.commitFilter commitHandler}, it will\n     * be executed and waited for.\n     * @method redrawGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.redrawGroup = function () {\n        if (_commitHandler) {\n            _commitHandler(false, function (error, result) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    dc.redrawAll(_chart.chartGroup());\n                }\n            });\n        } else {\n            dc.redrawAll(_chart.chartGroup());\n        }\n        return _chart;\n    };\n\n    /**\n     * Renders all charts in the same group as this chart. If the chart has a\n     * {@link dc.baseMixin.commitFilter commitHandler}, it will be executed and waited for\n     * @method renderGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.renderGroup = function () {\n        if (_commitHandler) {\n            _commitHandler(false, function (error, result) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    dc.renderAll(_chart.chartGroup());\n                }\n            });\n        } else {\n            dc.renderAll(_chart.chartGroup());\n        }\n        return _chart;\n    };\n\n    _chart._invokeFilteredListener = function (f) {\n        if (f !== undefined) {\n            _listeners.filtered(_chart, f);\n        }\n    };\n\n    _chart._invokeZoomedListener = function () {\n        _listeners.zoomed(_chart);\n    };\n\n    var _hasFilterHandler = function (filters, filter) {\n        if (filter === null || typeof(filter) === 'undefined') {\n            return filters.length > 0;\n        }\n        return filters.some(function (f) {\n            return filter <= f && filter >= f;\n        });\n    };\n\n    /**\n     * Set or get the has-filter handler. The has-filter handler is a function that checks to see if\n     * the chart's current filters (first argument) include a specific filter (second argument).  Using a custom has-filter handler allows\n     * you to change the way filters are checked for and replaced.\n     * @method hasFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default has-filter handler\n     * chart.hasFilterHandler(function (filters, filter) {\n     *     if (filter === null || typeof(filter) === 'undefined') {\n     *         return filters.length > 0;\n     *     }\n     *     return filters.some(function (f) {\n     *         return filter <= f && filter >= f;\n     *     });\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.hasFilterHandler(function(filters, filter) {\n     *     return false;\n     * });\n     * @param {Function} [hasFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.hasFilterHandler = function (hasFilterHandler) {\n        if (!arguments.length) {\n            return _hasFilterHandler;\n        }\n        _hasFilterHandler = hasFilterHandler;\n        return _chart;\n    };\n\n    /**\n     * Check whether any active filter or a specific filter is associated with particular chart instance.\n     * This function is **not chainable**.\n     * @method hasFilter\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#hasFilterHandler hasFilterHandler}\n     * @param {*} [filter]\n     * @returns {Boolean}\n     */\n    _chart.hasFilter = function (filter) {\n        return _hasFilterHandler(_filters, filter);\n    };\n\n    var _removeFilterHandler = function (filters, filter) {\n        for (var i = 0; i < filters.length; i++) {\n            if (filters[i] <= filter && filters[i] >= filter) {\n                filters.splice(i, 1);\n                break;\n            }\n        }\n        return filters;\n    };\n\n    /**\n     * Set or get the remove filter handler. The remove filter handler is a function that removes a\n     * filter from the chart's current filters. Using a custom remove filter handler allows you to\n     * change how filters are removed or perform additional work when removing a filter, e.g. when\n     * using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method removeFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default remove filter handler\n     * chart.removeFilterHandler(function (filters, filter) {\n     *     for (var i = 0; i < filters.length; i++) {\n     *         if (filters[i] <= filter && filters[i] >= filter) {\n     *             filters.splice(i, 1);\n     *             break;\n     *         }\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.removeFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [removeFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.removeFilterHandler = function (removeFilterHandler) {\n        if (!arguments.length) {\n            return _removeFilterHandler;\n        }\n        _removeFilterHandler = removeFilterHandler;\n        return _chart;\n    };\n\n    var _addFilterHandler = function (filters, filter) {\n        filters.push(filter);\n        return filters;\n    };\n\n    /**\n     * Set or get the add filter handler. The add filter handler is a function that adds a filter to\n     * the chart's filter list. Using a custom add filter handler allows you to change the way filters\n     * are added or perform additional work when adding a filter, e.g. when using a filter server other\n     * than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method addFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default add filter handler\n     * chart.addFilterHandler(function (filters, filter) {\n     *     filters.push(filter);\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.addFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [addFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.addFilterHandler = function (addFilterHandler) {\n        if (!arguments.length) {\n            return _addFilterHandler;\n        }\n        _addFilterHandler = addFilterHandler;\n        return _chart;\n    };\n\n    var _resetFilterHandler = function (filters) {\n        return [];\n    };\n\n    /**\n     * Set or get the reset filter handler. The reset filter handler is a function that resets the\n     * chart's filter list by returning a new list. Using a custom reset filter handler allows you to\n     * change the way filters are reset, or perform additional work when resetting the filters,\n     * e.g. when using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method resetFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default remove filter handler\n     * function (filters) {\n     *     return [];\n     * }\n     *\n     * // custom filter handler (no-op)\n     * chart.resetFilterHandler(function(filters) {\n     *     return filters;\n     * });\n     * @param {Function} [resetFilterHandler]\n     * @returns {dc.baseMixin}\n     */\n    _chart.resetFilterHandler = function (resetFilterHandler) {\n        if (!arguments.length) {\n            return _resetFilterHandler;\n        }\n        _resetFilterHandler = resetFilterHandler;\n        return _chart;\n    };\n\n    function applyFilters (filters) {\n        if (_chart.dimension() && _chart.dimension().filter) {\n            var fs = _filterHandler(_chart.dimension(), filters);\n            if (fs) {\n                filters = fs;\n            }\n        }\n        return filters;\n    }\n\n    /**\n     * Replace the chart filter. This is equivalent to calling `chart.filter(null).filter(filter)`\n     * but more efficient because the filter is only applied once.\n     *\n     * @method replaceFilter\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {*} [filter]\n     * @returns {dc.baseMixin}\n     **/\n    _chart.replaceFilter = function (filter) {\n        _filters = _resetFilterHandler(_filters);\n        _chart.filter(filter);\n        return _chart;\n    };\n\n    /**\n     * Filter the chart by the given parameter, or return the current filter if no input parameter\n     * is given.\n     *\n     * The filter parameter can take one of these forms:\n     * * A single value: the value will be toggled (added if it is not present in the current\n     * filters, removed if it is present)\n     * * An array containing a single array of values (`[[value,value,value]]`): each value is\n     * toggled\n     * * When appropriate for the chart, a {@link dc.filters dc filter object} such as\n     *   * {@link dc.filters.RangedFilter `dc.filters.RangedFilter`} for the\n     * {@link dc.coordinateGridMixin dc.coordinateGridMixin} charts\n     *   * {@link dc.filters.TwoDimensionalFilter `dc.filters.TwoDimensionalFilter`} for the\n     * {@link dc.heatMap heat map}\n     *   * {@link dc.filters.RangedTwoDimensionalFilter `dc.filters.RangedTwoDimensionalFilter`}\n     * for the {@link dc.scatterPlot scatter plot}\n     * * `null`: the filter will be reset using the\n     * {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n     *\n     * Note that this is always a toggle (even when it doesn't make sense for the filter type). If\n     * you wish to replace the current filter, either call `chart.filter(null)` first - or it's more\n     * efficient to call {@link dc.baseMixin#replaceFilter `chart.replaceFilter(filter)`} instead.\n     *\n     * Each toggle is executed by checking if the value is already present using the\n     * {@link dc.baseMixin#hasFilterHandler hasFilterHandler}; if it is not present, it is added\n     * using the {@link dc.baseMixin#addFilterHandler addFilterHandler}; if it is already present,\n     * it is removed using the {@link dc.baseMixin#removeFilterHandler removeFilterHandler}.\n     *\n     * Once the filters array has been updated, the filters are applied to the\n     * crossfilter dimension, using the {@link dc.baseMixin#filterHandler filterHandler}.\n     *\n     * Once you have set the filters, call {@link dc.baseMixin#redrawGroup `chart.redrawGroup()`}\n     * (or {@link dc.redrawAll `dc.redrawAll()`}) to redraw the chart's group.\n     * @method filter\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#addFilterHandler addFilterHandler}\n     * @see {@link dc.baseMixin#removeFilterHandler removeFilterHandler}\n     * @see {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n     * @see {@link dc.baseMixin#filterHandler filterHandler}\n     * @example\n     * // filter by a single string\n     * chart.filter('Sunday');\n     * // filter by a single age\n     * chart.filter(18);\n     * // filter by a set of states\n     * chart.filter([['MA', 'TX', 'ND', 'WA']]);\n     * // filter by range -- note the use of dc.filters.RangedFilter, which is different\n     * // from the syntax for filtering a crossfilter dimension directly, dimension.filter([15,20])\n     * chart.filter(dc.filters.RangedFilter(15,20));\n     * @param {*} [filter]\n     * @returns {dc.baseMixin}\n     */\n    _chart.filter = function (filter) {\n        if (!arguments.length) {\n            return _filters.length > 0 ? _filters[0] : null;\n        }\n        var filters = _filters;\n        if (filter instanceof Array && filter[0] instanceof Array && !filter.isFiltered) {\n            // toggle each filter\n            filter[0].forEach(function (f) {\n                if (_hasFilterHandler(filters, f)) {\n                    filters = _removeFilterHandler(filters, f);\n                } else {\n                    filters = _addFilterHandler(filters, f);\n                }\n            });\n        } else if (filter === null) {\n            filters = _resetFilterHandler(filters);\n        } else {\n            if (_hasFilterHandler(filters, filter)) {\n                filters = _removeFilterHandler(filters, filter);\n            } else {\n                filters = _addFilterHandler(filters, filter);\n            }\n        }\n        _filters = applyFilters(filters);\n        _chart._invokeFilteredListener(filter);\n\n        if (_root !== null && _chart.hasFilter()) {\n            _chart.turnOnControls();\n        } else {\n            _chart.turnOffControls();\n        }\n\n        return _chart;\n    };\n\n    /**\n     * Returns all current filters. This method does not perform defensive cloning of the internal\n     * filter array before returning, therefore any modification of the returned array will effect the\n     * chart's internal filter storage.\n     * @method filters\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {Array<*>}\n     */\n    _chart.filters = function () {\n        return _filters;\n    };\n\n    _chart.highlightSelected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, true);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n    };\n\n    _chart.fadeDeselected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, true);\n    };\n\n    _chart.resetHighlight = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n    };\n\n    /**\n     * This function is passed to d3 as the onClick handler for each chart. The default behavior is to\n     * filter on the clicked datum (passed to the callback) and redraw the chart group.\n     * @method onClick\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {*} datum\n     */\n    _chart.onClick = function (datum) {\n        var filter = _chart.keyAccessor()(datum);\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    /**\n     * Set or get the filter handler. The filter handler is a function that performs the filter action\n     * on a specific dimension. Using a custom filter handler allows you to perform additional logic\n     * before or after filtering.\n     * @method filterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter crossfilter.dimension.filter}\n     * @example\n     * // the default filter handler handles all possible cases for the charts in dc.js\n     * // you can replace it with something more specialized for your own chart\n     * chart.filterHandler(function (dimension, filters) {\n     *     if (filters.length === 0) {\n     *         // the empty case (no filtering)\n     *         dimension.filter(null);\n     *     } else if (filters.length === 1 && !filters[0].isFiltered) {\n     *         // single value and not a function-based filter\n     *         dimension.filterExact(filters[0]);\n     *     } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n     *         // single range-based filter\n     *         dimension.filterRange(filters[0]);\n     *     } else {\n     *         // an array of values, or an array of filter objects\n     *         dimension.filterFunction(function (d) {\n     *             for (var i = 0; i < filters.length; i++) {\n     *                 var filter = filters[i];\n     *                 if (filter.isFiltered && filter.isFiltered(d)) {\n     *                     return true;\n     *                 } else if (filter <= d && filter >= d) {\n     *                     return true;\n     *                 }\n     *             }\n     *             return false;\n     *         });\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler\n     * chart.filterHandler(function(dimension, filter){\n     *     var newFilter = filter + 10;\n     *     dimension.filter(newFilter);\n     *     return newFilter; // set the actual filter value to the new value\n     * });\n     * @param {Function} [filterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.filterHandler = function (filterHandler) {\n        if (!arguments.length) {\n            return _filterHandler;\n        }\n        _filterHandler = filterHandler;\n        return _chart;\n    };\n\n    // abstract function stub\n    _chart._doRender = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    _chart.legendables = function () {\n        // do nothing in base, should be overridden by sub-function\n        return [];\n    };\n\n    _chart.legendHighlight = function () {\n        // do nothing in base, should be overridden by sub-function\n    };\n\n    _chart.legendReset = function () {\n        // do nothing in base, should be overridden by sub-function\n    };\n\n    _chart.legendToggle = function () {\n        // do nothing in base, should be overriden by sub-function\n    };\n\n    _chart.isLegendableHidden = function () {\n        // do nothing in base, should be overridden by sub-function\n        return false;\n    };\n\n    /**\n     * Set or get the key accessor function. The key accessor function is used to retrieve the key\n     * value from the crossfilter group. Key values are used differently in different charts, for\n     * example keys correspond to slices in a pie chart and x axis positions in a grid coordinate chart.\n     * @method keyAccessor\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default key accessor\n     * chart.keyAccessor(function(d) { return d.key; });\n     * // custom key accessor for a multi-value crossfilter reduction\n     * chart.keyAccessor(function(p) { return p.value.absGain; });\n     * @param {Function} [keyAccessor]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.keyAccessor = function (keyAccessor) {\n        if (!arguments.length) {\n            return _keyAccessor;\n        }\n        _keyAccessor = keyAccessor;\n        return _chart;\n    };\n\n    /**\n     * Set or get the value accessor function. The value accessor function is used to retrieve the\n     * value from the crossfilter group. Group values are used differently in different charts, for\n     * example values correspond to slice sizes in a pie chart and y axis positions in a grid\n     * coordinate chart.\n     * @method valueAccessor\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default value accessor\n     * chart.valueAccessor(function(d) { return d.value; });\n     * // custom value accessor for a multi-value crossfilter reduction\n     * chart.valueAccessor(function(p) { return p.value.percentageGain; });\n     * @param {Function} [valueAccessor]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.valueAccessor = function (valueAccessor) {\n        if (!arguments.length) {\n            return _valueAccessor;\n        }\n        _valueAccessor = valueAccessor;\n        return _chart;\n    };\n\n    /**\n     * Set or get the label function. The chart class will use this function to render labels for each\n     * child element in the chart, e.g. slices in a pie chart or bubbles in a bubble chart. Not every\n     * chart supports the label function, for example line chart does not use this function\n     * at all. By default, enables labels; pass false for the second parameter if this is not desired.\n     * @method label\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default label function just return the key\n     * chart.label(function(d) { return d.key; });\n     * // label function has access to the standard d3 data binding and can get quite complicated\n     * chart.label(function(d) { return d.data.key + '(' + Math.floor(d.data.value / all.value() * 100) + '%)'; });\n     * @param {Function} [labelFunction]\n     * @param {Boolean} [enableLabels=true]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.label = function (labelFunction, enableLabels) {\n        if (!arguments.length) {\n            return _label;\n        }\n        _label = labelFunction;\n        if ((enableLabels === undefined) || enableLabels) {\n            _renderLabel = true;\n        }\n        return _chart;\n    };\n\n    /**\n     * Turn on/off label rendering\n     * @method renderLabel\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [renderLabel=false]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.renderLabel = function (renderLabel) {\n        if (!arguments.length) {\n            return _renderLabel;\n        }\n        _renderLabel = renderLabel;\n        return _chart;\n    };\n\n    /**\n     * Set or get the title function. The chart class will use this function to render the SVGElement title\n     * (usually interpreted by browser as tooltips) for each child element in the chart, e.g. a slice\n     * in a pie chart or a bubble in a bubble chart. Almost every chart supports the title function;\n     * however in grid coordinate charts you need to turn off the brush in order to see titles, because\n     * otherwise the brush layer will block tooltip triggering.\n     * @method title\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default title function shows \"key: value\"\n     * chart.title(function(d) { return d.key + ': ' + d.value; });\n     * // title function has access to the standard d3 data binding and can get quite complicated\n     * chart.title(function(p) {\n     *    return p.key.getFullYear()\n     *        + '\\n'\n     *        + 'Index Gain: ' + numberFormat(p.value.absGain) + '\\n'\n     *        + 'Index Gain in Percentage: ' + numberFormat(p.value.percentageGain) + '%\\n'\n     *        + 'Fluctuation / Index Ratio: ' + numberFormat(p.value.fluctuationPercentage) + '%';\n     * });\n     * @param {Function} [titleFunction]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.title = function (titleFunction) {\n        if (!arguments.length) {\n            return _title;\n        }\n        _title = titleFunction;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off title rendering, or return the state of the render title flag if no arguments are\n     * given.\n     * @method renderTitle\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [renderTitle=true]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.renderTitle = function (renderTitle) {\n        if (!arguments.length) {\n            return _renderTitle;\n        }\n        _renderTitle = renderTitle;\n        return _chart;\n    };\n\n    /**\n     * A renderlet is similar to an event listener on rendering event. Multiple renderlets can be added\n     * to an individual chart.  Each time a chart is rerendered or redrawn the renderlets are invoked\n     * right after the chart finishes its transitions, giving you a way to modify the SVGElements.\n     * Renderlet functions take the chart instance as the only input parameter and you can\n     * use the dc API or use raw d3 to achieve pretty much any effect.\n     *\n     * Use {@link dc.baseMixin#on on} with a 'renderlet' prefix.\n     * Generates a random key for the renderlet, which makes it hard to remove.\n     * @method renderlet\n     * @memberof dc.baseMixin\n     * @instance\n     * @deprecated\n     * @example\n     * // do this instead of .renderlet(function(chart) { ... })\n     * chart.on(\"renderlet\", function(chart){\n     *     // mix of dc API and d3 manipulation\n     *     chart.select('g.y').style('display', 'none');\n     *     // its a closure so you can also access other chart variable available in the closure scope\n     *     moveChart.filter(chart.filter());\n     * });\n     * @param {Function} renderletFunction\n     * @returns {dc.baseMixin}\n     */\n    _chart.renderlet = dc.logger.deprecate(function (renderletFunction) {\n        _chart.on('renderlet.' + dc.utils.uniqueId(), renderletFunction);\n        return _chart;\n    }, 'chart.renderlet has been deprecated.  Please use chart.on(\"renderlet.<renderletKey>\", renderletFunction)');\n\n    /**\n     * Get or set the chart group to which this chart belongs. Chart groups are rendered or redrawn\n     * together since it is expected they share the same underlying crossfilter data set.\n     * @method chartGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {String} [chartGroup]\n     * @returns {String|dc.baseMixin}\n     */\n    _chart.chartGroup = function (chartGroup) {\n        if (!arguments.length) {\n            return _chartGroup;\n        }\n        if (!_isChild) {\n            dc.deregisterChart(_chart, _chartGroup);\n        }\n        _chartGroup = chartGroup;\n        if (!_isChild) {\n            dc.registerChart(_chart, _chartGroup);\n        }\n        return _chart;\n    };\n\n    /**\n     * Expire the internal chart cache. dc charts cache some data internally on a per chart basis to\n     * speed up rendering and avoid unnecessary calculation; however it might be useful to clear the\n     * cache if you have changed state which will affect rendering.  For example, if you invoke\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}\n     * function or reset group or dimension after rendering, it is a good idea to\n     * clear the cache to make sure charts are rendered properly.\n     * @method expireCache\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.expireCache = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    /**\n     * Attach a dc.legend widget to this chart. The legend widget will automatically draw legend labels\n     * based on the color setting and names associated with each group.\n     * @method legend\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n     * @param {dc.legend} [legend]\n     * @returns {dc.legend|dc.baseMixin}\n     */\n    _chart.legend = function (legend) {\n        if (!arguments.length) {\n            return _legend;\n        }\n        _legend = legend;\n        _legend.parent(_chart);\n        return _chart;\n    };\n\n    /**\n     * Returns the internal numeric ID of the chart.\n     * @method chartID\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {String}\n     */\n    _chart.chartID = function () {\n        return _chart.__dcFlag__;\n    };\n\n    /**\n     * Set chart options using a configuration object. Each key in the object will cause the method of\n     * the same name to be called with the value to set that attribute for the chart.\n     * @method options\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * chart.options({dimension: myDimension, group: myGroup});\n     * @param {{}} opts\n     * @returns {dc.baseMixin}\n     */\n    _chart.options = function (opts) {\n        var applyOptions = [\n            'anchor',\n            'group',\n            'xAxisLabel',\n            'yAxisLabel',\n            'stack',\n            'title',\n            'point',\n            'getColor',\n            'overlayGeoJson'\n        ];\n\n        for (var o in opts) {\n            if (typeof(_chart[o]) === 'function') {\n                if (opts[o] instanceof Array && applyOptions.indexOf(o) !== -1) {\n                    _chart[o].apply(_chart, opts[o]);\n                } else {\n                    _chart[o].call(_chart, opts[o]);\n                }\n            } else {\n                dc.logger.debug('Not a valid option setter name: ' + o);\n            }\n        }\n        return _chart;\n    };\n\n    /**\n     * All dc chart instance supports the following listeners.\n     * Supports the following events:\n     * * `renderlet` - This listener function will be invoked after transitions after redraw and render. Replaces the\n     * deprecated {@link dc.baseMixin#renderlet renderlet} method.\n     * * `pretransition` - Like `.on('renderlet', ...)` but the event is fired before transitions start.\n     * * `preRender` - This listener function will be invoked before chart rendering.\n     * * `postRender` - This listener function will be invoked after chart finish rendering including\n     * all renderlets' logic.\n     * * `preRedraw` - This listener function will be invoked before chart redrawing.\n     * * `postRedraw` - This listener function will be invoked after chart finish redrawing\n     * including all renderlets' logic.\n     * * `filtered` - This listener function will be invoked after a filter is applied, added or removed.\n     * * `zoomed` - This listener function will be invoked after a zoom is triggered.\n     * @method on\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Internals.md#dispatch_on d3.dispatch.on}\n     * @example\n     * .on('renderlet', function(chart, filter){...})\n     * .on('pretransition', function(chart, filter){...})\n     * .on('preRender', function(chart){...})\n     * .on('postRender', function(chart){...})\n     * .on('preRedraw', function(chart){...})\n     * .on('postRedraw', function(chart){...})\n     * .on('filtered', function(chart, filter){...})\n     * .on('zoomed', function(chart, filter){...})\n     * @param {String} event\n     * @param {Function} listener\n     * @returns {dc.baseMixin}\n     */\n    _chart.on = function (event, listener) {\n        _listeners.on(event, listener);\n        return _chart;\n    };\n\n    return _chart;\n};\n\n/**\n * Margin is a mixin that provides margin utility functions for both the Row Chart and Coordinate Grid\n * Charts.\n * @name marginMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.marginMixin}\n */\ndc.marginMixin = function (_chart) {\n    var _margin = {top: 10, right: 50, bottom: 30, left: 30};\n\n    /**\n     * Get or set the margins for a particular coordinate grid chart instance. The margins is stored as\n     * an associative Javascript array.\n     * @method margins\n     * @memberof dc.marginMixin\n     * @instance\n     * @example\n     * var leftMargin = chart.margins().left; // 30 by default\n     * chart.margins().left = 50;\n     * leftMargin = chart.margins().left; // now 50\n     * @param {{top: Number, right: Number, left: Number, bottom: Number}} [margins={top: 10, right: 50, bottom: 30, left: 30}]\n     * @returns {{top: Number, right: Number, left: Number, bottom: Number}|dc.marginMixin}\n     */\n    _chart.margins = function (margins) {\n        if (!arguments.length) {\n            return _margin;\n        }\n        _margin = margins;\n        return _chart;\n    };\n\n    _chart.effectiveWidth = function () {\n        return _chart.width() - _chart.margins().left - _chart.margins().right;\n    };\n\n    _chart.effectiveHeight = function () {\n        return _chart.height() - _chart.margins().top - _chart.margins().bottom;\n    };\n\n    return _chart;\n};\n\n/**\n * The Color Mixin is an abstract chart functional class providing universal coloring support\n * as a mix-in for any concrete chart implementation.\n * @name colorMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.colorMixin}\n */\ndc.colorMixin = function (_chart) {\n    var _colors = d3.scale.category20c();\n    var _defaultAccessor = true;\n\n    var _colorAccessor = function (d) { return _chart.keyAccessor()(d); };\n\n    /**\n     * Retrieve current color scale or set a new color scale. This methods accepts any function that\n     * operates like a d3 scale.\n     * @method colors\n     * @memberof dc.colorMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @example\n     * // alternate categorical scale\n     * chart.colors(d3.scale.category20b());\n     * // ordinal scale\n     * chart.colors(d3.scale.ordinal().range(['red','green','blue']));\n     * // convenience method, the same as above\n     * chart.ordinalColors(['red','green','blue']);\n     * // set a linear scale\n     * chart.linearColors([\"#4575b4\", \"#ffffbf\", \"#a50026\"]);\n     * @param {d3.scale} [colorScale=d3.scale.category20c()]\n     * @returns {d3.scale|dc.colorMixin}\n     */\n    _chart.colors = function (colorScale) {\n        if (!arguments.length) {\n            return _colors;\n        }\n        if (colorScale instanceof Array) {\n            _colors = d3.scale.quantize().range(colorScale); // deprecated legacy support, note: this fails for ordinal domains\n        } else {\n            _colors = d3.functor(colorScale);\n        }\n        return _chart;\n    };\n\n    /**\n     * Convenience method to set the color scale to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal d3.scale.ordinal} with\n     * range `r`.\n     * @method ordinalColors\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<String>} r\n     * @returns {dc.colorMixin}\n     */\n    _chart.ordinalColors = function (r) {\n        return _chart.colors(d3.scale.ordinal().range(r));\n    };\n\n    /**\n     * Convenience method to set the color scale to an Hcl interpolated linear scale with range `r`.\n     * @method linearColors\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<Number>} r\n     * @returns {dc.colorMixin}\n     */\n    _chart.linearColors = function (r) {\n        return _chart.colors(d3.scale.linear()\n                             .range(r)\n                             .interpolate(d3.interpolateHcl));\n    };\n\n    /**\n     * Set or the get color accessor function. This function will be used to map a data point in a\n     * crossfilter group to a color value on the color scale. The default function uses the key\n     * accessor.\n     * @method colorAccessor\n     * @memberof dc.colorMixin\n     * @instance\n     * @example\n     * // default index based color accessor\n     * .colorAccessor(function (d, i){return i;})\n     * // color accessor for a multi-value crossfilter reduction\n     * .colorAccessor(function (d){return d.value.absGain;})\n     * @param {Function} [colorAccessor]\n     * @returns {Function|dc.colorMixin}\n     */\n    _chart.colorAccessor = function (colorAccessor) {\n        if (!arguments.length) {\n            return _colorAccessor;\n        }\n        _colorAccessor = colorAccessor;\n        _defaultAccessor = false;\n        return _chart;\n    };\n\n    // what is this?\n    _chart.defaultColorAccessor = function () {\n        return _defaultAccessor;\n    };\n\n    /**\n     * Set or get the current domain for the color mapping function. The domain must be supplied as an\n     * array.\n     *\n     * Note: previously this method accepted a callback function. Instead you may use a custom scale\n     * set by {@link dc.colorMixin#colors .colors}.\n     * @method colorDomain\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<String>} [domain]\n     * @returns {Array<String>|dc.colorMixin}\n     */\n    _chart.colorDomain = function (domain) {\n        if (!arguments.length) {\n            return _colors.domain();\n        }\n        _colors.domain(domain);\n        return _chart;\n    };\n\n    /**\n     * Set the domain by determining the min and max values as retrieved by\n     * {@link dc.colorMixin#colorAccessor .colorAccessor} over the chart's dataset.\n     * @method calculateColorDomain\n     * @memberof dc.colorMixin\n     * @instance\n     * @returns {dc.colorMixin}\n     */\n    _chart.calculateColorDomain = function () {\n        var newDomain = [d3.min(_chart.data(), _chart.colorAccessor()),\n                         d3.max(_chart.data(), _chart.colorAccessor())];\n        _colors.domain(newDomain);\n        return _chart;\n    };\n\n    /**\n     * Get the color for the datum d and counter i. This is used internally by charts to retrieve a color.\n     * @method getColor\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {*} d\n     * @param {Number} [i]\n     * @returns {String}\n     */\n    _chart.getColor = function (d, i) {\n        return _colors(_colorAccessor.call(this, d, i));\n    };\n\n    /**\n     * **Deprecated.** Get/set the color calculator. This actually replaces the\n     * {@link dc.colorMixin#getColor getColor} method!\n     *\n     * This is not recommended, since using a {@link dc.colorMixin#colorAccessor colorAccessor} and\n     * color scale ({@link dc.colorMixin#colors .colors}) is more powerful and idiomatic d3.\n     * @method colorCalculator\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {*} [colorCalculator]\n     * @returns {Function|dc.colorMixin}\n     */\n    _chart.colorCalculator = dc.logger.deprecate(function (colorCalculator) {\n        if (!arguments.length) {\n            return _chart.getColor;\n        }\n        _chart.getColor = colorCalculator;\n        return _chart;\n    }, 'colorMixin.colorCalculator has been deprecated. Please colorMixin.colors and colorMixin.colorAccessor instead');\n\n    return _chart;\n};\n\n/**\n * Coordinate Grid is an abstract base chart designed to support a number of coordinate grid based\n * concrete chart types, e.g. bar chart, line chart, and bubble chart.\n * @name coordinateGridMixin\n * @memberof dc\n * @mixin\n * @mixes dc.colorMixin\n * @mixes dc.marginMixin\n * @mixes dc.baseMixin\n * @param {Object} _chart\n * @returns {dc.coordinateGridMixin}\n */\ndc.coordinateGridMixin = function (_chart) {\n    var GRID_LINE_CLASS = 'grid-line';\n    var HORIZONTAL_CLASS = 'horizontal';\n    var VERTICAL_CLASS = 'vertical';\n    var Y_AXIS_LABEL_CLASS = 'y-axis-label';\n    var X_AXIS_LABEL_CLASS = 'x-axis-label';\n    var DEFAULT_AXIS_LABEL_PADDING = 12;\n\n    _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin(_chart)));\n\n    _chart.colors(d3.scale.category10());\n    _chart._mandatoryAttributes().push('x');\n    var _parent;\n    var _g;\n    var _chartBodyG;\n\n    var _x;\n    var _xOriginalDomain;\n    var _xAxis = d3.svg.axis().orient('bottom');\n    var _xUnits = dc.units.integers;\n    var _xAxisPadding = 0;\n    var _xAxisPaddingUnit = 'day';\n    var _xElasticity = false;\n    var _xAxisLabel;\n    var _xAxisLabelPadding = 0;\n    var _lastXDomain;\n\n    var _y;\n    var _yAxis = d3.svg.axis().orient('left');\n    var _yAxisPadding = 0;\n    var _yElasticity = false;\n    var _yAxisLabel;\n    var _yAxisLabelPadding = 0;\n\n    var _brush = d3.svg.brush();\n    var _brushOn = true;\n    var _round;\n\n    var _renderHorizontalGridLine = false;\n    var _renderVerticalGridLine = false;\n\n    var _refocused = false, _resizing = false;\n    var _unitCount;\n\n    var _zoomScale = [1, Infinity];\n    var _zoomOutRestrict = true;\n\n    var _zoom = d3.behavior.zoom().on('zoom', zoomHandler);\n    var _nullZoom = d3.behavior.zoom().on('zoom', null);\n    var _hasBeenMouseZoomable = false;\n\n    var _rangeChart;\n    var _focusChart;\n\n    var _mouseZoomable = false;\n    var _clipPadding = 0;\n\n    var _outerRangeBandPadding = 0.5;\n    var _rangeBandPadding = 0;\n\n    var _useRightYAxis = false;\n\n    /**\n     * When changing the domain of the x or y scale, it is necessary to tell the chart to recalculate\n     * and redraw the axes. (`.rescale()` is called automatically when the x or y scale is replaced\n     * with {@link dc.coordinateGridMixin+x .x()} or {@link dc.coordinateGridMixin#y .y()}, and has\n     * no effect on elastic scales.)\n     * @method rescale\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {dc.coordinateGridMixin}\n     */\n    _chart.rescale = function () {\n        _unitCount = undefined;\n        _resizing = true;\n        return _chart;\n    };\n\n    _chart.resizing = function () {\n        return _resizing;\n    };\n\n    /**\n     * Get or set the range selection chart associated with this instance. Setting the range selection\n     * chart using this function will automatically update its selection brush when the current chart\n     * zooms in. In return the given range chart will also automatically attach this chart as its focus\n     * chart hence zoom in when range brush updates.\n     *\n     * Usually the range and focus charts will share a dimension. The range chart will set the zoom\n     * boundaries for the focus chart, so its dimension values must be compatible with the domain of\n     * the focus chart.\n     *\n     * See the [Nasdaq 100 Index](http://dc-js.github.com/dc.js/) example for this effect in action.\n     * @method rangeChart\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {dc.coordinateGridMixin} [rangeChart]\n     * @returns {dc.coordinateGridMixin}\n     */\n    _chart.rangeChart = function (rangeChart) {\n        if (!arguments.length) {\n            return _rangeChart;\n        }\n        _rangeChart = rangeChart;\n        _rangeChart.focusChart(_chart);\n        return _chart;\n    };\n\n    /**\n     * Get or set the scale extent for mouse zooms.\n     * @method zoomScale\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Array<Number|Date>} [extent=[1, Infinity]]\n     * @returns {Array<Number|Date>|dc.coordinateGridMixin}\n     */\n    _chart.zoomScale = function (extent) {\n        if (!arguments.length) {\n            return _zoomScale;\n        }\n        _zoomScale = extent;\n        return _chart;\n    };\n\n    /**\n     * Get or set the zoom restriction for the chart. If true limits the zoom to origional domain of the chart.\n     * @method zoomOutRestrict\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [zoomOutRestrict=true]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.zoomOutRestrict = function (zoomOutRestrict) {\n        if (!arguments.length) {\n            return _zoomOutRestrict;\n        }\n        _zoomScale[0] = zoomOutRestrict ? 1 : 0;\n        _zoomOutRestrict = zoomOutRestrict;\n        return _chart;\n    };\n\n    _chart._generateG = function (parent) {\n        if (parent === undefined) {\n            _parent = _chart.svg();\n        } else {\n            _parent = parent;\n        }\n\n        var href = window.location.href.split('#')[0];\n\n        _g = _parent.append('g');\n\n        _chartBodyG = _g.append('g').attr('class', 'chart-body')\n            .attr('transform', 'translate(' + _chart.margins().left + ', ' + _chart.margins().top + ')')\n            .attr('clip-path', 'url(' + href + '#' + getClipPathId() + ')');\n\n        return _g;\n    };\n\n    /**\n     * Get or set the root g element. This method is usually used to retrieve the g element in order to\n     * overlay custom svg drawing programatically. **Caution**: The root g element is usually generated\n     * by dc.js internals, and resetting it might produce unpredictable result.\n     * @method g\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {SVGElement} [gElement]\n     * @returns {SVGElement|dc.coordinateGridMixin}\n     */\n    _chart.g = function (gElement) {\n        if (!arguments.length) {\n            return _g;\n        }\n        _g = gElement;\n        return _chart;\n    };\n\n    /**\n     * Set or get mouse zoom capability flag (default: false). When turned on the chart will be\n     * zoomable using the mouse wheel. If the range selector chart is attached zooming will also update\n     * the range selection brush on the associated range selector chart.\n     * @method mouseZoomable\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [mouseZoomable=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.mouseZoomable = function (mouseZoomable) {\n        if (!arguments.length) {\n            return _mouseZoomable;\n        }\n        _mouseZoomable = mouseZoomable;\n        return _chart;\n    };\n\n    /**\n     * Retrieve the svg group for the chart body.\n     * @method chartBodyG\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {SVGElement} [chartBodyG]\n     * @returns {SVGElement}\n     */\n    _chart.chartBodyG = function (chartBodyG) {\n        if (!arguments.length) {\n            return _chartBodyG;\n        }\n        _chartBodyG = chartBodyG;\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Get or set the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale} or\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md ordinal scale}.\n     * @method x\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @example\n     * // set x to a linear scale\n     * chart.x(d3.scale.linear().domain([-2500, 2500]))\n     * // set x to a time scale to generate histogram\n     * chart.x(d3.time.scale().domain([new Date(1985, 0, 1), new Date(2012, 11, 31)]))\n     * @param {d3.scale} [xScale]\n     * @returns {d3.scale|dc.coordinateGridMixin}\n     */\n    _chart.x = function (xScale) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = xScale;\n        _xOriginalDomain = _x.domain();\n        _chart.rescale();\n        return _chart;\n    };\n\n    _chart.xOriginalDomain = function () {\n        return _xOriginalDomain;\n    };\n\n    /**\n     * Set or get the xUnits function. The coordinate grid chart uses the xUnits function to calculate\n     * the number of data projections on x axis such as the number of bars for a bar chart or the\n     * number of dots for a line chart. This function is expected to return a Javascript array of all\n     * data points on x axis, or the number of points on the axis. [d3 time range functions\n     * d3.time.days, d3.time.months, and\n     * d3.time.years](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#aliases) are all valid xUnits\n     * function. dc.js also provides a few units function, see the {@link dc.units Units Namespace} for\n     * a list of built-in units functions.\n     * @method xUnits\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @todo Add docs for utilities\n     * @example\n     * // set x units to count days\n     * chart.xUnits(d3.time.days);\n     * // set x units to count months\n     * chart.xUnits(d3.time.months);\n     *\n     * // A custom xUnits function can be used as long as it follows the following interface:\n     * // units in integer\n     * function(start, end, xDomain) {\n     *      // simply calculates how many integers in the domain\n     *      return Math.abs(end - start);\n     * };\n     *\n     * // fixed units\n     * function(start, end, xDomain) {\n     *      // be aware using fixed units will disable the focus/zoom ability on the chart\n     *      return 1000;\n     * @param {Function} [xUnits=dc.units.integers]\n     * @returns {Function|dc.coordinateGridMixin}\n     */\n    _chart.xUnits = function (xUnits) {\n        if (!arguments.length) {\n            return _xUnits;\n        }\n        _xUnits = xUnits;\n        return _chart;\n    };\n\n    /**\n     * Set or get the x axis used by a particular coordinate grid chart instance. This function is most\n     * useful when x axis customization is required. The x axis in dc.js is an instance of a\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object};\n     * therefore it supports any valid d3 axis manipulation.\n     *\n     * **Caution**: The x axis is usually generated internally by dc; resetting it may cause\n     * unexpected results. Note also that when used as a getter, this function is not chainable:\n     * it returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n     * so attempting to call chart functions after calling `.xAxis()` will fail}.\n     * @method xAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function(v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [xAxis=d3.svg.axis().orient('bottom')]\n     * @returns {d3.svg.axis|dc.coordinateGridMixin}\n     */\n    _chart.xAxis = function (xAxis) {\n        if (!arguments.length) {\n            return _xAxis;\n        }\n        _xAxis = xAxis;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off elastic x axis behavior. If x axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the x axis range whenever a redraw event is triggered.\n     * @method elasticX\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [elasticX=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n            return _xElasticity;\n        }\n        _xElasticity = elasticX;\n        return _chart;\n    };\n\n    /**\n     * Set or get x axis padding for the elastic x axis. The padding will be added to both end of the x\n     * axis if elasticX is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date x axes.  When padding a date axis, an integer represents number of units being padded\n     * and a percentage string will be treated the same as an integer. The unit will be determined by the\n     * xAxisPaddingUnit variable.\n     * @method xAxisPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number|String} [padding=0]\n     * @returns {Number|String|dc.coordinateGridMixin}\n     */\n    _chart.xAxisPadding = function (padding) {\n        if (!arguments.length) {\n            return _xAxisPadding;\n        }\n        _xAxisPadding = padding;\n        return _chart;\n    };\n\n    /**\n     * Set or get x axis padding unit for the elastic x axis. The padding unit will determine which unit to\n     * use when applying xAxis padding if elasticX is turned on and if x-axis uses a time dimension;\n     * otherwise it is ignored.\n     *\n     * Padding unit is a string that will be used when the padding is calculated. Available parameters are\n     * the available d3 time intervals; see\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval d3.time.interval}.\n     * @method xAxisPaddingUnit\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [unit='days']\n     * @returns {String|dc.coordinateGridMixin}\n     */\n    _chart.xAxisPaddingUnit = function (unit) {\n        if (!arguments.length) {\n            return _xAxisPaddingUnit;\n        }\n        _xAxisPaddingUnit = unit;\n        return _chart;\n    };\n\n    /**\n     * Returns the number of units displayed on the x axis using the unit measure configured by\n     * {@link dc.coordinateGridMixin#xUnits xUnits}.\n     * @method xUnitCount\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {Number}\n     */\n    _chart.xUnitCount = function () {\n        if (_unitCount === undefined) {\n            var units = _chart.xUnits()(_chart.x().domain()[0], _chart.x().domain()[1], _chart.x().domain());\n\n            if (units instanceof Array) {\n                _unitCount = units.length;\n            } else {\n                _unitCount = units;\n            }\n        }\n\n        return _unitCount;\n    };\n\n    /**\n     * Gets or sets whether the chart should be drawn with a right axis instead of a left axis. When\n     * used with a chart in a composite chart, allows both left and right Y axes to be shown on a\n     * chart.\n     * @method useRightYAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [useRightYAxis=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.useRightYAxis = function (useRightYAxis) {\n        if (!arguments.length) {\n            return _useRightYAxis;\n        }\n        _useRightYAxis = useRightYAxis;\n        return _chart;\n    };\n\n    /**\n     * Returns true if the chart is using ordinal xUnits ({@link dc.units.ordinal dc.units.ordinal}, or false\n     * otherwise. Most charts behave differently with ordinal data and use the result of this method to\n     * trigger the appropriate logic.\n     * @method isOrdinal\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {Boolean}\n     */\n    _chart.isOrdinal = function () {\n        return _chart.xUnits() === dc.units.ordinal;\n    };\n\n    _chart._useOuterPadding = function () {\n        return true;\n    };\n\n    _chart._ordinalXDomain = function () {\n        var groups = _chart._computeOrderedGroups(_chart.data());\n        return groups.map(_chart.keyAccessor());\n    };\n\n    function compareDomains (d1, d2) {\n        return !d1 || !d2 || d1.length !== d2.length ||\n            d1.some(function (elem, i) { return (elem && d2[i]) ? elem.toString() !== d2[i].toString() : elem === d2[i]; });\n    }\n\n    function prepareXAxis (g, render) {\n        if (!_chart.isOrdinal()) {\n            if (_chart.elasticX()) {\n                _x.domain([_chart.xAxisMin(), _chart.xAxisMax()]);\n            }\n        } else { // _chart.isOrdinal()\n            if (_chart.elasticX() || _x.domain().length === 0) {\n                _x.domain(_chart._ordinalXDomain());\n            }\n        }\n\n        // has the domain changed?\n        var xdom = _x.domain();\n        if (render || compareDomains(_lastXDomain, xdom)) {\n            _chart.rescale();\n        }\n        _lastXDomain = xdom;\n\n        // please can't we always use rangeBands for bar charts?\n        if (_chart.isOrdinal()) {\n            _x.rangeBands([0, _chart.xAxisLength()], _rangeBandPadding,\n                          _chart._useOuterPadding() ? _outerRangeBandPadding : 0);\n        } else {\n            _x.range([0, _chart.xAxisLength()]);\n        }\n\n        _xAxis = _xAxis.scale(_chart.x());\n\n        renderVerticalGridLines(g);\n    }\n\n    _chart.renderXAxis = function (g) {\n        var axisXG = g.select('g.x');\n\n        if (axisXG.empty()) {\n            axisXG = g.append('g')\n                .attr('class', 'axis x')\n                .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')');\n        }\n\n        var axisXLab = g.select('text.' + X_AXIS_LABEL_CLASS);\n        if (axisXLab.empty() && _chart.xAxisLabel()) {\n            axisXLab = g.append('text')\n                .attr('class', X_AXIS_LABEL_CLASS)\n                .attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' +\n                      (_chart.height() - _xAxisLabelPadding) + ')')\n                .attr('text-anchor', 'middle');\n        }\n        if (_chart.xAxisLabel() && axisXLab.text() !== _chart.xAxisLabel()) {\n            axisXLab.text(_chart.xAxisLabel());\n        }\n\n        dc.transition(axisXG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')')\n            .call(_xAxis);\n        dc.transition(axisXLab, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' +\n                  (_chart.height() - _xAxisLabelPadding) + ')');\n    };\n\n    function renderVerticalGridLines (g) {\n        var gridLineG = g.select('g.' + VERTICAL_CLASS);\n\n        if (_renderVerticalGridLine) {\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child')\n                    .attr('class', GRID_LINE_CLASS + ' ' + VERTICAL_CLASS)\n                    .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n            }\n\n            var ticks = _xAxis.tickValues() ? _xAxis.tickValues() :\n                    (typeof _x.ticks === 'function' ? _x.ticks(_xAxis.ticks()[0]) : _x.domain());\n\n            var lines = gridLineG.selectAll('line')\n                .data(ticks);\n\n            // enter\n            var linesGEnter = lines.enter()\n                .append('line')\n                .attr('x1', function (d) {\n                    return _x(d);\n                })\n                .attr('y1', _chart._xAxisY() - _chart.margins().top)\n                .attr('x2', function (d) {\n                    return _x(d);\n                })\n                .attr('y2', 0)\n                .attr('opacity', 0);\n            dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', 1);\n\n            // update\n            dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('x1', function (d) {\n                    return _x(d);\n                })\n                .attr('y1', _chart._xAxisY() - _chart.margins().top)\n                .attr('x2', function (d) {\n                    return _x(d);\n                })\n                .attr('y2', 0);\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    }\n\n    _chart._xAxisY = function () {\n        return (_chart.height() - _chart.margins().bottom);\n    };\n\n    _chart.xAxisLength = function () {\n        return _chart.effectiveWidth();\n    };\n\n    /**\n     * Set or get the x axis label. If setting the label, you may optionally include additional padding to\n     * the margin to make room for the label. By default the padded is set to 12 to accomodate the text height.\n     * @method xAxisLabel\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String}\n     */\n    _chart.xAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n            return _xAxisLabel;\n        }\n        _xAxisLabel = labelText;\n        _chart.margins().bottom -= _xAxisLabelPadding;\n        _xAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().bottom += _xAxisLabelPadding;\n        return _chart;\n    };\n\n    _chart._prepareYAxis = function (g) {\n        if (_y === undefined || _chart.elasticY()) {\n            if (_y === undefined) {\n                _y = d3.scale.linear();\n            }\n            var min = _chart.yAxisMin() || 0,\n                max = _chart.yAxisMax() || 0;\n            _y.domain([min, max]).rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _y.range([_chart.yAxisHeight(), 0]);\n        _yAxis = _yAxis.scale(_y);\n\n        if (_useRightYAxis) {\n            _yAxis.orient('right');\n        }\n\n        _chart._renderHorizontalGridLinesForAxis(g, _y, _yAxis);\n    };\n\n    _chart.renderYAxisLabel = function (axisClass, text, rotation, labelXPosition) {\n        labelXPosition = labelXPosition || _yAxisLabelPadding;\n\n        var axisYLab = _chart.g().select('text.' + Y_AXIS_LABEL_CLASS + '.' + axisClass + '-label');\n        var labelYPosition = (_chart.margins().top + _chart.yAxisHeight() / 2);\n        if (axisYLab.empty() && text) {\n            axisYLab = _chart.g().append('text')\n                .attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')')\n                .attr('class', Y_AXIS_LABEL_CLASS + ' ' + axisClass + '-label')\n                .attr('text-anchor', 'middle')\n                .text(text);\n        }\n        if (text && axisYLab.text() !== text) {\n            axisYLab.text(text);\n        }\n        dc.transition(axisYLab, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')');\n    };\n\n    _chart.renderYAxisAt = function (axisClass, axis, position) {\n        var axisYG = _chart.g().select('g.' + axisClass);\n        if (axisYG.empty()) {\n            axisYG = _chart.g().append('g')\n                .attr('class', 'axis ' + axisClass)\n                .attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')');\n        }\n\n        dc.transition(axisYG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')')\n            .call(axis);\n    };\n\n    _chart.renderYAxis = function () {\n        var axisPosition = _useRightYAxis ? (_chart.width() - _chart.margins().right) : _chart._yAxisX();\n        _chart.renderYAxisAt('y', _yAxis, axisPosition);\n        var labelPosition = _useRightYAxis ? (_chart.width() - _yAxisLabelPadding) : _yAxisLabelPadding;\n        var rotation = _useRightYAxis ? 90 : -90;\n        _chart.renderYAxisLabel('y', _chart.yAxisLabel(), rotation, labelPosition);\n    };\n\n    _chart._renderHorizontalGridLinesForAxis = function (g, scale, axis) {\n        var gridLineG = g.select('g.' + HORIZONTAL_CLASS);\n\n        if (_renderHorizontalGridLine) {\n            var ticks = axis.tickValues() ? axis.tickValues() : scale.ticks(axis.ticks()[0]);\n\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child')\n                    .attr('class', GRID_LINE_CLASS + ' ' + HORIZONTAL_CLASS)\n                    .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n            }\n\n            var lines = gridLineG.selectAll('line')\n                .data(ticks);\n\n            // enter\n            var linesGEnter = lines.enter()\n                .append('line')\n                .attr('x1', 1)\n                .attr('y1', function (d) {\n                    return scale(d);\n                })\n                .attr('x2', _chart.xAxisLength())\n                .attr('y2', function (d) {\n                    return scale(d);\n                })\n                .attr('opacity', 0);\n            dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', 1);\n\n            // update\n            dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('x1', 1)\n                .attr('y1', function (d) {\n                    return scale(d);\n                })\n                .attr('x2', _chart.xAxisLength())\n                .attr('y2', function (d) {\n                    return scale(d);\n                });\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    };\n\n    _chart._yAxisX = function () {\n        return _chart.useRightYAxis() ? _chart.width() - _chart.margins().right : _chart.margins().left;\n    };\n\n    /**\n     * Set or get the y axis label. If setting the label, you may optionally include additional padding\n     * to the margin to make room for the label. By default the padding is set to 12 to accommodate the\n     * text height.\n     * @method yAxisLabel\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String|dc.coordinateGridMixin}\n     */\n    _chart.yAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n            return _yAxisLabel;\n        }\n        _yAxisLabel = labelText;\n        _chart.margins().left -= _yAxisLabelPadding;\n        _yAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().left += _yAxisLabelPadding;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y scale. The y scale is typically automatically determined by the chart implementation.\n     * @method y\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|dc.coordinateGridMixin}\n     */\n    _chart.y = function (yScale) {\n        if (!arguments.length) {\n            return _y;\n        }\n        _y = yScale;\n        _chart.rescale();\n        return _chart;\n    };\n\n    /**\n     * Set or get the y axis used by the coordinate grid chart instance. This function is most useful\n     * when y axis customization is required. The y axis in dc.js is simply an instance of a [d3 axis\n     * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis); therefore it supports any\n     * valid d3 axis manipulation.\n     *\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.  Note also that when used as a getter, this function is not chainable: it\n     * returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n     * so attempting to call chart functions after calling `.yAxis()` will fail}.\n     * @method yAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize y axis tick format\n     * chart.yAxis().tickFormat(function(v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.yAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [yAxis=d3.svg.axis().orient('left')]\n     * @returns {d3.svg.axis|dc.coordinateGridMixin}\n     */\n    _chart.yAxis = function (yAxis) {\n        if (!arguments.length) {\n            return _yAxis;\n        }\n        _yAxis = yAxis;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off elastic y axis behavior. If y axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the y axis range whenever a redraw event is triggered.\n     * @method elasticY\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [elasticY=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.elasticY = function (elasticY) {\n        if (!arguments.length) {\n            return _yElasticity;\n        }\n        _yElasticity = elasticY;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off horizontal grid lines.\n     * @method renderHorizontalGridLines\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [renderHorizontalGridLines=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.renderHorizontalGridLines = function (renderHorizontalGridLines) {\n        if (!arguments.length) {\n            return _renderHorizontalGridLine;\n        }\n        _renderHorizontalGridLine = renderHorizontalGridLines;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off vertical grid lines.\n     * @method renderVerticalGridLines\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [renderVerticalGridLines=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.renderVerticalGridLines = function (renderVerticalGridLines) {\n        if (!arguments.length) {\n            return _renderVerticalGridLine;\n        }\n        _renderVerticalGridLine = renderVerticalGridLines;\n        return _chart;\n    };\n\n    /**\n     * Calculates the minimum x value to display in the chart. Includes xAxisPadding if set.\n     * @method xAxisMin\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.xAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.keyAccessor()(e);\n        });\n        return dc.utils.subtract(min, _xAxisPadding, _xAxisPaddingUnit);\n    };\n\n    /**\n     * Calculates the maximum x value to display in the chart. Includes xAxisPadding if set.\n     * @method xAxisMax\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.xAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.keyAccessor()(e);\n        });\n        return dc.utils.add(max, _xAxisPadding, _xAxisPaddingUnit);\n    };\n\n    /**\n     * Calculates the minimum y value to display in the chart. Includes yAxisPadding if set.\n     * @method yAxisMin\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.yAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.valueAccessor()(e);\n        });\n        return dc.utils.subtract(min, _yAxisPadding);\n    };\n\n    /**\n     * Calculates the maximum y value to display in the chart. Includes yAxisPadding if set.\n     * @method yAxisMax\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.yAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.valueAccessor()(e);\n        });\n        return dc.utils.add(max, _yAxisPadding);\n    };\n\n    /**\n     * Set or get y axis padding for the elastic y axis. The padding will be added to the top and\n     * bottom of the y axis if elasticY is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date axes. When padding a date axis, an integer represents number of days being padded\n     * and a percentage string will be treated the same as an integer.\n     * @method yAxisPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number|String} [padding=0]\n     * @returns {Number|dc.coordinateGridMixin}\n     */\n    _chart.yAxisPadding = function (padding) {\n        if (!arguments.length) {\n            return _yAxisPadding;\n        }\n        _yAxisPadding = padding;\n        return _chart;\n    };\n\n    _chart.yAxisHeight = function () {\n        return _chart.effectiveHeight();\n    };\n\n    /**\n     * Set or get the rounding function used to quantize the selection when brushing is enabled.\n     * @method round\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @example\n     * // set x unit round to by month, this will make sure range selection brush will\n     * // select whole months\n     * chart.round(d3.time.month.round);\n     * @param {Function} [round]\n     * @returns {Function|dc.coordinateGridMixin}\n     */\n    _chart.round = function (round) {\n        if (!arguments.length) {\n            return _round;\n        }\n        _round = round;\n        return _chart;\n    };\n\n    _chart._rangeBandPadding = function (_) {\n        if (!arguments.length) {\n            return _rangeBandPadding;\n        }\n        _rangeBandPadding = _;\n        return _chart;\n    };\n\n    _chart._outerRangeBandPadding = function (_) {\n        if (!arguments.length) {\n            return _outerRangeBandPadding;\n        }\n        _outerRangeBandPadding = _;\n        return _chart;\n    };\n\n    dc.override(_chart, 'filter', function (_) {\n        if (!arguments.length) {\n            return _chart._filter();\n        }\n\n        _chart._filter(_);\n\n        if (_) {\n            _chart.brush().extent(_);\n        } else {\n            _chart.brush().clear();\n        }\n\n        return _chart;\n    });\n\n    _chart.brush = function (_) {\n        if (!arguments.length) {\n            return _brush;\n        }\n        _brush = _;\n        return _chart;\n    };\n\n    function brushHeight () {\n        return _chart._xAxisY() - _chart.margins().top;\n    }\n\n    _chart.renderBrush = function (g) {\n        if (_brushOn) {\n            _brush.on('brush', _chart._brushing);\n            _brush.on('brushstart', _chart._disableMouseZoom);\n            _brush.on('brushend', configureMouseZoom);\n\n            var gBrush = g.append('g')\n                .attr('class', 'brush')\n                .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')')\n                .call(_brush.x(_chart.x()));\n            _chart.setBrushY(gBrush, false);\n            _chart.setHandlePaths(gBrush);\n\n            if (_chart.hasFilter()) {\n                _chart.redrawBrush(g, false);\n            }\n        }\n    };\n\n    _chart.setHandlePaths = function (gBrush) {\n        gBrush.selectAll('.resize').append('path').attr('d', _chart.resizeHandlePath);\n    };\n\n    _chart.setBrushY = function (gBrush) {\n        gBrush.selectAll('rect')\n            .attr('height', brushHeight());\n        gBrush.selectAll('.resize path')\n            .attr('d', _chart.resizeHandlePath);\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _brush.extent();\n        if (_chart.round()) {\n            extent[0] = extent.map(_chart.round())[0];\n            extent[1] = extent.map(_chart.round())[1];\n\n            _g.select('.brush')\n                .call(_brush.extent(extent));\n        }\n        return extent;\n    };\n\n    _chart.brushIsEmpty = function (extent) {\n        return _brush.empty() || !extent || extent[1] <= extent[0];\n    };\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n\n        _chart.redrawBrush(_g, false);\n\n        if (_chart.brushIsEmpty(extent)) {\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n        } else {\n            var rangedFilter = dc.filters.RangedFilter(extent[0], extent[1]);\n\n            dc.events.trigger(function () {\n                _chart.replaceFilter(rangedFilter);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n        }\n    };\n\n    _chart.redrawBrush = function (g, doTransition) {\n        if (_brushOn) {\n            if (_chart.filter() && _chart.brush().empty()) {\n                _chart.brush().extent(_chart.filter());\n            }\n\n            var gBrush = dc.optionalTransition(doTransition, _chart.transitionDuration(), _chart.transitionDelay())(g.select('g.brush'));\n            _chart.setBrushY(gBrush);\n            gBrush.call(_chart.brush()\n                      .x(_chart.x())\n                      .extent(_chart.brush().extent()));\n        }\n\n        _chart.fadeDeselectedArea();\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        // do nothing, sub-chart should override this function\n    };\n\n    // borrowed from Crossfilter example\n    _chart.resizeHandlePath = function (d) {\n        var e = +(d === 'e'), x = e ? 1 : -1, y = brushHeight() / 3;\n        return 'M' + (0.5 * x) + ',' + y +\n            'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6) +\n            'V' + (2 * y - 6) +\n            'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y) +\n            'Z' +\n            'M' + (2.5 * x) + ',' + (y + 8) +\n            'V' + (2 * y - 8) +\n            'M' + (4.5 * x) + ',' + (y + 8) +\n            'V' + (2 * y - 8);\n    };\n\n    function getClipPathId () {\n        return _chart.anchorName().replace(/[ .#=\\[\\]\"]/g, '-') + '-clip';\n    }\n\n    /**\n     * Get or set the padding in pixels for the clip path. Once set padding will be applied evenly to\n     * the top, left, right, and bottom when the clip path is generated. If set to zero, the clip area\n     * will be exactly the chart body area minus the margins.\n     * @method clipPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number} [padding=5]\n     * @returns {Number|dc.coordinateGridMixin}\n     */\n    _chart.clipPadding = function (padding) {\n        if (!arguments.length) {\n            return _clipPadding;\n        }\n        _clipPadding = padding;\n        return _chart;\n    };\n\n    function generateClipPath () {\n        var defs = dc.utils.appendOrSelect(_parent, 'defs');\n        // cannot select <clippath> elements; bug in WebKit, must select by id\n        // https://groups.google.com/forum/#!topic/d3-js/6EpAzQ2gU9I\n        var id = getClipPathId();\n        var chartBodyClip = dc.utils.appendOrSelect(defs, '#' + id, 'clipPath').attr('id', id);\n\n        var padding = _clipPadding * 2;\n\n        dc.utils.appendOrSelect(chartBodyClip, 'rect')\n            .attr('width', _chart.xAxisLength() + padding)\n            .attr('height', _chart.yAxisHeight() + padding)\n            .attr('transform', 'translate(-' + _clipPadding + ', -' + _clipPadding + ')');\n    }\n\n    _chart._preprocessData = function () {};\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chart._preprocessData();\n\n        _chart._generateG();\n        generateClipPath();\n\n        drawChart(true);\n\n        configureMouseZoom();\n\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        _chart._preprocessData();\n\n        drawChart(false);\n        generateClipPath();\n\n        return _chart;\n    };\n\n    function drawChart (render) {\n        if (_chart.isOrdinal()) {\n            _brushOn = false;\n        }\n\n        prepareXAxis(_chart.g(), render);\n        _chart._prepareYAxis(_chart.g());\n\n        _chart.plotData();\n\n        if (_chart.elasticX() || _resizing || render) {\n            _chart.renderXAxis(_chart.g());\n        }\n\n        if (_chart.elasticY() || _resizing || render) {\n            _chart.renderYAxis(_chart.g());\n        }\n\n        if (render) {\n            _chart.renderBrush(_chart.g(), false);\n        } else {\n            _chart.redrawBrush(_chart.g(), _resizing);\n        }\n        _chart.fadeDeselectedArea();\n        _resizing = false;\n    }\n\n    function configureMouseZoom () {\n        if (_mouseZoomable) {\n            _chart._enableMouseZoom();\n        } else if (_hasBeenMouseZoomable) {\n            _chart._disableMouseZoom();\n        }\n    }\n\n    _chart._enableMouseZoom = function () {\n        _hasBeenMouseZoomable = true;\n        _zoom.x(_chart.x())\n            .scaleExtent(_zoomScale)\n            .size([_chart.width(), _chart.height()])\n            .duration(_chart.transitionDuration());\n        _chart.root().call(_zoom);\n    };\n\n    _chart._disableMouseZoom = function () {\n        _chart.root().call(_nullZoom);\n    };\n\n    function zoomHandler () {\n        _refocused = true;\n        if (_zoomOutRestrict) {\n            var constraint = _xOriginalDomain;\n            if (_rangeChart) {\n                constraint = intersectExtents(constraint, _rangeChart.x().domain());\n            }\n            var constrained = constrainExtent(_chart.x().domain(), constraint);\n            if (constrained) {\n                _chart.x().domain(constrained);\n            }\n        }\n\n        var domain = _chart.x().domain();\n        var domFilter = dc.filters.RangedFilter(domain[0], domain[1]);\n\n        _chart.replaceFilter(domFilter);\n        _chart.rescale();\n        _chart.redraw();\n\n        if (_rangeChart && !rangesEqual(_chart.filter(), _rangeChart.filter())) {\n            dc.events.trigger(function () {\n                _rangeChart.replaceFilter(domFilter);\n                _rangeChart.redraw();\n            });\n        }\n\n        _chart._invokeZoomedListener();\n\n        dc.events.trigger(function () {\n            _chart.redrawGroup();\n        }, dc.constants.EVENT_DELAY);\n\n        _refocused = !rangesEqual(domain, _xOriginalDomain);\n    }\n\n    function intersectExtents (ext1, ext2) {\n        if (ext1[0] > ext2[1] || ext1[1] < ext2[0]) {\n            console.warn('could not intersect extents');\n        }\n        return [Math.max(ext1[0], ext2[0]), Math.min(ext1[1], ext2[1])];\n    }\n\n    function constrainExtent (extent, constraint) {\n        var size = extent[1] - extent[0];\n        if (extent[0] < constraint[0]) {\n            return [constraint[0], Math.min(constraint[1], dc.utils.add(constraint[0], size, 'millis'))];\n        } else if (extent[1] > constraint[1]) {\n            return [Math.max(constraint[0], dc.utils.subtract(constraint[1], size, 'millis')), constraint[1]];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Zoom this chart to focus on the given range. The given range should be an array containing only\n     * 2 elements (`[start, end]`) defining a range in the x domain. If the range is not given or set\n     * to null, then the zoom will be reset. _For focus to work elasticX has to be turned off;\n     * otherwise focus will be ignored.\n     * @method focus\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @example\n     * chart.on('renderlet', function(chart) {\n     *     // smooth the rendering through event throttling\n     *     dc.events.trigger(function(){\n     *          // focus some other chart to the range selected by user on this chart\n     *          someOtherChart.focus(chart.filter());\n     *     });\n     * })\n     * @param {Array<Number>} [range]\n     */\n    _chart.focus = function (range) {\n        if (hasRangeSelected(range)) {\n            _chart.x().domain(range);\n        } else {\n            _chart.x().domain(_xOriginalDomain);\n        }\n\n        _zoom.x(_chart.x());\n        zoomHandler();\n    };\n\n    _chart.refocused = function () {\n        return _refocused;\n    };\n\n    _chart.focusChart = function (c) {\n        if (!arguments.length) {\n            return _focusChart;\n        }\n        _focusChart = c;\n        _chart.on('filtered', function (chart) {\n            if (!chart.filter()) {\n                dc.events.trigger(function () {\n                    _focusChart.x().domain(_focusChart.xOriginalDomain());\n                });\n            } else if (!rangesEqual(chart.filter(), _focusChart.filter())) {\n                dc.events.trigger(function () {\n                    _focusChart.focus(chart.filter());\n                });\n            }\n        });\n        return _chart;\n    };\n\n    function rangesEqual (range1, range2) {\n        if (!range1 && !range2) {\n            return true;\n        } else if (!range1 || !range2) {\n            return false;\n        } else if (range1.length === 0 && range2.length === 0) {\n            return true;\n        } else if (range1[0].valueOf() === range2[0].valueOf() &&\n            range1[1].valueOf() === range2[1].valueOf()) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Turn on/off the brush-based range filter. When brushing is on then user can drag the mouse\n     * across a chart with a quantitative scale to perform range filtering based on the extent of the\n     * brush, or click on the bars of an ordinal bar chart or slices of a pie chart to filter and\n     * un-filter them. However turning on the brush filter will disable other interactive elements on\n     * the chart such as highlighting, tool tips, and reference lines. Zooming will still be possible\n     * if enabled, but only via scrolling (panning will be disabled.)\n     * @method brushOn\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [brushOn=true]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.brushOn = function (brushOn) {\n        if (!arguments.length) {\n            return _brushOn;\n        }\n        _brushOn = brushOn;\n        return _chart;\n    };\n\n    function hasRangeSelected (range) {\n        return range instanceof Array && range.length > 1;\n    }\n\n    return _chart;\n};\n\n/**\n * Stack Mixin is an mixin that provides cross-chart support of stackability using d3.layout.stack.\n * @name stackMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.stackMixin}\n */\ndc.stackMixin = function (_chart) {\n\n    function prepareValues (layer, layerIdx) {\n        var valAccessor = layer.accessor || _chart.valueAccessor();\n        layer.name = String(layer.name || layerIdx);\n        layer.values = layer.group.all().map(function (d, i) {\n            return {\n                x: _chart.keyAccessor()(d, i),\n                y: layer.hidden ? null : valAccessor(d, i),\n                data: d,\n                layer: layer.name,\n                hidden: layer.hidden\n            };\n        });\n\n        layer.values = layer.values.filter(domainFilter());\n        return layer.values;\n    }\n\n    var _stackLayout = d3.layout.stack()\n        .values(prepareValues);\n\n    var _stack = [];\n    var _titles = {};\n\n    var _hidableStacks = false;\n    var _evadeDomainFilter = false;\n\n    function domainFilter () {\n        if (!_chart.x() || _evadeDomainFilter) {\n            return d3.functor(true);\n        }\n        var xDomain = _chart.x().domain();\n        if (_chart.isOrdinal()) {\n            // TODO #416\n            //var domainSet = d3.set(xDomain);\n            return function () {\n                return true; //domainSet.has(p.x);\n            };\n        }\n        if (_chart.elasticX()) {\n            return function () { return true; };\n        }\n        return function (p) {\n            //return true;\n            return p.x >= xDomain[0] && p.x <= xDomain[xDomain.length - 1];\n        };\n    }\n\n    /**\n     * Stack a new crossfilter group onto this chart with an optional custom value accessor. All stacks\n     * in the same chart will share the same key accessor and therefore the same set of keys.\n     *\n     * For example, in a stacked bar chart, the bars of each stack will be positioned using the same set\n     * of keys on the x axis, while stacked vertically. If name is specified then it will be used to\n     * generate the legend label.\n     * @method stack\n     * @memberof dc.stackMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * // stack group using default accessor\n     * chart.stack(valueSumGroup)\n     * // stack group using custom accessor\n     * .stack(avgByDayGroup, function(d){return d.value.avgByDay;});\n     * @param {crossfilter.group} group\n     * @param {String} [name]\n     * @param {Function} [accessor]\n     * @returns {Array<{group: crossfilter.group, name: String, accessor: Function}>|dc.stackMixin}\n     */\n    _chart.stack = function (group, name, accessor) {\n        if (!arguments.length) {\n            return _stack;\n        }\n\n        if (arguments.length <= 2) {\n            accessor = name;\n        }\n\n        var layer = {group: group};\n        if (typeof name === 'string') {\n            layer.name = name;\n        }\n        if (typeof accessor === 'function') {\n            layer.accessor = accessor;\n        }\n        _stack.push(layer);\n\n        return _chart;\n    };\n\n    dc.override(_chart, 'group', function (g, n, f) {\n        if (!arguments.length) {\n            return _chart._group();\n        }\n        _stack = [];\n        _titles = {};\n        _chart.stack(g, n);\n        if (f) {\n            _chart.valueAccessor(f);\n        }\n        return _chart._group(g, n);\n    });\n\n    /**\n     * Allow named stacks to be hidden or shown by clicking on legend items.\n     * This does not affect the behavior of hideStack or showStack.\n     * @method hidableStacks\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {Boolean} [hidableStacks=false]\n     * @returns {Boolean|dc.stackMixin}\n     */\n    _chart.hidableStacks = function (hidableStacks) {\n        if (!arguments.length) {\n            return _hidableStacks;\n        }\n        _hidableStacks = hidableStacks;\n        return _chart;\n    };\n\n    function findLayerByName (n) {\n        var i = _stack.map(dc.pluck('name')).indexOf(n);\n        return _stack[i];\n    }\n\n    /**\n     * Hide all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @method hideStack\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {String} stackName\n     * @returns {dc.stackMixin}\n     */\n    _chart.hideStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = true;\n        }\n        return _chart;\n    };\n\n    /**\n     * Show all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @method showStack\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {String} stackName\n     * @returns {dc.stackMixin}\n     */\n    _chart.showStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = false;\n        }\n        return _chart;\n    };\n\n    _chart.getValueAccessorByIndex = function (index) {\n        return _stack[index].accessor || _chart.valueAccessor();\n    };\n\n    _chart.yAxisMin = function () {\n        var min = d3.min(flattenStack(), function (p) {\n            return (p.y < 0) ? (p.y + p.y0) : p.y0;\n        });\n\n        return dc.utils.subtract(min, _chart.yAxisPadding());\n\n    };\n\n    _chart.yAxisMax = function () {\n        var max = d3.max(flattenStack(), function (p) {\n            return (p.y > 0) ? (p.y + p.y0) : p.y0;\n        });\n\n        return dc.utils.add(max, _chart.yAxisPadding());\n    };\n\n    function flattenStack () {\n        var valueses = _chart.data().map(function (layer) { return layer.values; });\n        return Array.prototype.concat.apply([], valueses);\n    }\n\n    _chart.xAxisMin = function () {\n        var min = d3.min(flattenStack(), dc.pluck('x'));\n        return dc.utils.subtract(min, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    };\n\n    _chart.xAxisMax = function () {\n        var max = d3.max(flattenStack(), dc.pluck('x'));\n        return dc.utils.add(max, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    };\n\n    /**\n     * Set or get the title function. Chart class will use this function to render svg title (usually interpreted by\n     * browser as tooltips) for each child element in the chart, i.e. a slice in a pie chart or a bubble in a bubble chart.\n     * Almost every chart supports title function however in grid coordinate chart you need to turn off brush in order to\n     * use title otherwise the brush layer will block tooltip trigger.\n     *\n     * If the first argument is a stack name, the title function will get or set the title for that stack. If stackName\n     * is not provided, the first stack is implied.\n     * @method title\n     * @memberof dc.stackMixin\n     * @instance\n     * @example\n     * // set a title function on 'first stack'\n     * chart.title('first stack', function(d) { return d.key + ': ' + d.value; });\n     * // get a title function from 'second stack'\n     * var secondTitleFunction = chart.title('second stack');\n     * @param {String} [stackName]\n     * @param {Function} [titleAccessor]\n     * @returns {String|dc.stackMixin}\n     */\n    dc.override(_chart, 'title', function (stackName, titleAccessor) {\n        if (!stackName) {\n            return _chart._title();\n        }\n\n        if (typeof stackName === 'function') {\n            return _chart._title(stackName);\n        }\n        if (stackName === _chart._groupName && typeof titleAccessor === 'function') {\n            return _chart._title(titleAccessor);\n        }\n\n        if (typeof titleAccessor !== 'function') {\n            return _titles[stackName] || _chart._title();\n        }\n\n        _titles[stackName] = titleAccessor;\n\n        return _chart;\n    });\n\n    /**\n     * Gets or sets the stack layout algorithm, which computes a baseline for each stack and\n     * propagates it to the next.\n     * @method stackLayout\n     * @memberof dc.stackMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Stack-Layout.md d3.layout.stack}\n     * @param {Function} [stack=d3.layout.stack]\n     * @returns {Function|dc.stackMixin}\n     */\n    _chart.stackLayout = function (stack) {\n        if (!arguments.length) {\n            return _stackLayout;\n        }\n        _stackLayout = stack;\n        if (_stackLayout.values() === d3.layout.stack().values()) {\n            _stackLayout.values(prepareValues);\n        }\n        return _chart;\n    };\n\n    /**\n     * Since dc.js 2.0, there has been {@link https://github.com/dc-js/dc.js/issues/949 an issue}\n     * where points are filtered to the current domain. While this is a useful optimization, it is\n     * incorrectly implemented: the next point outside the domain is required in order to draw lines\n     * that are clipped to the bounds, as well as bars that are partly clipped.\n     *\n     * A fix will be included in dc.js 2.1.x, but a workaround is needed for dc.js 2.0 and until\n     * that fix is published, so set this flag to skip any filtering of points.\n     *\n     * Once the bug is fixed, this flag will have no effect, and it will be deprecated.\n     * @method evadeDomainFilter\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {Boolean} [evadeDomainFilter=false]\n     * @returns {Boolean|dc.stackMixin}\n     */\n    _chart.evadeDomainFilter = function (evadeDomainFilter) {\n        if (!arguments.length) {\n            return _evadeDomainFilter;\n        }\n        _evadeDomainFilter = evadeDomainFilter;\n        return _chart;\n    };\n\n    function visability (l) {\n        return !l.hidden;\n    }\n\n    _chart.data(function () {\n        var layers = _stack.filter(visability);\n        return layers.length ? _chart.stackLayout()(layers) : [];\n    });\n\n    _chart._ordinalXDomain = function () {\n        var flat = flattenStack().map(dc.pluck('data'));\n        var ordered = _chart._computeOrderedGroups(flat);\n        return ordered.map(_chart.keyAccessor());\n    };\n\n    _chart.colorAccessor(function (d) {\n        var layer = this.layer || this.name || d.name || d.layer;\n        return layer;\n    });\n\n    _chart.legendables = function () {\n        return _stack.map(function (layer, i) {\n            return {\n                chart: _chart,\n                name: layer.name,\n                hidden: layer.hidden || false,\n                color: _chart.getColor.call(layer, layer.values, i)\n            };\n        });\n    };\n\n    _chart.isLegendableHidden = function (d) {\n        var layer = findLayerByName(d.name);\n        return layer ? layer.hidden : false;\n    };\n\n    _chart.legendToggle = function (d) {\n        if (_hidableStacks) {\n            if (_chart.isLegendableHidden(d)) {\n                _chart.showStack(d.name);\n            } else {\n                _chart.hideStack(d.name);\n            }\n            //_chart.redraw();\n            _chart.renderGroup();\n        }\n    };\n\n    return _chart;\n};\n\n/**\n * Cap is a mixin that groups small data elements below a _cap_ into an *others* grouping for both the\n * Row and Pie Charts.\n *\n * The top ordered elements in the group up to the cap amount will be kept in the chart, and the rest\n * will be replaced with an *others* element, with value equal to the sum of the replaced values. The\n * keys of the elements below the cap limit are recorded in order to filter by those keys when the\n * others* element is clicked.\n * @name capMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.capMixin}\n */\ndc.capMixin = function (_chart) {\n    var _cap = Infinity, _takeFront = true;\n    var _othersLabel = 'Others';\n\n    // emulate old group.top(N) ordering\n    _chart.ordering(function (kv) {\n        return -kv.value;\n    });\n\n    var _othersGrouper = function (topItems, restItems) {\n        var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n            restKeys = restItems.map(_chart.keyAccessor());\n        if (restItemsSum > 0) {\n            return topItems.concat([{\n                others: restKeys,\n                key: _chart.othersLabel(),\n                value: restItemsSum\n            }]);\n        }\n        return topItems;\n    };\n\n    _chart.cappedKeyAccessor = function (d, i) {\n        if (d.others) {\n            return d.key;\n        }\n        return _chart.keyAccessor()(d, i);\n    };\n\n    _chart.cappedValueAccessor = function (d, i) {\n        if (d.others) {\n            return d.value;\n        }\n        return _chart.valueAccessor()(d, i);\n    };\n\n    // return N \"top\" groups, where N is the cap, sorted by baseMixin.ordering\n    // whether top means front or back depends on takeFront\n    _chart.data(function (group) {\n        if (_cap === Infinity) {\n            return _chart._computeOrderedGroups(group.all());\n        } else {\n            var items = group.all(), rest;\n            items = _chart._computeOrderedGroups(items); // sort by baseMixin.ordering\n\n            if (_cap) {\n                if (_takeFront) {\n                    rest = items.slice(_cap);\n                    items = items.slice(0, _cap);\n                } else {\n                    var start = Math.max(0, items.length - _cap);\n                    rest = items.slice(0, start);\n                    items = items.slice(start);\n                }\n            }\n\n            if (_othersGrouper) {\n                return _othersGrouper(items, rest);\n            }\n            return items;\n        }\n    });\n\n    /**\n     * Get or set the count of elements to that will be included in the cap. If there is an\n     * {@link dc.capMixin#othersGrouper othersGrouper}, any further elements will be combined in an\n     * extra element with its name determined by {@link dc.capMixin#othersLabel othersLabel}.\n     *\n     * As of dc.js 2.1 and onward, the capped charts use\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all()}\n     * and {@link dc.baseMixin#ordering baseMixin.ordering()} to determine the order of\n     * elements. Then `cap` and {@link dc.capMixin#takeFront takeFront} determine how many elements\n     * to keep, from which end of the resulting array.\n     *\n     * **Migration note:** Up through dc.js 2.0.*, capping used\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_top group.top(N)},\n     * which selects the largest items according to\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_order group.order()}.\n     * The chart then sorted the items according to {@link dc.baseMixin#ordering baseMixin.ordering()}.\n     * So the two values essentially had to agree, but if the `group.order()` was incorrect (it's\n     * easy to forget about), the wrong rows or slices would be displayed, in the correct order.\n     *\n     * If your chart previously relied on `group.order()`, use `chart.ordering()` instead. As of\n     * 2.1.5, the ordering defaults to sorting from greatest to least like `group.top(N)` did.\n     *\n     * If you want to cap by one ordering but sort by another, please\n     * [file an issue](https://github.com/dc-js/dc.js/issues/new) - it's still possible but we'll\n     * need to work up an example.\n     * @method cap\n     * @memberof dc.capMixin\n     * @instance\n     * @param {Number} [count=Infinity]\n     * @returns {Number|dc.capMixin}\n     */\n    _chart.cap = function (count) {\n        if (!arguments.length) {\n            return _cap;\n        }\n        _cap = count;\n        return _chart;\n    };\n\n    /**\n     * Get or set the direction of capping. If set, the chart takes the first\n     * {@link dc.capMixin#cap cap} elements from the sorted array of elements; otherwise\n     * it takes the last `cap` elements.\n     * @method takeFront\n     * @memberof dc.capMixin\n     * @instance\n     * @param {Boolean} [takeFront=true]\n     * @returns {Boolean|dc.capMixin}\n     */\n    _chart.takeFront = function (takeFront) {\n        if (!arguments.length) {\n            return _takeFront;\n        }\n        _takeFront = takeFront;\n        return _chart;\n    };\n\n    /**\n     * Get or set the label for *Others* slice when slices cap is specified.\n     * @method othersLabel\n     * @memberof dc.capMixin\n     * @instance\n     * @param {String} [label=\"Others\"]\n     * @returns {String|dc.capMixin}\n     */\n    _chart.othersLabel = function (label) {\n        if (!arguments.length) {\n            return _othersLabel;\n        }\n        _othersLabel = label;\n        return _chart;\n    };\n\n    /**\n     * Get or set the grouper function that will perform the insertion of data for the *Others* slice\n     * if the slices cap is specified. If set to a falsy value, no others will be added.\n     *\n     * The grouper function takes an array of included (\"top\") items, and an array of the rest of\n     * the items. By default the grouper function computes the sum of the rest.\n     * @method othersGrouper\n     * @memberof dc.capMixin\n     * @instance\n     * @example\n     * // Do not show others\n     * chart.othersGrouper(null);\n     * // Default others grouper\n     * chart.othersGrouper(function (topItems, restItems) {\n     *     var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n     *         restKeys = restItems.map(_chart.keyAccessor());\n     *     if (restItemsSum > 0) {\n     *         return topItems.concat([{\n     *             others: restKeys,\n     *             key: _chart.othersLabel(),\n     *             value: restItemsSum\n     *         }]);\n     *     }\n     *     return topItems;\n     * });\n     * @param {Function} [grouperFunction]\n     * @returns {Function|dc.capMixin}\n     */\n    _chart.othersGrouper = function (grouperFunction) {\n        if (!arguments.length) {\n            return _othersGrouper;\n        }\n        _othersGrouper = grouperFunction;\n        return _chart;\n    };\n\n    dc.override(_chart, 'onClick', function (d) {\n        if (d.others) {\n            _chart.filter([d.others]);\n        }\n        _chart._onClick(d);\n    });\n\n    return _chart;\n};\n\n/**\n * This Mixin provides reusable functionalities for any chart that needs to visualize data using bubbles.\n * @name bubbleMixin\n * @memberof dc\n * @mixin\n * @mixes dc.colorMixin\n * @param {Object} _chart\n * @returns {dc.bubbleMixin}\n */\ndc.bubbleMixin = function (_chart) {\n    var _maxBubbleRelativeSize = 0.3;\n    var _minRadiusWithLabel = 10;\n    var _sortBubbleSize = false;\n    var _elasticRadius = false;\n\n    _chart.BUBBLE_NODE_CLASS = 'node';\n    _chart.BUBBLE_CLASS = 'bubble';\n    _chart.MIN_RADIUS = 10;\n\n    _chart = dc.colorMixin(_chart);\n\n    _chart.renderLabel(true);\n\n    _chart.data(function (group) {\n        var data = group.all();\n        if (_sortBubbleSize) {\n            // sort descending so smaller bubbles are on top\n            var radiusAccessor = _chart.radiusValueAccessor();\n            data.sort(function (a, b) { return d3.descending(radiusAccessor(a), radiusAccessor(b)); });\n        }\n        return data;\n    });\n\n    var _r = d3.scale.linear().domain([0, 100]);\n\n    var _rValueAccessor = function (d) {\n        return d.r;\n    };\n\n    /**\n     * Get or set the bubble radius scale. By default the bubble chart uses\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md#linear d3.scale.linear().domain([0, 100])}\n     * as its radius scale.\n     * @method r\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [bubbleRadiusScale=d3.scale.linear().domain([0, 100])]\n     * @returns {d3.scale|dc.bubbleMixin}\n     */\n    _chart.r = function (bubbleRadiusScale) {\n        if (!arguments.length) {\n            return _r;\n        }\n        _r = bubbleRadiusScale;\n        return _chart;\n    };\n\n    /**\n     * Turn on or off the elastic bubble radius feature, or return the value of the flag. If this\n     * feature is turned on, then bubble radii will be automatically rescaled to fit the chart better.\n     * @method elasticRadius\n     * @memberof dc.bubbleChart\n     * @instance\n     * @param {Boolean} [elasticRadius=false]\n     * @returns {Boolean|dc.bubbleChart}\n     */\n    _chart.elasticRadius = function (elasticRadius) {\n        if (!arguments.length) {\n            return _elasticRadius;\n        }\n        _elasticRadius = elasticRadius;\n        return _chart;\n    };\n\n    _chart.calculateRadiusDomain = function () {\n        if (_elasticRadius) {\n            _chart.r().domain([_chart.rMin(), _chart.rMax()]);\n        }\n    };\n\n    /**\n     * Get or set the radius value accessor function. If set, the radius value accessor function will\n     * be used to retrieve a data value for each bubble. The data retrieved then will be mapped using\n     * the r scale to the actual bubble radius. This allows you to encode a data dimension using bubble\n     * size.\n     * @method radiusValueAccessor\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Function} [radiusValueAccessor]\n     * @returns {Function|dc.bubbleMixin}\n     */\n    _chart.radiusValueAccessor = function (radiusValueAccessor) {\n        if (!arguments.length) {\n            return _rValueAccessor;\n        }\n        _rValueAccessor = radiusValueAccessor;\n        return _chart;\n    };\n\n    _chart.rMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.radiusValueAccessor()(e);\n        });\n        return min;\n    };\n\n    _chart.rMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.radiusValueAccessor()(e);\n        });\n        return max;\n    };\n\n    _chart.bubbleR = function (d) {\n        var value = _chart.radiusValueAccessor()(d);\n        var r = _chart.r()(value);\n        if (isNaN(r) || value <= 0) {\n            r = 0;\n        }\n        return r;\n    };\n\n    var labelFunction = function (d) {\n        return _chart.label()(d);\n    };\n\n    var shouldLabel = function (d) {\n        return (_chart.bubbleR(d) > _minRadiusWithLabel);\n    };\n\n    var labelOpacity = function (d) {\n        return shouldLabel(d) ? 1 : 0;\n    };\n\n    var labelPointerEvent = function (d) {\n        return shouldLabel(d) ? 'all' : 'none';\n    };\n\n    _chart._doRenderLabel = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n            var label = bubbleGEnter.select('text');\n\n            if (label.empty()) {\n                label = bubbleGEnter.append('text')\n                    .attr('text-anchor', 'middle')\n                    .attr('dy', '.3em')\n                    .on('click', _chart.onClick);\n            }\n\n            label\n                .attr('opacity', 0)\n                .attr('pointer-events', labelPointerEvent)\n                .text(labelFunction);\n            dc.transition(label, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', labelOpacity);\n        }\n    };\n\n    _chart.doUpdateLabels = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n            var labels = bubbleGEnter.select('text')\n                .attr('pointer-events', labelPointerEvent)\n                .text(labelFunction);\n            dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', labelOpacity);\n        }\n    };\n\n    var titleFunction = function (d) {\n        return _chart.title()(d);\n    };\n\n    _chart._doRenderTitles = function (g) {\n        if (_chart.renderTitle()) {\n            var title = g.select('title');\n\n            if (title.empty()) {\n                g.append('title').text(titleFunction);\n            }\n        }\n    };\n\n    _chart.doUpdateTitles = function (g) {\n        if (_chart.renderTitle()) {\n            g.select('title').text(titleFunction);\n        }\n    };\n\n    /**\n     * Turn on or off the bubble sorting feature, or return the value of the flag. If enabled,\n     * bubbles will be sorted by their radius, with smaller bubbles in front.\n     * @method sortBubbleSize\n     * @memberof dc.bubbleChart\n     * @instance\n     * @param {Boolean} [sortBubbleSize=false]\n     * @returns {Boolean|dc.bubbleChart}\n     */\n    _chart.sortBubbleSize = function (sortBubbleSize) {\n        if (!arguments.length) {\n            return _sortBubbleSize;\n        }\n        _sortBubbleSize = sortBubbleSize;\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimum radius. This will be used to initialize the radius scale's range.\n     * @method minRadius\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [radius=10]\n     * @returns {Number|dc.bubbleMixin}\n     */\n    _chart.minRadius = function (radius) {\n        if (!arguments.length) {\n            return _chart.MIN_RADIUS;\n        }\n        _chart.MIN_RADIUS = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimum radius for label rendering. If a bubble's radius is less than this value\n     * then no label will be rendered.\n     * @method minRadiusWithLabel\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [radius=10]\n     * @returns {Number|dc.bubbleMixin}\n     */\n\n    _chart.minRadiusWithLabel = function (radius) {\n        if (!arguments.length) {\n            return _minRadiusWithLabel;\n        }\n        _minRadiusWithLabel = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the maximum relative size of a bubble to the length of x axis. This value is useful\n     * when the difference in radius between bubbles is too great.\n     * @method maxBubbleRelativeSize\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [relativeSize=0.3]\n     * @returns {Number|dc.bubbleMixin}\n     */\n    _chart.maxBubbleRelativeSize = function (relativeSize) {\n        if (!arguments.length) {\n            return _maxBubbleRelativeSize;\n        }\n        _maxBubbleRelativeSize = relativeSize;\n        return _chart;\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function (d) {\n                if (_chart.isSelectedNode(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n    };\n\n    _chart.onClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    return _chart;\n};\n\n/**\n * The pie chart implementation is usually used to visualize a small categorical distribution.  The pie\n * chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each\n * slice relative to the sum of all values. Slices are ordered by {@link dc.baseMixin#ordering ordering}\n * which defaults to sorting by key.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class pieChart\n * @memberof dc\n * @mixes dc.capMixin\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a pie chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.pieChart('#chart-container1');\n * // create a pie chart under #chart-container2 element using chart group A\n * var chart2 = dc.pieChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.pieChart}\n */\ndc.pieChart = function (parent, chartGroup) {\n    var DEFAULT_MIN_ANGLE_FOR_LABEL = 0.5;\n\n    var _sliceCssClass = 'pie-slice';\n    var _labelCssClass = 'pie-label';\n    var _sliceGroupCssClass = 'pie-slice-group';\n    var _labelGroupCssClass = 'pie-label-group';\n    var _emptyCssClass = 'empty-chart';\n    var _emptyTitle = 'empty';\n\n    var _radius,\n        _givenRadius, // specified radius, if any\n        _innerRadius = 0,\n        _externalRadiusPadding = 0;\n\n    var _g;\n    var _cx;\n    var _cy;\n    var _minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL;\n    var _externalLabelRadius;\n    var _drawPaths = false;\n    var _chart = dc.capMixin(dc.colorMixin(dc.baseMixin({})));\n\n    _chart.colorAccessor(_chart.cappedKeyAccessor);\n\n    _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n    });\n\n    /**\n     * Get or set the maximum number of slices the pie chart will generate. The top slices are determined by\n     * value from high to low. Other slices exeeding the cap will be rolled up into one single *Others* slice.\n     * @method slicesCap\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cap]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.slicesCap = _chart.cap;\n\n    _chart.label(_chart.cappedKeyAccessor);\n    _chart.renderLabel(true);\n\n    _chart.transitionDuration(350);\n    _chart.transitionDelay(0);\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg()\n            .append('g')\n            .attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n\n        _g.append('g').attr('class', _sliceGroupCssClass);\n        _g.append('g').attr('class', _labelGroupCssClass);\n\n        drawChart();\n\n        return _chart;\n    };\n\n    function drawChart () {\n        // set radius from chart size if none given, or if given radius is too large\n        var maxRadius =  d3.min([_chart.width(), _chart.height()]) / 2;\n        _radius = _givenRadius && _givenRadius < maxRadius ? _givenRadius : maxRadius;\n\n        var arc = buildArcs();\n\n        var pie = pieLayout();\n        var pieData;\n        // if we have data...\n        if (d3.sum(_chart.data(), _chart.valueAccessor())) {\n            pieData = pie(_chart.data());\n            _g.classed(_emptyCssClass, false);\n        } else {\n            // otherwise we'd be getting NaNs, so override\n            // note: abuse others for its ignoring the value accessor\n            pieData = pie([{key: _emptyTitle, value: 1, others: [_emptyTitle]}]);\n            _g.classed(_emptyCssClass, true);\n        }\n\n        if (_g) {\n            var slices = _g.select('g.' + _sliceGroupCssClass)\n                .selectAll('g.' + _sliceCssClass)\n                .data(pieData);\n\n            var labels = _g.select('g.' + _labelGroupCssClass)\n                .selectAll('text.' + _labelCssClass)\n                .data(pieData);\n\n            createElements(slices, labels, arc, pieData);\n\n            updateElements(pieData, arc);\n\n            removeElements(slices, labels);\n\n            highlightFilter();\n\n            dc.transition(_g, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n        }\n    }\n\n    function createElements (slices, labels, arc, pieData) {\n        var slicesEnter = createSliceNodes(slices);\n\n        createSlicePath(slicesEnter, arc);\n\n        createTitles(slicesEnter);\n\n        createLabels(labels, pieData, arc);\n    }\n\n    function createSliceNodes (slices) {\n        var slicesEnter = slices\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return _sliceCssClass + ' _' + i;\n            });\n        return slicesEnter;\n    }\n\n    function createSlicePath (slicesEnter, arc) {\n        var slicePath = slicesEnter.append('path')\n            .attr('fill', fill)\n            .on('click', onClick)\n            .attr('d', function (d, i) {\n                return safeArc(d, i, arc);\n            });\n\n        var transition = dc.transition(slicePath, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenPie);\n        }\n    }\n\n    function createTitles (slicesEnter) {\n        if (_chart.renderTitle()) {\n            slicesEnter.append('title').text(function (d) {\n                return _chart.title()(d.data);\n            });\n        }\n    }\n\n    _chart._applyLabelText = function (labels) {\n        labels\n            .text(function (d) {\n                var data = d.data;\n                if ((sliceHasNoData(data) || sliceTooSmall(d)) && !isSelectedSlice(d)) {\n                    return '';\n                }\n                return _chart.label()(d.data);\n            });\n    };\n\n    function positionLabels (labels, arc) {\n        _chart._applyLabelText(labels);\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', function (d) {\n                return labelPosition(d, arc);\n            })\n            .attr('text-anchor', 'middle');\n    }\n\n    function highlightSlice (i, whether) {\n        _chart.select('g.pie-slice._' + i)\n            .classed('highlight', whether);\n    }\n\n    function createLabels (labels, pieData, arc) {\n        if (_chart.renderLabel()) {\n            var labelsEnter = labels\n                .enter()\n                .append('text')\n                .attr('class', function (d, i) {\n                    var classes = _sliceCssClass + ' ' + _labelCssClass + ' _' + i;\n                    if (_externalLabelRadius) {\n                        classes += ' external';\n                    }\n                    return classes;\n                })\n                .on('click', onClick)\n                .on('mouseover', function (d, i) {\n                    highlightSlice(i, true);\n                })\n                .on('mouseout', function (d, i) {\n                    highlightSlice(i, false);\n                });\n            positionLabels(labelsEnter, arc);\n            if (_externalLabelRadius && _drawPaths) {\n                updateLabelPaths(pieData, arc);\n            }\n        }\n    }\n\n    function updateLabelPaths (pieData, arc) {\n        var polyline = _g.selectAll('polyline.' + _sliceCssClass)\n                .data(pieData);\n\n        polyline\n                .enter()\n                .append('polyline')\n                .attr('class', function (d, i) {\n                    return 'pie-path _' + i + ' ' + _sliceCssClass;\n                })\n                .on('click', onClick)\n                .on('mouseover', function (d, i) {\n                    highlightSlice(i, true);\n                })\n                .on('mouseout', function (d, i) {\n                    highlightSlice(i, false);\n                });\n\n        polyline.exit().remove();\n        var arc2 = d3.svg.arc()\n                .outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .innerRadius(_radius - _externalRadiusPadding);\n        var transition = dc.transition(polyline, _chart.transitionDuration(), _chart.transitionDelay());\n        // this is one rare case where d3.selection differs from d3.transition\n        if (transition.attrTween) {\n            transition\n                .attrTween('points', function (d) {\n                    var current = this._current || d;\n                    current = {startAngle: current.startAngle, endAngle: current.endAngle};\n                    var interpolate = d3.interpolate(current, d);\n                    this._current = interpolate(0);\n                    return function (t) {\n                        var d2 = interpolate(t);\n                        return [arc.centroid(d2), arc2.centroid(d2)];\n                    };\n                });\n        } else {\n            transition.attr('points', function (d) {\n                return [arc.centroid(d), arc2.centroid(d)];\n            });\n        }\n        transition.style('visibility', function (d) {\n            return d.endAngle - d.startAngle < 0.0001 ? 'hidden' : 'visible';\n        });\n\n    }\n\n    function updateElements (pieData, arc) {\n        updateSlicePaths(pieData, arc);\n        updateLabels(pieData, arc);\n        updateTitles(pieData);\n    }\n\n    function updateSlicePaths (pieData, arc) {\n        var slicePaths = _g.selectAll('g.' + _sliceCssClass)\n            .data(pieData)\n            .select('path')\n            .attr('d', function (d, i) {\n                return safeArc(d, i, arc);\n            });\n        var transition = dc.transition(slicePaths, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenPie);\n        }\n        transition.attr('fill', fill);\n    }\n\n    function updateLabels (pieData, arc) {\n        if (_chart.renderLabel()) {\n            var labels = _g.selectAll('text.' + _labelCssClass)\n                .data(pieData);\n            positionLabels(labels, arc);\n            if (_externalLabelRadius && _drawPaths) {\n                updateLabelPaths(pieData, arc);\n            }\n        }\n    }\n\n    function updateTitles (pieData) {\n        if (_chart.renderTitle()) {\n            _g.selectAll('g.' + _sliceCssClass)\n                .data(pieData)\n                .select('title')\n                .text(function (d) {\n                    return _chart.title()(d.data);\n                });\n        }\n    }\n\n    function removeElements (slices, labels) {\n        slices.exit().remove();\n        labels.exit().remove();\n    }\n\n    function highlightFilter () {\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.' + _sliceCssClass).each(function (d) {\n                if (isSelectedSlice(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.' + _sliceCssClass).each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    }\n\n    /**\n     * Get or set the external radius padding of the pie chart. This will force the radius of the\n     * pie chart to become smaller or larger depending on the value.\n     * @method externalRadiusPadding\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [externalRadiusPadding=0]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.externalRadiusPadding = function (externalRadiusPadding) {\n        if (!arguments.length) {\n            return _externalRadiusPadding;\n        }\n        _externalRadiusPadding = externalRadiusPadding;\n        return _chart;\n    };\n\n    /**\n     * Get or set the inner radius of the pie chart. If the inner radius is greater than 0px then the\n     * pie chart will be rendered as a doughnut chart.\n     * @method innerRadius\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [innerRadius=0]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.innerRadius = function (innerRadius) {\n        if (!arguments.length) {\n            return _innerRadius;\n        }\n        _innerRadius = innerRadius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the outer radius. If the radius is not set, it will be half of the minimum of the\n     * chart width and height.\n     * @method radius\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [radius]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.radius = function (radius) {\n        if (!arguments.length) {\n            return _givenRadius;\n        }\n        _givenRadius = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set center x coordinate position. Default is center of svg.\n     * @method cx\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cx]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.cx = function (cx) {\n        if (!arguments.length) {\n            return (_cx ||  _chart.width() / 2);\n        }\n        _cx = cx;\n        return _chart;\n    };\n\n    /**\n     * Get or set center y coordinate position. Default is center of svg.\n     * @method cy\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cy]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.cy = function (cy) {\n        if (!arguments.length) {\n            return (_cy ||  _chart.height() / 2);\n        }\n        _cy = cy;\n        return _chart;\n    };\n\n    function buildArcs () {\n        return d3.svg.arc()\n            .outerRadius(_radius - _externalRadiusPadding)\n            .innerRadius(_innerRadius);\n    }\n\n    function isSelectedSlice (d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d.data));\n    }\n\n    _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not\n     * display a slice label.\n     * @method minAngleForLabel\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [minAngleForLabel=0.5]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.minAngleForLabel = function (minAngleForLabel) {\n        if (!arguments.length) {\n            return _minAngleForLabel;\n        }\n        _minAngleForLabel = minAngleForLabel;\n        return _chart;\n    };\n\n    function pieLayout () {\n        return d3.layout.pie().sort(null).value(_chart.cappedValueAccessor);\n    }\n\n    function sliceTooSmall (d) {\n        var angle = (d.endAngle - d.startAngle);\n        return isNaN(angle) || angle < _minAngleForLabel;\n    }\n\n    function sliceHasNoData (d) {\n        return _chart.cappedValueAccessor(d) === 0;\n    }\n\n    function tweenPie (b) {\n        b.innerRadius = _innerRadius;\n        var current = this._current;\n        if (isOffCanvas(current)) {\n            current = {startAngle: 0, endAngle: 0};\n        } else {\n            // only interpolate startAngle & endAngle, not the whole data object\n            current = {startAngle: current.startAngle, endAngle: current.endAngle};\n        }\n        var i = d3.interpolate(current, b);\n        this._current = i(0);\n        return function (t) {\n            return safeArc(i(t), 0, buildArcs());\n        };\n    }\n\n    function isOffCanvas (current) {\n        return !current || isNaN(current.startAngle) || isNaN(current.endAngle);\n    }\n\n    function fill (d, i) {\n        return _chart.getColor(d.data, i);\n    }\n\n    function onClick (d, i) {\n        if (_g.attr('class') !== _emptyCssClass) {\n            _chart.onClick(d.data, i);\n        }\n    }\n\n    function safeArc (d, i, arc) {\n        var path = arc(d, i);\n        if (path.indexOf('NaN') >= 0) {\n            path = 'M0,0';\n        }\n        return path;\n    }\n\n    /**\n     * Title to use for the only slice when there is no data.\n     * @method emptyTitle\n     * @memberof dc.pieChart\n     * @instance\n     * @param {String} [title]\n     * @returns {String|dc.pieChart}\n     */\n    _chart.emptyTitle = function (title) {\n        if (arguments.length === 0) {\n            return _emptyTitle;\n        }\n        _emptyTitle = title;\n        return _chart;\n    };\n\n    /**\n     * Position slice labels offset from the outer edge of the chart.\n     *\n     * The argument specifies the extra radius to be added for slice labels.\n     * @method externalLabels\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [externalLabelRadius]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.externalLabels = function (externalLabelRadius) {\n        if (arguments.length === 0) {\n            return _externalLabelRadius;\n        } else if (externalLabelRadius) {\n            _externalLabelRadius = externalLabelRadius;\n        } else {\n            _externalLabelRadius = undefined;\n        }\n\n        return _chart;\n    };\n\n    /**\n     * Get or set whether to draw lines from pie slices to their labels.\n     *\n     * @method drawPaths\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Boolean} [drawPaths]\n     * @returns {Boolean|dc.pieChart}\n     */\n    _chart.drawPaths = function (drawPaths) {\n        if (arguments.length === 0) {\n            return _drawPaths;\n        }\n        _drawPaths = drawPaths;\n        return _chart;\n    };\n\n    function labelPosition (d, arc) {\n        var centroid;\n        if (_externalLabelRadius) {\n            centroid = d3.svg.arc()\n                .outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .innerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .centroid(d);\n        } else {\n            centroid = arc.centroid(d);\n        }\n        if (isNaN(centroid[0]) || isNaN(centroid[1])) {\n            return 'translate(0,0)';\n        } else {\n            return 'translate(' + centroid + ')';\n        }\n    }\n\n    _chart.legendables = function () {\n        return _chart.data().map(function (d, i) {\n            var legendable = {name: d.key, data: d.value, others: d.others, chart: _chart};\n            legendable.color = _chart.getColor(d, i);\n            return legendable;\n        });\n    };\n\n    _chart.legendHighlight = function (d) {\n        highlightSliceFromLegendable(d, true);\n    };\n\n    _chart.legendReset = function (d) {\n        highlightSliceFromLegendable(d, false);\n    };\n\n    _chart.legendToggle = function (d) {\n        _chart.onClick({key: d.name, others: d.others});\n    };\n\n    function highlightSliceFromLegendable (legendable, highlighted) {\n        _chart.selectAll('g.pie-slice').each(function (d) {\n            if (legendable.name === d.data.key) {\n                d3.select(this).classed('highlight', highlighted);\n            }\n        });\n    }\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Concrete bar chart/histogram implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class barChart\n * @memberof dc\n * @mixes dc.stackMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a bar chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.barChart('#chart-container1');\n * // create a bar chart under #chart-container2 element using chart group A\n * var chart2 = dc.barChart('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.barChart(compositeChart);\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n * specifying a dom block element such as a div; or a dom element or d3 selection.  If the bar\n * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n * composite chart instance instead.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.barChart}\n */\ndc.barChart = function (parent, chartGroup) {\n    var MIN_BAR_WIDTH = 1;\n    var DEFAULT_GAP_BETWEEN_BARS = 2;\n    var LABEL_PADDING = 3;\n\n    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n\n    var _gap = DEFAULT_GAP_BETWEEN_BARS;\n    var _centerBar = false;\n    var _alwaysUseRounding = false;\n\n    var _barWidth;\n\n    dc.override(_chart, 'rescale', function () {\n        _chart._rescale();\n        _barWidth = undefined;\n        return _chart;\n    });\n\n    dc.override(_chart, 'render', function () {\n        if (_chart.round() && _centerBar && !_alwaysUseRounding) {\n            dc.logger.warn('By default, brush rounding is disabled if bars are centered. ' +\n                         'See dc.js bar chart API documentation for details.');\n        }\n\n        return _chart._render();\n    });\n\n    _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n    }, false);\n\n    _chart.plotData = function () {\n        var layers = _chart.chartBodyG().selectAll('g.stack')\n            .data(_chart.data());\n\n        calculateBarWidth();\n\n        layers\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return 'stack ' + '_' + i;\n            });\n\n        var last = layers.size() - 1;\n        layers.each(function (d, i) {\n            var layer = d3.select(this);\n\n            renderBars(layer, i, d);\n\n            if (_chart.renderLabel() && last === i) {\n                renderLabels(layer, i, d);\n            }\n        });\n    };\n\n    function barHeight (d) {\n        return dc.utils.safeNumber(Math.abs(_chart.y()(d.y + d.y0) - _chart.y()(d.y0)));\n    }\n\n    function renderLabels (layer, layerIndex, d) {\n        var labels = layer.selectAll('text.barLabel')\n            .data(d.values, dc.pluck('x'));\n\n        labels.enter()\n            .append('text')\n            .attr('class', 'barLabel')\n            .attr('text-anchor', 'middle');\n\n        if (_chart.isOrdinal()) {\n            labels.on('click', _chart.onClick);\n            labels.attr('cursor', 'pointer');\n        }\n\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) {\n                var x = _chart.x()(d.x);\n                if (!_centerBar) {\n                    x += _barWidth / 2;\n                }\n                return dc.utils.safeNumber(x);\n            })\n            .attr('y', function (d) {\n                var y = _chart.y()(d.y + d.y0);\n\n                if (d.y < 0) {\n                    y -= barHeight(d);\n                }\n\n                return dc.utils.safeNumber(y - LABEL_PADDING);\n            })\n            .text(function (d) {\n                return _chart.label()(d);\n            });\n\n        dc.transition(labels.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('height', 0)\n            .remove();\n    }\n\n    function renderBars (layer, layerIndex, d) {\n        var bars = layer.selectAll('rect.bar')\n            .data(d.values, dc.pluck('x'));\n\n        var enter = bars.enter()\n            .append('rect')\n            .attr('class', 'bar')\n            .attr('fill', dc.pluck('data', _chart.getColor))\n            .attr('y', _chart.yAxisHeight())\n            .attr('height', 0);\n\n        if (_chart.renderTitle()) {\n            enter.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n\n        if (_chart.isOrdinal()) {\n            bars.on('click', _chart.onClick);\n        }\n\n        dc.transition(bars, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) {\n                var x = _chart.x()(d.x);\n                if (_centerBar) {\n                    x -= _barWidth / 2;\n                }\n                if (_chart.isOrdinal() && _gap !== undefined) {\n                    x += _gap / 2;\n                }\n                return dc.utils.safeNumber(x);\n            })\n            .attr('y', function (d) {\n                var y = _chart.y()(d.y + d.y0);\n\n                if (d.y < 0) {\n                    y -= barHeight(d);\n                }\n\n                return dc.utils.safeNumber(y);\n            })\n            .attr('width', _barWidth)\n            .attr('height', function (d) {\n                return barHeight(d);\n            })\n            .attr('fill', dc.pluck('data', _chart.getColor))\n            .select('title').text(dc.pluck('data', _chart.title(d.name)));\n\n        dc.transition(bars.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) { return _chart.x()(d.x); })\n            .attr('width', _barWidth * 0.9)\n            .remove();\n    }\n\n    function calculateBarWidth () {\n        if (_barWidth === undefined) {\n            var numberOfBars = _chart.xUnitCount();\n\n            // please can't we always use rangeBands for bar charts?\n            if (_chart.isOrdinal() && _gap === undefined) {\n                _barWidth = Math.floor(_chart.x().rangeBand());\n            } else if (_gap) {\n                _barWidth = Math.floor((_chart.xAxisLength() - (numberOfBars - 1) * _gap) / numberOfBars);\n            } else {\n                _barWidth = Math.floor(_chart.xAxisLength() / (1 + _chart.barPadding()) / numberOfBars);\n            }\n\n            if (_barWidth === Infinity || isNaN(_barWidth) || _barWidth < MIN_BAR_WIDTH) {\n                _barWidth = MIN_BAR_WIDTH;\n            }\n        }\n    }\n\n    _chart.fadeDeselectedArea = function () {\n        var bars = _chart.chartBodyG().selectAll('rect.bar');\n        var extent = _chart.brush().extent();\n\n        if (_chart.isOrdinal()) {\n            if (_chart.hasFilter()) {\n                bars.classed(dc.constants.SELECTED_CLASS, function (d) {\n                    return _chart.hasFilter(d.x);\n                });\n                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n                    return !_chart.hasFilter(d.x);\n                });\n            } else {\n                bars.classed(dc.constants.SELECTED_CLASS, false);\n                bars.classed(dc.constants.DESELECTED_CLASS, false);\n            }\n        } else {\n            if (!_chart.brushIsEmpty(extent)) {\n                var start = extent[0];\n                var end = extent[1];\n\n                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n                    return d.x < start || d.x >= end;\n                });\n            } else {\n                bars.classed(dc.constants.DESELECTED_CLASS, false);\n            }\n        }\n    };\n\n    /**\n     * Whether the bar chart will render each bar centered around the data position on the x-axis.\n     * @method centerBar\n     * @memberof dc.barChart\n     * @instance\n     * @param {Boolean} [centerBar=false]\n     * @returns {Boolean|dc.barChart}\n     */\n    _chart.centerBar = function (centerBar) {\n        if (!arguments.length) {\n            return _centerBar;\n        }\n        _centerBar = centerBar;\n        return _chart;\n    };\n\n    dc.override(_chart, 'onClick', function (d) {\n        _chart._onClick(d.data);\n    });\n\n    /**\n     * Get or set the spacing between bars as a fraction of bar size. Valid values are between 0-1.\n     * Setting this value will also remove any previously set {@link dc.barChart#gap gap}. See the\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n     * for a visual description of how the padding is applied.\n     * @method barPadding\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [barPadding=0]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.barPadding = function (barPadding) {\n        if (!arguments.length) {\n            return _chart._rangeBandPadding();\n        }\n        _chart._rangeBandPadding(barPadding);\n        _gap = undefined;\n        return _chart;\n    };\n\n    _chart._useOuterPadding = function () {\n        return _gap === undefined;\n    };\n\n    /**\n     * Get or set the outer padding on an ordinal bar chart. This setting has no effect on non-ordinal charts.\n     * Will pad the width by `padding * barWidth` on each side of the chart.\n     * @method outerPadding\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [padding=0.5]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.outerPadding = _chart._outerRangeBandPadding;\n\n    /**\n     * Manually set fixed gap (in px) between bars instead of relying on the default auto-generated\n     * gap.  By default the bar chart implementation will calculate and set the gap automatically\n     * based on the number of data points and the length of the x axis.\n     * @method gap\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [gap=2]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _chart;\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n        if (_chart.round() && (!_centerBar || _alwaysUseRounding)) {\n            extent[0] = extent.map(_chart.round())[0];\n            extent[1] = extent.map(_chart.round())[1];\n\n            _chart.chartBodyG().select('.brush')\n                .call(_chart.brush().extent(extent));\n        }\n\n        return extent;\n    };\n\n    /**\n     * Set or get whether rounding is enabled when bars are centered. If false, using\n     * rounding with centered bars will result in a warning and rounding will be ignored.  This flag\n     * has no effect if bars are not {@link dc.barChart#centerBar centered}.\n     * When using standard d3.js rounding methods, the brush often doesn't align correctly with\n     * centered bars since the bars are offset.  The rounding function must add an offset to\n     * compensate, such as in the following example.\n     * @method alwaysUseRounding\n     * @memberof dc.barChart\n     * @instance\n     * @example\n     * chart.round(function(n) { return Math.floor(n) + 0.5; });\n     * @param {Boolean} [alwaysUseRounding=false]\n     * @returns {Boolean|dc.barChart}\n     */\n    _chart.alwaysUseRounding = function (alwaysUseRounding) {\n        if (!arguments.length) {\n            return _alwaysUseRounding;\n        }\n        _alwaysUseRounding = alwaysUseRounding;\n        return _chart;\n    };\n\n    function colorFilter (color, inv) {\n        return function () {\n            var item = d3.select(this);\n            var match = item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n    }\n\n    _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n            _chart.g().selectAll('rect.bar')\n                .classed('highlight', colorFilter(d.color))\n                .classed('fadeout', colorFilter(d.color, true));\n        }\n    };\n\n    _chart.legendReset = function () {\n        _chart.g().selectAll('rect.bar')\n            .classed('highlight', false)\n            .classed('fadeout', false);\n    };\n\n    dc.override(_chart, 'xAxisMax', function () {\n        var max = this._xAxisMax();\n        if ('resolution' in _chart.xUnits()) {\n            var res = _chart.xUnits().resolution;\n            max += res;\n        }\n        return max;\n    });\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Concrete line/area chart implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class lineChart\n * @memberof dc\n * @mixes dc.stackMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a line chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.lineChart('#chart-container1');\n * // create a line chart under #chart-container2 element using chart group A\n * var chart2 = dc.lineChart('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.lineChart(compositeChart);\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n * specifying a dom block element such as a div; or a dom element or d3 selection.  If the line\n * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n * composite chart instance instead.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.lineChart}\n */\ndc.lineChart = function (parent, chartGroup) {\n    var DEFAULT_DOT_RADIUS = 5;\n    var TOOLTIP_G_CLASS = 'dc-tooltip';\n    var DOT_CIRCLE_CLASS = 'dot';\n    var Y_AXIS_REF_LINE_CLASS = 'yRef';\n    var X_AXIS_REF_LINE_CLASS = 'xRef';\n    var DEFAULT_DOT_OPACITY = 1e-6;\n    var LABEL_PADDING = 3;\n\n    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n    var _renderArea = false;\n    var _dotRadius = DEFAULT_DOT_RADIUS;\n    var _dataPointRadius = null;\n    var _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n    var _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n    var _interpolate = 'linear';\n    var _tension = 0.7;\n    var _defined;\n    var _dashStyle;\n    var _xyTipsOn = true;\n\n    _chart.transitionDuration(500);\n    _chart.transitionDelay(0);\n    _chart._rangeBandPadding(1);\n\n    _chart.plotData = function () {\n        var chartBody = _chart.chartBodyG();\n        var layersList = chartBody.select('g.stack-list');\n\n        if (layersList.empty()) {\n            layersList = chartBody.append('g').attr('class', 'stack-list');\n        }\n\n        var layers = layersList.selectAll('g.stack').data(_chart.data());\n\n        var layersEnter = layers\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return 'stack ' + '_' + i;\n            });\n\n        drawLine(layersEnter, layers);\n\n        drawArea(layersEnter, layers);\n\n        drawDots(chartBody, layers);\n\n        if (_chart.renderLabel()) {\n            drawLabels(layers);\n        }\n    };\n\n    /**\n     * Gets or sets the interpolator to use for lines drawn, by string name, allowing e.g. step\n     * functions, splines, and cubic interpolation.  This is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate} and\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate},\n     * where you can find a complete list of valid arguments.\n     * @method interpolate\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n     * @param  {String} [interpolate='linear']\n     * @returns {String|dc.lineChart}\n     */\n    _chart.interpolate = function (interpolate) {\n        if (!arguments.length) {\n            return _interpolate;\n        }\n        _interpolate = interpolate;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the tension to use for lines drawn, in the range 0 to 1.\n     * This parameter further customizes the interpolation behavior.  It is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_tension d3.svg.line.tension} and\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_tension d3.svg.area.tension}.\n     * @method tension\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n     * @param  {Number} [tension=0.7]\n     * @returns {Number|dc.lineChart}\n     */\n    _chart.tension = function (tension) {\n        if (!arguments.length) {\n            return _tension;\n        }\n        _tension = tension;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets a function that will determine discontinuities in the line which should be\n     * skipped: the path will be broken into separate subpaths if some points are undefined.\n     * This function is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n     *\n     * Note: crossfilter will sometimes coerce nulls to 0, so you may need to carefully write\n     * custom reduce functions to get this to work, depending on your data. See\n     * {@link https://github.com/dc-js/dc.js/issues/615#issuecomment-49089248 this GitHub comment}\n     * for more details and an example.\n     * @method defined\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n     * @param  {Function} [defined]\n     * @returns {Function|dc.lineChart}\n     */\n    _chart.defined = function (defined) {\n        if (!arguments.length) {\n            return _defined;\n        }\n        _defined = defined;\n        return _chart;\n    };\n\n    /**\n     * Set the line's d3 dashstyle. This value becomes the 'stroke-dasharray' of line. Defaults to empty\n     * array (solid line).\n     * @method dashStyle\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray stroke-dasharray}\n     * @example\n     * // create a Dash Dot Dot Dot\n     * chart.dashStyle([3,1,1,1]);\n     * @param  {Array<Number>} [dashStyle=[]]\n     * @returns {Array<Number>|dc.lineChart}\n     */\n    _chart.dashStyle = function (dashStyle) {\n        if (!arguments.length) {\n            return _dashStyle;\n        }\n        _dashStyle = dashStyle;\n        return _chart;\n    };\n\n    /**\n     * Get or set render area flag. If the flag is set to true then the chart will render the area\n     * beneath each line and the line chart effectively becomes an area chart.\n     * @method renderArea\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Boolean} [renderArea=false]\n     * @returns {Boolean|dc.lineChart}\n     */\n    _chart.renderArea = function (renderArea) {\n        if (!arguments.length) {\n            return _renderArea;\n        }\n        _renderArea = renderArea;\n        return _chart;\n    };\n\n    function colors (d, i) {\n        return _chart.getColor.call(d, d.values, i);\n    }\n\n    function drawLine (layersEnter, layers) {\n        var line = d3.svg.line()\n            .x(function (d) {\n                return _chart.x()(d.x);\n            })\n            .y(function (d) {\n                return _chart.y()(d.y + d.y0);\n            })\n            .interpolate(_interpolate)\n            .tension(_tension);\n        if (_defined) {\n            line.defined(_defined);\n        }\n\n        var path = layersEnter.append('path')\n            .attr('class', 'line')\n            .attr('stroke', colors);\n        if (_dashStyle) {\n            path.attr('stroke-dasharray', _dashStyle);\n        }\n\n        dc.transition(layers.select('path.line'), _chart.transitionDuration(), _chart.transitionDelay())\n            //.ease('linear')\n            .attr('stroke', colors)\n            .attr('d', function (d) {\n                return safeD(line(d.values));\n            });\n    }\n\n    function drawArea (layersEnter, layers) {\n        if (_renderArea) {\n            var area = d3.svg.area()\n                .x(function (d) {\n                    return _chart.x()(d.x);\n                })\n                .y(function (d) {\n                    return _chart.y()(d.y + d.y0);\n                })\n                .y0(function (d) {\n                    return _chart.y()(d.y0);\n                })\n                .interpolate(_interpolate)\n                .tension(_tension);\n            if (_defined) {\n                area.defined(_defined);\n            }\n\n            layersEnter.append('path')\n                .attr('class', 'area')\n                .attr('fill', colors)\n                .attr('d', function (d) {\n                    return safeD(area(d.values));\n                });\n\n            dc.transition(layers.select('path.area'), _chart.transitionDuration(), _chart.transitionDelay())\n                //.ease('linear')\n                .attr('fill', colors)\n                .attr('d', function (d) {\n                    return safeD(area(d.values));\n                });\n        }\n    }\n\n    function safeD (d) {\n        return (!d || d.indexOf('NaN') >= 0) ? 'M0,0' : d;\n    }\n\n    function drawDots (chartBody, layers) {\n        if (_chart.xyTipsOn() === 'always' || (!_chart.brushOn() && _chart.xyTipsOn())) {\n            var tooltipListClass = TOOLTIP_G_CLASS + '-list';\n            var tooltips = chartBody.select('g.' + tooltipListClass);\n\n            if (tooltips.empty()) {\n                tooltips = chartBody.append('g').attr('class', tooltipListClass);\n            }\n\n            layers.each(function (d, layerIndex) {\n                var points = d.values;\n                if (_defined) {\n                    points = points.filter(_defined);\n                }\n\n                var g = tooltips.select('g.' + TOOLTIP_G_CLASS + '._' + layerIndex);\n                if (g.empty()) {\n                    g = tooltips.append('g').attr('class', TOOLTIP_G_CLASS + ' _' + layerIndex);\n                }\n\n                createRefLines(g);\n\n                var dots = g.selectAll('circle.' + DOT_CIRCLE_CLASS)\n                    .data(points, dc.pluck('x'));\n\n                dots.enter()\n                    .append('circle')\n                    .attr('class', DOT_CIRCLE_CLASS)\n                    .attr('r', getDotRadius())\n                    .style('fill-opacity', _dataPointFillOpacity)\n                    .style('stroke-opacity', _dataPointStrokeOpacity)\n                    .attr('fill', _chart.getColor)\n                    .on('mousemove', function () {\n                        var dot = d3.select(this);\n                        showDot(dot);\n                        showRefLines(dot, g);\n                    })\n                    .on('mouseout', function () {\n                        var dot = d3.select(this);\n                        hideDot(dot);\n                        hideRefLines(g);\n                    });\n\n                dots.call(renderTitle, d);\n\n                dc.transition(dots, _chart.transitionDuration())\n                    .attr('cx', function (d) {\n                        return dc.utils.safeNumber(_chart.x()(d.x));\n                    })\n                    .attr('cy', function (d) {\n                        return dc.utils.safeNumber(_chart.y()(d.y + d.y0));\n                    })\n                    .attr('fill', _chart.getColor);\n\n                dots.exit().remove();\n            });\n        }\n    }\n\n    _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n    }, false);\n\n    function drawLabels (layers) {\n        layers.each(function (d, layerIndex) {\n            var layer = d3.select(this);\n            var labels = layer.selectAll('text.lineLabel')\n                .data(d.values, dc.pluck('x'));\n\n            labels.enter()\n                .append('text')\n                .attr('class', 'lineLabel')\n                .attr('text-anchor', 'middle');\n\n            dc.transition(labels, _chart.transitionDuration())\n                .attr('x', function (d) {\n                    return dc.utils.safeNumber(_chart.x()(d.x));\n                })\n                .attr('y', function (d) {\n                    var y = _chart.y()(d.y + d.y0) - LABEL_PADDING;\n                    return dc.utils.safeNumber(y);\n                })\n                .text(function (d) {\n                    return _chart.label()(d);\n                });\n\n            dc.transition(labels.exit(), _chart.transitionDuration())\n                .attr('height', 0)\n                .remove();\n        });\n    }\n\n    function createRefLines (g) {\n        var yRefLine = g.select('path.' + Y_AXIS_REF_LINE_CLASS).empty() ?\n            g.append('path').attr('class', Y_AXIS_REF_LINE_CLASS) : g.select('path.' + Y_AXIS_REF_LINE_CLASS);\n        yRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n\n        var xRefLine = g.select('path.' + X_AXIS_REF_LINE_CLASS).empty() ?\n            g.append('path').attr('class', X_AXIS_REF_LINE_CLASS) : g.select('path.' + X_AXIS_REF_LINE_CLASS);\n        xRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n    }\n\n    function showDot (dot) {\n        dot.style('fill-opacity', 0.8);\n        dot.style('stroke-opacity', 0.8);\n        dot.attr('r', _dotRadius);\n        return dot;\n    }\n\n    function showRefLines (dot, g) {\n        var x = dot.attr('cx');\n        var y = dot.attr('cy');\n        var yAxisX = (_chart._yAxisX() - _chart.margins().left);\n        var yAxisRefPathD = 'M' + yAxisX + ' ' + y + 'L' + (x) + ' ' + (y);\n        var xAxisRefPathD = 'M' + x + ' ' + _chart.yAxisHeight() + 'L' + x + ' ' + y;\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', '').attr('d', yAxisRefPathD);\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', '').attr('d', xAxisRefPathD);\n    }\n\n    function getDotRadius () {\n        return _dataPointRadius || _dotRadius;\n    }\n\n    function hideDot (dot) {\n        dot.style('fill-opacity', _dataPointFillOpacity)\n            .style('stroke-opacity', _dataPointStrokeOpacity)\n            .attr('r', getDotRadius());\n    }\n\n    function hideRefLines (g) {\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', 'none');\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', 'none');\n    }\n\n    function renderTitle (dot, d) {\n        if (_chart.renderTitle()) {\n            dot.select('title').remove();\n            dot.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n    }\n\n    /**\n     * Turn on/off the mouseover behavior of an individual data point which renders a circle and x/y axis\n     * dashed lines back to each respective axis.  This is ignored if the chart\n     * {@link dc.coordinateGridMixin#brushOn brush} is on\n     * @method xyTipsOn\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Boolean} [xyTipsOn=false]\n     * @returns {Boolean|dc.lineChart}\n     */\n    _chart.xyTipsOn = function (xyTipsOn) {\n        if (!arguments.length) {\n            return _xyTipsOn;\n        }\n        _xyTipsOn = xyTipsOn;\n        return _chart;\n    };\n\n    /**\n     * Get or set the radius (in px) for dots displayed on the data points.\n     * @method dotRadius\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Number} [dotRadius=5]\n     * @returns {Number|dc.lineChart}\n     */\n    _chart.dotRadius = function (dotRadius) {\n        if (!arguments.length) {\n            return _dotRadius;\n        }\n        _dotRadius = dotRadius;\n        return _chart;\n    };\n\n    /**\n     * Always show individual dots for each datapoint.\n     *\n     * If `options` is falsy, it disables data point rendering. If no `options` are provided, the\n     * current `options` values are instead returned.\n     * @method renderDataPoints\n     * @memberof dc.lineChart\n     * @instance\n     * @example\n     * chart.renderDataPoints({radius: 2, fillOpacity: 0.8, strokeOpacity: 0.8})\n     * @param  {{fillOpacity: Number, strokeOpacity: Number, radius: Number}} [options={fillOpacity: 0.8, strokeOpacity: 0.8, radius: 2}]\n     * @returns {{fillOpacity: Number, strokeOpacity: Number, radius: Number}|dc.lineChart}\n     */\n    _chart.renderDataPoints = function (options) {\n        if (!arguments.length) {\n            return {\n                fillOpacity: _dataPointFillOpacity,\n                strokeOpacity: _dataPointStrokeOpacity,\n                radius: _dataPointRadius\n            };\n        } else if (!options) {\n            _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n            _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n            _dataPointRadius = null;\n        } else {\n            _dataPointFillOpacity = options.fillOpacity || 0.8;\n            _dataPointStrokeOpacity = options.strokeOpacity || 0.8;\n            _dataPointRadius = options.radius || 2;\n        }\n        return _chart;\n    };\n\n    function colorFilter (color, dashstyle, inv) {\n        return function () {\n            var item = d3.select(this);\n            var match = (item.attr('stroke') === color &&\n                item.attr('stroke-dasharray') === ((dashstyle instanceof Array) ?\n                    dashstyle.join(',') : null)) || item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n    }\n\n    _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n            _chart.g().selectAll('path.line, path.area')\n                .classed('highlight', colorFilter(d.color, d.dashstyle))\n                .classed('fadeout', colorFilter(d.color, d.dashstyle, true));\n        }\n    };\n\n    _chart.legendReset = function () {\n        _chart.g().selectAll('path.line, path.area')\n            .classed('highlight', false)\n            .classed('fadeout', false);\n    };\n\n    dc.override(_chart, 'legendables', function () {\n        var legendables = _chart._legendables();\n        if (!_dashStyle) {\n            return legendables;\n        }\n        return legendables.map(function (l) {\n            l.dashstyle = _dashStyle;\n            return l;\n        });\n    });\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The data count widget is a simple widget designed to display the number of records selected by the\n * current filters out of the total number of records in the data set. Once created the data count widget\n * will automatically update the text content of child elements with the following classes:\n *\n * * `.total-count` - total number of records\n * * `.filter-count` - number of records matched by the current filters\n *\n * Note: this widget works best for the specific case of showing the number of records out of a\n * total. If you want a more general-purpose numeric display, please use the\n * {@link dc.numberDisplay} widget instead.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class dataCount\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * var ndx = crossfilter(data);\n * var all = ndx.groupAll();\n *\n * dc.dataCount('.dc-data-count')\n *     .dimension(ndx)\n *     .group(all);\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataCount}\n */\ndc.dataCount = function (parent, chartGroup) {\n    var _formatNumber = d3.format(',d');\n    var _chart = dc.baseMixin({});\n    var _html = {some: '', all: ''};\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending how many items are\n     * selected. The text `%total-count` will replaced with the total number of records, and the text\n     * `%filter-count` will be replaced with the number of selected records.\n     * - all: HTML template to use if all items are selected\n     * - some: HTML template to use if not all items are selected\n     * @method html\n     * @memberof dc.dataCount\n     * @instance\n     * @example\n     * counter.html({\n     *      some: '%filter-count out of %total-count records selected',\n     *      all: 'All records selected. Click on charts to apply filters'\n     * })\n     * @param {{some:String, all: String}} [options]\n     * @returns {{some:String, all: String}|dc.dataCount}\n     */\n    _chart.html = function (options) {\n        if (!arguments.length) {\n            return _html;\n        }\n        if (options.all) {\n            _html.all = options.all;\n        }\n        if (options.some) {\n            _html.some = options.some;\n        }\n        return _chart;\n    };\n\n    /**\n     * Gets or sets an optional function to format the filter count and total count.\n     * @method formatNumber\n     * @memberof dc.dataCount\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n     * @example\n     * counter.formatNumber(d3.format('.2g'))\n     * @param {Function} [formatter=d3.format('.2g')]\n     * @returns {Function|dc.dataCount}\n     */\n    _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n            return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        var tot = _chart.dimension().size(),\n            val = _chart.group().value();\n        var all = _formatNumber(tot);\n        var selected = _formatNumber(val);\n\n        if ((tot === val) && (_html.all !== '')) {\n            _chart.root().html(_html.all.replace('%total-count', all).replace('%filter-count', selected));\n        } else if (_html.some !== '') {\n            _chart.root().html(_html.some.replace('%total-count', all).replace('%filter-count', selected));\n        } else {\n            _chart.selectAll('.total-count').text(all);\n            _chart.selectAll('.filter-count').text(selected);\n        }\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The data table is a simple widget designed to list crossfilter focused data set (rows being\n * filtered) in a good old tabular fashion.\n *\n * Note: Unlike other charts, the data table (and data grid chart) use the {@link dc.dataTable#group group} attribute as a\n * keying function for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data\n * together in groups.  Do not pass in a crossfilter group as this will not work.\n *\n * Another interesting feature of the data table is that you can pass a crossfilter group to the `dimension`, as\n * long as you specify the {@link dc.dataTable#order order} as `d3.descending`, since the data\n * table will use `dimension.top()` to fetch the data in that case, and the method is equally\n * supported on the crossfilter group as the crossfilter dimension.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.io/dc.js/examples/table-on-aggregated-data.html dataTable on a crossfilter group}\n * ({@link https://github.com/dc-js/dc.js/blob/develop/web/examples/table-on-aggregated-data.html source})\n * @class dataTable\n * @memberof dc\n * @mixes dc.baseMixin\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataTable}\n */\ndc.dataTable = function (parent, chartGroup) {\n    var LABEL_CSS_CLASS = 'dc-table-label';\n    var ROW_CSS_CLASS = 'dc-table-row';\n    var COLUMN_CSS_CLASS = 'dc-table-column';\n    var GROUP_CSS_CLASS = 'dc-table-group';\n    var HEAD_CSS_CLASS = 'dc-table-head';\n\n    var _chart = dc.baseMixin({});\n\n    var _size = 25;\n    var _columns = [];\n    var _sortBy = function (d) {\n        return d;\n    };\n    var _order = d3.ascending;\n    var _beginSlice = 0;\n    var _endSlice;\n    var _showGroups = true;\n\n    _chart._doRender = function () {\n        _chart.selectAll('tbody').remove();\n\n        renderRows(renderGroups());\n\n        return _chart;\n    };\n\n    _chart._doColumnValueFormat = function (v, d) {\n        return ((typeof v === 'function') ?\n                v(d) :                          // v as function\n                ((typeof v === 'string') ?\n                 d[v] :                         // v is field name string\n                 v.format(d)                        // v is Object, use fn (element 2)\n                )\n               );\n    };\n\n    _chart._doColumnHeaderFormat = function (d) {\n        // if 'function', convert to string representation\n        // show a string capitalized\n        // if an object then display its label string as-is.\n        return (typeof d === 'function') ?\n                _chart._doColumnHeaderFnToString(d) :\n                ((typeof d === 'string') ?\n                 _chart._doColumnHeaderCapitalize(d) : String(d.label));\n    };\n\n    _chart._doColumnHeaderCapitalize = function (s) {\n        // capitalize\n        return s.charAt(0).toUpperCase() + s.slice(1);\n    };\n\n    _chart._doColumnHeaderFnToString = function (f) {\n        // columnString(f) {\n        var s = String(f);\n        var i1 = s.indexOf('return ');\n        if (i1 >= 0) {\n            var i2 = s.lastIndexOf(';');\n            if (i2 >= 0) {\n                s = s.substring(i1 + 7, i2);\n                var i3 = s.indexOf('numberFormat');\n                if (i3 >= 0) {\n                    s = s.replace('numberFormat', '');\n                }\n            }\n        }\n        return s;\n    };\n\n    function renderGroups () {\n        // The 'original' example uses all 'functions'.\n        // If all 'functions' are used, then don't remove/add a header, and leave\n        // the html alone. This preserves the functionality of earlier releases.\n        // A 2nd option is a string representing a field in the data.\n        // A third option is to supply an Object such as an array of 'information', and\n        // supply your own _doColumnHeaderFormat and _doColumnValueFormat functions to\n        // create what you need.\n        var bAllFunctions = true;\n        _columns.forEach(function (f) {\n            bAllFunctions = bAllFunctions & (typeof f === 'function');\n        });\n\n        if (!bAllFunctions) {\n            // ensure one thead\n            var thead = _chart.selectAll('thead').data([0]);\n            thead.enter().append('thead');\n            thead.exit().remove();\n\n            // with one tr\n            var headrow = thead.selectAll('tr').data([0]);\n            headrow.enter().append('tr');\n            headrow.exit().remove();\n\n            // with a th for each column\n            var headcols = headrow.selectAll('th')\n                .data(_columns);\n            headcols.enter().append('th');\n            headcols.exit().remove();\n\n            headcols\n                .attr('class', HEAD_CSS_CLASS)\n                    .html(function (d) {\n                        return (_chart._doColumnHeaderFormat(d));\n\n                    });\n        }\n\n        var groups = _chart.root().selectAll('tbody')\n            .data(nestEntries(), function (d) {\n                return _chart.keyAccessor()(d);\n            });\n\n        var rowGroup = groups\n            .enter()\n            .append('tbody');\n\n        if (_showGroups === true) {\n            rowGroup\n                .append('tr')\n                .attr('class', GROUP_CSS_CLASS)\n                    .append('td')\n                    .attr('class', LABEL_CSS_CLASS)\n                    .attr('colspan', _columns.length)\n                    .html(function (d) {\n                        return _chart.keyAccessor()(d);\n                    });\n        }\n\n        groups.exit().remove();\n\n        return rowGroup;\n    }\n\n    function nestEntries () {\n        var entries;\n        if (_order === d3.ascending) {\n            entries = _chart.dimension().bottom(_size);\n        } else {\n            entries = _chart.dimension().top(_size);\n        }\n\n        return d3.nest()\n            .key(_chart.group())\n            .sortKeys(_order)\n            .entries(entries.sort(function (a, b) {\n                return _order(_sortBy(a), _sortBy(b));\n            }).slice(_beginSlice, _endSlice));\n    }\n\n    function renderRows (groups) {\n        var rows = groups.order()\n            .selectAll('tr.' + ROW_CSS_CLASS)\n            .data(function (d) {\n                return d.values;\n            });\n\n        var rowEnter = rows.enter()\n            .append('tr')\n            .attr('class', ROW_CSS_CLASS);\n\n        _columns.forEach(function (v, i) {\n            rowEnter.append('td')\n                .attr('class', COLUMN_CSS_CLASS + ' _' + i)\n                .html(function (d) {\n                    return _chart._doColumnValueFormat(v, d);\n                });\n        });\n\n        rows.exit().remove();\n\n        return rows;\n    }\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set the group function for the data table. The group function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n     * to split rows into groups.\n     *\n     * Do not pass in a crossfilter group as this will not work.\n     * @method group\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * // group rows by the value of their field\n     * chart\n     *     .group(function(d) { return d.field; })\n     * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n     * @returns {Function|dc.dataTable}\n     */\n\n    /**\n     * Get or set the table size which determines the number of rows displayed by the widget.\n     * @method size\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number} [size=25]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.size = function (size) {\n        if (!arguments.length) {\n            return _size;\n        }\n        _size = size;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed\n     * by the widget. Useful when implementing pagination.\n     *\n     * Note: the sortBy function will determine how the rows are ordered for pagination purposes.\n\n     * See the {@link http://dc-js.github.io/dc.js/examples/table-pagination.html table pagination example}\n     * to see how to implement the pagination user interface using `beginSlice` and `endSlice`.\n     * @method beginSlice\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n            return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the\n     * widget. Useful when implementing pagination. See {@link dc.dataTable#beginSlice `beginSlice`} for more information.\n     * @method endSlice\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number|undefined} [endSlice=undefined]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n            return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set column functions. The data table widget supports several methods of specifying the\n     * columns to display.\n     *\n     * The original method uses an array of functions to generate dynamic columns. Column functions\n     * are simple javascript functions with only one input argument `d` which represents a row in\n     * the data set. The return value of these functions will be used to generate the content for\n     * each cell. However, this method requires the HTML for the table to have a fixed set of column\n     * headers.\n     *\n     * <pre><code>chart.columns([\n     *     function(d) { return d.date; },\n     *     function(d) { return d.open; },\n     *     function(d) { return d.close; },\n     *     function(d) { return numberFormat(d.close - d.open); },\n     *     function(d) { return d.volume; }\n     * ]);\n     * </code></pre>\n     *\n     * In the second method, you can list the columns to read from the data without specifying it as\n     * a function, except where necessary (ie, computed columns).  Note the data element name is\n     * capitalized when displayed in the table header. You can also mix in functions as necessary,\n     * using the third `{label, format}` form, as shown below.\n     *\n     * <pre><code>chart.columns([\n     *     \"date\",    // d[\"date\"], ie, a field accessor; capitalized automatically\n     *     \"open\",    // ...\n     *     \"close\",   // ...\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) {\n     *             return numberFormat(d.close - d.open);\n     *         }\n     *     },\n     *     \"volume\"   // d[\"volume\"], ie, a field accessor; capitalized automatically\n     * ]);\n     * </code></pre>\n     *\n     * In the third example, we specify all fields using the `{label, format}` method:\n     * <pre><code>chart.columns([\n     *     {\n     *         label: \"Date\",\n     *         format: function (d) { return d.date; }\n     *     },\n     *     {\n     *         label: \"Open\",\n     *         format: function (d) { return numberFormat(d.open); }\n     *     },\n     *     {\n     *         label: \"Close\",\n     *         format: function (d) { return numberFormat(d.close); }\n     *     },\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) { return numberFormat(d.close - d.open); }\n     *     },\n     *     {\n     *         label: \"Volume\",\n     *         format: function (d) { return d.volume; }\n     *     }\n     * ]);\n     * </code></pre>\n     *\n     * You may wish to override the dataTable functions `_doColumnHeaderCapitalize` and\n     * `_doColumnHeaderFnToString`, which are used internally to translate the column information or\n     * function into a displayed header. The first one is used on the \"string\" column specifier; the\n     * second is used to transform a stringified function into something displayable. For the Stock\n     * example, the function for Change becomes the table header **d.close - d.open**.\n     *\n     * Finally, you can even specify a completely different form of column definition. To do this,\n     * override `_chart._doColumnHeaderFormat` and `_chart._doColumnValueFormat` Be aware that\n     * fields without numberFormat specification will be displayed just as they are stored in the\n     * data, unformatted.\n     * @method columns\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Array<Function>} [columns=[]]\n     * @returns {Array<Function>}|dc.dataTable}\n     */\n    _chart.columns = function (columns) {\n        if (!arguments.length) {\n            return _columns;\n        }\n        _columns = columns;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at row level and returns a\n     * particular field to be sorted by.\n     * @method sortBy\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortBy=identity function]\n     * @returns {Function|dc.dataTable}\n     */\n    _chart.sortBy = function (sortBy) {\n        if (!arguments.length) {\n            return _sortBy;\n        }\n        _sortBy = sortBy;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort order. If the order is `d3.ascending`, the data table will use\n     * `dimension().bottom()` to fetch the data; otherwise it will use `dimension().top()`\n     * @method order\n     * @memberof dc.dataTable\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|dc.dataTable}\n     */\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    /**\n     * Get or set if group rows will be shown. The dataTable {@link dc.dataTable#group group}\n     * function must be specified even if groups are not shown.\n     * @method showGroups\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * chart\n     *     .group([value], [name])\n     *     .showGroups(true|false);\n     * @param {Boolean} [showGroups=true]\n     * @returns {Boolean|dc.dataTable}\n     */\n    _chart.showGroups = function (showGroups) {\n        if (!arguments.length) {\n            return _showGroups;\n        }\n        _showGroups = showGroups;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Data grid is a simple widget designed to list the filtered records, providing\n * a simple way to define how the items are displayed.\n *\n * Note: Unlike other charts, the data grid chart (and data table) use the {@link dc.dataGrid#group group} attribute as a keying function\n * for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data together in groups.\n * Do not pass in a crossfilter group as this will not work.\n *\n * Examples:\n * - {@link http://europarl.me/dc.js/web/ep/index.html List of members of the european parliament}\n * @class dataGrid\n * @memberof dc\n * @mixes dc.baseMixin\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataGrid}\n */\ndc.dataGrid = function (parent, chartGroup) {\n    var LABEL_CSS_CLASS = 'dc-grid-label';\n    var ITEM_CSS_CLASS = 'dc-grid-item';\n    var GROUP_CSS_CLASS = 'dc-grid-group';\n    var GRID_CSS_CLASS = 'dc-grid-top';\n\n    var _chart = dc.baseMixin({});\n\n    var _size = 999; // shouldn't be needed, but you might\n    var _html = function (d) { return 'you need to provide an html() handling param:  ' + JSON.stringify(d); };\n    var _sortBy = function (d) {\n        return d;\n    };\n    var _order = d3.ascending;\n    var _beginSlice = 0, _endSlice;\n\n    var _htmlGroup = function (d) {\n        return '<div class=\\'' + GROUP_CSS_CLASS + '\\'><h1 class=\\'' + LABEL_CSS_CLASS + '\\'>' +\n            _chart.keyAccessor()(d) + '</h1></div>';\n    };\n\n    _chart._doRender = function () {\n        _chart.selectAll('div.' + GRID_CSS_CLASS).remove();\n\n        renderItems(renderGroups());\n\n        return _chart;\n    };\n\n    function renderGroups () {\n        var groups = _chart.root().selectAll('div.' + GRID_CSS_CLASS)\n                .data(nestEntries(), function (d) {\n                    return _chart.keyAccessor()(d);\n                });\n\n        var itemGroup = groups\n                .enter()\n                .append('div')\n                .attr('class', GRID_CSS_CLASS);\n\n        if (_htmlGroup) {\n            itemGroup\n                .html(function (d) {\n                    return _htmlGroup(d);\n                });\n        }\n\n        groups.exit().remove();\n        return itemGroup;\n    }\n\n    function nestEntries () {\n        var entries = _chart.dimension().top(_size);\n\n        return d3.nest()\n            .key(_chart.group())\n            .sortKeys(_order)\n            .entries(entries.sort(function (a, b) {\n                return _order(_sortBy(a), _sortBy(b));\n            }).slice(_beginSlice, _endSlice));\n    }\n\n    function renderItems (groups) {\n        var items = groups.order()\n                .selectAll('div.' + ITEM_CSS_CLASS)\n                .data(function (d) {\n                    return d.values;\n                });\n\n        items.enter()\n            .append('div')\n            .attr('class', ITEM_CSS_CLASS)\n            .html(function (d) {\n                return _html(d);\n            });\n\n        items.exit().remove();\n\n        return items;\n    }\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set the group function for the data grid. The group function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n     * to split rows into groups.\n     *\n     * Do not pass in a crossfilter group as this will not work.\n     * @method group\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * // group rows by the value of their field\n     * chart\n     *     .group(function(d) { return d.field; })\n     * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n     * @returns {Function|dc.dataTable}\n     */\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @method beginSlice\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n            return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @method endSlice\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [endSlice]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n            return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the grid size which determines the number of items displayed by the widget.\n     * @method size\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [size=999]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.size = function (size) {\n        if (!arguments.length) {\n            return _size;\n        }\n        _size = size;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that formats an item. The data grid widget uses a\n     * function to generate dynamic html. Use your favourite templating engine or\n     * generate the string directly.\n     * @method html\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.html(function (d) { return '<div class='item '+data.exampleCategory+''>'+data.exampleString+'</div>';});\n     * @param {Function} [html]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.html = function (html) {\n        if (!arguments.length) {\n            return _html;\n        }\n        _html = html;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that formats a group label.\n     * @method htmlGroup\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.htmlGroup (function (d) { return '<h2>'.d.key . 'with ' . d.values.length .' items</h2>'});\n     * @param {Function} [htmlGroup]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.htmlGroup = function (htmlGroup) {\n        if (!arguments.length) {\n            return _htmlGroup;\n        }\n        _htmlGroup = htmlGroup;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at the item\n     * level and returns a particular field to be sorted.\n     * @method sortBy\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortByFunction]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.sortBy = function (sortByFunction) {\n        if (!arguments.length) {\n            return _sortBy;\n        }\n        _sortBy = sortByFunction;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort the order function.\n     * @method order\n     * @memberof dc.dataGrid\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A concrete implementation of a general purpose bubble chart that allows data visualization using the\n * following dimensions:\n * - x axis position\n * - y axis position\n * - bubble radius\n * - color\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n * @class bubbleChart\n * @memberof dc\n * @mixes dc.bubbleMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a bubble chart under #chart-container1 element using the default global chart group\n * var bubbleChart1 = dc.bubbleChart('#chart-container1');\n * // create a bubble chart under #chart-container2 element using chart group A\n * var bubbleChart2 = dc.bubbleChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.bubbleChart}\n */\ndc.bubbleChart = function (parent, chartGroup) {\n    var _chart = dc.bubbleMixin(dc.coordinateGridMixin({}));\n\n    _chart.transitionDuration(750);\n\n    _chart.transitionDelay(0);\n\n    var bubbleLocator = function (d) {\n        return 'translate(' + (bubbleX(d)) + ',' + (bubbleY(d)) + ')';\n    };\n\n    _chart.plotData = function () {\n        _chart.calculateRadiusDomain();\n        _chart.r().range([_chart.MIN_RADIUS, _chart.xAxisLength() * _chart.maxBubbleRelativeSize()]);\n\n        var data = _chart.data();\n        var bubbleG = _chart.chartBodyG().selectAll('g.' + _chart.BUBBLE_NODE_CLASS)\n                .data(data, function (d) { return d.key; });\n        if (_chart.sortBubbleSize()) {\n            // update dom order based on sort\n            bubbleG.order();\n        }\n\n        renderNodes(bubbleG);\n\n        updateNodes(bubbleG);\n\n        removeNodes(bubbleG);\n\n        _chart.fadeDeselectedArea();\n    };\n\n    function renderNodes (bubbleG) {\n        var bubbleGEnter = bubbleG.enter().append('g');\n\n        bubbleGEnter\n            .attr('class', _chart.BUBBLE_NODE_CLASS)\n            .attr('transform', bubbleLocator)\n            .append('circle').attr('class', function (d, i) {\n                return _chart.BUBBLE_CLASS + ' _' + i;\n            })\n            .on('click', _chart.onClick)\n            .attr('fill', _chart.getColor)\n            .attr('r', 0);\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay())\n            .select('circle.' + _chart.BUBBLE_CLASS)\n            .attr('r', function (d) {\n                return _chart.bubbleR(d);\n            })\n            .attr('opacity', function (d) {\n                return (_chart.bubbleR(d) > 0) ? 1 : 0;\n            });\n\n        _chart._doRenderLabel(bubbleGEnter);\n\n        _chart._doRenderTitles(bubbleGEnter);\n    }\n\n    function updateNodes (bubbleG) {\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', bubbleLocator)\n            .select('circle.' + _chart.BUBBLE_CLASS)\n            .attr('fill', _chart.getColor)\n            .attr('r', function (d) {\n                return _chart.bubbleR(d);\n            })\n            .attr('opacity', function (d) {\n                return (_chart.bubbleR(d) > 0) ? 1 : 0;\n            });\n\n        _chart.doUpdateLabels(bubbleG);\n        _chart.doUpdateTitles(bubbleG);\n    }\n\n    function removeNodes (bubbleG) {\n        bubbleG.exit().remove();\n    }\n\n    function bubbleX (d) {\n        var x = _chart.x()(_chart.keyAccessor()(d));\n        if (isNaN(x)) {\n            x = 0;\n        }\n        return x;\n    }\n\n    function bubbleY (d) {\n        var y = _chart.y()(_chart.valueAccessor()(d));\n        if (isNaN(y)) {\n            y = 0;\n        }\n        return y;\n    }\n\n    _chart.renderBrush = function () {\n        // override default x axis brush from parent chart\n    };\n\n    _chart.redrawBrush = function () {\n        // override default x axis brush from parent chart\n        _chart.fadeDeselectedArea();\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Composite charts are a special kind of chart that render multiple charts on the same Coordinate\n * Grid. You can overlay (compose) different bar/line/area charts in a single composite chart to\n * achieve some quite flexible charting effects.\n * @class compositeChart\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a composite chart under #chart-container1 element using the default global chart group\n * var compositeChart1 = dc.compositeChart('#chart-container1');\n * // create a composite chart under #chart-container2 element using chart group A\n * var compositeChart2 = dc.compositeChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.compositeChart}\n */\ndc.compositeChart = function (parent, chartGroup) {\n\n    var SUB_CHART_CLASS = 'sub';\n    var DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING = 12;\n\n    var _chart = dc.coordinateGridMixin({});\n    var _children = [];\n\n    var _childOptions = {};\n\n    var _shareColors = false,\n        _shareTitle = true,\n        _alignYAxes = false;\n\n    var _rightYAxis = d3.svg.axis(),\n        _rightYAxisLabel = 0,\n        _rightYAxisLabelPadding = DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING,\n        _rightY,\n        _rightAxisGridLines = false;\n\n    _chart._mandatoryAttributes([]);\n    _chart.transitionDuration(500);\n    _chart.transitionDelay(0);\n\n    dc.override(_chart, '_generateG', function () {\n        var g = this.__generateG();\n\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n\n            generateChildG(child, i);\n\n            if (!child.dimension()) {\n                child.dimension(_chart.dimension());\n            }\n            if (!child.group()) {\n                child.group(_chart.group());\n            }\n\n            child.chartGroup(_chart.chartGroup());\n            child.svg(_chart.svg());\n            child.xUnits(_chart.xUnits());\n            child.transitionDuration(_chart.transitionDuration(), _chart.transitionDelay());\n            child.brushOn(_chart.brushOn());\n            child.renderTitle(_chart.renderTitle());\n            child.elasticX(_chart.elasticX());\n        }\n\n        return g;\n    });\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n        var brushIsEmpty = _chart.brushIsEmpty(extent);\n\n        for (var i = 0; i < _children.length; ++i) {\n            _children[i].replaceFilter(brushIsEmpty ? null : extent);\n        }\n    };\n\n    _chart._prepareYAxis = function () {\n        var left = (leftYAxisChildren().length !== 0);\n        var right = (rightYAxisChildren().length !== 0);\n        var ranges = calculateYAxisRanges(left, right);\n\n        if (left) { prepareLeftYAxis(ranges); }\n        if (right) { prepareRightYAxis(ranges); }\n\n        if (leftYAxisChildren().length > 0 && !_rightAxisGridLines) {\n            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _chart.y(), _chart.yAxis());\n        } else if (rightYAxisChildren().length > 0) {\n            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _rightY, _rightYAxis);\n        }\n    };\n\n    _chart.renderYAxis = function () {\n        if (leftYAxisChildren().length !== 0) {\n            _chart.renderYAxisAt('y', _chart.yAxis(), _chart.margins().left);\n            _chart.renderYAxisLabel('y', _chart.yAxisLabel(), -90);\n        }\n\n        if (rightYAxisChildren().length !== 0) {\n            _chart.renderYAxisAt('yr', _chart.rightYAxis(), _chart.width() - _chart.margins().right);\n            _chart.renderYAxisLabel('yr', _chart.rightYAxisLabel(), 90, _chart.width() - _rightYAxisLabelPadding);\n        }\n    };\n\n    function calculateYAxisRanges (left, right) {\n        var lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax;\n        var ranges;\n\n        if (left) {\n            lyAxisMin = yAxisMin();\n            lyAxisMax = yAxisMax();\n        }\n\n        if (right) {\n            ryAxisMin = rightYAxisMin();\n            ryAxisMax = rightYAxisMax();\n        }\n\n        if (_chart.alignYAxes() && left && right) {\n            ranges = alignYAxisRanges(lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax);\n        }\n\n        return ranges || {\n            lyAxisMin: lyAxisMin,\n            lyAxisMax: lyAxisMax,\n            ryAxisMin: ryAxisMin,\n            ryAxisMax: ryAxisMax\n        };\n    }\n\n    function alignYAxisRanges (lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax) {\n        // since the two series will share a zero, each Y is just a multiple\n        // of the other. and the ratio should be the ratio of the ranges of the\n        // input data, so that they come out the same height. so we just min/max\n\n        // note: both ranges already include zero due to the stack mixin (#667)\n        // if #667 changes, we can reconsider whether we want data height or\n        // height from zero to be equal. and it will be possible for the axes\n        // to be aligned but not visible.\n        var extentRatio = (ryAxisMax - ryAxisMin) / (lyAxisMax - lyAxisMin);\n\n        return {\n            lyAxisMin: Math.min(lyAxisMin, ryAxisMin / extentRatio),\n            lyAxisMax: Math.max(lyAxisMax, ryAxisMax / extentRatio),\n            ryAxisMin: Math.min(ryAxisMin, lyAxisMin * extentRatio),\n            ryAxisMax: Math.max(ryAxisMax, lyAxisMax * extentRatio)\n        };\n    }\n\n    function prepareRightYAxis (ranges) {\n        var needDomain = _chart.rightY() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n        if (_chart.rightY() === undefined) {\n            _chart.rightY(d3.scale.linear());\n        }\n        if (needDomain) {\n            _chart.rightY().domain([ranges.ryAxisMin, ranges.ryAxisMax]);\n        }\n        if (needRange) {\n            _chart.rightY().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.rightY().range([_chart.yAxisHeight(), 0]);\n        _chart.rightYAxis(_chart.rightYAxis().scale(_chart.rightY()));\n\n        _chart.rightYAxis().orient('right');\n    }\n\n    function prepareLeftYAxis (ranges) {\n        var needDomain = _chart.y() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n        if (_chart.y() === undefined) {\n            _chart.y(d3.scale.linear());\n        }\n        if (needDomain) {\n            _chart.y().domain([ranges.lyAxisMin, ranges.lyAxisMax]);\n        }\n        if (needRange) {\n            _chart.y().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.y().range([_chart.yAxisHeight(), 0]);\n        _chart.yAxis(_chart.yAxis().scale(_chart.y()));\n\n        _chart.yAxis().orient('left');\n    }\n\n    function generateChildG (child, i) {\n        child._generateG(_chart.g());\n        child.g().attr('class', SUB_CHART_CLASS + ' _' + i);\n    }\n\n    _chart.plotData = function () {\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n\n            if (!child.g()) {\n                generateChildG(child, i);\n            }\n\n            if (_shareColors) {\n                child.colors(_chart.colors());\n            }\n\n            child.x(_chart.x());\n\n            child.xAxis(_chart.xAxis());\n\n            if (child.useRightYAxis()) {\n                child.y(_chart.rightY());\n                child.yAxis(_chart.rightYAxis());\n            } else {\n                child.y(_chart.y());\n                child.yAxis(_chart.yAxis());\n            }\n\n            child.plotData();\n\n            child._activateRenderlets();\n        }\n    };\n\n    /**\n     * Get or set whether to draw gridlines from the right y axis.  Drawing from the left y axis is the\n     * default behavior. This option is only respected when subcharts with both left and right y-axes\n     * are present.\n     * @method useRightAxisGridLines\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [useRightAxisGridLines=false]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.useRightAxisGridLines = function (useRightAxisGridLines) {\n        if (!arguments) {\n            return _rightAxisGridLines;\n        }\n\n        _rightAxisGridLines = useRightAxisGridLines;\n        return _chart;\n    };\n\n    /**\n     * Get or set chart-specific options for all child charts. This is equivalent to calling\n     * {@link dc.baseMixin#options .options} on each child chart.\n     * @method childOptions\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Object} [childOptions]\n     * @returns {Object|dc.compositeChart}\n     */\n    _chart.childOptions = function (childOptions) {\n        if (!arguments.length) {\n            return _childOptions;\n        }\n        _childOptions = childOptions;\n        _children.forEach(function (child) {\n            child.options(_childOptions);\n        });\n        return _chart;\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n            child.brush(_chart.brush());\n            child.fadeDeselectedArea();\n        }\n    };\n\n    /**\n     * Set or get the right y axis label.\n     * @method rightYAxisLabel\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {String} [rightYAxisLabel]\n     * @param {Number} [padding]\n     * @returns {String|dc.compositeChart}\n     */\n    _chart.rightYAxisLabel = function (rightYAxisLabel, padding) {\n        if (!arguments.length) {\n            return _rightYAxisLabel;\n        }\n        _rightYAxisLabel = rightYAxisLabel;\n        _chart.margins().right -= _rightYAxisLabelPadding;\n        _rightYAxisLabelPadding = (padding === undefined) ? DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING : padding;\n        _chart.margins().right += _rightYAxisLabelPadding;\n        return _chart;\n    };\n\n    /**\n     * Combine the given charts into one single composite coordinate grid chart.\n     * @method compose\n     * @memberof dc.compositeChart\n     * @instance\n     * @example\n     * moveChart.compose([\n     *     // when creating sub-chart you need to pass in the parent chart\n     *     dc.lineChart(moveChart)\n     *         .group(indexAvgByMonthGroup) // if group is missing then parent's group will be used\n     *         .valueAccessor(function (d){return d.value.avg;})\n     *         // most of the normal functions will continue to work in a composed chart\n     *         .renderArea(true)\n     *         .stack(monthlyMoveGroup, function (d){return d.value;})\n     *         .title(function (d){\n     *             var value = d.value.avg?d.value.avg:d.value;\n     *             if(isNaN(value)) value = 0;\n     *             return dateFormat(d.key) + '\\n' + numberFormat(value);\n     *         }),\n     *     dc.barChart(moveChart)\n     *         .group(volumeByMonthGroup)\n     *         .centerBar(true)\n     * ]);\n     * @param {Array<Chart>} [subChartArray]\n     * @returns {dc.compositeChart}\n     */\n    _chart.compose = function (subChartArray) {\n        _children = subChartArray;\n        _children.forEach(function (child) {\n            child.height(_chart.height());\n            child.width(_chart.width());\n            child.margins(_chart.margins());\n\n            if (_shareTitle) {\n                child.title(_chart.title());\n            }\n\n            child.options(_childOptions);\n        });\n        return _chart;\n    };\n\n    /**\n     * Returns the child charts which are composed into the composite chart.\n     * @method children\n     * @memberof dc.compositeChart\n     * @instance\n     * @returns {Array<dc.baseMixin>}\n     */\n    _chart.children = function () {\n        return _children;\n    };\n\n    /**\n     * Get or set color sharing for the chart. If set, the {@link dc.colorMixin#colors .colors()} value from this chart\n     * will be shared with composed children. Additionally if the child chart implements\n     * Stackable and has not set a custom .colorAccessor, then it will generate a color\n     * specific to its order in the composition.\n     * @method shareColors\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [shareColors=false]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.shareColors = function (shareColors) {\n        if (!arguments.length) {\n            return _shareColors;\n        }\n        _shareColors = shareColors;\n        return _chart;\n    };\n\n    /**\n     * Get or set title sharing for the chart. If set, the {@link dc.baseMixin#title .title()} value from\n     * this chart will be shared with composed children.\n     * @method shareTitle\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [shareTitle=true]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.shareTitle = function (shareTitle) {\n        if (!arguments.length) {\n            return _shareTitle;\n        }\n        _shareTitle = shareTitle;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y scale for the right axis. The right y scale is typically automatically\n     * generated by the chart implementation.\n     * @method rightY\n     * @memberof dc.compositeChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|dc.compositeChart}\n     */\n    _chart.rightY = function (yScale) {\n        if (!arguments.length) {\n            return _rightY;\n        }\n        _rightY = yScale;\n        _chart.rescale();\n        return _chart;\n    };\n\n    /**\n     * Get or set alignment between left and right y axes. A line connecting '0' on both y axis\n     * will be parallel to x axis. This only has effect when {@link #dc.coordinateGridMixin+elasticY elasticY} is true.\n     * @method alignYAxes\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [alignYAxes=false]\n     * @returns {Chart}\n     */\n    _chart.alignYAxes = function (alignYAxes) {\n        if (!arguments.length) {\n            return _alignYAxes;\n        }\n        _alignYAxes = alignYAxes;\n        _chart.rescale();\n        return _chart;\n    };\n\n    function leftYAxisChildren () {\n        return _children.filter(function (child) {\n            return !child.useRightYAxis();\n        });\n    }\n\n    function rightYAxisChildren () {\n        return _children.filter(function (child) {\n            return child.useRightYAxis();\n        });\n    }\n\n    function getYAxisMin (charts) {\n        return charts.map(function (c) {\n            return c.yAxisMin();\n        });\n    }\n\n    delete _chart.yAxisMin;\n    function yAxisMin () {\n        return d3.min(getYAxisMin(leftYAxisChildren()));\n    }\n\n    function rightYAxisMin () {\n        return d3.min(getYAxisMin(rightYAxisChildren()));\n    }\n\n    function getYAxisMax (charts) {\n        return charts.map(function (c) {\n            return c.yAxisMax();\n        });\n    }\n\n    delete _chart.yAxisMax;\n    function yAxisMax () {\n        return dc.utils.add(d3.max(getYAxisMax(leftYAxisChildren())), _chart.yAxisPadding());\n    }\n\n    function rightYAxisMax () {\n        return dc.utils.add(d3.max(getYAxisMax(rightYAxisChildren())), _chart.yAxisPadding());\n    }\n\n    function getAllXAxisMinFromChildCharts () {\n        return _children.map(function (c) {\n            return c.xAxisMin();\n        });\n    }\n\n    dc.override(_chart, 'xAxisMin', function () {\n        return dc.utils.subtract(d3.min(getAllXAxisMinFromChildCharts()), _chart.xAxisPadding());\n    });\n\n    function getAllXAxisMaxFromChildCharts () {\n        return _children.map(function (c) {\n            return c.xAxisMax();\n        });\n    }\n\n    dc.override(_chart, 'xAxisMax', function () {\n        return dc.utils.add(d3.max(getAllXAxisMaxFromChildCharts()), _chart.xAxisPadding());\n    });\n\n    _chart.legendables = function () {\n        return _children.reduce(function (items, child) {\n            if (_shareColors) {\n                child.colors(_chart.colors());\n            }\n            items.push.apply(items, child.legendables());\n            return items;\n        }, []);\n    };\n\n    _chart.legendHighlight = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n            var child = _children[j];\n            child.legendHighlight(d);\n        }\n    };\n\n    _chart.legendReset = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n            var child = _children[j];\n            child.legendReset(d);\n        }\n    };\n\n    _chart.legendToggle = function () {\n        console.log('composite should not be getting legendToggle itself');\n    };\n\n    /**\n     * Set or get the right y axis used by the composite chart. This function is most useful when y\n     * axis customization is required. The y axis in dc.js is an instance of a [d3 axis\n     * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis) therefore it supports any valid\n     * d3 axis manipulation.\n     *\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.\n     * @method rightYAxis\n     * @memberof dc.compositeChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize y axis tick format\n     * chart.rightYAxis().tickFormat(function (v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.rightYAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [rightYAxis]\n     * @returns {d3.svg.axis|dc.compositeChart}\n     */\n    _chart.rightYAxis = function (rightYAxis) {\n        if (!arguments.length) {\n            return _rightYAxis;\n        }\n        _rightYAxis = rightYAxis;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A series chart is a chart that shows multiple series of data overlaid on one chart, where the\n * series is specified in the data. It is a specialization of Composite Chart and inherits all\n * composite features other than recomposing the chart.\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/series.html Series Chart}\n * @class seriesChart\n * @memberof dc\n * @mixes dc.compositeChart\n * @example\n * // create a series chart under #chart-container1 element using the default global chart group\n * var seriesChart1 = dc.seriesChart(\"#chart-container1\");\n * // create a series chart under #chart-container2 element using chart group A\n * var seriesChart2 = dc.seriesChart(\"#chart-container2\", \"chartGroupA\");\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.seriesChart}\n */\ndc.seriesChart = function (parent, chartGroup) {\n    var _chart = dc.compositeChart(parent, chartGroup);\n\n    function keySort (a, b) {\n        return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n    }\n\n    var _charts = {};\n    var _chartFunction = dc.lineChart;\n    var _seriesAccessor;\n    var _seriesSort = d3.ascending;\n    var _valueSort = keySort;\n\n    _chart._mandatoryAttributes().push('seriesAccessor', 'chart');\n    _chart.shareColors(true);\n\n    _chart._preprocessData = function () {\n        var keep = [];\n        var childrenChanged;\n        var nester = d3.nest().key(_seriesAccessor);\n        if (_seriesSort) {\n            nester.sortKeys(_seriesSort);\n        }\n        if (_valueSort) {\n            nester.sortValues(_valueSort);\n        }\n        var nesting = nester.entries(_chart.data());\n        var children =\n            nesting.map(function (sub, i) {\n                var subChart = _charts[sub.key] || _chartFunction.call(_chart, _chart, chartGroup, sub.key, i);\n                if (!_charts[sub.key]) {\n                    childrenChanged = true;\n                }\n                _charts[sub.key] = subChart;\n                keep.push(sub.key);\n                return subChart\n                    .dimension(_chart.dimension())\n                    .group({all: d3.functor(sub.values)}, sub.key)\n                    .keyAccessor(_chart.keyAccessor())\n                    .valueAccessor(_chart.valueAccessor())\n                    .brushOn(_chart.brushOn());\n            });\n        // this works around the fact compositeChart doesn't really\n        // have a removal interface\n        Object.keys(_charts)\n            .filter(function (c) {return keep.indexOf(c) === -1;})\n            .forEach(function (c) {\n                clearChart(c);\n                childrenChanged = true;\n            });\n        _chart._compose(children);\n        if (childrenChanged && _chart.legend()) {\n            _chart.legend().render();\n        }\n    };\n\n    function clearChart (c) {\n        if (_charts[c].g()) {\n            _charts[c].g().remove();\n        }\n        delete _charts[c];\n    }\n\n    function resetChildren () {\n        Object.keys(_charts).map(clearChart);\n        _charts = {};\n    }\n\n    /**\n     * Get or set the chart function, which generates the child charts.\n     * @method chart\n     * @memberof dc.seriesChart\n     * @instance\n     * @example\n     * // put interpolation on the line charts used for the series\n     * chart.chart(function(c) { return dc.lineChart(c).interpolate('basis'); })\n     * // do a scatter series chart\n     * chart.chart(dc.scatterPlot)\n     * @param {Function} [chartFunction=dc.lineChart]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.chart = function (chartFunction) {\n        if (!arguments.length) {\n            return _chartFunction;\n        }\n        _chartFunction = chartFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Get or set accessor function for the displayed series. Given a datum, this function\n     * should return the series that datum belongs to.\n     * @method seriesAccessor\n     * @memberof dc.seriesChart\n     * @instance\n     * @example\n     * // simple series accessor\n     * chart.seriesAccessor(function(d) { return \"Expt: \" + d.key[0]; })\n     * @param {Function} [accessor]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.seriesAccessor = function (accessor) {\n        if (!arguments.length) {\n            return _seriesAccessor;\n        }\n        _seriesAccessor = accessor;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * Get or set a function to sort the list of series by, given series values.\n     * @method seriesSort\n     * @memberof dc.seriesChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.seriesSort(d3.descending);\n     * @param {Function} [sortFunction=d3.ascending]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.seriesSort = function (sortFunction) {\n        if (!arguments.length) {\n            return _seriesSort;\n        }\n        _seriesSort = sortFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * Get or set a function to sort each series values by. By default this is the key accessor which,\n     * for example, will ensure a lineChart series connects its points in increasing key/x order,\n     * rather than haphazardly.\n     * @method valueSort\n     * @memberof dc.seriesChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * // Default value sort\n     * _chart.valueSort(function keySort (a, b) {\n     *     return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n     * });\n     * @param {Function} [sortFunction]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.valueSort = function (sortFunction) {\n        if (!arguments.length) {\n            return _valueSort;\n        }\n        _valueSort = sortFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    // make compose private\n    _chart._compose = _chart.compose;\n    delete _chart.compose;\n\n    return _chart;\n};\n\n/**\n * The geo choropleth chart is designed as an easy way to create a crossfilter driven choropleth map\n * from GeoJson data. This chart implementation was inspired by\n * {@link http://bl.ocks.org/4060606 the great d3 choropleth example}.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n * @class geoChoroplethChart\n * @memberof dc\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a choropleth chart under '#us-chart' element using the default global chart group\n * var chart1 = dc.geoChoroplethChart('#us-chart');\n * // create a choropleth chart under '#us-chart2' element using chart group A\n * var chart2 = dc.compositeChart('#us-chart2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.geoChoroplethChart}\n */\ndc.geoChoroplethChart = function (parent, chartGroup) {\n    var _chart = dc.colorMixin(dc.baseMixin({}));\n\n    _chart.colorAccessor(function (d) {\n        return d || 0;\n    });\n\n    var _geoPath = d3.geo.path();\n    var _projectionFlag;\n\n    var _geoJsons = [];\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n            var states = _chart.svg().append('g')\n                .attr('class', 'layer' + layerIndex);\n\n            var regionG = states.selectAll('g.' + geoJson(layerIndex).name)\n                .data(geoJson(layerIndex).data)\n                .enter()\n                .append('g')\n                .attr('class', geoJson(layerIndex).name);\n\n            regionG\n                .append('path')\n                .attr('fill', 'white')\n                .attr('d', _geoPath);\n\n            regionG.append('title');\n\n            plotData(layerIndex);\n        }\n        _projectionFlag = false;\n    };\n\n    function plotData (layerIndex) {\n        var data = generateLayeredData();\n\n        if (isDataLayer(layerIndex)) {\n            var regionG = renderRegionG(layerIndex);\n\n            renderPaths(regionG, layerIndex, data);\n\n            renderTitle(regionG, layerIndex, data);\n        }\n    }\n\n    function generateLayeredData () {\n        var data = {};\n        var groupAll = _chart.data();\n        for (var i = 0; i < groupAll.length; ++i) {\n            data[_chart.keyAccessor()(groupAll[i])] = _chart.valueAccessor()(groupAll[i]);\n        }\n        return data;\n    }\n\n    function isDataLayer (layerIndex) {\n        return geoJson(layerIndex).keyAccessor;\n    }\n\n    function renderRegionG (layerIndex) {\n        var regionG = _chart.svg()\n            .selectAll(layerSelector(layerIndex))\n            .classed('selected', function (d) {\n                return isSelected(layerIndex, d);\n            })\n            .classed('deselected', function (d) {\n                return isDeselected(layerIndex, d);\n            })\n            .attr('class', function (d) {\n                var layerNameClass = geoJson(layerIndex).name;\n                var regionClass = dc.utils.nameToId(geoJson(layerIndex).keyAccessor(d));\n                var baseClasses = layerNameClass + ' ' + regionClass;\n                if (isSelected(layerIndex, d)) {\n                    baseClasses += ' selected';\n                }\n                if (isDeselected(layerIndex, d)) {\n                    baseClasses += ' deselected';\n                }\n                return baseClasses;\n            });\n        return regionG;\n    }\n\n    function layerSelector (layerIndex) {\n        return 'g.layer' + layerIndex + ' g.' + geoJson(layerIndex).name;\n    }\n\n    function isSelected (layerIndex, d) {\n        return _chart.hasFilter() && _chart.hasFilter(getKey(layerIndex, d));\n    }\n\n    function isDeselected (layerIndex, d) {\n        return _chart.hasFilter() && !_chart.hasFilter(getKey(layerIndex, d));\n    }\n\n    function getKey (layerIndex, d) {\n        return geoJson(layerIndex).keyAccessor(d);\n    }\n\n    function geoJson (index) {\n        return _geoJsons[index];\n    }\n\n    function renderPaths (regionG, layerIndex, data) {\n        var paths = regionG\n            .select('path')\n            .attr('fill', function () {\n                var currentFill = d3.select(this).attr('fill');\n                if (currentFill) {\n                    return currentFill;\n                }\n                return 'none';\n            })\n            .on('click', function (d) {\n                return _chart.onClick(d, layerIndex);\n            });\n\n        dc.transition(paths, _chart.transitionDuration(), _chart.transitionDelay()).attr('fill', function (d, i) {\n            return _chart.getColor(data[geoJson(layerIndex).keyAccessor(d)], i);\n        });\n    }\n\n    _chart.onClick = function (d, layerIndex) {\n        var selectedRegion = geoJson(layerIndex).keyAccessor(d);\n        dc.events.trigger(function () {\n            _chart.filter(selectedRegion);\n            _chart.redrawGroup();\n        });\n    };\n\n    function renderTitle (regionG, layerIndex, data) {\n        if (_chart.renderTitle()) {\n            regionG.selectAll('title').text(function (d) {\n                var key = getKey(layerIndex, d);\n                var value = data[key];\n                return _chart.title()({key: key, value: value});\n            });\n        }\n    }\n\n    _chart._doRedraw = function () {\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n            plotData(layerIndex);\n            if (_projectionFlag) {\n                _chart.svg().selectAll('g.' + geoJson(layerIndex).name + ' path').attr('d', _geoPath);\n            }\n        }\n        _projectionFlag = false;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Use this function to insert a new GeoJson map layer. This function can be invoked multiple times\n     * if you have multiple GeoJson data layers to render on top of each other. If you overlay multiple\n     * layers with the same name the new overlay will override the existing one.\n     * @method overlayGeoJson\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link http://geojson.org/ GeoJSON}\n     * @see {@link https://github.com/topojson/topojson/wiki TopoJSON}\n     * @see {@link https://github.com/topojson/topojson-1.x-api-reference/blob/master/API-Reference.md#wiki-feature topojson.feature}\n     * @example\n     * // insert a layer for rendering US states\n     * chart.overlayGeoJson(statesJson.features, 'state', function(d) {\n     *      return d.properties.name;\n     * });\n     * @param {geoJson} json - a geojson feed\n     * @param {String} name - name of the layer\n     * @param {Function} keyAccessor - accessor function used to extract 'key' from the GeoJson data. The key extracted by\n     * this function should match the keys returned by the crossfilter groups.\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.overlayGeoJson = function (json, name, keyAccessor) {\n        for (var i = 0; i < _geoJsons.length; ++i) {\n            if (_geoJsons[i].name === name) {\n                _geoJsons[i].data = json;\n                _geoJsons[i].keyAccessor = keyAccessor;\n                return _chart;\n            }\n        }\n        _geoJsons.push({name: name, data: json, keyAccessor: keyAccessor});\n        return _chart;\n    };\n\n    /**\n     * Set custom geo projection function. See the available\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3 geo projection functions}.\n     * @method projection\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3.geo.projection}\n     * @see {@link https://github.com/d3/d3-geo-projection Extended d3.geo.projection}\n     * @param {d3.projection} [projection=d3.geo.albersUsa()]\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.projection = function (projection) {\n        _geoPath.projection(projection);\n        _projectionFlag = true;\n        return _chart;\n    };\n\n    /**\n     * Returns all GeoJson layers currently registered with this chart. The returned array is a\n     * reference to this chart's internal data structure, so any modification to this array will also\n     * modify this chart's internal registration.\n     * @method geoJsons\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @returns {Array<{name:String, data: Object, accessor: Function}>}\n     */\n    _chart.geoJsons = function () {\n        return _geoJsons;\n    };\n\n    /**\n     * Returns the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path} object used to\n     * render the projection and features.  Can be useful for figuring out the bounding box of the\n     * feature set and thus a way to calculate scale and translation for the projection.\n     * @method geoPath\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path}\n     * @returns {d3.geo.path}\n     */\n    _chart.geoPath = function () {\n        return _geoPath;\n    };\n\n    /**\n     * Remove a GeoJson layer from this chart by name\n     * @method removeGeoJson\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @param {String} name\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.removeGeoJson = function (name) {\n        var geoJsons = [];\n\n        for (var i = 0; i < _geoJsons.length; ++i) {\n            var layer = _geoJsons[i];\n            if (layer.name !== name) {\n                geoJsons.push(layer);\n            }\n        }\n\n        _geoJsons = geoJsons;\n\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The bubble overlay chart is quite different from the typical bubble chart. With the bubble overlay\n * chart you can arbitrarily place bubbles on an existing svg or bitmap image, thus changing the\n * typical x and y positioning while retaining the capability to visualize data using bubble radius\n * and coloring.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class bubbleOverlay\n * @memberof dc\n * @mixes dc.bubbleMixin\n * @mixes dc.baseMixin\n * @example\n * // create a bubble overlay chart on top of the '#chart-container1 svg' element using the default global chart group\n * var bubbleChart1 = dc.bubbleOverlayChart('#chart-container1').svg(d3.select('#chart-container1 svg'));\n * // create a bubble overlay chart on top of the '#chart-container2 svg' element using chart group A\n * var bubbleChart2 = dc.compositeChart('#chart-container2', 'chartGroupA').svg(d3.select('#chart-container2 svg'));\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.bubbleOverlay}\n */\ndc.bubbleOverlay = function (parent, chartGroup) {\n    var BUBBLE_OVERLAY_CLASS = 'bubble-overlay';\n    var BUBBLE_NODE_CLASS = 'node';\n    var BUBBLE_CLASS = 'bubble';\n\n    /**\n     * **mandatory**\n     *\n     * Set the underlying svg image element. Unlike other dc charts this chart will not generate a svg\n     * element; therefore the bubble overlay chart will not work if this function is not invoked. If the\n     * underlying image is a bitmap, then an empty svg will need to be created on top of the image.\n     * @method svg\n     * @memberof dc.bubbleOverlay\n     * @instance\n     * @example\n     * // set up underlying svg element\n     * chart.svg(d3.select('#chart svg'));\n     * @param {SVGElement|d3.selection} [imageElement]\n     * @returns {dc.bubbleOverlay}\n     */\n    var _chart = dc.bubbleMixin(dc.baseMixin({}));\n    var _g;\n    var _points = [];\n\n    _chart.transitionDuration(750);\n\n    _chart.transitionDelay(0);\n\n    _chart.radiusValueAccessor(function (d) {\n        return d.value;\n    });\n\n    /**\n     * **mandatory**\n     *\n     * Set up a data point on the overlay. The name of a data point should match a specific 'key' among\n     * data groups generated using keyAccessor.  If a match is found (point name <-> data group key)\n     * then a bubble will be generated at the position specified by the function. x and y\n     * value specified here are relative to the underlying svg.\n     * @method point\n     * @memberof dc.bubbleOverlay\n     * @instance\n     * @param {String} name\n     * @param {Number} x\n     * @param {Number} y\n     * @returns {dc.bubbleOverlay}\n     */\n    _chart.point = function (name, x, y) {\n        _points.push({name: name, x: x, y: y});\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        _g = initOverlayG();\n\n        _chart.r().range([_chart.MIN_RADIUS, _chart.width() * _chart.maxBubbleRelativeSize()]);\n\n        initializeBubbles();\n\n        _chart.fadeDeselectedArea();\n\n        return _chart;\n    };\n\n    function initOverlayG () {\n        _g = _chart.select('g.' + BUBBLE_OVERLAY_CLASS);\n        if (_g.empty()) {\n            _g = _chart.svg().append('g').attr('class', BUBBLE_OVERLAY_CLASS);\n        }\n        return _g;\n    }\n\n    function initializeBubbles () {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n            var nodeG = getNodeG(point, data);\n\n            var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n\n            if (circle.empty()) {\n                circle = nodeG.append('circle')\n                    .attr('class', BUBBLE_CLASS)\n                    .attr('r', 0)\n                    .attr('fill', _chart.getColor)\n                    .on('click', _chart.onClick);\n            }\n\n            dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('r', function (d) {\n                    return _chart.bubbleR(d);\n                });\n\n            _chart._doRenderLabel(nodeG);\n\n            _chart._doRenderTitles(nodeG);\n        });\n    }\n\n    function mapData () {\n        var data = {};\n        _chart.data().forEach(function (datum) {\n            data[_chart.keyAccessor()(datum)] = datum;\n        });\n        return data;\n    }\n\n    function getNodeG (point, data) {\n        var bubbleNodeClass = BUBBLE_NODE_CLASS + ' ' + dc.utils.nameToId(point.name);\n\n        var nodeG = _g.select('g.' + dc.utils.nameToId(point.name));\n\n        if (nodeG.empty()) {\n            nodeG = _g.append('g')\n                .attr('class', bubbleNodeClass)\n                .attr('transform', 'translate(' + point.x + ',' + point.y + ')');\n        }\n\n        nodeG.datum(data[point.name]);\n\n        return nodeG;\n    }\n\n    _chart._doRedraw = function () {\n        updateBubbles();\n\n        _chart.fadeDeselectedArea();\n\n        return _chart;\n    };\n\n    function updateBubbles () {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n            var nodeG = getNodeG(point, data);\n\n            var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n\n            dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('r', function (d) {\n                    return _chart.bubbleR(d);\n                })\n                .attr('fill', _chart.getColor);\n\n            _chart.doUpdateLabels(nodeG);\n\n            _chart.doUpdateTitles(nodeG);\n        });\n    }\n\n    _chart.debug = function (flag) {\n        if (flag) {\n            var debugG = _chart.select('g.' + dc.constants.DEBUG_GROUP_CLASS);\n\n            if (debugG.empty()) {\n                debugG = _chart.svg()\n                    .append('g')\n                    .attr('class', dc.constants.DEBUG_GROUP_CLASS);\n            }\n\n            var debugText = debugG.append('text')\n                .attr('x', 10)\n                .attr('y', 20);\n\n            debugG\n                .append('rect')\n                .attr('width', _chart.width())\n                .attr('height', _chart.height())\n                .on('mousemove', function () {\n                    var position = d3.mouse(debugG.node());\n                    var msg = position[0] + ', ' + position[1];\n                    debugText.text(msg);\n                });\n        } else {\n            _chart.selectAll('.debug').remove();\n        }\n\n        return _chart;\n    };\n\n    _chart.anchor(parent, chartGroup);\n\n    return _chart;\n};\n\n/**\n * Concrete row chart implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class rowChart\n * @memberof dc\n * @mixes dc.capMixin\n * @mixes dc.marginMixin\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a row chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.rowChart('#chart-container1');\n * // create a row chart under #chart-container2 element using chart group A\n * var chart2 = dc.rowChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.rowChart}\n */\ndc.rowChart = function (parent, chartGroup) {\n\n    var _g;\n\n    var _labelOffsetX = 10;\n    var _labelOffsetY = 15;\n    var _hasLabelOffsetY = false;\n    var _dyOffset = '0.35em';  // this helps center labels https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#svg_text\n    var _titleLabelOffsetX = 2;\n\n    var _gap = 5;\n\n    var _fixedBarHeight = false;\n    var _rowCssClass = 'row';\n    var _titleRowCssClass = 'titlerow';\n    var _renderTitleLabel = false;\n\n    var _chart = dc.capMixin(dc.marginMixin(dc.colorMixin(dc.baseMixin({}))));\n\n    var _x;\n\n    var _elasticX;\n\n    var _xAxis = d3.svg.axis().orient('bottom');\n\n    var _rowData;\n\n    _chart.rowsCap = _chart.cap;\n\n    function calculateAxisScale () {\n        if (!_x || _elasticX) {\n            var extent = d3.extent(_rowData, _chart.cappedValueAccessor);\n            if (extent[0] > 0) {\n                extent[0] = 0;\n            }\n            if (extent[1] < 0) {\n                extent[1] = 0;\n            }\n            _x = d3.scale.linear().domain(extent)\n                .range([0, _chart.effectiveWidth()]);\n        }\n        _xAxis.scale(_x);\n    }\n\n    function drawAxis () {\n        var axisG = _g.select('g.axis');\n\n        calculateAxisScale();\n\n        if (axisG.empty()) {\n            axisG = _g.append('g').attr('class', 'axis');\n        }\n        axisG.attr('transform', 'translate(0, ' + _chart.effectiveHeight() + ')');\n\n        dc.transition(axisG, _chart.transitionDuration(), _chart.transitionDelay())\n            .call(_xAxis);\n    }\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg()\n            .append('g')\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n\n        drawChart();\n\n        return _chart;\n    };\n\n    _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n    });\n\n    _chart.label(_chart.cappedKeyAccessor);\n\n    /**\n     * Gets or sets the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}.\n     * @method x\n     * @memberof dc.rowChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}\n     * @param {d3.scale} [scale]\n     * @returns {d3.scale|dc.rowChart}\n     */\n    _chart.x = function (scale) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = scale;\n        return _chart;\n    };\n\n    function drawGridLines () {\n        _g.selectAll('g.tick')\n            .select('line.grid-line')\n            .remove();\n\n        _g.selectAll('g.tick')\n            .append('line')\n            .attr('class', 'grid-line')\n            .attr('x1', 0)\n            .attr('y1', 0)\n            .attr('x2', 0)\n            .attr('y2', function () {\n                return -_chart.effectiveHeight();\n            });\n    }\n\n    function drawChart () {\n        _rowData = _chart.data();\n\n        drawAxis();\n        drawGridLines();\n\n        var rows = _g.selectAll('g.' + _rowCssClass)\n            .data(_rowData);\n\n        createElements(rows);\n        removeElements(rows);\n        updateElements(rows);\n    }\n\n    function createElements (rows) {\n        var rowEnter = rows.enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return _rowCssClass + ' _' + i;\n            });\n\n        rowEnter.append('rect').attr('width', 0);\n\n        createLabels(rowEnter);\n    }\n\n    function removeElements (rows) {\n        rows.exit().remove();\n    }\n\n    function rootValue () {\n        var root = _x(0);\n        return (root === -Infinity || root !== root) ? _x(1) : root;\n    }\n\n    function updateElements (rows) {\n        var n = _rowData.length;\n\n        var height;\n        if (!_fixedBarHeight) {\n            height = (_chart.effectiveHeight() - (n + 1) * _gap) / n;\n        } else {\n            height = _fixedBarHeight;\n        }\n\n        // vertically align label in center unless they override the value via property setter\n        if (!_hasLabelOffsetY) {\n            _labelOffsetY = height / 2;\n        }\n\n        var rect = rows.attr('transform', function (d, i) {\n                return 'translate(0,' + ((i + 1) * _gap + i * height) + ')';\n            }).select('rect')\n            .attr('height', height)\n            .attr('fill', _chart.getColor)\n            .on('click', onClick)\n            .classed('deselected', function (d) {\n                return (_chart.hasFilter()) ? !isSelectedRow(d) : false;\n            })\n            .classed('selected', function (d) {\n                return (_chart.hasFilter()) ? isSelectedRow(d) : false;\n            });\n\n        dc.transition(rect, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('width', function (d) {\n                return Math.abs(rootValue() - _x(_chart.valueAccessor()(d)));\n            })\n            .attr('transform', translateX);\n\n        createTitles(rows);\n        updateLabels(rows);\n    }\n\n    function createTitles (rows) {\n        if (_chart.renderTitle()) {\n            rows.select('title').remove();\n            rows.append('title').text(_chart.title());\n        }\n    }\n\n    function createLabels (rowEnter) {\n        if (_chart.renderLabel()) {\n            rowEnter.append('text')\n                .on('click', onClick);\n        }\n        if (_chart.renderTitleLabel()) {\n            rowEnter.append('text')\n                .attr('class', _titleRowCssClass)\n                .on('click', onClick);\n        }\n    }\n\n    function updateLabels (rows) {\n        if (_chart.renderLabel()) {\n            var lab = rows.select('text')\n                .attr('x', _labelOffsetX)\n                .attr('y', _labelOffsetY)\n                .attr('dy', _dyOffset)\n                .on('click', onClick)\n                .attr('class', function (d, i) {\n                    return _rowCssClass + ' _' + i;\n                })\n                .text(function (d) {\n                    return _chart.label()(d);\n                });\n            dc.transition(lab, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', translateX);\n        }\n        if (_chart.renderTitleLabel()) {\n            var titlelab = rows.select('.' + _titleRowCssClass)\n                    .attr('x', _chart.effectiveWidth() - _titleLabelOffsetX)\n                    .attr('y', _labelOffsetY)\n                    .attr('dy', _dyOffset)\n                    .attr('text-anchor', 'end')\n                    .on('click', onClick)\n                    .attr('class', function (d, i) {\n                        return _titleRowCssClass + ' _' + i ;\n                    })\n                    .text(function (d) {\n                        return _chart.title()(d);\n                    });\n            dc.transition(titlelab, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', translateX);\n        }\n    }\n\n    /**\n     * Turn on/off Title label rendering (values) using SVG style of text-anchor 'end'.\n     * @method renderTitleLabel\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Boolean} [renderTitleLabel=false]\n     * @returns {Boolean|dc.rowChart}\n     */\n    _chart.renderTitleLabel = function (renderTitleLabel) {\n        if (!arguments.length) {\n            return _renderTitleLabel;\n        }\n        _renderTitleLabel = renderTitleLabel;\n        return _chart;\n    };\n\n    function onClick (d) {\n        _chart.onClick(d);\n    }\n\n    function translateX (d) {\n        var x = _x(_chart.cappedValueAccessor(d)),\n            x0 = rootValue(),\n            s = x > x0 ? x0 : x;\n        return 'translate(' + s + ',0)';\n    }\n\n    _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n    };\n\n    /**\n     * Get the x axis for the row chart instance.  Note: not settable for row charts.\n     * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object}\n     * documention for more information.\n     * @method xAxis\n     * @memberof dc.rowChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function (v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * @returns {d3.svg.axis}\n     */\n    _chart.xAxis = function () {\n        return _xAxis;\n    };\n\n    /**\n     * Get or set the fixed bar height. Default is [false] which will auto-scale bars.\n     * For example, if you want to fix the height for a specific number of bars (useful in TopN charts)\n     * you could fix height as follows (where count = total number of bars in your TopN and gap is\n     * your vertical gap space).\n     * @method fixedBarHeight\n     * @memberof dc.rowChart\n     * @instance\n     * @example\n     * chart.fixedBarHeight( chartheight - (count + 1) * gap / count);\n     * @param {Boolean|Number} [fixedBarHeight=false]\n     * @returns {Boolean|Number|dc.rowChart}\n     */\n    _chart.fixedBarHeight = function (fixedBarHeight) {\n        if (!arguments.length) {\n            return _fixedBarHeight;\n        }\n        _fixedBarHeight = fixedBarHeight;\n        return _chart;\n    };\n\n    /**\n     * Get or set the vertical gap space between rows on a particular row chart instance.\n     * @method gap\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [gap=5]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _chart;\n    };\n\n    /**\n     * Get or set the elasticity on x axis. If this attribute is set to true, then the x axis will rescle to auto-fit the\n     * data range when filtered.\n     * @method elasticX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Boolean} [elasticX]\n     * @returns {Boolean|dc.rowChart}\n     */\n    _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n            return _elasticX;\n        }\n        _elasticX = elasticX;\n        return _chart;\n    };\n\n    /**\n     * Get or set the x offset (horizontal space to the top left corner of a row) for labels on a particular row chart.\n     * @method labelOffsetX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [labelOffsetX=10]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.labelOffsetX = function (labelOffsetX) {\n        if (!arguments.length) {\n            return _labelOffsetX;\n        }\n        _labelOffsetX = labelOffsetX;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y offset (vertical space to the top left corner of a row) for labels on a particular row chart.\n     * @method labelOffsetY\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [labelOffsety=15]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.labelOffsetY = function (labelOffsety) {\n        if (!arguments.length) {\n            return _labelOffsetY;\n        }\n        _labelOffsetY = labelOffsety;\n        _hasLabelOffsetY = true;\n        return _chart;\n    };\n\n    /**\n     * Get of set the x offset (horizontal space between right edge of row and right edge or text.\n     * @method titleLabelOffsetX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [titleLabelOffsetX=2]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.titleLabelOffsetX = function (titleLabelOffsetX) {\n        if (!arguments.length) {\n            return _titleLabelOffsetX;\n        }\n        _titleLabelOffsetX = titleLabelOffsetX;\n        return _chart;\n    };\n\n    function isSelectedRow (d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d));\n    }\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Legend is a attachable widget that can be added to other dc charts to render horizontal legend\n * labels.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class legend\n * @memberof dc\n * @example\n * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n * @returns {dc.legend}\n */\ndc.legend = function () {\n    var LABEL_GAP = 2;\n\n    var _legend = {},\n        _parent,\n        _x = 0,\n        _y = 0,\n        _itemHeight = 12,\n        _gap = 5,\n        _horizontal = false,\n        _legendWidth = 560,\n        _itemWidth = 70,\n        _autoItemWidth = false,\n        _legendText = dc.pluck('name'),\n        _maxItems;\n\n    var _g;\n\n    _legend.parent = function (p) {\n        if (!arguments.length) {\n            return _parent;\n        }\n        _parent = p;\n        return _legend;\n    };\n\n    _legend.render = function () {\n        _parent.svg().select('g.dc-legend').remove();\n        _g = _parent.svg().append('g')\n            .attr('class', 'dc-legend')\n            .attr('transform', 'translate(' + _x + ',' + _y + ')');\n        var legendables = _parent.legendables();\n\n        if (_maxItems !== undefined) {\n            legendables = legendables.slice(0, _maxItems);\n        }\n\n        var itemEnter = _g.selectAll('g.dc-legend-item')\n            .data(legendables)\n            .enter()\n            .append('g')\n            .attr('class', 'dc-legend-item')\n            .on('mouseover', function (d) {\n                _parent.legendHighlight(d);\n            })\n            .on('mouseout', function (d) {\n                _parent.legendReset(d);\n            })\n            .on('click', function (d) {\n                d.chart.legendToggle(d);\n            });\n\n        _g.selectAll('g.dc-legend-item')\n            .classed('fadeout', function (d) {\n                return d.chart.isLegendableHidden(d);\n            });\n\n        if (legendables.some(dc.pluck('dashstyle'))) {\n            itemEnter\n                .append('line')\n                .attr('x1', 0)\n                .attr('y1', _itemHeight / 2)\n                .attr('x2', _itemHeight)\n                .attr('y2', _itemHeight / 2)\n                .attr('stroke-width', 2)\n                .attr('stroke-dasharray', dc.pluck('dashstyle'))\n                .attr('stroke', dc.pluck('color'));\n        } else {\n            itemEnter\n                .append('rect')\n                .attr('width', _itemHeight)\n                .attr('height', _itemHeight)\n                .attr('fill', function (d) {return d ? d.color : 'blue';});\n        }\n\n        itemEnter.append('text')\n                .text(_legendText)\n                .attr('x', _itemHeight + LABEL_GAP)\n                .attr('y', function () {\n                    return _itemHeight / 2 + (this.clientHeight ? this.clientHeight : 13) / 2 - 2;\n                });\n\n        var _cumulativeLegendTextWidth = 0;\n        var row = 0;\n        itemEnter.attr('transform', function (d, i) {\n            if (_horizontal) {\n                var itemWidth   = _autoItemWidth === true ? this.getBBox().width + _gap : _itemWidth;\n                if ((_cumulativeLegendTextWidth + itemWidth) > _legendWidth && _cumulativeLegendTextWidth > 0) {\n                    ++row;\n                    _cumulativeLegendTextWidth = 0;\n                }\n                var translateBy = 'translate(' + _cumulativeLegendTextWidth + ',' + row * legendItemHeight() + ')';\n                _cumulativeLegendTextWidth += itemWidth;\n                return translateBy;\n            } else {\n                return 'translate(0,' + i * legendItemHeight() + ')';\n            }\n        });\n    };\n\n    function legendItemHeight () {\n        return _gap + _itemHeight;\n    }\n\n    /**\n     * Set or get x coordinate for legend widget.\n     * @method x\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [x=0]\n     * @returns {Number|dc.legend}\n     */\n    _legend.x = function (x) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = x;\n        return _legend;\n    };\n\n    /**\n     * Set or get y coordinate for legend widget.\n     * @method y\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [y=0]\n     * @returns {Number|dc.legend}\n     */\n    _legend.y = function (y) {\n        if (!arguments.length) {\n            return _y;\n        }\n        _y = y;\n        return _legend;\n    };\n\n    /**\n     * Set or get gap between legend items.\n     * @method gap\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [gap=5]\n     * @returns {Number|dc.legend}\n     */\n    _legend.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _legend;\n    };\n\n    /**\n     * Set or get legend item height.\n     * @method itemHeight\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [itemHeight=12]\n     * @returns {Number|dc.legend}\n     */\n    _legend.itemHeight = function (itemHeight) {\n        if (!arguments.length) {\n            return _itemHeight;\n        }\n        _itemHeight = itemHeight;\n        return _legend;\n    };\n\n    /**\n     * Position legend horizontally instead of vertically.\n     * @method horizontal\n     * @memberof dc.legend\n     * @instance\n     * @param  {Boolean} [horizontal=false]\n     * @returns {Boolean|dc.legend}\n     */\n    _legend.horizontal = function (horizontal) {\n        if (!arguments.length) {\n            return _horizontal;\n        }\n        _horizontal = horizontal;\n        return _legend;\n    };\n\n    /**\n     * Maximum width for horizontal legend.\n     * @method legendWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [legendWidth=500]\n     * @returns {Number|dc.legend}\n     */\n    _legend.legendWidth = function (legendWidth) {\n        if (!arguments.length) {\n            return _legendWidth;\n        }\n        _legendWidth = legendWidth;\n        return _legend;\n    };\n\n    /**\n     * Legend item width for horizontal legend.\n     * @method itemWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [itemWidth=70]\n     * @returns {Number|dc.legend}\n     */\n    _legend.itemWidth = function (itemWidth) {\n        if (!arguments.length) {\n            return _itemWidth;\n        }\n        _itemWidth = itemWidth;\n        return _legend;\n    };\n\n    /**\n     * Turn automatic width for legend items on or off. If true, {@link dc.legend#itemWidth itemWidth} is ignored.\n     * This setting takes into account the {@link dc.legend#gap gap}.\n     * @method autoItemWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Boolean} [autoItemWidth=false]\n     * @returns {Boolean|dc.legend}\n     */\n    _legend.autoItemWidth = function (autoItemWidth) {\n        if (!arguments.length) {\n            return _autoItemWidth;\n        }\n        _autoItemWidth = autoItemWidth;\n        return _legend;\n    };\n\n    /**\n     * Set or get the legend text function. The legend widget uses this function to render the legend\n     * text for each item. If no function is specified the legend widget will display the names\n     * associated with each group.\n     * @method legendText\n     * @memberof dc.legend\n     * @instance\n     * @param  {Function} [legendText]\n     * @returns {Function|dc.legend}\n     * @example\n     * // default legendText\n     * legend.legendText(dc.pluck('name'))\n     *\n     * // create numbered legend items\n     * chart.legend(dc.legend().legendText(function(d, i) { return i + '. ' + d.name; }))\n     *\n     * // create legend displaying group counts\n     * chart.legend(dc.legend().legendText(function(d) { return d.name + ': ' d.data; }))\n     **/\n    _legend.legendText = function (legendText) {\n        if (!arguments.length) {\n            return _legendText;\n        }\n        _legendText = legendText;\n        return _legend;\n    };\n\n    /**\n     * Maximum number of legend items to display\n     * @method maxItems\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [maxItems]\n     * @return {dc.legend}\n     */\n    _legend.maxItems = function (maxItems) {\n        if (!arguments.length) {\n            return _maxItems;\n        }\n        _maxItems = dc.utils.isNumber(maxItems) ? maxItems : undefined;\n        return _legend;\n    };\n\n    return _legend;\n};\n\n/**\n * A scatter plot chart\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/scatter.html Scatter Chart}\n * - {@link http://dc-js.github.io/dc.js/examples/multi-scatter.html Multi-Scatter Chart}\n * @class scatterPlot\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a scatter plot under #chart-container1 element using the default global chart group\n * var chart1 = dc.scatterPlot('#chart-container1');\n * // create a scatter plot under #chart-container2 element using chart group A\n * var chart2 = dc.scatterPlot('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.scatterPlot(compositeChart);\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.scatterPlot}\n */\ndc.scatterPlot = function (parent, chartGroup) {\n    var _chart = dc.coordinateGridMixin({});\n    var _symbol = d3.svg.symbol();\n\n    var _existenceAccessor = function (d) { return d.value; };\n\n    var originalKeyAccessor = _chart.keyAccessor();\n    _chart.keyAccessor(function (d) { return originalKeyAccessor(d)[0]; });\n    _chart.valueAccessor(function (d) { return originalKeyAccessor(d)[1]; });\n    _chart.colorAccessor(function () { return _chart._groupName; });\n\n    _chart.title(function (d) {\n        // this basically just counteracts the setting of its own key/value accessors\n        // see https://github.com/dc-js/dc.js/issues/702\n        return _chart.keyAccessor()(d) + ',' + _chart.valueAccessor()(d) + ': ' +\n            _chart.existenceAccessor()(d);\n    });\n\n    var _locator = function (d) {\n        return 'translate(' + _chart.x()(_chart.keyAccessor()(d)) + ',' +\n                              _chart.y()(_chart.valueAccessor()(d)) + ')';\n    };\n\n    var _highlightedSize = 7;\n    var _symbolSize = 5;\n    var _excludedSize = 3;\n    var _excludedColor = null;\n    var _excludedOpacity = 1.0;\n    var _emptySize = 0;\n    var _emptyOpacity = 0;\n    var _nonemptyOpacity = 1;\n    var _emptyColor = null;\n    var _filtered = [];\n\n    function elementSize (d, i) {\n        if (!_existenceAccessor(d)) {\n            return Math.pow(_emptySize, 2);\n        } else if (_filtered[i]) {\n            return Math.pow(_symbolSize, 2);\n        } else {\n            return Math.pow(_excludedSize, 2);\n        }\n    }\n    _symbol.size(elementSize);\n\n    dc.override(_chart, '_filter', function (filter) {\n        if (!arguments.length) {\n            return _chart.__filter();\n        }\n\n        return _chart.__filter(dc.filters.RangedTwoDimensionalFilter(filter));\n    });\n\n    _chart.plotData = function () {\n        var symbols = _chart.chartBodyG().selectAll('path.symbol')\n            .data(_chart.data());\n\n        symbols\n            .enter()\n        .append('path')\n            .attr('class', 'symbol')\n            .attr('opacity', 0)\n            .attr('fill', _chart.getColor)\n            .attr('transform', _locator);\n\n        symbols.call(renderTitles, _chart.data());\n\n        symbols.each(function (d, i) {\n            _filtered[i] = !_chart.filter() || _chart.filter().isFiltered([d.key[0], d.key[1]]);\n        });\n\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('opacity', function (d, i) {\n                if (!_existenceAccessor(d)) {\n                    return _emptyOpacity;\n                } else if (_filtered[i]) {\n                    return _nonemptyOpacity;\n                } else {\n                    return _chart.excludedOpacity();\n                }\n            })\n            .attr('fill', function (d, i) {\n                if (_emptyColor && !_existenceAccessor(d)) {\n                    return _emptyColor;\n                } else if (_chart.excludedColor() && !_filtered[i]) {\n                    return _chart.excludedColor();\n                } else {\n                    return _chart.getColor(d);\n                }\n            })\n            .attr('transform', _locator)\n            .attr('d', _symbol);\n\n        dc.transition(symbols.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('opacity', 0).remove();\n    };\n\n    function renderTitles (symbol, d) {\n        if (_chart.renderTitle()) {\n            symbol.selectAll('title').remove();\n            symbol.append('title').text(function (d) {\n                return _chart.title()(d);\n            });\n        }\n    }\n\n    /**\n     * Get or set the existence accessor.  If a point exists, it is drawn with\n     * {@link dc.scatterPlot#symbolSize symbolSize} radius and\n     * opacity 1; if it does not exist, it is drawn with\n     * {@link dc.scatterPlot#emptySize emptySize} radius and opacity 0. By default,\n     * the existence accessor checks if the reduced value is truthy.\n     * @method existenceAccessor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link dc.scatterPlot#symbolSize symbolSize}\n     * @see {@link dc.scatterPlot#emptySize emptySize}\n     * @example\n     * // default accessor\n     * chart.existenceAccessor(function (d) { return d.value; });\n     * @param {Function} [accessor]\n     * @returns {Function|dc.scatterPlot}\n     */\n    _chart.existenceAccessor = function (accessor) {\n        if (!arguments.length) {\n            return _existenceAccessor;\n        }\n        _existenceAccessor = accessor;\n        return this;\n    };\n\n    /**\n     * Get or set the symbol type used for each point. By default the symbol is a circle.\n     * Type can be a constant or an accessor.\n     * @method symbol\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_type d3.svg.symbol.type}\n     * @example\n     * // Circle type\n     * chart.symbol('circle');\n     * // Square type\n     * chart.symbol('square');\n     * @param {String|Function} [type='circle']\n     * @returns {String|Function|dc.scatterPlot}\n     */\n    _chart.symbol = function (type) {\n        if (!arguments.length) {\n            return _symbol.type();\n        }\n        _symbol.type(type);\n        return _chart;\n    };\n\n    /**\n     * Get or set the symbol generator. By default `dc.scatterPlot` will use\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol()}\n     * to generate symbols. `dc.scatterPlot` will set the\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size size accessor}\n     * on the symbol generator.\n     * @method customSymbol\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol}\n     * @see {@link https://stackoverflow.com/questions/25332120/create-additional-d3-js-symbols Create additional D3.js symbols}\n     * @param {String|Function} [customSymbol=d3.svg.symbol()]\n     * @returns {String|Function|dc.scatterPlot}\n     */\n    _chart.customSymbol = function (customSymbol) {\n        if (!arguments.length) {\n            return _symbol;\n        }\n        _symbol = customSymbol;\n        _symbol.size(elementSize);\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for symbols.\n     * @method symbolSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [symbolSize=3]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.symbolSize = function (symbolSize) {\n        if (!arguments.length) {\n            return _symbolSize;\n        }\n        _symbolSize = symbolSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for highlighted symbols.\n     * @method highlightedSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [highlightedSize=5]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.highlightedSize = function (highlightedSize) {\n        if (!arguments.length) {\n            return _highlightedSize;\n        }\n        _highlightedSize = highlightedSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get size for symbols excluded from this chart's filter. If null, no\n     * special size is applied for symbols based on their filter status.\n     * @method excludedSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [excludedSize=null]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedSize = function (excludedSize) {\n        if (!arguments.length) {\n            return _excludedSize;\n        }\n        _excludedSize = excludedSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get color for symbols excluded from this chart's filter. If null, no\n     * special color is applied for symbols based on their filter status.\n     * @method excludedColor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [excludedColor=null]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedColor = function (excludedColor) {\n        if (!arguments.length) {\n            return _excludedColor;\n        }\n        _excludedColor = excludedColor;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols excluded from this chart's filter.\n     * @method excludedOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [excludedOpacity=1.0]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedOpacity = function (excludedOpacity) {\n        if (!arguments.length) {\n            return _excludedOpacity;\n        }\n        _excludedOpacity = excludedOpacity;\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for symbols when the group is empty.\n     * @method emptySize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [emptySize=0]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.hiddenSize = _chart.emptySize = function (emptySize) {\n        if (!arguments.length) {\n            return _emptySize;\n        }\n        _emptySize = emptySize;\n        return _chart;\n    };\n\n    /**\n     * Set or get color for symbols when the group is empty. If null, just use the\n     * {@link dc.colorMixin#colors colorMixin.colors} color scale zero value.\n     * @name emptyColor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {String} [emptyColor=null]\n     * @return {String}\n     * @return {dc.scatterPlot}/\n     */\n    _chart.emptyColor = function (emptyColor) {\n        if (!arguments.length) {\n            return _emptyColor;\n        }\n        _emptyColor = emptyColor;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols when the group is empty.\n     * @name emptyOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [emptyOpacity=0]\n     * @return {Number}\n     * @return {dc.scatterPlot}\n     */\n    _chart.emptyOpacity = function (emptyOpacity) {\n        if (!arguments.length) {\n            return _emptyOpacity;\n        }\n        _emptyOpacity = emptyOpacity;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols when the group is not empty.\n     * @name nonemptyOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [nonemptyOpacity=1]\n     * @return {Number}\n     * @return {dc.scatterPlot}\n     */\n    _chart.nonemptyOpacity = function (nonemptyOpacity) {\n        if (!arguments.length) {\n            return _emptyOpacity;\n        }\n        _nonemptyOpacity = nonemptyOpacity;\n        return _chart;\n    };\n\n    _chart.legendables = function () {\n        return [{chart: _chart, name: _chart._groupName, color: _chart.getColor()}];\n    };\n\n    _chart.legendHighlight = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n            return symbol.attr('fill') === d.color;\n        }, _highlightedSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', true);\n    };\n\n    _chart.legendReset = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n            return symbol.attr('fill') === d.color;\n        }, _symbolSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', false);\n    };\n\n    function resizeSymbolsWhere (condition, size) {\n        var symbols = _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return condition(d3.select(this));\n        });\n        var oldSize = _symbol.size();\n        _symbol.size(Math.pow(size, 2));\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay()).attr('d', _symbol);\n        _symbol.size(oldSize);\n    }\n\n    _chart.setHandlePaths = function () {\n        // no handle paths for poly-brushes\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n        if (_chart.round()) {\n            extent[0] = extent[0].map(_chart.round());\n            extent[1] = extent[1].map(_chart.round());\n\n            _chart.g().select('.brush')\n                .call(_chart.brush().extent(extent));\n        }\n        return extent;\n    };\n\n    _chart.brushIsEmpty = function (extent) {\n        return _chart.brush().empty() || !extent || extent[0][0] >= extent[1][0] || extent[0][1] >= extent[1][1];\n    };\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n\n        _chart.redrawBrush(_chart.g());\n\n        if (_chart.brushIsEmpty(extent)) {\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.redrawGroup();\n            });\n\n        } else {\n            var ranged2DFilter = dc.filters.RangedTwoDimensionalFilter(extent);\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.filter(ranged2DFilter);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n\n        }\n    };\n\n    _chart.setBrushY = function (gBrush) {\n        gBrush.call(_chart.brush().y(_chart.y()));\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A display of a single numeric value.\n * Unlike other charts, you do not need to set a dimension. Instead a group object must be provided and\n * a valueAccessor that returns a single value.\n * @class numberDisplay\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * // create a number display under #chart-container1 element using the default global chart group\n * var display1 = dc.numberDisplay('#chart-container1');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.numberDisplay}\n */\ndc.numberDisplay = function (parent, chartGroup) {\n    var SPAN_CLASS = 'number-display';\n    var _formatNumber = d3.format('.2s');\n    var _chart = dc.baseMixin({});\n    var _html = {one: '', some: '', none: ''};\n    var _lastValue;\n\n    // dimension not required\n    _chart._mandatoryAttributes(['group']);\n\n    // default to ordering by value, to emulate old group.top(1) behavior when multiple groups\n    _chart.ordering(function (kv) { return kv.value; });\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending on the number\n     * displayed.  The text `%number` will be replaced with the current value.\n     * - one: HTML template to use if the number is 1\n     * - zero: HTML template to use if the number is 0\n     * - some: HTML template to use otherwise\n     * @method html\n     * @memberof dc.numberDisplay\n     * @instance\n     * @example\n     * numberWidget.html({\n     *      one:'%number record',\n     *      some:'%number records',\n     *      none:'no records'})\n     * @param {{one:String, some:String, none:String}} [html={one: '', some: '', none: ''}]\n     * @returns {{one:String, some:String, none:String}|dc.numberDisplay}\n     */\n    _chart.html = function (html) {\n        if (!arguments.length) {\n            return _html;\n        }\n        if (html.none) {\n            _html.none = html.none;//if none available\n        } else if (html.one) {\n            _html.none = html.one;//if none not available use one\n        } else if (html.some) {\n            _html.none = html.some;//if none and one not available use some\n        }\n        if (html.one) {\n            _html.one = html.one;//if one available\n        } else if (html.some) {\n            _html.one = html.some;//if one not available use some\n        }\n        if (html.some) {\n            _html.some = html.some;//if some available\n        } else if (html.one) {\n            _html.some = html.one;//if some not available use one\n        }\n        return _chart;\n    };\n\n    /**\n     * Calculate and return the underlying value of the display.\n     * @method value\n     * @memberof dc.numberDisplay\n     * @instance\n     * @returns {Number}\n     */\n    _chart.value = function () {\n        return _chart.data();\n    };\n\n    function maxBin (all) {\n        if (!all.length) {\n            return null;\n        }\n        var sorted = _chart._computeOrderedGroups(all);\n        return sorted[sorted.length - 1];\n    }\n    _chart.data(function (group) {\n        var valObj = group.value ? group.value() : maxBin(group.all());\n        return _chart.valueAccessor()(valObj);\n    });\n\n    _chart.transitionDuration(250); // good default\n    _chart.transitionDelay(0);\n\n    _chart._doRender = function () {\n        var newValue = _chart.value(),\n            span = _chart.selectAll('.' + SPAN_CLASS);\n\n        if (span.empty()) {\n            span = span.data([0])\n                .enter()\n                .append('span')\n                .attr('class', SPAN_CLASS);\n        }\n\n        span.transition()\n            .duration(_chart.transitionDuration())\n            .delay(_chart.transitionDelay())\n            .ease('quad-out-in')\n            .tween('text', function () {\n                // [XA] don't try and interpolate from Infinity, else this breaks.\n                var interpStart = isFinite(_lastValue) ? _lastValue : 0;\n                var interp = d3.interpolateNumber(interpStart || 0, newValue);\n                _lastValue = newValue;\n                return function (t) {\n                    var html = null, num = _chart.formatNumber()(interp(t));\n                    if (newValue === 0 && (_html.none !== '')) {\n                        html = _html.none;\n                    } else if (newValue === 1 && (_html.one !== '')) {\n                        html = _html.one;\n                    } else if (_html.some !== '') {\n                        html = _html.some;\n                    }\n                    this.innerHTML = html ? html.replace('%number', num) : num;\n                };\n            });\n    };\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set a function to format the value for the display.\n     * @method formatNumber\n     * @memberof dc.numberDisplay\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n     * @param {Function} [formatter=d3.format('.2s')]\n     * @returns {Function|dc.numberDisplay}\n     */\n    _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n            return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A heat map is matrix that represents the values of two dimensions of data using colors.\n * @class heatMap\n * @memberof dc\n * @mixes dc.colorMixin\n * @mixes dc.marginMixin\n * @mixes dc.baseMixin\n * @example\n * // create a heat map under #chart-container1 element using the default global chart group\n * var heatMap1 = dc.heatMap('#chart-container1');\n * // create a heat map under #chart-container2 element using chart group A\n * var heatMap2 = dc.heatMap('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.heatMap}\n */\ndc.heatMap = function (parent, chartGroup) {\n\n    var DEFAULT_BORDER_RADIUS = 6.75;\n\n    var _chartBody;\n\n    var _cols;\n    var _rows;\n    var _colOrdering = d3.ascending;\n    var _rowOrdering = d3.ascending;\n    var _colScale = d3.scale.ordinal();\n    var _rowScale = d3.scale.ordinal();\n\n    var _xBorderRadius = DEFAULT_BORDER_RADIUS;\n    var _yBorderRadius = DEFAULT_BORDER_RADIUS;\n\n    var _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin({})));\n    _chart._mandatoryAttributes(['group']);\n    _chart.title(_chart.colorAccessor());\n\n    var _colsLabel = function (d) {\n        return d;\n    };\n    var _rowsLabel = function (d) {\n        return d;\n    };\n\n    /**\n     * Set or get the column label function. The chart class uses this function to render\n     * column labels on the X axis. It is passed the column name.\n     * @method colsLabel\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // the default label function just returns the name\n     * chart.colsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.colsLabel = function (labelFunction) {\n        if (!arguments.length) {\n            return _colsLabel;\n        }\n        _colsLabel = labelFunction;\n        return _chart;\n    };\n\n    /**\n     * Set or get the row label function. The chart class uses this function to render\n     * row labels on the Y axis. It is passed the row name.\n     * @method rowsLabel\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // the default label function just returns the name\n     * chart.rowsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.rowsLabel = function (labelFunction) {\n        if (!arguments.length) {\n            return _rowsLabel;\n        }\n        _rowsLabel = labelFunction;\n        return _chart;\n    };\n\n    var _xAxisOnClick = function (d) { filterAxis(0, d); };\n    var _yAxisOnClick = function (d) { filterAxis(1, d); };\n    var _boxOnClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    function filterAxis (axis, value) {\n        var cellsOnAxis = _chart.selectAll('.box-group').filter(function (d) {\n            return d.key[axis] === value;\n        });\n        var unfilteredCellsOnAxis = cellsOnAxis.filter(function (d) {\n            return !_chart.hasFilter(d.key);\n        });\n        dc.events.trigger(function () {\n            var selection = unfilteredCellsOnAxis.empty() ? cellsOnAxis : unfilteredCellsOnAxis;\n            var filters = selection.data().map(function (kv) {\n                return dc.filters.TwoDimensionalFilter(kv.key);\n            });\n            _chart._filter([filters]);\n            _chart.redrawGroup();\n        });\n    }\n\n    dc.override(_chart, 'filter', function (filter) {\n        if (!arguments.length) {\n            return _chart._filter();\n        }\n\n        return _chart._filter(dc.filters.TwoDimensionalFilter(filter));\n    });\n\n    /**\n     * Gets or sets the values used to create the rows of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the value accessor.\n     * @method rows\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Array<String|Number>} [rows]\n     * @returns {Array<String|Number>|dc.heatMap}\n     */\n\n    _chart.rows = function (rows) {\n        if (!arguments.length) {\n            return _rows;\n        }\n        _rows = rows;\n        return _chart;\n    };\n\n    /**\n     #### .rowOrdering([orderFunction])\n     Get or set an accessor to order the rows.  Default is d3.ascending.\n     */\n    _chart.rowOrdering = function (_) {\n        if (!arguments.length) {\n            return _rowOrdering;\n        }\n        _rowOrdering = _;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the keys used to create the columns of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the key accessor.\n     * @method cols\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Array<String|Number>} [cols]\n     * @returns {Array<String|Number>|dc.heatMap}\n     */\n    _chart.cols = function (cols) {\n        if (!arguments.length) {\n            return _cols;\n        }\n        _cols = cols;\n        return _chart;\n    };\n\n    /**\n     #### .colOrdering([orderFunction])\n     Get or set an accessor to order the cols.  Default is ascending.\n     */\n    _chart.colOrdering = function (_) {\n        if (!arguments.length) {\n            return _colOrdering;\n        }\n        _colOrdering = _;\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chartBody = _chart.svg()\n            .append('g')\n            .attr('class', 'heatmap')\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n\n        return _chart._doRedraw();\n    };\n\n    _chart._doRedraw = function () {\n        var data = _chart.data(),\n            rows = _chart.rows() || data.map(_chart.valueAccessor()),\n            cols = _chart.cols() || data.map(_chart.keyAccessor());\n        if (_rowOrdering) {\n            rows = rows.sort(_rowOrdering);\n        }\n        if (_colOrdering) {\n            cols = cols.sort(_colOrdering);\n        }\n        rows = _rowScale.domain(rows);\n        cols = _colScale.domain(cols);\n\n        var rowCount = rows.domain().length,\n            colCount = cols.domain().length,\n            boxWidth = Math.floor(_chart.effectiveWidth() / colCount),\n            boxHeight = Math.floor(_chart.effectiveHeight() / rowCount);\n\n        cols.rangeRoundBands([0, _chart.effectiveWidth()]);\n        rows.rangeRoundBands([_chart.effectiveHeight(), 0]);\n\n        var boxes = _chartBody.selectAll('g.box-group').data(_chart.data(), function (d, i) {\n            return _chart.keyAccessor()(d, i) + '\\0' + _chart.valueAccessor()(d, i);\n        });\n        var gEnter = boxes.enter().append('g')\n            .attr('class', 'box-group');\n\n        gEnter.append('rect')\n            .attr('class', 'heat-box')\n            .attr('fill', 'white')\n            .on('click', _chart.boxOnClick());\n\n        if (_chart.renderTitle()) {\n            gEnter.append('title');\n            boxes.select('title').text(_chart.title());\n        }\n\n        dc.transition(boxes.select('rect'), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d, i) { return cols(_chart.keyAccessor()(d, i)); })\n            .attr('y', function (d, i) { return rows(_chart.valueAccessor()(d, i)); })\n            .attr('rx', _xBorderRadius)\n            .attr('ry', _yBorderRadius)\n            .attr('fill', _chart.getColor)\n            .attr('width', boxWidth)\n            .attr('height', boxHeight);\n\n        boxes.exit().remove();\n\n        var gCols = _chartBody.select('g.cols');\n        if (gCols.empty()) {\n            gCols = _chartBody.append('g').attr('class', 'cols axis');\n        }\n        var gColsText = gCols.selectAll('text').data(cols.domain());\n        gColsText.enter().append('text')\n              .attr('x', function (d) { return cols(d) + boxWidth / 2; })\n              .style('text-anchor', 'middle')\n              .attr('y', _chart.effectiveHeight())\n              .attr('dy', 12)\n              .on('click', _chart.xAxisOnClick())\n              .text(_chart.colsLabel());\n        dc.transition(gColsText, _chart.transitionDuration(), _chart.transitionDelay())\n               .text(_chart.colsLabel())\n               .attr('x', function (d) { return cols(d) + boxWidth / 2; })\n               .attr('y', _chart.effectiveHeight());\n        gColsText.exit().remove();\n        var gRows = _chartBody.select('g.rows');\n        if (gRows.empty()) {\n            gRows = _chartBody.append('g').attr('class', 'rows axis');\n        }\n        var gRowsText = gRows.selectAll('text').data(rows.domain());\n        gRowsText.enter().append('text')\n              .attr('dy', 6)\n              .style('text-anchor', 'end')\n              .attr('x', 0)\n              .attr('dx', -2)\n              .on('click', _chart.yAxisOnClick())\n              .text(_chart.rowsLabel());\n        dc.transition(gRowsText, _chart.transitionDuration(), _chart.transitionDelay())\n              .text(_chart.rowsLabel())\n              .attr('y', function (d) { return rows(d) + boxHeight / 2; });\n        gRowsText.exit().remove();\n\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.box-group').each(function (d) {\n                if (_chart.isSelectedNode(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.box-group').each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when an individual cell is clicked in the heatmap.\n     * By default, filtering of the cell will be toggled.\n     * @method boxOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // default box on click handler\n     * chart.boxOnClick(function (d) {\n     *     var filter = d.key;\n     *     dc.events.trigger(function () {\n     *         _chart.filter(filter);\n     *         _chart.redrawGroup();\n     *     });\n     * });\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.boxOnClick = function (handler) {\n        if (!arguments.length) {\n            return _boxOnClick;\n        }\n        _boxOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when a column tick is clicked in the x axis.\n     * By default, if any cells in the column are unselected, the whole column will be selected,\n     * otherwise the whole column will be unselected.\n     * @method xAxisOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.xAxisOnClick = function (handler) {\n        if (!arguments.length) {\n            return _xAxisOnClick;\n        }\n        _xAxisOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when a row tick is clicked in the y axis.\n     * By default, if any cells in the row are unselected, the whole row will be selected,\n     * otherwise the whole row will be unselected.\n     * @method yAxisOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.yAxisOnClick = function (handler) {\n        if (!arguments.length) {\n            return _yAxisOnClick;\n        }\n        _yAxisOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the X border radius.  Set to 0 to get full rectangles.\n     * @method xBorderRadius\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Number} [xBorderRadius=6.75]\n     * @returns {Number|dc.heatMap}\n     */\n    _chart.xBorderRadius = function (xBorderRadius) {\n        if (!arguments.length) {\n            return _xBorderRadius;\n        }\n        _xBorderRadius = xBorderRadius;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the Y border radius.  Set to 0 to get full rectangles.\n     * @method yBorderRadius\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Number} [yBorderRadius=6.75]\n     * @returns {Number|dc.heatMap}\n     */\n    _chart.yBorderRadius = function (yBorderRadius) {\n        if (!arguments.length) {\n            return _yBorderRadius;\n        }\n        _yBorderRadius = yBorderRadius;\n        return _chart;\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n// https://github.com/d3/d3-plugins/blob/master/box/box.js\n(function () {\n\n    // Inspired by http://informationandvisualization.de/blog/box-plot\n    d3.box = function () {\n        var width = 1,\n            height = 1,\n            duration = 0,\n            delay = 0,\n            domain = null,\n            value = Number,\n            whiskers = boxWhiskers,\n            quartiles = boxQuartiles,\n            tickFormat = null;\n\n        // For each small multiple…\n        function box (g) {\n            g.each(function (d, i) {\n                d = d.map(value).sort(d3.ascending);\n                var g = d3.select(this),\n                    n = d.length,\n                    min = d[0],\n                    max = d[n - 1];\n\n                // Compute quartiles. Must return exactly 3 elements.\n                var quartileData = d.quartiles = quartiles(d);\n\n                // Compute whiskers. Must return exactly 2 elements, or null.\n                var whiskerIndices = whiskers && whiskers.call(this, d, i),\n                    whiskerData = whiskerIndices && whiskerIndices.map(function (i) { return d[i]; });\n\n                // Compute outliers. If no whiskers are specified, all data are 'outliers'.\n                // We compute the outliers as indices, so that we can join across transitions!\n                var outlierIndices = whiskerIndices ?\n                    d3.range(0, whiskerIndices[0]).concat(d3.range(whiskerIndices[1] + 1, n)) : d3.range(n);\n\n                // Compute the new x-scale.\n                var x1 = d3.scale.linear()\n                    .domain(domain && domain.call(this, d, i) || [min, max])\n                    .range([height, 0]);\n\n                // Retrieve the old x-scale, if this is an update.\n                var x0 = this.__chart__ || d3.scale.linear()\n                    .domain([0, Infinity])\n                    .range(x1.range());\n\n                // Stash the new scale.\n                this.__chart__ = x1;\n\n                // Note: the box, median, and box tick elements are fixed in number,\n                // so we only have to handle enter and update. In contrast, the outliers\n                // and other elements are variable, so we need to exit them! Variable\n                // elements also fade in and out.\n\n                // Update center line: the vertical line spanning the whiskers.\n                var center = g.selectAll('line.center')\n                    .data(whiskerData ? [whiskerData] : []);\n\n                center.enter().insert('line', 'rect')\n                    .attr('class', 'center')\n                    .attr('x1', width / 2)\n                    .attr('y1', function (d) { return x0(d[0]); })\n                    .attr('x2', width / 2)\n                    .attr('y2', function (d) { return x0(d[1]); })\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); });\n\n                center.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1)\n                    .attr('x1', width / 2)\n                    .attr('x2', width / 2)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); });\n\n                center.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1e-6)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); })\n                    .remove();\n\n                // Update innerquartile box.\n                var box = g.selectAll('rect.box')\n                    .data([quartileData]);\n\n                box.enter().append('rect')\n                    .attr('class', 'box')\n                    .attr('x', 0)\n                    .attr('y', function (d) { return x0(d[2]); })\n                    .attr('width', width)\n                    .attr('height', function (d) { return x0(d[0]) - x0(d[2]); })\n                  .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', function (d) { return x1(d[2]); })\n                    .attr('height', function (d) { return x1(d[0]) - x1(d[2]); });\n\n                box.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('width', width)\n                    .attr('y', function (d) { return x1(d[2]); })\n                    .attr('height', function (d) { return x1(d[0]) - x1(d[2]); });\n\n                // Update median line.\n                var medianLine = g.selectAll('line.median')\n                    .data([quartileData[1]]);\n\n                medianLine.enter().append('line')\n                    .attr('class', 'median')\n                    .attr('x1', 0)\n                    .attr('y1', x0)\n                    .attr('x2', width)\n                    .attr('y2', x0)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1);\n\n                medianLine.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('x1', 0)\n                    .attr('x2', width)\n                    .attr('y1', x1)\n                    .attr('y2', x1);\n\n                // Update whiskers.\n                var whisker = g.selectAll('line.whisker')\n                    .data(whiskerData || []);\n\n                whisker.enter().insert('line', 'circle, text')\n                    .attr('class', 'whisker')\n                    .attr('x1', 0)\n                    .attr('y1', x0)\n                    .attr('x2', width)\n                    .attr('y2', x0)\n                    .style('opacity', 1e-6)\n                  .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1);\n\n                whisker.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('x1', 0)\n                    .attr('x2', width)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1);\n\n                whisker.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1e-6)\n                    .remove();\n\n                // Update outliers.\n                var outlier = g.selectAll('circle.outlier')\n                    .data(outlierIndices, Number);\n\n                outlier.enter().insert('circle', 'text')\n                    .attr('class', 'outlier')\n                    .attr('r', 5)\n                    .attr('cx', width / 2)\n                    .attr('cy', function (i) { return x0(d[i]); })\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1);\n\n                outlier.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cx', width / 2)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1);\n\n                outlier.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1e-6)\n                    .remove();\n\n                // Compute the tick format.\n                var format = tickFormat || x1.tickFormat(8);\n\n                // Update box ticks.\n                var boxTick = g.selectAll('text.box')\n                    .data(quartileData);\n\n                boxTick.enter().append('text')\n                    .attr('class', 'box')\n                    .attr('dy', '.3em')\n                    .attr('dx', function (d, i) { return i & 1 ? 6 : -6; })\n                    .attr('x', function (d, i) { return i & 1 ? width : 0; })\n                    .attr('y', x0)\n                    .attr('text-anchor', function (d, i) { return i & 1 ? 'start' : 'end'; })\n                    .text(format)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1);\n\n                boxTick.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .text(format)\n                    .attr('x', function (d, i) { return i & 1 ? width : 0; })\n                    .attr('y', x1);\n\n                // Update whisker ticks. These are handled separately from the box\n                // ticks because they may or may not exist, and we want don't want\n                // to join box ticks pre-transition with whisker ticks post-.\n                var whiskerTick = g.selectAll('text.whisker')\n                    .data(whiskerData || []);\n\n                whiskerTick.enter().append('text')\n                    .attr('class', 'whisker')\n                    .attr('dy', '.3em')\n                    .attr('dx', 6)\n                    .attr('x', width)\n                    .attr('y', x0)\n                    .text(format)\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1)\n                    .style('opacity', 1);\n\n                whiskerTick.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .text(format)\n                    .attr('x', width)\n                    .attr('y', x1)\n                    .style('opacity', 1);\n\n                whiskerTick.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1)\n                    .style('opacity', 1e-6)\n                    .remove();\n            });\n            d3.timer.flush();\n        }\n\n        box.width = function (x) {\n            if (!arguments.length) {\n                return width;\n            }\n            width = x;\n            return box;\n        };\n\n        box.height = function (x) {\n            if (!arguments.length) {\n                return height;\n            }\n            height = x;\n            return box;\n        };\n\n        box.tickFormat = function (x) {\n            if (!arguments.length) {\n                return tickFormat;\n            }\n            tickFormat = x;\n            return box;\n        };\n\n        box.duration = function (x) {\n            if (!arguments.length) {\n                return duration;\n            }\n            duration = x;\n            return box;\n        };\n\n        box.domain = function (x) {\n            if (!arguments.length) {\n                return domain;\n            }\n            domain = x === null ? x : d3.functor(x);\n            return box;\n        };\n\n        box.value = function (x) {\n            if (!arguments.length) {\n                return value;\n            }\n            value = x;\n            return box;\n        };\n\n        box.whiskers = function (x) {\n            if (!arguments.length) {\n                return whiskers;\n            }\n            whiskers = x;\n            return box;\n        };\n\n        box.quartiles = function (x) {\n            if (!arguments.length) {\n                return quartiles;\n            }\n            quartiles = x;\n            return box;\n        };\n\n        return box;\n    };\n\n    function boxWhiskers (d) {\n        return [0, d.length - 1];\n    }\n\n    function boxQuartiles (d) {\n        return [\n            d3.quantile(d, 0.25),\n            d3.quantile(d, 0.5),\n            d3.quantile(d, 0.75)\n        ];\n    }\n\n})();\n\n\n/**\n * A box plot is a chart that depicts numerical data via their quartile ranges.\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/box-plot-time.html Box plot time example}\n * - {@link http://dc-js.github.io/dc.js/examples/box-plot.html Box plot example}\n * @class boxPlot\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a box plot under #chart-container1 element using the default global chart group\n * var boxPlot1 = dc.boxPlot('#chart-container1');\n * // create a box plot under #chart-container2 element using chart group A\n * var boxPlot2 = dc.boxPlot('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.boxPlot}\n */\ndc.boxPlot = function (parent, chartGroup) {\n    var _chart = dc.coordinateGridMixin({});\n\n    // Returns a function to compute the interquartile range.\n    function DEFAULT_WHISKERS_IQR (k) {\n        return function (d) {\n            var q1 = d.quartiles[0],\n                q3 = d.quartiles[2],\n                iqr = (q3 - q1) * k,\n                i = -1,\n                j = d.length;\n            do { ++i; } while (d[i] < q1 - iqr);\n            do { --j; } while (d[j] > q3 + iqr);\n            return [i, j];\n        };\n    }\n\n    var _whiskerIqrFactor = 1.5;\n    var _whiskersIqr = DEFAULT_WHISKERS_IQR;\n    var _whiskers = _whiskersIqr(_whiskerIqrFactor);\n\n    var _box = d3.box();\n    var _tickFormat = null;\n\n    var _boxWidth = function (innerChartWidth, xUnits) {\n        if (_chart.isOrdinal()) {\n            return _chart.x().rangeBand();\n        } else {\n            return innerChartWidth / (1 + _chart.boxPadding()) / xUnits;\n        }\n    };\n\n    // default padding to handle min/max whisker text\n    _chart.yAxisPadding(12);\n\n    // default to ordinal\n    _chart.x(d3.scale.ordinal());\n    _chart.xUnits(dc.units.ordinal);\n\n    // valueAccessor should return an array of values that can be coerced into numbers\n    // or if data is overloaded for a static array of arrays, it should be `Number`.\n    // Empty arrays are not included.\n    _chart.data(function (group) {\n        return group.all().map(function (d) {\n            d.map = function (accessor) { return accessor.call(d, d); };\n            return d;\n        }).filter(function (d) {\n            var values = _chart.valueAccessor()(d);\n            return values.length !== 0;\n        });\n    });\n\n    /**\n     * Get or set the spacing between boxes as a fraction of box size. Valid values are within 0-1.\n     * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n     * for a visual description of how the padding is applied.\n     * @method boxPadding\n     * @memberof dc.boxPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3.scale.ordinal.rangeBands}\n     * @param {Number} [padding=0.8]\n     * @returns {Number|dc.boxPlot}\n     */\n    _chart.boxPadding = _chart._rangeBandPadding;\n    _chart.boxPadding(0.8);\n\n    /**\n     * Get or set the outer padding on an ordinal box chart. This setting has no effect on non-ordinal charts\n     * or on charts with a custom {@link dc.boxPlot#boxWidth .boxWidth}. Will pad the width by\n     * `padding * barWidth` on each side of the chart.\n     * @method outerPadding\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Number} [padding=0.5]\n     * @returns {Number|dc.boxPlot}\n     */\n    _chart.outerPadding = _chart._outerRangeBandPadding;\n    _chart.outerPadding(0.5);\n\n    /**\n     * Get or set the numerical width of the boxplot box. The width may also be a function taking as\n     * parameters the chart width excluding the right and left margins, as well as the number of x\n     * units.\n     * @example\n     * // Using numerical parameter\n     * chart.boxWidth(10);\n     * // Using function\n     * chart.boxWidth((innerChartWidth, xUnits) { ... });\n     * @method boxWidth\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Number|Function} [boxWidth=0.5]\n     * @returns {Number|Function|dc.boxPlot}\n     */\n    _chart.boxWidth = function (boxWidth) {\n        if (!arguments.length) {\n            return _boxWidth;\n        }\n        _boxWidth = d3.functor(boxWidth);\n        return _chart;\n    };\n\n    var boxTransform = function (d, i) {\n        var xOffset = _chart.x()(_chart.keyAccessor()(d, i));\n        return 'translate(' + xOffset + ', 0)';\n    };\n\n    _chart._preprocessData = function () {\n        if (_chart.elasticX()) {\n            _chart.x().domain([]);\n        }\n    };\n\n    _chart.plotData = function () {\n        var _calculatedBoxWidth = _boxWidth(_chart.effectiveWidth(), _chart.xUnitCount());\n\n        _box.whiskers(_whiskers)\n            .width(_calculatedBoxWidth)\n            .height(_chart.effectiveHeight())\n            .value(_chart.valueAccessor())\n            .domain(_chart.y().domain())\n            .duration(_chart.transitionDuration())\n            .tickFormat(_tickFormat);\n\n        var boxesG = _chart.chartBodyG().selectAll('g.box').data(_chart.data(), _chart.keyAccessor());\n\n        renderBoxes(boxesG);\n        updateBoxes(boxesG);\n        removeBoxes(boxesG);\n\n        _chart.fadeDeselectedArea();\n    };\n\n    function renderBoxes (boxesG) {\n        var boxesGEnter = boxesG.enter().append('g');\n\n        boxesGEnter\n            .attr('class', 'box')\n            .attr('transform', boxTransform)\n            .call(_box)\n            .on('click', function (d) {\n                _chart.filter(_chart.keyAccessor()(d));\n                _chart.redrawGroup();\n            });\n    }\n\n    function updateBoxes (boxesG) {\n        dc.transition(boxesG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', boxTransform)\n            .call(_box)\n            .each(function () {\n                d3.select(this).select('rect.box').attr('fill', _chart.getColor);\n            });\n    }\n\n    function removeBoxes (boxesG) {\n        boxesG.exit().remove().call(_box);\n    }\n\n    _chart.fadeDeselectedArea = function () {\n        if (_chart.hasFilter()) {\n            if (_chart.isOrdinal()) {\n                _chart.g().selectAll('g.box').each(function (d) {\n                    if (_chart.isSelectedNode(d)) {\n                        _chart.highlightSelected(this);\n                    } else {\n                        _chart.fadeDeselected(this);\n                    }\n                });\n            } else {\n                var extent = _chart.brush().extent();\n                var start = extent[0];\n                var end = extent[1];\n                var keyAccessor = _chart.keyAccessor();\n                _chart.g().selectAll('g.box').each(function (d) {\n                    var key = keyAccessor(d);\n                    if (key < start || key >= end) {\n                        _chart.fadeDeselected(this);\n                    } else {\n                        _chart.highlightSelected(this);\n                    }\n                });\n            }\n        } else {\n            _chart.g().selectAll('g.box').each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(_chart.keyAccessor()(d));\n    };\n\n    _chart.yAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return d3.min(_chart.valueAccessor()(e));\n        });\n        return dc.utils.subtract(min, _chart.yAxisPadding());\n    };\n\n    _chart.yAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return d3.max(_chart.valueAccessor()(e));\n        });\n        return dc.utils.add(max, _chart.yAxisPadding());\n    };\n\n    /**\n     * Set the numerical format of the boxplot median, whiskers and quartile labels. Defaults to\n     * integer formatting.\n     * @example\n     * // format ticks to 2 decimal places\n     * chart.tickFormat(d3.format('.2f'));\n     * @method tickFormat\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Function} [tickFormat]\n     * @returns {Number|Function|dc.boxPlot}\n     */\n    _chart.tickFormat = function (tickFormat) {\n        if (!arguments.length) {\n            return _tickFormat;\n        }\n        _tickFormat = tickFormat;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The select menu is a simple widget designed to filter a dimension by selecting an option from\n * an HTML `<select/>` menu. The menu can be optionally turned into a multiselect.\n * @class selectMenu\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * // create a select menu under #select-container using the default global chart group\n * var select = dc.selectMenu('#select-container')\n *                .dimension(states)\n *                .group(stateGroup);\n * // the option text can be set via the title() function\n * // by default the option text is '`key`: `value`'\n * select.title(function (d){\n *     return 'STATE: ' + d.key;\n * })\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this widget should be placed in.\n * Interaction with the widget will only trigger events and redraws within its group.\n * @returns {selectMenu}\n **/\ndc.selectMenu = function (parent, chartGroup) {\n    var SELECT_CSS_CLASS = 'dc-select-menu';\n    var OPTION_CSS_CLASS = 'dc-select-option';\n\n    var _chart = dc.baseMixin({});\n\n    var _select;\n    var _promptText = 'Select all';\n    var _multiple = false;\n    var _promptValue = null;\n    var _numberVisible = null;\n    var _order = function (a, b) {\n        return _chart.keyAccessor()(a) > _chart.keyAccessor()(b) ?\n             1 : _chart.keyAccessor()(b) > _chart.keyAccessor()(a) ?\n            -1 : 0;\n    };\n\n    var _filterDisplayed = function (d) {\n        return _chart.valueAccessor()(d) > 0;\n    };\n\n    _chart.data(function (group) {\n        return group.all().filter(_filterDisplayed);\n    });\n\n    _chart._doRender = function () {\n        _chart.select('select').remove();\n        _select = _chart.root().append('select')\n                        .classed(SELECT_CSS_CLASS, true);\n        _select.append('option').text(_promptText).attr('value', '');\n\n        _chart._doRedraw();\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        setAttributes();\n        renderOptions();\n        // select the option(s) corresponding to current filter(s)\n        if (_chart.hasFilter() && _multiple) {\n            _select.selectAll('option')\n                .property('selected', function (d) {\n                    return d && _chart.filters().indexOf(String(_chart.keyAccessor()(d))) >= 0;\n                });\n        } else if (_chart.hasFilter()) {\n            _select.property('value', _chart.filter());\n        } else {\n            _select.property('value', '');\n        }\n        return _chart;\n    };\n\n    function renderOptions () {\n        var options = _select.selectAll('option.' + OPTION_CSS_CLASS)\n          .data(_chart.data(), function (d) { return _chart.keyAccessor()(d); });\n\n        options.enter()\n              .append('option')\n              .classed(OPTION_CSS_CLASS, true)\n              .attr('value', function (d) { return _chart.keyAccessor()(d); });\n\n        options.text(_chart.title());\n        options.exit().remove();\n        _select.selectAll('option.' + OPTION_CSS_CLASS).sort(_order);\n\n        _select.on('change', onChange);\n        return options;\n    }\n\n    function onChange (d, i) {\n        var values;\n        var target = d3.event.target;\n        if (target.selectedOptions) {\n            var selectedOptions = Array.prototype.slice.call(target.selectedOptions);\n            values = selectedOptions.map(function (d) {\n                return d.value;\n            });\n        } else { // IE and other browsers do not support selectedOptions\n            // adapted from this polyfill: https://gist.github.com/brettz9/4212217\n            var options = [].slice.call(d3.event.target.options);\n            values = options.filter(function (option) {\n                return option.selected;\n            }).map(function (option) {\n                return option.value;\n            });\n        }\n        // console.log(values);\n        // check if only prompt option is selected\n        if (values.length === 1 && values[0] === '') {\n            values = _promptValue || null;\n        } else if (!_multiple && values.length === 1) {\n            values = values[0];\n        }\n        _chart.onChange(values);\n    }\n\n    _chart.onChange = function (val) {\n        if (val && _multiple) {\n            _chart.replaceFilter([val]);\n        } else if (val) {\n            _chart.replaceFilter(val);\n        } else {\n            _chart.filterAll();\n        }\n        dc.events.trigger(function () {\n            _chart.redrawGroup();\n        });\n    };\n\n    function setAttributes () {\n        if (_multiple) {\n            _select.attr('multiple', true);\n        } else {\n            _select.attr('multiple', null);\n        }\n        if (_numberVisible !== null) {\n            _select.attr('size', _numberVisible);\n        } else {\n            _select.attr('size', null);\n        }\n    }\n\n    /**\n     * Get or set the function that controls the ordering of option tags in the\n     * select menu. By default options are ordered by the group key in ascending\n     * order.\n     * @name order\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {Function} [order]\n     * @example\n     * // order by the group's value\n     * chart.order(function (a,b) {\n     *     return a.value > b.value ? 1 : b.value > a.value ? -1 : 0;\n     * });\n     **/\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    /**\n     * Get or set the text displayed in the options used to prompt selection.\n     * @name promptText\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {String} [promptText='Select all']\n     * @example\n     * chart.promptText('All states');\n     **/\n    _chart.promptText = function (_) {\n        if (!arguments.length) {\n            return _promptText;\n        }\n        _promptText = _;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that filters option tags prior to display. By default options\n     * with a value of < 1 are not displayed.\n     * @name filterDisplayed\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {function} [filterDisplayed]\n     * @example\n     * // display all options override the `filterDisplayed` function:\n     * chart.filterDisplayed(function () {\n     *     return true;\n     * });\n     **/\n    _chart.filterDisplayed = function (filterDisplayed) {\n        if (!arguments.length) {\n            return _filterDisplayed;\n        }\n        _filterDisplayed = filterDisplayed;\n        return _chart;\n    };\n\n    /**\n     * Controls the type of select menu. Setting it to true converts the underlying\n     * HTML tag into a multiple select.\n     * @name multiple\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {boolean} [multiple=false]\n     * @example\n     * chart.multiple(true);\n     **/\n    _chart.multiple = function (multiple) {\n        if (!arguments.length) {\n            return _multiple;\n        }\n        _multiple = multiple;\n\n        return _chart;\n    };\n\n    /**\n     * Controls the default value to be used for\n     * [dimension.filter](https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter)\n     * when only the prompt value is selected. If `null` (the default), no filtering will occur when\n     * just the prompt is selected.\n     * @name promptValue\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {?*} [promptValue=null]\n     **/\n    _chart.promptValue = function (promptValue) {\n        if (!arguments.length) {\n            return _promptValue;\n        }\n        _promptValue = promptValue;\n\n        return _chart;\n    };\n\n    /**\n     * Controls the number of items to show in the select menu, when `.multiple()` is true. This\n     * controls the [`size` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#Attributes) of\n     * the `select` element. If `null` (the default), uses the browser's default height.\n     * @name numberItems\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {?number} [numberVisible=null]\n     * @example\n     * chart.numberVisible(10);\n     **/\n    _chart.numberVisible = function (numberVisible) {\n        if (!arguments.length) {\n            return _numberVisible;\n        }\n        _numberVisible = numberVisible;\n\n        return _chart;\n    };\n\n    _chart.size = dc.logger.deprecate(_chart.numberVisible, 'selectMenu.size is ambiguous - use numberVisible instead');\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n// Renamed functions\n\ndc.abstractBubbleChart = dc.bubbleMixin;\ndc.baseChart = dc.baseMixin;\ndc.capped = dc.capMixin;\ndc.colorChart = dc.colorMixin;\ndc.coordinateGridChart = dc.coordinateGridMixin;\ndc.marginable = dc.marginMixin;\ndc.stackableChart = dc.stackMixin;\n\n// Expose d3 and crossfilter, so that clients in browserify\n// case can obtain them if they need them.\ndc.d3 = d3;\ndc.crossfilter = crossfilter;\n\nreturn dc;}\n    if(true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(271), __webpack_require__(272)], __WEBPACK_AMD_DEFINE_FACTORY__ = (_dc),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if(typeof module === \"object\" && module.exports) {\n        var _d3 = require('d3');\n        var _crossfilter = require('crossfilter2');\n        // When using npm + browserify, 'crossfilter' is a function,\n        // since package.json specifies index.js as main function, and it\n        // does special handling. When using bower + browserify,\n        // there's no main in bower.json (in fact, there's no bower.json),\n        // so we need to fix it.\n        if (typeof _crossfilter !== \"function\") {\n            _crossfilter = _crossfilter.crossfilter;\n        }\n        module.exports = _dc(_d3, _crossfilter);\n    } else {\n        this.dc = _dc(d3, crossfilter);\n    }\n}\n)();\n\n//# sourceMappingURL=dc.js.map\n\n/***/ }),\n\n/***/ 271:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {\n  var d3 = {\n    version: \"3.5.17\"\n  };\n  var d3_arraySlice = [].slice, d3_array = function(list) {\n    return d3_arraySlice.call(list);\n  };\n  var d3_document = this.document;\n  function d3_documentElement(node) {\n    return node && (node.ownerDocument || node.document || node).documentElement;\n  }\n  function d3_window(node) {\n    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n  }\n  if (d3_document) {\n    try {\n      d3_array(d3_document.documentElement.childNodes)[0].nodeType;\n    } catch (e) {\n      d3_array = function(list) {\n        var i = list.length, array = new Array(i);\n        while (i--) array[i] = list[i];\n        return array;\n      };\n    }\n  }\n  if (!Date.now) Date.now = function() {\n    return +new Date();\n  };\n  if (d3_document) {\n    try {\n      d3_document.createElement(\"DIV\").style.setProperty(\"opacity\", 0, \"\");\n    } catch (error) {\n      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n      d3_element_prototype.setAttribute = function(name, value) {\n        d3_element_setAttribute.call(this, name, value + \"\");\n      };\n      d3_element_prototype.setAttributeNS = function(space, local, value) {\n        d3_element_setAttributeNS.call(this, space, local, value + \"\");\n      };\n      d3_style_prototype.setProperty = function(name, value, priority) {\n        d3_style_setProperty.call(this, name, value + \"\", priority);\n      };\n    }\n  }\n  d3.ascending = d3_ascending;\n  function d3_ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n  d3.descending = function(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  };\n  d3.min = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;\n    }\n    return a;\n  };\n  d3.max = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;\n    }\n    return a;\n  };\n  d3.extent = function(array, f) {\n    var i = -1, n = array.length, a, b, c;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n    return [ a, c ];\n  };\n  function d3_number(x) {\n    return x === null ? NaN : +x;\n  }\n  function d3_numeric(x) {\n    return !isNaN(x);\n  }\n  d3.sum = function(array, f) {\n    var s = 0, n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = +array[i])) s += a;\n    } else {\n      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n    }\n    return s;\n  };\n  d3.mean = function(array, f) {\n    var s = 0, n = array.length, a, i = -1, j = n;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;\n    }\n    if (j) return s / j;\n  };\n  d3.quantile = function(values, p) {\n    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;\n    return e ? v + e * (values[h] - v) : v;\n  };\n  d3.median = function(array, f) {\n    var numbers = [], n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n    }\n    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n  };\n  d3.variance = function(array, f) {\n    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    } else {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n    if (j > 1) return s / (j - 1);\n  };\n  d3.deviation = function() {\n    var v = d3.variance.apply(this, arguments);\n    return v ? Math.sqrt(v) : v;\n  };\n  function d3_bisector(compare) {\n    return {\n      left: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n  var d3_bisect = d3_bisector(d3_ascending);\n  d3.bisectLeft = d3_bisect.left;\n  d3.bisect = d3.bisectRight = d3_bisect.right;\n  d3.bisector = function(f) {\n    return d3_bisector(f.length === 1 ? function(d, x) {\n      return d3_ascending(f(d), x);\n    } : f);\n  };\n  d3.shuffle = function(array, i0, i1) {\n    if ((m = arguments.length) < 3) {\n      i1 = array.length;\n      if (m < 2) i0 = 0;\n    }\n    var m = i1 - i0, t, i;\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n    }\n    return array;\n  };\n  d3.permute = function(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  };\n  d3.pairs = function(array) {\n    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];\n    return pairs;\n  };\n  d3.transpose = function(matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  };\n  function d3_transposeLength(d) {\n    return d.length;\n  }\n  d3.zip = function() {\n    return d3.transpose(arguments);\n  };\n  d3.keys = function(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  };\n  d3.values = function(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  };\n  d3.entries = function(map) {\n    var entries = [];\n    for (var key in map) entries.push({\n      key: key,\n      value: map[key]\n    });\n    return entries;\n  };\n  d3.merge = function(arrays) {\n    var n = arrays.length, m, i = -1, j = 0, merged, array;\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n    return merged;\n  };\n  var abs = Math.abs;\n  d3.range = function(start, stop, step) {\n    if (arguments.length < 3) {\n      step = 1;\n      if (arguments.length < 2) {\n        stop = start;\n        start = 0;\n      }\n    }\n    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n    start *= k, stop *= k, step *= k;\n    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n    return range;\n  };\n  function d3_range_integerScale(x) {\n    var k = 1;\n    while (x * k % 1) k *= 10;\n    return k;\n  }\n  function d3_class(ctor, properties) {\n    for (var key in properties) {\n      Object.defineProperty(ctor.prototype, key, {\n        value: properties[key],\n        enumerable: false\n      });\n    }\n  }\n  d3.map = function(object, f) {\n    var map = new d3_Map();\n    if (object instanceof d3_Map) {\n      object.forEach(function(key, value) {\n        map.set(key, value);\n      });\n    } else if (Array.isArray(object)) {\n      var i = -1, n = object.length, o;\n      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);\n    } else {\n      for (var key in object) map.set(key, object[key]);\n    }\n    return map;\n  };\n  function d3_Map() {\n    this._ = Object.create(null);\n  }\n  var d3_map_proto = \"__proto__\", d3_map_zero = \"\\x00\";\n  d3_class(d3_Map, {\n    has: d3_map_has,\n    get: function(key) {\n      return this._[d3_map_escape(key)];\n    },\n    set: function(key, value) {\n      return this._[d3_map_escape(key)] = value;\n    },\n    remove: d3_map_remove,\n    keys: d3_map_keys,\n    values: function() {\n      var values = [];\n      for (var key in this._) values.push(this._[key]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var key in this._) entries.push({\n        key: d3_map_unescape(key),\n        value: this._[key]\n      });\n      return entries;\n    },\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);\n    }\n  });\n  function d3_map_escape(key) {\n    return (key += \"\") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n  }\n  function d3_map_unescape(key) {\n    return (key += \"\")[0] === d3_map_zero ? key.slice(1) : key;\n  }\n  function d3_map_has(key) {\n    return d3_map_escape(key) in this._;\n  }\n  function d3_map_remove(key) {\n    return (key = d3_map_escape(key)) in this._ && delete this._[key];\n  }\n  function d3_map_keys() {\n    var keys = [];\n    for (var key in this._) keys.push(d3_map_unescape(key));\n    return keys;\n  }\n  function d3_map_size() {\n    var size = 0;\n    for (var key in this._) ++size;\n    return size;\n  }\n  function d3_map_empty() {\n    for (var key in this._) return false;\n    return true;\n  }\n  d3.nest = function() {\n    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;\n    function map(mapType, array, depth) {\n      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n          values.push(object);\n        } else {\n          valuesByKey.set(keyValue, [ object ]);\n        }\n      }\n      if (mapType) {\n        object = mapType();\n        setter = function(keyValue, values) {\n          object.set(keyValue, map(mapType, values, depth));\n        };\n      } else {\n        object = {};\n        setter = function(keyValue, values) {\n          object[keyValue] = map(mapType, values, depth);\n        };\n      }\n      valuesByKey.forEach(setter);\n      return object;\n    }\n    function entries(map, depth) {\n      if (depth >= keys.length) return map;\n      var array = [], sortKey = sortKeys[depth++];\n      map.forEach(function(key, keyMap) {\n        array.push({\n          key: key,\n          values: entries(keyMap, depth)\n        });\n      });\n      return sortKey ? array.sort(function(a, b) {\n        return sortKey(a.key, b.key);\n      }) : array;\n    }\n    nest.map = function(array, mapType) {\n      return map(mapType, array, 0);\n    };\n    nest.entries = function(array) {\n      return entries(map(d3.map, array, 0), 0);\n    };\n    nest.key = function(d) {\n      keys.push(d);\n      return nest;\n    };\n    nest.sortKeys = function(order) {\n      sortKeys[keys.length - 1] = order;\n      return nest;\n    };\n    nest.sortValues = function(order) {\n      sortValues = order;\n      return nest;\n    };\n    nest.rollup = function(f) {\n      rollup = f;\n      return nest;\n    };\n    return nest;\n  };\n  d3.set = function(array) {\n    var set = new d3_Set();\n    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);\n    return set;\n  };\n  function d3_Set() {\n    this._ = Object.create(null);\n  }\n  d3_class(d3_Set, {\n    has: d3_map_has,\n    add: function(key) {\n      this._[d3_map_escape(key += \"\")] = true;\n      return key;\n    },\n    remove: d3_map_remove,\n    values: d3_map_keys,\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key));\n    }\n  });\n  d3.behavior = {};\n  function d3_identity(d) {\n    return d;\n  }\n  d3.rebind = function(target, source) {\n    var i = 1, n = arguments.length, method;\n    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n    return target;\n  };\n  function d3_rebind(target, source, method) {\n    return function() {\n      var value = method.apply(source, arguments);\n      return value === source ? target : value;\n    };\n  }\n  function d3_vendorSymbol(object, name) {\n    if (name in object) return name;\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {\n      var prefixName = d3_vendorPrefixes[i] + name;\n      if (prefixName in object) return prefixName;\n    }\n  }\n  var d3_vendorPrefixes = [ \"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\" ];\n  function d3_noop() {}\n  d3.dispatch = function() {\n    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    return dispatch;\n  };\n  function d3_dispatch() {}\n  d3_dispatch.prototype.on = function(type, listener) {\n    var i = type.indexOf(\".\"), name = \"\";\n    if (i >= 0) {\n      name = type.slice(i + 1);\n      type = type.slice(0, i);\n    }\n    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);\n    if (arguments.length === 2) {\n      if (listener == null) for (type in this) {\n        if (this.hasOwnProperty(type)) this[type].on(name, null);\n      }\n      return this;\n    }\n  };\n  function d3_dispatch_event(dispatch) {\n    var listeners = [], listenerByName = new d3_Map();\n    function event() {\n      var z = listeners, i = -1, n = z.length, l;\n      while (++i < n) if (l = z[i].on) l.apply(this, arguments);\n      return dispatch;\n    }\n    event.on = function(name, listener) {\n      var l = listenerByName.get(name), i;\n      if (arguments.length < 2) return l && l.on;\n      if (l) {\n        l.on = null;\n        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n        listenerByName.remove(name);\n      }\n      if (listener) listeners.push(listenerByName.set(name, {\n        on: listener\n      }));\n      return dispatch;\n    };\n    return event;\n  }\n  d3.event = null;\n  function d3_eventPreventDefault() {\n    d3.event.preventDefault();\n  }\n  function d3_eventSource() {\n    var e = d3.event, s;\n    while (s = e.sourceEvent) e = s;\n    return e;\n  }\n  function d3_eventDispatch(target) {\n    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    dispatch.of = function(thiz, argumentz) {\n      return function(e1) {\n        try {\n          var e0 = e1.sourceEvent = d3.event;\n          e1.target = target;\n          d3.event = e1;\n          dispatch[e1.type].apply(thiz, argumentz);\n        } finally {\n          d3.event = e0;\n        }\n      };\n    };\n    return dispatch;\n  }\n  d3.requote = function(s) {\n    return s.replace(d3_requote_re, \"\\\\$&\");\n  };\n  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  var d3_subclass = {}.__proto__ ? function(object, prototype) {\n    object.__proto__ = prototype;\n  } : function(object, prototype) {\n    for (var property in prototype) object[property] = prototype[property];\n  };\n  function d3_selection(groups) {\n    d3_subclass(groups, d3_selectionPrototype);\n    return groups;\n  }\n  var d3_select = function(s, n) {\n    return n.querySelector(s);\n  }, d3_selectAll = function(s, n) {\n    return n.querySelectorAll(s);\n  }, d3_selectMatches = function(n, s) {\n    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, \"matchesSelector\")];\n    d3_selectMatches = function(n, s) {\n      return d3_selectMatcher.call(n, s);\n    };\n    return d3_selectMatches(n, s);\n  };\n  if (typeof Sizzle === \"function\") {\n    d3_select = function(s, n) {\n      return Sizzle(s, n)[0] || null;\n    };\n    d3_selectAll = Sizzle;\n    d3_selectMatches = Sizzle.matchesSelector;\n  }\n  d3.selection = function() {\n    return d3.select(d3_document.documentElement);\n  };\n  var d3_selectionPrototype = d3.selection.prototype = [];\n  d3_selectionPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, group, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selector(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_select(selector, this);\n    };\n  }\n  d3_selectionPrototype.selectAll = function(selector) {\n    var subgroups = [], subgroup, node;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n          subgroup.parentNode = node;\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selectorAll(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_selectAll(selector, this);\n    };\n  }\n  var d3_nsXhtml = \"http://www.w3.org/1999/xhtml\";\n  var d3_nsPrefix = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: d3_nsXhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n  d3.ns = {\n    prefix: d3_nsPrefix,\n    qualify: function(name) {\n      var i = name.indexOf(\":\"), prefix = name;\n      if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n        space: d3_nsPrefix[prefix],\n        local: name\n      } : name;\n    }\n  };\n  d3_selectionPrototype.attr = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node();\n        name = d3.ns.qualify(name);\n        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n      }\n      for (value in name) this.each(d3_selection_attr(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_attr(name, value));\n  };\n  function d3_selection_attr(name, value) {\n    name = d3.ns.qualify(name);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrConstant() {\n      this.setAttribute(name, value);\n    }\n    function attrConstantNS() {\n      this.setAttributeNS(name.space, name.local, value);\n    }\n    function attrFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);\n    }\n    function attrFunctionNS() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n    }\n    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n  }\n  function d3_collapse(s) {\n    return s.trim().replace(/\\s+/g, \" \");\n  }\n  d3_selectionPrototype.classed = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;\n        if (value = node.classList) {\n          while (++i < n) if (!value.contains(name[i])) return false;\n        } else {\n          value = node.getAttribute(\"class\");\n          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;\n        }\n        return true;\n      }\n      for (value in name) this.each(d3_selection_classed(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_classed(name, value));\n  };\n  function d3_selection_classedRe(name) {\n    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");\n  }\n  function d3_selection_classes(name) {\n    return (name + \"\").trim().split(/^|\\s+/);\n  }\n  function d3_selection_classed(name, value) {\n    name = d3_selection_classes(name).map(d3_selection_classedName);\n    var n = name.length;\n    function classedConstant() {\n      var i = -1;\n      while (++i < n) name[i](this, value);\n    }\n    function classedFunction() {\n      var i = -1, x = value.apply(this, arguments);\n      while (++i < n) name[i](this, x);\n    }\n    return typeof value === \"function\" ? classedFunction : classedConstant;\n  }\n  function d3_selection_classedName(name) {\n    var re = d3_selection_classedRe(name);\n    return function(node, value) {\n      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n      var c = node.getAttribute(\"class\") || \"\";\n      if (value) {\n        re.lastIndex = 0;\n        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));\n      } else {\n        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));\n      }\n    };\n  }\n  d3_selectionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));\n        return this;\n      }\n      if (n < 2) {\n        var node = this.node();\n        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);\n      }\n      priority = \"\";\n    }\n    return this.each(d3_selection_style(name, value, priority));\n  };\n  function d3_selection_style(name, value, priority) {\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleConstant() {\n      this.style.setProperty(name, value, priority);\n    }\n    function styleFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);\n    }\n    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;\n  }\n  d3_selectionPrototype.property = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") return this.node()[name];\n      for (value in name) this.each(d3_selection_property(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_property(name, value));\n  };\n  function d3_selection_property(name, value) {\n    function propertyNull() {\n      delete this[name];\n    }\n    function propertyConstant() {\n      this[name] = value;\n    }\n    function propertyFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) delete this[name]; else this[name] = x;\n    }\n    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;\n  }\n  d3_selectionPrototype.text = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.textContent = \"\";\n    } : function() {\n      this.textContent = value;\n    }) : this.node().textContent;\n  };\n  d3_selectionPrototype.html = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.innerHTML = \"\";\n    } : function() {\n      this.innerHTML = value;\n    }) : this.node().innerHTML;\n  };\n  d3_selectionPrototype.append = function(name) {\n    name = d3_selection_creator(name);\n    return this.select(function() {\n      return this.appendChild(name.apply(this, arguments));\n    });\n  };\n  function d3_selection_creator(name) {\n    function create() {\n      var document = this.ownerDocument, namespace = this.namespaceURI;\n      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);\n    }\n    function createNS() {\n      return this.ownerDocument.createElementNS(name.space, name.local);\n    }\n    return typeof name === \"function\" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;\n  }\n  d3_selectionPrototype.insert = function(name, before) {\n    name = d3_selection_creator(name);\n    before = d3_selection_selector(before);\n    return this.select(function() {\n      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n    });\n  };\n  d3_selectionPrototype.remove = function() {\n    return this.each(d3_selectionRemove);\n  };\n  function d3_selectionRemove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n  d3_selectionPrototype.data = function(value, key) {\n    var i = -1, n = this.length, group, node;\n    if (!arguments.length) {\n      value = new Array(n = (group = this[0]).length);\n      while (++i < n) {\n        if (node = group[i]) {\n          value[i] = node.__data__;\n        }\n      }\n      return value;\n    }\n    function bind(group, groupData) {\n      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n      if (key) {\n        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;\n        for (i = -1; ++i < n; ) {\n          if (node = group[i]) {\n            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {\n              exitNodes[i] = node;\n            } else {\n              nodeByKeyValue.set(keyValue, node);\n            }\n            keyValues[i] = keyValue;\n          }\n        }\n        for (i = -1; ++i < m; ) {\n          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          } else if (node !== true) {\n            updateNodes[i] = node;\n            node.__data__ = nodeData;\n          }\n          nodeByKeyValue.set(keyValue, true);\n        }\n        for (i = -1; ++i < n; ) {\n          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {\n            exitNodes[i] = group[i];\n          }\n        }\n      } else {\n        for (i = -1; ++i < n0; ) {\n          node = group[i];\n          nodeData = groupData[i];\n          if (node) {\n            node.__data__ = nodeData;\n            updateNodes[i] = node;\n          } else {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          }\n        }\n        for (;i < m; ++i) {\n          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n        }\n        for (;i < n; ++i) {\n          exitNodes[i] = group[i];\n        }\n      }\n      enterNodes.update = updateNodes;\n      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n      enter.push(enterNodes);\n      update.push(updateNodes);\n      exit.push(exitNodes);\n    }\n    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);\n    if (typeof value === \"function\") {\n      while (++i < n) {\n        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n      }\n    } else {\n      while (++i < n) {\n        bind(group = this[i], value);\n      }\n    }\n    update.enter = function() {\n      return enter;\n    };\n    update.exit = function() {\n      return exit;\n    };\n    return update;\n  };\n  function d3_selection_dataNode(data) {\n    return {\n      __data__: data\n    };\n  }\n  d3_selectionPrototype.datum = function(value) {\n    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");\n  };\n  d3_selectionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_filter(selector) {\n    return function() {\n      return d3_selectMatches(this, selector);\n    };\n  }\n  d3_selectionPrototype.order = function() {\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n    return this;\n  };\n  d3_selectionPrototype.sort = function(comparator) {\n    comparator = d3_selection_sortComparator.apply(this, arguments);\n    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);\n    return this.order();\n  };\n  function d3_selection_sortComparator(comparator) {\n    if (!arguments.length) comparator = d3_ascending;\n    return function(a, b) {\n      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;\n    };\n  }\n  d3_selectionPrototype.each = function(callback) {\n    return d3_selection_each(this, function(node, i, j) {\n      callback.call(node, node.__data__, i, j);\n    });\n  };\n  function d3_selection_each(groups, callback) {\n    for (var j = 0, m = groups.length; j < m; j++) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {\n        if (node = group[i]) callback(node, i, j);\n      }\n    }\n    return groups;\n  }\n  d3_selectionPrototype.call = function(callback) {\n    var args = d3_array(arguments);\n    callback.apply(args[0] = this, args);\n    return this;\n  };\n  d3_selectionPrototype.empty = function() {\n    return !this.node();\n  };\n  d3_selectionPrototype.node = function() {\n    for (var j = 0, m = this.length; j < m; j++) {\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n    return null;\n  };\n  d3_selectionPrototype.size = function() {\n    var n = 0;\n    d3_selection_each(this, function() {\n      ++n;\n    });\n    return n;\n  };\n  function d3_selection_enter(selection) {\n    d3_subclass(selection, d3_selection_enterPrototype);\n    return selection;\n  }\n  var d3_selection_enterPrototype = [];\n  d3.selection.enter = d3_selection_enter;\n  d3.selection.enter.prototype = d3_selection_enterPrototype;\n  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n  d3_selection_enterPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, upgroup, group, node;\n    for (var j = -1, m = this.length; ++j < m; ) {\n      upgroup = (group = this[j]).update;\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = group.parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n          subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  d3_selection_enterPrototype.insert = function(name, before) {\n    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);\n    return d3_selectionPrototype.insert.call(this, name, before);\n  };\n  function d3_selection_enterInsertBefore(enter) {\n    var i0, j0;\n    return function(d, i, j) {\n      var group = enter[j].update, n = group.length, node;\n      if (j != j0) j0 = j, i0 = 0;\n      if (i >= i0) i0 = i + 1;\n      while (!(node = group[i0]) && ++i0 < n) ;\n      return node;\n    };\n  }\n  d3.select = function(node) {\n    var group;\n    if (typeof node === \"string\") {\n      group = [ d3_select(node, d3_document) ];\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = [ node ];\n      group.parentNode = d3_documentElement(node);\n    }\n    return d3_selection([ group ]);\n  };\n  d3.selectAll = function(nodes) {\n    var group;\n    if (typeof nodes === \"string\") {\n      group = d3_array(d3_selectAll(nodes, d3_document));\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = d3_array(nodes);\n      group.parentNode = null;\n    }\n    return d3_selection([ group ]);\n  };\n  d3_selectionPrototype.on = function(type, listener, capture) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof type !== \"string\") {\n        if (n < 2) listener = false;\n        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));\n        return this;\n      }\n      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;\n      capture = false;\n    }\n    return this.each(d3_selection_on(type, listener, capture));\n  };\n  function d3_selection_on(type, listener, capture) {\n    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;\n    if (i > 0) type = type.slice(0, i);\n    var filter = d3_selection_onFilters.get(type);\n    if (filter) type = filter, wrap = d3_selection_onFilter;\n    function onRemove() {\n      var l = this[name];\n      if (l) {\n        this.removeEventListener(type, l, l.$);\n        delete this[name];\n      }\n    }\n    function onAdd() {\n      var l = wrap(listener, d3_array(arguments));\n      onRemove.call(this);\n      this.addEventListener(type, this[name] = l, l.$ = capture);\n      l._ = listener;\n    }\n    function removeAll() {\n      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;\n      for (var name in this) {\n        if (match = name.match(re)) {\n          var l = this[name];\n          this.removeEventListener(match[1], l, l.$);\n          delete this[name];\n        }\n      }\n    }\n    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n  }\n  var d3_selection_onFilters = d3.map({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n  });\n  if (d3_document) {\n    d3_selection_onFilters.forEach(function(k) {\n      if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);\n    });\n  }\n  function d3_selection_onListener(listener, argumentz) {\n    return function(e) {\n      var o = d3.event;\n      d3.event = e;\n      argumentz[0] = this.__data__;\n      try {\n        listener.apply(this, argumentz);\n      } finally {\n        d3.event = o;\n      }\n    };\n  }\n  function d3_selection_onFilter(listener, argumentz) {\n    var l = d3_selection_onListener(listener, argumentz);\n    return function(e) {\n      var target = this, related = e.relatedTarget;\n      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {\n        l.call(target, e);\n      }\n    };\n  }\n  var d3_event_dragSelect, d3_event_dragId = 0;\n  function d3_event_dragSuppress(node) {\n    var name = \".dragsuppress-\" + ++d3_event_dragId, click = \"click\" + name, w = d3.select(d3_window(node)).on(\"touchmove\" + name, d3_eventPreventDefault).on(\"dragstart\" + name, d3_eventPreventDefault).on(\"selectstart\" + name, d3_eventPreventDefault);\n    if (d3_event_dragSelect == null) {\n      d3_event_dragSelect = \"onselectstart\" in node ? false : d3_vendorSymbol(node.style, \"userSelect\");\n    }\n    if (d3_event_dragSelect) {\n      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];\n      style[d3_event_dragSelect] = \"none\";\n    }\n    return function(suppressClick) {\n      w.on(name, null);\n      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n      if (suppressClick) {\n        var off = function() {\n          w.on(click, null);\n        };\n        w.on(click, function() {\n          d3_eventPreventDefault();\n          off();\n        }, true);\n        setTimeout(off, 0);\n      }\n    };\n  }\n  d3.mouse = function(container) {\n    return d3_mousePoint(container, d3_eventSource());\n  };\n  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;\n  function d3_mousePoint(container, e) {\n    if (e.changedTouches) e = e.changedTouches[0];\n    var svg = container.ownerSVGElement || container;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      if (d3_mouse_bug44083 < 0) {\n        var window = d3_window(container);\n        if (window.scrollX || window.scrollY) {\n          svg = d3.select(\"body\").append(\"svg\").style({\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            margin: 0,\n            padding: 0,\n            border: \"none\"\n          }, \"important\");\n          var ctm = svg[0][0].getScreenCTM();\n          d3_mouse_bug44083 = !(ctm.f || ctm.e);\n          svg.remove();\n        }\n      }\n      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, \n      point.y = e.clientY;\n      point = point.matrixTransform(container.getScreenCTM().inverse());\n      return [ point.x, point.y ];\n    }\n    var rect = container.getBoundingClientRect();\n    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];\n  }\n  d3.touch = function(container, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;\n    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return d3_mousePoint(container, touch);\n      }\n    }\n  };\n  d3.behavior.drag = function() {\n    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, \"mousemove\", \"mouseup\"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, \"touchmove\", \"touchend\");\n    function drag() {\n      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", touchstart);\n    }\n    function dragstart(id, position, subject, move, end) {\n      return function() {\n        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \".drag\" + (dragId == null ? \"\" : \"-\" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);\n        if (origin) {\n          dragOffset = origin.apply(that, arguments);\n          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];\n        } else {\n          dragOffset = [ 0, 0 ];\n        }\n        dispatch({\n          type: \"dragstart\"\n        });\n        function moved() {\n          var position1 = position(parent, dragId), dx, dy;\n          if (!position1) return;\n          dx = position1[0] - position0[0];\n          dy = position1[1] - position0[1];\n          dragged |= dx | dy;\n          position0 = position1;\n          dispatch({\n            type: \"drag\",\n            x: position1[0] + dragOffset[0],\n            y: position1[1] + dragOffset[1],\n            dx: dx,\n            dy: dy\n          });\n        }\n        function ended() {\n          if (!position(parent, dragId)) return;\n          dragSubject.on(move + dragName, null).on(end + dragName, null);\n          dragRestore(dragged);\n          dispatch({\n            type: \"dragend\"\n          });\n        }\n      };\n    }\n    drag.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return drag;\n    };\n    return d3.rebind(drag, event, \"on\");\n  };\n  function d3_behavior_dragTouchId() {\n    return d3.event.changedTouches[0].identifier;\n  }\n  d3.touches = function(container, touches) {\n    if (arguments.length < 2) touches = d3_eventSource().touches;\n    return touches ? d3_array(touches).map(function(touch) {\n      var point = d3_mousePoint(container, touch);\n      point.identifier = touch.identifier;\n      return point;\n    }) : [];\n  };\n  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n  function d3_sgn(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  }\n  function d3_cross2d(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n  function d3_acos(x) {\n    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);\n  }\n  function d3_asin(x) {\n    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);\n  }\n  function d3_sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n  function d3_cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n  function d3_tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n  function d3_haversin(x) {\n    return (x = Math.sin(x / 2)) * x;\n  }\n  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;\n  d3.interpolateZoom = function(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;\n    if (d2 < ε2) {\n      S = Math.log(w1 / w0) / ρ;\n      i = function(t) {\n        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];\n      };\n    } else {\n      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / ρ;\n      i = function(t) {\n        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];\n      };\n    }\n    i.duration = S * 1e3;\n    return i;\n  };\n  d3.behavior.zoom = function() {\n    var view = {\n      x: 0,\n      y: 0,\n      k: 1\n    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \"mousedown.zoom\", mousemove = \"mousemove.zoom\", mouseup = \"mouseup.zoom\", mousewheelTimer, touchstart = \"touchstart.zoom\", touchtime, event = d3_eventDispatch(zoom, \"zoomstart\", \"zoom\", \"zoomend\"), x0, x1, y0, y1;\n    if (!d3_behavior_zoomWheel) {\n      d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n      }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return d3.event.wheelDelta;\n      }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {\n        return -d3.event.detail;\n      }, \"MozMousePixelScroll\");\n    }\n    function zoom(g) {\n      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \".zoom\", mousewheeled).on(\"dblclick.zoom\", dblclicked).on(touchstart, touchstarted);\n    }\n    zoom.event = function(g) {\n      g.each(function() {\n        var dispatch = event.of(this, arguments), view1 = view;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.zoom\", function() {\n            view = this.__chart__ || {\n              x: 0,\n              y: 0,\n              k: 1\n            };\n            zoomstarted(dispatch);\n          }).tween(\"zoom:zoom\", function() {\n            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n            return function(t) {\n              var l = i(t), k = dx / l[2];\n              this.__chart__ = view = {\n                x: cx - l[0] * k,\n                y: cy - l[1] * k,\n                k: k\n              };\n              zoomed(dispatch);\n            };\n          }).each(\"interrupt.zoom\", function() {\n            zoomended(dispatch);\n          }).each(\"end.zoom\", function() {\n            zoomended(dispatch);\n          });\n        } else {\n          this.__chart__ = view;\n          zoomstarted(dispatch);\n          zoomed(dispatch);\n          zoomended(dispatch);\n        }\n      });\n    };\n    zoom.translate = function(_) {\n      if (!arguments.length) return [ view.x, view.y ];\n      view = {\n        x: +_[0],\n        y: +_[1],\n        k: view.k\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scale = function(_) {\n      if (!arguments.length) return view.k;\n      view = {\n        x: view.x,\n        y: view.y,\n        k: null\n      };\n      scaleTo(+_);\n      rescale();\n      return zoom;\n    };\n    zoom.scaleExtent = function(_) {\n      if (!arguments.length) return scaleExtent;\n      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.center = function(_) {\n      if (!arguments.length) return center;\n      center = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.size = function(_) {\n      if (!arguments.length) return size;\n      size = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.duration = function(_) {\n      if (!arguments.length) return duration;\n      duration = +_;\n      return zoom;\n    };\n    zoom.x = function(z) {\n      if (!arguments.length) return x1;\n      x1 = z;\n      x0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    zoom.y = function(z) {\n      if (!arguments.length) return y1;\n      y1 = z;\n      y0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    function location(p) {\n      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];\n    }\n    function point(l) {\n      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];\n    }\n    function scaleTo(s) {\n      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n    }\n    function translateTo(p, l) {\n      l = point(l);\n      view.x += p[0] - l[0];\n      view.y += p[1] - l[1];\n    }\n    function zoomTo(that, p, l, k) {\n      that.__chart__ = {\n        x: view.x,\n        y: view.y,\n        k: view.k\n      };\n      scaleTo(Math.pow(2, k));\n      translateTo(center0 = p, l);\n      that = d3.select(that);\n      if (duration > 0) that = that.transition().duration(duration);\n      that.call(zoom.event);\n    }\n    function rescale() {\n      if (x1) x1.domain(x0.range().map(function(x) {\n        return (x - view.x) / view.k;\n      }).map(x0.invert));\n      if (y1) y1.domain(y0.range().map(function(y) {\n        return (y - view.y) / view.k;\n      }).map(y0.invert));\n    }\n    function zoomstarted(dispatch) {\n      if (!zooming++) dispatch({\n        type: \"zoomstart\"\n      });\n    }\n    function zoomed(dispatch) {\n      rescale();\n      dispatch({\n        type: \"zoom\",\n        scale: view.k,\n        translate: [ view.x, view.y ]\n      });\n    }\n    function zoomended(dispatch) {\n      if (!--zooming) dispatch({\n        type: \"zoomend\"\n      }), center0 = null;\n    }\n    function mousedowned() {\n      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);\n      d3_selection_interrupt.call(that);\n      zoomstarted(dispatch);\n      function moved() {\n        dragged = 1;\n        translateTo(d3.mouse(that), location0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        subject.on(mousemove, null).on(mouseup, null);\n        dragRestore(dragged);\n        zoomended(dispatch);\n      }\n    }\n    function touchstarted() {\n      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \".zoom-\" + d3.event.changedTouches[0].identifier, touchmove = \"touchmove\" + zoomName, touchend = \"touchend\" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);\n      started();\n      zoomstarted(dispatch);\n      subject.on(mousedown, null).on(touchstart, started);\n      function relocate() {\n        var touches = d3.touches(that);\n        scale0 = view.k;\n        touches.forEach(function(t) {\n          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n        });\n        return touches;\n      }\n      function started() {\n        var target = d3.event.target;\n        d3.select(target).on(touchmove, moved).on(touchend, ended);\n        targets.push(target);\n        var changed = d3.event.changedTouches;\n        for (var i = 0, n = changed.length; i < n; ++i) {\n          locations0[changed[i].identifier] = null;\n        }\n        var touches = relocate(), now = Date.now();\n        if (touches.length === 1) {\n          if (now - touchtime < 500) {\n            var p = touches[0];\n            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n            d3_eventPreventDefault();\n          }\n          touchtime = now;\n        } else if (touches.length > 1) {\n          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];\n          distance0 = dx * dx + dy * dy;\n        }\n      }\n      function moved() {\n        var touches = d3.touches(that), p0, l0, p1, l1;\n        d3_selection_interrupt.call(that);\n        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {\n          p1 = touches[i];\n          if (l1 = locations0[p1.identifier]) {\n            if (l0) break;\n            p0 = p1, l0 = l1;\n          }\n        }\n        if (l1) {\n          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);\n          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];\n          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];\n          scaleTo(scale1 * scale0);\n        }\n        touchtime = null;\n        translateTo(p0, l0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        if (d3.event.touches.length) {\n          var changed = d3.event.changedTouches;\n          for (var i = 0, n = changed.length; i < n; ++i) {\n            delete locations0[changed[i].identifier];\n          }\n          for (var identifier in locations0) {\n            return void relocate();\n          }\n        }\n        d3.selectAll(targets).on(zoomName, null);\n        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n        dragRestore();\n        zoomended(dispatch);\n      }\n    }\n    function mousewheeled() {\n      var dispatch = event.of(this, arguments);\n      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), \n      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);\n      mousewheelTimer = setTimeout(function() {\n        mousewheelTimer = null;\n        zoomended(dispatch);\n      }, 50);\n      d3_eventPreventDefault();\n      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n      translateTo(center0, translate0);\n      zoomed(dispatch);\n    }\n    function dblclicked() {\n      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;\n      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n    }\n    return d3.rebind(zoom, event, \"on\");\n  };\n  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;\n  d3.color = d3_color;\n  function d3_color() {}\n  d3_color.prototype.toString = function() {\n    return this.rgb() + \"\";\n  };\n  d3.hsl = d3_hsl;\n  function d3_hsl(h, s, l) {\n    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n  }\n  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n  d3_hslPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, this.l / k);\n  };\n  d3_hslPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, k * this.l);\n  };\n  d3_hslPrototype.rgb = function() {\n    return d3_hsl_rgb(this.h, this.s, this.l);\n  };\n  function d3_hsl_rgb(h, s, l) {\n    var m1, m2;\n    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;\n    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;\n    l = l < 0 ? 0 : l > 1 ? 1 : l;\n    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;\n    m1 = 2 * l - m2;\n    function v(h) {\n      if (h > 360) h -= 360; else if (h < 0) h += 360;\n      if (h < 60) return m1 + (m2 - m1) * h / 60;\n      if (h < 180) return m2;\n      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;\n      return m1;\n    }\n    function vv(h) {\n      return Math.round(v(h) * 255);\n    }\n    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n  }\n  d3.hcl = d3_hcl;\n  function d3_hcl(h, c, l) {\n    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n  }\n  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n  d3_hclPrototype.brighter = function(k) {\n    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.darker = function(k) {\n    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.rgb = function() {\n    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n  };\n  function d3_hcl_lab(h, c, l) {\n    if (isNaN(h)) h = 0;\n    if (isNaN(c)) c = 0;\n    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n  }\n  d3.lab = d3_lab;\n  function d3_lab(l, a, b) {\n    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n  }\n  var d3_lab_K = 18;\n  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;\n  var d3_labPrototype = d3_lab.prototype = new d3_color();\n  d3_labPrototype.brighter = function(k) {\n    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.darker = function(k) {\n    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.rgb = function() {\n    return d3_lab_rgb(this.l, this.a, this.b);\n  };\n  function d3_lab_rgb(l, a, b) {\n    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;\n    x = d3_lab_xyz(x) * d3_lab_X;\n    y = d3_lab_xyz(y) * d3_lab_Y;\n    z = d3_lab_xyz(z) * d3_lab_Z;\n    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n  }\n  function d3_lab_hcl(l, a, b) {\n    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n  }\n  function d3_lab_xyz(x) {\n    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n  }\n  function d3_xyz_lab(x) {\n    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n  }\n  function d3_xyz_rgb(r) {\n    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n  }\n  d3.rgb = d3_rgb;\n  function d3_rgb(r, g, b) {\n    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n  }\n  function d3_rgbNumber(value) {\n    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);\n  }\n  function d3_rgbString(value) {\n    return d3_rgbNumber(value) + \"\";\n  }\n  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n  d3_rgbPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    var r = this.r, g = this.g, b = this.b, i = 30;\n    if (!r && !g && !b) return new d3_rgb(i, i, i);\n    if (r && r < i) r = i;\n    if (g && g < i) g = i;\n    if (b && b < i) b = i;\n    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n  };\n  d3_rgbPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n  };\n  d3_rgbPrototype.hsl = function() {\n    return d3_rgb_hsl(this.r, this.g, this.b);\n  };\n  d3_rgbPrototype.toString = function() {\n    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n  };\n  function d3_rgb_hex(v) {\n    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n  }\n  function d3_rgb_parse(format, rgb, hsl) {\n    var r = 0, g = 0, b = 0, m1, m2, color;\n    m1 = /([a-z]+)\\((.*)\\)/.exec(format = format.toLowerCase());\n    if (m1) {\n      m2 = m1[2].split(\",\");\n      switch (m1[1]) {\n       case \"hsl\":\n        {\n          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n        }\n\n       case \"rgb\":\n        {\n          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n        }\n      }\n    }\n    if (color = d3_rgb_names.get(format)) {\n      return rgb(color.r, color.g, color.b);\n    }\n    if (format != null && format.charAt(0) === \"#\" && !isNaN(color = parseInt(format.slice(1), 16))) {\n      if (format.length === 4) {\n        r = (color & 3840) >> 4;\n        r = r >> 4 | r;\n        g = color & 240;\n        g = g >> 4 | g;\n        b = color & 15;\n        b = b << 4 | b;\n      } else if (format.length === 7) {\n        r = (color & 16711680) >> 16;\n        g = (color & 65280) >> 8;\n        b = color & 255;\n      }\n    }\n    return rgb(r, g, b);\n  }\n  function d3_rgb_hsl(r, g, b) {\n    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n    if (d) {\n      s = l < .5 ? d / (max + min) : d / (2 - max - min);\n      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n      h *= 60;\n    } else {\n      h = NaN;\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new d3_hsl(h, s, l);\n  }\n  function d3_rgb_lab(r, g, b) {\n    r = d3_rgb_xyz(r);\n    g = d3_rgb_xyz(g);\n    b = d3_rgb_xyz(b);\n    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n  }\n  function d3_rgb_xyz(r) {\n    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n  }\n  function d3_rgb_parseNumber(c) {\n    var f = parseFloat(c);\n    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;\n  }\n  var d3_rgb_names = d3.map({\n    aliceblue: 15792383,\n    antiquewhite: 16444375,\n    aqua: 65535,\n    aquamarine: 8388564,\n    azure: 15794175,\n    beige: 16119260,\n    bisque: 16770244,\n    black: 0,\n    blanchedalmond: 16772045,\n    blue: 255,\n    blueviolet: 9055202,\n    brown: 10824234,\n    burlywood: 14596231,\n    cadetblue: 6266528,\n    chartreuse: 8388352,\n    chocolate: 13789470,\n    coral: 16744272,\n    cornflowerblue: 6591981,\n    cornsilk: 16775388,\n    crimson: 14423100,\n    cyan: 65535,\n    darkblue: 139,\n    darkcyan: 35723,\n    darkgoldenrod: 12092939,\n    darkgray: 11119017,\n    darkgreen: 25600,\n    darkgrey: 11119017,\n    darkkhaki: 12433259,\n    darkmagenta: 9109643,\n    darkolivegreen: 5597999,\n    darkorange: 16747520,\n    darkorchid: 10040012,\n    darkred: 9109504,\n    darksalmon: 15308410,\n    darkseagreen: 9419919,\n    darkslateblue: 4734347,\n    darkslategray: 3100495,\n    darkslategrey: 3100495,\n    darkturquoise: 52945,\n    darkviolet: 9699539,\n    deeppink: 16716947,\n    deepskyblue: 49151,\n    dimgray: 6908265,\n    dimgrey: 6908265,\n    dodgerblue: 2003199,\n    firebrick: 11674146,\n    floralwhite: 16775920,\n    forestgreen: 2263842,\n    fuchsia: 16711935,\n    gainsboro: 14474460,\n    ghostwhite: 16316671,\n    gold: 16766720,\n    goldenrod: 14329120,\n    gray: 8421504,\n    green: 32768,\n    greenyellow: 11403055,\n    grey: 8421504,\n    honeydew: 15794160,\n    hotpink: 16738740,\n    indianred: 13458524,\n    indigo: 4915330,\n    ivory: 16777200,\n    khaki: 15787660,\n    lavender: 15132410,\n    lavenderblush: 16773365,\n    lawngreen: 8190976,\n    lemonchiffon: 16775885,\n    lightblue: 11393254,\n    lightcoral: 15761536,\n    lightcyan: 14745599,\n    lightgoldenrodyellow: 16448210,\n    lightgray: 13882323,\n    lightgreen: 9498256,\n    lightgrey: 13882323,\n    lightpink: 16758465,\n    lightsalmon: 16752762,\n    lightseagreen: 2142890,\n    lightskyblue: 8900346,\n    lightslategray: 7833753,\n    lightslategrey: 7833753,\n    lightsteelblue: 11584734,\n    lightyellow: 16777184,\n    lime: 65280,\n    limegreen: 3329330,\n    linen: 16445670,\n    magenta: 16711935,\n    maroon: 8388608,\n    mediumaquamarine: 6737322,\n    mediumblue: 205,\n    mediumorchid: 12211667,\n    mediumpurple: 9662683,\n    mediumseagreen: 3978097,\n    mediumslateblue: 8087790,\n    mediumspringgreen: 64154,\n    mediumturquoise: 4772300,\n    mediumvioletred: 13047173,\n    midnightblue: 1644912,\n    mintcream: 16121850,\n    mistyrose: 16770273,\n    moccasin: 16770229,\n    navajowhite: 16768685,\n    navy: 128,\n    oldlace: 16643558,\n    olive: 8421376,\n    olivedrab: 7048739,\n    orange: 16753920,\n    orangered: 16729344,\n    orchid: 14315734,\n    palegoldenrod: 15657130,\n    palegreen: 10025880,\n    paleturquoise: 11529966,\n    palevioletred: 14381203,\n    papayawhip: 16773077,\n    peachpuff: 16767673,\n    peru: 13468991,\n    pink: 16761035,\n    plum: 14524637,\n    powderblue: 11591910,\n    purple: 8388736,\n    rebeccapurple: 6697881,\n    red: 16711680,\n    rosybrown: 12357519,\n    royalblue: 4286945,\n    saddlebrown: 9127187,\n    salmon: 16416882,\n    sandybrown: 16032864,\n    seagreen: 3050327,\n    seashell: 16774638,\n    sienna: 10506797,\n    silver: 12632256,\n    skyblue: 8900331,\n    slateblue: 6970061,\n    slategray: 7372944,\n    slategrey: 7372944,\n    snow: 16775930,\n    springgreen: 65407,\n    steelblue: 4620980,\n    tan: 13808780,\n    teal: 32896,\n    thistle: 14204888,\n    tomato: 16737095,\n    turquoise: 4251856,\n    violet: 15631086,\n    wheat: 16113331,\n    white: 16777215,\n    whitesmoke: 16119285,\n    yellow: 16776960,\n    yellowgreen: 10145074\n  });\n  d3_rgb_names.forEach(function(key, value) {\n    d3_rgb_names.set(key, d3_rgbNumber(value));\n  });\n  function d3_functor(v) {\n    return typeof v === \"function\" ? v : function() {\n      return v;\n    };\n  }\n  d3.functor = d3_functor;\n  d3.xhr = d3_xhrType(d3_identity);\n  function d3_xhrType(response) {\n    return function(url, mimeType, callback) {\n      if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType, \n      mimeType = null;\n      return d3_xhr(url, mimeType, response, callback);\n    };\n  }\n  function d3_xhr(url, mimeType, response, callback) {\n    var xhr = {}, dispatch = d3.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"), headers = {}, request = new XMLHttpRequest(), responseType = null;\n    if (this.XDomainRequest && !(\"withCredentials\" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {\n      request.readyState > 3 && respond();\n    };\n    function respond() {\n      var status = request.status, result;\n      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {\n        try {\n          result = response.call(xhr, request);\n        } catch (e) {\n          dispatch.error.call(xhr, e);\n          return;\n        }\n        dispatch.load.call(xhr, result);\n      } else {\n        dispatch.error.call(xhr, request);\n      }\n    }\n    request.onprogress = function(event) {\n      var o = d3.event;\n      d3.event = event;\n      try {\n        dispatch.progress.call(xhr, request);\n      } finally {\n        d3.event = o;\n      }\n    };\n    xhr.header = function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers[name];\n      if (value == null) delete headers[name]; else headers[name] = value + \"\";\n      return xhr;\n    };\n    xhr.mimeType = function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return xhr;\n    };\n    xhr.responseType = function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return xhr;\n    };\n    xhr.response = function(value) {\n      response = value;\n      return xhr;\n    };\n    [ \"get\", \"post\" ].forEach(function(method) {\n      xhr[method] = function() {\n        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));\n      };\n    });\n    xhr.send = function(method, data, callback) {\n      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;\n      request.open(method, url, true);\n      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";\n      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);\n      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);\n      if (responseType != null) request.responseType = responseType;\n      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {\n        callback(null, request);\n      });\n      dispatch.beforesend.call(xhr, request);\n      request.send(data == null ? null : data);\n      return xhr;\n    };\n    xhr.abort = function() {\n      request.abort();\n      return xhr;\n    };\n    d3.rebind(xhr, dispatch, \"on\");\n    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n  }\n  function d3_xhr_fixCallback(callback) {\n    return callback.length === 1 ? function(error, request) {\n      callback(error == null ? request : null);\n    } : callback;\n  }\n  function d3_xhrHasResponse(request) {\n    var type = request.responseType;\n    return type && type !== \"text\" ? request.response : request.responseText;\n  }\n  d3.dsv = function(delimiter, mimeType) {\n    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);\n    function dsv(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n      xhr.row = function(_) {\n        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n      };\n      return xhr;\n    }\n    function response(request) {\n      return dsv.parse(request.responseText);\n    }\n    function typedResponse(f) {\n      return function(request) {\n        return dsv.parse(request.responseText, f);\n      };\n    }\n    dsv.parse = function(text, f) {\n      var o;\n      return dsv.parseRows(text, function(row, i) {\n        if (o) return o(row, i - 1);\n        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {\n          return JSON.stringify(name) + \": d[\" + i + \"]\";\n        }).join(\",\") + \"}\");\n        o = f ? function(row, i) {\n          return f(a(row), i);\n        } : a;\n      });\n    };\n    dsv.parseRows = function(text, f) {\n      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n      function token() {\n        if (I >= N) return EOF;\n        if (eol) return eol = false, EOL;\n        var j = I;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          var c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, '\"');\n        }\n        while (I < N) {\n          var c = text.charCodeAt(I++), k = 1;\n          if (c === 10) eol = true; else if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(I) === 10) ++I, ++k;\n          } else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n        return text.slice(j);\n      }\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n      return rows;\n    };\n    dsv.format = function(rows) {\n      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n      var fieldSet = new d3_Set(), fields = [];\n      rows.forEach(function(row) {\n        for (var field in row) {\n          if (!fieldSet.has(field)) {\n            fields.push(fieldSet.add(field));\n          }\n        }\n      });\n      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {\n        return fields.map(function(field) {\n          return formatValue(row[field]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    };\n    dsv.formatRows = function(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    };\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n    function formatValue(text) {\n      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;\n    }\n    return dsv;\n  };\n  d3.csv = d3.dsv(\",\", \"text/csv\");\n  d3.tsv = d3.dsv(\"\t\", \"text/tab-separated-values\");\n  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, \"requestAnimationFrame\")] || function(callback) {\n    setTimeout(callback, 17);\n  };\n  d3.timer = function() {\n    d3_timer.apply(this, arguments);\n  };\n  function d3_timer(callback, delay, then) {\n    var n = arguments.length;\n    if (n < 2) delay = 0;\n    if (n < 3) then = Date.now();\n    var time = then + delay, timer = {\n      c: callback,\n      t: time,\n      n: null\n    };\n    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;\n    d3_timer_queueTail = timer;\n    if (!d3_timer_interval) {\n      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n    return timer;\n  }\n  function d3_timer_step() {\n    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;\n    if (delay > 24) {\n      if (isFinite(delay)) {\n        clearTimeout(d3_timer_timeout);\n        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n      }\n      d3_timer_interval = 0;\n    } else {\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  }\n  d3.timer.flush = function() {\n    d3_timer_mark();\n    d3_timer_sweep();\n  };\n  function d3_timer_mark() {\n    var now = Date.now(), timer = d3_timer_queueHead;\n    while (timer) {\n      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;\n      timer = timer.n;\n    }\n    return now;\n  }\n  function d3_timer_sweep() {\n    var t0, t1 = d3_timer_queueHead, time = Infinity;\n    while (t1) {\n      if (t1.c) {\n        if (t1.t < time) time = t1.t;\n        t1 = (t0 = t1).n;\n      } else {\n        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n      }\n    }\n    d3_timer_queueTail = t0;\n    return time;\n  }\n  function d3_format_precision(x, p) {\n    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n  }\n  d3.round = function(x, n) {\n    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n  };\n  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n  d3.formatPrefix = function(value, precision) {\n    var i = 0;\n    if (value = +value) {\n      if (value < 0) value *= -1;\n      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n    }\n    return d3_formatPrefixes[8 + i / 3];\n  };\n  function d3_formatPrefix(d, i) {\n    var k = Math.pow(10, abs(8 - i) * 3);\n    return {\n      scale: i > 8 ? function(d) {\n        return d / k;\n      } : function(d) {\n        return d * k;\n      },\n      symbol: d\n    };\n  }\n  function d3_locale_numberFormat(locale) {\n    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {\n      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n      }\n      return t.reverse().join(locale_thousands);\n    } : d3_identity;\n    return function(specifier) {\n      var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"-\", symbol = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \"\", suffix = \"\", integer = false, exponent = true;\n      if (precision) precision = +precision.substring(1);\n      if (zfill || fill === \"0\" && align === \"=\") {\n        zfill = fill = \"0\";\n        align = \"=\";\n      }\n      switch (type) {\n       case \"n\":\n        comma = true;\n        type = \"g\";\n        break;\n\n       case \"%\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"f\";\n        break;\n\n       case \"p\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"r\";\n        break;\n\n       case \"b\":\n       case \"o\":\n       case \"x\":\n       case \"X\":\n        if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();\n\n       case \"c\":\n        exponent = false;\n\n       case \"d\":\n        integer = true;\n        precision = 0;\n        break;\n\n       case \"s\":\n        scale = -1;\n        type = \"r\";\n        break;\n      }\n      if (symbol === \"$\") prefix = locale_currency[0], suffix = locale_currency[1];\n      if (type == \"r\" && !precision) type = \"g\";\n      if (precision != null) {\n        if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n      }\n      type = d3_format_types.get(type) || d3_format_typeDefault;\n      var zcomma = zfill && comma;\n      return function(value) {\n        var fullSuffix = suffix;\n        if (integer && value % 1) return \"\";\n        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign === \"-\" ? \"\" : sign;\n        if (scale < 0) {\n          var unit = d3.formatPrefix(value, precision);\n          value = unit.scale(value);\n          fullSuffix = unit.symbol + suffix;\n        } else {\n          value *= scale;\n        }\n        value = type(value, precision);\n        var i = value.lastIndexOf(\".\"), before, after;\n        if (i < 0) {\n          var j = exponent ? value.lastIndexOf(\"e\") : -1;\n          if (j < 0) before = value, after = \"\"; else before = value.substring(0, j), after = value.substring(j);\n        } else {\n          before = value.substring(0, i);\n          after = locale_decimal + value.substring(i + 1);\n        }\n        if (!zfill && comma) before = formatGroup(before, Infinity);\n        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n        negative += prefix;\n        value = before + after;\n        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n      };\n    };\n  }\n  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n  var d3_format_types = d3.map({\n    b: function(x) {\n      return x.toString(2);\n    },\n    c: function(x) {\n      return String.fromCharCode(x);\n    },\n    o: function(x) {\n      return x.toString(8);\n    },\n    x: function(x) {\n      return x.toString(16);\n    },\n    X: function(x) {\n      return x.toString(16).toUpperCase();\n    },\n    g: function(x, p) {\n      return x.toPrecision(p);\n    },\n    e: function(x, p) {\n      return x.toExponential(p);\n    },\n    f: function(x, p) {\n      return x.toFixed(p);\n    },\n    r: function(x, p) {\n      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n    }\n  });\n  function d3_format_typeDefault(x) {\n    return x + \"\";\n  }\n  var d3_time = d3.time = {}, d3_date = Date;\n  function d3_date_utc() {\n    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n  }\n  d3_date_utc.prototype = {\n    getDate: function() {\n      return this._.getUTCDate();\n    },\n    getDay: function() {\n      return this._.getUTCDay();\n    },\n    getFullYear: function() {\n      return this._.getUTCFullYear();\n    },\n    getHours: function() {\n      return this._.getUTCHours();\n    },\n    getMilliseconds: function() {\n      return this._.getUTCMilliseconds();\n    },\n    getMinutes: function() {\n      return this._.getUTCMinutes();\n    },\n    getMonth: function() {\n      return this._.getUTCMonth();\n    },\n    getSeconds: function() {\n      return this._.getUTCSeconds();\n    },\n    getTime: function() {\n      return this._.getTime();\n    },\n    getTimezoneOffset: function() {\n      return 0;\n    },\n    valueOf: function() {\n      return this._.valueOf();\n    },\n    setDate: function() {\n      d3_time_prototype.setUTCDate.apply(this._, arguments);\n    },\n    setDay: function() {\n      d3_time_prototype.setUTCDay.apply(this._, arguments);\n    },\n    setFullYear: function() {\n      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n    },\n    setHours: function() {\n      d3_time_prototype.setUTCHours.apply(this._, arguments);\n    },\n    setMilliseconds: function() {\n      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n    },\n    setMinutes: function() {\n      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n    },\n    setMonth: function() {\n      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n    },\n    setSeconds: function() {\n      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n    },\n    setTime: function() {\n      d3_time_prototype.setTime.apply(this._, arguments);\n    }\n  };\n  var d3_time_prototype = Date.prototype;\n  function d3_time_interval(local, step, number) {\n    function round(date) {\n      var d0 = local(date), d1 = offset(d0, 1);\n      return date - d0 < d1 - date ? d0 : d1;\n    }\n    function ceil(date) {\n      step(date = local(new d3_date(date - 1)), 1);\n      return date;\n    }\n    function offset(date, k) {\n      step(date = new d3_date(+date), k);\n      return date;\n    }\n    function range(t0, t1, dt) {\n      var time = ceil(t0), times = [];\n      if (dt > 1) {\n        while (time < t1) {\n          if (!(number(time) % dt)) times.push(new Date(+time));\n          step(time, 1);\n        }\n      } else {\n        while (time < t1) times.push(new Date(+time)), step(time, 1);\n      }\n      return times;\n    }\n    function range_utc(t0, t1, dt) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = t0;\n        return range(utc, t1, dt);\n      } finally {\n        d3_date = Date;\n      }\n    }\n    local.floor = local;\n    local.round = round;\n    local.ceil = ceil;\n    local.offset = offset;\n    local.range = range;\n    var utc = local.utc = d3_time_interval_utc(local);\n    utc.floor = utc;\n    utc.round = d3_time_interval_utc(round);\n    utc.ceil = d3_time_interval_utc(ceil);\n    utc.offset = d3_time_interval_utc(offset);\n    utc.range = range_utc;\n    return local;\n  }\n  function d3_time_interval_utc(method) {\n    return function(date, k) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = date;\n        return method(utc, k)._;\n      } finally {\n        d3_date = Date;\n      }\n    };\n  }\n  d3_time.year = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setMonth(0, 1);\n    return date;\n  }, function(date, offset) {\n    date.setFullYear(date.getFullYear() + offset);\n  }, function(date) {\n    return date.getFullYear();\n  });\n  d3_time.years = d3_time.year.range;\n  d3_time.years.utc = d3_time.year.utc.range;\n  d3_time.day = d3_time_interval(function(date) {\n    var day = new d3_date(2e3, 0);\n    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    return day;\n  }, function(date, offset) {\n    date.setDate(date.getDate() + offset);\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n  d3_time.days = d3_time.day.range;\n  d3_time.days.utc = d3_time.day.utc.range;\n  d3_time.dayOfYear = function(date) {\n    var year = d3_time.year(date);\n    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n  };\n  [ \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\" ].forEach(function(day, i) {\n    i = 7 - i;\n    var interval = d3_time[day] = d3_time_interval(function(date) {\n      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n      return date;\n    }, function(date, offset) {\n      date.setDate(date.getDate() + Math.floor(offset) * 7);\n    }, function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n    });\n    d3_time[day + \"s\"] = interval.range;\n    d3_time[day + \"s\"].utc = interval.utc.range;\n    d3_time[day + \"OfYear\"] = function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n    };\n  });\n  d3_time.week = d3_time.sunday;\n  d3_time.weeks = d3_time.sunday.range;\n  d3_time.weeks.utc = d3_time.sunday.utc.range;\n  d3_time.weekOfYear = d3_time.sundayOfYear;\n  function d3_locale_timeFormat(locale) {\n    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n    function d3_time_format(template) {\n      var n = template.length;\n      function format(date) {\n        var string = [], i = -1, j = 0, c, p, f;\n        while (++i < n) {\n          if (template.charCodeAt(i) === 37) {\n            string.push(template.slice(j, i));\n            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n        string.push(template.slice(j, i));\n        return string.join(\"\");\n      }\n      format.parse = function(string) {\n        var d = {\n          y: 1900,\n          m: 0,\n          d: 1,\n          H: 0,\n          M: 0,\n          S: 0,\n          L: 0,\n          Z: null\n        }, i = d3_time_parse(d, template, string, 0);\n        if (i != string.length) return null;\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();\n        if (\"j\" in d) date.setFullYear(d.y, 0, d.j); else if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n          date.setFullYear(d.y, 0, 1);\n          date.setFullYear(d.y, 0, \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n        } else date.setFullYear(d.y, d.m, d.d);\n        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n        return localZ ? date._ : date;\n      };\n      format.toString = function() {\n        return template;\n      };\n      return format;\n    }\n    function d3_time_parse(date, template, string, j) {\n      var c, p, t, i = 0, n = template.length, m = string.length;\n      while (i < n) {\n        if (j >= m) return -1;\n        c = template.charCodeAt(i++);\n        if (c === 37) {\n          t = template.charAt(i++);\n          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n          if (!p || (j = p(date, string, j)) < 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n      return j;\n    }\n    d3_time_format.utc = function(template) {\n      var local = d3_time_format(template);\n      function format(date) {\n        try {\n          d3_date = d3_date_utc;\n          var utc = new d3_date();\n          utc._ = date;\n          return local(utc);\n        } finally {\n          d3_date = Date;\n        }\n      }\n      format.parse = function(string) {\n        try {\n          d3_date = d3_date_utc;\n          var date = local.parse(string);\n          return date && date._;\n        } finally {\n          d3_date = Date;\n        }\n      };\n      format.toString = local.toString;\n      return format;\n    };\n    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n    locale_periods.forEach(function(p, i) {\n      d3_time_periodLookup.set(p.toLowerCase(), i);\n    });\n    var d3_time_formats = {\n      a: function(d) {\n        return locale_shortDays[d.getDay()];\n      },\n      A: function(d) {\n        return locale_days[d.getDay()];\n      },\n      b: function(d) {\n        return locale_shortMonths[d.getMonth()];\n      },\n      B: function(d) {\n        return locale_months[d.getMonth()];\n      },\n      c: d3_time_format(locale_dateTime),\n      d: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      e: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      H: function(d, p) {\n        return d3_time_formatPad(d.getHours(), p, 2);\n      },\n      I: function(d, p) {\n        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n      },\n      j: function(d, p) {\n        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n      },\n      L: function(d, p) {\n        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n      },\n      m: function(d, p) {\n        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n      },\n      M: function(d, p) {\n        return d3_time_formatPad(d.getMinutes(), p, 2);\n      },\n      p: function(d) {\n        return locale_periods[+(d.getHours() >= 12)];\n      },\n      S: function(d, p) {\n        return d3_time_formatPad(d.getSeconds(), p, 2);\n      },\n      U: function(d, p) {\n        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n      },\n      w: function(d) {\n        return d.getDay();\n      },\n      W: function(d, p) {\n        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n      },\n      x: d3_time_format(locale_date),\n      X: d3_time_format(locale_time),\n      y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n      },\n      Y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n      },\n      Z: d3_time_zone,\n      \"%\": function() {\n        return \"%\";\n      }\n    };\n    var d3_time_parsers = {\n      a: d3_time_parseWeekdayAbbrev,\n      A: d3_time_parseWeekday,\n      b: d3_time_parseMonthAbbrev,\n      B: d3_time_parseMonth,\n      c: d3_time_parseLocaleFull,\n      d: d3_time_parseDay,\n      e: d3_time_parseDay,\n      H: d3_time_parseHour24,\n      I: d3_time_parseHour24,\n      j: d3_time_parseDayOfYear,\n      L: d3_time_parseMilliseconds,\n      m: d3_time_parseMonthNumber,\n      M: d3_time_parseMinutes,\n      p: d3_time_parseAmPm,\n      S: d3_time_parseSeconds,\n      U: d3_time_parseWeekNumberSunday,\n      w: d3_time_parseWeekdayNumber,\n      W: d3_time_parseWeekNumberMonday,\n      x: d3_time_parseLocaleDate,\n      X: d3_time_parseLocaleTime,\n      y: d3_time_parseYear,\n      Y: d3_time_parseFullYear,\n      Z: d3_time_parseZone,\n      \"%\": d3_time_parseLiteralPercent\n    };\n    function d3_time_parseWeekdayAbbrev(date, string, i) {\n      d3_time_dayAbbrevRe.lastIndex = 0;\n      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseWeekday(date, string, i) {\n      d3_time_dayRe.lastIndex = 0;\n      var n = d3_time_dayRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonthAbbrev(date, string, i) {\n      d3_time_monthAbbrevRe.lastIndex = 0;\n      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonth(date, string, i) {\n      d3_time_monthRe.lastIndex = 0;\n      var n = d3_time_monthRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseLocaleFull(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n    }\n    function d3_time_parseLocaleDate(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n    }\n    function d3_time_parseLocaleTime(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n    }\n    function d3_time_parseAmPm(date, string, i) {\n      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n      return n == null ? -1 : (date.p = n, i);\n    }\n    return d3_time_format;\n  }\n  var d3_time_formatPads = {\n    \"-\": \"\",\n    _: \" \",\n    \"0\": \"0\"\n  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;\n  function d3_time_formatPad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\", string = (sign ? -value : value) + \"\", length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n  function d3_time_formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");\n  }\n  function d3_time_formatLookup(names) {\n    var map = new d3_Map(), i = -1, n = names.length;\n    while (++i < n) map.set(names[i].toLowerCase(), i);\n    return map;\n  }\n  function d3_time_parseWeekdayNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n    return n ? (date.w = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberSunday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.U = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberMonday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.W = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseFullYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n    return n ? (date.y = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n  }\n  function d3_time_parseZone(date, string, i) {\n    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, \n    i + 5) : -1;\n  }\n  function d3_time_expandYear(d) {\n    return d + (d > 68 ? 1900 : 2e3);\n  }\n  function d3_time_parseMonthNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n  }\n  function d3_time_parseDay(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.d = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseDayOfYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.j = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseHour24(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.H = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMinutes(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.M = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseSeconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.S = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMilliseconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.L = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_zone(d) {\n    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = abs(z) / 60 | 0, zm = abs(z) % 60;\n    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);\n  }\n  function d3_time_parseLiteralPercent(date, string, i) {\n    d3_time_percentRe.lastIndex = 0;\n    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n  function d3_time_formatMulti(formats) {\n    var n = formats.length, i = -1;\n    while (++i < n) formats[i][0] = this(formats[i][0]);\n    return function(date) {\n      var i = 0, f = formats[i];\n      while (!f[1](date)) f = formats[++i];\n      return f[0](date);\n    };\n  }\n  d3.locale = function(locale) {\n    return {\n      numberFormat: d3_locale_numberFormat(locale),\n      timeFormat: d3_locale_timeFormat(locale)\n    };\n  };\n  var d3_locale_enUS = d3.locale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [ 3 ],\n    currency: [ \"$\", \"\" ],\n    dateTime: \"%a %b %e %X %Y\",\n    date: \"%m/%d/%Y\",\n    time: \"%H:%M:%S\",\n    periods: [ \"AM\", \"PM\" ],\n    days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],\n    shortDays: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],\n    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n    shortMonths: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\n  });\n  d3.format = d3_locale_enUS.numberFormat;\n  d3.geo = {};\n  function d3_adder() {}\n  d3_adder.prototype = {\n    s: 0,\n    t: 0,\n    add: function(y) {\n      d3_adderSum(y, this.t, d3_adderTemp);\n      d3_adderSum(d3_adderTemp.s, this.s, this);\n      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;\n    },\n    reset: function() {\n      this.s = this.t = 0;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n  var d3_adderTemp = new d3_adder();\n  function d3_adderSum(a, b, o) {\n    var x = o.s = a + b, bv = x - a, av = x - bv;\n    o.t = a - av + (b - bv);\n  }\n  d3.geo.stream = function(object, listener) {\n    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n      d3_geo_streamObjectType[object.type](object, listener);\n    } else {\n      d3_geo_streamGeometry(object, listener);\n    }\n  };\n  function d3_geo_streamGeometry(geometry, listener) {\n    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n    }\n  }\n  var d3_geo_streamObjectType = {\n    Feature: function(feature, listener) {\n      d3_geo_streamGeometry(feature.geometry, listener);\n    },\n    FeatureCollection: function(object, listener) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);\n    }\n  };\n  var d3_geo_streamGeometryType = {\n    Sphere: function(object, listener) {\n      listener.sphere();\n    },\n    Point: function(object, listener) {\n      object = object.coordinates;\n      listener.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, listener) {\n      d3_geo_streamLine(object.coordinates, listener, 0);\n    },\n    MultiLineString: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);\n    },\n    Polygon: function(object, listener) {\n      d3_geo_streamPolygon(object.coordinates, listener);\n    },\n    MultiPolygon: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);\n    },\n    GeometryCollection: function(object, listener) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);\n    }\n  };\n  function d3_geo_streamLine(coordinates, listener, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    listener.lineStart();\n    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n    listener.lineEnd();\n  }\n  function d3_geo_streamPolygon(coordinates, listener) {\n    var i = -1, n = coordinates.length;\n    listener.polygonStart();\n    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);\n    listener.polygonEnd();\n  }\n  d3.geo.area = function(object) {\n    d3_geo_areaSum = 0;\n    d3.geo.stream(object, d3_geo_area);\n    return d3_geo_areaSum;\n  };\n  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();\n  var d3_geo_area = {\n    sphere: function() {\n      d3_geo_areaSum += 4 * π;\n    },\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_areaRingSum.reset();\n      d3_geo_area.lineStart = d3_geo_areaRingStart;\n    },\n    polygonEnd: function() {\n      var area = 2 * d3_geo_areaRingSum;\n      d3_geo_areaSum += area < 0 ? 4 * π + area : area;\n      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n    }\n  };\n  function d3_geo_areaRingStart() {\n    var λ00, φ00, λ0, cosφ0, sinφ0;\n    d3_geo_area.point = function(λ, φ) {\n      d3_geo_area.point = nextPoint;\n      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), \n      sinφ0 = Math.sin(φ);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      φ = φ * d3_radians / 2 + π / 4;\n      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n      d3_geo_areaRingSum.add(Math.atan2(v, u));\n      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n    }\n    d3_geo_area.lineEnd = function() {\n      nextPoint(λ00, φ00);\n    };\n  }\n  function d3_geo_cartesian(spherical) {\n    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);\n    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];\n  }\n  function d3_geo_cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n  function d3_geo_cartesianCross(a, b) {\n    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];\n  }\n  function d3_geo_cartesianAdd(a, b) {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n  }\n  function d3_geo_cartesianScale(vector, k) {\n    return [ vector[0] * k, vector[1] * k, vector[2] * k ];\n  }\n  function d3_geo_cartesianNormalize(d) {\n    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l;\n    d[1] /= l;\n    d[2] /= l;\n  }\n  function d3_geo_spherical(cartesian) {\n    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];\n  }\n  function d3_geo_sphericalEqual(a, b) {\n    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;\n  }\n  d3.geo.bounds = function() {\n    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n    var bound = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        bound.point = ringPoint;\n        bound.lineStart = ringStart;\n        bound.lineEnd = ringEnd;\n        dλSum = 0;\n        d3_geo_area.polygonStart();\n      },\n      polygonEnd: function() {\n        d3_geo_area.polygonEnd();\n        bound.point = point;\n        bound.lineStart = lineStart;\n        bound.lineEnd = lineEnd;\n        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;\n        range[0] = λ0, range[1] = λ1;\n      }\n    };\n    function point(λ, φ) {\n      ranges.push(range = [ λ0 = λ, λ1 = λ ]);\n      if (φ < φ0) φ0 = φ;\n      if (φ > φ1) φ1 = φ;\n    }\n    function linePoint(λ, φ) {\n      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);\n      if (p0) {\n        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n        d3_geo_cartesianNormalize(inflection);\n        inflection = d3_geo_spherical(inflection);\n        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;\n        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = inflection[1] * d3_degrees;\n          if (φi > φ1) φ1 = φi;\n        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = -inflection[1] * d3_degrees;\n          if (φi < φ0) φ0 = φi;\n        } else {\n          if (φ < φ0) φ0 = φ;\n          if (φ > φ1) φ1 = φ;\n        }\n        if (antimeridian) {\n          if (λ < λ_) {\n            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n          } else {\n            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n          }\n        } else {\n          if (λ1 >= λ0) {\n            if (λ < λ0) λ0 = λ;\n            if (λ > λ1) λ1 = λ;\n          } else {\n            if (λ > λ_) {\n              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n            } else {\n              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n            }\n          }\n        }\n      } else {\n        point(λ, φ);\n      }\n      p0 = p, λ_ = λ;\n    }\n    function lineStart() {\n      bound.point = linePoint;\n    }\n    function lineEnd() {\n      range[0] = λ0, range[1] = λ1;\n      bound.point = point;\n      p0 = null;\n    }\n    function ringPoint(λ, φ) {\n      if (p0) {\n        var dλ = λ - λ_;\n        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;\n      } else λ__ = λ, φ__ = φ;\n      d3_geo_area.point(λ, φ);\n      linePoint(λ, φ);\n    }\n    function ringStart() {\n      d3_geo_area.lineStart();\n    }\n    function ringEnd() {\n      ringPoint(λ__, φ__);\n      d3_geo_area.lineEnd();\n      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);\n      range[0] = λ0, range[1] = λ1;\n      p0 = null;\n    }\n    function angle(λ0, λ1) {\n      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;\n    }\n    function compareRanges(a, b) {\n      return a[0] - b[0];\n    }\n    function withinRange(x, range) {\n      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n    }\n    return function(feature) {\n      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n      ranges = [];\n      d3.geo.stream(feature, bound);\n      var n = ranges.length;\n      if (n) {\n        ranges.sort(compareRanges);\n        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {\n          b = ranges[i];\n          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n          } else {\n            merged.push(a = b);\n          }\n        }\n        var best = -Infinity, dλ;\n        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {\n          b = merged[i];\n          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];\n        }\n      }\n      ranges = range = null;\n      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];\n    };\n  }();\n  d3.geo.centroid = function(object) {\n    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n    d3.geo.stream(object, d3_geo_centroid);\n    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;\n    if (m < ε2) {\n      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n      m = x * x + y * y + z * z;\n      if (m < ε2) return [ NaN, NaN ];\n    }\n    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];\n  };\n  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n  var d3_geo_centroid = {\n    sphere: d3_noop,\n    point: d3_geo_centroidPoint,\n    lineStart: d3_geo_centroidLineStart,\n    lineEnd: d3_geo_centroidLineEnd,\n    polygonStart: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n    }\n  };\n  function d3_geo_centroidPoint(λ, φ) {\n    λ *= d3_radians;\n    var cosφ = Math.cos(φ *= d3_radians);\n    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n  }\n  function d3_geo_centroidPointXYZ(x, y, z) {\n    ++d3_geo_centroidW0;\n    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n  }\n  function d3_geo_centroidLineStart() {\n    var x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroid.point = nextPoint;\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_centroidLineEnd() {\n    d3_geo_centroid.point = d3_geo_centroidPoint;\n  }\n  function d3_geo_centroidRingStart() {\n    var λ00, φ00, x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ00 = λ, φ00 = φ;\n      d3_geo_centroid.point = nextPoint;\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    d3_geo_centroid.lineEnd = function() {\n      nextPoint(λ00, φ00);\n      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n      d3_geo_centroid.point = d3_geo_centroidPoint;\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);\n      d3_geo_centroidX2 += v * cx;\n      d3_geo_centroidY2 += v * cy;\n      d3_geo_centroidZ2 += v * cz;\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_compose(a, b) {\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n    return compose;\n  }\n  function d3_true() {\n    return true;\n  }\n  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n    var subject = [], clip = [];\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n];\n      if (d3_geo_sphericalEqual(p0, p1)) {\n        listener.lineStart();\n        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);\n        listener.lineEnd();\n        return;\n      }\n      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n    });\n    clip.sort(compare);\n    d3_geo_clipPolygonLinkCircular(subject);\n    d3_geo_clipPolygonLinkCircular(clip);\n    if (!subject.length) return;\n    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {\n      clip[i].e = entry = !entry;\n    }\n    var start = subject[0], points, point;\n    while (1) {\n      var current = start, isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      listener.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, listener);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, listener);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      listener.lineEnd();\n    }\n  }\n  function d3_geo_clipPolygonLinkCircular(array) {\n    if (!(n = array.length)) return;\n    var n, i = 0, a = array[0], b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other;\n    this.e = entry;\n    this.v = false;\n    this.n = this.p = null;\n  }\n  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n    return function(rotate, listener) {\n      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = d3.merge(segments);\n          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n          if (segments.length) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n          } else if (clipStartInside) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            interpolate(null, null, 1, listener);\n            listener.lineEnd();\n          }\n          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          listener.polygonStart();\n          listener.lineStart();\n          interpolate(null, null, 1, listener);\n          listener.lineEnd();\n          listener.polygonEnd();\n        }\n      };\n      function point(λ, φ) {\n        var point = rotate(λ, φ);\n        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n      }\n      function pointLine(λ, φ) {\n        var point = rotate(λ, φ);\n        line.point(point[0], point[1]);\n      }\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n      var segments;\n      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n      function pointRing(λ, φ) {\n        ring.push([ λ, φ ]);\n        var point = rotate(λ, φ);\n        ringListener.point(point[0], point[1]);\n      }\n      function ringStart() {\n        ringListener.lineStart();\n        ring = [];\n      }\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringListener.lineEnd();\n        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n        if (!n) return;\n        if (clean & 1) {\n          segment = ringSegments[0];\n          var n = segment.length - 1, i = -1, point;\n          if (n > 0) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            while (++i < n) listener.point((point = segment[i])[0], point[1]);\n            listener.lineEnd();\n          }\n          return;\n        }\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n      }\n      return clip;\n    };\n  }\n  function d3_geo_clipSegmentLength1(segment) {\n    return segment.length > 1;\n  }\n  function d3_geo_clipBufferListener() {\n    var lines = [], line;\n    return {\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      point: function(λ, φ) {\n        line.push([ λ, φ ]);\n      },\n      lineEnd: d3_noop,\n      buffer: function() {\n        var buffer = lines;\n        lines = [];\n        line = null;\n        return buffer;\n      },\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      }\n    };\n  }\n  function d3_geo_clipSort(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n  }\n  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n  function d3_geo_clipAntimeridianLine(listener) {\n    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;\n    return {\n      lineStart: function() {\n        listener.lineStart();\n        clean = 1;\n      },\n      point: function(λ1, φ1) {\n        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);\n        if (abs(dλ - π) < ε) {\n          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          listener.point(λ1, φ0);\n          clean = 0;\n        } else if (sλ0 !== sλ1 && dλ >= π) {\n          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;\n          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;\n          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          clean = 0;\n        }\n        listener.point(λ0 = λ1, φ0 = φ1);\n        sλ0 = sλ1;\n      },\n      lineEnd: function() {\n        listener.lineEnd();\n        λ0 = φ0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean;\n      }\n    };\n  }\n  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);\n    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n  }\n  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n    var φ;\n    if (from == null) {\n      φ = direction * halfπ;\n      listener.point(-π, φ);\n      listener.point(0, φ);\n      listener.point(π, φ);\n      listener.point(π, 0);\n      listener.point(π, -φ);\n      listener.point(0, -φ);\n      listener.point(-π, -φ);\n      listener.point(-π, 0);\n      listener.point(-π, φ);\n    } else if (abs(from[0] - to[0]) > ε) {\n      var s = from[0] < to[0] ? π : -π;\n      φ = direction * s / 2;\n      listener.point(-s, φ);\n      listener.point(0, φ);\n      listener.point(s, φ);\n    } else {\n      listener.point(to[0], to[1]);\n    }\n  }\n  function d3_geo_pointInPolygon(point, polygon) {\n    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n    d3_geo_areaRingSum.reset();\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      var ring = polygon[i], m = ring.length;\n      if (!m) continue;\n      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n      while (true) {\n        if (j === m) j = 0;\n        point = ring[j];\n        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;\n        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {\n          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n          d3_geo_cartesianNormalize(arc);\n          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n          d3_geo_cartesianNormalize(intersection);\n          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);\n          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ dλ >= 0 ? 1 : -1;\n          }\n        }\n        if (!j++) break;\n        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n      }\n    }\n    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;\n  }\n  function d3_geo_clipCircle(radius) {\n    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);\n    function visible(λ, φ) {\n      return Math.cos(λ) * Math.cos(φ) > cr;\n    }\n    function clipLine(listener) {\n      var point0, c0, v0, v00, clean;\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(λ, φ) {\n          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n          if (!point0 && (v00 = v0 = v)) listener.lineStart();\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n              point1[0] += ε;\n              point1[1] += ε;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              listener.lineStart();\n              point2 = intersect(point1, point0);\n              listener.point(point2[0], point2[1]);\n            } else {\n              point2 = intersect(point0, point1);\n              listener.point(point2[0], point2[1]);\n              listener.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n              } else {\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n            listener.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) listener.lineEnd();\n          point0 = null;\n        },\n        clean: function() {\n          return clean | (v00 && v0) << 1;\n        }\n      };\n    }\n    function intersect(a, b, two) {\n      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);\n      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n      if (!determinant) return !two && a;\n      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n      d3_geo_cartesianAdd(A, B);\n      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n      if (t2 < 0) return;\n      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);\n      d3_geo_cartesianAdd(q, A);\n      q = d3_geo_spherical(q);\n      if (!two) return q;\n      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;\n      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;\n      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;\n      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;\n      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n        d3_geo_cartesianAdd(q1, A);\n        return [ q, d3_geo_spherical(q1) ];\n      }\n    }\n    function code(λ, φ) {\n      var r = smallRadius ? radius : π - radius, code = 0;\n      if (λ < -r) code |= 1; else if (λ > r) code |= 2;\n      if (φ < -r) code |= 4; else if (φ > r) code |= 8;\n      return code;\n    }\n  }\n  function d3_geom_clipLine(x0, y0, x1, y1) {\n    return function(line) {\n      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n      r = x0 - ax;\n      if (!dx && r > 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dx > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = x1 - ax;\n      if (!dx && r < 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dx > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      r = y0 - ay;\n      if (!dy && r > 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dy > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = y1 - ay;\n      if (!dy && r < 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dy > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      if (t0 > 0) line.a = {\n        x: ax + t0 * dx,\n        y: ay + t0 * dy\n      };\n      if (t1 < 1) line.b = {\n        x: ax + t1 * dx,\n        y: ay + t1 * dy\n      };\n      return line;\n    };\n  }\n  var d3_geo_clipExtentMAX = 1e9;\n  d3.geo.clipExtent = function() {\n    var x0, y0, x1, y1, stream, clip, clipExtent = {\n      stream: function(output) {\n        if (stream) stream.valid = false;\n        stream = clip(output);\n        stream.valid = true;\n        return stream;\n      },\n      extent: function(_) {\n        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n        if (stream) stream.valid = false, stream = null;\n        return clipExtent;\n      }\n    };\n    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);\n  };\n  function d3_geo_clipExtent(x0, y0, x1, y1) {\n    return function(listener) {\n      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          listener = bufferListener;\n          segments = [];\n          polygon = [];\n          clean = true;\n        },\n        polygonEnd: function() {\n          listener = listener_;\n          segments = d3.merge(segments);\n          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;\n          if (inside || visible) {\n            listener.polygonStart();\n            if (inside) {\n              listener.lineStart();\n              interpolate(null, null, 1, listener);\n              listener.lineEnd();\n            }\n            if (visible) {\n              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n            }\n            listener.polygonEnd();\n          }\n          segments = polygon = ring = null;\n        }\n      };\n      function insidePolygon(p) {\n        var wn = 0, n = polygon.length, y = p[1];\n        for (var i = 0; i < n; ++i) {\n          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {\n            b = v[j];\n            if (a[1] <= y) {\n              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;\n            } else {\n              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;\n            }\n            a = b;\n          }\n        }\n        return wn !== 0;\n      }\n      function interpolate(from, to, direction, listener) {\n        var a = 0, a1 = 0;\n        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n          do {\n            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n          } while ((a = (a + direction + 4) % 4) !== a1);\n        } else {\n          listener.point(to[0], to[1]);\n        }\n      }\n      function pointVisible(x, y) {\n        return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n      }\n      function point(x, y) {\n        if (pointVisible(x, y)) listener.point(x, y);\n      }\n      var x__, y__, v__, x_, y_, v_, first, clean;\n      function lineStart() {\n        clip.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferListener.rejoin();\n          segments.push(bufferListener.buffer());\n        }\n        clip.point = point;\n        if (v_) listener.lineEnd();\n      }\n      function linePoint(x, y) {\n        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n        var v = pointVisible(x, y);\n        if (polygon) ring.push([ x, y ]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            listener.lineStart();\n            listener.point(x, y);\n          }\n        } else {\n          if (v && v_) listener.point(x, y); else {\n            var l = {\n              a: {\n                x: x_,\n                y: y_\n              },\n              b: {\n                x: x,\n                y: y\n              }\n            };\n            if (clipLine(l)) {\n              if (!v_) {\n                listener.lineStart();\n                listener.point(l.a.x, l.a.y);\n              }\n              listener.point(l.b.x, l.b.y);\n              if (!v) listener.lineEnd();\n              clean = false;\n            } else if (v) {\n              listener.lineStart();\n              listener.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n      return clip;\n    };\n    function corner(p, direction) {\n      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n    }\n    function compare(a, b) {\n      return comparePoints(a.x, b.x);\n    }\n    function comparePoints(a, b) {\n      var ca = corner(a, 1), cb = corner(b, 1);\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }\n  }\n  function d3_geo_conic(projectAt) {\n    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);\n    p.parallels = function(_) {\n      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];\n      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n    };\n    return p;\n  }\n  function d3_geo_conicEqualArea(φ0, φ1) {\n    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;\n    function forward(λ, φ) {\n      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = ρ0 - y;\n      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEqualArea = function() {\n    return d3_geo_conic(d3_geo_conicEqualArea);\n  }).raw = d3_geo_conicEqualArea;\n  d3.geo.albers = function() {\n    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);\n  };\n  d3.geo.albersUsa = function() {\n    var lower48 = d3.geo.albers();\n    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);\n    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);\n    var point, pointStream = {\n      point: function(x, y) {\n        point = [ x, y ];\n      }\n    }, lower48Point, alaskaPoint, hawaiiPoint;\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      point = null;\n      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);\n      return point;\n    }\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n    };\n    albersUsa.stream = function(stream) {\n      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n      return {\n        point: function(x, y) {\n          lower48Stream.point(x, y);\n          alaskaStream.point(x, y);\n          hawaiiStream.point(x, y);\n        },\n        sphere: function() {\n          lower48Stream.sphere();\n          alaskaStream.sphere();\n          hawaiiStream.sphere();\n        },\n        lineStart: function() {\n          lower48Stream.lineStart();\n          alaskaStream.lineStart();\n          hawaiiStream.lineStart();\n        },\n        lineEnd: function() {\n          lower48Stream.lineEnd();\n          alaskaStream.lineEnd();\n          hawaiiStream.lineEnd();\n        },\n        polygonStart: function() {\n          lower48Stream.polygonStart();\n          alaskaStream.polygonStart();\n          hawaiiStream.polygonStart();\n        },\n        polygonEnd: function() {\n          lower48Stream.polygonEnd();\n          alaskaStream.polygonEnd();\n          hawaiiStream.polygonEnd();\n        }\n      };\n    };\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_);\n      alaska.precision(_);\n      hawaii.precision(_);\n      return albersUsa;\n    };\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_);\n      alaska.scale(_ * .35);\n      hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      return albersUsa;\n    };\n    return albersUsa.scale(1070);\n  };\n  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_pathAreaPolygon = 0;\n      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n    }\n  };\n  function d3_geo_pathAreaRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathArea.point = function(x, y) {\n      d3_geo_pathArea.point = nextPoint;\n      x00 = x0 = x, y00 = y0 = y;\n    };\n    function nextPoint(x, y) {\n      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n      x0 = x, y0 = y;\n    }\n    d3_geo_pathArea.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n  var d3_geo_pathBounds = {\n    point: d3_geo_pathBoundsPoint,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_pathBoundsPoint(x, y) {\n    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n  }\n  function d3_geo_pathBuffer() {\n    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = d3_geo_pathBufferCircle(_);\n        return stream;\n      },\n      result: function() {\n        if (buffer.length) {\n          var result = buffer.join(\"\");\n          buffer = [];\n          return result;\n        }\n      }\n    };\n    function point(x, y) {\n      buffer.push(\"M\", x, \",\", y, pointCircle);\n    }\n    function pointLineStart(x, y) {\n      buffer.push(\"M\", x, \",\", y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      buffer.push(\"L\", x, \",\", y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      buffer.push(\"Z\");\n    }\n    return stream;\n  }\n  function d3_geo_pathBufferCircle(radius) {\n    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n  }\n  var d3_geo_pathCentroid = {\n    point: d3_geo_pathCentroidPoint,\n    lineStart: d3_geo_pathCentroidLineStart,\n    lineEnd: d3_geo_pathCentroidLineEnd,\n    polygonStart: function() {\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n    }\n  };\n  function d3_geo_pathCentroidPoint(x, y) {\n    d3_geo_centroidX0 += x;\n    d3_geo_centroidY0 += y;\n    ++d3_geo_centroidZ0;\n  }\n  function d3_geo_pathCentroidLineStart() {\n    var x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n  }\n  function d3_geo_pathCentroidLineEnd() {\n    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n  }\n  function d3_geo_pathCentroidRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      z = y0 * x - x0 * y;\n      d3_geo_centroidX2 += z * (x0 + x);\n      d3_geo_centroidY2 += z * (y0 + y);\n      d3_geo_centroidZ2 += z * 3;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n    d3_geo_pathCentroid.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  function d3_geo_pathContext(context) {\n    var pointRadius = 4.5;\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n      result: d3_noop\n    };\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, τ);\n    }\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      context.closePath();\n    }\n    return stream;\n  }\n  function d3_geo_resample(project) {\n    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;\n    function resample(stream) {\n      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n    }\n    function resampleNone(stream) {\n      return d3_geo_transformPoint(stream, function(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      });\n    }\n    function resampleRecursive(stream) {\n      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n      var resample = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          stream.polygonStart();\n          resample.lineStart = ringStart;\n        },\n        polygonEnd: function() {\n          stream.polygonEnd();\n          resample.lineStart = lineStart;\n        }\n      };\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n      function lineStart() {\n        x0 = NaN;\n        resample.point = linePoint;\n        stream.lineStart();\n      }\n      function linePoint(λ, φ) {\n        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n      function lineEnd() {\n        resample.point = point;\n        stream.lineEnd();\n      }\n      function ringStart() {\n        lineStart();\n        resample.point = ringPoint;\n        resample.lineEnd = ringEnd;\n      }\n      function ringPoint(λ, φ) {\n        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resample.point = linePoint;\n      }\n      function ringEnd() {\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n        resample.lineEnd = lineEnd;\n        lineEnd();\n      }\n      return resample;\n    }\n    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n      if (d2 > 4 * δ2 && depth--) {\n        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    resample.precision = function(_) {\n      if (!arguments.length) return Math.sqrt(δ2);\n      maxDepth = (δ2 = _ * _) > 0 && 16;\n      return resample;\n    };\n    return resample;\n  }\n  d3.geo.path = function() {\n    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n        d3.geo.stream(object, cacheStream);\n      }\n      return contextStream.result();\n    }\n    path.area = function(object) {\n      d3_geo_pathAreaSum = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n      return d3_geo_pathAreaSum;\n    };\n    path.centroid = function(object) {\n      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n    };\n    path.bounds = function(object) {\n      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];\n    };\n    path.projection = function(_) {\n      if (!arguments.length) return projection;\n      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n      return reset();\n    };\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return reset();\n    };\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n    function reset() {\n      cacheStream = null;\n      return path;\n    }\n    return path.projection(d3.geo.albersUsa()).context(null);\n  };\n  function d3_geo_pathProjectStream(project) {\n    var resample = d3_geo_resample(function(x, y) {\n      return project([ x * d3_degrees, y * d3_degrees ]);\n    });\n    return function(stream) {\n      return d3_geo_projectionRadians(resample(stream));\n    };\n  }\n  d3.geo.transform = function(methods) {\n    return {\n      stream: function(stream) {\n        var transform = new d3_geo_transform(stream);\n        for (var k in methods) transform[k] = methods[k];\n        return transform;\n      }\n    };\n  };\n  function d3_geo_transform(stream) {\n    this.stream = stream;\n  }\n  d3_geo_transform.prototype = {\n    point: function(x, y) {\n      this.stream.point(x, y);\n    },\n    sphere: function() {\n      this.stream.sphere();\n    },\n    lineStart: function() {\n      this.stream.lineStart();\n    },\n    lineEnd: function() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function() {\n      this.stream.polygonEnd();\n    }\n  };\n  function d3_geo_transformPoint(stream, point) {\n    return {\n      point: point,\n      sphere: function() {\n        stream.sphere();\n      },\n      lineStart: function() {\n        stream.lineStart();\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n      },\n      polygonStart: function() {\n        stream.polygonStart();\n      },\n      polygonEnd: function() {\n        stream.polygonEnd();\n      }\n    };\n  }\n  d3.geo.projection = d3_geo_projection;\n  d3.geo.projectionMutator = d3_geo_projectionMutator;\n  function d3_geo_projection(project) {\n    return d3_geo_projectionMutator(function() {\n      return project;\n    })();\n  }\n  function d3_geo_projectionMutator(projectAt) {\n    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {\n      x = project(x, y);\n      return [ x[0] * k + δx, δy - x[1] * k ];\n    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n    function projection(point) {\n      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n      return [ point[0] * k + δx, δy - point[1] * k ];\n    }\n    function invert(point) {\n      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];\n    }\n    projection.stream = function(output) {\n      if (stream) stream.valid = false;\n      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n      stream.valid = true;\n      return stream;\n    };\n    projection.clipAngle = function(_) {\n      if (!arguments.length) return clipAngle;\n      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n      return invalidate();\n    };\n    projection.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent;\n      clipExtent = _;\n      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n      return invalidate();\n    };\n    projection.scale = function(_) {\n      if (!arguments.length) return k;\n      k = +_;\n      return reset();\n    };\n    projection.translate = function(_) {\n      if (!arguments.length) return [ x, y ];\n      x = +_[0];\n      y = +_[1];\n      return reset();\n    };\n    projection.center = function(_) {\n      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];\n      λ = _[0] % 360 * d3_radians;\n      φ = _[1] % 360 * d3_radians;\n      return reset();\n    };\n    projection.rotate = function(_) {\n      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];\n      δλ = _[0] % 360 * d3_radians;\n      δφ = _[1] % 360 * d3_radians;\n      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;\n      return reset();\n    };\n    d3.rebind(projection, projectResample, \"precision\");\n    function reset() {\n      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n      var center = project(λ, φ);\n      δx = x - center[0] * k;\n      δy = y + center[1] * k;\n      return invalidate();\n    }\n    function invalidate() {\n      if (stream) stream.valid = false, stream = null;\n      return projection;\n    }\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return reset();\n    };\n  }\n  function d3_geo_projectionRadians(stream) {\n    return d3_geo_transformPoint(stream, function(x, y) {\n      stream.point(x * d3_radians, y * d3_radians);\n    });\n  }\n  function d3_geo_equirectangular(λ, φ) {\n    return [ λ, φ ];\n  }\n  (d3.geo.equirectangular = function() {\n    return d3_geo_projection(d3_geo_equirectangular);\n  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n  d3.geo.rotation = function(rotate) {\n    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    }\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    };\n    return forward;\n  };\n  function d3_geo_identityRotation(λ, φ) {\n    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n  }\n  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n  function d3_geo_rotation(δλ, δφ, δγ) {\n    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n  }\n  function d3_geo_forwardRotationλ(δλ) {\n    return function(λ, φ) {\n      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n    };\n  }\n  function d3_geo_rotationλ(δλ) {\n    var rotation = d3_geo_forwardRotationλ(δλ);\n    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n    return rotation;\n  }\n  function d3_geo_rotationφγ(δφ, δγ) {\n    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);\n    function rotation(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];\n    }\n    rotation.invert = function(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];\n    };\n    return rotation;\n  }\n  d3.geo.circle = function() {\n    var origin = [ 0, 0 ], angle, precision = 6, interpolate;\n    function circle() {\n      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n      interpolate(null, null, 1, {\n        point: function(x, y) {\n          ring.push(x = rotate(x, y));\n          x[0] *= d3_degrees, x[1] *= d3_degrees;\n        }\n      });\n      return {\n        type: \"Polygon\",\n        coordinates: [ ring ]\n      };\n    }\n    circle.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return circle;\n    };\n    circle.angle = function(x) {\n      if (!arguments.length) return angle;\n      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n      return circle;\n    };\n    circle.precision = function(_) {\n      if (!arguments.length) return precision;\n      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n      return circle;\n    };\n    return circle.angle(90);\n  };\n  function d3_geo_circleInterpolate(radius, precision) {\n    var cr = Math.cos(radius), sr = Math.sin(radius);\n    return function(from, to, direction, listener) {\n      var step = direction * precision;\n      if (from != null) {\n        from = d3_geo_circleAngle(cr, from);\n        to = d3_geo_circleAngle(cr, to);\n        if (direction > 0 ? from < to : from > to) from += direction * τ;\n      } else {\n        from = radius + direction * τ;\n        to = radius - .5 * step;\n      }\n      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {\n        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);\n      }\n    };\n  }\n  function d3_geo_circleAngle(cr, point) {\n    var a = d3_geo_cartesian(point);\n    a[0] -= cr;\n    d3_geo_cartesianNormalize(a);\n    var angle = d3_acos(-a[1]);\n    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n  }\n  d3.geo.distance = function(a, b) {\n    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n  };\n  d3.geo.graticule = function() {\n    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;\n    function graticule() {\n      return {\n        type: \"MultiLineString\",\n        coordinates: lines()\n      };\n    }\n    function lines() {\n      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n        return abs(x % DX) > ε;\n      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {\n        return abs(y % DY) > ε;\n      }).map(y));\n    }\n    graticule.lines = function() {\n      return lines().map(function(coordinates) {\n        return {\n          type: \"LineString\",\n          coordinates: coordinates\n        };\n      });\n    };\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]\n      };\n    };\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.minorExtent();\n      return graticule.majorExtent(_).minorExtent(_);\n    };\n    graticule.majorExtent = function(_) {\n      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.minorExtent = function(_) {\n      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.minorStep();\n      return graticule.majorStep(_).minorStep(_);\n    };\n    graticule.majorStep = function(_) {\n      if (!arguments.length) return [ DX, DY ];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n    graticule.minorStep = function(_) {\n      if (!arguments.length) return [ dx, dy ];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = d3_geo_graticuleX(y0, y1, 90);\n      y = d3_geo_graticuleY(x0, x1, precision);\n      X = d3_geo_graticuleX(Y0, Y1, 90);\n      Y = d3_geo_graticuleY(X0, X1, precision);\n      return graticule;\n    };\n    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n  };\n  function d3_geo_graticuleX(y0, y1, dy) {\n    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n    return function(x) {\n      return y.map(function(y) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_geo_graticuleY(x0, x1, dx) {\n    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n    return function(y) {\n      return x.map(function(x) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_source(d) {\n    return d.source;\n  }\n  function d3_target(d) {\n    return d.target;\n  }\n  d3.geo.greatArc = function() {\n    var source = d3_source, source_, target = d3_target, target_;\n    function greatArc() {\n      return {\n        type: \"LineString\",\n        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]\n      };\n    }\n    greatArc.distance = function() {\n      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n    };\n    greatArc.source = function(_) {\n      if (!arguments.length) return source;\n      source = _, source_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.target = function(_) {\n      if (!arguments.length) return target;\n      target = _, target_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.precision = function() {\n      return arguments.length ? greatArc : 0;\n    };\n    return greatArc;\n  };\n  d3.geo.interpolate = function(source, target) {\n    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n  };\n  function d3_geo_interpolate(x0, y0, x1, y1) {\n    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n    var interpolate = d ? function(t) {\n      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];\n    } : function() {\n      return [ x0 * d3_degrees, y0 * d3_degrees ];\n    };\n    interpolate.distance = d;\n    return interpolate;\n  }\n  d3.geo.length = function(object) {\n    d3_geo_lengthSum = 0;\n    d3.geo.stream(object, d3_geo_length);\n    return d3_geo_lengthSum;\n  };\n  var d3_geo_lengthSum;\n  var d3_geo_length = {\n    sphere: d3_noop,\n    point: d3_noop,\n    lineStart: d3_geo_lengthLineStart,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_lengthLineStart() {\n    var λ0, sinφ0, cosφ0;\n    d3_geo_length.point = function(λ, φ) {\n      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n      d3_geo_length.point = nextPoint;\n    };\n    d3_geo_length.lineEnd = function() {\n      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n    };\n    function nextPoint(λ, φ) {\n      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n    }\n  }\n  function d3_geo_azimuthal(scale, angle) {\n    function azimuthal(λ, φ) {\n      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);\n      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];\n    }\n    azimuthal.invert = function(x, y) {\n      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);\n      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];\n    };\n    return azimuthal;\n  }\n  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {\n    return Math.sqrt(2 / (1 + cosλcosφ));\n  }, function(ρ) {\n    return 2 * Math.asin(ρ / 2);\n  });\n  (d3.geo.azimuthalEqualArea = function() {\n    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n  }).raw = d3_geo_azimuthalEqualArea;\n  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {\n    var c = Math.acos(cosλcosφ);\n    return c && c / Math.sin(c);\n  }, d3_identity);\n  (d3.geo.azimuthalEquidistant = function() {\n    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n  }).raw = d3_geo_azimuthalEquidistant;\n  function d3_geo_conicConformal(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), t = function(φ) {\n      return Math.tan(π / 4 + φ / 2);\n    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n    if (!n) return d3_geo_mercator;\n    function forward(λ, φ) {\n      if (F > 0) {\n        if (φ < -halfπ + ε) φ = -halfπ + ε;\n      } else {\n        if (φ > halfπ - ε) φ = halfπ - ε;\n      }\n      var ρ = F / Math.pow(t(φ), n);\n      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];\n    };\n    return forward;\n  }\n  (d3.geo.conicConformal = function() {\n    return d3_geo_conic(d3_geo_conicConformal);\n  }).raw = d3_geo_conicConformal;\n  function d3_geo_conicEquidistant(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;\n    if (abs(n) < ε) return d3_geo_equirectangular;\n    function forward(λ, φ) {\n      var ρ = G - φ;\n      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = G - y;\n      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEquidistant = function() {\n    return d3_geo_conic(d3_geo_conicEquidistant);\n  }).raw = d3_geo_conicEquidistant;\n  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / cosλcosφ;\n  }, Math.atan);\n  (d3.geo.gnomonic = function() {\n    return d3_geo_projection(d3_geo_gnomonic);\n  }).raw = d3_geo_gnomonic;\n  function d3_geo_mercator(λ, φ) {\n    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];\n  }\n  d3_geo_mercator.invert = function(x, y) {\n    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];\n  };\n  function d3_geo_mercatorProjection(project) {\n    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;\n    m.scale = function() {\n      var v = scale.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.translate = function() {\n      var v = translate.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.clipExtent = function(_) {\n      var v = clipExtent.apply(m, arguments);\n      if (v === m) {\n        if (clipAuto = _ == null) {\n          var k = π * scale(), t = translate();\n          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);\n        }\n      } else if (clipAuto) {\n        v = null;\n      }\n      return v;\n    };\n    return m.clipExtent(null);\n  }\n  (d3.geo.mercator = function() {\n    return d3_geo_mercatorProjection(d3_geo_mercator);\n  }).raw = d3_geo_mercator;\n  var d3_geo_orthographic = d3_geo_azimuthal(function() {\n    return 1;\n  }, Math.asin);\n  (d3.geo.orthographic = function() {\n    return d3_geo_projection(d3_geo_orthographic);\n  }).raw = d3_geo_orthographic;\n  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / (1 + cosλcosφ);\n  }, function(ρ) {\n    return 2 * Math.atan(ρ);\n  });\n  (d3.geo.stereographic = function() {\n    return d3_geo_projection(d3_geo_stereographic);\n  }).raw = d3_geo_stereographic;\n  function d3_geo_transverseMercator(λ, φ) {\n    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];\n  }\n  d3_geo_transverseMercator.invert = function(x, y) {\n    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];\n  };\n  (d3.geo.transverseMercator = function() {\n    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n    projection.center = function(_) {\n      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);\n    };\n    projection.rotate = function(_) {\n      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), \n      [ _[0], _[1], _[2] - 90 ]);\n    };\n    return rotate([ 0, 0, 90 ]);\n  }).raw = d3_geo_transverseMercator;\n  d3.geom = {};\n  function d3_geom_pointX(d) {\n    return d[0];\n  }\n  function d3_geom_pointY(d) {\n    return d[1];\n  }\n  d3.geom.hull = function(vertices) {\n    var x = d3_geom_pointX, y = d3_geom_pointY;\n    if (arguments.length) return hull(vertices);\n    function hull(data) {\n      if (data.length < 3) return [];\n      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];\n      for (i = 0; i < n; i++) {\n        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);\n      }\n      points.sort(d3_geom_hullOrder);\n      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);\n      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);\n      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);\n      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);\n      return polygon;\n    }\n    hull.x = function(_) {\n      return arguments.length ? (x = _, hull) : x;\n    };\n    hull.y = function(_) {\n      return arguments.length ? (y = _, hull) : y;\n    };\n    return hull;\n  };\n  function d3_geom_hullUpper(points) {\n    var n = points.length, hull = [ 0, 1 ], hs = 2;\n    for (var i = 2; i < n; i++) {\n      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;\n      hull[hs++] = i;\n    }\n    return hull.slice(0, hs);\n  }\n  function d3_geom_hullOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n  d3.geom.polygon = function(coordinates) {\n    d3_subclass(coordinates, d3_geom_polygonPrototype);\n    return coordinates;\n  };\n  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n  d3_geom_polygonPrototype.area = function() {\n    var i = -1, n = this.length, a, b = this[n - 1], area = 0;\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n    return area * .5;\n  };\n  d3_geom_polygonPrototype.centroid = function(k) {\n    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;\n    if (!arguments.length) k = -1 / (6 * this.area());\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n    return [ x * k, y * k ];\n  };\n  d3_geom_polygonPrototype.clip = function(subject) {\n    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n    while (++i < n) {\n      input = subject.slice();\n      subject.length = 0;\n      b = this[i];\n      c = input[(m = input.length - closed) - 1];\n      j = -1;\n      while (++j < m) {\n        d = input[j];\n        if (d3_geom_polygonInside(d, a, b)) {\n          if (!d3_geom_polygonInside(c, a, b)) {\n            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n          }\n          subject.push(d);\n        } else if (d3_geom_polygonInside(c, a, b)) {\n          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n        }\n        c = d;\n      }\n      if (closed) subject.push(subject[0]);\n      a = b;\n    }\n    return subject;\n  };\n  function d3_geom_polygonInside(p, a, b) {\n    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);\n  }\n  function d3_geom_polygonIntersect(c, d, a, b) {\n    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n    return [ x1 + ua * x21, y1 + ua * y21 ];\n  }\n  function d3_geom_polygonClosed(coordinates) {\n    var a = coordinates[0], b = coordinates[coordinates.length - 1];\n    return !(a[0] - b[0] || a[1] - b[1]);\n  }\n  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n  function d3_geom_voronoiBeach() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.edge = this.site = this.circle = null;\n  }\n  function d3_geom_voronoiCreateBeach(site) {\n    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n    beach.site = site;\n    return beach;\n  }\n  function d3_geom_voronoiDetachBeach(beach) {\n    d3_geom_voronoiDetachCircle(beach);\n    d3_geom_voronoiBeaches.remove(beach);\n    d3_geom_voronoiBeachPool.push(beach);\n    d3_geom_voronoiRedBlackNode(beach);\n  }\n  function d3_geom_voronoiRemoveBeach(beach) {\n    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {\n      x: x,\n      y: y\n    }, previous = beach.P, next = beach.N, disappearing = [ beach ];\n    d3_geom_voronoiDetachBeach(beach);\n    var lArc = previous;\n    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      d3_geom_voronoiDetachBeach(lArc);\n      lArc = previous;\n    }\n    disappearing.unshift(lArc);\n    d3_geom_voronoiDetachCircle(lArc);\n    var rArc = next;\n    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      d3_geom_voronoiDetachBeach(rArc);\n      rArc = next;\n    }\n    disappearing.push(rArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var nArcs = disappearing.length, iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiAddBeach(site) {\n    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;\n    while (node) {\n      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n      if (dxl > ε) node = node.L; else {\n        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n        if (dxr > ε) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -ε) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -ε) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n    var newArc = d3_geom_voronoiCreateBeach(site);\n    d3_geom_voronoiBeaches.insert(lArc, newArc);\n    if (!lArc && !rArc) return;\n    if (lArc === rArc) {\n      d3_geom_voronoiDetachCircle(lArc);\n      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n      d3_geom_voronoiBeaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      d3_geom_voronoiAttachCircle(lArc);\n      d3_geom_voronoiAttachCircle(rArc);\n      return;\n    }\n    if (!rArc) {\n      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      return;\n    }\n    d3_geom_voronoiDetachCircle(lArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n      x: (cy * hb - by * hc) / d + ax,\n      y: (bx * hc - cx * hb) / d + ay\n    };\n    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;\n    if (!pby2) return rfocx;\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n    site = lArc.site;\n    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;\n    if (!plby2) return lfocx;\n    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n    return (rfocx + lfocx) / 2;\n  }\n  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site.y === directrix ? site.x : Infinity;\n  }\n  function d3_geom_voronoiCell(site) {\n    this.site = site;\n    this.edges = [];\n  }\n  d3_geom_voronoiCell.prototype.prepare = function() {\n    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;\n    while (iHalfEdge--) {\n      edge = halfEdges[iHalfEdge].edge;\n      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n    }\n    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n    return halfEdges.length;\n  };\n  function d3_geom_voronoiCloseCells(extent) {\n    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n    while (iCell--) {\n      cell = cells[iCell];\n      if (!cell || !cell.prepare()) continue;\n      halfEdges = cell.edges;\n      nHalfEdges = halfEdges.length;\n      iHalfEdge = 0;\n      while (iHalfEdge < nHalfEdges) {\n        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {\n          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n            x: x0,\n            y: abs(x2 - x0) < ε ? y2 : y1\n          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {\n            x: abs(y2 - y1) < ε ? x2 : x1,\n            y: y1\n          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {\n            x: x1,\n            y: abs(x2 - x1) < ε ? y2 : y0\n          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {\n            x: abs(y2 - y0) < ε ? x2 : x0,\n            y: y0\n          } : null), cell.site, null));\n          ++nHalfEdges;\n        }\n      }\n    }\n  }\n  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n    return b.angle - a.angle;\n  }\n  function d3_geom_voronoiCircle() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.x = this.y = this.arc = this.site = this.cy = null;\n  }\n  function d3_geom_voronoiAttachCircle(arc) {\n    var lArc = arc.P, rArc = arc.N;\n    if (!lArc || !rArc) return;\n    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\n    if (lSite === rSite) return;\n    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -ε2) return;\n    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = cy + Math.sqrt(x * x + y * y);\n    circle.cy = cy;\n    arc.circle = circle;\n    var before = null, node = d3_geom_voronoiCircles._;\n    while (node) {\n      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n        if (node.L) node = node.L; else {\n          before = node.P;\n          break;\n        }\n      } else {\n        if (node.R) node = node.R; else {\n          before = node;\n          break;\n        }\n      }\n    }\n    d3_geom_voronoiCircles.insert(before, circle);\n    if (!before) d3_geom_voronoiFirstCircle = circle;\n  }\n  function d3_geom_voronoiDetachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n      d3_geom_voronoiCircles.remove(circle);\n      d3_geom_voronoiCirclePool.push(circle);\n      d3_geom_voronoiRedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n  function d3_geom_voronoiClipEdges(extent) {\n    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n    while (i--) {\n      e = edges[i];\n      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {\n        e.a = e.b = null;\n        edges.splice(i, 1);\n      }\n    }\n  }\n  function d3_geom_voronoiConnectEdge(edge, extent) {\n    var vb = edge.b;\n    if (vb) return true;\n    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!va) va = {\n          x: fx,\n          y: y0\n        }; else if (va.y >= y1) return;\n        vb = {\n          x: fx,\n          y: y1\n        };\n      } else {\n        if (!va) va = {\n          x: fx,\n          y: y1\n        }; else if (va.y < y0) return;\n        vb = {\n          x: fx,\n          y: y0\n        };\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!va) va = {\n            x: (y0 - fb) / fm,\n            y: y0\n          }; else if (va.y >= y1) return;\n          vb = {\n            x: (y1 - fb) / fm,\n            y: y1\n          };\n        } else {\n          if (!va) va = {\n            x: (y1 - fb) / fm,\n            y: y1\n          }; else if (va.y < y0) return;\n          vb = {\n            x: (y0 - fb) / fm,\n            y: y0\n          };\n        }\n      } else {\n        if (ly < ry) {\n          if (!va) va = {\n            x: x0,\n            y: fm * x0 + fb\n          }; else if (va.x >= x1) return;\n          vb = {\n            x: x1,\n            y: fm * x1 + fb\n          };\n        } else {\n          if (!va) va = {\n            x: x1,\n            y: fm * x1 + fb\n          }; else if (va.x < x0) return;\n          vb = {\n            x: x0,\n            y: fm * x0 + fb\n          };\n        }\n      }\n    }\n    edge.a = va;\n    edge.b = vb;\n    return true;\n  }\n  function d3_geom_voronoiEdge(lSite, rSite) {\n    this.l = lSite;\n    this.r = rSite;\n    this.a = this.b = null;\n  }\n  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n    d3_geom_voronoiEdges.push(edge);\n    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n    return edge;\n  }\n  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, null);\n    edge.a = va;\n    edge.b = vb;\n    d3_geom_voronoiEdges.push(edge);\n    return edge;\n  }\n  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n    if (!edge.a && !edge.b) {\n      edge.a = vertex;\n      edge.l = lSite;\n      edge.r = rSite;\n    } else if (edge.l === rSite) {\n      edge.b = vertex;\n    } else {\n      edge.a = vertex;\n    }\n  }\n  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n    var va = edge.a, vb = edge.b;\n    this.edge = edge;\n    this.site = lSite;\n    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n  }\n  d3_geom_voronoiHalfEdge.prototype = {\n    start: function() {\n      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n    },\n    end: function() {\n      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n    }\n  };\n  function d3_geom_voronoiRedBlackTree() {\n    this._ = null;\n  }\n  function d3_geom_voronoiRedBlackNode(node) {\n    node.U = node.C = node.L = node.R = node.P = node.N = null;\n  }\n  d3_geom_voronoiRedBlackTree.prototype = {\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = d3_geom_voronoiRedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              d3_geom_voronoiRedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n      var parent = node.U, sibling, left = node.L, right = node.R, next, red;\n      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);\n      if (parent) {\n        if (parent.L === node) parent.L = next; else parent.R = next;\n      } else {\n        this._ = next;\n      }\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) {\n        node.C = false;\n        return;\n      }\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n      if (node) node.C = false;\n    }\n  };\n  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n    var p = node, q = node.R, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n    var p = node, q = node.L, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n  function d3_geom_voronoiRedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n  function d3_geom_voronoi(sites, bbox) {\n    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;\n    d3_geom_voronoiEdges = [];\n    d3_geom_voronoiCells = new Array(sites.length);\n    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n    while (true) {\n      circle = d3_geom_voronoiFirstCircle;\n      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {\n        if (site.x !== x0 || site.y !== y0) {\n          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n          d3_geom_voronoiAddBeach(site);\n          x0 = site.x, y0 = site.y;\n        }\n        site = sites.pop();\n      } else if (circle) {\n        d3_geom_voronoiRemoveBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n    var diagram = {\n      cells: d3_geom_voronoiCells,\n      edges: d3_geom_voronoiEdges\n    };\n    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n    return diagram;\n  }\n  function d3_geom_voronoiVertexOrder(a, b) {\n    return b.y - a.y || b.x - a.x;\n  }\n  d3.geom.voronoi = function(points) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;\n    if (points) return voronoi(points);\n    function voronoi(data) {\n      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {\n        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {\n          var s = e.start();\n          return [ s.x, s.y ];\n        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n        polygon.point = data[i];\n      });\n      return polygons;\n    }\n    function sites(data) {\n      return data.map(function(d, i) {\n        return {\n          x: Math.round(fx(d, i) / ε) * ε,\n          y: Math.round(fy(d, i) / ε) * ε,\n          i: i\n        };\n      });\n    }\n    voronoi.links = function(data) {\n      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {\n        return edge.l && edge.r;\n      }).map(function(edge) {\n        return {\n          source: data[edge.l.i],\n          target: data[edge.r.i]\n        };\n      });\n    };\n    voronoi.triangles = function(data) {\n      var triangles = [];\n      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {\n        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n        while (++j < m) {\n          e0 = e1;\n          s0 = s1;\n          e1 = edges[j].edge;\n          s1 = e1.l === site ? e1.r : e1.l;\n          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {\n            triangles.push([ data[i], data[s0.i], data[s1.i] ]);\n          }\n        }\n      });\n      return triangles;\n    };\n    voronoi.x = function(_) {\n      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n    };\n    voronoi.y = function(_) {\n      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n    };\n    voronoi.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n      return voronoi;\n    };\n    voronoi.size = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];\n      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);\n    };\n    return voronoi;\n  };\n  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];\n  function d3_geom_voronoiTriangleArea(a, b, c) {\n    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n  }\n  d3.geom.delaunay = function(vertices) {\n    return d3.geom.voronoi().triangles(vertices);\n  };\n  d3.geom.quadtree = function(points, x1, y1, x2, y2) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, compat;\n    if (compat = arguments.length) {\n      x = d3_geom_quadtreeCompatX;\n      y = d3_geom_quadtreeCompatY;\n      if (compat === 3) {\n        y2 = y1;\n        x2 = x1;\n        y1 = x1 = 0;\n      }\n      return quadtree(points);\n    }\n    function quadtree(data) {\n      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;\n      if (x1 != null) {\n        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n      } else {\n        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n        xs = [], ys = [];\n        n = data.length;\n        if (compat) for (i = 0; i < n; ++i) {\n          d = data[i];\n          if (d.x < x1_) x1_ = d.x;\n          if (d.y < y1_) y1_ = d.y;\n          if (d.x > x2_) x2_ = d.x;\n          if (d.y > y2_) y2_ = d.y;\n          xs.push(d.x);\n          ys.push(d.y);\n        } else for (i = 0; i < n; ++i) {\n          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);\n          if (x_ < x1_) x1_ = x_;\n          if (y_ < y1_) y1_ = y_;\n          if (x_ > x2_) x2_ = x_;\n          if (y_ > y2_) y2_ = y_;\n          xs.push(x_);\n          ys.push(y_);\n        }\n      }\n      var dx = x2_ - x1_, dy = y2_ - y1_;\n      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;\n      function insert(n, d, x, y, x1, y1, x2, y2) {\n        if (isNaN(x) || isNaN(y)) return;\n        if (n.leaf) {\n          var nx = n.x, ny = n.y;\n          if (nx != null) {\n            if (abs(nx - x) + abs(ny - y) < .01) {\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            } else {\n              var nPoint = n.point;\n              n.x = n.y = n.point = null;\n              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            }\n          } else {\n            n.x = x, n.y = y, n.point = d;\n          }\n        } else {\n          insertChild(n, d, x, y, x1, y1, x2, y2);\n        }\n      }\n      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;\n        n.leaf = false;\n        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n        if (right) x1 = xm; else x2 = xm;\n        if (below) y1 = ym; else y2 = ym;\n        insert(n, d, x, y, x1, y1, x2, y2);\n      }\n      var root = d3_geom_quadtreeNode();\n      root.add = function(d) {\n        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n      };\n      root.visit = function(f) {\n        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n      };\n      root.find = function(point) {\n        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n      };\n      i = -1;\n      if (x1 == null) {\n        while (++i < n) {\n          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n        }\n        --i;\n      } else data.forEach(root.add);\n      xs = ys = data = d = null;\n      return root;\n    }\n    quadtree.x = function(_) {\n      return arguments.length ? (x = _, quadtree) : x;\n    };\n    quadtree.y = function(_) {\n      return arguments.length ? (y = _, quadtree) : y;\n    };\n    quadtree.extent = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], \n      y2 = +_[1][1];\n      return quadtree;\n    };\n    quadtree.size = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n      return quadtree;\n    };\n    return quadtree;\n  };\n  function d3_geom_quadtreeCompatX(d) {\n    return d.x;\n  }\n  function d3_geom_quadtreeCompatY(d) {\n    return d.y;\n  }\n  function d3_geom_quadtreeNode() {\n    return {\n      leaf: true,\n      nodes: [],\n      point: null,\n      x: null,\n      y: null\n    };\n  }\n  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n    if (!f(node, x1, y1, x2, y2)) {\n      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;\n      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n    }\n  }\n  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n    var minDistance2 = Infinity, closestPoint;\n    (function find(node, x1, y1, x2, y2) {\n      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\n      if (point = node.point) {\n        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;\n        if (distance2 < minDistance2) {\n          var distance = Math.sqrt(minDistance2 = distance2);\n          x0 = x - distance, y0 = y - distance;\n          x3 = x + distance, y3 = y + distance;\n          closestPoint = point;\n        }\n      }\n      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;\n      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {\n        if (node = children[i & 3]) switch (i & 3) {\n         case 0:\n          find(node, x1, y1, xm, ym);\n          break;\n\n         case 1:\n          find(node, xm, y1, x2, ym);\n          break;\n\n         case 2:\n          find(node, x1, ym, xm, y2);\n          break;\n\n         case 3:\n          find(node, xm, ym, x2, y2);\n          break;\n        }\n      }\n    })(root, x0, y0, x3, y3);\n    return closestPoint;\n  }\n  d3.interpolateRgb = d3_interpolateRgb;\n  function d3_interpolateRgb(a, b) {\n    a = d3.rgb(a);\n    b = d3.rgb(b);\n    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;\n    return function(t) {\n      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n    };\n  }\n  d3.interpolateObject = d3_interpolateObject;\n  function d3_interpolateObject(a, b) {\n    var i = {}, c = {}, k;\n    for (k in a) {\n      if (k in b) {\n        i[k] = d3_interpolate(a[k], b[k]);\n      } else {\n        c[k] = a[k];\n      }\n    }\n    for (k in b) {\n      if (!(k in a)) {\n        c[k] = b[k];\n      }\n    }\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n  d3.interpolateNumber = d3_interpolateNumber;\n  function d3_interpolateNumber(a, b) {\n    a = +a, b = +b;\n    return function(t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n  d3.interpolateString = d3_interpolateString;\n  function d3_interpolateString(a, b) {\n    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n    a = a + \"\", b = b + \"\";\n    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) {\n        if (s[i]) s[i] += bm; else s[++i] = bm;\n      } else {\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: d3_interpolateNumber(am, bm)\n        });\n      }\n      bi = d3_interpolate_numberB.lastIndex;\n    }\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; else s[++i] = bs;\n    }\n    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {\n      return b(t) + \"\";\n    }) : function() {\n      return b;\n    } : (b = q.length, function(t) {\n      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    });\n  }\n  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \"g\");\n  d3.interpolate = d3_interpolate;\n  function d3_interpolate(a, b) {\n    var i = d3.interpolators.length, f;\n    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;\n    return f;\n  }\n  d3.interpolators = [ function(a, b) {\n    var t = typeof b;\n    return (t === \"string\" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\\(|hsl\\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \"object\" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n  } ];\n  d3.interpolateArray = d3_interpolateArray;\n  function d3_interpolateArray(a, b) {\n    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;\n    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));\n    for (;i < na; ++i) c[i] = a[i];\n    for (;i < nb; ++i) c[i] = b[i];\n    return function(t) {\n      for (i = 0; i < n0; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n  var d3_ease_default = function() {\n    return d3_identity;\n  };\n  var d3_ease = d3.map({\n    linear: d3_ease_default,\n    poly: d3_ease_poly,\n    quad: function() {\n      return d3_ease_quad;\n    },\n    cubic: function() {\n      return d3_ease_cubic;\n    },\n    sin: function() {\n      return d3_ease_sin;\n    },\n    exp: function() {\n      return d3_ease_exp;\n    },\n    circle: function() {\n      return d3_ease_circle;\n    },\n    elastic: d3_ease_elastic,\n    back: d3_ease_back,\n    bounce: function() {\n      return d3_ease_bounce;\n    }\n  });\n  var d3_ease_mode = d3.map({\n    \"in\": d3_identity,\n    out: d3_ease_reverse,\n    \"in-out\": d3_ease_reflect,\n    \"out-in\": function(f) {\n      return d3_ease_reflect(d3_ease_reverse(f));\n    }\n  });\n  d3.ease = function(name) {\n    var i = name.indexOf(\"-\"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : \"in\";\n    t = d3_ease.get(t) || d3_ease_default;\n    m = d3_ease_mode.get(m) || d3_identity;\n    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n  };\n  function d3_ease_clamp(f) {\n    return function(t) {\n      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);\n    };\n  }\n  function d3_ease_reverse(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n  function d3_ease_reflect(f) {\n    return function(t) {\n      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n    };\n  }\n  function d3_ease_quad(t) {\n    return t * t;\n  }\n  function d3_ease_cubic(t) {\n    return t * t * t;\n  }\n  function d3_ease_cubicInOut(t) {\n    if (t <= 0) return 0;\n    if (t >= 1) return 1;\n    var t2 = t * t, t3 = t2 * t;\n    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n  }\n  function d3_ease_poly(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n  function d3_ease_sin(t) {\n    return 1 - Math.cos(t * halfπ);\n  }\n  function d3_ease_exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  function d3_ease_circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  function d3_ease_elastic(a, p) {\n    var s;\n    if (arguments.length < 2) p = .45;\n    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n    };\n  }\n  function d3_ease_back(s) {\n    if (!s) s = 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n  function d3_ease_bounce(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }\n  d3.interpolateHcl = d3_interpolateHcl;\n  function d3_interpolateHcl(a, b) {\n    a = d3.hcl(a);\n    b = d3.hcl(b);\n    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;\n    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateHsl = d3_interpolateHsl;\n  function d3_interpolateHsl(a, b) {\n    a = d3.hsl(a);\n    b = d3.hsl(b);\n    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;\n    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateLab = d3_interpolateLab;\n  function d3_interpolateLab(a, b) {\n    a = d3.lab(a);\n    b = d3.lab(b);\n    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;\n    return function(t) {\n      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";\n    };\n  }\n  d3.interpolateRound = d3_interpolateRound;\n  function d3_interpolateRound(a, b) {\n    b -= a;\n    return function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n  d3.transform = function(string) {\n    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");\n    return (d3.transform = function(string) {\n      if (string != null) {\n        g.setAttribute(\"transform\", string);\n        var t = g.transform.baseVal.consolidate();\n      }\n      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n    })(string);\n  };\n  function d3_transform(m) {\n    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n    if (r0[0] * r1[1] < r1[0] * r0[1]) {\n      r0[0] *= -1;\n      r0[1] *= -1;\n      kx *= -1;\n      kz *= -1;\n    }\n    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n    this.translate = [ m.e, m.f ];\n    this.scale = [ kx, ky ];\n    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n  }\n  d3_transform.prototype.toString = function() {\n    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n  };\n  function d3_transformDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n  function d3_transformNormalize(a) {\n    var k = Math.sqrt(d3_transformDot(a, a));\n    if (k) {\n      a[0] /= k;\n      a[1] /= k;\n    }\n    return k;\n  }\n  function d3_transformCombine(a, b, k) {\n    a[0] += k * b[0];\n    a[1] += k * b[1];\n    return a;\n  }\n  var d3_transformIdentity = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0\n  };\n  d3.interpolateTransform = d3_interpolateTransform;\n  function d3_interpolateTransformPop(s) {\n    return s.length ? s.pop() + \",\" : \"\";\n  }\n  function d3_interpolateTranslate(ta, tb, s, q) {\n    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {\n      var i = s.push(\"translate(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ta[0], tb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ta[1], tb[1])\n      });\n    } else if (tb[0] || tb[1]) {\n      s.push(\"translate(\" + tb + \")\");\n    }\n  }\n  function d3_interpolateRotate(ra, rb, s, q) {\n    if (ra !== rb) {\n      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"rotate(\", null, \")\") - 2,\n        x: d3_interpolateNumber(ra, rb)\n      });\n    } else if (rb) {\n      s.push(d3_interpolateTransformPop(s) + \"rotate(\" + rb + \")\");\n    }\n  }\n  function d3_interpolateSkew(wa, wb, s, q) {\n    if (wa !== wb) {\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"skewX(\", null, \")\") - 2,\n        x: d3_interpolateNumber(wa, wb)\n      });\n    } else if (wb) {\n      s.push(d3_interpolateTransformPop(s) + \"skewX(\" + wb + \")\");\n    }\n  }\n  function d3_interpolateScale(ka, kb, s, q) {\n    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {\n      var i = s.push(d3_interpolateTransformPop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ka[0], kb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ka[1], kb[1])\n      });\n    } else if (kb[0] !== 1 || kb[1] !== 1) {\n      s.push(d3_interpolateTransformPop(s) + \"scale(\" + kb + \")\");\n    }\n  }\n  function d3_interpolateTransform(a, b) {\n    var s = [], q = [];\n    a = d3.transform(a), b = d3.transform(b);\n    d3_interpolateTranslate(a.translate, b.translate, s, q);\n    d3_interpolateRotate(a.rotate, b.rotate, s, q);\n    d3_interpolateSkew(a.skew, b.skew, s, q);\n    d3_interpolateScale(a.scale, b.scale, s, q);\n    a = b = null;\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  }\n  function d3_uninterpolateNumber(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return (x - a) / b;\n    };\n  }\n  function d3_uninterpolateClamp(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return Math.max(0, Math.min(1, (x - a) / b));\n    };\n  }\n  d3.layout = {};\n  d3.layout.bundle = function() {\n    return function(links) {\n      var paths = [], i = -1, n = links.length;\n      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));\n      return paths;\n    };\n  };\n  function d3_layout_bundlePath(link) {\n    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n    while (start !== lca) {\n      start = start.parent;\n      points.push(start);\n    }\n    var k = points.length;\n    while (end !== lca) {\n      points.splice(k, 0, end);\n      end = end.parent;\n    }\n    return points;\n  }\n  function d3_layout_bundleAncestors(node) {\n    var ancestors = [], parent = node.parent;\n    while (parent != null) {\n      ancestors.push(node);\n      node = parent;\n      parent = parent.parent;\n    }\n    ancestors.push(node);\n    return ancestors;\n  }\n  function d3_layout_bundleLeastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n    while (aNode === bNode) {\n      sharedNode = aNode;\n      aNode = aNodes.pop();\n      bNode = bNodes.pop();\n    }\n    return sharedNode;\n  }\n  d3.layout.chord = function() {\n    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n    function relayout() {\n      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n      chords = [];\n      groups = [];\n      k = 0, i = -1;\n      while (++i < n) {\n        x = 0, j = -1;\n        while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(d3.range(n));\n        k += x;\n      }\n      if (sortGroups) {\n        groupIndex.sort(function(a, b) {\n          return sortGroups(groupSums[a], groupSums[b]);\n        });\n      }\n      if (sortSubgroups) {\n        subgroupIndex.forEach(function(d, i) {\n          d.sort(function(a, b) {\n            return sortSubgroups(matrix[i][a], matrix[i][b]);\n          });\n        });\n      }\n      k = (τ - padding * n) / k;\n      x = 0, i = -1;\n      while (++i < n) {\n        x0 = x, j = -1;\n        while (++j < n) {\n          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;\n          subgroups[di + \"-\" + dj] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: groupSums[di]\n        };\n        x += padding;\n      }\n      i = -1;\n      while (++i < n) {\n        j = i - 1;\n        while (++j < n) {\n          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value ? {\n              source: target,\n              target: source\n            } : {\n              source: source,\n              target: target\n            });\n          }\n        }\n      }\n      if (sortChords) resort();\n    }\n    function resort() {\n      chords.sort(function(a, b) {\n        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n      });\n    }\n    chord.matrix = function(x) {\n      if (!arguments.length) return matrix;\n      n = (matrix = x) && matrix.length;\n      chords = groups = null;\n      return chord;\n    };\n    chord.padding = function(x) {\n      if (!arguments.length) return padding;\n      padding = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortGroups = function(x) {\n      if (!arguments.length) return sortGroups;\n      sortGroups = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortSubgroups = function(x) {\n      if (!arguments.length) return sortSubgroups;\n      sortSubgroups = x;\n      chords = null;\n      return chord;\n    };\n    chord.sortChords = function(x) {\n      if (!arguments.length) return sortChords;\n      sortChords = x;\n      if (chords) resort();\n      return chord;\n    };\n    chord.chords = function() {\n      if (!chords) relayout();\n      return chords;\n    };\n    chord.groups = function() {\n      if (!groups) relayout();\n      return groups;\n    };\n    return chord;\n  };\n  d3.layout.force = function() {\n    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n    function repulse(node) {\n      return function(quad, x1, _, x2) {\n        if (quad.point !== node) {\n          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;\n          if (dw * dw / theta2 < dn) {\n            if (dn < chargeDistance2) {\n              var k = quad.charge / dn;\n              node.px -= dx * k;\n              node.py -= dy * k;\n            }\n            return true;\n          }\n          if (quad.point && dn && dn < chargeDistance2) {\n            var k = quad.pointCharge / dn;\n            node.px -= dx * k;\n            node.py -= dy * k;\n          }\n        }\n        return !quad.charge;\n      };\n    }\n    force.tick = function() {\n      if ((alpha *= .99) < .005) {\n        timer = null;\n        event.end({\n          type: \"end\",\n          alpha: alpha = 0\n        });\n        return true;\n      }\n      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        s = o.source;\n        t = o.target;\n        x = t.x - s.x;\n        y = t.y - s.y;\n        if (l = x * x + y * y) {\n          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n          x *= l;\n          y *= l;\n          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);\n          t.y -= y * k;\n          s.x += x * (k = 1 - k);\n          s.y += y * k;\n        }\n      }\n      if (k = alpha * gravity) {\n        x = size[0] / 2;\n        y = size[1] / 2;\n        i = -1;\n        if (k) while (++i < n) {\n          o = nodes[i];\n          o.x += (x - o.x) * k;\n          o.y += (y - o.y) * k;\n        }\n      }\n      if (charge) {\n        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n        i = -1;\n        while (++i < n) {\n          if (!(o = nodes[i]).fixed) {\n            q.visit(repulse(o));\n          }\n        }\n      }\n      i = -1;\n      while (++i < n) {\n        o = nodes[i];\n        if (o.fixed) {\n          o.x = o.px;\n          o.y = o.py;\n        } else {\n          o.x -= (o.px - (o.px = o.x)) * friction;\n          o.y -= (o.py - (o.py = o.y)) * friction;\n        }\n      }\n      event.tick({\n        type: \"tick\",\n        alpha: alpha\n      });\n    };\n    force.nodes = function(x) {\n      if (!arguments.length) return nodes;\n      nodes = x;\n      return force;\n    };\n    force.links = function(x) {\n      if (!arguments.length) return links;\n      links = x;\n      return force;\n    };\n    force.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return force;\n    };\n    force.linkDistance = function(x) {\n      if (!arguments.length) return linkDistance;\n      linkDistance = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.distance = force.linkDistance;\n    force.linkStrength = function(x) {\n      if (!arguments.length) return linkStrength;\n      linkStrength = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.friction = function(x) {\n      if (!arguments.length) return friction;\n      friction = +x;\n      return force;\n    };\n    force.charge = function(x) {\n      if (!arguments.length) return charge;\n      charge = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.chargeDistance = function(x) {\n      if (!arguments.length) return Math.sqrt(chargeDistance2);\n      chargeDistance2 = x * x;\n      return force;\n    };\n    force.gravity = function(x) {\n      if (!arguments.length) return gravity;\n      gravity = +x;\n      return force;\n    };\n    force.theta = function(x) {\n      if (!arguments.length) return Math.sqrt(theta2);\n      theta2 = x * x;\n      return force;\n    };\n    force.alpha = function(x) {\n      if (!arguments.length) return alpha;\n      x = +x;\n      if (alpha) {\n        if (x > 0) {\n          alpha = x;\n        } else {\n          timer.c = null, timer.t = NaN, timer = null;\n          event.end({\n            type: \"end\",\n            alpha: alpha = 0\n          });\n        }\n      } else if (x > 0) {\n        event.start({\n          type: \"start\",\n          alpha: alpha = x\n        });\n        timer = d3_timer(force.tick);\n      }\n      return force;\n    };\n    force.start = function() {\n      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;\n      for (i = 0; i < n; ++i) {\n        (o = nodes[i]).index = i;\n        o.weight = 0;\n      }\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        if (typeof o.source == \"number\") o.source = nodes[o.source];\n        if (typeof o.target == \"number\") o.target = nodes[o.target];\n        ++o.source.weight;\n        ++o.target.weight;\n      }\n      for (i = 0; i < n; ++i) {\n        o = nodes[i];\n        if (isNaN(o.x)) o.x = position(\"x\", w);\n        if (isNaN(o.y)) o.y = position(\"y\", h);\n        if (isNaN(o.px)) o.px = o.x;\n        if (isNaN(o.py)) o.py = o.y;\n      }\n      distances = [];\n      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n      strengths = [];\n      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n      charges = [];\n      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n      function position(dimension, size) {\n        if (!neighbors) {\n          neighbors = new Array(n);\n          for (j = 0; j < n; ++j) {\n            neighbors[j] = [];\n          }\n          for (j = 0; j < m; ++j) {\n            var o = links[j];\n            neighbors[o.source.index].push(o.target);\n            neighbors[o.target.index].push(o.source);\n          }\n        }\n        var candidates = neighbors[i], j = -1, l = candidates.length, x;\n        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;\n        return Math.random() * size;\n      }\n      return force.resume();\n    };\n    force.resume = function() {\n      return force.alpha(.1);\n    };\n    force.stop = function() {\n      return force.alpha(0);\n    };\n    force.drag = function() {\n      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n      if (!arguments.length) return drag;\n      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);\n    };\n    function dragmove(d) {\n      d.px = d3.event.x, d.py = d3.event.y;\n      force.resume();\n    }\n    return d3.rebind(force, event, \"on\");\n  };\n  function d3_layout_forceDragstart(d) {\n    d.fixed |= 2;\n  }\n  function d3_layout_forceDragend(d) {\n    d.fixed &= ~6;\n  }\n  function d3_layout_forceMouseover(d) {\n    d.fixed |= 4;\n    d.px = d.x, d.py = d.y;\n  }\n  function d3_layout_forceMouseout(d) {\n    d.fixed &= ~4;\n  }\n  function d3_layout_forceAccumulate(quad, alpha, charges) {\n    var cx = 0, cy = 0;\n    quad.charge = 0;\n    if (!quad.leaf) {\n      var nodes = quad.nodes, n = nodes.length, i = -1, c;\n      while (++i < n) {\n        c = nodes[i];\n        if (c == null) continue;\n        d3_layout_forceAccumulate(c, alpha, charges);\n        quad.charge += c.charge;\n        cx += c.charge * c.cx;\n        cy += c.charge * c.cy;\n      }\n    }\n    if (quad.point) {\n      if (!quad.leaf) {\n        quad.point.x += Math.random() - .5;\n        quad.point.y += Math.random() - .5;\n      }\n      var k = alpha * charges[quad.point.index];\n      quad.charge += quad.pointCharge = k;\n      cx += k * quad.point.x;\n      cy += k * quad.point.y;\n    }\n    quad.cx = cx / quad.charge;\n    quad.cy = cy / quad.charge;\n  }\n  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;\n  d3.layout.hierarchy = function() {\n    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;\n    function hierarchy(root) {\n      var stack = [ root ], nodes = [], node;\n      root.depth = 0;\n      while ((node = stack.pop()) != null) {\n        nodes.push(node);\n        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {\n          var n, childs, child;\n          while (--n >= 0) {\n            stack.push(child = childs[n]);\n            child.parent = node;\n            child.depth = node.depth + 1;\n          }\n          if (value) node.value = 0;\n          node.children = childs;\n        } else {\n          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          delete node.children;\n        }\n      }\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var childs, parent;\n        if (sort && (childs = node.children)) childs.sort(sort);\n        if (value && (parent = node.parent)) parent.value += node.value;\n      });\n      return nodes;\n    }\n    hierarchy.sort = function(x) {\n      if (!arguments.length) return sort;\n      sort = x;\n      return hierarchy;\n    };\n    hierarchy.children = function(x) {\n      if (!arguments.length) return children;\n      children = x;\n      return hierarchy;\n    };\n    hierarchy.value = function(x) {\n      if (!arguments.length) return value;\n      value = x;\n      return hierarchy;\n    };\n    hierarchy.revalue = function(root) {\n      if (value) {\n        d3_layout_hierarchyVisitBefore(root, function(node) {\n          if (node.children) node.value = 0;\n        });\n        d3_layout_hierarchyVisitAfter(root, function(node) {\n          var parent;\n          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          if (parent = node.parent) parent.value += node.value;\n        });\n      }\n      return root;\n    };\n    return hierarchy;\n  };\n  function d3_layout_hierarchyRebind(object, hierarchy) {\n    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");\n    object.nodes = object;\n    object.links = d3_layout_hierarchyLinks;\n    return object;\n  }\n  function d3_layout_hierarchyVisitBefore(node, callback) {\n    var nodes = [ node ];\n    while ((node = nodes.pop()) != null) {\n      callback(node);\n      if ((children = node.children) && (n = children.length)) {\n        var n, children;\n        while (--n >= 0) nodes.push(children[n]);\n      }\n    }\n  }\n  function d3_layout_hierarchyVisitAfter(node, callback) {\n    var nodes = [ node ], nodes2 = [];\n    while ((node = nodes.pop()) != null) {\n      nodes2.push(node);\n      if ((children = node.children) && (n = children.length)) {\n        var i = -1, n, children;\n        while (++i < n) nodes.push(children[i]);\n      }\n    }\n    while ((node = nodes2.pop()) != null) {\n      callback(node);\n    }\n  }\n  function d3_layout_hierarchyChildren(d) {\n    return d.children;\n  }\n  function d3_layout_hierarchyValue(d) {\n    return d.value;\n  }\n  function d3_layout_hierarchySort(a, b) {\n    return b.value - a.value;\n  }\n  function d3_layout_hierarchyLinks(nodes) {\n    return d3.merge(nodes.map(function(parent) {\n      return (parent.children || []).map(function(child) {\n        return {\n          source: parent,\n          target: child\n        };\n      });\n    }));\n  }\n  d3.layout.partition = function() {\n    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];\n    function position(node, x, dx, dy) {\n      var children = node.children;\n      node.x = x;\n      node.y = node.depth * dy;\n      node.dx = dx;\n      node.dy = dy;\n      if (children && (n = children.length)) {\n        var i = -1, n, c, d;\n        dx = node.value ? dx / node.value : 0;\n        while (++i < n) {\n          position(c = children[i], x, d = c.value * dx, dy);\n          x += d;\n        }\n      }\n    }\n    function depth(node) {\n      var children = node.children, d = 0;\n      if (children && (n = children.length)) {\n        var i = -1, n;\n        while (++i < n) d = Math.max(d, depth(children[i]));\n      }\n      return 1 + d;\n    }\n    function partition(d, i) {\n      var nodes = hierarchy.call(this, d, i);\n      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n      return nodes;\n    }\n    partition.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return partition;\n    };\n    return d3_layout_hierarchyRebind(partition, hierarchy);\n  };\n  d3.layout.pie = function() {\n    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;\n    function pie(data) {\n      var n = data.length, values = data.map(function(d, i) {\n        return +value.call(pie, d, i);\n      }), a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \"function\" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;\n      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {\n        return values[j] - values[i];\n      } : function(i, j) {\n        return sort(data[i], data[j]);\n      });\n      index.forEach(function(i) {\n        arcs[i] = {\n          data: data[i],\n          value: v = values[i],\n          startAngle: a,\n          endAngle: a += v * k + pa,\n          padAngle: p\n        };\n      });\n      return arcs;\n    }\n    pie.value = function(_) {\n      if (!arguments.length) return value;\n      value = _;\n      return pie;\n    };\n    pie.sort = function(_) {\n      if (!arguments.length) return sort;\n      sort = _;\n      return pie;\n    };\n    pie.startAngle = function(_) {\n      if (!arguments.length) return startAngle;\n      startAngle = _;\n      return pie;\n    };\n    pie.endAngle = function(_) {\n      if (!arguments.length) return endAngle;\n      endAngle = _;\n      return pie;\n    };\n    pie.padAngle = function(_) {\n      if (!arguments.length) return padAngle;\n      padAngle = _;\n      return pie;\n    };\n    return pie;\n  };\n  var d3_layout_pieSortByValue = {};\n  d3.layout.stack = function() {\n    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n    function stack(data, index) {\n      if (!(n = data.length)) return data;\n      var series = data.map(function(d, i) {\n        return values.call(stack, d, i);\n      });\n      var points = series.map(function(d) {\n        return d.map(function(v, i) {\n          return [ x.call(stack, v, i), y.call(stack, v, i) ];\n        });\n      });\n      var orders = order.call(stack, points, index);\n      series = d3.permute(series, orders);\n      points = d3.permute(points, orders);\n      var offsets = offset.call(stack, points, index);\n      var m = series[0].length, n, i, j, o;\n      for (j = 0; j < m; ++j) {\n        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n        for (i = 1; i < n; ++i) {\n          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n        }\n      }\n      return data;\n    }\n    stack.values = function(x) {\n      if (!arguments.length) return values;\n      values = x;\n      return stack;\n    };\n    stack.order = function(x) {\n      if (!arguments.length) return order;\n      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n      return stack;\n    };\n    stack.offset = function(x) {\n      if (!arguments.length) return offset;\n      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n      return stack;\n    };\n    stack.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      return stack;\n    };\n    stack.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      return stack;\n    };\n    stack.out = function(z) {\n      if (!arguments.length) return out;\n      out = z;\n      return stack;\n    };\n    return stack;\n  };\n  function d3_layout_stackX(d) {\n    return d.x;\n  }\n  function d3_layout_stackY(d) {\n    return d.y;\n  }\n  function d3_layout_stackOut(d, y0, y) {\n    d.y0 = y0;\n    d.y = y;\n  }\n  var d3_layout_stackOrders = d3.map({\n    \"inside-out\": function(data) {\n      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n        return max[a] - max[b];\n      }), top = 0, bottom = 0, tops = [], bottoms = [];\n      for (i = 0; i < n; ++i) {\n        j = index[i];\n        if (top < bottom) {\n          top += sums[j];\n          tops.push(j);\n        } else {\n          bottom += sums[j];\n          bottoms.push(j);\n        }\n      }\n      return bottoms.reverse().concat(tops);\n    },\n    reverse: function(data) {\n      return d3.range(data.length).reverse();\n    },\n    \"default\": d3_layout_stackOrderDefault\n  });\n  var d3_layout_stackOffsets = d3.map({\n    silhouette: function(data) {\n      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o > max) max = o;\n        sums.push(o);\n      }\n      for (j = 0; j < m; ++j) {\n        y0[j] = (max - sums[j]) / 2;\n      }\n      return y0;\n    },\n    wiggle: function(data) {\n      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];\n      y0[0] = o = o0 = 0;\n      for (j = 1; j < m; ++j) {\n        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];\n        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {\n          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {\n            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n          }\n          s2 += s3 * data[i][j][1];\n        }\n        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n        if (o < o0) o0 = o;\n      }\n      for (j = 0; j < m; ++j) y0[j] -= o0;\n      return y0;\n    },\n    expand: function(data) {\n      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;\n      }\n      for (j = 0; j < m; ++j) y0[j] = 0;\n      return y0;\n    },\n    zero: d3_layout_stackOffsetZero\n  });\n  function d3_layout_stackOrderDefault(data) {\n    return d3.range(data.length);\n  }\n  function d3_layout_stackOffsetZero(data) {\n    var j = -1, m = data[0].length, y0 = [];\n    while (++j < m) y0[j] = 0;\n    return y0;\n  }\n  function d3_layout_stackMaxIndex(array) {\n    var i = 1, j = 0, v = array[0][1], k, n = array.length;\n    for (;i < n; ++i) {\n      if ((k = array[i][1]) > v) {\n        j = i;\n        v = k;\n      }\n    }\n    return j;\n  }\n  function d3_layout_stackReduceSum(d) {\n    return d.reduce(d3_layout_stackSum, 0);\n  }\n  function d3_layout_stackSum(p, d) {\n    return p + d[1];\n  }\n  d3.layout.histogram = function() {\n    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;\n    function histogram(data, i) {\n      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n      while (++i < m) {\n        bin = bins[i] = [];\n        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n        bin.y = 0;\n      }\n      if (m > 0) {\n        i = -1;\n        while (++i < n) {\n          x = values[i];\n          if (x >= range[0] && x <= range[1]) {\n            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n            bin.y += k;\n            bin.push(data[i]);\n          }\n        }\n      }\n      return bins;\n    }\n    histogram.value = function(x) {\n      if (!arguments.length) return valuer;\n      valuer = x;\n      return histogram;\n    };\n    histogram.range = function(x) {\n      if (!arguments.length) return ranger;\n      ranger = d3_functor(x);\n      return histogram;\n    };\n    histogram.bins = function(x) {\n      if (!arguments.length) return binner;\n      binner = typeof x === \"number\" ? function(range) {\n        return d3_layout_histogramBinFixed(range, x);\n      } : d3_functor(x);\n      return histogram;\n    };\n    histogram.frequency = function(x) {\n      if (!arguments.length) return frequency;\n      frequency = !!x;\n      return histogram;\n    };\n    return histogram;\n  };\n  function d3_layout_histogramBinSturges(range, values) {\n    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n  }\n  function d3_layout_histogramBinFixed(range, n) {\n    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];\n    while (++x <= n) f[x] = m * x + b;\n    return f;\n  }\n  function d3_layout_histogramRange(values) {\n    return [ d3.min(values), d3.max(values) ];\n  }\n  d3.layout.pack = function() {\n    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;\n    function pack(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \"function\" ? radius : function() {\n        return radius;\n      };\n      root.x = root.y = 0;\n      d3_layout_hierarchyVisitAfter(root, function(d) {\n        d.r = +r(d.value);\n      });\n      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n      if (padding) {\n        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r += dr;\n        });\n        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r -= dr;\n        });\n      }\n      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n      return nodes;\n    }\n    pack.size = function(_) {\n      if (!arguments.length) return size;\n      size = _;\n      return pack;\n    };\n    pack.radius = function(_) {\n      if (!arguments.length) return radius;\n      radius = _ == null || typeof _ === \"function\" ? _ : +_;\n      return pack;\n    };\n    pack.padding = function(_) {\n      if (!arguments.length) return padding;\n      padding = +_;\n      return pack;\n    };\n    return d3_layout_hierarchyRebind(pack, hierarchy);\n  };\n  function d3_layout_packSort(a, b) {\n    return a.value - b.value;\n  }\n  function d3_layout_packInsert(a, b) {\n    var c = a._pack_next;\n    a._pack_next = b;\n    b._pack_prev = a;\n    b._pack_next = c;\n    c._pack_prev = b;\n  }\n  function d3_layout_packSplice(a, b) {\n    a._pack_next = b;\n    b._pack_prev = a;\n  }\n  function d3_layout_packIntersects(a, b) {\n    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;\n    return .999 * dr * dr > dx * dx + dy * dy;\n  }\n  function d3_layout_packSiblings(node) {\n    if (!(nodes = node.children) || !(n = nodes.length)) return;\n    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;\n    function bound(node) {\n      xMin = Math.min(node.x - node.r, xMin);\n      xMax = Math.max(node.x + node.r, xMax);\n      yMin = Math.min(node.y - node.r, yMin);\n      yMax = Math.max(node.y + node.r, yMax);\n    }\n    nodes.forEach(d3_layout_packLink);\n    a = nodes[0];\n    a.x = -a.r;\n    a.y = 0;\n    bound(a);\n    if (n > 1) {\n      b = nodes[1];\n      b.x = b.r;\n      b.y = 0;\n      bound(b);\n      if (n > 2) {\n        c = nodes[2];\n        d3_layout_packPlace(a, b, c);\n        bound(c);\n        d3_layout_packInsert(a, c);\n        a._pack_prev = c;\n        d3_layout_packInsert(c, b);\n        b = a._pack_next;\n        for (i = 3; i < n; i++) {\n          d3_layout_packPlace(a, b, c = nodes[i]);\n          var isect = 0, s1 = 1, s2 = 1;\n          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n            if (d3_layout_packIntersects(j, c)) {\n              isect = 1;\n              break;\n            }\n          }\n          if (isect == 1) {\n            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n              if (d3_layout_packIntersects(k, c)) {\n                break;\n              }\n            }\n          }\n          if (isect) {\n            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);\n            i--;\n          } else {\n            d3_layout_packInsert(a, c);\n            b = c;\n            bound(c);\n          }\n        }\n      }\n    }\n    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;\n    for (i = 0; i < n; i++) {\n      c = nodes[i];\n      c.x -= cx;\n      c.y -= cy;\n      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n    }\n    node.r = cr;\n    nodes.forEach(d3_layout_packUnlink);\n  }\n  function d3_layout_packLink(node) {\n    node._pack_next = node._pack_prev = node;\n  }\n  function d3_layout_packUnlink(node) {\n    delete node._pack_next;\n    delete node._pack_prev;\n  }\n  function d3_layout_packTransform(node, x, y, k) {\n    var children = node.children;\n    node.x = x += k * node.x;\n    node.y = y += k * node.y;\n    node.r *= k;\n    if (children) {\n      var i = -1, n = children.length;\n      while (++i < n) d3_layout_packTransform(children[i], x, y, k);\n    }\n  }\n  function d3_layout_packPlace(a, b, c) {\n    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;\n    if (db && (dx || dy)) {\n      var da = b.r + c.r, dc = dx * dx + dy * dy;\n      da *= da;\n      db *= db;\n      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = a.x + x * dx + y * dy;\n      c.y = a.y + x * dy - y * dx;\n    } else {\n      c.x = a.x + db;\n      c.y = a.y;\n    }\n  }\n  d3.layout.tree = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n    function tree(d, i) {\n      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);\n      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {\n        var left = root0, right = root0, bottom = root0;\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n      return nodes;\n    }\n    function wrapTree(root0) {\n      var root1 = {\n        A: null,\n        children: [ root0 ]\n      }, queue = [ root1 ], node1;\n      while ((node1 = queue.pop()) != null) {\n        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {\n          queue.push((children[i] = child = {\n            _: children[i],\n            parent: node1,\n            children: (child = children[i].children) && child.slice() || [],\n            A: null,\n            a: null,\n            z: 0,\n            m: 0,\n            c: 0,\n            s: 0,\n            t: null,\n            i: i\n          }).a = child);\n        }\n      }\n      return root1.children[0];\n    }\n    function firstWalk(v) {\n      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;\n      if (children.length) {\n        d3_layout_treeShift(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {\n          vom = d3_layout_treeLeft(vom);\n          vop = d3_layout_treeRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !d3_layout_treeRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !d3_layout_treeLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n    function sizeNode(node) {\n      node.x *= size[0];\n      node.y = node.depth * size[1];\n    }\n    tree.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return tree;\n    };\n    tree.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null ? sizeNode : null;\n      return tree;\n    };\n    tree.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) == null ? null : sizeNode;\n      return tree;\n    };\n    return d3_layout_hierarchyRebind(tree, hierarchy);\n  };\n  function d3_layout_treeSeparation(a, b) {\n    return a.parent == b.parent ? 1 : 2;\n  }\n  function d3_layout_treeLeft(v) {\n    var children = v.children;\n    return children.length ? children[0] : v.t;\n  }\n  function d3_layout_treeRight(v) {\n    var children = v.children, n;\n    return (n = children.length) ? children[n - 1] : v.t;\n  }\n  function d3_layout_treeMove(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n  function d3_layout_treeShift(v) {\n    var shift = 0, change = 0, children = v.children, i = children.length, w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n  function d3_layout_treeAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n  d3.layout.cluster = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n    function cluster(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var children = node.children;\n        if (children && children.length) {\n          node.x = d3_layout_clusterX(children);\n          node.y = d3_layout_clusterY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {\n        node.x = (node.x - root.x) * size[0];\n        node.y = (root.y - node.y) * size[1];\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * size[0];\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n      });\n      return nodes;\n    }\n    cluster.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return cluster;\n    };\n    cluster.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null;\n      return cluster;\n    };\n    cluster.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) != null;\n      return cluster;\n    };\n    return d3_layout_hierarchyRebind(cluster, hierarchy);\n  };\n  function d3_layout_clusterY(children) {\n    return 1 + d3.max(children, function(child) {\n      return child.y;\n    });\n  }\n  function d3_layout_clusterX(children) {\n    return children.reduce(function(x, child) {\n      return x + child.x;\n    }, 0) / children.length;\n  }\n  function d3_layout_clusterLeft(node) {\n    var children = node.children;\n    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;\n  }\n  function d3_layout_clusterRight(node) {\n    var children = node.children, n;\n    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n  }\n  d3.layout.treemap = function() {\n    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n    function scale(children, k) {\n      var i = -1, n = children.length, child, area;\n      while (++i < n) {\n        area = (child = children[i]).value * (k < 0 ? 0 : k);\n        child.area = isNaN(area) || area <= 0 ? 0 : area;\n      }\n    }\n    function squarify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while ((n = remaining.length) > 0) {\n          row.push(child = remaining[n - 1]);\n          row.area += child.area;\n          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {\n            remaining.pop();\n            best = score;\n          } else {\n            row.area -= row.pop().area;\n            position(row, u, rect, false);\n            u = Math.min(rect.dx, rect.dy);\n            row.length = row.area = 0;\n            best = Infinity;\n          }\n        }\n        if (row.length) {\n          position(row, u, rect, true);\n          row.length = row.area = 0;\n        }\n        children.forEach(squarify);\n      }\n    }\n    function stickify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), remaining = children.slice(), child, row = [];\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while (child = remaining.pop()) {\n          row.push(child);\n          row.area += child.area;\n          if (child.z != null) {\n            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n            row.length = row.area = 0;\n          }\n        }\n        children.forEach(stickify);\n      }\n    }\n    function worst(row, u) {\n      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;\n      while (++i < n) {\n        if (!(r = row[i].area)) continue;\n        if (r < rmin) rmin = r;\n        if (r > rmax) rmax = r;\n      }\n      s *= s;\n      u *= u;\n      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n    }\n    function position(row, u, rect, flush) {\n      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;\n      if (u == rect.dx) {\n        if (flush || v > rect.dy) v = rect.dy;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dy = v;\n          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n        }\n        o.z = true;\n        o.dx += rect.x + rect.dx - x;\n        rect.y += v;\n        rect.dy -= v;\n      } else {\n        if (flush || v > rect.dx) v = rect.dx;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dx = v;\n          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n        }\n        o.z = false;\n        o.dy += rect.y + rect.dy - y;\n        rect.x += v;\n        rect.dx -= v;\n      }\n    }\n    function treemap(d) {\n      var nodes = stickies || hierarchy(d), root = nodes[0];\n      root.x = root.y = 0;\n      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;\n      if (stickies) hierarchy.revalue(root);\n      scale([ root ], root.dx * root.dy / root.value);\n      (stickies ? stickify : squarify)(root);\n      if (sticky) stickies = nodes;\n      return nodes;\n    }\n    treemap.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return treemap;\n    };\n    treemap.padding = function(x) {\n      if (!arguments.length) return padding;\n      function padFunction(node) {\n        var p = x.call(treemap, node, node.depth);\n        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n      }\n      function padConstant(node) {\n        return d3_layout_treemapPad(node, x);\n      }\n      var type;\n      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ], \n      padConstant) : padConstant;\n      return treemap;\n    };\n    treemap.round = function(x) {\n      if (!arguments.length) return round != Number;\n      round = x ? Math.round : Number;\n      return treemap;\n    };\n    treemap.sticky = function(x) {\n      if (!arguments.length) return sticky;\n      sticky = x;\n      stickies = null;\n      return treemap;\n    };\n    treemap.ratio = function(x) {\n      if (!arguments.length) return ratio;\n      ratio = x;\n      return treemap;\n    };\n    treemap.mode = function(x) {\n      if (!arguments.length) return mode;\n      mode = x + \"\";\n      return treemap;\n    };\n    return d3_layout_hierarchyRebind(treemap, hierarchy);\n  };\n  function d3_layout_treemapPadNull(node) {\n    return {\n      x: node.x,\n      y: node.y,\n      dx: node.dx,\n      dy: node.dy\n    };\n  }\n  function d3_layout_treemapPad(node, padding) {\n    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n    if (dx < 0) {\n      x += dx / 2;\n      dx = 0;\n    }\n    if (dy < 0) {\n      y += dy / 2;\n      dy = 0;\n    }\n    return {\n      x: x,\n      y: y,\n      dx: dx,\n      dy: dy\n    };\n  }\n  d3.random = {\n    normal: function(µ, σ) {\n      var n = arguments.length;\n      if (n < 2) σ = 1;\n      if (n < 1) µ = 0;\n      return function() {\n        var x, y, r;\n        do {\n          x = Math.random() * 2 - 1;\n          y = Math.random() * 2 - 1;\n          r = x * x + y * y;\n        } while (!r || r > 1);\n        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n      };\n    },\n    logNormal: function() {\n      var random = d3.random.normal.apply(d3, arguments);\n      return function() {\n        return Math.exp(random());\n      };\n    },\n    bates: function(m) {\n      var random = d3.random.irwinHall(m);\n      return function() {\n        return random() / m;\n      };\n    },\n    irwinHall: function(m) {\n      return function() {\n        for (var s = 0, j = 0; j < m; j++) s += Math.random();\n        return s;\n      };\n    }\n  };\n  d3.scale = {};\n  function d3_scaleExtent(domain) {\n    var start = domain[0], stop = domain[domain.length - 1];\n    return start < stop ? [ start, stop ] : [ stop, start ];\n  }\n  function d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n  }\n  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);\n    return function(x) {\n      return i(u(x));\n    };\n  }\n  function d3_scale_nice(domain, nice) {\n    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;\n    if (x1 < x0) {\n      dx = i0, i0 = i1, i1 = dx;\n      dx = x0, x0 = x1, x1 = dx;\n    }\n    domain[i0] = nice.floor(x0);\n    domain[i1] = nice.ceil(x1);\n    return domain;\n  }\n  function d3_scale_niceStep(step) {\n    return step ? {\n      floor: function(x) {\n        return Math.floor(x / step) * step;\n      },\n      ceil: function(x) {\n        return Math.ceil(x / step) * step;\n      }\n    } : d3_scale_niceIdentity;\n  }\n  var d3_scale_niceIdentity = {\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;\n    if (domain[k] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n    while (++j <= k) {\n      u.push(uninterpolate(domain[j - 1], domain[j]));\n      i.push(interpolate(range[j - 1], range[j]));\n    }\n    return function(x) {\n      var j = d3.bisect(domain, x, 1, k) - 1;\n      return i[j](u[j](x));\n    };\n  }\n  d3.scale.linear = function() {\n    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);\n  };\n  function d3_scale_linear(domain, range, interpolate, clamp) {\n    var output, input;\n    function rescale() {\n      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n      output = linear(domain, range, uninterpolate, interpolate);\n      input = linear(range, domain, uninterpolate, d3_interpolate);\n      return scale;\n    }\n    function scale(x) {\n      return output(x);\n    }\n    scale.invert = function(y) {\n      return input(y);\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(Number);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.rangeRound = function(x) {\n      return scale.range(x).interpolate(d3_interpolateRound);\n    };\n    scale.clamp = function(x) {\n      if (!arguments.length) return clamp;\n      clamp = x;\n      return rescale();\n    };\n    scale.interpolate = function(x) {\n      if (!arguments.length) return interpolate;\n      interpolate = x;\n      return rescale();\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      d3_scale_linearNice(domain, m);\n      return rescale();\n    };\n    scale.copy = function() {\n      return d3_scale_linear(domain, range, interpolate, clamp);\n    };\n    return rescale();\n  }\n  function d3_scale_linearRebind(scale, linear) {\n    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");\n  }\n  function d3_scale_linearNice(domain, m) {\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    return domain;\n  }\n  function d3_scale_linearTickRange(domain, m) {\n    if (m == null) m = 10;\n    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;\n    extent[0] = Math.ceil(extent[0] / step) * step;\n    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n    extent[2] = step;\n    return extent;\n  }\n  function d3_scale_linearTicks(domain, m) {\n    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n  }\n  function d3_scale_linearTickFormat(domain, m, format) {\n    var range = d3_scale_linearTickRange(domain, m);\n    if (format) {\n      var match = d3_format_re.exec(format);\n      match.shift();\n      if (match[8] === \"s\") {\n        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n        if (!match[7]) match[7] = \".\" + d3_scale_linearPrecision(prefix.scale(range[2]));\n        match[8] = \"f\";\n        format = d3.format(match.join(\"\"));\n        return function(d) {\n          return format(prefix.scale(d)) + prefix.symbol;\n        };\n      }\n      if (!match[7]) match[7] = \".\" + d3_scale_linearFormatPrecision(match[8], range);\n      format = match.join(\"\");\n    } else {\n      format = \",.\" + d3_scale_linearPrecision(range[2]) + \"f\";\n    }\n    return d3.format(format);\n  }\n  var d3_scale_linearFormatSignificant = {\n    s: 1,\n    g: 1,\n    p: 1,\n    r: 1,\n    e: 1\n  };\n  function d3_scale_linearPrecision(value) {\n    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n  }\n  function d3_scale_linearFormatPrecision(type, range) {\n    var p = d3_scale_linearPrecision(range[2]);\n    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \"e\") : p - (type === \"%\") * 2;\n  }\n  d3.scale.log = function() {\n    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);\n  };\n  function d3_scale_log(linear, base, positive, domain) {\n    function log(x) {\n      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);\n    }\n    function pow(x) {\n      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n    }\n    function scale(x) {\n      return linear(log(x));\n    }\n    scale.invert = function(x) {\n      return pow(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      positive = x[0] >= 0;\n      linear.domain((domain = x.map(Number)).map(log));\n      return scale;\n    };\n    scale.base = function(_) {\n      if (!arguments.length) return base;\n      base = +_;\n      linear.domain(domain.map(log));\n      return scale;\n    };\n    scale.nice = function() {\n      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n      linear.domain(niced);\n      domain = niced.map(pow);\n      return scale;\n    };\n    scale.ticks = function() {\n      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n      if (isFinite(j - i)) {\n        if (positive) {\n          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);\n          ticks.push(pow(i));\n        } else {\n          ticks.push(pow(i));\n          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);\n        }\n        for (i = 0; ticks[i] < u; i++) {}\n        for (j = ticks.length; ticks[j - 1] > v; j--) {}\n        ticks = ticks.slice(i, j);\n      }\n      return ticks;\n    };\n    scale.tickFormat = function(n, format) {\n      if (!arguments.length) return d3_scale_logFormat;\n      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== \"function\") format = d3.format(format);\n      var k = Math.max(1, base * n / scale.ticks().length);\n      return function(d) {\n        var i = d / pow(Math.round(log(d)));\n        if (i * base < base - .5) i *= base;\n        return i <= k ? format(d) : \"\";\n      };\n    };\n    scale.copy = function() {\n      return d3_scale_log(linear.copy(), base, positive, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  var d3_scale_logFormat = d3.format(\".0e\"), d3_scale_logNiceNegative = {\n    floor: function(x) {\n      return -Math.ceil(-x);\n    },\n    ceil: function(x) {\n      return -Math.floor(-x);\n    }\n  };\n  d3.scale.pow = function() {\n    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);\n  };\n  function d3_scale_pow(linear, exponent, domain) {\n    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);\n    function scale(x) {\n      return linear(powp(x));\n    }\n    scale.invert = function(x) {\n      return powb(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      linear.domain((domain = x.map(Number)).map(powp));\n      return scale;\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      return scale.domain(d3_scale_linearNice(domain, m));\n    };\n    scale.exponent = function(x) {\n      if (!arguments.length) return exponent;\n      powp = d3_scale_powPow(exponent = x);\n      powb = d3_scale_powPow(1 / exponent);\n      linear.domain(domain.map(powp));\n      return scale;\n    };\n    scale.copy = function() {\n      return d3_scale_pow(linear.copy(), exponent, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_scale_powPow(e) {\n    return function(x) {\n      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n    };\n  }\n  d3.scale.sqrt = function() {\n    return d3.scale.pow().exponent(.5);\n  };\n  d3.scale.ordinal = function() {\n    return d3_scale_ordinal([], {\n      t: \"range\",\n      a: [ [] ]\n    });\n  };\n  function d3_scale_ordinal(domain, ranger) {\n    var index, range, rangeBand;\n    function scale(x) {\n      return range[((index.get(x) || (ranger.t === \"range\" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n    }\n    function steps(start, step) {\n      return d3.range(domain.length).map(function(i) {\n        return start + step * i;\n      });\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = [];\n      index = new d3_Map();\n      var i = -1, n = x.length, xi;\n      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n      return scale[ranger.t].apply(scale, ranger.a);\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      rangeBand = 0;\n      ranger = {\n        t: \"range\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangePoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, \n      0) : (stop - start) / (domain.length - 1 + padding);\n      range = steps(start + step * padding / 2, step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangePoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundPoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), \n      0) : (stop - start) / (domain.length - 1 + padding) | 0;\n      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangeRoundPoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n      range = steps(start + step * outerPadding, step);\n      if (reverse) range.reverse();\n      rangeBand = step * (1 - padding);\n      ranger = {\n        t: \"rangeBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n      if (reverse) range.reverse();\n      rangeBand = Math.round(step * (1 - padding));\n      ranger = {\n        t: \"rangeRoundBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBand = function() {\n      return rangeBand;\n    };\n    scale.rangeExtent = function() {\n      return d3_scaleExtent(ranger.a[0]);\n    };\n    scale.copy = function() {\n      return d3_scale_ordinal(domain, ranger);\n    };\n    return scale.domain(domain);\n  }\n  d3.scale.category10 = function() {\n    return d3.scale.ordinal().range(d3_category10);\n  };\n  d3.scale.category20 = function() {\n    return d3.scale.ordinal().range(d3_category20);\n  };\n  d3.scale.category20b = function() {\n    return d3.scale.ordinal().range(d3_category20b);\n  };\n  d3.scale.category20c = function() {\n    return d3.scale.ordinal().range(d3_category20c);\n  };\n  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n  d3.scale.quantile = function() {\n    return d3_scale_quantile([], []);\n  };\n  function d3_scale_quantile(domain, range) {\n    var thresholds;\n    function rescale() {\n      var k = 0, q = range.length;\n      thresholds = [];\n      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);\n      return scale;\n    }\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.quantiles = function() {\n      return thresholds;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantile(domain, range);\n    };\n    return rescale();\n  }\n  d3.scale.quantize = function() {\n    return d3_scale_quantize(0, 1, [ 0, 1 ]);\n  };\n  function d3_scale_quantize(x0, x1, range) {\n    var kx, i;\n    function scale(x) {\n      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n    }\n    function rescale() {\n      kx = range.length / (x1 - x0);\n      i = range.length - 1;\n      return scale;\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return [ x0, x1 ];\n      x0 = +x[0];\n      x1 = +x[x.length - 1];\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      y = y < 0 ? NaN : y / kx + x0;\n      return [ y, y + 1 / kx ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantize(x0, x1, range);\n    };\n    return rescale();\n  }\n  d3.scale.threshold = function() {\n    return d3_scale_threshold([ .5 ], [ 0, 1 ]);\n  };\n  function d3_scale_threshold(domain, range) {\n    function scale(x) {\n      if (x <= x) return range[d3.bisect(domain, x)];\n    }\n    scale.domain = function(_) {\n      if (!arguments.length) return domain;\n      domain = _;\n      return scale;\n    };\n    scale.range = function(_) {\n      if (!arguments.length) return range;\n      range = _;\n      return scale;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return [ domain[y - 1], domain[y] ];\n    };\n    scale.copy = function() {\n      return d3_scale_threshold(domain, range);\n    };\n    return scale;\n  }\n  d3.scale.identity = function() {\n    return d3_scale_identity([ 0, 1 ]);\n  };\n  function d3_scale_identity(domain) {\n    function identity(x) {\n      return +x;\n    }\n    identity.invert = identity;\n    identity.domain = identity.range = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(identity);\n      return identity;\n    };\n    identity.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    identity.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    identity.copy = function() {\n      return d3_scale_identity(domain);\n    };\n    return identity;\n  }\n  d3.svg = {};\n  function d3_zero() {\n    return 0;\n  }\n  d3.svg.arc = function() {\n    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n    function arc() {\n      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;\n      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;\n      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \"\") + \"Z\";\n      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];\n      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n        if (!cw) p1 *= -1;\n        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n      }\n      if (r1) {\n        x0 = r1 * Math.cos(a0 + p1);\n        y0 = r1 * Math.sin(a0 + p1);\n        x1 = r1 * Math.cos(a1 - p1);\n        y1 = r1 * Math.sin(a1 - p1);\n        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;\n        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n          var h1 = (a0 + a1) / 2;\n          x0 = r1 * Math.cos(h1);\n          y0 = r1 * Math.sin(h1);\n          x1 = y1 = null;\n        }\n      } else {\n        x0 = y0 = 0;\n      }\n      if (r0) {\n        x2 = r0 * Math.cos(a1 - p0);\n        y2 = r0 * Math.sin(a1 - p0);\n        x3 = r0 * Math.cos(a0 + p0);\n        y3 = r0 * Math.sin(a0 + p0);\n        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;\n        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n          var h0 = (a0 + a1) / 2;\n          x2 = r0 * Math.cos(h0);\n          y2 = r0 * Math.sin(h0);\n          x3 = y3 = null;\n        }\n      } else {\n        x2 = y2 = 0;\n      }\n      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {\n        cr = r0 < r1 ^ cw ? 0 : 1;\n        var rc1 = rc, rc0 = rc;\n        if (da < π) {\n          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n        }\n        if (x1 != null) {\n          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n          if (rc === rc1) {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t30[1], \"A\", r1, \",\", r1, \" 0 \", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \",\", cw, \" \", t12[1], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t12[0]);\n          } else {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 1,\", cr, \" \", t12[0]);\n          }\n        } else {\n          path.push(\"M\", x0, \",\", y0);\n        }\n        if (x3 != null) {\n          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n          if (rc === rc0) {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t21[1], \"A\", r0, \",\", r0, \" 0 \", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \",\", 1 - cw, \" \", t03[1], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          } else {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          }\n        } else {\n          path.push(\"L\", x2, \",\", y2);\n        }\n      } else {\n        path.push(\"M\", x0, \",\", y0);\n        if (x1 != null) path.push(\"A\", r1, \",\", r1, \" 0 \", l1, \",\", cw, \" \", x1, \",\", y1);\n        path.push(\"L\", x2, \",\", y2);\n        if (x3 != null) path.push(\"A\", r0, \",\", r0, \" 0 \", l0, \",\", 1 - cw, \" \", x3, \",\", y3);\n      }\n      path.push(\"Z\");\n      return path.join(\"\");\n    }\n    function circleSegment(r1, cw) {\n      return \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + r1;\n    }\n    arc.innerRadius = function(v) {\n      if (!arguments.length) return innerRadius;\n      innerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.outerRadius = function(v) {\n      if (!arguments.length) return outerRadius;\n      outerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.cornerRadius = function(v) {\n      if (!arguments.length) return cornerRadius;\n      cornerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.padRadius = function(v) {\n      if (!arguments.length) return padRadius;\n      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n      return arc;\n    };\n    arc.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return arc;\n    };\n    arc.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return arc;\n    };\n    arc.padAngle = function(v) {\n      if (!arguments.length) return padAngle;\n      padAngle = d3_functor(v);\n      return arc;\n    };\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n      return [ Math.cos(a) * r, Math.sin(a) * r ];\n    };\n    return arc;\n  };\n  var d3_svg_arcAuto = \"auto\";\n  function d3_svg_arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n  function d3_svg_arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n  function d3_svg_arcStartAngle(d) {\n    return d.startAngle;\n  }\n  function d3_svg_arcEndAngle(d) {\n    return d.endAngle;\n  }\n  function d3_svg_arcPadAngle(d) {\n    return d && d.padAngle;\n  }\n  function d3_svg_arcSweep(x0, y0, x1, y1) {\n    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;\n  }\n  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];\n  }\n  function d3_svg_line(projection) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n    function line(data) {\n      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points), tension));\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);\n        } else if (points.length) {\n          segment();\n          points = [];\n        }\n      }\n      if (points.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    line.x = function(_) {\n      if (!arguments.length) return x;\n      x = _;\n      return line;\n    };\n    line.y = function(_) {\n      if (!arguments.length) return y;\n      y = _;\n      return line;\n    };\n    line.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return line;\n    };\n    line.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      return line;\n    };\n    line.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return line;\n    };\n    return line;\n  }\n  d3.svg.line = function() {\n    return d3_svg_line(d3_identity);\n  };\n  var d3_svg_lineInterpolators = d3.map({\n    linear: d3_svg_lineLinear,\n    \"linear-closed\": d3_svg_lineLinearClosed,\n    step: d3_svg_lineStep,\n    \"step-before\": d3_svg_lineStepBefore,\n    \"step-after\": d3_svg_lineStepAfter,\n    basis: d3_svg_lineBasis,\n    \"basis-open\": d3_svg_lineBasisOpen,\n    \"basis-closed\": d3_svg_lineBasisClosed,\n    bundle: d3_svg_lineBundle,\n    cardinal: d3_svg_lineCardinal,\n    \"cardinal-open\": d3_svg_lineCardinalOpen,\n    \"cardinal-closed\": d3_svg_lineCardinalClosed,\n    monotone: d3_svg_lineMonotone\n  });\n  d3_svg_lineInterpolators.forEach(function(key, value) {\n    value.key = key;\n    value.closed = /-closed$/.test(key);\n  });\n  function d3_svg_lineLinear(points) {\n    return points.length > 1 ? points.join(\"L\") : points + \"Z\";\n  }\n  function d3_svg_lineLinearClosed(points) {\n    return points.join(\"L\") + \"Z\";\n  }\n  function d3_svg_lineStep(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p[0] + (p = points[i])[0]) / 2, \"V\", p[1]);\n    if (n > 1) path.push(\"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepBefore(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepAfter(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineCardinalOpen(points, tension) {\n    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineCardinalClosed(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));\n  }\n  function d3_svg_lineCardinal(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineHermite(points, tangents) {\n    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {\n      return d3_svg_lineLinear(points);\n    }\n    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n    if (quad) {\n      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];\n      p0 = points[1];\n      pi = 2;\n    }\n    if (tangents.length > 1) {\n      t = tangents[1];\n      p = points[pi];\n      pi++;\n      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      for (var i = 2; i < tangents.length; i++, pi++) {\n        p = points[pi];\n        t = tangents[i];\n        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      }\n    }\n    if (quad) {\n      var lp = points[pi];\n      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];\n    }\n    return path;\n  }\n  function d3_svg_lineCardinalTangents(points, tension) {\n    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;\n    while (++i < n) {\n      p0 = p1;\n      p1 = p2;\n      p2 = points[i];\n      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineBasis(points) {\n    if (points.length < 3) return d3_svg_lineLinear(points);\n    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0, \"L\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    points.push(points[n - 1]);\n    while (++i <= n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    points.pop();\n    path.push(\"L\", pi);\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisOpen(points) {\n    if (points.length < 4) return d3_svg_lineLinear(points);\n    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];\n    while (++i < 3) {\n      pi = points[i];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n    --i;\n    while (++i < n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisClosed(points) {\n    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];\n    while (++i < 4) {\n      pi = points[i % n];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    --i;\n    while (++i < m) {\n      pi = points[i % n];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBundle(points, tension) {\n    var n = points.length - 1;\n    if (n) {\n      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;\n      while (++i <= n) {\n        p = points[i];\n        t = i / n;\n        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n      }\n    }\n    return d3_svg_lineBasis(points);\n  }\n  function d3_svg_lineDot4(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n  function d3_svg_lineBasisBezier(path, x, y) {\n    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n  }\n  function d3_svg_lineSlope(p0, p1) {\n    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n  }\n  function d3_svg_lineFiniteDifferences(points) {\n    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);\n    while (++i < j) {\n      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n    }\n    m[i] = d;\n    return m;\n  }\n  function d3_svg_lineMonotoneTangents(points) {\n    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;\n    while (++i < j) {\n      d = d3_svg_lineSlope(points[i], points[i + 1]);\n      if (abs(d) < ε) {\n        m[i] = m[i + 1] = 0;\n      } else {\n        a = m[i] / d;\n        b = m[i + 1] / d;\n        s = a * a + b * b;\n        if (s > 9) {\n          s = d * 3 / Math.sqrt(s);\n          m[i] = s * a;\n          m[i + 1] = s * b;\n        }\n      }\n    }\n    i = -1;\n    while (++i <= j) {\n      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n      tangents.push([ s || 0, m[i] * s || 0 ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineMonotone(points) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n  }\n  d3.svg.line.radial = function() {\n    var line = d3_svg_line(d3_svg_lineRadial);\n    line.radius = line.x, delete line.x;\n    line.angle = line.y, delete line.y;\n    return line;\n  };\n  function d3_svg_lineRadial(points) {\n    var point, i = -1, n = points.length, r, a;\n    while (++i < n) {\n      point = points[i];\n      r = point[0];\n      a = point[1] - halfπ;\n      point[0] = r * Math.cos(a);\n      point[1] = r * Math.sin(a);\n    }\n    return points;\n  }\n  function d3_svg_area(projection) {\n    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n    function area(data) {\n      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n        return x;\n      } : d3_functor(x1), fy1 = y0 === y1 ? function() {\n        return y;\n      } : d3_functor(y1), x, y;\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);\n          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);\n        } else if (points0.length) {\n          segment();\n          points0 = [];\n          points1 = [];\n        }\n      }\n      if (points0.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    area.x = function(_) {\n      if (!arguments.length) return x1;\n      x0 = x1 = _;\n      return area;\n    };\n    area.x0 = function(_) {\n      if (!arguments.length) return x0;\n      x0 = _;\n      return area;\n    };\n    area.x1 = function(_) {\n      if (!arguments.length) return x1;\n      x1 = _;\n      return area;\n    };\n    area.y = function(_) {\n      if (!arguments.length) return y1;\n      y0 = y1 = _;\n      return area;\n    };\n    area.y0 = function(_) {\n      if (!arguments.length) return y0;\n      y0 = _;\n      return area;\n    };\n    area.y1 = function(_) {\n      if (!arguments.length) return y1;\n      y1 = _;\n      return area;\n    };\n    area.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return area;\n    };\n    area.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      interpolateReverse = interpolate.reverse || interpolate;\n      L = interpolate.closed ? \"M\" : \"L\";\n      return area;\n    };\n    area.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return area;\n    };\n    return area;\n  }\n  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n  d3.svg.area = function() {\n    return d3_svg_area(d3_identity);\n  };\n  d3.svg.area.radial = function() {\n    var area = d3_svg_area(d3_svg_lineRadial);\n    area.radius = area.x, delete area.x;\n    area.innerRadius = area.x0, delete area.x0;\n    area.outerRadius = area.x1, delete area.x1;\n    area.angle = area.y, delete area.y;\n    area.startAngle = area.y0, delete area.y0;\n    area.endAngle = area.y1, delete area.y1;\n    return area;\n  };\n  d3.svg.chord = function() {\n    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n    function chord(d, i) {\n      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);\n      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n    }\n    function subgroup(self, f, d, i) {\n      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n      return {\n        r: r,\n        a0: a0,\n        a1: a1,\n        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],\n        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]\n      };\n    }\n    function equals(a, b) {\n      return a.a0 == b.a0 && a.a1 == b.a1;\n    }\n    function arc(r, p, a) {\n      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;\n    }\n    function curve(r0, p0, r1, p1) {\n      return \"Q 0,0 \" + p1;\n    }\n    chord.radius = function(v) {\n      if (!arguments.length) return radius;\n      radius = d3_functor(v);\n      return chord;\n    };\n    chord.source = function(v) {\n      if (!arguments.length) return source;\n      source = d3_functor(v);\n      return chord;\n    };\n    chord.target = function(v) {\n      if (!arguments.length) return target;\n      target = d3_functor(v);\n      return chord;\n    };\n    chord.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return chord;\n    };\n    chord.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return chord;\n    };\n    return chord;\n  };\n  function d3_svg_chordRadius(d) {\n    return d.radius;\n  }\n  d3.svg.diagonal = function() {\n    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;\n    function diagonal(d, i) {\n      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {\n        x: p0.x,\n        y: m\n      }, {\n        x: p3.x,\n        y: m\n      }, p3 ];\n      p = p.map(projection);\n      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];\n    }\n    diagonal.source = function(x) {\n      if (!arguments.length) return source;\n      source = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.target = function(x) {\n      if (!arguments.length) return target;\n      target = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.projection = function(x) {\n      if (!arguments.length) return projection;\n      projection = x;\n      return diagonal;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalProjection(d) {\n    return [ d.x, d.y ];\n  }\n  d3.svg.diagonal.radial = function() {\n    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;\n    diagonal.projection = function(x) {\n      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalRadialProjection(projection) {\n    return function() {\n      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;\n      return [ r * Math.cos(a), r * Math.sin(a) ];\n    };\n  }\n  d3.svg.symbol = function() {\n    var type = d3_svg_symbolType, size = d3_svg_symbolSize;\n    function symbol(d, i) {\n      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n    }\n    symbol.type = function(x) {\n      if (!arguments.length) return type;\n      type = d3_functor(x);\n      return symbol;\n    };\n    symbol.size = function(x) {\n      if (!arguments.length) return size;\n      size = d3_functor(x);\n      return symbol;\n    };\n    return symbol;\n  };\n  function d3_svg_symbolSize() {\n    return 64;\n  }\n  function d3_svg_symbolType() {\n    return \"circle\";\n  }\n  function d3_svg_symbolCircle(size) {\n    var r = Math.sqrt(size / π);\n    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";\n  }\n  var d3_svg_symbols = d3.map({\n    circle: d3_svg_symbolCircle,\n    cross: function(size) {\n      var r = Math.sqrt(size / 5) / 2;\n      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n    },\n    diamond: function(size) {\n      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;\n      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";\n    },\n    square: function(size) {\n      var r = Math.sqrt(size) / 2;\n      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";\n    },\n    \"triangle-down\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";\n    },\n    \"triangle-up\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";\n    }\n  });\n  d3.svg.symbolTypes = d3_svg_symbols.keys();\n  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n  d3_selectionPrototype.transition = function(name) {\n    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n      time: Date.now(),\n      ease: d3_ease_cubicInOut,\n      delay: 0,\n      duration: 250\n    };\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_selectionPrototype.interrupt = function(name) {\n    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));\n  };\n  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());\n  function d3_selection_interruptNS(ns) {\n    return function() {\n      var lock, activeId, active;\n      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        if (--lock.count) delete lock[activeId]; else delete this[ns];\n        lock.active += .5;\n        active.event && active.event.interrupt.call(this, this.__data__, active.index);\n      }\n    };\n  }\n  function d3_transition(groups, ns, id) {\n    d3_subclass(groups, d3_transitionPrototype);\n    groups.namespace = ns;\n    groups.id = id;\n    return groups;\n  }\n  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;\n  d3_transitionPrototype.call = d3_selectionPrototype.call;\n  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n  d3_transitionPrototype.node = d3_selectionPrototype.node;\n  d3_transitionPrototype.size = d3_selectionPrototype.size;\n  d3.transition = function(selection, name) {\n    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);\n  };\n  d3.transition.prototype = d3_transitionPrototype;\n  d3_transitionPrototype.select = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n          subgroup.push(subnode);\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.selectAll = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          transition = node[ns][id];\n          subnodes = selector.call(node, node.__data__, i, j);\n          subgroups.push(subgroup = []);\n          for (var k = -1, o = subnodes.length; ++k < o; ) {\n            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n            subgroup.push(subnode);\n          }\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_transition(subgroups, this.namespace, this.id);\n  };\n  d3_transitionPrototype.tween = function(name, tween) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);\n    return d3_selection_each(this, tween == null ? function(node) {\n      node[ns][id].tween.remove(name);\n    } : function(node) {\n      node[ns][id].tween.set(name, tween);\n    });\n  };\n  function d3_transition_tween(groups, name, value, tween) {\n    var id = groups.id, ns = groups.namespace;\n    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n    } : (value = tween(value), function(node) {\n      node[ns][id].tween.set(name, value);\n    }));\n  }\n  d3_transitionPrototype.attr = function(nameNS, value) {\n    if (arguments.length < 2) {\n      for (value in nameNS) this.attr(value, nameNS[value]);\n      return this;\n    }\n    var interpolate = nameNS == \"transform\" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrTween(b) {\n      return b == null ? attrNull : (b += \"\", function() {\n        var a = this.getAttribute(name), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttribute(name, i(t));\n        });\n      });\n    }\n    function attrTweenNS(b) {\n      return b == null ? attrNullNS : (b += \"\", function() {\n        var a = this.getAttributeNS(name.space, name.local), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttributeNS(name.space, name.local, i(t));\n        });\n      });\n    }\n    return d3_transition_tween(this, \"attr.\" + nameNS, value, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.attrTween = function(nameNS, tween) {\n    var name = d3.ns.qualify(nameNS);\n    function attrTween(d, i) {\n      var f = tween.call(this, d, i, this.getAttribute(name));\n      return f && function(t) {\n        this.setAttribute(name, f(t));\n      };\n    }\n    function attrTweenNS(d, i) {\n      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n      return f && function(t) {\n        this.setAttributeNS(name.space, name.local, f(t));\n      };\n    }\n    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.style(priority, name[priority], value);\n        return this;\n      }\n      priority = \"\";\n    }\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleString(b) {\n      return b == null ? styleNull : (b += \"\", function() {\n        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;\n        return a !== b && (i = d3_interpolate(a, b), function(t) {\n          this.style.setProperty(name, i(t), priority);\n        });\n      });\n    }\n    return d3_transition_tween(this, \"style.\" + name, value, styleString);\n  };\n  d3_transitionPrototype.styleTween = function(name, tween, priority) {\n    if (arguments.length < 3) priority = \"\";\n    function styleTween(d, i) {\n      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));\n      return f && function(t) {\n        this.style.setProperty(name, f(t), priority);\n      };\n    }\n    return this.tween(\"style.\" + name, styleTween);\n  };\n  d3_transitionPrototype.text = function(value) {\n    return d3_transition_tween(this, \"text\", value, d3_transition_text);\n  };\n  function d3_transition_text(b) {\n    if (b == null) b = \"\";\n    return function() {\n      this.textContent = b;\n    };\n  }\n  d3_transitionPrototype.remove = function() {\n    var ns = this.namespace;\n    return this.each(\"end.transition\", function() {\n      var p;\n      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);\n    });\n  };\n  d3_transitionPrototype.ease = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].ease;\n    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);\n    return d3_selection_each(this, function(node) {\n      node[ns][id].ease = value;\n    });\n  };\n  d3_transitionPrototype.delay = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].delay;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n    } : (value = +value, function(node) {\n      node[ns][id].delay = value;\n    }));\n  };\n  d3_transitionPrototype.duration = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].duration;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n    } : (value = Math.max(1, value), function(node) {\n      node[ns][id].duration = value;\n    }));\n  };\n  d3_transitionPrototype.each = function(type, listener) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) {\n      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;\n      try {\n        d3_transitionInheritId = id;\n        d3_selection_each(this, function(node, i, j) {\n          d3_transitionInherit = node[ns][id];\n          type.call(node, node.__data__, i, j);\n        });\n      } finally {\n        d3_transitionInherit = inherit;\n        d3_transitionInheritId = inheritId;\n      }\n    } else {\n      d3_selection_each(this, function(node) {\n        var transition = node[ns][id];\n        (transition.event || (transition.event = d3.dispatch(\"start\", \"end\", \"interrupt\"))).on(type, listener);\n      });\n    }\n    return this;\n  };\n  d3_transitionPrototype.transition = function() {\n    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if (node = group[i]) {\n          transition = node[ns][id0];\n          d3_transitionNode(node, i, ns, id1, {\n            time: transition.time,\n            ease: transition.ease,\n            delay: transition.delay + transition.duration,\n            duration: transition.duration\n          });\n        }\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id1);\n  };\n  function d3_transitionNamespace(name) {\n    return name == null ? \"__transition__\" : \"__transition_\" + name + \"__\";\n  }\n  function d3_transitionNode(node, i, ns, id, inherit) {\n    var lock = node[ns] || (node[ns] = {\n      active: 0,\n      count: 0\n    }), transition = lock[id], time, timer, duration, ease, tweens;\n    function schedule(elapsed) {\n      var delay = transition.delay;\n      timer.t = delay + time;\n      if (delay <= elapsed) return start(elapsed - delay);\n      timer.c = start;\n    }\n    function start(elapsed) {\n      var activeId = lock.active, active = lock[activeId];\n      if (active) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        --lock.count;\n        delete lock[activeId];\n        active.event && active.event.interrupt.call(node, node.__data__, active.index);\n      }\n      for (var cancelId in lock) {\n        if (+cancelId < id) {\n          var cancel = lock[cancelId];\n          cancel.timer.c = null;\n          cancel.timer.t = NaN;\n          --lock.count;\n          delete lock[cancelId];\n        }\n      }\n      timer.c = tick;\n      d3_timer(function() {\n        if (timer.c && tick(elapsed || 1)) {\n          timer.c = null;\n          timer.t = NaN;\n        }\n        return 1;\n      }, 0, time);\n      lock.active = id;\n      transition.event && transition.event.start.call(node, node.__data__, i);\n      tweens = [];\n      transition.tween.forEach(function(key, value) {\n        if (value = value.call(node, node.__data__, i)) {\n          tweens.push(value);\n        }\n      });\n      ease = transition.ease;\n      duration = transition.duration;\n    }\n    function tick(elapsed) {\n      var t = elapsed / duration, e = ease(t), n = tweens.length;\n      while (n > 0) {\n        tweens[--n].call(node, e);\n      }\n      if (t >= 1) {\n        transition.event && transition.event.end.call(node, node.__data__, i);\n        if (--lock.count) delete lock[id]; else delete node[ns];\n        return 1;\n      }\n    }\n    if (!transition) {\n      time = inherit.time;\n      timer = d3_timer(schedule, 0, time);\n      transition = lock[id] = {\n        tween: new d3_Map(),\n        time: time,\n        timer: timer,\n        delay: inherit.delay,\n        duration: inherit.duration,\n        ease: inherit.ease,\n        index: i\n      };\n      inherit = null;\n      ++lock.count;\n    }\n  }\n  d3.svg.axis = function() {\n    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n    function axis(g) {\n      g.each(function() {\n        var g = d3.select(this);\n        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();\n        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\".tick\").data(ticks, scale1), tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", ε), tickExit = d3.transition(tick.exit()).style(\"opacity\", ε).remove(), tickUpdate = d3.transition(tick.order()).style(\"opacity\", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n        var range = d3_scaleRange(scale1), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), \n        d3.transition(path));\n        tickEnter.append(\"line\");\n        tickEnter.append(\"text\");\n        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\"), sign = orient === \"top\" || orient === \"left\" ? -1 : 1, x1, x2, y1, y2;\n        if (orient === \"bottom\" || orient === \"top\") {\n          tickTransform = d3_svg_axisX, x1 = \"x\", y1 = \"y\", x2 = \"x2\", y2 = \"y2\";\n          text.attr(\"dy\", sign < 0 ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\");\n          pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + sign * outerTickSize + \"V0H\" + range[1] + \"V\" + sign * outerTickSize);\n        } else {\n          tickTransform = d3_svg_axisY, x1 = \"y\", y1 = \"x\", x2 = \"y2\", y2 = \"x2\";\n          text.attr(\"dy\", \".32em\").style(\"text-anchor\", sign < 0 ? \"end\" : \"start\");\n          pathUpdate.attr(\"d\", \"M\" + sign * outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * outerTickSize);\n        }\n        lineEnter.attr(y2, sign * innerTickSize);\n        textEnter.attr(y1, sign * tickSpacing);\n        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n        if (scale1.rangeBand) {\n          var x = scale1, dx = x.rangeBand() / 2;\n          scale0 = scale1 = function(d) {\n            return x(d) + dx;\n          };\n        } else if (scale0.rangeBand) {\n          scale0 = scale1;\n        } else {\n          tickExit.call(tickTransform, scale1, scale0);\n        }\n        tickEnter.call(tickTransform, scale0, scale1);\n        tickUpdate.call(tickTransform, scale1, scale1);\n      });\n    }\n    axis.scale = function(x) {\n      if (!arguments.length) return scale;\n      scale = x;\n      return axis;\n    };\n    axis.orient = function(x) {\n      if (!arguments.length) return orient;\n      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;\n      return axis;\n    };\n    axis.ticks = function() {\n      if (!arguments.length) return tickArguments_;\n      tickArguments_ = d3_array(arguments);\n      return axis;\n    };\n    axis.tickValues = function(x) {\n      if (!arguments.length) return tickValues;\n      tickValues = x;\n      return axis;\n    };\n    axis.tickFormat = function(x) {\n      if (!arguments.length) return tickFormat_;\n      tickFormat_ = x;\n      return axis;\n    };\n    axis.tickSize = function(x) {\n      var n = arguments.length;\n      if (!n) return innerTickSize;\n      innerTickSize = +x;\n      outerTickSize = +arguments[n - 1];\n      return axis;\n    };\n    axis.innerTickSize = function(x) {\n      if (!arguments.length) return innerTickSize;\n      innerTickSize = +x;\n      return axis;\n    };\n    axis.outerTickSize = function(x) {\n      if (!arguments.length) return outerTickSize;\n      outerTickSize = +x;\n      return axis;\n    };\n    axis.tickPadding = function(x) {\n      if (!arguments.length) return tickPadding;\n      tickPadding = +x;\n      return axis;\n    };\n    axis.tickSubdivide = function() {\n      return arguments.length && axis;\n    };\n    return axis;\n  };\n  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  };\n  function d3_svg_axisX(selection, x0, x1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = x0(d);\n      return \"translate(\" + (isFinite(v0) ? v0 : x1(d)) + \",0)\";\n    });\n  }\n  function d3_svg_axisY(selection, y0, y1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = y0(d);\n      return \"translate(0,\" + (isFinite(v0) ? v0 : y1(d)) + \")\";\n    });\n  }\n  d3.svg.brush = function() {\n    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n    function brush(g) {\n      g.each(function() {\n        var g = d3.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);\n        var background = g.selectAll(\".background\").data([ 0 ]);\n        background.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n        g.selectAll(\".extent\").data([ 0 ]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");\n        var resize = g.selectAll(\".resize\").data(resizes, d3_identity);\n        resize.exit().remove();\n        resize.enter().append(\"g\").attr(\"class\", function(d) {\n          return \"resize \" + d;\n        }).style(\"cursor\", function(d) {\n          return d3_svg_brushCursor[d];\n        }).append(\"rect\").attr(\"x\", function(d) {\n          return /[ew]$/.test(d) ? -3 : null;\n        }).attr(\"y\", function(d) {\n          return /^[ns]/.test(d) ? -3 : null;\n        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");\n        resize.style(\"display\", brush.empty() ? \"none\" : null);\n        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;\n        if (x) {\n          range = d3_scaleRange(x);\n          backgroundUpdate.attr(\"x\", range[0]).attr(\"width\", range[1] - range[0]);\n          redrawX(gUpdate);\n        }\n        if (y) {\n          range = d3_scaleRange(y);\n          backgroundUpdate.attr(\"y\", range[0]).attr(\"height\", range[1] - range[0]);\n          redrawY(gUpdate);\n        }\n        redraw(gUpdate);\n      });\n    }\n    brush.event = function(g) {\n      g.each(function() {\n        var event_ = event.of(this, arguments), extent1 = {\n          x: xExtent,\n          y: yExtent,\n          i: xExtentDomain,\n          j: yExtentDomain\n        }, extent0 = this.__chart__ || extent1;\n        this.__chart__ = extent1;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.brush\", function() {\n            xExtentDomain = extent0.i;\n            yExtentDomain = extent0.j;\n            xExtent = extent0.x;\n            yExtent = extent0.y;\n            event_({\n              type: \"brushstart\"\n            });\n          }).tween(\"brush:brush\", function() {\n            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);\n            xExtentDomain = yExtentDomain = null;\n            return function(t) {\n              xExtent = extent1.x = xi(t);\n              yExtent = extent1.y = yi(t);\n              event_({\n                type: \"brush\",\n                mode: \"resize\"\n              });\n            };\n          }).each(\"end.brush\", function() {\n            xExtentDomain = extent1.i;\n            yExtentDomain = extent1.j;\n            event_({\n              type: \"brush\",\n              mode: \"resize\"\n            });\n            event_({\n              type: \"brushend\"\n            });\n          });\n        } else {\n          event_({\n            type: \"brushstart\"\n          });\n          event_({\n            type: \"brush\",\n            mode: \"resize\"\n          });\n          event_({\n            type: \"brushend\"\n          });\n        }\n      });\n    };\n    function redraw(g) {\n      g.selectAll(\".resize\").attr(\"transform\", function(d) {\n        return \"translate(\" + xExtent[+/e$/.test(d)] + \",\" + yExtent[+/^s/.test(d)] + \")\";\n      });\n    }\n    function redrawX(g) {\n      g.select(\".extent\").attr(\"x\", xExtent[0]);\n      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", xExtent[1] - xExtent[0]);\n    }\n    function redrawY(g) {\n      g.select(\".extent\").attr(\"y\", yExtent[0]);\n      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", yExtent[1] - yExtent[0]);\n    }\n    function brushstart() {\n      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;\n      var w = d3.select(d3_window(target)).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);\n      if (d3.event.changedTouches) {\n        w.on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend);\n      } else {\n        w.on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend);\n      }\n      g.interrupt().selectAll(\"*\").interrupt();\n      if (dragging) {\n        origin[0] = xExtent[0] - origin[0];\n        origin[1] = yExtent[0] - origin[1];\n      } else if (resizing) {\n        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);\n        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];\n        origin[0] = xExtent[ex];\n        origin[1] = yExtent[ey];\n      } else if (d3.event.altKey) center = origin.slice();\n      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);\n      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));\n      event_({\n        type: \"brushstart\"\n      });\n      brushmove();\n      function keydown() {\n        if (d3.event.keyCode == 32) {\n          if (!dragging) {\n            center = null;\n            origin[0] -= xExtent[1];\n            origin[1] -= yExtent[1];\n            dragging = 2;\n          }\n          d3_eventPreventDefault();\n        }\n      }\n      function keyup() {\n        if (d3.event.keyCode == 32 && dragging == 2) {\n          origin[0] += xExtent[1];\n          origin[1] += yExtent[1];\n          dragging = 0;\n          d3_eventPreventDefault();\n        }\n      }\n      function brushmove() {\n        var point = d3.mouse(target), moved = false;\n        if (offset) {\n          point[0] += offset[0];\n          point[1] += offset[1];\n        }\n        if (!dragging) {\n          if (d3.event.altKey) {\n            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];\n            origin[0] = xExtent[+(point[0] < center[0])];\n            origin[1] = yExtent[+(point[1] < center[1])];\n          } else center = null;\n        }\n        if (resizingX && move1(point, x, 0)) {\n          redrawX(g);\n          moved = true;\n        }\n        if (resizingY && move1(point, y, 1)) {\n          redrawY(g);\n          moved = true;\n        }\n        if (moved) {\n          redraw(g);\n          event_({\n            type: \"brush\",\n            mode: dragging ? \"move\" : \"resize\"\n          });\n        }\n      }\n      function move1(point, scale, i) {\n        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n        if (dragging) {\n          r0 -= position;\n          r1 -= size + position;\n        }\n        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n        if (dragging) {\n          max = (min += position) + size;\n        } else {\n          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n          if (position < min) {\n            max = min;\n            min = position;\n          } else {\n            max = position;\n          }\n        }\n        if (extent[0] != min || extent[1] != max) {\n          if (i) yExtentDomain = null; else xExtentDomain = null;\n          extent[0] = min;\n          extent[1] = max;\n          return true;\n        }\n      }\n      function brushend() {\n        brushmove();\n        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);\n        d3.select(\"body\").style(\"cursor\", null);\n        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n        dragRestore();\n        event_({\n          type: \"brushend\"\n        });\n      }\n    }\n    brush.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.clamp = function(z) {\n      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;\n      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;\n      return brush;\n    };\n    brush.extent = function(z) {\n      var x0, x1, y0, y1, t;\n      if (!arguments.length) {\n        if (x) {\n          if (xExtentDomain) {\n            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n          } else {\n            x0 = xExtent[0], x1 = xExtent[1];\n            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n          }\n        }\n        if (y) {\n          if (yExtentDomain) {\n            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n          } else {\n            y0 = yExtent[0], y1 = yExtent[1];\n            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n          }\n        }\n        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];\n      }\n      if (x) {\n        x0 = z[0], x1 = z[1];\n        if (y) x0 = x0[0], x1 = x1[0];\n        xExtentDomain = [ x0, x1 ];\n        if (x.invert) x0 = x(x0), x1 = x(x1);\n        if (x1 < x0) t = x0, x0 = x1, x1 = t;\n        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];\n      }\n      if (y) {\n        y0 = z[0], y1 = z[1];\n        if (x) y0 = y0[1], y1 = y1[1];\n        yExtentDomain = [ y0, y1 ];\n        if (y.invert) y0 = y(y0), y1 = y(y1);\n        if (y1 < y0) t = y0, y0 = y1, y1 = t;\n        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];\n      }\n      return brush;\n    };\n    brush.clear = function() {\n      if (!brush.empty()) {\n        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];\n        xExtentDomain = yExtentDomain = null;\n      }\n      return brush;\n    };\n    brush.empty = function() {\n      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];\n    };\n    return d3.rebind(brush, event, \"on\");\n  };\n  var d3_svg_brushCursor = {\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];\n  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n  var d3_time_formatUtc = d3_time_format.utc;\n  var d3_time_formatIso = d3_time_formatUtc(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n  d3_time_format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n  function d3_time_formatIsoNative(date) {\n    return date.toISOString();\n  }\n  d3_time_formatIsoNative.parse = function(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  };\n  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n  d3_time.second = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 1e3) * 1e3);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n  }, function(date) {\n    return date.getSeconds();\n  });\n  d3_time.seconds = d3_time.second.range;\n  d3_time.seconds.utc = d3_time.second.utc.range;\n  d3_time.minute = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 6e4) * 6e4);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n  }, function(date) {\n    return date.getMinutes();\n  });\n  d3_time.minutes = d3_time.minute.range;\n  d3_time.minutes.utc = d3_time.minute.utc.range;\n  d3_time.hour = d3_time_interval(function(date) {\n    var timezone = date.getTimezoneOffset() / 60;\n    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n  }, function(date) {\n    return date.getHours();\n  });\n  d3_time.hours = d3_time.hour.range;\n  d3_time.hours.utc = d3_time.hour.utc.range;\n  d3_time.month = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setDate(1);\n    return date;\n  }, function(date, offset) {\n    date.setMonth(date.getMonth() + offset);\n  }, function(date) {\n    return date.getMonth();\n  });\n  d3_time.months = d3_time.month.range;\n  d3_time.months.utc = d3_time.month.utc.range;\n  function d3_time_scale(linear, methods, format) {\n    function scale(x) {\n      return linear(x);\n    }\n    scale.invert = function(x) {\n      return d3_time_scaleDate(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n      linear.domain(x);\n      return scale;\n    };\n    function tickMethod(extent, count) {\n      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);\n      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {\n        return d / 31536e6;\n      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n    }\n    scale.nice = function(interval, skip) {\n      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" && tickMethod(extent, interval);\n      if (method) interval = method[0], skip = method[1];\n      function skipped(date) {\n        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n      }\n      return scale.domain(d3_scale_nice(domain, skip > 1 ? {\n        floor: function(date) {\n          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);\n          return date;\n        },\n        ceil: function(date) {\n          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);\n          return date;\n        }\n      } : interval));\n    };\n    scale.ticks = function(interval, skip) {\n      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" ? tickMethod(extent, interval) : !interval.range && [ {\n        range: interval\n      }, skip ];\n      if (method) interval = method[0], skip = method[1];\n      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);\n    };\n    scale.tickFormat = function() {\n      return format;\n    };\n    scale.copy = function() {\n      return d3_time_scale(linear.copy(), methods, format);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_time_scaleDate(t) {\n    return new Date(t);\n  }\n  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \".%L\", function(d) {\n    return d.getMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getDay() && d.getDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  var d3_time_scaleMilliseconds = {\n    range: function(start, stop, step) {\n      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n    },\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  d3_time_scaleLocalMethods.year = d3_time.year;\n  d3_time.scale = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n  };\n  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {\n    return [ m[0].utc, m[1] ];\n  });\n  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \".%L\", function(d) {\n    return d.getUTCMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getUTCSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getUTCMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getUTCHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getUTCDay() && d.getUTCDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getUTCDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getUTCMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n  d3_time.scale.utc = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n  };\n  d3.text = d3_xhrType(function(request) {\n    return request.responseText;\n  });\n  d3.json = function(url, callback) {\n    return d3_xhr(url, \"application/json\", d3_json, callback);\n  };\n  function d3_json(request) {\n    return JSON.parse(request.responseText);\n  }\n  d3.html = function(url, callback) {\n    return d3_xhr(url, \"text/html\", d3_html, callback);\n  };\n  function d3_html(request) {\n    var range = d3_document.createRange();\n    range.selectNode(d3_document.body);\n    return range.createContextualFragment(request.responseText);\n  }\n  d3.xml = d3_xhrType(function(request) {\n    return request.responseXML;\n  });\n  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === \"object\" && module.exports) module.exports = d3; else this.d3 = d3;\n}();\n\n/***/ }),\n\n/***/ 272:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(273).crossfilter;\n\n\n/***/ }),\n\n/***/ 273:\n/***/ (function(module, exports) {\n\n(function(exports){\ncrossfilter.version = \"1.3.14\";\nfunction crossfilter_identity(d) {\n  return d;\n}\ncrossfilter.permute = permute;\n\nfunction permute(array, index) {\n  for (var i = 0, n = index.length, copy = new Array(n); i < n; ++i) {\n    copy[i] = array[index[i]];\n  }\n  return copy;\n}\nvar bisect = crossfilter.bisect = bisect_by(crossfilter_identity);\n\nbisect.by = bisect_by;\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\nvar heap = crossfilter.heap = heap_by(crossfilter_identity);\n\nheap.by = heap_by;\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\nvar heapselect = crossfilter.heapselect = heapselect_by(crossfilter_identity);\n\nheapselect.by = heapselect_by;\n\nfunction heapselect_by(f) {\n  var heap = heap_by(f);\n\n  // Returns a new array containing the top k elements in the array a[lo:hi].\n  // The returned array is not sorted, but maintains the heap property. If k is\n  // greater than hi - lo, then fewer than k elements will be returned. The\n  // order of elements in a is unchanged by this operation.\n  function heapselect(a, lo, hi, k) {\n    var queue = new Array(k = Math.min(hi - lo, k)),\n        min,\n        i,\n        x,\n        d;\n\n    for (i = 0; i < k; ++i) queue[i] = a[lo++];\n    heap(queue, 0, k);\n\n    if (lo < hi) {\n      min = f(queue[0]);\n      do {\n        if (x = f(d = a[lo]) > min) {\n          queue[0] = d;\n          min = f(heap(queue, 0, k)[0]);\n        }\n      } while (++lo < hi);\n    }\n\n    return queue;\n  }\n\n  return heapselect;\n}\nvar insertionsort = crossfilter.insertionsort = insertionsort_by(crossfilter_identity);\n\ninsertionsort.by = insertionsort_by;\n\nfunction insertionsort_by(f) {\n\n  function insertionsort(a, lo, hi) {\n    for (var i = lo + 1; i < hi; ++i) {\n      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n        a[j] = a[j - 1];\n      }\n      a[j] = t;\n    }\n    return a;\n  }\n\n  return insertionsort;\n}\n// Algorithm designed by Vladimir Yaroslavskiy.\n// Implementation based on the Dart project; see lib/dart/LICENSE for details.\n\nvar quicksort = crossfilter.quicksort = quicksort_by(crossfilter_identity);\n\nquicksort.by = quicksort_by;\n\nfunction quicksort_by(f) {\n  var insertionsort = insertionsort_by(f);\n\n  function sort(a, lo, hi) {\n    return (hi - lo < quicksort_sizeThreshold\n        ? insertionsort\n        : quicksort)(a, lo, hi);\n  }\n\n  function quicksort(a, lo, hi) {\n    // Compute the two pivots by looking at 5 elements.\n    var sixth = (hi - lo) / 6 | 0,\n        i1 = lo + sixth,\n        i5 = hi - 1 - sixth,\n        i3 = lo + hi - 1 >> 1,  // The midpoint.\n        i2 = i3 - sixth,\n        i4 = i3 + sixth;\n\n    var e1 = a[i1], x1 = f(e1),\n        e2 = a[i2], x2 = f(e2),\n        e3 = a[i3], x3 = f(e3),\n        e4 = a[i4], x4 = f(e4),\n        e5 = a[i5], x5 = f(e5);\n\n    var t;\n\n    // Sort the selected 5 elements using a sorting network.\n    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n    var pivot1 = e2, pivotValue1 = x2,\n        pivot2 = e4, pivotValue2 = x4;\n\n    // e2 and e4 have been saved in the pivot variables. They will be written\n    // back, once the partitioning is finished.\n    a[i1] = e1;\n    a[i2] = a[lo];\n    a[i3] = e3;\n    a[i4] = a[hi - 1];\n    a[i5] = e5;\n\n    var less = lo + 1,   // First element in the middle partition.\n        great = hi - 2;  // Last element in the middle partition.\n\n    // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n    // Object.prototype.valueOf; == and === do not, so in order to be consistent\n    // with natural order (such as for Date objects), we must do two compares.\n    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n    if (pivotsEqual) {\n\n      // Degenerated case where the partitioning becomes a dutch national flag\n      // problem.\n      //\n      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n      //  ^             ^          ^             ^            ^\n      // left         less         k           great         right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1) for x in ]left, less[ : x < pivot.\n      //   2) for x in [less, k[ : x == pivot.\n      //   3) for x in ]great, right[ : x > pivot.\n      for (var k = less; k <= great; ++k) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else if (xk > pivotValue1) {\n\n          // Find the first element <= pivot in the range [k - 1, great] and\n          // put [:ek:] there. We know that such an element must exist:\n          // When k == less, then el3 (which is equal to pivot) lies in the\n          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n          // Note that in the latter case invariant 2 will be violated for a\n          // short amount of time. The invariant will be restored when the\n          // pivots are put into their final positions.\n          while (true) {\n            var greatValue = f(a[great]);\n            if (greatValue > pivotValue1) {\n              great--;\n              // This is the only location in the while-loop where a new\n              // iteration is started.\n              continue;\n            } else if (greatValue < pivotValue1) {\n              // Triple exchange.\n              a[k] = a[less];\n              a[less++] = a[great];\n              a[great--] = ek;\n              break;\n            } else {\n              a[k] = a[great];\n              a[great--] = ek;\n              // Note: if great < k then we will exit the outer loop and fix\n              // invariant 2 (which we just violated).\n              break;\n            }\n          }\n        }\n      }\n    } else {\n\n      // We partition the list into three parts:\n      //  1. < pivot1\n      //  2. >= pivot1 && <= pivot2\n      //  3. > pivot2\n      //\n      // During the loop we have:\n      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n      //  ^            ^                        ^              ^             ^\n      // left         less                     k              great        right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1. for x in ]left, less[ : x < pivot1\n      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n      //   3. for x in ]great, right[ : x > pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else {\n          if (xk > pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] <= pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] >= pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Move pivots into their final positions.\n    // We shrunk the list from both sides (a[left] and a[right] have\n    // meaningless values in them) and now we move elements from the first\n    // and third partition into these locations so that we can store the\n    // pivots.\n    a[lo] = a[less - 1];\n    a[less - 1] = pivot1;\n    a[hi - 1] = a[great + 1];\n    a[great + 1] = pivot2;\n\n    // The list is now partitioned into three partitions:\n    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n    //  ^            ^                        ^             ^\n    // left         less                     great        right\n\n    // Recursive descent. (Don't include the pivot values.)\n    sort(a, lo, less - 1);\n    sort(a, great + 2, hi);\n\n    if (pivotsEqual) {\n      // All elements in the second partition are equal to the pivot. No\n      // need to sort them.\n      return a;\n    }\n\n    // In theory it should be enough to call _doSort recursively on the second\n    // partition.\n    // The Android source however removes the pivot elements from the recursive\n    // call if the second partition is too large (more than 2/3 of the list).\n    if (less < i1 && great > i5) {\n      var lessValue, greatValue;\n      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\n      while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\n\n      // Copy paste of the previous 3-way partitioning with adaptions.\n      //\n      // We partition the list into three parts:\n      //  1. == pivot1\n      //  2. > pivot1 && < pivot2\n      //  3. == pivot2\n      //\n      // During the loop we have:\n      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n      //              ^                      ^              ^\n      //            less                     k              great\n      //\n      // Invariants:\n      //   1. for x in [ *, less[ : x == pivot1\n      //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n      //   3. for x in ]great, * ] : x == pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk <= pivotValue1 && xk >= pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          less++;\n        } else {\n          if (xk <= pivotValue2 && xk >= pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] < pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] == pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // The second partition has now been cleared of pivot elements and looks\n    // as follows:\n    // [  *  |  > pivot1 && < pivot2  | * ]\n    //        ^                      ^\n    //       less                  great\n    // Sort the second partition using recursive descent.\n\n    // The second partition looks as follows:\n    // [  *  |  >= pivot1 && <= pivot2  | * ]\n    //        ^                        ^\n    //       less                    great\n    // Simply sort it by recursive descent.\n\n    return sort(a, less, great + 1);\n  }\n\n  return sort;\n}\n\nvar quicksort_sizeThreshold = 32;\nvar crossfilter_array8 = crossfilter_arrayUntyped,\n    crossfilter_array16 = crossfilter_arrayUntyped,\n    crossfilter_array32 = crossfilter_arrayUntyped,\n    crossfilter_arrayLengthen = crossfilter_arrayLengthenUntyped,\n    crossfilter_arrayWiden = crossfilter_arrayWidenUntyped;\n\nif (typeof Uint8Array !== \"undefined\") {\n  crossfilter_array8 = function(n) { return new Uint8Array(n); };\n  crossfilter_array16 = function(n) { return new Uint16Array(n); };\n  crossfilter_array32 = function(n) { return new Uint32Array(n); };\n\n  crossfilter_arrayLengthen = function(array, length) {\n    if (array.length >= length) return array;\n    var copy = new array.constructor(length);\n    copy.set(array);\n    return copy;\n  };\n\n  crossfilter_arrayWiden = function(array, width) {\n    var copy;\n    switch (width) {\n      case 16: copy = crossfilter_array16(array.length); break;\n      case 32: copy = crossfilter_array32(array.length); break;\n      default: throw new Error(\"invalid array width!\");\n    }\n    copy.set(array);\n    return copy;\n  };\n}\n\nfunction crossfilter_arrayUntyped(n) {\n  var array = new Array(n), i = -1;\n  while (++i < n) array[i] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayLengthenUntyped(array, length) {\n  var n = array.length;\n  while (n < length) array[n++] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayWidenUntyped(array, width) {\n  if (width > 32) throw new Error(\"invalid array width!\");\n  return array;\n}\nfunction crossfilter_filterExact(bisect, value) {\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n  };\n}\n\nfunction crossfilter_filterRange(bisect, range) {\n  var min = range[0],\n      max = range[1];\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n  };\n}\n\nfunction crossfilter_filterAll(values) {\n  return [0, values.length];\n}\nfunction crossfilter_null() {\n  return null;\n}\nfunction crossfilter_zero() {\n  return 0;\n}\nfunction crossfilter_reduceIncrement(p) {\n  return p + 1;\n}\n\nfunction crossfilter_reduceDecrement(p) {\n  return p - 1;\n}\n\nfunction crossfilter_reduceAdd(f) {\n  return function(p, v) {\n    return p + +f(v);\n  };\n}\n\nfunction crossfilter_reduceSubtract(f) {\n  return function(p, v) {\n    return p - f(v);\n  };\n}\nexports.crossfilter = crossfilter;\n\nfunction crossfilter() {\n  var crossfilter = {\n    add: add,\n    remove: removeData,\n    dimension: dimension,\n    groupAll: groupAll,\n    size: size\n  };\n\n  var data = [], // the records\n      n = 0, // the number of records; data.length\n      m = 0, // a bit mask representing which dimensions are in use\n      M = 8, // number of dimensions that can fit in `filters`\n      filters = crossfilter_array8(0), // M bits per record; 1 is filtered out\n      filterListeners = [], // when the filters change\n      dataListeners = [], // when data is added\n      removeDataListeners = []; // when data is removed\n\n  // Adds the specified new records to this crossfilter.\n  function add(newData) {\n    var n0 = n,\n        n1 = newData.length;\n\n    // If there's actually new data to add…\n    // Merge the new data into the existing data.\n    // Lengthen the filter bitset to handle the new records.\n    // Notify listeners (dimensions and groups) that new data is available.\n    if (n1) {\n      data = data.concat(newData);\n      filters = crossfilter_arrayLengthen(filters, n += n1);\n      dataListeners.forEach(function(l) { l(newData, n0, n1); });\n    }\n\n    return crossfilter;\n  }\n\n  // Removes all records that match the current filters.\n  function removeData() {\n    var newIndex = crossfilter_index(n, n),\n        removed = [];\n    for (var i = 0, j = 0; i < n; ++i) {\n      if (filters[i]) newIndex[i] = j++;\n      else removed.push(i);\n    }\n\n    // Remove all matching records from groups.\n    filterListeners.forEach(function(l) { l(0, [], removed); });\n\n    // Update indexes.\n    removeDataListeners.forEach(function(l) { l(newIndex); });\n\n    // Remove old filters and data by overwriting.\n    for (var i = 0, j = 0, k; i < n; ++i) {\n      if (k = filters[i]) {\n        if (i !== j) filters[j] = k, data[j] = data[i];\n        ++j;\n      }\n    }\n    data.length = j;\n    while (n > j) filters[--n] = 0;\n  }\n\n  // Adds a new dimension with the specified value accessor function.\n  function dimension(value) {\n    var dimension = {\n      filter: filter,\n      filterExact: filterExact,\n      filterRange: filterRange,\n      filterFunction: filterFunction,\n      filterAll: filterAll,\n      top: top,\n      bottom: bottom,\n      group: group,\n      groupAll: groupAll,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var one = ~m & -~m, // lowest unset bit as mask, e.g., 00001000\n        zero = ~one, // inverted one, e.g., 11110111\n        values, // sorted, cached array\n        index, // value rank ↦ object id\n        newValues, // temporary array storing newly-added values\n        newIndex, // temporary array storing newly-added index\n        sort = quicksort_by(function(i) { return newValues[i]; }),\n        refilter = crossfilter_filterAll, // for recomputing filter\n        refilterFunction, // the custom filter function in use\n        indexListeners = [], // when data is added\n        dimensionGroups = [],\n        lo0 = 0,\n        hi0 = 0;\n\n    // Updating a dimension is a two-stage process. First, we must update the\n    // associated filters for the newly-added records. Once all dimensions have\n    // updated their filters, the groups are notified to update.\n    dataListeners.unshift(preAdd);\n    dataListeners.push(postAdd);\n\n    removeDataListeners.push(removeData);\n\n    // Incorporate any existing data into this dimension, and make sure that the\n    // filter bitset is wide enough to handle the new dimension.\n    m |= one;\n    if (M >= 32 ? !one : m & -(1 << M)) {\n      filters = crossfilter_arrayWiden(filters, M <<= 1);\n    }\n    preAdd(data, 0, n);\n    postAdd(data, 0, n);\n\n    // Incorporates the specified new records into this dimension.\n    // This function is responsible for updating filters, values, and index.\n    function preAdd(newData, n0, n1) {\n\n      // Permute new values into natural order using a sorted index.\n      newValues = newData.map(value);\n      newIndex = sort(crossfilter_range(n1), 0, n1);\n      newValues = permute(newValues, newIndex);\n\n      // Bisect newValues to determine which new records are selected.\n      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1], i;\n      if (refilterFunction) {\n        for (i = 0; i < n1; ++i) {\n          if (!refilterFunction(newValues[i], i)) filters[newIndex[i] + n0] |= one;\n        }\n      } else {\n        for (i = 0; i < lo1; ++i) filters[newIndex[i] + n0] |= one;\n        for (i = hi1; i < n1; ++i) filters[newIndex[i] + n0] |= one;\n      }\n\n      // If this dimension previously had no data, then we don't need to do the\n      // more expensive merge operation; use the new values and index as-is.\n      if (!n0) {\n        values = newValues;\n        index = newIndex;\n        lo0 = lo1;\n        hi0 = hi1;\n        return;\n      }\n\n      var oldValues = values,\n          oldIndex = index,\n          i0 = 0,\n          i1 = 0;\n\n      // Otherwise, create new arrays into which to merge new and old.\n      values = new Array(n);\n      index = crossfilter_index(n, n);\n\n      // Merge the old and new sorted values, and old and new index.\n      for (i = 0; i0 < n0 && i1 < n1; ++i) {\n        if (oldValues[i0] < newValues[i1]) {\n          values[i] = oldValues[i0];\n          index[i] = oldIndex[i0++];\n        } else {\n          values[i] = newValues[i1];\n          index[i] = newIndex[i1++] + n0;\n        }\n      }\n\n      // Add any remaining old values.\n      for (; i0 < n0; ++i0, ++i) {\n        values[i] = oldValues[i0];\n        index[i] = oldIndex[i0];\n      }\n\n      // Add any remaining new values.\n      for (; i1 < n1; ++i1, ++i) {\n        values[i] = newValues[i1];\n        index[i] = newIndex[i1] + n0;\n      }\n\n      // Bisect again to recompute lo0 and hi0.\n      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // When all filters have updated, notify index listeners of the new values.\n    function postAdd(newData, n0, n1) {\n      indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\n      newValues = newIndex = null;\n    }\n\n    function removeData(reIndex) {\n      for (var i = 0, j = 0, k; i < n; ++i) {\n        if (filters[k = index[i]]) {\n          if (i !== j) values[j] = values[i];\n          index[j] = reIndex[k];\n          ++j;\n        }\n      }\n      values.length = j;\n      while (j < n) index[j++] = 0;\n\n      // Bisect again to recompute lo0 and hi0.\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // Updates the selected values based on the specified bounds [lo, hi].\n    // This implementation is used by all the public filter methods.\n    function filterIndexBounds(bounds) {\n      var lo1 = bounds[0],\n          hi1 = bounds[1];\n\n      if (refilterFunction) {\n        refilterFunction = null;\n        filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; });\n        lo0 = lo1;\n        hi0 = hi1;\n        return dimension;\n      }\n\n      var i,\n          j,\n          k,\n          added = [],\n          removed = [];\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      lo0 = lo1;\n      hi0 = hi1;\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n      return dimension;\n    }\n\n    // Filters this dimension using the specified range, value, or null.\n    // If the range is null, this is equivalent to filterAll.\n    // If the range is an array, this is equivalent to filterRange.\n    // Otherwise, this is equivalent to filterExact.\n    function filter(range) {\n      return range == null\n          ? filterAll() : Array.isArray(range)\n          ? filterRange(range) : typeof range === \"function\"\n          ? filterFunction(range)\n          : filterExact(range);\n    }\n\n    // Filters this dimension to select the exact value.\n    function filterExact(value) {\n      return filterIndexBounds((refilter = crossfilter_filterExact(bisect, value))(values));\n    }\n\n    // Filters this dimension to select the specified range [lo, hi].\n    // The lower bound is inclusive, and the upper bound is exclusive.\n    function filterRange(range) {\n      return filterIndexBounds((refilter = crossfilter_filterRange(bisect, range))(values));\n    }\n\n    // Clears any filters on this dimension.\n    function filterAll() {\n      return filterIndexBounds((refilter = crossfilter_filterAll)(values));\n    }\n\n    // Filters this dimension using an arbitrary function.\n    function filterFunction(f) {\n      refilter = crossfilter_filterAll;\n\n      filterIndexFunction(refilterFunction = f);\n\n      lo0 = 0;\n      hi0 = n;\n\n      return dimension;\n    }\n\n    function filterIndexFunction(f) {\n      var i,\n          k,\n          x,\n          added = [],\n          removed = [];\n\n      for (i = 0; i < n; ++i) {\n        if (!(filters[k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n          if (x) filters[k] &= zero, added.push(k);\n          else filters[k] |= one, removed.push(k);\n        }\n      }\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n    }\n\n    // Returns the top K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function top(k) {\n      var array = [],\n          i = hi0,\n          j;\n\n      while (--i >= lo0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n      }\n\n      return array;\n    }\n\n    // Returns the bottom K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function bottom(k) {\n      var array = [],\n          i = lo0,\n          j;\n\n      while (i < hi0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n        i++;\n      }\n\n      return array;\n    }\n\n    // Adds a new group to this dimension, using the specified key function.\n    function group(key) {\n      var group = {\n        top: top,\n        all: all,\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        order: order,\n        orderNatural: orderNatural,\n        size: size,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      // Ensure that this group will be removed when the dimension is removed.\n      dimensionGroups.push(group);\n\n      var groups, // array of {key, value}\n          groupIndex, // object id ↦ group id\n          groupWidth = 8,\n          groupCapacity = crossfilter_capacity(groupWidth),\n          k = 0, // cardinality\n          select,\n          heap,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          update = crossfilter_null,\n          reset = crossfilter_null,\n          resetNeeded = true,\n          groupAll = key === crossfilter_null;\n\n      if (arguments.length < 1) key = crossfilter_identity;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the associated reduce values. It must also listen to\n      // the parent dimension for when data is added, and compute new keys.\n      filterListeners.push(update);\n      indexListeners.push(add);\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into the grouping.\n      add(values, index, 0, n);\n\n      // Incorporates the specified new values into this group.\n      // This function is responsible for updating groups and groupIndex.\n      function add(newValues, newIndex, n0, n1) {\n        var oldGroups = groups,\n            reIndex = crossfilter_index(k, groupCapacity),\n            add = reduceAdd,\n            initial = reduceInitial,\n            k0 = k, // old cardinality\n            i0 = 0, // index of old group\n            i1 = 0, // index of new record\n            j, // object id\n            g0, // old group\n            x0, // old key\n            x1, // new key\n            g, // group to add\n            x; // key of group to add\n\n        // If a reset is needed, we don't need to update the reduce values.\n        if (resetNeeded) add = initial = crossfilter_null;\n\n        // Reset the new groups (k is a lower bound).\n        // Also, make sure that groupIndex exists and is long enough.\n        groups = new Array(k), k = 0;\n        groupIndex = k0 > 1 ? crossfilter_arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n\n        // Get the first old key (x0 of g0), if it exists.\n        if (k0) x0 = (g0 = oldGroups[0]).key;\n\n        // Find the first new key (x1), skipping NaN keys.\n        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\n\n        // While new keys remain…\n        while (i1 < n1) {\n\n          // Determine the lesser of the two current keys; new and old.\n          // If there are no old keys remaining, then always add the new key.\n          if (g0 && x0 <= x1) {\n            g = g0, x = x0;\n\n            // Record the new index of the old group.\n            reIndex[i0] = k;\n\n            // Retrieve the next old key.\n            if (g0 = oldGroups[++i0]) x0 = g0.key;\n          } else {\n            g = {key: x1, value: initial()}, x = x1;\n          }\n\n          // Add the lesser group.\n          groups[k] = g;\n\n          // Add any selected records belonging to the added group, while\n          // advancing the new key and populating the associated group index.\n          while (!(x1 > x)) {\n            groupIndex[j = newIndex[i1] + n0] = k;\n            if (!(filters[j] & zero)) g.value = add(g.value, data[j]);\n            if (++i1 >= n1) break;\n            x1 = key(newValues[i1]);\n          }\n\n          groupIncrement();\n        }\n\n        // Add any remaining old groups that were greater than all new keys.\n        // No incremental reduce is needed; these groups have no new records.\n        // Also record the new index of the old group.\n        while (i0 < k0) {\n          groups[reIndex[i0] = k] = oldGroups[i0++];\n          groupIncrement();\n        }\n\n        // If we added any new groups before any old groups,\n        // update the group index of all the old records.\n        if (k > i0) for (i0 = 0; i0 < n0; ++i0) {\n          groupIndex[i0] = reIndex[groupIndex[i0]];\n        }\n\n        // Modify the update and reset behavior based on the cardinality.\n        // If the cardinality is less than or equal to one, then the groupIndex\n        // is not needed. If the cardinality is zero, then there are no records\n        // and therefore no groups to update or reset. Note that we also must\n        // change the registered listener to point to the new method.\n        j = filterListeners.indexOf(update);\n        if (k > 1) {\n          update = updateMany;\n          reset = resetMany;\n        } else {\n          if (!k && groupAll) {\n            k = 1;\n            groups = [{key: null, value: initial()}];\n          }\n          if (k === 1) {\n            update = updateOne;\n            reset = resetOne;\n          } else {\n            update = crossfilter_null;\n            reset = crossfilter_null;\n          }\n          groupIndex = null;\n        }\n        filterListeners[j] = update;\n\n        // Count the number of added groups,\n        // and widen the group index as needed.\n        function groupIncrement() {\n          if (++k === groupCapacity) {\n            reIndex = crossfilter_arrayWiden(reIndex, groupWidth <<= 1);\n            groupIndex = crossfilter_arrayWiden(groupIndex, groupWidth);\n            groupCapacity = crossfilter_capacity(groupWidth);\n          }\n        }\n      }\n\n      function removeData() {\n        if (k > 1) {\n          var oldK = k,\n              oldGroups = groups,\n              seenGroups = crossfilter_index(oldK, oldK);\n\n          // Filter out non-matches by copying matching group index entries to\n          // the beginning of the array.\n          for (var i = 0, j = 0; i < n; ++i) {\n            if (filters[i]) {\n              seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n              ++j;\n            }\n          }\n\n          // Reassemble groups including only those groups that were referred\n          // to by matching group index entries.  Note the new group index in\n          // seenGroups.\n          groups = [], k = 0;\n          for (i = 0; i < oldK; ++i) {\n            if (seenGroups[i]) {\n              seenGroups[i] = k++;\n              groups.push(oldGroups[i]);\n            }\n          }\n\n          if (k > 1) {\n            // Reindex the group index using seenGroups to find the new index.\n            for (var i = 0; i < j; ++i) groupIndex[i] = seenGroups[groupIndex[i]];\n          } else {\n            groupIndex = null;\n          }\n          filterListeners[filterListeners.indexOf(update)] = k > 1\n              ? (reset = resetMany, update = updateMany)\n              : k === 1 ? (reset = resetOne, update = updateOne)\n              : reset = update = crossfilter_null;\n        } else if (k === 1) {\n          if (groupAll) return;\n          for (var i = 0; i < n; ++i) if (filters[i]) return;\n          groups = [], k = 0;\n          filterListeners[filterListeners.indexOf(update)] =\n          update = reset = crossfilter_null;\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is greater than 1.\n      function updateMany(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g;\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g = groups[groupIndex[k]];\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is 1.\n      function updateOne(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g = groups[0];\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is greater than 1.\n      function resetMany() {\n        var i,\n            g;\n\n        // Reset all group values.\n        for (i = 0; i < k; ++i) {\n          groups[i].value = reduceInitial();\n        }\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g = groups[groupIndex[i]];\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is 1.\n      function resetOne() {\n        var i,\n            g = groups[0];\n\n        // Reset the singleton group values.\n        g.value = reduceInitial();\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Returns the array of group values, in the dimension's natural order.\n      function all() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return groups;\n      }\n\n      // Returns a new array containing the top K group values, in reduce order.\n      function top(k) {\n        var top = select(all(), 0, groups.length, k);\n        return heap.sort(top, 0, top.length);\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce values, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Sets the reduce order, using the specified accessor.\n      function order(value) {\n        select = heapselect_by(valueOf);\n        heap = heap_by(valueOf);\n        function valueOf(d) { return value(d.value); }\n        return group;\n      }\n\n      // A convenience method for natural ordering by reduce value.\n      function orderNatural() {\n        return order(crossfilter_identity);\n      }\n\n      // Returns the cardinality of this group, irrespective of any filters.\n      function size() {\n        return k;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i, 1);\n        i = indexListeners.indexOf(add);\n        if (i >= 0) indexListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        return group;\n      }\n\n      return reduceCount().orderNatural();\n    }\n\n    // A convenience function for generating a singleton group.\n    function groupAll() {\n      var g = group(crossfilter_null), all = g.all;\n      delete g.all;\n      delete g.top;\n      delete g.order;\n      delete g.orderNatural;\n      delete g.size;\n      g.value = function() { return all()[0].value; };\n      return g;\n    }\n\n    // Removes this dimension and associated groups and event listeners.\n    function dispose() {\n      dimensionGroups.forEach(function(group) { group.dispose(); });\n      var i = dataListeners.indexOf(preAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = dataListeners.indexOf(postAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = removeDataListeners.indexOf(removeData);\n      if (i >= 0) removeDataListeners.splice(i, 1);\n      m &= zero;\n      return filterAll();\n    }\n\n    return dimension;\n  }\n\n  // A convenience method for groupAll on a dummy dimension.\n  // This implementation can be optimized since it always has cardinality 1.\n  function groupAll() {\n    var group = {\n      reduce: reduce,\n      reduceCount: reduceCount,\n      reduceSum: reduceSum,\n      value: value,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var reduceValue,\n        reduceAdd,\n        reduceRemove,\n        reduceInitial,\n        resetNeeded = true;\n\n    // The group listens to the crossfilter for when any dimension changes, so\n    // that it can update the reduce value. It must also listen to the parent\n    // dimension for when data is added.\n    filterListeners.push(update);\n    dataListeners.push(add);\n\n    // For consistency; actually a no-op since resetNeeded is true.\n    add(data, 0, n);\n\n    // Incorporates the specified new values into this group.\n    function add(newData, n0) {\n      var i;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = n0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Reduces the specified selected or deselected records.\n    function update(filterOne, added, removed) {\n      var i,\n          k,\n          n;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = 0, n = added.length; i < n; ++i) {\n        if (!filters[k = added[i]]) {\n          reduceValue = reduceAdd(reduceValue, data[k]);\n        }\n      }\n\n      // Remove the removed values.\n      for (i = 0, n = removed.length; i < n; ++i) {\n        if (filters[k = removed[i]] === filterOne) {\n          reduceValue = reduceRemove(reduceValue, data[k]);\n        }\n      }\n    }\n\n    // Recomputes the group reduce value from scratch.\n    function reset() {\n      var i;\n\n      reduceValue = reduceInitial();\n\n      for (i = 0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Sets the reduce behavior for this group to use the specified functions.\n    // This method lazily recomputes the reduce value, waiting until needed.\n    function reduce(add, remove, initial) {\n      reduceAdd = add;\n      reduceRemove = remove;\n      reduceInitial = initial;\n      resetNeeded = true;\n      return group;\n    }\n\n    // A convenience method for reducing by count.\n    function reduceCount() {\n      return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n    }\n\n    // A convenience method for reducing by sum(value).\n    function reduceSum(value) {\n      return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n    }\n\n    // Returns the computed reduce value.\n    function value() {\n      if (resetNeeded) reset(), resetNeeded = false;\n      return reduceValue;\n    }\n\n    // Removes this group and associated event listeners.\n    function dispose() {\n      var i = filterListeners.indexOf(update);\n      if (i >= 0) filterListeners.splice(i);\n      i = dataListeners.indexOf(add);\n      if (i >= 0) dataListeners.splice(i);\n      return group;\n    }\n\n    return reduceCount();\n  }\n\n  // Returns the number of records in this crossfilter, irrespective of any filters.\n  function size() {\n    return n;\n  }\n\n  return arguments.length\n      ? add(arguments[0])\n      : crossfilter;\n}\n\n// Returns an array of size n, big enough to store ids up to m.\nfunction crossfilter_index(n, m) {\n  return (m < 0x101\n      ? crossfilter_array8 : m < 0x10001\n      ? crossfilter_array16\n      : crossfilter_array32)(n);\n}\n\n// Constructs a new array of size n, with sequential values from 0 to n - 1.\nfunction crossfilter_range(n) {\n  var range = crossfilter_index(n, n);\n  for (var i = -1; ++i < n;) range[i] = i;\n  return range;\n}\n\nfunction crossfilter_capacity(w) {\n  return w === 8\n      ? 0x100 : w === 16\n      ? 0x10000\n      : 0x100000000;\n}\n})(typeof exports !== 'undefined' && exports || this);\n\n\n/***/ }),\n\n/***/ 274:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar crossfilter_identity = __webpack_require__(269);\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\n\nmodule.exports = heap_by(crossfilter_identity);\nmodule.exports.by = heap_by;\n\n\n/***/ }),\n\n/***/ 275:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar crossfilter_identity = __webpack_require__(269);\n\nfunction insertionsort_by(f) {\n\n  function insertionsort(a, lo, hi) {\n    for (var i = lo + 1; i < hi; ++i) {\n      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n        a[j] = a[j - 1];\n      }\n      a[j] = t;\n    }\n    return a;\n  }\n\n  return insertionsort;\n}\n\nmodule.exports = insertionsort_by(crossfilter_identity);\nmodule.exports.by = insertionsort_by;\n\n\n/***/ }),\n\n/***/ 276:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(277).crossfilter;\n\n\n/***/ }),\n\n/***/ 277:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar xfilterArray = __webpack_require__(278);\nvar xfilterFilter = __webpack_require__(279);\nvar crossfilter_identity = __webpack_require__(269);\nvar crossfilter_null = __webpack_require__(280);\nvar crossfilter_zero = __webpack_require__(281);\nvar xfilterHeapselect = __webpack_require__(282);\nvar xfilterHeap = __webpack_require__(274);\nvar bisect = __webpack_require__(283);\nvar insertionsort = __webpack_require__(275);\nvar permute = __webpack_require__(284);\nvar quicksort = __webpack_require__(285);\nvar xfilterReduce = __webpack_require__(286);\nvar packageJson = __webpack_require__(287); // require own package.json for the version field\nvar result = __webpack_require__(288);\n// expose API exports\nexports.crossfilter = crossfilter;\nexports.crossfilter.heap = xfilterHeap;\nexports.crossfilter.heapselect = xfilterHeapselect;\nexports.crossfilter.bisect = bisect;\nexports.crossfilter.insertionsort = insertionsort;\nexports.crossfilter.permute = permute;\nexports.crossfilter.quicksort = quicksort;\nexports.crossfilter.version = packageJson.version; // please note use of \"package-json-versionify\" transform\n\nfunction crossfilter() {\n  var crossfilter = {\n    add: add,\n    remove: removeData,\n    dimension: dimension,\n    groupAll: groupAll,\n    size: size,\n    all: all,\n    allFiltered: allFiltered,\n    onChange: onChange,\n    isElementFiltered: isElementFiltered\n  };\n\n  var data = [], // the records\n      n = 0, // the number of records; data.length\n      filters, // 1 is filtered out\n      filterListeners = [], // when the filters change\n      dataListeners = [], // when data is added\n      removeDataListeners = [], // when data is removed\n      callbacks = [];\n\n  filters = new xfilterArray.bitarray(0);\n\n  // Adds the specified new records to this crossfilter.\n  function add(newData) {\n    var n0 = n,\n        n1 = newData.length;\n\n    // If there's actually new data to add…\n    // Merge the new data into the existing data.\n    // Lengthen the filter bitset to handle the new records.\n    // Notify listeners (dimensions and groups) that new data is available.\n    if (n1) {\n      data = data.concat(newData);\n      filters.lengthen(n += n1);\n      dataListeners.forEach(function(l) { l(newData, n0, n1); });\n      triggerOnChange('dataAdded');\n    }\n\n    return crossfilter;\n  }\n\n  // Removes all records that match the current filters.\n  function removeData() {\n    var newIndex = crossfilter_index(n, n),\n        removed = [];\n\n    for (var index1 = 0, index2 = 0; index1 < n; ++index1) {\n      if (!filters.zero(index1)) newIndex[index1] = index2++;\n      else removed.push(index1);\n    }\n\n    // Remove all matching records from groups.\n    filterListeners.forEach(function(l) { l(-1, -1, [], removed, true); });\n\n    // Update indexes.\n    removeDataListeners.forEach(function(l) { l(newIndex); });\n\n    // Remove old filters and data by overwriting.\n    for (var index3 = 0, index4 = 0; index3 < n; ++index3) {\n      if (!filters.zero(index3)) {\n        if (index3 !== index4) filters.copy(index4, index3), data[index4] = data[index3];\n        ++index4;\n      }\n    }\n\n    data.length = n = index4;\n    filters.truncate(index4);\n    triggerOnChange('dataRemoved');\n  }\n\n  // Return true if the data element at index i is filtered IN.\n  // Optionally, ignore the filters of any dimensions in the ignore_dimensions list.\n  function isElementFiltered(i, ignore_dimensions) {\n    var n,\n        d,\n        id,\n        len,\n        mask = Array(filters.subarrays);\n    for (n = 0; n < filters.subarrays; n++) { mask[n] = ~0; }\n    if (ignore_dimensions) {\n      for (d = 0, len = ignore_dimensions.length; d < len; d++) {\n        // The top bits of the ID are the subarray offset and the lower bits are the bit\n        // offset of the \"one\" mask.\n        id = ignore_dimensions[d].id();\n        mask[id >> 7] &= ~(0x1 << (id & 0x3f));\n      }\n    }\n    return filters.zeroExceptMask(i,mask);\n  }\n\n  // Adds a new dimension with the specified value accessor function.\n  function dimension(value, iterable) {\n\n    if (typeof value === 'string') {\n      var accessorPath = value;\n      value = function(d) { return result(d, accessorPath); };\n    }\n\n    var dimension = {\n      filter: filter,\n      filterExact: filterExact,\n      filterRange: filterRange,\n      filterFunction: filterFunction,\n      filterAll: filterAll,\n      top: top,\n      bottom: bottom,\n      group: group,\n      groupAll: groupAll,\n      dispose: dispose,\n      remove: dispose, // for backwards-compatibility\n      accessor: value,\n      id: function() { return id; }\n    };\n\n    var one, // lowest unset bit as mask, e.g., 00001000\n        zero, // inverted one, e.g., 11110111\n        offset, // offset into the filters arrays\n        id, // unique ID for this dimension (reused when dimensions are disposed)\n        values, // sorted, cached array\n        index, // value rank ↦ object id\n        newValues, // temporary array storing newly-added values\n        newIndex, // temporary array storing newly-added index\n        iterablesIndexCount,\n        newIterablesIndexCount,\n        iterablesIndexFilterStatus,\n        newIterablesIndexFilterStatus,\n        iterablesEmptyRows = [],\n        sort = quicksort.by(function(i) { return newValues[i]; }),\n        refilter = xfilterFilter.filterAll, // for recomputing filter\n        refilterFunction, // the custom filter function in use\n        indexListeners = [], // when data is added\n        dimensionGroups = [],\n        lo0 = 0,\n        hi0 = 0,\n        t = 0,\n        k;\n\n    // Updating a dimension is a two-stage process. First, we must update the\n    // associated filters for the newly-added records. Once all dimensions have\n    // updated their filters, the groups are notified to update.\n    dataListeners.unshift(preAdd);\n    dataListeners.push(postAdd);\n\n    removeDataListeners.push(removeData);\n\n    // Add a new dimension in the filter bitmap and store the offset and bitmask.\n    var tmp = filters.add();\n    offset = tmp.offset;\n    one = tmp.one;\n    zero = ~one;\n\n    // Create a unique ID for the dimension\n    // IDs will be re-used if dimensions are disposed.\n    // For internal use the ID is the subarray offset shifted left 7 bits or'd with the\n    // bit offset of the set bit in the dimension's \"one\" mask.\n    id = (offset << 7) | (Math.log(one) / Math.log(2));\n\n    preAdd(data, 0, n);\n    postAdd(data, 0, n);\n\n    // Incorporates the specified new records into this dimension.\n    // This function is responsible for updating filters, values, and index.\n    function preAdd(newData, n0, n1) {\n\n      if (iterable){\n        // Count all the values\n        t = 0;\n        j = 0;\n        k = [];\n\n        for (var i0 = 0; i0 < newData.length; i0++) {\n          for(j = 0, k = value(newData[i0]); j < k.length; j++) {\n            t++;\n          }\n        }\n\n        newValues = [];\n        newIterablesIndexCount = crossfilter_range(newData.length);\n        newIterablesIndexFilterStatus = crossfilter_index(t,1);\n        var unsortedIndex = crossfilter_range(t);\n\n        for (var l = 0, index1 = 0; index1 < newData.length; index1++) {\n          k = value(newData[index1])\n          //\n          if(!k.length){\n            newIterablesIndexCount[index1] = 0;\n            iterablesEmptyRows.push(index1 + n0);\n            continue;\n          }\n          newIterablesIndexCount[index1] = k.length\n          for (j = 0; j < k.length; j++) {\n            newValues.push(k[j]);\n            unsortedIndex[l] = index1;\n            l++;\n          }\n        }\n\n        // Create the Sort map used to sort both the values and the valueToData indices\n        var sortMap = sort(crossfilter_range(t), 0, t);\n\n        // Use the sortMap to sort the newValues\n        newValues = permute(newValues, sortMap);\n\n\n        // Use the sortMap to sort the unsortedIndex map\n        // newIndex should be a map of sortedValue -> crossfilterData\n        newIndex = permute(unsortedIndex, sortMap)\n\n      } else{\n        // Permute new values into natural order using a standard sorted index.\n        newValues = newData.map(value);\n        newIndex = sort(crossfilter_range(n1), 0, n1);\n        newValues = permute(newValues, newIndex);\n      }\n\n      if(iterable) {\n        n1 = t;\n      }\n\n      // Bisect newValues to determine which new records are selected.\n      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1];\n      if (refilterFunction) {\n        for (var index2 = 0; index2 < n1; ++index2) {\n          if (!refilterFunction(newValues[index2], index2)) {\n            filters[offset][newIndex[index2] + n0] |= one;\n            if(iterable) newIterablesIndexFilterStatus[index2] = 1;\n          }\n        }\n      } else {\n        for (var index3 = 0; index3 < lo1; ++index3) {\n          filters[offset][newIndex[index3] + n0] |= one;\n          if(iterable) newIterablesIndexFilterStatus[index3] = 1;\n        }\n        for (var index4 = hi1; index4 < n1; ++index4) {\n          filters[offset][newIndex[index4] + n0] |= one;\n          if(iterable) newIterablesIndexFilterStatus[index4] = 1;\n        }\n      }\n\n      // If this dimension previously had no data, then we don't need to do the\n      // more expensive merge operation; use the new values and index as-is.\n      if (!n0) {\n        values = newValues;\n        index = newIndex;\n        iterablesIndexCount = newIterablesIndexCount;\n        iterablesIndexFilterStatus = newIterablesIndexFilterStatus;\n        lo0 = lo1;\n        hi0 = hi1;\n        return;\n      }\n\n\n\n      var oldValues = values,\n        oldIndex = index,\n        oldIterablesIndexFilterStatus = iterablesIndexFilterStatus,\n        old_n0,\n        i1 = 0;\n\n      i0 = 0;\n\n      if(iterable){\n        old_n0 = n0\n        n0 = oldValues.length;\n        n1 = t\n      }\n\n      // Otherwise, create new arrays into which to merge new and old.\n      values = iterable ? new Array(n0 + n1) : new Array(n);\n      index = iterable ? new Array(n0 + n1) : crossfilter_index(n, n);\n      if(iterable) iterablesIndexFilterStatus = crossfilter_index(n0 + n1, 1);\n\n      // Concatenate the newIterablesIndexCount onto the old one.\n      if(iterable) {\n        var oldiiclength = iterablesIndexCount.length;\n        iterablesIndexCount = xfilterArray.arrayLengthen(iterablesIndexCount, n);\n        for(var j=0; j+oldiiclength < n; j++) {\n          iterablesIndexCount[j+oldiiclength] = newIterablesIndexCount[j];\n        }\n      }\n\n      // Merge the old and new sorted values, and old and new index.\n      var index5 = 0;\n      for (; i0 < n0 && i1 < n1; ++index5) {\n        if (oldValues[i0] < newValues[i1]) {\n          values[index5] = oldValues[i0];\n          if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];\n          index[index5] = oldIndex[i0++];\n        } else {\n          values[index5] = newValues[i1];\n          if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];\n          index[index5] = newIndex[i1++] + (iterable ? old_n0 : n0);\n        }\n      }\n\n      // Add any remaining old values.\n      for (; i0 < n0; ++i0, ++index5) {\n        values[index5] = oldValues[i0];\n        if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];\n        index[index5] = oldIndex[i0];\n      }\n\n      // Add any remaining new values.\n      for (; i1 < n1; ++i1, ++index5) {\n        values[index5] = newValues[i1];\n        if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];\n        index[index5] = newIndex[i1] + (iterable ? old_n0 : n0);\n      }\n\n      // Bisect again to recompute lo0 and hi0.\n      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // When all filters have updated, notify index listeners of the new values.\n    function postAdd(newData, n0, n1) {\n      indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\n      newValues = newIndex = null;\n    }\n\n    function removeData(reIndex) {\n      for (var i = 0, j = 0, k; i < n; ++i) {\n        if (!filters.zero(k = index[i])) {\n          if (i !== j) values[j] = values[i];\n          index[j] = reIndex[k];\n          ++j;\n        }\n      }\n      values.length = j;\n      while (j < n) index[j++] = 0;\n\n      // Bisect again to recompute lo0 and hi0.\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // Updates the selected values based on the specified bounds [lo, hi].\n    // This implementation is used by all the public filter methods.\n    function filterIndexBounds(bounds) {\n\n      var lo1 = bounds[0],\n          hi1 = bounds[1];\n\n      if (refilterFunction) {\n        refilterFunction = null;\n        filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; }, bounds[0] === 0 && bounds[1] === index.length);\n        lo0 = lo1;\n        hi0 = hi1;\n        return dimension;\n      }\n\n      var i,\n          j,\n          k,\n          added = [],\n          removed = [],\n          valueIndexAdded = [],\n          valueIndexRemoved = [];\n\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          added.push(index[i]);\n          valueIndexAdded.push(i);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          removed.push(index[i]);\n          valueIndexRemoved.push(i);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          added.push(index[i]);\n          valueIndexAdded.push(i);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          removed.push(index[i]);\n          valueIndexRemoved.push(i);\n        }\n      }\n\n      if(!iterable) {\n        // Flip filters normally.\n\n        for(i=0; i<added.length; i++) {\n          filters[offset][added[i]] ^= one;\n        }\n\n        for(i=0; i<removed.length; i++) {\n          filters[offset][removed[i]] ^= one;\n        }\n\n      } else {\n        // For iterables, we need to figure out if the row has been completely removed vs partially included\n        // Only count a row as added if it is not already being aggregated. Only count a row\n        // as removed if the last element being aggregated is removed.\n\n        var newAdded = [];\n        var newRemoved = [];\n        for (i = 0; i < added.length; i++) {\n          iterablesIndexCount[added[i]]++\n          iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;\n          if(iterablesIndexCount[added[i]] === 1) {\n            filters[offset][added[i]] ^= one;\n            newAdded.push(added[i]);\n          }\n        }\n        for (i = 0; i < removed.length; i++) {\n          iterablesIndexCount[removed[i]]--\n          iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;\n          if(iterablesIndexCount[removed[i]] === 0) {\n            filters[offset][removed[i]] ^= one;\n            newRemoved.push(removed[i]);\n          }\n        }\n\n        added = newAdded;\n        removed = newRemoved;\n\n        // Now handle empty rows.\n        if(bounds[0] === 0 && bounds[1] === index.length) {\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if((filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was not in the filter, so set the filter and add\n              filters[offset][k] ^= one;\n              added.push(k);\n            }\n          }\n        } else {\n          // filter in place - remove empty rows if necessary\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was in the filter, so set the filter and remove\n              filters[offset][k] ^= one;\n              removed.push(k);\n            }\n          }\n        }\n      }\n\n      lo0 = lo1;\n      hi0 = hi1;\n      filterListeners.forEach(function(l) { l(one, offset, added, removed); });\n      triggerOnChange('filtered');\n      return dimension;\n    }\n\n    // Filters this dimension using the specified range, value, or null.\n    // If the range is null, this is equivalent to filterAll.\n    // If the range is an array, this is equivalent to filterRange.\n    // Otherwise, this is equivalent to filterExact.\n    function filter(range) {\n      return range == null\n          ? filterAll() : Array.isArray(range)\n          ? filterRange(range) : typeof range === \"function\"\n          ? filterFunction(range)\n          : filterExact(range);\n    }\n\n    // Filters this dimension to select the exact value.\n    function filterExact(value) {\n      return filterIndexBounds((refilter = xfilterFilter.filterExact(bisect, value))(values));\n    }\n\n    // Filters this dimension to select the specified range [lo, hi].\n    // The lower bound is inclusive, and the upper bound is exclusive.\n    function filterRange(range) {\n      return filterIndexBounds((refilter = xfilterFilter.filterRange(bisect, range))(values));\n    }\n\n    // Clears any filters on this dimension.\n    function filterAll() {\n      return filterIndexBounds((refilter = xfilterFilter.filterAll)(values));\n    }\n\n    // Filters this dimension using an arbitrary function.\n    function filterFunction(f) {\n      refilterFunction = f;\n      refilter = xfilterFilter.filterAll;\n\n      filterIndexFunction(f, false);\n\n      lo0 = 0;\n      hi0 = n;\n\n      return dimension;\n    }\n\n    function filterIndexFunction(f, filterAll) {\n      var i,\n          k,\n          x,\n          added = [],\n          removed = [],\n          valueIndexAdded = [],\n          valueIndexRemoved = [],\n          indexLength = index.length;\n\n      if(!iterable) {\n        for (i = 0; i < indexLength; ++i) {\n          if (!(filters[offset][k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n            if (x) added.push(k);\n            else removed.push(k);\n          }\n        }\n      }\n\n      if(iterable) {\n        for(i=0; i < indexLength; ++i) {\n          if(f(values[i], i)) {\n            added.push(index[i]);\n            valueIndexAdded.push(i);\n          } else {\n            removed.push(index[i]);\n            valueIndexRemoved.push(i);\n          }\n        }\n      }\n\n      if(!iterable) {\n        for(i=0; i<added.length; i++) {\n          if(filters[offset][added[i]] & one) filters[offset][added[i]] &= zero;\n        }\n\n        for(i=0; i<removed.length; i++) {\n          if(!(filters[offset][removed[i]] & one)) filters[offset][removed[i]] |= one;\n        }\n      } else {\n\n        var newAdded = [];\n        var newRemoved = [];\n        for (i = 0; i < added.length; i++) {\n          // First check this particular value needs to be added\n          if(iterablesIndexFilterStatus[valueIndexAdded[i]] === 1) {\n            iterablesIndexCount[added[i]]++\n            iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;\n            if(iterablesIndexCount[added[i]] === 1) {\n              filters[offset][added[i]] ^= one;\n              newAdded.push(added[i]);\n            }\n          }\n        }\n        for (i = 0; i < removed.length; i++) {\n          // First check this particular value needs to be removed\n          if(iterablesIndexFilterStatus[valueIndexRemoved[i]] === 0) {\n            iterablesIndexCount[removed[i]]--\n            iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;\n            if(iterablesIndexCount[removed[i]] === 0) {\n              filters[offset][removed[i]] ^= one;\n              newRemoved.push(removed[i]);\n            }\n          }\n        }\n\n        added = newAdded;\n        removed = newRemoved;\n\n        // Now handle empty rows.\n        if(filterAll) {\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if((filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was not in the filter, so set the filter and add\n              filters[offset][k] ^= one;\n              added.push(k);\n            }\n          }\n        } else {\n          // filter in place - remove empty rows if necessary\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was in the filter, so set the filter and remove\n              filters[offset][k] ^= one;\n              removed.push(k);\n            }\n          }\n        }\n      }\n\n      filterListeners.forEach(function(l) { l(one, offset, added, removed); });\n      triggerOnChange('filtered');\n    }\n\n    // Returns the top K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function top(k, top_offset) {\n      var array = [],\n          i = hi0,\n          j,\n          toSkip = 0;\n\n      if(top_offset && top_offset > 0) toSkip = top_offset;\n\n      while (--i >= lo0 && k > 0) {\n        if (filters.zero(j = index[i])) {\n          if(toSkip > 0) {\n            //skip matching row\n            --toSkip;\n          } else {\n            array.push(data[j]);\n            --k;\n          }\n        }\n      }\n\n      if(iterable){\n        for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {\n          // Add row with empty iterable column at the end\n          if(filters.zero(j = iterablesEmptyRows[i])) {\n            if(toSkip > 0) {\n              //skip matching row\n              --toSkip;\n            } else {\n              array.push(data[j]);\n              --k;\n            }\n          }\n        }\n      }\n\n      return array;\n    }\n\n    // Returns the bottom K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function bottom(k, bottom_offset) {\n      var array = [],\n          i,\n          j,\n          toSkip = 0;\n\n      if(bottom_offset && bottom_offset > 0) toSkip = bottom_offset;\n\n      if(iterable) {\n        // Add row with empty iterable column at the top\n        for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {\n          if(filters.zero(j = iterablesEmptyRows[i])) {\n            if(toSkip > 0) {\n              //skip matching row\n              --toSkip;\n            } else {\n              array.push(data[j]);\n              --k;\n            }\n          }\n        }\n      }\n\n      i = lo0;\n\n      while (i < hi0 && k > 0) {\n        if (filters.zero(j = index[i])) {\n          if(toSkip > 0) {\n            //skip matching row\n            --toSkip;\n          } else {\n            array.push(data[j]);\n            --k;\n          }\n        }\n        i++;\n      }\n\n      return array;\n    }\n\n    // Adds a new group to this dimension, using the specified key function.\n    function group(key) {\n      var group = {\n        top: top,\n        all: all,\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        order: order,\n        orderNatural: orderNatural,\n        size: size,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      // Ensure that this group will be removed when the dimension is removed.\n      dimensionGroups.push(group);\n\n      var groups, // array of {key, value}\n          groupIndex, // object id ↦ group id\n          groupWidth = 8,\n          groupCapacity = crossfilter_capacity(groupWidth),\n          k = 0, // cardinality\n          select,\n          heap,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          update = crossfilter_null,\n          reset = crossfilter_null,\n          resetNeeded = true,\n          groupAll = key === crossfilter_null,\n          n0old;\n\n      if (arguments.length < 1) key = crossfilter_identity;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the associated reduce values. It must also listen to\n      // the parent dimension for when data is added, and compute new keys.\n      filterListeners.push(update);\n      indexListeners.push(add);\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into the grouping.\n      add(values, index, 0, n);\n\n      // Incorporates the specified new values into this group.\n      // This function is responsible for updating groups and groupIndex.\n      function add(newValues, newIndex, n0, n1) {\n\n        if(iterable) {\n          n0old = n0\n          n0 = values.length - newValues.length\n          n1 = newValues.length;\n        }\n\n        var oldGroups = groups,\n            reIndex = iterable ? [] : crossfilter_index(k, groupCapacity),\n            add = reduceAdd,\n            remove = reduceRemove,\n            initial = reduceInitial,\n            k0 = k, // old cardinality\n            i0 = 0, // index of old group\n            i1 = 0, // index of new record\n            j, // object id\n            g0, // old group\n            x0, // old key\n            x1, // new key\n            g, // group to add\n            x; // key of group to add\n\n        // If a reset is needed, we don't need to update the reduce values.\n        if (resetNeeded) add = initial = crossfilter_null;\n        if (resetNeeded) remove = initial = crossfilter_null;\n\n        // Reset the new groups (k is a lower bound).\n        // Also, make sure that groupIndex exists and is long enough.\n        groups = new Array(k), k = 0;\n        if(iterable){\n          groupIndex = k0 > 1 ? groupIndex : [];\n        }\n        else{\n          groupIndex = k0 > 1 ? xfilterArray.arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n        }\n\n\n        // Get the first old key (x0 of g0), if it exists.\n        if (k0) x0 = (g0 = oldGroups[0]).key;\n\n        // Find the first new key (x1), skipping NaN keys.\n        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\n\n        // While new keys remain…\n        while (i1 < n1) {\n\n          // Determine the lesser of the two current keys; new and old.\n          // If there are no old keys remaining, then always add the new key.\n          if (g0 && x0 <= x1) {\n            g = g0, x = x0;\n\n            // Record the new index of the old group.\n            reIndex[i0] = k;\n\n            // Retrieve the next old key.\n            g0 = oldGroups[++i0];\n            if (g0) x0 = g0.key;\n          } else {\n            g = {key: x1, value: initial()}, x = x1;\n          }\n\n          // Add the lesser group.\n          groups[k] = g;\n\n          // Add any selected records belonging to the added group, while\n          // advancing the new key and populating the associated group index.\n\n          while (x1 <= x) {\n            j = newIndex[i1] + (iterable ? n0old : n0)\n\n\n            if(iterable){\n              if(groupIndex[j]){\n                groupIndex[j].push(k)\n              }\n              else{\n                groupIndex[j] = [k]\n              }\n            }\n            else{\n              groupIndex[j] = k;\n            }\n\n            // Always add new values to groups. Only remove when not in filter.\n            // This gives groups full information on data life-cycle.\n            g.value = add(g.value, data[j], true);\n            if (!filters.zeroExcept(j, offset, zero)) g.value = remove(g.value, data[j], false);\n            if (++i1 >= n1) break;\n            x1 = key(newValues[i1]);\n          }\n\n          groupIncrement();\n        }\n\n        // Add any remaining old groups that were greater th1an all new keys.\n        // No incremental reduce is needed; these groups have no new records.\n        // Also record the new index of the old group.\n        while (i0 < k0) {\n          groups[reIndex[i0] = k] = oldGroups[i0++];\n          groupIncrement();\n        }\n\n\n        // Fill in gaps with empty arrays where there may have been rows with empty iterables\n        if(iterable){\n          for (var index1 = 0; index1 < n; index1++) {\n            if(!groupIndex[index1]){\n              groupIndex[index1] = [];\n            }\n          }\n        }\n\n        // If we added any new groups before any old groups,\n        // update the group index of all the old records.\n        if(k > i0){\n          if(iterable){\n            groupIndex = permute(groupIndex, reIndex, true)\n          }\n          else{\n            for (i0 = 0; i0 < n0; ++i0) {\n              groupIndex[i0] = reIndex[groupIndex[i0]];\n            }\n          }\n        }\n\n        // Modify the update and reset behavior based on the cardinality.\n        // If the cardinality is less than or equal to one, then the groupIndex\n        // is not needed. If the cardinality is zero, then there are no records\n        // and therefore no groups to update or reset. Note that we also must\n        // change the registered listener to point to the new method.\n        j = filterListeners.indexOf(update);\n        if (k > 1) {\n          update = updateMany;\n          reset = resetMany;\n        } else {\n          if (!k && groupAll) {\n            k = 1;\n            groups = [{key: null, value: initial()}];\n          }\n          if (k === 1) {\n            update = updateOne;\n            reset = resetOne;\n          } else {\n            update = crossfilter_null;\n            reset = crossfilter_null;\n          }\n          groupIndex = null;\n        }\n        filterListeners[j] = update;\n\n        // Count the number of added groups,\n        // and widen the group index as needed.\n        function groupIncrement() {\n          if(iterable){\n            k++\n            return\n          }\n          if (++k === groupCapacity) {\n            reIndex = xfilterArray.arrayWiden(reIndex, groupWidth <<= 1);\n            groupIndex = xfilterArray.arrayWiden(groupIndex, groupWidth);\n            groupCapacity = crossfilter_capacity(groupWidth);\n          }\n        }\n      }\n\n      function removeData() {\n        if (k > 1) {\n          var oldK = k,\n              oldGroups = groups,\n              seenGroups = crossfilter_index(oldK, oldK);\n\n          // Filter out non-matches by copying matching group index entries to\n          // the beginning of the array.\n          for (var i = 0, j = 0; i < n; ++i) {\n            if (!filters.zero(i)) {\n              seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n              ++j;\n            }\n          }\n\n          // Reassemble groups including only those groups that were referred\n          // to by matching group index entries.  Note the new group index in\n          // seenGroups.\n          groups = [], k = 0;\n          for (i = 0; i < oldK; ++i) {\n            if (seenGroups[i]) {\n              seenGroups[i] = k++;\n              groups.push(oldGroups[i]);\n            }\n          }\n\n          if (k > 1) {\n            // Reindex the group index using seenGroups to find the new index.\n            for (var index2 = 0; index2 < j; ++index2) groupIndex[index2] = seenGroups[groupIndex[index2]];\n          } else {\n            groupIndex = null;\n          }\n          filterListeners[filterListeners.indexOf(update)] = k > 1\n              ? (reset = resetMany, update = updateMany)\n              : k === 1 ? (reset = resetOne, update = updateOne)\n              : reset = update = crossfilter_null;\n        } else if (k === 1) {\n          if (groupAll) return;\n          for (var index3 = 0; index3 < n; ++index3) if (!filters.zero(index3)) return;\n          groups = [], k = 0;\n          filterListeners[filterListeners.indexOf(update)] =\n          update = reset = crossfilter_null;\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is greater than 1.\n      // notFilter indicates a crossfilter.add/remove operation.\n      function updateMany(filterOne, filterOffset, added, removed, notFilter) {\n\n        if ((filterOne === one && filterOffset === offset) || resetNeeded) return;\n\n        var i,\n            j,\n            k,\n            n,\n            g;\n\n        if(iterable){\n          // Add the added values.\n          for (i = 0, n = added.length; i < n; ++i) {\n            if (filters.zeroExcept(k = added[i], offset, zero)) {\n              for (j = 0; j < groupIndex[k].length; j++) {\n                g = groups[groupIndex[k][j]];\n                g.value = reduceAdd(g.value, data[k], false, j);\n              }\n            }\n          }\n\n          // Remove the removed values.\n          for (i = 0, n = removed.length; i < n; ++i) {\n            if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n              for (j = 0; j < groupIndex[k].length; j++) {\n                g = groups[groupIndex[k][j]];\n                g.value = reduceRemove(g.value, data[k], notFilter, j);\n              }\n            }\n          }\n          return;\n        }\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (filters.zeroExcept(k = added[i], offset, zero)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceAdd(g.value, data[k], false);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceRemove(g.value, data[k], notFilter);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is 1.\n      // notFilter indicates a crossfilter.add/remove operation.\n      function updateOne(filterOne, filterOffset, added, removed, notFilter) {\n        if ((filterOne === one && filterOffset === offset) || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g = groups[0];\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (filters.zeroExcept(k = added[i], offset, zero)) {\n            g.value = reduceAdd(g.value, data[k], false);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n            g.value = reduceRemove(g.value, data[k], notFilter);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is greater than 1.\n      function resetMany() {\n        var i,\n            j,\n            g;\n\n        // Reset all group values.\n        for (i = 0; i < k; ++i) {\n          groups[i].value = reduceInitial();\n        }\n\n        // We add all records and then remove filtered records so that reducers\n        // can build an 'unfiltered' view even if there are already filters in\n        // place on other dimensions.\n        if(iterable){\n          for (i = 0; i < n; ++i) {\n            for (j = 0; j < groupIndex[i].length; j++) {\n              g = groups[groupIndex[i][j]];\n              g.value = reduceAdd(g.value, data[i], true, j);\n            }\n          }\n          for (i = 0; i < n; ++i) {\n            if (!filters.zeroExcept(i, offset, zero)) {\n              for (j = 0; j < groupIndex[i].length; j++) {\n                g = groups[groupIndex[i][j]];\n                g.value = reduceRemove(g.value, data[i], false, j);\n              }\n            }\n          }\n          return;\n        }\n\n        for (i = 0; i < n; ++i) {\n          g = groups[groupIndex[i]];\n          g.value = reduceAdd(g.value, data[i], true);\n        }\n        for (i = 0; i < n; ++i) {\n          if (!filters.zeroExcept(i, offset, zero)) {\n            g = groups[groupIndex[i]];\n            g.value = reduceRemove(g.value, data[i], false);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is 1.\n      function resetOne() {\n        var i,\n            g = groups[0];\n\n        // Reset the singleton group values.\n        g.value = reduceInitial();\n\n        // We add all records and then remove filtered records so that reducers\n        // can build an 'unfiltered' view even if there are already filters in\n        // place on other dimensions.\n        for (i = 0; i < n; ++i) {\n          g.value = reduceAdd(g.value, data[i], true);\n        }\n\n        for (i = 0; i < n; ++i) {\n          if (!filters.zeroExcept(i, offset, zero)) {\n            g.value = reduceRemove(g.value, data[i], false);\n          }\n        }\n      }\n\n      // Returns the array of group values, in the dimension's natural order.\n      function all() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return groups;\n      }\n\n      // Returns a new array containing the top K group values, in reduce order.\n      function top(k) {\n        var top = select(all(), 0, groups.length, k);\n        return heap.sort(top, 0, top.length);\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce values, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Sets the reduce order, using the specified accessor.\n      function order(value) {\n        select = xfilterHeapselect.by(valueOf);\n        heap = xfilterHeap.by(valueOf);\n        function valueOf(d) { return value(d.value); }\n        return group;\n      }\n\n      // A convenience method for natural ordering by reduce value.\n      function orderNatural() {\n        return order(crossfilter_identity);\n      }\n\n      // Returns the cardinality of this group, irrespective of any filters.\n      function size() {\n        return k;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i, 1);\n        i = indexListeners.indexOf(add);\n        if (i >= 0) indexListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        return group;\n      }\n\n      return reduceCount().orderNatural();\n    }\n\n    // A convenience function for generating a singleton group.\n    function groupAll() {\n      var g = group(crossfilter_null), all = g.all;\n      delete g.all;\n      delete g.top;\n      delete g.order;\n      delete g.orderNatural;\n      delete g.size;\n      g.value = function() { return all()[0].value; };\n      return g;\n    }\n\n    // Removes this dimension and associated groups and event listeners.\n    function dispose() {\n      dimensionGroups.forEach(function(group) { group.dispose(); });\n      var i = dataListeners.indexOf(preAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = dataListeners.indexOf(postAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = removeDataListeners.indexOf(removeData);\n      if (i >= 0) removeDataListeners.splice(i, 1);\n      filters.masks[offset] &= zero;\n      return filterAll();\n    }\n\n    return dimension;\n  }\n\n  // A convenience method for groupAll on a dummy dimension.\n  // This implementation can be optimized since it always has cardinality 1.\n  function groupAll() {\n    var group = {\n      reduce: reduce,\n      reduceCount: reduceCount,\n      reduceSum: reduceSum,\n      value: value,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var reduceValue,\n        reduceAdd,\n        reduceRemove,\n        reduceInitial,\n        resetNeeded = true;\n\n    // The group listens to the crossfilter for when any dimension changes, so\n    // that it can update the reduce value. It must also listen to the parent\n    // dimension for when data is added.\n    filterListeners.push(update);\n    dataListeners.push(add);\n\n    // For consistency; actually a no-op since resetNeeded is true.\n    add(data, 0, n);\n\n    // Incorporates the specified new values into this group.\n    function add(newData, n0) {\n      var i;\n\n      if (resetNeeded) return;\n\n      // Cycle through all the values.\n      for (i = n0; i < n; ++i) {\n\n        // Add all values all the time.\n        reduceValue = reduceAdd(reduceValue, data[i], true);\n\n        // Remove the value if filtered.\n        if (!filters.zero(i)) {\n          reduceValue = reduceRemove(reduceValue, data[i], false);\n        }\n      }\n    }\n\n    // Reduces the specified selected or deselected records.\n    function update(filterOne, filterOffset, added, removed, notFilter) {\n      var i,\n          k,\n          n;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = 0, n = added.length; i < n; ++i) {\n        if (filters.zero(k = added[i])) {\n          reduceValue = reduceAdd(reduceValue, data[k], notFilter);\n        }\n      }\n\n      // Remove the removed values.\n      for (i = 0, n = removed.length; i < n; ++i) {\n        if (filters.only(k = removed[i], filterOffset, filterOne)) {\n          reduceValue = reduceRemove(reduceValue, data[k], notFilter);\n        }\n      }\n    }\n\n    // Recomputes the group reduce value from scratch.\n    function reset() {\n      var i;\n\n      reduceValue = reduceInitial();\n\n      // Cycle through all the values.\n      for (i = 0; i < n; ++i) {\n\n        // Add all values all the time.\n        reduceValue = reduceAdd(reduceValue, data[i], true);\n\n        // Remove the value if it is filtered.\n        if (!filters.zero(i)) {\n          reduceValue = reduceRemove(reduceValue, data[i], false);\n        }\n      }\n    }\n\n    // Sets the reduce behavior for this group to use the specified functions.\n    // This method lazily recomputes the reduce value, waiting until needed.\n    function reduce(add, remove, initial) {\n      reduceAdd = add;\n      reduceRemove = remove;\n      reduceInitial = initial;\n      resetNeeded = true;\n      return group;\n    }\n\n    // A convenience method for reducing by count.\n    function reduceCount() {\n      return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, crossfilter_zero);\n    }\n\n    // A convenience method for reducing by sum(value).\n    function reduceSum(value) {\n      return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), crossfilter_zero);\n    }\n\n    // Returns the computed reduce value.\n    function value() {\n      if (resetNeeded) reset(), resetNeeded = false;\n      return reduceValue;\n    }\n\n    // Removes this group and associated event listeners.\n    function dispose() {\n      var i = filterListeners.indexOf(update);\n      if (i >= 0) filterListeners.splice(i);\n      i = dataListeners.indexOf(add);\n      if (i >= 0) dataListeners.splice(i);\n      return group;\n    }\n\n    return reduceCount();\n  }\n\n  // Returns the number of records in this crossfilter, irrespective of any filters.\n  function size() {\n    return n;\n  }\n\n  // Returns the raw row data contained in this crossfilter\n  function all(){\n    return data;\n  }\n\n  // Returns row data with all dimension filters applied\n  function allFiltered() {\n    var array = [],\n        i = 0;\n\n      for (i = 0; i < n; i++) {\n        if (filters.zero(i)) {\n          array.push(data[i]);\n        }\n      }\n\n      return array;\n  }\n\n  function onChange(cb){\n    if(typeof cb !== 'function'){\n      /* eslint no-console: 0 */\n      console.warn('onChange callback parameter must be a function!');\n      return;\n    }\n    callbacks.push(cb);\n    return function(){\n      callbacks.splice(callbacks.indexOf(cb), 1);\n    };\n  }\n\n  function triggerOnChange(eventName){\n    for (var i = 0; i < callbacks.length; i++) {\n      callbacks[i](eventName);\n    }\n  }\n\n  return arguments.length\n      ? add(arguments[0])\n      : crossfilter;\n}\n\n// Returns an array of size n, big enough to store ids up to m.\nfunction crossfilter_index(n, m) {\n  return (m < 0x101\n      ? xfilterArray.array8 : m < 0x10001\n      ? xfilterArray.array16\n      : xfilterArray.array32)(n);\n}\n\n// Constructs a new array of size n, with sequential values from 0 to n - 1.\nfunction crossfilter_range(n) {\n  var range = crossfilter_index(n, n);\n  for (var i = -1; ++i < n;) range[i] = i;\n  return range;\n}\n\nfunction crossfilter_capacity(w) {\n  return w === 8\n      ? 0x100 : w === 16\n      ? 0x10000\n      : 0x100000000;\n}\n\n\n/***/ }),\n\n/***/ 278:\n/***/ (function(module, exports) {\n\nif (typeof Uint8Array !== \"undefined\") {\n  var crossfilter_array8 = function(n) { return new Uint8Array(n); };\n  var crossfilter_array16 = function(n) { return new Uint16Array(n); };\n  var crossfilter_array32 = function(n) { return new Uint32Array(n); };\n\n  var crossfilter_arrayLengthen = function(array, length) {\n    if (array.length >= length) return array;\n    var copy = new array.constructor(length);\n    copy.set(array);\n    return copy;\n  };\n\n  var crossfilter_arrayWiden = function(array, width) {\n    var copy;\n    switch (width) {\n      case 16: copy = crossfilter_array16(array.length); break;\n      case 32: copy = crossfilter_array32(array.length); break;\n      default: throw new Error(\"invalid array width!\");\n    }\n    copy.set(array);\n    return copy;\n  };\n}\n\nfunction crossfilter_arrayUntyped(n) {\n  var array = new Array(n), i = -1;\n  while (++i < n) array[i] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayLengthenUntyped(array, length) {\n  var n = array.length;\n  while (n < length) array[n++] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayWidenUntyped(array, width) {\n  if (width > 32) throw new Error(\"invalid array width!\");\n  return array;\n}\n\n// An arbitrarily-wide array of bitmasks\nfunction crossfilter_bitarray(n) {\n  this.length = n;\n  this.subarrays = 1;\n  this.width = 8;\n  this.masks = {\n    0: 0\n  }\n\n  this[0] = crossfilter_array8(n);\n}\n\ncrossfilter_bitarray.prototype.lengthen = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    this[i] = crossfilter_arrayLengthen(this[i], n);\n  }\n  this.length = n;\n};\n\n// Reserve a new bit index in the array, returns {offset, one}\ncrossfilter_bitarray.prototype.add = function() {\n  var m, w, one, i, len;\n\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    m = this.masks[i];\n    w = this.width - (32 * i);\n    one = ~m & -~m;\n\n    if (w >= 32 && !one) {\n      continue;\n    }\n\n    if (w < 32 && (one & (1 << w))) {\n      // widen this subarray\n      this[i] = crossfilter_arrayWiden(this[i], w <<= 1);\n      this.width = 32 * i + w;\n    }\n\n    this.masks[i] |= one;\n\n    return {\n      offset: i,\n      one: one\n    };\n  }\n\n  // add a new subarray\n  this[this.subarrays] = crossfilter_array8(this.length);\n  this.masks[this.subarrays] = 1;\n  this.width += 8;\n  return {\n    offset: this.subarrays++,\n    one: 1\n  };\n};\n\n// Copy record from index src to index dest\ncrossfilter_bitarray.prototype.copy = function(dest, src) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    this[i][dest] = this[i][src];\n  }\n};\n\n// Truncate the array to the given length\ncrossfilter_bitarray.prototype.truncate = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    for (var j = this.length - 1; j >= n; j--) {\n      this[i][j] = 0;\n    }\n    this[i].length = n;\n  }\n  this.length = n;\n};\n\n// Checks that all bits for the given index are 0\ncrossfilter_bitarray.prototype.zero = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that all bits for the given index are 0 except for possibly one\ncrossfilter_bitarray.prototype.zeroExcept = function(n, offset, zero) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (i === offset ? this[i][n] & zero : this[i][n]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that all bits for the given indez are 0 except for the specified mask.\n// The mask should be an array of the same size as the filter subarrays width.\ncrossfilter_bitarray.prototype.zeroExceptMask = function(n, mask) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n] & mask[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Checks that only the specified bit is set for the given index\ncrossfilter_bitarray.prototype.only = function(n, offset, one) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n] != (i === offset ? one : 0)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that only the specified bit is set for the given index except for possibly one other\ncrossfilter_bitarray.prototype.onlyExcept = function(n, offset, zero, onlyOffset, onlyOne) {\n  var mask;\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    mask = this[i][n];\n    if (i === offset)\n      mask &= zero;\n    if (mask != (i === onlyOffset ? onlyOne : 0)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  array8: crossfilter_arrayUntyped,\n  array16: crossfilter_arrayUntyped,\n  array32: crossfilter_arrayUntyped,\n  arrayLengthen: crossfilter_arrayLengthenUntyped,\n  arrayWiden: crossfilter_arrayWidenUntyped,\n  bitarray: crossfilter_bitarray\n};\n\n\n/***/ }),\n\n/***/ 279:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction crossfilter_filterExact(bisect, value) {\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n  };\n}\n\nfunction crossfilter_filterRange(bisect, range) {\n  var min = range[0],\n      max = range[1];\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n  };\n}\n\nfunction crossfilter_filterAll(values) {\n  return [0, values.length];\n}\n\nmodule.exports = {\n  filterExact: crossfilter_filterExact,\n  filterRange: crossfilter_filterRange,\n  filterAll: crossfilter_filterAll\n};\n\n\n/***/ }),\n\n/***/ 280:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction crossfilter_null() {\n  return null;\n}\n\nmodule.exports = crossfilter_null;\n\n\n/***/ }),\n\n/***/ 281:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction crossfilter_zero() {\n  return 0;\n}\n\nmodule.exports = crossfilter_zero;\n\n\n/***/ }),\n\n/***/ 282:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar crossfilter_identity = __webpack_require__(269);\nvar xFilterHeap = __webpack_require__(274);\n\nfunction heapselect_by(f) {\n  var heap = xFilterHeap.by(f);\n\n  // Returns a new array containing the top k elements in the array a[lo:hi].\n  // The returned array is not sorted, but maintains the heap property. If k is\n  // greater than hi - lo, then fewer than k elements will be returned. The\n  // order of elements in a is unchanged by this operation.\n  function heapselect(a, lo, hi, k) {\n    var queue = new Array(k = Math.min(hi - lo, k)),\n        min,\n        i,\n        d;\n\n    for (i = 0; i < k; ++i) queue[i] = a[lo++];\n    heap(queue, 0, k);\n\n    if (lo < hi) {\n      min = f(queue[0]);\n      do {\n        if (f(d = a[lo]) > min) {\n          queue[0] = d;\n          min = f(heap(queue, 0, k)[0]);\n        }\n      } while (++lo < hi);\n    }\n\n    return queue;\n  }\n\n  return heapselect;\n}\n\nmodule.exports = heapselect_by(crossfilter_identity);\nmodule.exports.by = heapselect_by; // assign the raw function to the export as well\n\n\n/***/ }),\n\n/***/ 283:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar crossfilter_identity = __webpack_require__(269);\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\n\nmodule.exports = bisect_by(crossfilter_identity);\nmodule.exports.by = bisect_by; // assign the raw function to the export as well\n\n\n/***/ }),\n\n/***/ 284:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction permute(array, index, deep) {\n  for (var i = 0, n = index.length, copy = deep ? JSON.parse(JSON.stringify(array)) : new Array(n); i < n; ++i) {\n    copy[i] = array[index[i]];\n  }\n  return copy;\n}\n\nmodule.exports = permute;\n\n\n/***/ }),\n\n/***/ 285:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar crossfilter_identity = __webpack_require__(269);\nvar xFilterInsertionsort = __webpack_require__(275);\n\n// Algorithm designed by Vladimir Yaroslavskiy.\n// Implementation based on the Dart project; see NOTICE and AUTHORS for details.\n\nfunction quicksort_by(f) {\n  var insertionsort = xFilterInsertionsort.by(f);\n\n  function sort(a, lo, hi) {\n    return (hi - lo < quicksort_sizeThreshold\n        ? insertionsort\n        : quicksort)(a, lo, hi);\n  }\n\n  function quicksort(a, lo, hi) {\n    // Compute the two pivots by looking at 5 elements.\n    var sixth = (hi - lo) / 6 | 0,\n        i1 = lo + sixth,\n        i5 = hi - 1 - sixth,\n        i3 = lo + hi - 1 >> 1,  // The midpoint.\n        i2 = i3 - sixth,\n        i4 = i3 + sixth;\n\n    var e1 = a[i1], x1 = f(e1),\n        e2 = a[i2], x2 = f(e2),\n        e3 = a[i3], x3 = f(e3),\n        e4 = a[i4], x4 = f(e4),\n        e5 = a[i5], x5 = f(e5);\n\n    var t;\n\n    // Sort the selected 5 elements using a sorting network.\n    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n    var pivot1 = e2, pivotValue1 = x2,\n        pivot2 = e4, pivotValue2 = x4;\n\n    // e2 and e4 have been saved in the pivot variables. They will be written\n    // back, once the partitioning is finished.\n    a[i1] = e1;\n    a[i2] = a[lo];\n    a[i3] = e3;\n    a[i4] = a[hi - 1];\n    a[i5] = e5;\n\n    var less = lo + 1,   // First element in the middle partition.\n        great = hi - 2;  // Last element in the middle partition.\n\n    // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n    // Object.prototype.valueOf; == and === do not, so in order to be consistent\n    // with natural order (such as for Date objects), we must do two compares.\n    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n    if (pivotsEqual) {\n\n      // Degenerated case where the partitioning becomes a dutch national flag\n      // problem.\n      //\n      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n      //  ^             ^          ^             ^            ^\n      // left         less         k           great         right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1) for x in ]left, less[ : x < pivot.\n      //   2) for x in [less, k[ : x == pivot.\n      //   3) for x in ]great, right[ : x > pivot.\n      for (var k = less; k <= great; ++k) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else if (xk > pivotValue1) {\n\n          // Find the first element <= pivot in the range [k - 1, great] and\n          // put [:ek:] there. We know that such an element must exist:\n          // When k == less, then el3 (which is equal to pivot) lies in the\n          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n          // Note that in the latter case invariant 2 will be violated for a\n          // short amount of time. The invariant will be restored when the\n          // pivots are put into their final positions.\n          /* eslint no-constant-condition: 0 */\n          while (true) {\n            var greatValue = f(a[great]);\n            if (greatValue > pivotValue1) {\n              great--;\n              // This is the only location in the while-loop where a new\n              // iteration is started.\n              continue;\n            } else if (greatValue < pivotValue1) {\n              // Triple exchange.\n              a[k] = a[less];\n              a[less++] = a[great];\n              a[great--] = ek;\n              break;\n            } else {\n              a[k] = a[great];\n              a[great--] = ek;\n              // Note: if great < k then we will exit the outer loop and fix\n              // invariant 2 (which we just violated).\n              break;\n            }\n          }\n        }\n      }\n    } else {\n\n      // We partition the list into three parts:\n      //  1. < pivot1\n      //  2. >= pivot1 && <= pivot2\n      //  3. > pivot2\n      //\n      // During the loop we have:\n      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n      //  ^            ^                        ^              ^             ^\n      // left         less                     k              great        right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1. for x in ]left, less[ : x < pivot1\n      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n      //   3. for x in ]great, right[ : x > pivot2\n      (function () { // isolate scope\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else {\n          if (xk > pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] <= pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] >= pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n      })(); // isolate scope\n    }\n\n    // Move pivots into their final positions.\n    // We shrunk the list from both sides (a[left] and a[right] have\n    // meaningless values in them) and now we move elements from the first\n    // and third partition into these locations so that we can store the\n    // pivots.\n    a[lo] = a[less - 1];\n    a[less - 1] = pivot1;\n    a[hi - 1] = a[great + 1];\n    a[great + 1] = pivot2;\n\n    // The list is now partitioned into three partitions:\n    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n    //  ^            ^                        ^             ^\n    // left         less                     great        right\n\n    // Recursive descent. (Don't include the pivot values.)\n    sort(a, lo, less - 1);\n    sort(a, great + 2, hi);\n\n    if (pivotsEqual) {\n      // All elements in the second partition are equal to the pivot. No\n      // need to sort them.\n      return a;\n    }\n\n    // In theory it should be enough to call _doSort recursively on the second\n    // partition.\n    // The Android source however removes the pivot elements from the recursive\n    // call if the second partition is too large (more than 2/3 of the list).\n    if (less < i1 && great > i5) {\n\n      (function () { // isolate scope\n      var lessValue, greatValue;\n      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\n      while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\n\n      // Copy paste of the previous 3-way partitioning with adaptions.\n      //\n      // We partition the list into three parts:\n      //  1. == pivot1\n      //  2. > pivot1 && < pivot2\n      //  3. == pivot2\n      //\n      // During the loop we have:\n      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n      //              ^                      ^              ^\n      //            less                     k              great\n      //\n      // Invariants:\n      //   1. for x in [ *, less[ : x == pivot1\n      //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n      //   3. for x in ]great, * ] : x == pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk <= pivotValue1 && xk >= pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          less++;\n        } else {\n          if (xk <= pivotValue2 && xk >= pivotValue2) {\n            /* eslint no-constant-condition: 0 */\n            while (true) {\n              greatValue = f(a[great]);\n              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] < pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] == pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n      })(); // isolate scope\n\n    }\n\n    // The second partition has now been cleared of pivot elements and looks\n    // as follows:\n    // [  *  |  > pivot1 && < pivot2  | * ]\n    //        ^                      ^\n    //       less                  great\n    // Sort the second partition using recursive descent.\n\n    // The second partition looks as follows:\n    // [  *  |  >= pivot1 && <= pivot2  | * ]\n    //        ^                        ^\n    //       less                    great\n    // Simply sort it by recursive descent.\n\n    return sort(a, less, great + 1);\n  }\n\n  return sort;\n}\n\nvar quicksort_sizeThreshold = 32;\n\nmodule.exports = quicksort_by(crossfilter_identity);\nmodule.exports.by = quicksort_by;\n\n\n/***/ }),\n\n/***/ 286:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction crossfilter_reduceIncrement(p) {\n  return p + 1;\n}\n\nfunction crossfilter_reduceDecrement(p) {\n  return p - 1;\n}\n\nfunction crossfilter_reduceAdd(f) {\n  return function(p, v) {\n    return p + +f(v);\n  };\n}\n\nfunction crossfilter_reduceSubtract(f) {\n  return function(p, v) {\n    return p - f(v);\n  };\n}\n\nmodule.exports = {\n  reduceIncrement: crossfilter_reduceIncrement,\n  reduceDecrement: crossfilter_reduceDecrement,\n  reduceAdd: crossfilter_reduceAdd,\n  reduceSubtract: crossfilter_reduceSubtract\n};\n\n\n/***/ }),\n\n/***/ 287:\n/***/ (function(module, exports) {\n\nmodule.exports = {\"_from\":\"crossfilter2\",\"_id\":\"crossfilter2@1.4.1\",\"_inBundle\":false,\"_integrity\":\"sha512-0ykBoUMRMMUUq5aBZk0Dn+pZgD+3a3KuUKRRCi5a/jxlnkwpu9B5FZM4BEaK5j9gUXF8BTDJXr/zIbM4Gi7Wig==\",\"_location\":\"/crossfilter2\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"crossfilter2\",\"name\":\"crossfilter2\",\"escapedName\":\"crossfilter2\",\"rawSpec\":\"\",\"saveSpec\":null,\"fetchSpec\":\"latest\"},\"_requiredBy\":[\"#USER\",\"/\"],\"_resolved\":\"https://registry.npmjs.org/crossfilter2/-/crossfilter2-1.4.1.tgz\",\"_shasum\":\"068100767d1ee46290ebce1b053e6968bee61344\",\"_spec\":\"crossfilter2\",\"_where\":\"D:\\\\projects\\\\personal-blog\",\"author\":{\"name\":\"Mike Bostock\",\"url\":\"http://bost.ocks.org/mike\"},\"bugs\":{\"url\":\"https://github.com/crossfilter/crossfilter/issues\"},\"bundleDependencies\":false,\"contributors\":[{\"name\":\"Jason Davies\",\"url\":\"http://www.jasondavies.com/\"}],\"dependencies\":{\"lodash.result\":\"^4.4.0\"},\"deprecated\":false,\"description\":\"Fast multidimensional filtering for coordinated views.\",\"devDependencies\":{\"browserify\":\"^13.0.0\",\"d3\":\"3.5\",\"eslint\":\"2.10.2\",\"package-json-versionify\":\"1.0.2\",\"semver\":\"^5.3.0\",\"uglify-js\":\"2.4.0\",\"vows\":\"0.7.0\"},\"eslintConfig\":{\"env\":{\"browser\":true,\"node\":true},\"globals\":{\"Uint8Array\":true,\"Uint16Array\":true,\"Uint32Array\":true},\"extends\":\"eslint:recommended\"},\"files\":[\"src\",\"index.js\",\"crossfilter.js\",\"crossfilter.min.js\"],\"homepage\":\"http://crossfilter.github.com/crossfilter/\",\"keywords\":[\"analytics\",\"visualization\",\"crossfilter\"],\"license\":\"Apache-2.0\",\"main\":\"./index.js\",\"maintainers\":[{\"name\":\"Gordon Woodhull\",\"url\":\"https://github.com/gordonwoodhull\"},{\"name\":\"Tanner Linsley\",\"url\":\"https://github.com/tannerlinsley\"},{\"name\":\"Ethan Jewett\",\"url\":\"https://github.com/esjewett\"}],\"name\":\"crossfilter2\",\"repository\":{\"type\":\"git\",\"url\":\"git+ssh://git@github.com/crossfilter/crossfilter.git\"},\"scripts\":{\"benchmark\":\"node test/benchmark.js\",\"build\":\"browserify index.js -t package-json-versionify --standalone crossfilter -o crossfilter.js && uglifyjs --compress --mangle --screw-ie8 crossfilter.js -o crossfilter.min.js\",\"clean\":\"rm -f crossfilter.js crossfilter.min.js\",\"test\":\"vows --verbose && eslint src/\"},\"version\":\"1.4.1\"}\n\n/***/ }),\n\n/***/ 288:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * This method is like `_.get` except that if the resolved value is a\n * function it's invoked with the `this` binding of its parent object and\n * its result is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to resolve.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n *\n * _.result(object, 'a[0].b.c1');\n * // => 3\n *\n * _.result(object, 'a[0].b.c2');\n * // => 4\n *\n * _.result(object, 'a[0].b.c3', 'default');\n * // => 'default'\n *\n * _.result(object, 'a[0].b.c3', _.constant('default'));\n * // => 'default'\n */\nfunction result(object, path, defaultValue) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = -1,\n      length = path.length;\n\n  // Ensure the loop is entered when path is empty.\n  if (!length) {\n    object = undefined;\n    length = 1;\n  }\n  while (++index < length) {\n    var value = object == null ? undefined : object[toKey(path[index])];\n    if (value === undefined) {\n      index = length;\n      value = defaultValue;\n    }\n    object = isFunction(value) ? value.call(object) : value;\n  }\n  return object;\n}\n\nmodule.exports = result;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(106)))\n\n/***/ }),\n\n/***/ 289:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(290);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = __webpack_require__(263)(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../css-loader/index.js??ref--1-oneOf-2-2!../postcss-loader/lib/index.js??postcss!./dc.css\", function() {\n\t\t\tvar newContent = require(\"!!../css-loader/index.js??ref--1-oneOf-2-2!../postcss-loader/lib/index.js??postcss!./dc.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n/***/ }),\n\n/***/ 290:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(262)(true);\n// imports\n\n\n// module\nexports.push([module.i, \".dc-chart path.dc-symbol,.dc-legend g.dc-legend-item.fadeout{fill-opacity:.5;stroke-opacity:.5}div.dc-chart{float:left}.dc-chart rect.bar{stroke:none;cursor:pointer}.dc-chart rect.bar:hover{fill-opacity:.5}.dc-chart rect.deselected{stroke:none;fill:#ccc}.dc-chart .pie-slice{fill:#fff;font-size:12px;cursor:pointer}.dc-chart .pie-slice.external{fill:#000}.dc-chart .pie-slice.highlight,.dc-chart .pie-slice :hover{fill-opacity:.8}.dc-chart .pie-path{fill:none;stroke-width:2px;stroke:#000;opacity:.4}.dc-chart .selected circle,.dc-chart .selected path{stroke-width:3;stroke:#ccc;fill-opacity:1}.dc-chart .deselected circle,.dc-chart .deselected path{stroke:none;fill-opacity:.5;fill:#ccc}.dc-chart .axis line,.dc-chart .axis path{fill:none;stroke:#000;shape-rendering:crispEdges}.dc-chart .axis text{font:10px sans-serif}.dc-chart .axis .grid-line,.dc-chart .axis .grid-line line,.dc-chart .grid-line,.dc-chart .grid-line line{fill:none;stroke:#ccc;opacity:.5;shape-rendering:crispEdges}.dc-chart .brush rect.background{z-index:-999}.dc-chart .brush rect.extent{fill:#4682b4;fill-opacity:.125}.dc-chart .brush .resize path{fill:#eee;stroke:#666}.dc-chart path.line{fill:none;stroke-width:1.5px}.dc-chart path.area{fill-opacity:.3;stroke:none}.dc-chart path.highlight{stroke-width:3;fill-opacity:1;stroke-opacity:1}.dc-chart g.state{cursor:pointer}.dc-chart g.state :hover{fill-opacity:.8}.dc-chart g.state path{stroke:#fff}.dc-chart g.deselected path{fill:gray}.dc-chart g.deselected text{display:none}.dc-chart g.row rect{fill-opacity:.8;cursor:pointer}.dc-chart g.row rect:hover{fill-opacity:.6}.dc-chart g.row text{fill:#fff;font-size:12px;cursor:pointer}.dc-chart g.dc-tooltip path{fill:none;stroke:gray;stroke-opacity:.8}.dc-chart g.county path{stroke:#fff;fill:none}.dc-chart g.debug rect{fill:#00f;fill-opacity:.2}.dc-chart g.axis text{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none}.dc-chart .node{font-size:.7em;cursor:pointer}.dc-chart .node :hover{fill-opacity:.8}.dc-chart .bubble{stroke:none;fill-opacity:.6}.dc-chart .highlight{fill-opacity:1;stroke-opacity:1}.dc-chart .fadeout{fill-opacity:.2;stroke-opacity:.2}.dc-chart .box text{font:10px sans-serif;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none}.dc-chart .box circle,.dc-chart .box line{fill:#fff}.dc-chart .box circle,.dc-chart .box line,.dc-chart .box rect{stroke:#000;stroke-width:1.5px}.dc-chart .box .center{stroke-dasharray:3,3}.dc-chart .box .outlier{fill:none;stroke:#ccc}.dc-chart .box.deselected{opacity:.5}.dc-chart .box.deselected .box{fill:#ccc}.dc-chart .symbol{stroke:none}.dc-chart .heatmap .box-group.deselected rect{stroke:none;fill-opacity:.5;fill:#ccc}.dc-chart .heatmap g.axis text{pointer-events:all;cursor:pointer}.dc-chart .empty-chart .pie-slice{cursor:default}.dc-chart .empty-chart .pie-slice path{fill:#fee;cursor:default}.dc-chart circle.dot{stroke:none}.dc-data-count{float:right;margin-top:15px;margin-right:15px}.dc-data-count .filter-count,.dc-data-count .total-count{color:#3182bd;font-weight:700}.dc-legend{font-size:11px}.dc-legend .dc-legend-item{cursor:pointer}.dc-hard .number-display{float:none}\", \"\", {\"version\":3,\"sources\":[\"D:/projects/personal-blog/node_modules/dc/dc.css\"],\"names\":[],\"mappings\":\"AAAA,6DACE,gBAAkB,AAClB,iBAAoB,CAAE,AAExB,aACE,UAAY,CAAE,AAEhB,mBACE,YAAa,AACb,cAAgB,CAAE,AAClB,yBACE,eAAiB,CAAE,AAEvB,0BACE,YAAa,AACb,SAAW,CAAE,AAEf,qBACE,UAAW,AACX,eAAgB,AAChB,cAAgB,CAAE,AAClB,8BACE,SAAW,CAAE,AACf,2DACE,eAAiB,CAAE,AAEvB,oBACE,UAAW,AACX,iBAAkB,AAClB,YAAa,AACb,UAAa,CAAE,AAEjB,oDACE,eAAgB,AAChB,YAAa,AACb,cAAgB,CAAE,AAEpB,wDACE,YAAa,AACb,gBAAiB,AACjB,SAAW,CAAE,AAEf,0CACE,UAAW,AACX,YAAa,AACb,0BAA4B,CAAE,AAEhC,qBACE,oBAAsB,CAAE,AAE1B,0GACE,UAAW,AACX,YAAa,AACb,WAAY,AACZ,0BAA4B,CAAE,AAEhC,iCACE,YAAc,CAAE,AAElB,6BACE,aAAc,AACd,iBAAmB,CAAE,AAEvB,8BACE,UAAW,AACX,WAAa,CAAE,AAEjB,oBACE,UAAW,AACX,kBAAoB,CAAE,AAExB,oBACE,gBAAiB,AACjB,WAAa,CAAE,AAEjB,yBACE,eAAgB,AAChB,eAAgB,AAChB,gBAAkB,CAAE,AAEtB,kBACE,cAAgB,CAAE,AAClB,yBACE,eAAiB,CAAE,AACrB,uBACE,WAAa,CAAE,AAEnB,4BACE,SAAc,CAAE,AAElB,4BACE,YAAc,CAAE,AAElB,qBACE,gBAAkB,AAClB,cAAgB,CAAE,AAClB,2BACE,eAAkB,CAAE,AAExB,qBACE,UAAW,AACX,eAAgB,AAChB,cAAgB,CAAE,AAEpB,4BACE,UAAW,AACX,YAAgB,AAChB,iBAAmB,CAAE,AAEvB,wBACE,YAAa,AACb,SAAW,CAAE,AAEf,uBACE,UAAW,AACX,eAAiB,CAAE,AAErB,sBACE,2BAA4B,AAC5B,yBAA0B,AAC1B,sBAAuB,AACvB,qBAAsB,AACtB,iBAAkB,AAClB,mBAAqB,CAAE,AAEzB,gBACE,eAAiB,AACjB,cAAgB,CAAE,AAClB,uBACE,eAAiB,CAAE,AAEvB,kBACE,YAAa,AACb,eAAkB,CAAE,AAEtB,qBACE,eAAgB,AAChB,gBAAkB,CAAE,AAEtB,mBACE,gBAAkB,AAClB,iBAAoB,CAAE,AAExB,oBACE,qBAAsB,AACtB,2BAA4B,AAC5B,yBAA0B,AAC1B,sBAAuB,AACvB,qBAAsB,AACtB,iBAAkB,AAClB,mBAAqB,CAAE,AAEzB,0CACE,SAAW,CAAE,AAEf,8DACE,YAAa,AACb,kBAAoB,CAAE,AAExB,uBACE,oBAAuB,CAAE,AAE3B,wBACE,UAAW,AACX,WAAa,CAAE,AAEjB,0BACE,UAAa,CAAE,AACf,+BACE,SAAW,CAAE,AAEjB,kBACE,WAAa,CAAE,AAEjB,8CACE,YAAa,AACb,gBAAkB,AAClB,SAAW,CAAE,AAEf,+BACE,mBAAoB,AACpB,cAAgB,CAAE,AAEpB,kCACE,cAAgB,CAAE,AAClB,uCACE,UAAW,AACX,cAAgB,CAAE,AAEtB,qBACE,WAAa,CAAE,AAEjB,eACE,YAAa,AACb,gBAAiB,AACjB,iBAAmB,CAAE,AACrB,yDACE,cAAe,AACf,eAAkB,CAAE,AAExB,WACE,cAAgB,CAAE,AAClB,2BACE,cAAgB,CAAE,AAEtB,yBACE,UAAY,CAAE\",\"file\":\"dc.css\",\"sourcesContent\":[\".dc-chart path.dc-symbol, .dc-legend g.dc-legend-item.fadeout {\\n  fill-opacity: 0.5;\\n  stroke-opacity: 0.5; }\\n\\ndiv.dc-chart {\\n  float: left; }\\n\\n.dc-chart rect.bar {\\n  stroke: none;\\n  cursor: pointer; }\\n  .dc-chart rect.bar:hover {\\n    fill-opacity: .5; }\\n\\n.dc-chart rect.deselected {\\n  stroke: none;\\n  fill: #ccc; }\\n\\n.dc-chart .pie-slice {\\n  fill: #fff;\\n  font-size: 12px;\\n  cursor: pointer; }\\n  .dc-chart .pie-slice.external {\\n    fill: #000; }\\n  .dc-chart .pie-slice :hover, .dc-chart .pie-slice.highlight {\\n    fill-opacity: .8; }\\n\\n.dc-chart .pie-path {\\n  fill: none;\\n  stroke-width: 2px;\\n  stroke: #000;\\n  opacity: 0.4; }\\n\\n.dc-chart .selected path, .dc-chart .selected circle {\\n  stroke-width: 3;\\n  stroke: #ccc;\\n  fill-opacity: 1; }\\n\\n.dc-chart .deselected path, .dc-chart .deselected circle {\\n  stroke: none;\\n  fill-opacity: .5;\\n  fill: #ccc; }\\n\\n.dc-chart .axis path, .dc-chart .axis line {\\n  fill: none;\\n  stroke: #000;\\n  shape-rendering: crispEdges; }\\n\\n.dc-chart .axis text {\\n  font: 10px sans-serif; }\\n\\n.dc-chart .grid-line, .dc-chart .axis .grid-line, .dc-chart .grid-line line, .dc-chart .axis .grid-line line {\\n  fill: none;\\n  stroke: #ccc;\\n  opacity: .5;\\n  shape-rendering: crispEdges; }\\n\\n.dc-chart .brush rect.background {\\n  z-index: -999; }\\n\\n.dc-chart .brush rect.extent {\\n  fill: #4682b4;\\n  fill-opacity: .125; }\\n\\n.dc-chart .brush .resize path {\\n  fill: #eee;\\n  stroke: #666; }\\n\\n.dc-chart path.line {\\n  fill: none;\\n  stroke-width: 1.5px; }\\n\\n.dc-chart path.area {\\n  fill-opacity: .3;\\n  stroke: none; }\\n\\n.dc-chart path.highlight {\\n  stroke-width: 3;\\n  fill-opacity: 1;\\n  stroke-opacity: 1; }\\n\\n.dc-chart g.state {\\n  cursor: pointer; }\\n  .dc-chart g.state :hover {\\n    fill-opacity: .8; }\\n  .dc-chart g.state path {\\n    stroke: #fff; }\\n\\n.dc-chart g.deselected path {\\n  fill: #808080; }\\n\\n.dc-chart g.deselected text {\\n  display: none; }\\n\\n.dc-chart g.row rect {\\n  fill-opacity: 0.8;\\n  cursor: pointer; }\\n  .dc-chart g.row rect:hover {\\n    fill-opacity: 0.6; }\\n\\n.dc-chart g.row text {\\n  fill: #fff;\\n  font-size: 12px;\\n  cursor: pointer; }\\n\\n.dc-chart g.dc-tooltip path {\\n  fill: none;\\n  stroke: #808080;\\n  stroke-opacity: .8; }\\n\\n.dc-chart g.county path {\\n  stroke: #fff;\\n  fill: none; }\\n\\n.dc-chart g.debug rect {\\n  fill: #00f;\\n  fill-opacity: .2; }\\n\\n.dc-chart g.axis text {\\n  -webkit-touch-callout: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n  pointer-events: none; }\\n\\n.dc-chart .node {\\n  font-size: 0.7em;\\n  cursor: pointer; }\\n  .dc-chart .node :hover {\\n    fill-opacity: .8; }\\n\\n.dc-chart .bubble {\\n  stroke: none;\\n  fill-opacity: 0.6; }\\n\\n.dc-chart .highlight {\\n  fill-opacity: 1;\\n  stroke-opacity: 1; }\\n\\n.dc-chart .fadeout {\\n  fill-opacity: 0.2;\\n  stroke-opacity: 0.2; }\\n\\n.dc-chart .box text {\\n  font: 10px sans-serif;\\n  -webkit-touch-callout: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n  pointer-events: none; }\\n\\n.dc-chart .box line, .dc-chart .box circle {\\n  fill: #fff; }\\n\\n.dc-chart .box rect, .dc-chart .box line, .dc-chart .box circle {\\n  stroke: #000;\\n  stroke-width: 1.5px; }\\n\\n.dc-chart .box .center {\\n  stroke-dasharray: 3, 3; }\\n\\n.dc-chart .box .outlier {\\n  fill: none;\\n  stroke: #ccc; }\\n\\n.dc-chart .box.deselected {\\n  opacity: 0.5; }\\n  .dc-chart .box.deselected .box {\\n    fill: #ccc; }\\n\\n.dc-chart .symbol {\\n  stroke: none; }\\n\\n.dc-chart .heatmap .box-group.deselected rect {\\n  stroke: none;\\n  fill-opacity: 0.5;\\n  fill: #ccc; }\\n\\n.dc-chart .heatmap g.axis text {\\n  pointer-events: all;\\n  cursor: pointer; }\\n\\n.dc-chart .empty-chart .pie-slice {\\n  cursor: default; }\\n  .dc-chart .empty-chart .pie-slice path {\\n    fill: #fee;\\n    cursor: default; }\\n\\n.dc-chart circle.dot {\\n  stroke: none; }\\n\\n.dc-data-count {\\n  float: right;\\n  margin-top: 15px;\\n  margin-right: 15px; }\\n  .dc-data-count .filter-count, .dc-data-count .total-count {\\n    color: #3182bd;\\n    font-weight: bold; }\\n\\n.dc-legend {\\n  font-size: 11px; }\\n  .dc-legend .dc-legend-item {\\n    cursor: pointer; }\\n\\n.dc-hard .number-display {\\n  float: none; }\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 291:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(292);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = __webpack_require__(263)(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js??ref--1-oneOf-2-2!../../node_modules/postcss-loader/lib/index.js??postcss!./chart.css\", function() {\n\t\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js??ref--1-oneOf-2-2!../../node_modules/postcss-loader/lib/index.js??postcss!./chart.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n/***/ }),\n\n/***/ 292:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(262)(true);\n// imports\n\n\n// module\nexports.push([module.i, \"div.dc-chart{float:none;background-color:#b5bdc5}.dc-chart .pie-slice,.dc-chart g.row text{fill:#000}button.reset.btn.btn-sm{font-size:.5em;padding:0 .5em;border-radius:1em;cursor:pointer}.dc-chart legend{position:relative;padding:0 1rem;border-bottom:1px solid #4e5d6c;color:#2b3e50}.dc-chart legend .reset{position:absolute;right:1rem;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%)}\", \"\", {\"version\":3,\"sources\":[\"D:/projects/personal-blog/src/components/chart.css\"],\"names\":[],\"mappings\":\"AAAA,aACE,WAAY,AACZ,wBAA0B,CAC3B,AAED,0CAEE,SAAY,CACb,AAED,wBACE,eAAiB,AACjB,eAAiB,AACjB,kBAAmB,AACnB,cAAgB,CACjB,AAED,iBACE,kBAAmB,AACnB,eAAgB,AAChB,gCAAiC,AACjC,aAAe,CAChB,AAED,wBACE,kBAAmB,AACnB,WAAY,AACZ,QAAS,AACT,mCAAoC,AAChC,+BAAgC,AAC5B,0BAA4B,CACrC\",\"file\":\"chart.css\",\"sourcesContent\":[\"div.dc-chart {\\r\\n  float: none;\\r\\n  background-color: #b5bdc5;\\r\\n}\\r\\n\\r\\n.dc-chart g.row text,\\r\\n.dc-chart .pie-slice {\\r\\n  fill: black;\\r\\n}\\r\\n\\r\\nbutton.reset.btn.btn-sm {\\r\\n  font-size: 0.5em;\\r\\n  padding: 0 0.5em;\\r\\n  border-radius: 1em;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.dc-chart legend {\\r\\n  position: relative;\\r\\n  padding: 0 1rem;\\r\\n  border-bottom: 1px solid #4e5d6c;\\r\\n  color: #2b3e50;\\r\\n}\\r\\n\\r\\n.dc-chart legend .reset {\\r\\n  position: absolute;\\r\\n  right: 1rem;\\r\\n  top: 50%;\\r\\n  -webkit-transform: translateY(-50%);\\r\\n      -ms-transform: translateY(-50%);\\r\\n          transform: translateY(-50%);\\r\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/0.7fa53421.chunk.js","import React, { PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport crossfilter from \"crossfilter2\";\r\nimport dc from \"dc\";\r\nimport Loading from \"react-loading-animation\";\r\n\r\nimport \"dc/dc.css\";\r\nimport \"./chart.css\";\r\n\r\nconst Vis = (data, Charts) => {\r\n  return class Visualisation extends PureComponent {\r\n    constructor() {\r\n      super();\r\n\r\n      this.state = { loading: true };\r\n      this.ndx = {};\r\n      this.resize = this.resize.bind(this);\r\n    }\r\n\r\n    static childContextTypes = {\r\n      ndx: PropTypes.object.isRequired\r\n    };\r\n\r\n    componentDidMount() {\r\n      console.time(\"ndx\");\r\n      this.ndx = crossfilter(data);\r\n      console.timeEnd(\"ndx\");\r\n      this.setState({ loading: false });\r\n      window.addEventListener(\"resize\", this.resize);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      window.removeEventListener(\"resize\", this.resize);\r\n    }\r\n\r\n    getChildContext() {\r\n      return { ndx: this.ndx };\r\n    }\r\n\r\n    resize() {\r\n      // TODO: maybe throttle this\r\n      dc.disableTransitions = true;\r\n      dc.renderAll();\r\n      dc.disableTransitions = false;\r\n    }\r\n\r\n    render() {\r\n      if (this.state.loading) {\r\n        return <Loading width=\"300px\" height=\"300px\" />;\r\n      } else {\r\n        return <Charts />;\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport default Vis;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Visualisation.jsx","'use strict';\n\nfunction crossfilter_identity(d) {\n  return d;\n}\n\nmodule.exports = crossfilter_identity;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/identity.js\n// module id = 269\n// module chunks = 0","/*!\n *  dc 2.1.8\n *  http://dc-js.github.io/dc.js/\n *  Copyright 2012-2016 Nick Zhu & the dc.js Developers\n *  https://github.com/dc-js/dc.js/blob/master/AUTHORS\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n(function() { function _dc(d3, crossfilter) {\n'use strict';\n\n/**\n * The entire dc.js library is scoped under the **dc** name space. It does not introduce\n * anything else into the global name space.\n *\n * Most `dc` functions are designed to allow function chaining, meaning they return the current chart\n * instance whenever it is appropriate.  The getter forms of functions do not participate in function\n * chaining because they return values that are not the chart, although some,\n * such as {@link dc.baseMixin#svg .svg} and {@link dc.coordinateGridMixin#xAxis .xAxis},\n * return values that are themselves chainable d3 objects.\n * @namespace dc\n * @version 2.1.8\n * @example\n * // Example chaining\n * chart.width(300)\n *      .height(300)\n *      .filter('sunday');\n */\n/*jshint -W079*/\nvar dc = {\n    version: '2.1.8',\n    constants: {\n        CHART_CLASS: 'dc-chart',\n        DEBUG_GROUP_CLASS: 'debug',\n        STACK_CLASS: 'stack',\n        DESELECTED_CLASS: 'deselected',\n        SELECTED_CLASS: 'selected',\n        NODE_INDEX_NAME: '__index__',\n        GROUP_INDEX_NAME: '__group_index__',\n        DEFAULT_CHART_GROUP: '__default_chart_group__',\n        EVENT_DELAY: 40,\n        NEGLIGIBLE_NUMBER: 1e-10\n    },\n    _renderlet: null\n};\n/*jshint +W079*/\n\n/**\n * The dc.chartRegistry object maintains sets of all instantiated dc.js charts under named groups\n * and the default group.\n *\n * A chart group often corresponds to a crossfilter instance. It specifies\n * the set of charts which should be updated when a filter changes on one of the charts or when the\n * global functions {@link dc.filterAll dc.filterAll}, {@link dc.refocusAll dc.refocusAll},\n * {@link dc.renderAll dc.renderAll}, {@link dc.redrawAll dc.redrawAll}, or chart functions\n * {@link dc.baseMixin#renderGroup baseMixin.renderGroup},\n * {@link dc.baseMixin#redrawGroup baseMixin.redrawGroup} are called.\n *\n * @namespace chartRegistry\n * @memberof dc\n * @type {{has, register, deregister, clear, list}}\n */\ndc.chartRegistry = (function () {\n    // chartGroup:string => charts:array\n    var _chartMap = {};\n\n    function initializeChartGroup (group) {\n        if (!group) {\n            group = dc.constants.DEFAULT_CHART_GROUP;\n        }\n\n        if (!_chartMap[group]) {\n            _chartMap[group] = [];\n        }\n\n        return group;\n    }\n\n    return {\n        /**\n         * Determine if a given chart instance resides in any group in the registry.\n         * @method has\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @returns {Boolean}\n         */\n        has: function (chart) {\n            for (var e in _chartMap) {\n                if (_chartMap[e].indexOf(chart) >= 0) {\n                    return true;\n                }\n            }\n            return false;\n        },\n\n        /**\n         * Add given chart instance to the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method register\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        register: function (chart, group) {\n            group = initializeChartGroup(group);\n            _chartMap[group].push(chart);\n        },\n\n        /**\n         * Remove given chart instance from the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method deregister\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        deregister: function (chart, group) {\n            group = initializeChartGroup(group);\n            for (var i = 0; i < _chartMap[group].length; i++) {\n                if (_chartMap[group][i].anchorName() === chart.anchorName()) {\n                    _chartMap[group].splice(i, 1);\n                    break;\n                }\n            }\n        },\n\n        /**\n         * Clear given group if one is provided, otherwise clears all groups.\n         * @method clear\n         * @memberof dc.chartRegistry\n         * @param {String} group Group name\n         */\n        clear: function (group) {\n            if (group) {\n                delete _chartMap[group];\n            } else {\n                _chartMap = {};\n            }\n        },\n\n        /**\n         * Get an array of each chart instance in the given group.\n         * If no group is provided, the charts in the default group are returned.\n         * @method list\n         * @memberof dc.chartRegistry\n         * @param {String} [group] Group name\n         * @returns {Array<Object>}\n         */\n        list: function (group) {\n            group = initializeChartGroup(group);\n            return _chartMap[group];\n        }\n    };\n})();\n\n/**\n * Add given chart instance to the given group, creating the group if necessary.\n * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n * @memberof dc\n * @method registerChart\n * @param {Object} chart dc.js chart instance\n * @param {String} [group] Group name\n */\ndc.registerChart = function (chart, group) {\n    dc.chartRegistry.register(chart, group);\n};\n\n/**\n * Remove given chart instance from the given group, creating the group if necessary.\n * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n * @memberof dc\n * @method deregisterChart\n * @param {Object} chart dc.js chart instance\n * @param {String} [group] Group name\n */\ndc.deregisterChart = function (chart, group) {\n    dc.chartRegistry.deregister(chart, group);\n};\n\n/**\n * Determine if a given chart instance resides in any group in the registry.\n * @memberof dc\n * @method hasChart\n * @param {Object} chart dc.js chart instance\n * @returns {Boolean}\n */\ndc.hasChart = function (chart) {\n    return dc.chartRegistry.has(chart);\n};\n\n/**\n * Clear given group if one is provided, otherwise clears all groups.\n * @memberof dc\n * @method deregisterAllCharts\n * @param {String} group Group name\n */\ndc.deregisterAllCharts = function (group) {\n    dc.chartRegistry.clear(group);\n};\n\n/**\n * Clear all filters on all charts within the given chart group. If the chart group is not given then\n * only charts that belong to the default chart group will be reset.\n * @memberof dc\n * @method filterAll\n * @param {String} [group]\n */\ndc.filterAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].filterAll();\n    }\n};\n\n/**\n * Reset zoom level / focus on all charts that belong to the given chart group. If the chart group is\n * not given then only charts that belong to the default chart group will be reset.\n * @memberof dc\n * @method refocusAll\n * @param {String} [group]\n */\ndc.refocusAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        if (charts[i].focus) {\n            charts[i].focus();\n        }\n    }\n};\n\n/**\n * Re-render all charts belong to the given chart group. If the chart group is not given then only\n * charts that belong to the default chart group will be re-rendered.\n * @memberof dc\n * @method renderAll\n * @param {String} [group]\n */\ndc.renderAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].render();\n    }\n\n    if (dc._renderlet !== null) {\n        dc._renderlet(group);\n    }\n};\n\n/**\n * Redraw all charts belong to the given chart group. If the chart group is not given then only charts\n * that belong to the default chart group will be re-drawn. Redraw is different from re-render since\n * when redrawing dc tries to update the graphic incrementally, using transitions, instead of starting\n * from scratch.\n * @memberof dc\n * @method redrawAll\n * @param {String} [group]\n */\ndc.redrawAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].redraw();\n    }\n\n    if (dc._renderlet !== null) {\n        dc._renderlet(group);\n    }\n};\n\n/**\n * If this boolean is set truthy, all transitions will be disabled, and changes to the charts will happen\n * immediately.\n * @memberof dc\n * @member disableTransitions\n * @type {Boolean}\n * @default false\n */\ndc.disableTransitions = false;\n\n/**\n * Start a transition on a selection if transitions are globally enabled\n * ({@link dc.disableTransitions} is false) and the duration is greater than zero; otherwise return\n * the selection. Since most operations are the same on a d3 selection and a d3 transition, this\n * allows a common code path for both cases.\n * @memberof dc\n * @method transition\n * @param {d3.selection} selection - the selection to be transitioned\n * @param {Number|Function} [duration=250] - the duration of the transition in milliseconds, a\n * function returning the duration, or 0 for no transition\n * @param {Number|Function} [delay] - the delay of the transition in milliseconds, or a function\n * returning the delay, or 0 for no delay\n * @param {String} [name] - the name of the transition (if concurrent transitions on the same\n * elements are needed)\n * @returns {d3.transition|d3.selection}\n */\ndc.transition = function (selection, duration, delay, name) {\n    if (dc.disableTransitions || duration <= 0) {\n        return selection;\n    }\n\n    var s = selection.transition(name);\n\n    if (duration >= 0 || duration !== undefined) {\n        s = s.duration(duration);\n    }\n    if (delay >= 0 || delay !== undefined) {\n        s = s.delay(delay);\n    }\n\n    return s;\n};\n\n/* somewhat silly, but to avoid duplicating logic */\ndc.optionalTransition = function (enable, duration, delay, name) {\n    if (enable) {\n        return function (selection) {\n            return dc.transition(selection, duration, delay, name);\n        };\n    } else {\n        return function (selection) {\n            return selection;\n        };\n    }\n};\n\n// See http://stackoverflow.com/a/20773846\ndc.afterTransition = function (transition, callback) {\n    if (transition.empty() || !transition.duration) {\n        callback.call(transition);\n    } else {\n        var n = 0;\n        transition\n            .each(function () { ++n; })\n            .each('end', function () {\n                if (!--n) {\n                    callback.call(transition);\n                }\n            });\n    }\n};\n\n/**\n * @namespace units\n * @memberof dc\n * @type {{}}\n */\ndc.units = {};\n\n/**\n * The default value for {@link dc.coordinateGridMixin#xUnits .xUnits} for the\n * {@link dc.coordinateGridMixin Coordinate Grid Chart} and should\n * be used when the x values are a sequence of integers.\n * It is a function that counts the number of integers in the range supplied in its start and end parameters.\n * @method integers\n * @memberof dc.units\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @example\n * chart.xUnits(dc.units.integers) // already the default\n * @param {Number} start\n * @param {Number} end\n * @returns {Number}\n */\ndc.units.integers = function (start, end) {\n    return Math.abs(end - start);\n};\n\n/**\n * This argument can be passed to the {@link dc.coordinateGridMixin#xUnits .xUnits} function of the to\n * specify ordinal units for the x axis. Usually this parameter is used in combination with passing\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal} to\n * {@link dc.coordinateGridMixin#x .x}.\n * It just returns the domain passed to it, which for ordinal charts is an array of all values.\n * @method ordinal\n * @memberof dc.units\n * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal}\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @see {@link dc.coordinateGridMixin#x coordinateGridMixin.x}\n * @example\n * chart.xUnits(dc.units.ordinal)\n *      .x(d3.scale.ordinal())\n * @param {*} start\n * @param {*} end\n * @param {Array<String>} domain\n * @returns {Array<String>}\n */\ndc.units.ordinal = function (start, end, domain) {\n    return domain;\n};\n\n/**\n * @namespace fp\n * @memberof dc.units\n * @type {{}}\n */\ndc.units.fp = {};\n/**\n * This function generates an argument for the {@link dc.coordinateGridMixin Coordinate Grid Chart}\n * {@link dc.coordinateGridMixin#xUnits .xUnits} function specifying that the x values are floating-point\n * numbers with the given precision.\n * The returned function determines how many values at the given precision will fit into the range\n * supplied in its start and end parameters.\n * @method precision\n * @memberof dc.units.fp\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @example\n * // specify values (and ticks) every 0.1 units\n * chart.xUnits(dc.units.fp.precision(0.1)\n * // there are 500 units between 0.5 and 1 if the precision is 0.001\n * var thousandths = dc.units.fp.precision(0.001);\n * thousandths(0.5, 1.0) // returns 500\n * @param {Number} precision\n * @returns {Function} start-end unit function\n */\ndc.units.fp.precision = function (precision) {\n    var _f = function (s, e) {\n        var d = Math.abs((e - s) / _f.resolution);\n        if (dc.utils.isNegligible(d - Math.floor(d))) {\n            return Math.floor(d);\n        } else {\n            return Math.ceil(d);\n        }\n    };\n    _f.resolution = precision;\n    return _f;\n};\n\ndc.round = {};\ndc.round.floor = function (n) {\n    return Math.floor(n);\n};\ndc.round.ceil = function (n) {\n    return Math.ceil(n);\n};\ndc.round.round = function (n) {\n    return Math.round(n);\n};\n\ndc.override = function (obj, functionName, newFunction) {\n    var existingFunction = obj[functionName];\n    obj['_' + functionName] = existingFunction;\n    obj[functionName] = newFunction;\n};\n\ndc.renderlet = function (_) {\n    if (!arguments.length) {\n        return dc._renderlet;\n    }\n    dc._renderlet = _;\n    return dc;\n};\n\ndc.instanceOfChart = function (o) {\n    return o instanceof Object && o.__dcFlag__ && true;\n};\n\ndc.errors = {};\n\ndc.errors.Exception = function (msg) {\n    var _msg = msg || 'Unexpected internal error';\n\n    this.message = _msg;\n\n    this.toString = function () {\n        return _msg;\n    };\n    this.stack = (new Error()).stack;\n};\ndc.errors.Exception.prototype = Object.create(Error.prototype);\ndc.errors.Exception.prototype.constructor = dc.errors.Exception;\n\ndc.errors.InvalidStateException = function () {\n    dc.errors.Exception.apply(this, arguments);\n};\n\ndc.errors.InvalidStateException.prototype = Object.create(dc.errors.Exception.prototype);\ndc.errors.InvalidStateException.prototype.constructor = dc.errors.InvalidStateException;\n\ndc.errors.BadArgumentException = function () {\n    dc.errors.Exception.apply(this, arguments);\n};\n\ndc.errors.BadArgumentException.prototype = Object.create(dc.errors.Exception.prototype);\ndc.errors.BadArgumentException.prototype.constructor = dc.errors.BadArgumentException;\n\n/**\n * The default date format for dc.js\n * @name dateFormat\n * @memberof dc\n * @type {Function}\n * @default d3.time.format('%m/%d/%Y')\n */\ndc.dateFormat = d3.time.format('%m/%d/%Y');\n\n/**\n * @namespace printers\n * @memberof dc\n * @type {{}}\n */\ndc.printers = {};\n\n/**\n * Converts a list of filters into a readable string.\n * @method filters\n * @memberof dc.printers\n * @param {Array<dc.filters>} filters\n * @returns {String}\n */\ndc.printers.filters = function (filters) {\n    var s = '';\n\n    for (var i = 0; i < filters.length; ++i) {\n        if (i > 0) {\n            s += ', ';\n        }\n        s += dc.printers.filter(filters[i]);\n    }\n\n    return s;\n};\n\n/**\n * Converts a filter into a readable string.\n * @method filter\n * @memberof dc.printers\n * @param {dc.filters|any|Array<any>} filter\n * @returns {String}\n */\ndc.printers.filter = function (filter) {\n    var s = '';\n\n    if (typeof filter !== 'undefined' && filter !== null) {\n        if (filter instanceof Array) {\n            if (filter.length >= 2) {\n                s = '[' + dc.utils.printSingleValue(filter[0]) + ' -> ' + dc.utils.printSingleValue(filter[1]) + ']';\n            } else if (filter.length >= 1) {\n                s = dc.utils.printSingleValue(filter[0]);\n            }\n        } else {\n            s = dc.utils.printSingleValue(filter);\n        }\n    }\n\n    return s;\n};\n\n/**\n * Returns a function that given a string property name, can be used to pluck the property off an object.  A function\n * can be passed as the second argument to also alter the data being returned.\n *\n * This can be a useful shorthand method to create accessor functions.\n * @method pluck\n * @memberof dc\n * @example\n * var xPluck = dc.pluck('x');\n * var objA = {x: 1};\n * xPluck(objA) // 1\n * @example\n * var xPosition = dc.pluck('x', function (x, i) {\n *     // `this` is the original datum,\n *     // `x` is the x property of the datum,\n *     // `i` is the position in the array\n *     return this.radius + x;\n * });\n * dc.selectAll('.circle').data(...).x(xPosition);\n * @param {String} n\n * @param {Function} [f]\n * @returns {Function}\n */\ndc.pluck = function (n, f) {\n    if (!f) {\n        return function (d) { return d[n]; };\n    }\n    return function (d, i) { return f.call(d, d[n], i); };\n};\n\n/**\n * @namespace utils\n * @memberof dc\n * @type {{}}\n */\ndc.utils = {};\n\n/**\n * Print a single value filter.\n * @method printSingleValue\n * @memberof dc.utils\n * @param {any} filter\n * @returns {String}\n */\ndc.utils.printSingleValue = function (filter) {\n    var s = '' + filter;\n\n    if (filter instanceof Date) {\n        s = dc.dateFormat(filter);\n    } else if (typeof(filter) === 'string') {\n        s = filter;\n    } else if (dc.utils.isFloat(filter)) {\n        s = dc.utils.printSingleValue.fformat(filter);\n    } else if (dc.utils.isInteger(filter)) {\n        s = Math.round(filter);\n    }\n\n    return s;\n};\ndc.utils.printSingleValue.fformat = d3.format('.2f');\n\n/**\n * Arbitrary add one value to another.\n * @method add\n * @memberof dc.utils\n * @todo\n * These assume than any string r is a percentage (whether or not it includes %).\n * They also generate strange results if l is a string.\n * @param {String|Date|Number} l the value to modify\n * @param {Number} r the amount by which to modify the value\n * @param {String} [t] if `l` is a `Date`, the\n * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n * the `d3.time` namespace\n * @returns {String|Date|Number}\n */\ndc.utils.add = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() + r);\n        }\n        t = t || 'day';\n        return d3.time[t].offset(l, r);\n    } else if (typeof r === 'string') {\n        var percentage = (+r / 100);\n        return l > 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l + r;\n    }\n};\n\n/**\n * Arbitrary subtract one value from another.\n * @method subtract\n * @memberof dc.utils\n * @todo\n * These assume than any string r is a percentage (whether or not it includes %).\n * They also generate strange results if l is a string.\n * @param {String|Date|Number} l the value to modify\n * @param {Number} r the amount by which to modify the value\n * @param {String} [t] if `l` is a `Date`, the\n * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n * the `d3.time` namespace\n * @returns {String|Date|Number}\n */\ndc.utils.subtract = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() - r);\n        }\n        t = t || 'day';\n        return d3.time[t].offset(l, -r);\n    } else if (typeof r === 'string') {\n        var percentage = (+r / 100);\n        return l < 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l - r;\n    }\n};\n\n/**\n * Is the value a number?\n * @method isNumber\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isNumber = function (n) {\n    return n === +n;\n};\n\n/**\n * Is the value a float?\n * @method isFloat\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isFloat = function (n) {\n    return n === +n && n !== (n | 0);\n};\n\n/**\n * Is the value an integer?\n * @method isInteger\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isInteger = function (n) {\n    return n === +n && n === (n | 0);\n};\n\n/**\n * Is the value very close to zero?\n * @method isNegligible\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isNegligible = function (n) {\n    return !dc.utils.isNumber(n) || (n < dc.constants.NEGLIGIBLE_NUMBER && n > -dc.constants.NEGLIGIBLE_NUMBER);\n};\n\n/**\n * Ensure the value is no greater or less than the min/max values.  If it is return the boundary value.\n * @method clamp\n * @memberof dc.utils\n * @param {any} val\n * @param {any} min\n * @param {any} max\n * @returns {any}\n */\ndc.utils.clamp = function (val, min, max) {\n    return val < min ? min : (val > max ? max : val);\n};\n\n/**\n * Using a simple static counter, provide a unique integer id.\n * @method uniqueId\n * @memberof dc.utils\n * @returns {Number}\n */\nvar _idCounter = 0;\ndc.utils.uniqueId = function () {\n    return ++_idCounter;\n};\n\n/**\n * Convert a name to an ID.\n * @method nameToId\n * @memberof dc.utils\n * @param {String} name\n * @returns {String}\n */\ndc.utils.nameToId = function (name) {\n    return name.toLowerCase().replace(/[\\s]/g, '_').replace(/[\\.']/g, '');\n};\n\n/**\n * Append or select an item on a parent element.\n * @method appendOrSelect\n * @memberof dc.utils\n * @param {d3.selection} parent\n * @param {String} selector\n * @param {String} tag\n * @returns {d3.selection}\n */\ndc.utils.appendOrSelect = function (parent, selector, tag) {\n    tag = tag || selector;\n    var element = parent.select(selector);\n    if (element.empty()) {\n        element = parent.append(tag);\n    }\n    return element;\n};\n\n/**\n * Return the number if the value is a number; else 0.\n * @method safeNumber\n * @memberof dc.utils\n * @param {Number|any} n\n * @returns {Number}\n */\ndc.utils.safeNumber = function (n) { return dc.utils.isNumber(+n) ? +n : 0;};\n\ndc.logger = {};\n\ndc.logger.enableDebugLog = false;\n\ndc.logger.warn = function (msg) {\n    if (console) {\n        if (console.warn) {\n            console.warn(msg);\n        } else if (console.log) {\n            console.log(msg);\n        }\n    }\n\n    return dc.logger;\n};\n\ndc.logger.debug = function (msg) {\n    if (dc.logger.enableDebugLog && console) {\n        if (console.debug) {\n            console.debug(msg);\n        } else if (console.log) {\n            console.log(msg);\n        }\n    }\n\n    return dc.logger;\n};\n\ndc.logger.deprecate = function (fn, msg) {\n    // Allow logging of deprecation\n    var warned = false;\n    function deprecated () {\n        if (!warned) {\n            dc.logger.warn(msg);\n            warned = true;\n        }\n        return fn.apply(this, arguments);\n    }\n    return deprecated;\n};\n\ndc.events = {\n    current: null\n};\n\n/**\n * This function triggers a throttled event function with a specified delay (in milli-seconds).  Events\n * that are triggered repetitively due to user interaction such brush dragging might flood the library\n * and invoke more renders than can be executed in time. Using this function to wrap your event\n * function allows the library to smooth out the rendering by throttling events and only responding to\n * the most recent event.\n * @name events.trigger\n * @memberof dc\n * @example\n * chart.on('renderlet', function(chart) {\n *     // smooth the rendering through event throttling\n *     dc.events.trigger(function(){\n *         // focus some other chart to the range selected by user on this chart\n *         someOtherChart.focus(chart.filter());\n *     });\n * })\n * @param {Function} closure\n * @param {Number} [delay]\n */\ndc.events.trigger = function (closure, delay) {\n    if (!delay) {\n        closure();\n        return;\n    }\n\n    dc.events.current = closure;\n\n    setTimeout(function () {\n        if (closure === dc.events.current) {\n            closure();\n        }\n    }, delay);\n};\n\n/**\n * The dc.js filters are functions which are passed into crossfilter to chose which records will be\n * accumulated to produce values for the charts.  In the crossfilter model, any filters applied on one\n * dimension will affect all the other dimensions but not that one.  dc always applies a filter\n * function to the dimension; the function combines multiple filters and if any of them accept a\n * record, it is filtered in.\n *\n * These filter constructors are used as appropriate by the various charts to implement brushing.  We\n * mention below which chart uses which filter.  In some cases, many instances of a filter will be added.\n *\n * Each of the dc.js filters is an object with the following properties:\n * * `isFiltered` - a function that returns true if a value is within the filter\n * * `filterType` - a string identifying the filter, here the name of the constructor\n *\n * Currently these filter objects are also arrays, but this is not a requirement. Custom filters\n * can be used as long as they have the properties above.\n * @namespace filters\n * @memberof dc\n * @type {{}}\n */\ndc.filters = {};\n\n/**\n * RangedFilter is a filter which accepts keys between `low` and `high`.  It is used to implement X\n * axis brushing for the {@link dc.coordinateGridMixin coordinate grid charts}.\n *\n * Its `filterType` is 'RangedFilter'\n * @name RangedFilter\n * @memberof dc.filters\n * @param {Number} low\n * @param {Number} high\n * @returns {Array<Number>}\n * @constructor\n */\ndc.filters.RangedFilter = function (low, high) {\n    var range = new Array(low, high);\n    range.isFiltered = function (value) {\n        return value >= this[0] && value < this[1];\n    };\n    range.filterType = 'RangedFilter';\n\n    return range;\n};\n\n/**\n * TwoDimensionalFilter is a filter which accepts a single two-dimensional value.  It is used by the\n * {@link dc.heatMap heat map chart} to include particular cells as they are clicked.  (Rows and columns are\n * filtered by filtering all the cells in the row or column.)\n *\n * Its `filterType` is 'TwoDimensionalFilter'\n * @name TwoDimensionalFilter\n * @memberof dc.filters\n * @param {Array<Number>} filter\n * @returns {Array<Number>}\n * @constructor\n */\ndc.filters.TwoDimensionalFilter = function (filter) {\n    if (filter === null) { return null; }\n\n    var f = filter;\n    f.isFiltered = function (value) {\n        return value.length && value.length === f.length &&\n               value[0] === f[0] && value[1] === f[1];\n    };\n    f.filterType = 'TwoDimensionalFilter';\n\n    return f;\n};\n\n/**\n * The RangedTwoDimensionalFilter allows filtering all values which fit within a rectangular\n * region. It is used by the {@link dc.scatterPlot scatter plot} to implement rectangular brushing.\n *\n * It takes two two-dimensional points in the form `[[x1,y1],[x2,y2]]`, and normalizes them so that\n * `x1 <= x2` and `y1 <= y2`. It then returns a filter which accepts any points which are in the\n * rectangular range including the lower values but excluding the higher values.\n *\n * If an array of two values are given to the RangedTwoDimensionalFilter, it interprets the values as\n * two x coordinates `x1` and `x2` and returns a filter which accepts any points for which `x1 <= x <\n * x2`.\n *\n * Its `filterType` is 'RangedTwoDimensionalFilter'\n * @name RangedTwoDimensionalFilter\n * @memberof dc.filters\n * @param {Array<Array<Number>>} filter\n * @returns {Array<Array<Number>>}\n * @constructor\n */\ndc.filters.RangedTwoDimensionalFilter = function (filter) {\n    if (filter === null) { return null; }\n\n    var f = filter;\n    var fromBottomLeft;\n\n    if (f[0] instanceof Array) {\n        fromBottomLeft = [\n            [Math.min(filter[0][0], filter[1][0]), Math.min(filter[0][1], filter[1][1])],\n            [Math.max(filter[0][0], filter[1][0]), Math.max(filter[0][1], filter[1][1])]\n        ];\n    } else {\n        fromBottomLeft = [[filter[0], -Infinity], [filter[1], Infinity]];\n    }\n\n    f.isFiltered = function (value) {\n        var x, y;\n\n        if (value instanceof Array) {\n            x = value[0];\n            y = value[1];\n        } else {\n            x = value;\n            y = fromBottomLeft[0][1];\n        }\n\n        return x >= fromBottomLeft[0][0] && x < fromBottomLeft[1][0] &&\n               y >= fromBottomLeft[0][1] && y < fromBottomLeft[1][1];\n    };\n    f.filterType = 'RangedTwoDimensionalFilter';\n\n    return f;\n};\n\n/**\n * `dc.baseMixin` is an abstract functional object representing a basic `dc` chart object\n * for all chart and widget implementations. Methods from the {@link #dc.baseMixin dc.baseMixin} are inherited\n * and available on all chart implementations in the `dc` library.\n * @name baseMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.baseMixin}\n */\ndc.baseMixin = function (_chart) {\n    _chart.__dcFlag__ = dc.utils.uniqueId();\n\n    var _dimension;\n    var _group;\n\n    var _anchor;\n    var _root;\n    var _svg;\n    var _isChild;\n\n    var _minWidth = 200;\n    var _defaultWidthCalc = function (element) {\n        var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n        return (width && width > _minWidth) ? width : _minWidth;\n    };\n    var _widthCalc = _defaultWidthCalc;\n\n    var _minHeight = 200;\n    var _defaultHeightCalc = function (element) {\n        var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n        return (height && height > _minHeight) ? height : _minHeight;\n    };\n    var _heightCalc = _defaultHeightCalc;\n    var _width, _height;\n    var _useViewBoxResizing = false;\n\n    var _keyAccessor = dc.pluck('key');\n    var _valueAccessor = dc.pluck('value');\n    var _label = dc.pluck('key');\n\n    var _ordering = dc.pluck('key');\n    var _orderSort;\n\n    var _renderLabel = false;\n\n    var _title = function (d) {\n        return _chart.keyAccessor()(d) + ': ' + _chart.valueAccessor()(d);\n    };\n    var _renderTitle = true;\n    var _controlsUseVisibility = false;\n\n    var _transitionDuration = 750;\n\n    var _transitionDelay = 0;\n\n    var _filterPrinter = dc.printers.filters;\n\n    var _mandatoryAttributes = ['dimension', 'group'];\n\n    var _chartGroup = dc.constants.DEFAULT_CHART_GROUP;\n\n    var _listeners = d3.dispatch(\n        'preRender',\n        'postRender',\n        'preRedraw',\n        'postRedraw',\n        'filtered',\n        'zoomed',\n        'renderlet',\n        'pretransition');\n\n    var _legend;\n    var _commitHandler;\n\n    var _filters = [];\n    var _filterHandler = function (dimension, filters) {\n        if (filters.length === 0) {\n            dimension.filter(null);\n        } else if (filters.length === 1 && !filters[0].isFiltered) {\n            // single value and not a function-based filter\n            dimension.filterExact(filters[0]);\n        } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n            // single range-based filter\n            dimension.filterRange(filters[0]);\n        } else {\n            dimension.filterFunction(function (d) {\n                for (var i = 0; i < filters.length; i++) {\n                    var filter = filters[i];\n                    if (filter.isFiltered && filter.isFiltered(d)) {\n                        return true;\n                    } else if (filter <= d && filter >= d) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n        }\n        return filters;\n    };\n\n    var _data = function (group) {\n        return group.all();\n    };\n\n    /**\n     * Set or get the height attribute of a chart. The height is applied to the SVGElement generated by\n     * the chart when rendered (or re-rendered). If a value is given, then it will be used to calculate\n     * the new height and the chart returned for method chaining.  The value can either be a numeric, a\n     * function, or falsy. If no value is specified then the value of the current height attribute will\n     * be returned.\n     *\n     * By default, without an explicit height being given, the chart will select the width of its\n     * anchor element. If that isn't possible it defaults to 200 (provided by the\n     * {@link dc.baseMixin#minHeight minHeight} property). Setting the value falsy will return\n     * the chart to the default behavior.\n     * @method height\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#minHeight minHeight}\n     * @example\n     * // Default height\n     * chart.height(function (element) {\n     *     var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n     *     return (height && height > chart.minHeight()) ? height : chart.minHeight();\n     * });\n     *\n     * chart.height(250); // Set the chart's height to 250px;\n     * chart.height(function(anchor) { return doSomethingWith(anchor); }); // set the chart's height with a function\n     * chart.height(null); // reset the height to the default auto calculation\n     * @param {Number|Function} [height]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.height = function (height) {\n        if (!arguments.length) {\n            if (!dc.utils.isNumber(_height)) {\n                // only calculate once\n                _height = _heightCalc(_root.node());\n            }\n            return _height;\n        }\n        _heightCalc = d3.functor(height || _defaultHeightCalc);\n        _height = undefined;\n        return _chart;\n    };\n\n    /**\n     * Set or get the width attribute of a chart.\n     * @method width\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#height height}\n     * @see {@link dc.baseMixin#minWidth minWidth}\n     * @example\n     * // Default width\n     * chart.width(function (element) {\n     *     var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n     *     return (width && width > chart.minWidth()) ? width : chart.minWidth();\n     * });\n     * @param {Number|Function} [width]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.width = function (width) {\n        if (!arguments.length) {\n            if (!dc.utils.isNumber(_width)) {\n                // only calculate once\n                _width = _widthCalc(_root.node());\n            }\n            return _width;\n        }\n        _widthCalc = d3.functor(width || _defaultWidthCalc);\n        _width = undefined;\n        return _chart;\n    };\n\n    /**\n     * Set or get the minimum width attribute of a chart. This only has effect when used with the default\n     * {@link dc.baseMixin#width width} function.\n     * @method minWidth\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#width width}\n     * @param {Number} [minWidth=200]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.minWidth = function (minWidth) {\n        if (!arguments.length) {\n            return _minWidth;\n        }\n        _minWidth = minWidth;\n        return _chart;\n    };\n\n    /**\n     * Set or get the minimum height attribute of a chart. This only has effect when used with the default\n     * {@link dc.baseMixin#height height} function.\n     * @method minHeight\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#height height}\n     * @param {Number} [minHeight=200]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.minHeight = function (minHeight) {\n        if (!arguments.length) {\n            return _minHeight;\n        }\n        _minHeight = minHeight;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off using the SVG\n     * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox `viewBox` attribute}.\n     * When enabled, `viewBox` will be set on the svg root element instead of `width` and `height`.\n     * Requires that the chart aspect ratio be defined using chart.width(w) and chart.height(h).\n     *\n     * This will maintain the aspect ratio while enabling the chart to resize responsively to the\n     * space given to the chart using CSS. For example, the chart can use `width: 100%; height:\n     * 100%` or absolute positioning to resize to its parent div.\n     *\n     * Since the text will be sized as if the chart is drawn according to the width and height, and\n     * will be resized if the chart is any other size, you need to set the chart width and height so\n     * that the text looks good. In practice, 600x400 seems to work pretty well for most charts.\n     *\n     * You can see examples of this resizing strategy in the [Chart Resizing\n     * Examples](http://dc-js.github.io/dc.js/resizing/); just add `?resize=viewbox` to any of the\n     * one-chart examples to enable `useViewBoxResizing`.\n     * @method useViewBoxResizing\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [useViewBoxResizing=false]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.useViewBoxResizing = function (useViewBoxResizing) {\n        if (!arguments.length) {\n            return _useViewBoxResizing;\n        }\n        _useViewBoxResizing = useViewBoxResizing;\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the dimension attribute of a chart. In `dc`, a dimension can be any valid\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter dimension}\n     *\n     * If a value is given, then it will be used as the new dimension. If no value is specified then\n     * the current dimension will be returned.\n     * @method dimension\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter.dimension}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(dc.pluck('key'));\n     * chart.dimension(dimension);\n     * @param {crossfilter.dimension} [dimension]\n     * @returns {crossfilter.dimension|dc.baseMixin}\n     */\n    _chart.dimension = function (dimension) {\n        if (!arguments.length) {\n            return _dimension;\n        }\n        _dimension = dimension;\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * Set the data callback or retrieve the chart's data set. The data callback is passed the chart's\n     * group and by default will return\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all}.\n     * This behavior may be modified to, for instance, return only the top 5 groups.\n     * @method data\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // Default data function\n     * chart.data(function (group) { return group.all(); });\n     *\n     * chart.data(function (group) { return group.top(5); });\n     * @param {Function} [callback]\n     * @returns {*|dc.baseMixin}\n     */\n    _chart.data = function (callback) {\n        if (!arguments.length) {\n            return _data.call(_chart, _group);\n        }\n        _data = d3.functor(callback);\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the group attribute of a chart. In `dc` a group is a\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter group}.\n     * Usually the group should be created from the particular dimension associated with the same chart. If a value is\n     * given, then it will be used as the new group.\n     *\n     * If no value specified then the current group will be returned.\n     * If `name` is specified then it will be used to generate legend label.\n     * @method group\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(dc.pluck('key'));\n     * chart.dimension(dimension);\n     * chart.group(dimension.group(crossfilter.reduceSum()));\n     * @param {crossfilter.group} [group]\n     * @param {String} [name]\n     * @returns {crossfilter.group|dc.baseMixin}\n     */\n    _chart.group = function (group, name) {\n        if (!arguments.length) {\n            return _group;\n        }\n        _group = group;\n        _chart._groupName = name;\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * Get or set an accessor to order ordinal dimensions.  The chart uses\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n     * to sort elements; this accessor returns the value to order on.\n     * @method ordering\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n     * @example\n     * // Default ordering accessor\n     * _chart.ordering(dc.pluck('key'));\n     * @param {Function} [orderFunction]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.ordering = function (orderFunction) {\n        if (!arguments.length) {\n            return _ordering;\n        }\n        _ordering = orderFunction;\n        _orderSort = crossfilter.quicksort.by(_ordering);\n        _chart.expireCache();\n        return _chart;\n    };\n\n    _chart._computeOrderedGroups = function (data) {\n        var dataCopy = data.slice(0);\n\n        if (dataCopy.length <= 1) {\n            return dataCopy;\n        }\n\n        if (!_orderSort) {\n            _orderSort = crossfilter.quicksort.by(_ordering);\n        }\n\n        return _orderSort(dataCopy, 0, dataCopy.length);\n    };\n\n    /**\n     * Clear all filters associated with this chart. The same effect can be achieved by calling\n     * {@link dc.baseMixin#filter chart.filter(null)}.\n     * @method filterAll\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.filterAll = function () {\n        return _chart.filter(null);\n    };\n\n    /**\n     * Execute d3 single selection in the chart's scope using the given selector and return the d3\n     * selection.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @method select\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_select d3.select}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').select(selector)\n     * chart.select(selector)\n     * @returns {d3.selection}\n     */\n    _chart.select = function (s) {\n        return _root.select(s);\n    };\n\n    /**\n     * Execute in scope d3 selectAll using the given selector and return d3 selection result.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @method selectAll\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_selectAll d3.selectAll}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').selectAll(selector)\n     * chart.selectAll(selector)\n     * @returns {d3.selection}\n     */\n    _chart.selectAll = function (s) {\n        return _root ? _root.selectAll(s) : null;\n    };\n\n    /**\n     * Set the root SVGElement to either be an existing chart's root; or any valid [d3 single\n     * selector](https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements) specifying a dom\n     * block element such as a div; or a dom element or d3 selection. Optionally registers the chart\n     * within the chartGroup. This class is called internally on chart initialization, but be called\n     * again to relocate the chart. However, it will orphan any previously created SVGElements.\n     * @method anchor\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {anchorChart|anchorSelector|anchorNode} [parent]\n     * @param {String} [chartGroup]\n     * @returns {String|node|d3.selection|dc.baseMixin}\n     */\n    _chart.anchor = function (parent, chartGroup) {\n        if (!arguments.length) {\n            return _anchor;\n        }\n        if (dc.instanceOfChart(parent)) {\n            _anchor = parent.anchor();\n            _root = parent.root();\n            _isChild = true;\n        } else if (parent) {\n            if (parent.select && parent.classed) { // detect d3 selection\n                _anchor = parent.node();\n            } else {\n                _anchor = parent;\n            }\n            _root = d3.select(_anchor);\n            _root.classed(dc.constants.CHART_CLASS, true);\n            dc.registerChart(_chart, chartGroup);\n            _isChild = false;\n        } else {\n            throw new dc.errors.BadArgumentException('parent must be defined');\n        }\n        _chartGroup = chartGroup;\n        return _chart;\n    };\n\n    /**\n     * Returns the DOM id for the chart's anchored location.\n     * @method anchorName\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {String}\n     */\n    _chart.anchorName = function () {\n        var a = _chart.anchor();\n        if (a && a.id) {\n            return a.id;\n        }\n        if (a && a.replace) {\n            return a.replace('#', '');\n        }\n        return 'dc-chart' + _chart.chartID();\n    };\n\n    /**\n     * Returns the root element where a chart resides. Usually it will be the parent div element where\n     * the SVGElement was created. You can also pass in a new root element however this is usually handled by\n     * dc internally. Resetting the root element on a chart outside of dc internals may have\n     * unexpected consequences.\n     * @method root\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement HTMLElement}\n     * @param {HTMLElement} [rootElement]\n     * @returns {HTMLElement|dc.baseMixin}\n     */\n    _chart.root = function (rootElement) {\n        if (!arguments.length) {\n            return _root;\n        }\n        _root = rootElement;\n        return _chart;\n    };\n\n    /**\n     * Returns the top SVGElement for this specific chart. You can also pass in a new SVGElement,\n     * however this is usually handled by dc internally. Resetting the SVGElement on a chart outside\n     * of dc internals may have unexpected consequences.\n     * @method svg\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @param {SVGElement|d3.selection} [svgElement]\n     * @returns {SVGElement|d3.selection|dc.baseMixin}\n     */\n    _chart.svg = function (svgElement) {\n        if (!arguments.length) {\n            return _svg;\n        }\n        _svg = svgElement;\n        return _chart;\n    };\n\n    /**\n     * Remove the chart's SVGElements from the dom and recreate the container SVGElement.\n     * @method resetSvg\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @returns {SVGElement}\n     */\n    _chart.resetSvg = function () {\n        _chart.select('svg').remove();\n        return generateSvg();\n    };\n\n    function sizeSvg () {\n        if (_svg) {\n            if (!_useViewBoxResizing) {\n                _svg\n                    .attr('width', _chart.width())\n                    .attr('height', _chart.height());\n            } else if (!_svg.attr('viewBox')) {\n                _svg\n                    .attr('viewBox', '0 0 ' + _chart.width() + ' ' + _chart.height());\n            }\n        }\n    }\n\n    function generateSvg () {\n        _svg = _chart.root().append('svg');\n        sizeSvg();\n        return _svg;\n    }\n\n    /**\n     * Set or get the filter printer function. The filter printer function is used to generate human\n     * friendly text for filter value(s) associated with the chart instance. The text will get shown\n     * in the `.filter element; see {@link dc.baseMixin#turnOnControls turnOnControls}.\n     *\n     * By default dc charts use a default filter printer {@link dc.printers.filters dc.printers.filters}\n     * that provides simple printing support for both single value and ranged filters.\n     * @method filterPrinter\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // for a chart with an ordinal brush, print the filters in upper case\n     * chart.filterPrinter(function(filters) {\n     *   return filters.map(function(f) { return f.toUpperCase(); }).join(', ');\n     * });\n     * // for a chart with a range brush, print the filter as start and extent\n     * chart.filterPrinter(function(filters) {\n     *   return 'start ' + dc.utils.printSingleValue(filters[0][0]) +\n     *     ' extent ' + dc.utils.printSingleValue(filters[0][1] - filters[0][0]);\n     * });\n     * @param {Function} [filterPrinterFunction=dc.printers.filters]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.filterPrinter = function (filterPrinterFunction) {\n        if (!arguments.length) {\n            return _filterPrinter;\n        }\n        _filterPrinter = filterPrinterFunction;\n        return _chart;\n    };\n\n    /**\n     * If set, use the `visibility` attribute instead of the `display` attribute for showing/hiding\n     * chart reset and filter controls, for less disruption to the layout.\n     * @method controlsUseVisibility\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [controlsUseVisibility=false]\n     * @returns {Boolean|dc.baseMixin}\n     **/\n    _chart.controlsUseVisibility = function (useVisibility) {\n        if (!arguments.length) {\n            return _controlsUseVisibility;\n        }\n        _controlsUseVisibility = useVisibility;\n        return _chart;\n    };\n\n    /**\n     * Turn on optional control elements within the root element. dc currently supports the\n     * following html control elements.\n     * * root.selectAll('.reset') - elements are turned on if the chart has an active filter. This type\n     * of control element is usually used to store a reset link to allow user to reset filter on a\n     * certain chart. This element will be turned off automatically if the filter is cleared.\n     * * root.selectAll('.filter') elements are turned on if the chart has an active filter. The text\n     * content of this element is then replaced with the current filter value using the filter printer\n     * function. This type of element will be turned off automatically if the filter is cleared.\n     * @method turnOnControls\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.turnOnControls = function () {\n        if (_root) {\n            var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n            _chart.selectAll('.reset').style(attribute, null);\n            _chart.selectAll('.filter').text(_filterPrinter(_chart.filters())).style(attribute, null);\n        }\n        return _chart;\n    };\n\n    /**\n     * Turn off optional control elements within the root element.\n     * @method turnOffControls\n     * @memberof dc.baseMixin\n     * @see {@link dc.baseMixin#turnOnControls turnOnControls}\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.turnOffControls = function () {\n        if (_root) {\n            var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n            var value = _chart.controlsUseVisibility() ? 'hidden' : 'none';\n            _chart.selectAll('.reset').style(attribute, value);\n            _chart.selectAll('.filter').style(attribute, value).text(_chart.filter());\n        }\n        return _chart;\n    };\n\n    /**\n     * Set or get the animation transition duration (in milliseconds) for this chart instance.\n     * @method transitionDuration\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Number} [duration=750]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.transitionDuration = function (duration) {\n        if (!arguments.length) {\n            return _transitionDuration;\n        }\n        _transitionDuration = duration;\n        return _chart;\n    };\n\n    /**\n     * Set or get the animation transition delay (in milliseconds) for this chart instance.\n     * @method transitionDelay\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Number} [delay=0]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.transitionDelay = function (delay) {\n        if (!arguments.length) {\n            return _transitionDelay;\n        }\n        _transitionDelay = delay;\n        return _chart;\n    };\n\n    _chart._mandatoryAttributes = function (_) {\n        if (!arguments.length) {\n            return _mandatoryAttributes;\n        }\n        _mandatoryAttributes = _;\n        return _chart;\n    };\n\n    function checkForMandatoryAttributes (a) {\n        if (!_chart[a] || !_chart[a]()) {\n            throw new dc.errors.InvalidStateException('Mandatory attribute chart.' + a +\n                ' is missing on chart[#' + _chart.anchorName() + ']');\n        }\n    }\n\n    /**\n     * Invoking this method will force the chart to re-render everything from scratch. Generally it\n     * should only be used to render the chart for the first time on the page or if you want to make\n     * sure everything is redrawn from scratch instead of relying on the default incremental redrawing\n     * behaviour.\n     * @method render\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.render = function () {\n        _height = _width = undefined; // force recalculate\n        _listeners.preRender(_chart);\n\n        if (_mandatoryAttributes) {\n            _mandatoryAttributes.forEach(checkForMandatoryAttributes);\n        }\n\n        var result = _chart._doRender();\n\n        if (_legend) {\n            _legend.render();\n        }\n\n        _chart._activateRenderlets('postRender');\n\n        return result;\n    };\n\n    _chart._activateRenderlets = function (event) {\n        _listeners.pretransition(_chart);\n        if (_chart.transitionDuration() > 0 && _svg) {\n            _svg.transition().duration(_chart.transitionDuration()).delay(_chart.transitionDelay())\n                .each('end', function () {\n                    _listeners.renderlet(_chart);\n                    if (event) {\n                        _listeners[event](_chart);\n                    }\n                });\n        } else {\n            _listeners.renderlet(_chart);\n            if (event) {\n                _listeners[event](_chart);\n            }\n        }\n    };\n\n    /**\n     * Calling redraw will cause the chart to re-render data changes incrementally. If there is no\n     * change in the underlying data dimension then calling this method will have no effect on the\n     * chart. Most chart interaction in dc will automatically trigger this method through internal\n     * events (in particular {@link dc.redrawAll dc.redrawAll}); therefore, you only need to\n     * manually invoke this function if data is manipulated outside of dc's control (for example if\n     * data is loaded in the background using\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}).\n     * @method redraw\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.redraw = function () {\n        sizeSvg();\n        _listeners.preRedraw(_chart);\n\n        var result = _chart._doRedraw();\n\n        if (_legend) {\n            _legend.render();\n        }\n\n        _chart._activateRenderlets('postRedraw');\n\n        return result;\n    };\n\n    /**\n     * Gets/sets the commit handler. If the chart has a commit handler, the handler will be called when\n     * the chart's filters have changed, in order to send the filter data asynchronously to a server.\n     *\n     * Unlike other functions in dc.js, the commit handler is asynchronous. It takes two arguments:\n     * a flag indicating whether this is a render (true) or a redraw (false), and a callback to be\n     * triggered once the commit is filtered. The callback has the standard node.js continuation signature\n     * with error first and result second.\n     * @method commitHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.commitHandler = function (commitHandler) {\n        if (!arguments.length) {\n            return _commitHandler;\n        }\n        _commitHandler = commitHandler;\n        return _chart;\n    };\n\n    /**\n     * Redraws all charts in the same group as this chart, typically in reaction to a filter\n     * change. If the chart has a {@link dc.baseMixin.commitFilter commitHandler}, it will\n     * be executed and waited for.\n     * @method redrawGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.redrawGroup = function () {\n        if (_commitHandler) {\n            _commitHandler(false, function (error, result) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    dc.redrawAll(_chart.chartGroup());\n                }\n            });\n        } else {\n            dc.redrawAll(_chart.chartGroup());\n        }\n        return _chart;\n    };\n\n    /**\n     * Renders all charts in the same group as this chart. If the chart has a\n     * {@link dc.baseMixin.commitFilter commitHandler}, it will be executed and waited for\n     * @method renderGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.renderGroup = function () {\n        if (_commitHandler) {\n            _commitHandler(false, function (error, result) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    dc.renderAll(_chart.chartGroup());\n                }\n            });\n        } else {\n            dc.renderAll(_chart.chartGroup());\n        }\n        return _chart;\n    };\n\n    _chart._invokeFilteredListener = function (f) {\n        if (f !== undefined) {\n            _listeners.filtered(_chart, f);\n        }\n    };\n\n    _chart._invokeZoomedListener = function () {\n        _listeners.zoomed(_chart);\n    };\n\n    var _hasFilterHandler = function (filters, filter) {\n        if (filter === null || typeof(filter) === 'undefined') {\n            return filters.length > 0;\n        }\n        return filters.some(function (f) {\n            return filter <= f && filter >= f;\n        });\n    };\n\n    /**\n     * Set or get the has-filter handler. The has-filter handler is a function that checks to see if\n     * the chart's current filters (first argument) include a specific filter (second argument).  Using a custom has-filter handler allows\n     * you to change the way filters are checked for and replaced.\n     * @method hasFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default has-filter handler\n     * chart.hasFilterHandler(function (filters, filter) {\n     *     if (filter === null || typeof(filter) === 'undefined') {\n     *         return filters.length > 0;\n     *     }\n     *     return filters.some(function (f) {\n     *         return filter <= f && filter >= f;\n     *     });\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.hasFilterHandler(function(filters, filter) {\n     *     return false;\n     * });\n     * @param {Function} [hasFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.hasFilterHandler = function (hasFilterHandler) {\n        if (!arguments.length) {\n            return _hasFilterHandler;\n        }\n        _hasFilterHandler = hasFilterHandler;\n        return _chart;\n    };\n\n    /**\n     * Check whether any active filter or a specific filter is associated with particular chart instance.\n     * This function is **not chainable**.\n     * @method hasFilter\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#hasFilterHandler hasFilterHandler}\n     * @param {*} [filter]\n     * @returns {Boolean}\n     */\n    _chart.hasFilter = function (filter) {\n        return _hasFilterHandler(_filters, filter);\n    };\n\n    var _removeFilterHandler = function (filters, filter) {\n        for (var i = 0; i < filters.length; i++) {\n            if (filters[i] <= filter && filters[i] >= filter) {\n                filters.splice(i, 1);\n                break;\n            }\n        }\n        return filters;\n    };\n\n    /**\n     * Set or get the remove filter handler. The remove filter handler is a function that removes a\n     * filter from the chart's current filters. Using a custom remove filter handler allows you to\n     * change how filters are removed or perform additional work when removing a filter, e.g. when\n     * using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method removeFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default remove filter handler\n     * chart.removeFilterHandler(function (filters, filter) {\n     *     for (var i = 0; i < filters.length; i++) {\n     *         if (filters[i] <= filter && filters[i] >= filter) {\n     *             filters.splice(i, 1);\n     *             break;\n     *         }\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.removeFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [removeFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.removeFilterHandler = function (removeFilterHandler) {\n        if (!arguments.length) {\n            return _removeFilterHandler;\n        }\n        _removeFilterHandler = removeFilterHandler;\n        return _chart;\n    };\n\n    var _addFilterHandler = function (filters, filter) {\n        filters.push(filter);\n        return filters;\n    };\n\n    /**\n     * Set or get the add filter handler. The add filter handler is a function that adds a filter to\n     * the chart's filter list. Using a custom add filter handler allows you to change the way filters\n     * are added or perform additional work when adding a filter, e.g. when using a filter server other\n     * than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method addFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default add filter handler\n     * chart.addFilterHandler(function (filters, filter) {\n     *     filters.push(filter);\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.addFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [addFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.addFilterHandler = function (addFilterHandler) {\n        if (!arguments.length) {\n            return _addFilterHandler;\n        }\n        _addFilterHandler = addFilterHandler;\n        return _chart;\n    };\n\n    var _resetFilterHandler = function (filters) {\n        return [];\n    };\n\n    /**\n     * Set or get the reset filter handler. The reset filter handler is a function that resets the\n     * chart's filter list by returning a new list. Using a custom reset filter handler allows you to\n     * change the way filters are reset, or perform additional work when resetting the filters,\n     * e.g. when using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method resetFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default remove filter handler\n     * function (filters) {\n     *     return [];\n     * }\n     *\n     * // custom filter handler (no-op)\n     * chart.resetFilterHandler(function(filters) {\n     *     return filters;\n     * });\n     * @param {Function} [resetFilterHandler]\n     * @returns {dc.baseMixin}\n     */\n    _chart.resetFilterHandler = function (resetFilterHandler) {\n        if (!arguments.length) {\n            return _resetFilterHandler;\n        }\n        _resetFilterHandler = resetFilterHandler;\n        return _chart;\n    };\n\n    function applyFilters (filters) {\n        if (_chart.dimension() && _chart.dimension().filter) {\n            var fs = _filterHandler(_chart.dimension(), filters);\n            if (fs) {\n                filters = fs;\n            }\n        }\n        return filters;\n    }\n\n    /**\n     * Replace the chart filter. This is equivalent to calling `chart.filter(null).filter(filter)`\n     * but more efficient because the filter is only applied once.\n     *\n     * @method replaceFilter\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {*} [filter]\n     * @returns {dc.baseMixin}\n     **/\n    _chart.replaceFilter = function (filter) {\n        _filters = _resetFilterHandler(_filters);\n        _chart.filter(filter);\n        return _chart;\n    };\n\n    /**\n     * Filter the chart by the given parameter, or return the current filter if no input parameter\n     * is given.\n     *\n     * The filter parameter can take one of these forms:\n     * * A single value: the value will be toggled (added if it is not present in the current\n     * filters, removed if it is present)\n     * * An array containing a single array of values (`[[value,value,value]]`): each value is\n     * toggled\n     * * When appropriate for the chart, a {@link dc.filters dc filter object} such as\n     *   * {@link dc.filters.RangedFilter `dc.filters.RangedFilter`} for the\n     * {@link dc.coordinateGridMixin dc.coordinateGridMixin} charts\n     *   * {@link dc.filters.TwoDimensionalFilter `dc.filters.TwoDimensionalFilter`} for the\n     * {@link dc.heatMap heat map}\n     *   * {@link dc.filters.RangedTwoDimensionalFilter `dc.filters.RangedTwoDimensionalFilter`}\n     * for the {@link dc.scatterPlot scatter plot}\n     * * `null`: the filter will be reset using the\n     * {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n     *\n     * Note that this is always a toggle (even when it doesn't make sense for the filter type). If\n     * you wish to replace the current filter, either call `chart.filter(null)` first - or it's more\n     * efficient to call {@link dc.baseMixin#replaceFilter `chart.replaceFilter(filter)`} instead.\n     *\n     * Each toggle is executed by checking if the value is already present using the\n     * {@link dc.baseMixin#hasFilterHandler hasFilterHandler}; if it is not present, it is added\n     * using the {@link dc.baseMixin#addFilterHandler addFilterHandler}; if it is already present,\n     * it is removed using the {@link dc.baseMixin#removeFilterHandler removeFilterHandler}.\n     *\n     * Once the filters array has been updated, the filters are applied to the\n     * crossfilter dimension, using the {@link dc.baseMixin#filterHandler filterHandler}.\n     *\n     * Once you have set the filters, call {@link dc.baseMixin#redrawGroup `chart.redrawGroup()`}\n     * (or {@link dc.redrawAll `dc.redrawAll()`}) to redraw the chart's group.\n     * @method filter\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#addFilterHandler addFilterHandler}\n     * @see {@link dc.baseMixin#removeFilterHandler removeFilterHandler}\n     * @see {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n     * @see {@link dc.baseMixin#filterHandler filterHandler}\n     * @example\n     * // filter by a single string\n     * chart.filter('Sunday');\n     * // filter by a single age\n     * chart.filter(18);\n     * // filter by a set of states\n     * chart.filter([['MA', 'TX', 'ND', 'WA']]);\n     * // filter by range -- note the use of dc.filters.RangedFilter, which is different\n     * // from the syntax for filtering a crossfilter dimension directly, dimension.filter([15,20])\n     * chart.filter(dc.filters.RangedFilter(15,20));\n     * @param {*} [filter]\n     * @returns {dc.baseMixin}\n     */\n    _chart.filter = function (filter) {\n        if (!arguments.length) {\n            return _filters.length > 0 ? _filters[0] : null;\n        }\n        var filters = _filters;\n        if (filter instanceof Array && filter[0] instanceof Array && !filter.isFiltered) {\n            // toggle each filter\n            filter[0].forEach(function (f) {\n                if (_hasFilterHandler(filters, f)) {\n                    filters = _removeFilterHandler(filters, f);\n                } else {\n                    filters = _addFilterHandler(filters, f);\n                }\n            });\n        } else if (filter === null) {\n            filters = _resetFilterHandler(filters);\n        } else {\n            if (_hasFilterHandler(filters, filter)) {\n                filters = _removeFilterHandler(filters, filter);\n            } else {\n                filters = _addFilterHandler(filters, filter);\n            }\n        }\n        _filters = applyFilters(filters);\n        _chart._invokeFilteredListener(filter);\n\n        if (_root !== null && _chart.hasFilter()) {\n            _chart.turnOnControls();\n        } else {\n            _chart.turnOffControls();\n        }\n\n        return _chart;\n    };\n\n    /**\n     * Returns all current filters. This method does not perform defensive cloning of the internal\n     * filter array before returning, therefore any modification of the returned array will effect the\n     * chart's internal filter storage.\n     * @method filters\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {Array<*>}\n     */\n    _chart.filters = function () {\n        return _filters;\n    };\n\n    _chart.highlightSelected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, true);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n    };\n\n    _chart.fadeDeselected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, true);\n    };\n\n    _chart.resetHighlight = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n    };\n\n    /**\n     * This function is passed to d3 as the onClick handler for each chart. The default behavior is to\n     * filter on the clicked datum (passed to the callback) and redraw the chart group.\n     * @method onClick\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {*} datum\n     */\n    _chart.onClick = function (datum) {\n        var filter = _chart.keyAccessor()(datum);\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    /**\n     * Set or get the filter handler. The filter handler is a function that performs the filter action\n     * on a specific dimension. Using a custom filter handler allows you to perform additional logic\n     * before or after filtering.\n     * @method filterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter crossfilter.dimension.filter}\n     * @example\n     * // the default filter handler handles all possible cases for the charts in dc.js\n     * // you can replace it with something more specialized for your own chart\n     * chart.filterHandler(function (dimension, filters) {\n     *     if (filters.length === 0) {\n     *         // the empty case (no filtering)\n     *         dimension.filter(null);\n     *     } else if (filters.length === 1 && !filters[0].isFiltered) {\n     *         // single value and not a function-based filter\n     *         dimension.filterExact(filters[0]);\n     *     } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n     *         // single range-based filter\n     *         dimension.filterRange(filters[0]);\n     *     } else {\n     *         // an array of values, or an array of filter objects\n     *         dimension.filterFunction(function (d) {\n     *             for (var i = 0; i < filters.length; i++) {\n     *                 var filter = filters[i];\n     *                 if (filter.isFiltered && filter.isFiltered(d)) {\n     *                     return true;\n     *                 } else if (filter <= d && filter >= d) {\n     *                     return true;\n     *                 }\n     *             }\n     *             return false;\n     *         });\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler\n     * chart.filterHandler(function(dimension, filter){\n     *     var newFilter = filter + 10;\n     *     dimension.filter(newFilter);\n     *     return newFilter; // set the actual filter value to the new value\n     * });\n     * @param {Function} [filterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.filterHandler = function (filterHandler) {\n        if (!arguments.length) {\n            return _filterHandler;\n        }\n        _filterHandler = filterHandler;\n        return _chart;\n    };\n\n    // abstract function stub\n    _chart._doRender = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    _chart.legendables = function () {\n        // do nothing in base, should be overridden by sub-function\n        return [];\n    };\n\n    _chart.legendHighlight = function () {\n        // do nothing in base, should be overridden by sub-function\n    };\n\n    _chart.legendReset = function () {\n        // do nothing in base, should be overridden by sub-function\n    };\n\n    _chart.legendToggle = function () {\n        // do nothing in base, should be overriden by sub-function\n    };\n\n    _chart.isLegendableHidden = function () {\n        // do nothing in base, should be overridden by sub-function\n        return false;\n    };\n\n    /**\n     * Set or get the key accessor function. The key accessor function is used to retrieve the key\n     * value from the crossfilter group. Key values are used differently in different charts, for\n     * example keys correspond to slices in a pie chart and x axis positions in a grid coordinate chart.\n     * @method keyAccessor\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default key accessor\n     * chart.keyAccessor(function(d) { return d.key; });\n     * // custom key accessor for a multi-value crossfilter reduction\n     * chart.keyAccessor(function(p) { return p.value.absGain; });\n     * @param {Function} [keyAccessor]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.keyAccessor = function (keyAccessor) {\n        if (!arguments.length) {\n            return _keyAccessor;\n        }\n        _keyAccessor = keyAccessor;\n        return _chart;\n    };\n\n    /**\n     * Set or get the value accessor function. The value accessor function is used to retrieve the\n     * value from the crossfilter group. Group values are used differently in different charts, for\n     * example values correspond to slice sizes in a pie chart and y axis positions in a grid\n     * coordinate chart.\n     * @method valueAccessor\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default value accessor\n     * chart.valueAccessor(function(d) { return d.value; });\n     * // custom value accessor for a multi-value crossfilter reduction\n     * chart.valueAccessor(function(p) { return p.value.percentageGain; });\n     * @param {Function} [valueAccessor]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.valueAccessor = function (valueAccessor) {\n        if (!arguments.length) {\n            return _valueAccessor;\n        }\n        _valueAccessor = valueAccessor;\n        return _chart;\n    };\n\n    /**\n     * Set or get the label function. The chart class will use this function to render labels for each\n     * child element in the chart, e.g. slices in a pie chart or bubbles in a bubble chart. Not every\n     * chart supports the label function, for example line chart does not use this function\n     * at all. By default, enables labels; pass false for the second parameter if this is not desired.\n     * @method label\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default label function just return the key\n     * chart.label(function(d) { return d.key; });\n     * // label function has access to the standard d3 data binding and can get quite complicated\n     * chart.label(function(d) { return d.data.key + '(' + Math.floor(d.data.value / all.value() * 100) + '%)'; });\n     * @param {Function} [labelFunction]\n     * @param {Boolean} [enableLabels=true]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.label = function (labelFunction, enableLabels) {\n        if (!arguments.length) {\n            return _label;\n        }\n        _label = labelFunction;\n        if ((enableLabels === undefined) || enableLabels) {\n            _renderLabel = true;\n        }\n        return _chart;\n    };\n\n    /**\n     * Turn on/off label rendering\n     * @method renderLabel\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [renderLabel=false]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.renderLabel = function (renderLabel) {\n        if (!arguments.length) {\n            return _renderLabel;\n        }\n        _renderLabel = renderLabel;\n        return _chart;\n    };\n\n    /**\n     * Set or get the title function. The chart class will use this function to render the SVGElement title\n     * (usually interpreted by browser as tooltips) for each child element in the chart, e.g. a slice\n     * in a pie chart or a bubble in a bubble chart. Almost every chart supports the title function;\n     * however in grid coordinate charts you need to turn off the brush in order to see titles, because\n     * otherwise the brush layer will block tooltip triggering.\n     * @method title\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default title function shows \"key: value\"\n     * chart.title(function(d) { return d.key + ': ' + d.value; });\n     * // title function has access to the standard d3 data binding and can get quite complicated\n     * chart.title(function(p) {\n     *    return p.key.getFullYear()\n     *        + '\\n'\n     *        + 'Index Gain: ' + numberFormat(p.value.absGain) + '\\n'\n     *        + 'Index Gain in Percentage: ' + numberFormat(p.value.percentageGain) + '%\\n'\n     *        + 'Fluctuation / Index Ratio: ' + numberFormat(p.value.fluctuationPercentage) + '%';\n     * });\n     * @param {Function} [titleFunction]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.title = function (titleFunction) {\n        if (!arguments.length) {\n            return _title;\n        }\n        _title = titleFunction;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off title rendering, or return the state of the render title flag if no arguments are\n     * given.\n     * @method renderTitle\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [renderTitle=true]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.renderTitle = function (renderTitle) {\n        if (!arguments.length) {\n            return _renderTitle;\n        }\n        _renderTitle = renderTitle;\n        return _chart;\n    };\n\n    /**\n     * A renderlet is similar to an event listener on rendering event. Multiple renderlets can be added\n     * to an individual chart.  Each time a chart is rerendered or redrawn the renderlets are invoked\n     * right after the chart finishes its transitions, giving you a way to modify the SVGElements.\n     * Renderlet functions take the chart instance as the only input parameter and you can\n     * use the dc API or use raw d3 to achieve pretty much any effect.\n     *\n     * Use {@link dc.baseMixin#on on} with a 'renderlet' prefix.\n     * Generates a random key for the renderlet, which makes it hard to remove.\n     * @method renderlet\n     * @memberof dc.baseMixin\n     * @instance\n     * @deprecated\n     * @example\n     * // do this instead of .renderlet(function(chart) { ... })\n     * chart.on(\"renderlet\", function(chart){\n     *     // mix of dc API and d3 manipulation\n     *     chart.select('g.y').style('display', 'none');\n     *     // its a closure so you can also access other chart variable available in the closure scope\n     *     moveChart.filter(chart.filter());\n     * });\n     * @param {Function} renderletFunction\n     * @returns {dc.baseMixin}\n     */\n    _chart.renderlet = dc.logger.deprecate(function (renderletFunction) {\n        _chart.on('renderlet.' + dc.utils.uniqueId(), renderletFunction);\n        return _chart;\n    }, 'chart.renderlet has been deprecated.  Please use chart.on(\"renderlet.<renderletKey>\", renderletFunction)');\n\n    /**\n     * Get or set the chart group to which this chart belongs. Chart groups are rendered or redrawn\n     * together since it is expected they share the same underlying crossfilter data set.\n     * @method chartGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {String} [chartGroup]\n     * @returns {String|dc.baseMixin}\n     */\n    _chart.chartGroup = function (chartGroup) {\n        if (!arguments.length) {\n            return _chartGroup;\n        }\n        if (!_isChild) {\n            dc.deregisterChart(_chart, _chartGroup);\n        }\n        _chartGroup = chartGroup;\n        if (!_isChild) {\n            dc.registerChart(_chart, _chartGroup);\n        }\n        return _chart;\n    };\n\n    /**\n     * Expire the internal chart cache. dc charts cache some data internally on a per chart basis to\n     * speed up rendering and avoid unnecessary calculation; however it might be useful to clear the\n     * cache if you have changed state which will affect rendering.  For example, if you invoke\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}\n     * function or reset group or dimension after rendering, it is a good idea to\n     * clear the cache to make sure charts are rendered properly.\n     * @method expireCache\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.expireCache = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    /**\n     * Attach a dc.legend widget to this chart. The legend widget will automatically draw legend labels\n     * based on the color setting and names associated with each group.\n     * @method legend\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n     * @param {dc.legend} [legend]\n     * @returns {dc.legend|dc.baseMixin}\n     */\n    _chart.legend = function (legend) {\n        if (!arguments.length) {\n            return _legend;\n        }\n        _legend = legend;\n        _legend.parent(_chart);\n        return _chart;\n    };\n\n    /**\n     * Returns the internal numeric ID of the chart.\n     * @method chartID\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {String}\n     */\n    _chart.chartID = function () {\n        return _chart.__dcFlag__;\n    };\n\n    /**\n     * Set chart options using a configuration object. Each key in the object will cause the method of\n     * the same name to be called with the value to set that attribute for the chart.\n     * @method options\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * chart.options({dimension: myDimension, group: myGroup});\n     * @param {{}} opts\n     * @returns {dc.baseMixin}\n     */\n    _chart.options = function (opts) {\n        var applyOptions = [\n            'anchor',\n            'group',\n            'xAxisLabel',\n            'yAxisLabel',\n            'stack',\n            'title',\n            'point',\n            'getColor',\n            'overlayGeoJson'\n        ];\n\n        for (var o in opts) {\n            if (typeof(_chart[o]) === 'function') {\n                if (opts[o] instanceof Array && applyOptions.indexOf(o) !== -1) {\n                    _chart[o].apply(_chart, opts[o]);\n                } else {\n                    _chart[o].call(_chart, opts[o]);\n                }\n            } else {\n                dc.logger.debug('Not a valid option setter name: ' + o);\n            }\n        }\n        return _chart;\n    };\n\n    /**\n     * All dc chart instance supports the following listeners.\n     * Supports the following events:\n     * * `renderlet` - This listener function will be invoked after transitions after redraw and render. Replaces the\n     * deprecated {@link dc.baseMixin#renderlet renderlet} method.\n     * * `pretransition` - Like `.on('renderlet', ...)` but the event is fired before transitions start.\n     * * `preRender` - This listener function will be invoked before chart rendering.\n     * * `postRender` - This listener function will be invoked after chart finish rendering including\n     * all renderlets' logic.\n     * * `preRedraw` - This listener function will be invoked before chart redrawing.\n     * * `postRedraw` - This listener function will be invoked after chart finish redrawing\n     * including all renderlets' logic.\n     * * `filtered` - This listener function will be invoked after a filter is applied, added or removed.\n     * * `zoomed` - This listener function will be invoked after a zoom is triggered.\n     * @method on\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Internals.md#dispatch_on d3.dispatch.on}\n     * @example\n     * .on('renderlet', function(chart, filter){...})\n     * .on('pretransition', function(chart, filter){...})\n     * .on('preRender', function(chart){...})\n     * .on('postRender', function(chart){...})\n     * .on('preRedraw', function(chart){...})\n     * .on('postRedraw', function(chart){...})\n     * .on('filtered', function(chart, filter){...})\n     * .on('zoomed', function(chart, filter){...})\n     * @param {String} event\n     * @param {Function} listener\n     * @returns {dc.baseMixin}\n     */\n    _chart.on = function (event, listener) {\n        _listeners.on(event, listener);\n        return _chart;\n    };\n\n    return _chart;\n};\n\n/**\n * Margin is a mixin that provides margin utility functions for both the Row Chart and Coordinate Grid\n * Charts.\n * @name marginMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.marginMixin}\n */\ndc.marginMixin = function (_chart) {\n    var _margin = {top: 10, right: 50, bottom: 30, left: 30};\n\n    /**\n     * Get or set the margins for a particular coordinate grid chart instance. The margins is stored as\n     * an associative Javascript array.\n     * @method margins\n     * @memberof dc.marginMixin\n     * @instance\n     * @example\n     * var leftMargin = chart.margins().left; // 30 by default\n     * chart.margins().left = 50;\n     * leftMargin = chart.margins().left; // now 50\n     * @param {{top: Number, right: Number, left: Number, bottom: Number}} [margins={top: 10, right: 50, bottom: 30, left: 30}]\n     * @returns {{top: Number, right: Number, left: Number, bottom: Number}|dc.marginMixin}\n     */\n    _chart.margins = function (margins) {\n        if (!arguments.length) {\n            return _margin;\n        }\n        _margin = margins;\n        return _chart;\n    };\n\n    _chart.effectiveWidth = function () {\n        return _chart.width() - _chart.margins().left - _chart.margins().right;\n    };\n\n    _chart.effectiveHeight = function () {\n        return _chart.height() - _chart.margins().top - _chart.margins().bottom;\n    };\n\n    return _chart;\n};\n\n/**\n * The Color Mixin is an abstract chart functional class providing universal coloring support\n * as a mix-in for any concrete chart implementation.\n * @name colorMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.colorMixin}\n */\ndc.colorMixin = function (_chart) {\n    var _colors = d3.scale.category20c();\n    var _defaultAccessor = true;\n\n    var _colorAccessor = function (d) { return _chart.keyAccessor()(d); };\n\n    /**\n     * Retrieve current color scale or set a new color scale. This methods accepts any function that\n     * operates like a d3 scale.\n     * @method colors\n     * @memberof dc.colorMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @example\n     * // alternate categorical scale\n     * chart.colors(d3.scale.category20b());\n     * // ordinal scale\n     * chart.colors(d3.scale.ordinal().range(['red','green','blue']));\n     * // convenience method, the same as above\n     * chart.ordinalColors(['red','green','blue']);\n     * // set a linear scale\n     * chart.linearColors([\"#4575b4\", \"#ffffbf\", \"#a50026\"]);\n     * @param {d3.scale} [colorScale=d3.scale.category20c()]\n     * @returns {d3.scale|dc.colorMixin}\n     */\n    _chart.colors = function (colorScale) {\n        if (!arguments.length) {\n            return _colors;\n        }\n        if (colorScale instanceof Array) {\n            _colors = d3.scale.quantize().range(colorScale); // deprecated legacy support, note: this fails for ordinal domains\n        } else {\n            _colors = d3.functor(colorScale);\n        }\n        return _chart;\n    };\n\n    /**\n     * Convenience method to set the color scale to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal d3.scale.ordinal} with\n     * range `r`.\n     * @method ordinalColors\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<String>} r\n     * @returns {dc.colorMixin}\n     */\n    _chart.ordinalColors = function (r) {\n        return _chart.colors(d3.scale.ordinal().range(r));\n    };\n\n    /**\n     * Convenience method to set the color scale to an Hcl interpolated linear scale with range `r`.\n     * @method linearColors\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<Number>} r\n     * @returns {dc.colorMixin}\n     */\n    _chart.linearColors = function (r) {\n        return _chart.colors(d3.scale.linear()\n                             .range(r)\n                             .interpolate(d3.interpolateHcl));\n    };\n\n    /**\n     * Set or the get color accessor function. This function will be used to map a data point in a\n     * crossfilter group to a color value on the color scale. The default function uses the key\n     * accessor.\n     * @method colorAccessor\n     * @memberof dc.colorMixin\n     * @instance\n     * @example\n     * // default index based color accessor\n     * .colorAccessor(function (d, i){return i;})\n     * // color accessor for a multi-value crossfilter reduction\n     * .colorAccessor(function (d){return d.value.absGain;})\n     * @param {Function} [colorAccessor]\n     * @returns {Function|dc.colorMixin}\n     */\n    _chart.colorAccessor = function (colorAccessor) {\n        if (!arguments.length) {\n            return _colorAccessor;\n        }\n        _colorAccessor = colorAccessor;\n        _defaultAccessor = false;\n        return _chart;\n    };\n\n    // what is this?\n    _chart.defaultColorAccessor = function () {\n        return _defaultAccessor;\n    };\n\n    /**\n     * Set or get the current domain for the color mapping function. The domain must be supplied as an\n     * array.\n     *\n     * Note: previously this method accepted a callback function. Instead you may use a custom scale\n     * set by {@link dc.colorMixin#colors .colors}.\n     * @method colorDomain\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<String>} [domain]\n     * @returns {Array<String>|dc.colorMixin}\n     */\n    _chart.colorDomain = function (domain) {\n        if (!arguments.length) {\n            return _colors.domain();\n        }\n        _colors.domain(domain);\n        return _chart;\n    };\n\n    /**\n     * Set the domain by determining the min and max values as retrieved by\n     * {@link dc.colorMixin#colorAccessor .colorAccessor} over the chart's dataset.\n     * @method calculateColorDomain\n     * @memberof dc.colorMixin\n     * @instance\n     * @returns {dc.colorMixin}\n     */\n    _chart.calculateColorDomain = function () {\n        var newDomain = [d3.min(_chart.data(), _chart.colorAccessor()),\n                         d3.max(_chart.data(), _chart.colorAccessor())];\n        _colors.domain(newDomain);\n        return _chart;\n    };\n\n    /**\n     * Get the color for the datum d and counter i. This is used internally by charts to retrieve a color.\n     * @method getColor\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {*} d\n     * @param {Number} [i]\n     * @returns {String}\n     */\n    _chart.getColor = function (d, i) {\n        return _colors(_colorAccessor.call(this, d, i));\n    };\n\n    /**\n     * **Deprecated.** Get/set the color calculator. This actually replaces the\n     * {@link dc.colorMixin#getColor getColor} method!\n     *\n     * This is not recommended, since using a {@link dc.colorMixin#colorAccessor colorAccessor} and\n     * color scale ({@link dc.colorMixin#colors .colors}) is more powerful and idiomatic d3.\n     * @method colorCalculator\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {*} [colorCalculator]\n     * @returns {Function|dc.colorMixin}\n     */\n    _chart.colorCalculator = dc.logger.deprecate(function (colorCalculator) {\n        if (!arguments.length) {\n            return _chart.getColor;\n        }\n        _chart.getColor = colorCalculator;\n        return _chart;\n    }, 'colorMixin.colorCalculator has been deprecated. Please colorMixin.colors and colorMixin.colorAccessor instead');\n\n    return _chart;\n};\n\n/**\n * Coordinate Grid is an abstract base chart designed to support a number of coordinate grid based\n * concrete chart types, e.g. bar chart, line chart, and bubble chart.\n * @name coordinateGridMixin\n * @memberof dc\n * @mixin\n * @mixes dc.colorMixin\n * @mixes dc.marginMixin\n * @mixes dc.baseMixin\n * @param {Object} _chart\n * @returns {dc.coordinateGridMixin}\n */\ndc.coordinateGridMixin = function (_chart) {\n    var GRID_LINE_CLASS = 'grid-line';\n    var HORIZONTAL_CLASS = 'horizontal';\n    var VERTICAL_CLASS = 'vertical';\n    var Y_AXIS_LABEL_CLASS = 'y-axis-label';\n    var X_AXIS_LABEL_CLASS = 'x-axis-label';\n    var DEFAULT_AXIS_LABEL_PADDING = 12;\n\n    _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin(_chart)));\n\n    _chart.colors(d3.scale.category10());\n    _chart._mandatoryAttributes().push('x');\n    var _parent;\n    var _g;\n    var _chartBodyG;\n\n    var _x;\n    var _xOriginalDomain;\n    var _xAxis = d3.svg.axis().orient('bottom');\n    var _xUnits = dc.units.integers;\n    var _xAxisPadding = 0;\n    var _xAxisPaddingUnit = 'day';\n    var _xElasticity = false;\n    var _xAxisLabel;\n    var _xAxisLabelPadding = 0;\n    var _lastXDomain;\n\n    var _y;\n    var _yAxis = d3.svg.axis().orient('left');\n    var _yAxisPadding = 0;\n    var _yElasticity = false;\n    var _yAxisLabel;\n    var _yAxisLabelPadding = 0;\n\n    var _brush = d3.svg.brush();\n    var _brushOn = true;\n    var _round;\n\n    var _renderHorizontalGridLine = false;\n    var _renderVerticalGridLine = false;\n\n    var _refocused = false, _resizing = false;\n    var _unitCount;\n\n    var _zoomScale = [1, Infinity];\n    var _zoomOutRestrict = true;\n\n    var _zoom = d3.behavior.zoom().on('zoom', zoomHandler);\n    var _nullZoom = d3.behavior.zoom().on('zoom', null);\n    var _hasBeenMouseZoomable = false;\n\n    var _rangeChart;\n    var _focusChart;\n\n    var _mouseZoomable = false;\n    var _clipPadding = 0;\n\n    var _outerRangeBandPadding = 0.5;\n    var _rangeBandPadding = 0;\n\n    var _useRightYAxis = false;\n\n    /**\n     * When changing the domain of the x or y scale, it is necessary to tell the chart to recalculate\n     * and redraw the axes. (`.rescale()` is called automatically when the x or y scale is replaced\n     * with {@link dc.coordinateGridMixin+x .x()} or {@link dc.coordinateGridMixin#y .y()}, and has\n     * no effect on elastic scales.)\n     * @method rescale\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {dc.coordinateGridMixin}\n     */\n    _chart.rescale = function () {\n        _unitCount = undefined;\n        _resizing = true;\n        return _chart;\n    };\n\n    _chart.resizing = function () {\n        return _resizing;\n    };\n\n    /**\n     * Get or set the range selection chart associated with this instance. Setting the range selection\n     * chart using this function will automatically update its selection brush when the current chart\n     * zooms in. In return the given range chart will also automatically attach this chart as its focus\n     * chart hence zoom in when range brush updates.\n     *\n     * Usually the range and focus charts will share a dimension. The range chart will set the zoom\n     * boundaries for the focus chart, so its dimension values must be compatible with the domain of\n     * the focus chart.\n     *\n     * See the [Nasdaq 100 Index](http://dc-js.github.com/dc.js/) example for this effect in action.\n     * @method rangeChart\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {dc.coordinateGridMixin} [rangeChart]\n     * @returns {dc.coordinateGridMixin}\n     */\n    _chart.rangeChart = function (rangeChart) {\n        if (!arguments.length) {\n            return _rangeChart;\n        }\n        _rangeChart = rangeChart;\n        _rangeChart.focusChart(_chart);\n        return _chart;\n    };\n\n    /**\n     * Get or set the scale extent for mouse zooms.\n     * @method zoomScale\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Array<Number|Date>} [extent=[1, Infinity]]\n     * @returns {Array<Number|Date>|dc.coordinateGridMixin}\n     */\n    _chart.zoomScale = function (extent) {\n        if (!arguments.length) {\n            return _zoomScale;\n        }\n        _zoomScale = extent;\n        return _chart;\n    };\n\n    /**\n     * Get or set the zoom restriction for the chart. If true limits the zoom to origional domain of the chart.\n     * @method zoomOutRestrict\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [zoomOutRestrict=true]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.zoomOutRestrict = function (zoomOutRestrict) {\n        if (!arguments.length) {\n            return _zoomOutRestrict;\n        }\n        _zoomScale[0] = zoomOutRestrict ? 1 : 0;\n        _zoomOutRestrict = zoomOutRestrict;\n        return _chart;\n    };\n\n    _chart._generateG = function (parent) {\n        if (parent === undefined) {\n            _parent = _chart.svg();\n        } else {\n            _parent = parent;\n        }\n\n        var href = window.location.href.split('#')[0];\n\n        _g = _parent.append('g');\n\n        _chartBodyG = _g.append('g').attr('class', 'chart-body')\n            .attr('transform', 'translate(' + _chart.margins().left + ', ' + _chart.margins().top + ')')\n            .attr('clip-path', 'url(' + href + '#' + getClipPathId() + ')');\n\n        return _g;\n    };\n\n    /**\n     * Get or set the root g element. This method is usually used to retrieve the g element in order to\n     * overlay custom svg drawing programatically. **Caution**: The root g element is usually generated\n     * by dc.js internals, and resetting it might produce unpredictable result.\n     * @method g\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {SVGElement} [gElement]\n     * @returns {SVGElement|dc.coordinateGridMixin}\n     */\n    _chart.g = function (gElement) {\n        if (!arguments.length) {\n            return _g;\n        }\n        _g = gElement;\n        return _chart;\n    };\n\n    /**\n     * Set or get mouse zoom capability flag (default: false). When turned on the chart will be\n     * zoomable using the mouse wheel. If the range selector chart is attached zooming will also update\n     * the range selection brush on the associated range selector chart.\n     * @method mouseZoomable\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [mouseZoomable=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.mouseZoomable = function (mouseZoomable) {\n        if (!arguments.length) {\n            return _mouseZoomable;\n        }\n        _mouseZoomable = mouseZoomable;\n        return _chart;\n    };\n\n    /**\n     * Retrieve the svg group for the chart body.\n     * @method chartBodyG\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {SVGElement} [chartBodyG]\n     * @returns {SVGElement}\n     */\n    _chart.chartBodyG = function (chartBodyG) {\n        if (!arguments.length) {\n            return _chartBodyG;\n        }\n        _chartBodyG = chartBodyG;\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Get or set the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale} or\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md ordinal scale}.\n     * @method x\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @example\n     * // set x to a linear scale\n     * chart.x(d3.scale.linear().domain([-2500, 2500]))\n     * // set x to a time scale to generate histogram\n     * chart.x(d3.time.scale().domain([new Date(1985, 0, 1), new Date(2012, 11, 31)]))\n     * @param {d3.scale} [xScale]\n     * @returns {d3.scale|dc.coordinateGridMixin}\n     */\n    _chart.x = function (xScale) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = xScale;\n        _xOriginalDomain = _x.domain();\n        _chart.rescale();\n        return _chart;\n    };\n\n    _chart.xOriginalDomain = function () {\n        return _xOriginalDomain;\n    };\n\n    /**\n     * Set or get the xUnits function. The coordinate grid chart uses the xUnits function to calculate\n     * the number of data projections on x axis such as the number of bars for a bar chart or the\n     * number of dots for a line chart. This function is expected to return a Javascript array of all\n     * data points on x axis, or the number of points on the axis. [d3 time range functions\n     * d3.time.days, d3.time.months, and\n     * d3.time.years](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#aliases) are all valid xUnits\n     * function. dc.js also provides a few units function, see the {@link dc.units Units Namespace} for\n     * a list of built-in units functions.\n     * @method xUnits\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @todo Add docs for utilities\n     * @example\n     * // set x units to count days\n     * chart.xUnits(d3.time.days);\n     * // set x units to count months\n     * chart.xUnits(d3.time.months);\n     *\n     * // A custom xUnits function can be used as long as it follows the following interface:\n     * // units in integer\n     * function(start, end, xDomain) {\n     *      // simply calculates how many integers in the domain\n     *      return Math.abs(end - start);\n     * };\n     *\n     * // fixed units\n     * function(start, end, xDomain) {\n     *      // be aware using fixed units will disable the focus/zoom ability on the chart\n     *      return 1000;\n     * @param {Function} [xUnits=dc.units.integers]\n     * @returns {Function|dc.coordinateGridMixin}\n     */\n    _chart.xUnits = function (xUnits) {\n        if (!arguments.length) {\n            return _xUnits;\n        }\n        _xUnits = xUnits;\n        return _chart;\n    };\n\n    /**\n     * Set or get the x axis used by a particular coordinate grid chart instance. This function is most\n     * useful when x axis customization is required. The x axis in dc.js is an instance of a\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object};\n     * therefore it supports any valid d3 axis manipulation.\n     *\n     * **Caution**: The x axis is usually generated internally by dc; resetting it may cause\n     * unexpected results. Note also that when used as a getter, this function is not chainable:\n     * it returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n     * so attempting to call chart functions after calling `.xAxis()` will fail}.\n     * @method xAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function(v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [xAxis=d3.svg.axis().orient('bottom')]\n     * @returns {d3.svg.axis|dc.coordinateGridMixin}\n     */\n    _chart.xAxis = function (xAxis) {\n        if (!arguments.length) {\n            return _xAxis;\n        }\n        _xAxis = xAxis;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off elastic x axis behavior. If x axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the x axis range whenever a redraw event is triggered.\n     * @method elasticX\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [elasticX=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n            return _xElasticity;\n        }\n        _xElasticity = elasticX;\n        return _chart;\n    };\n\n    /**\n     * Set or get x axis padding for the elastic x axis. The padding will be added to both end of the x\n     * axis if elasticX is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date x axes.  When padding a date axis, an integer represents number of units being padded\n     * and a percentage string will be treated the same as an integer. The unit will be determined by the\n     * xAxisPaddingUnit variable.\n     * @method xAxisPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number|String} [padding=0]\n     * @returns {Number|String|dc.coordinateGridMixin}\n     */\n    _chart.xAxisPadding = function (padding) {\n        if (!arguments.length) {\n            return _xAxisPadding;\n        }\n        _xAxisPadding = padding;\n        return _chart;\n    };\n\n    /**\n     * Set or get x axis padding unit for the elastic x axis. The padding unit will determine which unit to\n     * use when applying xAxis padding if elasticX is turned on and if x-axis uses a time dimension;\n     * otherwise it is ignored.\n     *\n     * Padding unit is a string that will be used when the padding is calculated. Available parameters are\n     * the available d3 time intervals; see\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval d3.time.interval}.\n     * @method xAxisPaddingUnit\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [unit='days']\n     * @returns {String|dc.coordinateGridMixin}\n     */\n    _chart.xAxisPaddingUnit = function (unit) {\n        if (!arguments.length) {\n            return _xAxisPaddingUnit;\n        }\n        _xAxisPaddingUnit = unit;\n        return _chart;\n    };\n\n    /**\n     * Returns the number of units displayed on the x axis using the unit measure configured by\n     * {@link dc.coordinateGridMixin#xUnits xUnits}.\n     * @method xUnitCount\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {Number}\n     */\n    _chart.xUnitCount = function () {\n        if (_unitCount === undefined) {\n            var units = _chart.xUnits()(_chart.x().domain()[0], _chart.x().domain()[1], _chart.x().domain());\n\n            if (units instanceof Array) {\n                _unitCount = units.length;\n            } else {\n                _unitCount = units;\n            }\n        }\n\n        return _unitCount;\n    };\n\n    /**\n     * Gets or sets whether the chart should be drawn with a right axis instead of a left axis. When\n     * used with a chart in a composite chart, allows both left and right Y axes to be shown on a\n     * chart.\n     * @method useRightYAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [useRightYAxis=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.useRightYAxis = function (useRightYAxis) {\n        if (!arguments.length) {\n            return _useRightYAxis;\n        }\n        _useRightYAxis = useRightYAxis;\n        return _chart;\n    };\n\n    /**\n     * Returns true if the chart is using ordinal xUnits ({@link dc.units.ordinal dc.units.ordinal}, or false\n     * otherwise. Most charts behave differently with ordinal data and use the result of this method to\n     * trigger the appropriate logic.\n     * @method isOrdinal\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {Boolean}\n     */\n    _chart.isOrdinal = function () {\n        return _chart.xUnits() === dc.units.ordinal;\n    };\n\n    _chart._useOuterPadding = function () {\n        return true;\n    };\n\n    _chart._ordinalXDomain = function () {\n        var groups = _chart._computeOrderedGroups(_chart.data());\n        return groups.map(_chart.keyAccessor());\n    };\n\n    function compareDomains (d1, d2) {\n        return !d1 || !d2 || d1.length !== d2.length ||\n            d1.some(function (elem, i) { return (elem && d2[i]) ? elem.toString() !== d2[i].toString() : elem === d2[i]; });\n    }\n\n    function prepareXAxis (g, render) {\n        if (!_chart.isOrdinal()) {\n            if (_chart.elasticX()) {\n                _x.domain([_chart.xAxisMin(), _chart.xAxisMax()]);\n            }\n        } else { // _chart.isOrdinal()\n            if (_chart.elasticX() || _x.domain().length === 0) {\n                _x.domain(_chart._ordinalXDomain());\n            }\n        }\n\n        // has the domain changed?\n        var xdom = _x.domain();\n        if (render || compareDomains(_lastXDomain, xdom)) {\n            _chart.rescale();\n        }\n        _lastXDomain = xdom;\n\n        // please can't we always use rangeBands for bar charts?\n        if (_chart.isOrdinal()) {\n            _x.rangeBands([0, _chart.xAxisLength()], _rangeBandPadding,\n                          _chart._useOuterPadding() ? _outerRangeBandPadding : 0);\n        } else {\n            _x.range([0, _chart.xAxisLength()]);\n        }\n\n        _xAxis = _xAxis.scale(_chart.x());\n\n        renderVerticalGridLines(g);\n    }\n\n    _chart.renderXAxis = function (g) {\n        var axisXG = g.select('g.x');\n\n        if (axisXG.empty()) {\n            axisXG = g.append('g')\n                .attr('class', 'axis x')\n                .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')');\n        }\n\n        var axisXLab = g.select('text.' + X_AXIS_LABEL_CLASS);\n        if (axisXLab.empty() && _chart.xAxisLabel()) {\n            axisXLab = g.append('text')\n                .attr('class', X_AXIS_LABEL_CLASS)\n                .attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' +\n                      (_chart.height() - _xAxisLabelPadding) + ')')\n                .attr('text-anchor', 'middle');\n        }\n        if (_chart.xAxisLabel() && axisXLab.text() !== _chart.xAxisLabel()) {\n            axisXLab.text(_chart.xAxisLabel());\n        }\n\n        dc.transition(axisXG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')')\n            .call(_xAxis);\n        dc.transition(axisXLab, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' +\n                  (_chart.height() - _xAxisLabelPadding) + ')');\n    };\n\n    function renderVerticalGridLines (g) {\n        var gridLineG = g.select('g.' + VERTICAL_CLASS);\n\n        if (_renderVerticalGridLine) {\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child')\n                    .attr('class', GRID_LINE_CLASS + ' ' + VERTICAL_CLASS)\n                    .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n            }\n\n            var ticks = _xAxis.tickValues() ? _xAxis.tickValues() :\n                    (typeof _x.ticks === 'function' ? _x.ticks(_xAxis.ticks()[0]) : _x.domain());\n\n            var lines = gridLineG.selectAll('line')\n                .data(ticks);\n\n            // enter\n            var linesGEnter = lines.enter()\n                .append('line')\n                .attr('x1', function (d) {\n                    return _x(d);\n                })\n                .attr('y1', _chart._xAxisY() - _chart.margins().top)\n                .attr('x2', function (d) {\n                    return _x(d);\n                })\n                .attr('y2', 0)\n                .attr('opacity', 0);\n            dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', 1);\n\n            // update\n            dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('x1', function (d) {\n                    return _x(d);\n                })\n                .attr('y1', _chart._xAxisY() - _chart.margins().top)\n                .attr('x2', function (d) {\n                    return _x(d);\n                })\n                .attr('y2', 0);\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    }\n\n    _chart._xAxisY = function () {\n        return (_chart.height() - _chart.margins().bottom);\n    };\n\n    _chart.xAxisLength = function () {\n        return _chart.effectiveWidth();\n    };\n\n    /**\n     * Set or get the x axis label. If setting the label, you may optionally include additional padding to\n     * the margin to make room for the label. By default the padded is set to 12 to accomodate the text height.\n     * @method xAxisLabel\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String}\n     */\n    _chart.xAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n            return _xAxisLabel;\n        }\n        _xAxisLabel = labelText;\n        _chart.margins().bottom -= _xAxisLabelPadding;\n        _xAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().bottom += _xAxisLabelPadding;\n        return _chart;\n    };\n\n    _chart._prepareYAxis = function (g) {\n        if (_y === undefined || _chart.elasticY()) {\n            if (_y === undefined) {\n                _y = d3.scale.linear();\n            }\n            var min = _chart.yAxisMin() || 0,\n                max = _chart.yAxisMax() || 0;\n            _y.domain([min, max]).rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _y.range([_chart.yAxisHeight(), 0]);\n        _yAxis = _yAxis.scale(_y);\n\n        if (_useRightYAxis) {\n            _yAxis.orient('right');\n        }\n\n        _chart._renderHorizontalGridLinesForAxis(g, _y, _yAxis);\n    };\n\n    _chart.renderYAxisLabel = function (axisClass, text, rotation, labelXPosition) {\n        labelXPosition = labelXPosition || _yAxisLabelPadding;\n\n        var axisYLab = _chart.g().select('text.' + Y_AXIS_LABEL_CLASS + '.' + axisClass + '-label');\n        var labelYPosition = (_chart.margins().top + _chart.yAxisHeight() / 2);\n        if (axisYLab.empty() && text) {\n            axisYLab = _chart.g().append('text')\n                .attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')')\n                .attr('class', Y_AXIS_LABEL_CLASS + ' ' + axisClass + '-label')\n                .attr('text-anchor', 'middle')\n                .text(text);\n        }\n        if (text && axisYLab.text() !== text) {\n            axisYLab.text(text);\n        }\n        dc.transition(axisYLab, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')');\n    };\n\n    _chart.renderYAxisAt = function (axisClass, axis, position) {\n        var axisYG = _chart.g().select('g.' + axisClass);\n        if (axisYG.empty()) {\n            axisYG = _chart.g().append('g')\n                .attr('class', 'axis ' + axisClass)\n                .attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')');\n        }\n\n        dc.transition(axisYG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')')\n            .call(axis);\n    };\n\n    _chart.renderYAxis = function () {\n        var axisPosition = _useRightYAxis ? (_chart.width() - _chart.margins().right) : _chart._yAxisX();\n        _chart.renderYAxisAt('y', _yAxis, axisPosition);\n        var labelPosition = _useRightYAxis ? (_chart.width() - _yAxisLabelPadding) : _yAxisLabelPadding;\n        var rotation = _useRightYAxis ? 90 : -90;\n        _chart.renderYAxisLabel('y', _chart.yAxisLabel(), rotation, labelPosition);\n    };\n\n    _chart._renderHorizontalGridLinesForAxis = function (g, scale, axis) {\n        var gridLineG = g.select('g.' + HORIZONTAL_CLASS);\n\n        if (_renderHorizontalGridLine) {\n            var ticks = axis.tickValues() ? axis.tickValues() : scale.ticks(axis.ticks()[0]);\n\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child')\n                    .attr('class', GRID_LINE_CLASS + ' ' + HORIZONTAL_CLASS)\n                    .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n            }\n\n            var lines = gridLineG.selectAll('line')\n                .data(ticks);\n\n            // enter\n            var linesGEnter = lines.enter()\n                .append('line')\n                .attr('x1', 1)\n                .attr('y1', function (d) {\n                    return scale(d);\n                })\n                .attr('x2', _chart.xAxisLength())\n                .attr('y2', function (d) {\n                    return scale(d);\n                })\n                .attr('opacity', 0);\n            dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', 1);\n\n            // update\n            dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('x1', 1)\n                .attr('y1', function (d) {\n                    return scale(d);\n                })\n                .attr('x2', _chart.xAxisLength())\n                .attr('y2', function (d) {\n                    return scale(d);\n                });\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    };\n\n    _chart._yAxisX = function () {\n        return _chart.useRightYAxis() ? _chart.width() - _chart.margins().right : _chart.margins().left;\n    };\n\n    /**\n     * Set or get the y axis label. If setting the label, you may optionally include additional padding\n     * to the margin to make room for the label. By default the padding is set to 12 to accommodate the\n     * text height.\n     * @method yAxisLabel\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String|dc.coordinateGridMixin}\n     */\n    _chart.yAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n            return _yAxisLabel;\n        }\n        _yAxisLabel = labelText;\n        _chart.margins().left -= _yAxisLabelPadding;\n        _yAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().left += _yAxisLabelPadding;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y scale. The y scale is typically automatically determined by the chart implementation.\n     * @method y\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|dc.coordinateGridMixin}\n     */\n    _chart.y = function (yScale) {\n        if (!arguments.length) {\n            return _y;\n        }\n        _y = yScale;\n        _chart.rescale();\n        return _chart;\n    };\n\n    /**\n     * Set or get the y axis used by the coordinate grid chart instance. This function is most useful\n     * when y axis customization is required. The y axis in dc.js is simply an instance of a [d3 axis\n     * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis); therefore it supports any\n     * valid d3 axis manipulation.\n     *\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.  Note also that when used as a getter, this function is not chainable: it\n     * returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n     * so attempting to call chart functions after calling `.yAxis()` will fail}.\n     * @method yAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize y axis tick format\n     * chart.yAxis().tickFormat(function(v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.yAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [yAxis=d3.svg.axis().orient('left')]\n     * @returns {d3.svg.axis|dc.coordinateGridMixin}\n     */\n    _chart.yAxis = function (yAxis) {\n        if (!arguments.length) {\n            return _yAxis;\n        }\n        _yAxis = yAxis;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off elastic y axis behavior. If y axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the y axis range whenever a redraw event is triggered.\n     * @method elasticY\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [elasticY=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.elasticY = function (elasticY) {\n        if (!arguments.length) {\n            return _yElasticity;\n        }\n        _yElasticity = elasticY;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off horizontal grid lines.\n     * @method renderHorizontalGridLines\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [renderHorizontalGridLines=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.renderHorizontalGridLines = function (renderHorizontalGridLines) {\n        if (!arguments.length) {\n            return _renderHorizontalGridLine;\n        }\n        _renderHorizontalGridLine = renderHorizontalGridLines;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off vertical grid lines.\n     * @method renderVerticalGridLines\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [renderVerticalGridLines=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.renderVerticalGridLines = function (renderVerticalGridLines) {\n        if (!arguments.length) {\n            return _renderVerticalGridLine;\n        }\n        _renderVerticalGridLine = renderVerticalGridLines;\n        return _chart;\n    };\n\n    /**\n     * Calculates the minimum x value to display in the chart. Includes xAxisPadding if set.\n     * @method xAxisMin\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.xAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.keyAccessor()(e);\n        });\n        return dc.utils.subtract(min, _xAxisPadding, _xAxisPaddingUnit);\n    };\n\n    /**\n     * Calculates the maximum x value to display in the chart. Includes xAxisPadding if set.\n     * @method xAxisMax\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.xAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.keyAccessor()(e);\n        });\n        return dc.utils.add(max, _xAxisPadding, _xAxisPaddingUnit);\n    };\n\n    /**\n     * Calculates the minimum y value to display in the chart. Includes yAxisPadding if set.\n     * @method yAxisMin\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.yAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.valueAccessor()(e);\n        });\n        return dc.utils.subtract(min, _yAxisPadding);\n    };\n\n    /**\n     * Calculates the maximum y value to display in the chart. Includes yAxisPadding if set.\n     * @method yAxisMax\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.yAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.valueAccessor()(e);\n        });\n        return dc.utils.add(max, _yAxisPadding);\n    };\n\n    /**\n     * Set or get y axis padding for the elastic y axis. The padding will be added to the top and\n     * bottom of the y axis if elasticY is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date axes. When padding a date axis, an integer represents number of days being padded\n     * and a percentage string will be treated the same as an integer.\n     * @method yAxisPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number|String} [padding=0]\n     * @returns {Number|dc.coordinateGridMixin}\n     */\n    _chart.yAxisPadding = function (padding) {\n        if (!arguments.length) {\n            return _yAxisPadding;\n        }\n        _yAxisPadding = padding;\n        return _chart;\n    };\n\n    _chart.yAxisHeight = function () {\n        return _chart.effectiveHeight();\n    };\n\n    /**\n     * Set or get the rounding function used to quantize the selection when brushing is enabled.\n     * @method round\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @example\n     * // set x unit round to by month, this will make sure range selection brush will\n     * // select whole months\n     * chart.round(d3.time.month.round);\n     * @param {Function} [round]\n     * @returns {Function|dc.coordinateGridMixin}\n     */\n    _chart.round = function (round) {\n        if (!arguments.length) {\n            return _round;\n        }\n        _round = round;\n        return _chart;\n    };\n\n    _chart._rangeBandPadding = function (_) {\n        if (!arguments.length) {\n            return _rangeBandPadding;\n        }\n        _rangeBandPadding = _;\n        return _chart;\n    };\n\n    _chart._outerRangeBandPadding = function (_) {\n        if (!arguments.length) {\n            return _outerRangeBandPadding;\n        }\n        _outerRangeBandPadding = _;\n        return _chart;\n    };\n\n    dc.override(_chart, 'filter', function (_) {\n        if (!arguments.length) {\n            return _chart._filter();\n        }\n\n        _chart._filter(_);\n\n        if (_) {\n            _chart.brush().extent(_);\n        } else {\n            _chart.brush().clear();\n        }\n\n        return _chart;\n    });\n\n    _chart.brush = function (_) {\n        if (!arguments.length) {\n            return _brush;\n        }\n        _brush = _;\n        return _chart;\n    };\n\n    function brushHeight () {\n        return _chart._xAxisY() - _chart.margins().top;\n    }\n\n    _chart.renderBrush = function (g) {\n        if (_brushOn) {\n            _brush.on('brush', _chart._brushing);\n            _brush.on('brushstart', _chart._disableMouseZoom);\n            _brush.on('brushend', configureMouseZoom);\n\n            var gBrush = g.append('g')\n                .attr('class', 'brush')\n                .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')')\n                .call(_brush.x(_chart.x()));\n            _chart.setBrushY(gBrush, false);\n            _chart.setHandlePaths(gBrush);\n\n            if (_chart.hasFilter()) {\n                _chart.redrawBrush(g, false);\n            }\n        }\n    };\n\n    _chart.setHandlePaths = function (gBrush) {\n        gBrush.selectAll('.resize').append('path').attr('d', _chart.resizeHandlePath);\n    };\n\n    _chart.setBrushY = function (gBrush) {\n        gBrush.selectAll('rect')\n            .attr('height', brushHeight());\n        gBrush.selectAll('.resize path')\n            .attr('d', _chart.resizeHandlePath);\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _brush.extent();\n        if (_chart.round()) {\n            extent[0] = extent.map(_chart.round())[0];\n            extent[1] = extent.map(_chart.round())[1];\n\n            _g.select('.brush')\n                .call(_brush.extent(extent));\n        }\n        return extent;\n    };\n\n    _chart.brushIsEmpty = function (extent) {\n        return _brush.empty() || !extent || extent[1] <= extent[0];\n    };\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n\n        _chart.redrawBrush(_g, false);\n\n        if (_chart.brushIsEmpty(extent)) {\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n        } else {\n            var rangedFilter = dc.filters.RangedFilter(extent[0], extent[1]);\n\n            dc.events.trigger(function () {\n                _chart.replaceFilter(rangedFilter);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n        }\n    };\n\n    _chart.redrawBrush = function (g, doTransition) {\n        if (_brushOn) {\n            if (_chart.filter() && _chart.brush().empty()) {\n                _chart.brush().extent(_chart.filter());\n            }\n\n            var gBrush = dc.optionalTransition(doTransition, _chart.transitionDuration(), _chart.transitionDelay())(g.select('g.brush'));\n            _chart.setBrushY(gBrush);\n            gBrush.call(_chart.brush()\n                      .x(_chart.x())\n                      .extent(_chart.brush().extent()));\n        }\n\n        _chart.fadeDeselectedArea();\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        // do nothing, sub-chart should override this function\n    };\n\n    // borrowed from Crossfilter example\n    _chart.resizeHandlePath = function (d) {\n        var e = +(d === 'e'), x = e ? 1 : -1, y = brushHeight() / 3;\n        return 'M' + (0.5 * x) + ',' + y +\n            'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6) +\n            'V' + (2 * y - 6) +\n            'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y) +\n            'Z' +\n            'M' + (2.5 * x) + ',' + (y + 8) +\n            'V' + (2 * y - 8) +\n            'M' + (4.5 * x) + ',' + (y + 8) +\n            'V' + (2 * y - 8);\n    };\n\n    function getClipPathId () {\n        return _chart.anchorName().replace(/[ .#=\\[\\]\"]/g, '-') + '-clip';\n    }\n\n    /**\n     * Get or set the padding in pixels for the clip path. Once set padding will be applied evenly to\n     * the top, left, right, and bottom when the clip path is generated. If set to zero, the clip area\n     * will be exactly the chart body area minus the margins.\n     * @method clipPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number} [padding=5]\n     * @returns {Number|dc.coordinateGridMixin}\n     */\n    _chart.clipPadding = function (padding) {\n        if (!arguments.length) {\n            return _clipPadding;\n        }\n        _clipPadding = padding;\n        return _chart;\n    };\n\n    function generateClipPath () {\n        var defs = dc.utils.appendOrSelect(_parent, 'defs');\n        // cannot select <clippath> elements; bug in WebKit, must select by id\n        // https://groups.google.com/forum/#!topic/d3-js/6EpAzQ2gU9I\n        var id = getClipPathId();\n        var chartBodyClip = dc.utils.appendOrSelect(defs, '#' + id, 'clipPath').attr('id', id);\n\n        var padding = _clipPadding * 2;\n\n        dc.utils.appendOrSelect(chartBodyClip, 'rect')\n            .attr('width', _chart.xAxisLength() + padding)\n            .attr('height', _chart.yAxisHeight() + padding)\n            .attr('transform', 'translate(-' + _clipPadding + ', -' + _clipPadding + ')');\n    }\n\n    _chart._preprocessData = function () {};\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chart._preprocessData();\n\n        _chart._generateG();\n        generateClipPath();\n\n        drawChart(true);\n\n        configureMouseZoom();\n\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        _chart._preprocessData();\n\n        drawChart(false);\n        generateClipPath();\n\n        return _chart;\n    };\n\n    function drawChart (render) {\n        if (_chart.isOrdinal()) {\n            _brushOn = false;\n        }\n\n        prepareXAxis(_chart.g(), render);\n        _chart._prepareYAxis(_chart.g());\n\n        _chart.plotData();\n\n        if (_chart.elasticX() || _resizing || render) {\n            _chart.renderXAxis(_chart.g());\n        }\n\n        if (_chart.elasticY() || _resizing || render) {\n            _chart.renderYAxis(_chart.g());\n        }\n\n        if (render) {\n            _chart.renderBrush(_chart.g(), false);\n        } else {\n            _chart.redrawBrush(_chart.g(), _resizing);\n        }\n        _chart.fadeDeselectedArea();\n        _resizing = false;\n    }\n\n    function configureMouseZoom () {\n        if (_mouseZoomable) {\n            _chart._enableMouseZoom();\n        } else if (_hasBeenMouseZoomable) {\n            _chart._disableMouseZoom();\n        }\n    }\n\n    _chart._enableMouseZoom = function () {\n        _hasBeenMouseZoomable = true;\n        _zoom.x(_chart.x())\n            .scaleExtent(_zoomScale)\n            .size([_chart.width(), _chart.height()])\n            .duration(_chart.transitionDuration());\n        _chart.root().call(_zoom);\n    };\n\n    _chart._disableMouseZoom = function () {\n        _chart.root().call(_nullZoom);\n    };\n\n    function zoomHandler () {\n        _refocused = true;\n        if (_zoomOutRestrict) {\n            var constraint = _xOriginalDomain;\n            if (_rangeChart) {\n                constraint = intersectExtents(constraint, _rangeChart.x().domain());\n            }\n            var constrained = constrainExtent(_chart.x().domain(), constraint);\n            if (constrained) {\n                _chart.x().domain(constrained);\n            }\n        }\n\n        var domain = _chart.x().domain();\n        var domFilter = dc.filters.RangedFilter(domain[0], domain[1]);\n\n        _chart.replaceFilter(domFilter);\n        _chart.rescale();\n        _chart.redraw();\n\n        if (_rangeChart && !rangesEqual(_chart.filter(), _rangeChart.filter())) {\n            dc.events.trigger(function () {\n                _rangeChart.replaceFilter(domFilter);\n                _rangeChart.redraw();\n            });\n        }\n\n        _chart._invokeZoomedListener();\n\n        dc.events.trigger(function () {\n            _chart.redrawGroup();\n        }, dc.constants.EVENT_DELAY);\n\n        _refocused = !rangesEqual(domain, _xOriginalDomain);\n    }\n\n    function intersectExtents (ext1, ext2) {\n        if (ext1[0] > ext2[1] || ext1[1] < ext2[0]) {\n            console.warn('could not intersect extents');\n        }\n        return [Math.max(ext1[0], ext2[0]), Math.min(ext1[1], ext2[1])];\n    }\n\n    function constrainExtent (extent, constraint) {\n        var size = extent[1] - extent[0];\n        if (extent[0] < constraint[0]) {\n            return [constraint[0], Math.min(constraint[1], dc.utils.add(constraint[0], size, 'millis'))];\n        } else if (extent[1] > constraint[1]) {\n            return [Math.max(constraint[0], dc.utils.subtract(constraint[1], size, 'millis')), constraint[1]];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Zoom this chart to focus on the given range. The given range should be an array containing only\n     * 2 elements (`[start, end]`) defining a range in the x domain. If the range is not given or set\n     * to null, then the zoom will be reset. _For focus to work elasticX has to be turned off;\n     * otherwise focus will be ignored.\n     * @method focus\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @example\n     * chart.on('renderlet', function(chart) {\n     *     // smooth the rendering through event throttling\n     *     dc.events.trigger(function(){\n     *          // focus some other chart to the range selected by user on this chart\n     *          someOtherChart.focus(chart.filter());\n     *     });\n     * })\n     * @param {Array<Number>} [range]\n     */\n    _chart.focus = function (range) {\n        if (hasRangeSelected(range)) {\n            _chart.x().domain(range);\n        } else {\n            _chart.x().domain(_xOriginalDomain);\n        }\n\n        _zoom.x(_chart.x());\n        zoomHandler();\n    };\n\n    _chart.refocused = function () {\n        return _refocused;\n    };\n\n    _chart.focusChart = function (c) {\n        if (!arguments.length) {\n            return _focusChart;\n        }\n        _focusChart = c;\n        _chart.on('filtered', function (chart) {\n            if (!chart.filter()) {\n                dc.events.trigger(function () {\n                    _focusChart.x().domain(_focusChart.xOriginalDomain());\n                });\n            } else if (!rangesEqual(chart.filter(), _focusChart.filter())) {\n                dc.events.trigger(function () {\n                    _focusChart.focus(chart.filter());\n                });\n            }\n        });\n        return _chart;\n    };\n\n    function rangesEqual (range1, range2) {\n        if (!range1 && !range2) {\n            return true;\n        } else if (!range1 || !range2) {\n            return false;\n        } else if (range1.length === 0 && range2.length === 0) {\n            return true;\n        } else if (range1[0].valueOf() === range2[0].valueOf() &&\n            range1[1].valueOf() === range2[1].valueOf()) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Turn on/off the brush-based range filter. When brushing is on then user can drag the mouse\n     * across a chart with a quantitative scale to perform range filtering based on the extent of the\n     * brush, or click on the bars of an ordinal bar chart or slices of a pie chart to filter and\n     * un-filter them. However turning on the brush filter will disable other interactive elements on\n     * the chart such as highlighting, tool tips, and reference lines. Zooming will still be possible\n     * if enabled, but only via scrolling (panning will be disabled.)\n     * @method brushOn\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [brushOn=true]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.brushOn = function (brushOn) {\n        if (!arguments.length) {\n            return _brushOn;\n        }\n        _brushOn = brushOn;\n        return _chart;\n    };\n\n    function hasRangeSelected (range) {\n        return range instanceof Array && range.length > 1;\n    }\n\n    return _chart;\n};\n\n/**\n * Stack Mixin is an mixin that provides cross-chart support of stackability using d3.layout.stack.\n * @name stackMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.stackMixin}\n */\ndc.stackMixin = function (_chart) {\n\n    function prepareValues (layer, layerIdx) {\n        var valAccessor = layer.accessor || _chart.valueAccessor();\n        layer.name = String(layer.name || layerIdx);\n        layer.values = layer.group.all().map(function (d, i) {\n            return {\n                x: _chart.keyAccessor()(d, i),\n                y: layer.hidden ? null : valAccessor(d, i),\n                data: d,\n                layer: layer.name,\n                hidden: layer.hidden\n            };\n        });\n\n        layer.values = layer.values.filter(domainFilter());\n        return layer.values;\n    }\n\n    var _stackLayout = d3.layout.stack()\n        .values(prepareValues);\n\n    var _stack = [];\n    var _titles = {};\n\n    var _hidableStacks = false;\n    var _evadeDomainFilter = false;\n\n    function domainFilter () {\n        if (!_chart.x() || _evadeDomainFilter) {\n            return d3.functor(true);\n        }\n        var xDomain = _chart.x().domain();\n        if (_chart.isOrdinal()) {\n            // TODO #416\n            //var domainSet = d3.set(xDomain);\n            return function () {\n                return true; //domainSet.has(p.x);\n            };\n        }\n        if (_chart.elasticX()) {\n            return function () { return true; };\n        }\n        return function (p) {\n            //return true;\n            return p.x >= xDomain[0] && p.x <= xDomain[xDomain.length - 1];\n        };\n    }\n\n    /**\n     * Stack a new crossfilter group onto this chart with an optional custom value accessor. All stacks\n     * in the same chart will share the same key accessor and therefore the same set of keys.\n     *\n     * For example, in a stacked bar chart, the bars of each stack will be positioned using the same set\n     * of keys on the x axis, while stacked vertically. If name is specified then it will be used to\n     * generate the legend label.\n     * @method stack\n     * @memberof dc.stackMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * // stack group using default accessor\n     * chart.stack(valueSumGroup)\n     * // stack group using custom accessor\n     * .stack(avgByDayGroup, function(d){return d.value.avgByDay;});\n     * @param {crossfilter.group} group\n     * @param {String} [name]\n     * @param {Function} [accessor]\n     * @returns {Array<{group: crossfilter.group, name: String, accessor: Function}>|dc.stackMixin}\n     */\n    _chart.stack = function (group, name, accessor) {\n        if (!arguments.length) {\n            return _stack;\n        }\n\n        if (arguments.length <= 2) {\n            accessor = name;\n        }\n\n        var layer = {group: group};\n        if (typeof name === 'string') {\n            layer.name = name;\n        }\n        if (typeof accessor === 'function') {\n            layer.accessor = accessor;\n        }\n        _stack.push(layer);\n\n        return _chart;\n    };\n\n    dc.override(_chart, 'group', function (g, n, f) {\n        if (!arguments.length) {\n            return _chart._group();\n        }\n        _stack = [];\n        _titles = {};\n        _chart.stack(g, n);\n        if (f) {\n            _chart.valueAccessor(f);\n        }\n        return _chart._group(g, n);\n    });\n\n    /**\n     * Allow named stacks to be hidden or shown by clicking on legend items.\n     * This does not affect the behavior of hideStack or showStack.\n     * @method hidableStacks\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {Boolean} [hidableStacks=false]\n     * @returns {Boolean|dc.stackMixin}\n     */\n    _chart.hidableStacks = function (hidableStacks) {\n        if (!arguments.length) {\n            return _hidableStacks;\n        }\n        _hidableStacks = hidableStacks;\n        return _chart;\n    };\n\n    function findLayerByName (n) {\n        var i = _stack.map(dc.pluck('name')).indexOf(n);\n        return _stack[i];\n    }\n\n    /**\n     * Hide all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @method hideStack\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {String} stackName\n     * @returns {dc.stackMixin}\n     */\n    _chart.hideStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = true;\n        }\n        return _chart;\n    };\n\n    /**\n     * Show all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @method showStack\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {String} stackName\n     * @returns {dc.stackMixin}\n     */\n    _chart.showStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = false;\n        }\n        return _chart;\n    };\n\n    _chart.getValueAccessorByIndex = function (index) {\n        return _stack[index].accessor || _chart.valueAccessor();\n    };\n\n    _chart.yAxisMin = function () {\n        var min = d3.min(flattenStack(), function (p) {\n            return (p.y < 0) ? (p.y + p.y0) : p.y0;\n        });\n\n        return dc.utils.subtract(min, _chart.yAxisPadding());\n\n    };\n\n    _chart.yAxisMax = function () {\n        var max = d3.max(flattenStack(), function (p) {\n            return (p.y > 0) ? (p.y + p.y0) : p.y0;\n        });\n\n        return dc.utils.add(max, _chart.yAxisPadding());\n    };\n\n    function flattenStack () {\n        var valueses = _chart.data().map(function (layer) { return layer.values; });\n        return Array.prototype.concat.apply([], valueses);\n    }\n\n    _chart.xAxisMin = function () {\n        var min = d3.min(flattenStack(), dc.pluck('x'));\n        return dc.utils.subtract(min, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    };\n\n    _chart.xAxisMax = function () {\n        var max = d3.max(flattenStack(), dc.pluck('x'));\n        return dc.utils.add(max, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    };\n\n    /**\n     * Set or get the title function. Chart class will use this function to render svg title (usually interpreted by\n     * browser as tooltips) for each child element in the chart, i.e. a slice in a pie chart or a bubble in a bubble chart.\n     * Almost every chart supports title function however in grid coordinate chart you need to turn off brush in order to\n     * use title otherwise the brush layer will block tooltip trigger.\n     *\n     * If the first argument is a stack name, the title function will get or set the title for that stack. If stackName\n     * is not provided, the first stack is implied.\n     * @method title\n     * @memberof dc.stackMixin\n     * @instance\n     * @example\n     * // set a title function on 'first stack'\n     * chart.title('first stack', function(d) { return d.key + ': ' + d.value; });\n     * // get a title function from 'second stack'\n     * var secondTitleFunction = chart.title('second stack');\n     * @param {String} [stackName]\n     * @param {Function} [titleAccessor]\n     * @returns {String|dc.stackMixin}\n     */\n    dc.override(_chart, 'title', function (stackName, titleAccessor) {\n        if (!stackName) {\n            return _chart._title();\n        }\n\n        if (typeof stackName === 'function') {\n            return _chart._title(stackName);\n        }\n        if (stackName === _chart._groupName && typeof titleAccessor === 'function') {\n            return _chart._title(titleAccessor);\n        }\n\n        if (typeof titleAccessor !== 'function') {\n            return _titles[stackName] || _chart._title();\n        }\n\n        _titles[stackName] = titleAccessor;\n\n        return _chart;\n    });\n\n    /**\n     * Gets or sets the stack layout algorithm, which computes a baseline for each stack and\n     * propagates it to the next.\n     * @method stackLayout\n     * @memberof dc.stackMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Stack-Layout.md d3.layout.stack}\n     * @param {Function} [stack=d3.layout.stack]\n     * @returns {Function|dc.stackMixin}\n     */\n    _chart.stackLayout = function (stack) {\n        if (!arguments.length) {\n            return _stackLayout;\n        }\n        _stackLayout = stack;\n        if (_stackLayout.values() === d3.layout.stack().values()) {\n            _stackLayout.values(prepareValues);\n        }\n        return _chart;\n    };\n\n    /**\n     * Since dc.js 2.0, there has been {@link https://github.com/dc-js/dc.js/issues/949 an issue}\n     * where points are filtered to the current domain. While this is a useful optimization, it is\n     * incorrectly implemented: the next point outside the domain is required in order to draw lines\n     * that are clipped to the bounds, as well as bars that are partly clipped.\n     *\n     * A fix will be included in dc.js 2.1.x, but a workaround is needed for dc.js 2.0 and until\n     * that fix is published, so set this flag to skip any filtering of points.\n     *\n     * Once the bug is fixed, this flag will have no effect, and it will be deprecated.\n     * @method evadeDomainFilter\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {Boolean} [evadeDomainFilter=false]\n     * @returns {Boolean|dc.stackMixin}\n     */\n    _chart.evadeDomainFilter = function (evadeDomainFilter) {\n        if (!arguments.length) {\n            return _evadeDomainFilter;\n        }\n        _evadeDomainFilter = evadeDomainFilter;\n        return _chart;\n    };\n\n    function visability (l) {\n        return !l.hidden;\n    }\n\n    _chart.data(function () {\n        var layers = _stack.filter(visability);\n        return layers.length ? _chart.stackLayout()(layers) : [];\n    });\n\n    _chart._ordinalXDomain = function () {\n        var flat = flattenStack().map(dc.pluck('data'));\n        var ordered = _chart._computeOrderedGroups(flat);\n        return ordered.map(_chart.keyAccessor());\n    };\n\n    _chart.colorAccessor(function (d) {\n        var layer = this.layer || this.name || d.name || d.layer;\n        return layer;\n    });\n\n    _chart.legendables = function () {\n        return _stack.map(function (layer, i) {\n            return {\n                chart: _chart,\n                name: layer.name,\n                hidden: layer.hidden || false,\n                color: _chart.getColor.call(layer, layer.values, i)\n            };\n        });\n    };\n\n    _chart.isLegendableHidden = function (d) {\n        var layer = findLayerByName(d.name);\n        return layer ? layer.hidden : false;\n    };\n\n    _chart.legendToggle = function (d) {\n        if (_hidableStacks) {\n            if (_chart.isLegendableHidden(d)) {\n                _chart.showStack(d.name);\n            } else {\n                _chart.hideStack(d.name);\n            }\n            //_chart.redraw();\n            _chart.renderGroup();\n        }\n    };\n\n    return _chart;\n};\n\n/**\n * Cap is a mixin that groups small data elements below a _cap_ into an *others* grouping for both the\n * Row and Pie Charts.\n *\n * The top ordered elements in the group up to the cap amount will be kept in the chart, and the rest\n * will be replaced with an *others* element, with value equal to the sum of the replaced values. The\n * keys of the elements below the cap limit are recorded in order to filter by those keys when the\n * others* element is clicked.\n * @name capMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.capMixin}\n */\ndc.capMixin = function (_chart) {\n    var _cap = Infinity, _takeFront = true;\n    var _othersLabel = 'Others';\n\n    // emulate old group.top(N) ordering\n    _chart.ordering(function (kv) {\n        return -kv.value;\n    });\n\n    var _othersGrouper = function (topItems, restItems) {\n        var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n            restKeys = restItems.map(_chart.keyAccessor());\n        if (restItemsSum > 0) {\n            return topItems.concat([{\n                others: restKeys,\n                key: _chart.othersLabel(),\n                value: restItemsSum\n            }]);\n        }\n        return topItems;\n    };\n\n    _chart.cappedKeyAccessor = function (d, i) {\n        if (d.others) {\n            return d.key;\n        }\n        return _chart.keyAccessor()(d, i);\n    };\n\n    _chart.cappedValueAccessor = function (d, i) {\n        if (d.others) {\n            return d.value;\n        }\n        return _chart.valueAccessor()(d, i);\n    };\n\n    // return N \"top\" groups, where N is the cap, sorted by baseMixin.ordering\n    // whether top means front or back depends on takeFront\n    _chart.data(function (group) {\n        if (_cap === Infinity) {\n            return _chart._computeOrderedGroups(group.all());\n        } else {\n            var items = group.all(), rest;\n            items = _chart._computeOrderedGroups(items); // sort by baseMixin.ordering\n\n            if (_cap) {\n                if (_takeFront) {\n                    rest = items.slice(_cap);\n                    items = items.slice(0, _cap);\n                } else {\n                    var start = Math.max(0, items.length - _cap);\n                    rest = items.slice(0, start);\n                    items = items.slice(start);\n                }\n            }\n\n            if (_othersGrouper) {\n                return _othersGrouper(items, rest);\n            }\n            return items;\n        }\n    });\n\n    /**\n     * Get or set the count of elements to that will be included in the cap. If there is an\n     * {@link dc.capMixin#othersGrouper othersGrouper}, any further elements will be combined in an\n     * extra element with its name determined by {@link dc.capMixin#othersLabel othersLabel}.\n     *\n     * As of dc.js 2.1 and onward, the capped charts use\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all()}\n     * and {@link dc.baseMixin#ordering baseMixin.ordering()} to determine the order of\n     * elements. Then `cap` and {@link dc.capMixin#takeFront takeFront} determine how many elements\n     * to keep, from which end of the resulting array.\n     *\n     * **Migration note:** Up through dc.js 2.0.*, capping used\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_top group.top(N)},\n     * which selects the largest items according to\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_order group.order()}.\n     * The chart then sorted the items according to {@link dc.baseMixin#ordering baseMixin.ordering()}.\n     * So the two values essentially had to agree, but if the `group.order()` was incorrect (it's\n     * easy to forget about), the wrong rows or slices would be displayed, in the correct order.\n     *\n     * If your chart previously relied on `group.order()`, use `chart.ordering()` instead. As of\n     * 2.1.5, the ordering defaults to sorting from greatest to least like `group.top(N)` did.\n     *\n     * If you want to cap by one ordering but sort by another, please\n     * [file an issue](https://github.com/dc-js/dc.js/issues/new) - it's still possible but we'll\n     * need to work up an example.\n     * @method cap\n     * @memberof dc.capMixin\n     * @instance\n     * @param {Number} [count=Infinity]\n     * @returns {Number|dc.capMixin}\n     */\n    _chart.cap = function (count) {\n        if (!arguments.length) {\n            return _cap;\n        }\n        _cap = count;\n        return _chart;\n    };\n\n    /**\n     * Get or set the direction of capping. If set, the chart takes the first\n     * {@link dc.capMixin#cap cap} elements from the sorted array of elements; otherwise\n     * it takes the last `cap` elements.\n     * @method takeFront\n     * @memberof dc.capMixin\n     * @instance\n     * @param {Boolean} [takeFront=true]\n     * @returns {Boolean|dc.capMixin}\n     */\n    _chart.takeFront = function (takeFront) {\n        if (!arguments.length) {\n            return _takeFront;\n        }\n        _takeFront = takeFront;\n        return _chart;\n    };\n\n    /**\n     * Get or set the label for *Others* slice when slices cap is specified.\n     * @method othersLabel\n     * @memberof dc.capMixin\n     * @instance\n     * @param {String} [label=\"Others\"]\n     * @returns {String|dc.capMixin}\n     */\n    _chart.othersLabel = function (label) {\n        if (!arguments.length) {\n            return _othersLabel;\n        }\n        _othersLabel = label;\n        return _chart;\n    };\n\n    /**\n     * Get or set the grouper function that will perform the insertion of data for the *Others* slice\n     * if the slices cap is specified. If set to a falsy value, no others will be added.\n     *\n     * The grouper function takes an array of included (\"top\") items, and an array of the rest of\n     * the items. By default the grouper function computes the sum of the rest.\n     * @method othersGrouper\n     * @memberof dc.capMixin\n     * @instance\n     * @example\n     * // Do not show others\n     * chart.othersGrouper(null);\n     * // Default others grouper\n     * chart.othersGrouper(function (topItems, restItems) {\n     *     var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n     *         restKeys = restItems.map(_chart.keyAccessor());\n     *     if (restItemsSum > 0) {\n     *         return topItems.concat([{\n     *             others: restKeys,\n     *             key: _chart.othersLabel(),\n     *             value: restItemsSum\n     *         }]);\n     *     }\n     *     return topItems;\n     * });\n     * @param {Function} [grouperFunction]\n     * @returns {Function|dc.capMixin}\n     */\n    _chart.othersGrouper = function (grouperFunction) {\n        if (!arguments.length) {\n            return _othersGrouper;\n        }\n        _othersGrouper = grouperFunction;\n        return _chart;\n    };\n\n    dc.override(_chart, 'onClick', function (d) {\n        if (d.others) {\n            _chart.filter([d.others]);\n        }\n        _chart._onClick(d);\n    });\n\n    return _chart;\n};\n\n/**\n * This Mixin provides reusable functionalities for any chart that needs to visualize data using bubbles.\n * @name bubbleMixin\n * @memberof dc\n * @mixin\n * @mixes dc.colorMixin\n * @param {Object} _chart\n * @returns {dc.bubbleMixin}\n */\ndc.bubbleMixin = function (_chart) {\n    var _maxBubbleRelativeSize = 0.3;\n    var _minRadiusWithLabel = 10;\n    var _sortBubbleSize = false;\n    var _elasticRadius = false;\n\n    _chart.BUBBLE_NODE_CLASS = 'node';\n    _chart.BUBBLE_CLASS = 'bubble';\n    _chart.MIN_RADIUS = 10;\n\n    _chart = dc.colorMixin(_chart);\n\n    _chart.renderLabel(true);\n\n    _chart.data(function (group) {\n        var data = group.all();\n        if (_sortBubbleSize) {\n            // sort descending so smaller bubbles are on top\n            var radiusAccessor = _chart.radiusValueAccessor();\n            data.sort(function (a, b) { return d3.descending(radiusAccessor(a), radiusAccessor(b)); });\n        }\n        return data;\n    });\n\n    var _r = d3.scale.linear().domain([0, 100]);\n\n    var _rValueAccessor = function (d) {\n        return d.r;\n    };\n\n    /**\n     * Get or set the bubble radius scale. By default the bubble chart uses\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md#linear d3.scale.linear().domain([0, 100])}\n     * as its radius scale.\n     * @method r\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [bubbleRadiusScale=d3.scale.linear().domain([0, 100])]\n     * @returns {d3.scale|dc.bubbleMixin}\n     */\n    _chart.r = function (bubbleRadiusScale) {\n        if (!arguments.length) {\n            return _r;\n        }\n        _r = bubbleRadiusScale;\n        return _chart;\n    };\n\n    /**\n     * Turn on or off the elastic bubble radius feature, or return the value of the flag. If this\n     * feature is turned on, then bubble radii will be automatically rescaled to fit the chart better.\n     * @method elasticRadius\n     * @memberof dc.bubbleChart\n     * @instance\n     * @param {Boolean} [elasticRadius=false]\n     * @returns {Boolean|dc.bubbleChart}\n     */\n    _chart.elasticRadius = function (elasticRadius) {\n        if (!arguments.length) {\n            return _elasticRadius;\n        }\n        _elasticRadius = elasticRadius;\n        return _chart;\n    };\n\n    _chart.calculateRadiusDomain = function () {\n        if (_elasticRadius) {\n            _chart.r().domain([_chart.rMin(), _chart.rMax()]);\n        }\n    };\n\n    /**\n     * Get or set the radius value accessor function. If set, the radius value accessor function will\n     * be used to retrieve a data value for each bubble. The data retrieved then will be mapped using\n     * the r scale to the actual bubble radius. This allows you to encode a data dimension using bubble\n     * size.\n     * @method radiusValueAccessor\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Function} [radiusValueAccessor]\n     * @returns {Function|dc.bubbleMixin}\n     */\n    _chart.radiusValueAccessor = function (radiusValueAccessor) {\n        if (!arguments.length) {\n            return _rValueAccessor;\n        }\n        _rValueAccessor = radiusValueAccessor;\n        return _chart;\n    };\n\n    _chart.rMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.radiusValueAccessor()(e);\n        });\n        return min;\n    };\n\n    _chart.rMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.radiusValueAccessor()(e);\n        });\n        return max;\n    };\n\n    _chart.bubbleR = function (d) {\n        var value = _chart.radiusValueAccessor()(d);\n        var r = _chart.r()(value);\n        if (isNaN(r) || value <= 0) {\n            r = 0;\n        }\n        return r;\n    };\n\n    var labelFunction = function (d) {\n        return _chart.label()(d);\n    };\n\n    var shouldLabel = function (d) {\n        return (_chart.bubbleR(d) > _minRadiusWithLabel);\n    };\n\n    var labelOpacity = function (d) {\n        return shouldLabel(d) ? 1 : 0;\n    };\n\n    var labelPointerEvent = function (d) {\n        return shouldLabel(d) ? 'all' : 'none';\n    };\n\n    _chart._doRenderLabel = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n            var label = bubbleGEnter.select('text');\n\n            if (label.empty()) {\n                label = bubbleGEnter.append('text')\n                    .attr('text-anchor', 'middle')\n                    .attr('dy', '.3em')\n                    .on('click', _chart.onClick);\n            }\n\n            label\n                .attr('opacity', 0)\n                .attr('pointer-events', labelPointerEvent)\n                .text(labelFunction);\n            dc.transition(label, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', labelOpacity);\n        }\n    };\n\n    _chart.doUpdateLabels = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n            var labels = bubbleGEnter.select('text')\n                .attr('pointer-events', labelPointerEvent)\n                .text(labelFunction);\n            dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', labelOpacity);\n        }\n    };\n\n    var titleFunction = function (d) {\n        return _chart.title()(d);\n    };\n\n    _chart._doRenderTitles = function (g) {\n        if (_chart.renderTitle()) {\n            var title = g.select('title');\n\n            if (title.empty()) {\n                g.append('title').text(titleFunction);\n            }\n        }\n    };\n\n    _chart.doUpdateTitles = function (g) {\n        if (_chart.renderTitle()) {\n            g.select('title').text(titleFunction);\n        }\n    };\n\n    /**\n     * Turn on or off the bubble sorting feature, or return the value of the flag. If enabled,\n     * bubbles will be sorted by their radius, with smaller bubbles in front.\n     * @method sortBubbleSize\n     * @memberof dc.bubbleChart\n     * @instance\n     * @param {Boolean} [sortBubbleSize=false]\n     * @returns {Boolean|dc.bubbleChart}\n     */\n    _chart.sortBubbleSize = function (sortBubbleSize) {\n        if (!arguments.length) {\n            return _sortBubbleSize;\n        }\n        _sortBubbleSize = sortBubbleSize;\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimum radius. This will be used to initialize the radius scale's range.\n     * @method minRadius\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [radius=10]\n     * @returns {Number|dc.bubbleMixin}\n     */\n    _chart.minRadius = function (radius) {\n        if (!arguments.length) {\n            return _chart.MIN_RADIUS;\n        }\n        _chart.MIN_RADIUS = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimum radius for label rendering. If a bubble's radius is less than this value\n     * then no label will be rendered.\n     * @method minRadiusWithLabel\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [radius=10]\n     * @returns {Number|dc.bubbleMixin}\n     */\n\n    _chart.minRadiusWithLabel = function (radius) {\n        if (!arguments.length) {\n            return _minRadiusWithLabel;\n        }\n        _minRadiusWithLabel = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the maximum relative size of a bubble to the length of x axis. This value is useful\n     * when the difference in radius between bubbles is too great.\n     * @method maxBubbleRelativeSize\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [relativeSize=0.3]\n     * @returns {Number|dc.bubbleMixin}\n     */\n    _chart.maxBubbleRelativeSize = function (relativeSize) {\n        if (!arguments.length) {\n            return _maxBubbleRelativeSize;\n        }\n        _maxBubbleRelativeSize = relativeSize;\n        return _chart;\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function (d) {\n                if (_chart.isSelectedNode(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n    };\n\n    _chart.onClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    return _chart;\n};\n\n/**\n * The pie chart implementation is usually used to visualize a small categorical distribution.  The pie\n * chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each\n * slice relative to the sum of all values. Slices are ordered by {@link dc.baseMixin#ordering ordering}\n * which defaults to sorting by key.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class pieChart\n * @memberof dc\n * @mixes dc.capMixin\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a pie chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.pieChart('#chart-container1');\n * // create a pie chart under #chart-container2 element using chart group A\n * var chart2 = dc.pieChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.pieChart}\n */\ndc.pieChart = function (parent, chartGroup) {\n    var DEFAULT_MIN_ANGLE_FOR_LABEL = 0.5;\n\n    var _sliceCssClass = 'pie-slice';\n    var _labelCssClass = 'pie-label';\n    var _sliceGroupCssClass = 'pie-slice-group';\n    var _labelGroupCssClass = 'pie-label-group';\n    var _emptyCssClass = 'empty-chart';\n    var _emptyTitle = 'empty';\n\n    var _radius,\n        _givenRadius, // specified radius, if any\n        _innerRadius = 0,\n        _externalRadiusPadding = 0;\n\n    var _g;\n    var _cx;\n    var _cy;\n    var _minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL;\n    var _externalLabelRadius;\n    var _drawPaths = false;\n    var _chart = dc.capMixin(dc.colorMixin(dc.baseMixin({})));\n\n    _chart.colorAccessor(_chart.cappedKeyAccessor);\n\n    _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n    });\n\n    /**\n     * Get or set the maximum number of slices the pie chart will generate. The top slices are determined by\n     * value from high to low. Other slices exeeding the cap will be rolled up into one single *Others* slice.\n     * @method slicesCap\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cap]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.slicesCap = _chart.cap;\n\n    _chart.label(_chart.cappedKeyAccessor);\n    _chart.renderLabel(true);\n\n    _chart.transitionDuration(350);\n    _chart.transitionDelay(0);\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg()\n            .append('g')\n            .attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n\n        _g.append('g').attr('class', _sliceGroupCssClass);\n        _g.append('g').attr('class', _labelGroupCssClass);\n\n        drawChart();\n\n        return _chart;\n    };\n\n    function drawChart () {\n        // set radius from chart size if none given, or if given radius is too large\n        var maxRadius =  d3.min([_chart.width(), _chart.height()]) / 2;\n        _radius = _givenRadius && _givenRadius < maxRadius ? _givenRadius : maxRadius;\n\n        var arc = buildArcs();\n\n        var pie = pieLayout();\n        var pieData;\n        // if we have data...\n        if (d3.sum(_chart.data(), _chart.valueAccessor())) {\n            pieData = pie(_chart.data());\n            _g.classed(_emptyCssClass, false);\n        } else {\n            // otherwise we'd be getting NaNs, so override\n            // note: abuse others for its ignoring the value accessor\n            pieData = pie([{key: _emptyTitle, value: 1, others: [_emptyTitle]}]);\n            _g.classed(_emptyCssClass, true);\n        }\n\n        if (_g) {\n            var slices = _g.select('g.' + _sliceGroupCssClass)\n                .selectAll('g.' + _sliceCssClass)\n                .data(pieData);\n\n            var labels = _g.select('g.' + _labelGroupCssClass)\n                .selectAll('text.' + _labelCssClass)\n                .data(pieData);\n\n            createElements(slices, labels, arc, pieData);\n\n            updateElements(pieData, arc);\n\n            removeElements(slices, labels);\n\n            highlightFilter();\n\n            dc.transition(_g, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n        }\n    }\n\n    function createElements (slices, labels, arc, pieData) {\n        var slicesEnter = createSliceNodes(slices);\n\n        createSlicePath(slicesEnter, arc);\n\n        createTitles(slicesEnter);\n\n        createLabels(labels, pieData, arc);\n    }\n\n    function createSliceNodes (slices) {\n        var slicesEnter = slices\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return _sliceCssClass + ' _' + i;\n            });\n        return slicesEnter;\n    }\n\n    function createSlicePath (slicesEnter, arc) {\n        var slicePath = slicesEnter.append('path')\n            .attr('fill', fill)\n            .on('click', onClick)\n            .attr('d', function (d, i) {\n                return safeArc(d, i, arc);\n            });\n\n        var transition = dc.transition(slicePath, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenPie);\n        }\n    }\n\n    function createTitles (slicesEnter) {\n        if (_chart.renderTitle()) {\n            slicesEnter.append('title').text(function (d) {\n                return _chart.title()(d.data);\n            });\n        }\n    }\n\n    _chart._applyLabelText = function (labels) {\n        labels\n            .text(function (d) {\n                var data = d.data;\n                if ((sliceHasNoData(data) || sliceTooSmall(d)) && !isSelectedSlice(d)) {\n                    return '';\n                }\n                return _chart.label()(d.data);\n            });\n    };\n\n    function positionLabels (labels, arc) {\n        _chart._applyLabelText(labels);\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', function (d) {\n                return labelPosition(d, arc);\n            })\n            .attr('text-anchor', 'middle');\n    }\n\n    function highlightSlice (i, whether) {\n        _chart.select('g.pie-slice._' + i)\n            .classed('highlight', whether);\n    }\n\n    function createLabels (labels, pieData, arc) {\n        if (_chart.renderLabel()) {\n            var labelsEnter = labels\n                .enter()\n                .append('text')\n                .attr('class', function (d, i) {\n                    var classes = _sliceCssClass + ' ' + _labelCssClass + ' _' + i;\n                    if (_externalLabelRadius) {\n                        classes += ' external';\n                    }\n                    return classes;\n                })\n                .on('click', onClick)\n                .on('mouseover', function (d, i) {\n                    highlightSlice(i, true);\n                })\n                .on('mouseout', function (d, i) {\n                    highlightSlice(i, false);\n                });\n            positionLabels(labelsEnter, arc);\n            if (_externalLabelRadius && _drawPaths) {\n                updateLabelPaths(pieData, arc);\n            }\n        }\n    }\n\n    function updateLabelPaths (pieData, arc) {\n        var polyline = _g.selectAll('polyline.' + _sliceCssClass)\n                .data(pieData);\n\n        polyline\n                .enter()\n                .append('polyline')\n                .attr('class', function (d, i) {\n                    return 'pie-path _' + i + ' ' + _sliceCssClass;\n                })\n                .on('click', onClick)\n                .on('mouseover', function (d, i) {\n                    highlightSlice(i, true);\n                })\n                .on('mouseout', function (d, i) {\n                    highlightSlice(i, false);\n                });\n\n        polyline.exit().remove();\n        var arc2 = d3.svg.arc()\n                .outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .innerRadius(_radius - _externalRadiusPadding);\n        var transition = dc.transition(polyline, _chart.transitionDuration(), _chart.transitionDelay());\n        // this is one rare case where d3.selection differs from d3.transition\n        if (transition.attrTween) {\n            transition\n                .attrTween('points', function (d) {\n                    var current = this._current || d;\n                    current = {startAngle: current.startAngle, endAngle: current.endAngle};\n                    var interpolate = d3.interpolate(current, d);\n                    this._current = interpolate(0);\n                    return function (t) {\n                        var d2 = interpolate(t);\n                        return [arc.centroid(d2), arc2.centroid(d2)];\n                    };\n                });\n        } else {\n            transition.attr('points', function (d) {\n                return [arc.centroid(d), arc2.centroid(d)];\n            });\n        }\n        transition.style('visibility', function (d) {\n            return d.endAngle - d.startAngle < 0.0001 ? 'hidden' : 'visible';\n        });\n\n    }\n\n    function updateElements (pieData, arc) {\n        updateSlicePaths(pieData, arc);\n        updateLabels(pieData, arc);\n        updateTitles(pieData);\n    }\n\n    function updateSlicePaths (pieData, arc) {\n        var slicePaths = _g.selectAll('g.' + _sliceCssClass)\n            .data(pieData)\n            .select('path')\n            .attr('d', function (d, i) {\n                return safeArc(d, i, arc);\n            });\n        var transition = dc.transition(slicePaths, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenPie);\n        }\n        transition.attr('fill', fill);\n    }\n\n    function updateLabels (pieData, arc) {\n        if (_chart.renderLabel()) {\n            var labels = _g.selectAll('text.' + _labelCssClass)\n                .data(pieData);\n            positionLabels(labels, arc);\n            if (_externalLabelRadius && _drawPaths) {\n                updateLabelPaths(pieData, arc);\n            }\n        }\n    }\n\n    function updateTitles (pieData) {\n        if (_chart.renderTitle()) {\n            _g.selectAll('g.' + _sliceCssClass)\n                .data(pieData)\n                .select('title')\n                .text(function (d) {\n                    return _chart.title()(d.data);\n                });\n        }\n    }\n\n    function removeElements (slices, labels) {\n        slices.exit().remove();\n        labels.exit().remove();\n    }\n\n    function highlightFilter () {\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.' + _sliceCssClass).each(function (d) {\n                if (isSelectedSlice(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.' + _sliceCssClass).each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    }\n\n    /**\n     * Get or set the external radius padding of the pie chart. This will force the radius of the\n     * pie chart to become smaller or larger depending on the value.\n     * @method externalRadiusPadding\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [externalRadiusPadding=0]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.externalRadiusPadding = function (externalRadiusPadding) {\n        if (!arguments.length) {\n            return _externalRadiusPadding;\n        }\n        _externalRadiusPadding = externalRadiusPadding;\n        return _chart;\n    };\n\n    /**\n     * Get or set the inner radius of the pie chart. If the inner radius is greater than 0px then the\n     * pie chart will be rendered as a doughnut chart.\n     * @method innerRadius\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [innerRadius=0]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.innerRadius = function (innerRadius) {\n        if (!arguments.length) {\n            return _innerRadius;\n        }\n        _innerRadius = innerRadius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the outer radius. If the radius is not set, it will be half of the minimum of the\n     * chart width and height.\n     * @method radius\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [radius]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.radius = function (radius) {\n        if (!arguments.length) {\n            return _givenRadius;\n        }\n        _givenRadius = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set center x coordinate position. Default is center of svg.\n     * @method cx\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cx]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.cx = function (cx) {\n        if (!arguments.length) {\n            return (_cx ||  _chart.width() / 2);\n        }\n        _cx = cx;\n        return _chart;\n    };\n\n    /**\n     * Get or set center y coordinate position. Default is center of svg.\n     * @method cy\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cy]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.cy = function (cy) {\n        if (!arguments.length) {\n            return (_cy ||  _chart.height() / 2);\n        }\n        _cy = cy;\n        return _chart;\n    };\n\n    function buildArcs () {\n        return d3.svg.arc()\n            .outerRadius(_radius - _externalRadiusPadding)\n            .innerRadius(_innerRadius);\n    }\n\n    function isSelectedSlice (d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d.data));\n    }\n\n    _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not\n     * display a slice label.\n     * @method minAngleForLabel\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [minAngleForLabel=0.5]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.minAngleForLabel = function (minAngleForLabel) {\n        if (!arguments.length) {\n            return _minAngleForLabel;\n        }\n        _minAngleForLabel = minAngleForLabel;\n        return _chart;\n    };\n\n    function pieLayout () {\n        return d3.layout.pie().sort(null).value(_chart.cappedValueAccessor);\n    }\n\n    function sliceTooSmall (d) {\n        var angle = (d.endAngle - d.startAngle);\n        return isNaN(angle) || angle < _minAngleForLabel;\n    }\n\n    function sliceHasNoData (d) {\n        return _chart.cappedValueAccessor(d) === 0;\n    }\n\n    function tweenPie (b) {\n        b.innerRadius = _innerRadius;\n        var current = this._current;\n        if (isOffCanvas(current)) {\n            current = {startAngle: 0, endAngle: 0};\n        } else {\n            // only interpolate startAngle & endAngle, not the whole data object\n            current = {startAngle: current.startAngle, endAngle: current.endAngle};\n        }\n        var i = d3.interpolate(current, b);\n        this._current = i(0);\n        return function (t) {\n            return safeArc(i(t), 0, buildArcs());\n        };\n    }\n\n    function isOffCanvas (current) {\n        return !current || isNaN(current.startAngle) || isNaN(current.endAngle);\n    }\n\n    function fill (d, i) {\n        return _chart.getColor(d.data, i);\n    }\n\n    function onClick (d, i) {\n        if (_g.attr('class') !== _emptyCssClass) {\n            _chart.onClick(d.data, i);\n        }\n    }\n\n    function safeArc (d, i, arc) {\n        var path = arc(d, i);\n        if (path.indexOf('NaN') >= 0) {\n            path = 'M0,0';\n        }\n        return path;\n    }\n\n    /**\n     * Title to use for the only slice when there is no data.\n     * @method emptyTitle\n     * @memberof dc.pieChart\n     * @instance\n     * @param {String} [title]\n     * @returns {String|dc.pieChart}\n     */\n    _chart.emptyTitle = function (title) {\n        if (arguments.length === 0) {\n            return _emptyTitle;\n        }\n        _emptyTitle = title;\n        return _chart;\n    };\n\n    /**\n     * Position slice labels offset from the outer edge of the chart.\n     *\n     * The argument specifies the extra radius to be added for slice labels.\n     * @method externalLabels\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [externalLabelRadius]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.externalLabels = function (externalLabelRadius) {\n        if (arguments.length === 0) {\n            return _externalLabelRadius;\n        } else if (externalLabelRadius) {\n            _externalLabelRadius = externalLabelRadius;\n        } else {\n            _externalLabelRadius = undefined;\n        }\n\n        return _chart;\n    };\n\n    /**\n     * Get or set whether to draw lines from pie slices to their labels.\n     *\n     * @method drawPaths\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Boolean} [drawPaths]\n     * @returns {Boolean|dc.pieChart}\n     */\n    _chart.drawPaths = function (drawPaths) {\n        if (arguments.length === 0) {\n            return _drawPaths;\n        }\n        _drawPaths = drawPaths;\n        return _chart;\n    };\n\n    function labelPosition (d, arc) {\n        var centroid;\n        if (_externalLabelRadius) {\n            centroid = d3.svg.arc()\n                .outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .innerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .centroid(d);\n        } else {\n            centroid = arc.centroid(d);\n        }\n        if (isNaN(centroid[0]) || isNaN(centroid[1])) {\n            return 'translate(0,0)';\n        } else {\n            return 'translate(' + centroid + ')';\n        }\n    }\n\n    _chart.legendables = function () {\n        return _chart.data().map(function (d, i) {\n            var legendable = {name: d.key, data: d.value, others: d.others, chart: _chart};\n            legendable.color = _chart.getColor(d, i);\n            return legendable;\n        });\n    };\n\n    _chart.legendHighlight = function (d) {\n        highlightSliceFromLegendable(d, true);\n    };\n\n    _chart.legendReset = function (d) {\n        highlightSliceFromLegendable(d, false);\n    };\n\n    _chart.legendToggle = function (d) {\n        _chart.onClick({key: d.name, others: d.others});\n    };\n\n    function highlightSliceFromLegendable (legendable, highlighted) {\n        _chart.selectAll('g.pie-slice').each(function (d) {\n            if (legendable.name === d.data.key) {\n                d3.select(this).classed('highlight', highlighted);\n            }\n        });\n    }\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Concrete bar chart/histogram implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class barChart\n * @memberof dc\n * @mixes dc.stackMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a bar chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.barChart('#chart-container1');\n * // create a bar chart under #chart-container2 element using chart group A\n * var chart2 = dc.barChart('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.barChart(compositeChart);\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n * specifying a dom block element such as a div; or a dom element or d3 selection.  If the bar\n * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n * composite chart instance instead.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.barChart}\n */\ndc.barChart = function (parent, chartGroup) {\n    var MIN_BAR_WIDTH = 1;\n    var DEFAULT_GAP_BETWEEN_BARS = 2;\n    var LABEL_PADDING = 3;\n\n    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n\n    var _gap = DEFAULT_GAP_BETWEEN_BARS;\n    var _centerBar = false;\n    var _alwaysUseRounding = false;\n\n    var _barWidth;\n\n    dc.override(_chart, 'rescale', function () {\n        _chart._rescale();\n        _barWidth = undefined;\n        return _chart;\n    });\n\n    dc.override(_chart, 'render', function () {\n        if (_chart.round() && _centerBar && !_alwaysUseRounding) {\n            dc.logger.warn('By default, brush rounding is disabled if bars are centered. ' +\n                         'See dc.js bar chart API documentation for details.');\n        }\n\n        return _chart._render();\n    });\n\n    _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n    }, false);\n\n    _chart.plotData = function () {\n        var layers = _chart.chartBodyG().selectAll('g.stack')\n            .data(_chart.data());\n\n        calculateBarWidth();\n\n        layers\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return 'stack ' + '_' + i;\n            });\n\n        var last = layers.size() - 1;\n        layers.each(function (d, i) {\n            var layer = d3.select(this);\n\n            renderBars(layer, i, d);\n\n            if (_chart.renderLabel() && last === i) {\n                renderLabels(layer, i, d);\n            }\n        });\n    };\n\n    function barHeight (d) {\n        return dc.utils.safeNumber(Math.abs(_chart.y()(d.y + d.y0) - _chart.y()(d.y0)));\n    }\n\n    function renderLabels (layer, layerIndex, d) {\n        var labels = layer.selectAll('text.barLabel')\n            .data(d.values, dc.pluck('x'));\n\n        labels.enter()\n            .append('text')\n            .attr('class', 'barLabel')\n            .attr('text-anchor', 'middle');\n\n        if (_chart.isOrdinal()) {\n            labels.on('click', _chart.onClick);\n            labels.attr('cursor', 'pointer');\n        }\n\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) {\n                var x = _chart.x()(d.x);\n                if (!_centerBar) {\n                    x += _barWidth / 2;\n                }\n                return dc.utils.safeNumber(x);\n            })\n            .attr('y', function (d) {\n                var y = _chart.y()(d.y + d.y0);\n\n                if (d.y < 0) {\n                    y -= barHeight(d);\n                }\n\n                return dc.utils.safeNumber(y - LABEL_PADDING);\n            })\n            .text(function (d) {\n                return _chart.label()(d);\n            });\n\n        dc.transition(labels.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('height', 0)\n            .remove();\n    }\n\n    function renderBars (layer, layerIndex, d) {\n        var bars = layer.selectAll('rect.bar')\n            .data(d.values, dc.pluck('x'));\n\n        var enter = bars.enter()\n            .append('rect')\n            .attr('class', 'bar')\n            .attr('fill', dc.pluck('data', _chart.getColor))\n            .attr('y', _chart.yAxisHeight())\n            .attr('height', 0);\n\n        if (_chart.renderTitle()) {\n            enter.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n\n        if (_chart.isOrdinal()) {\n            bars.on('click', _chart.onClick);\n        }\n\n        dc.transition(bars, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) {\n                var x = _chart.x()(d.x);\n                if (_centerBar) {\n                    x -= _barWidth / 2;\n                }\n                if (_chart.isOrdinal() && _gap !== undefined) {\n                    x += _gap / 2;\n                }\n                return dc.utils.safeNumber(x);\n            })\n            .attr('y', function (d) {\n                var y = _chart.y()(d.y + d.y0);\n\n                if (d.y < 0) {\n                    y -= barHeight(d);\n                }\n\n                return dc.utils.safeNumber(y);\n            })\n            .attr('width', _barWidth)\n            .attr('height', function (d) {\n                return barHeight(d);\n            })\n            .attr('fill', dc.pluck('data', _chart.getColor))\n            .select('title').text(dc.pluck('data', _chart.title(d.name)));\n\n        dc.transition(bars.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) { return _chart.x()(d.x); })\n            .attr('width', _barWidth * 0.9)\n            .remove();\n    }\n\n    function calculateBarWidth () {\n        if (_barWidth === undefined) {\n            var numberOfBars = _chart.xUnitCount();\n\n            // please can't we always use rangeBands for bar charts?\n            if (_chart.isOrdinal() && _gap === undefined) {\n                _barWidth = Math.floor(_chart.x().rangeBand());\n            } else if (_gap) {\n                _barWidth = Math.floor((_chart.xAxisLength() - (numberOfBars - 1) * _gap) / numberOfBars);\n            } else {\n                _barWidth = Math.floor(_chart.xAxisLength() / (1 + _chart.barPadding()) / numberOfBars);\n            }\n\n            if (_barWidth === Infinity || isNaN(_barWidth) || _barWidth < MIN_BAR_WIDTH) {\n                _barWidth = MIN_BAR_WIDTH;\n            }\n        }\n    }\n\n    _chart.fadeDeselectedArea = function () {\n        var bars = _chart.chartBodyG().selectAll('rect.bar');\n        var extent = _chart.brush().extent();\n\n        if (_chart.isOrdinal()) {\n            if (_chart.hasFilter()) {\n                bars.classed(dc.constants.SELECTED_CLASS, function (d) {\n                    return _chart.hasFilter(d.x);\n                });\n                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n                    return !_chart.hasFilter(d.x);\n                });\n            } else {\n                bars.classed(dc.constants.SELECTED_CLASS, false);\n                bars.classed(dc.constants.DESELECTED_CLASS, false);\n            }\n        } else {\n            if (!_chart.brushIsEmpty(extent)) {\n                var start = extent[0];\n                var end = extent[1];\n\n                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n                    return d.x < start || d.x >= end;\n                });\n            } else {\n                bars.classed(dc.constants.DESELECTED_CLASS, false);\n            }\n        }\n    };\n\n    /**\n     * Whether the bar chart will render each bar centered around the data position on the x-axis.\n     * @method centerBar\n     * @memberof dc.barChart\n     * @instance\n     * @param {Boolean} [centerBar=false]\n     * @returns {Boolean|dc.barChart}\n     */\n    _chart.centerBar = function (centerBar) {\n        if (!arguments.length) {\n            return _centerBar;\n        }\n        _centerBar = centerBar;\n        return _chart;\n    };\n\n    dc.override(_chart, 'onClick', function (d) {\n        _chart._onClick(d.data);\n    });\n\n    /**\n     * Get or set the spacing between bars as a fraction of bar size. Valid values are between 0-1.\n     * Setting this value will also remove any previously set {@link dc.barChart#gap gap}. See the\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n     * for a visual description of how the padding is applied.\n     * @method barPadding\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [barPadding=0]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.barPadding = function (barPadding) {\n        if (!arguments.length) {\n            return _chart._rangeBandPadding();\n        }\n        _chart._rangeBandPadding(barPadding);\n        _gap = undefined;\n        return _chart;\n    };\n\n    _chart._useOuterPadding = function () {\n        return _gap === undefined;\n    };\n\n    /**\n     * Get or set the outer padding on an ordinal bar chart. This setting has no effect on non-ordinal charts.\n     * Will pad the width by `padding * barWidth` on each side of the chart.\n     * @method outerPadding\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [padding=0.5]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.outerPadding = _chart._outerRangeBandPadding;\n\n    /**\n     * Manually set fixed gap (in px) between bars instead of relying on the default auto-generated\n     * gap.  By default the bar chart implementation will calculate and set the gap automatically\n     * based on the number of data points and the length of the x axis.\n     * @method gap\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [gap=2]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _chart;\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n        if (_chart.round() && (!_centerBar || _alwaysUseRounding)) {\n            extent[0] = extent.map(_chart.round())[0];\n            extent[1] = extent.map(_chart.round())[1];\n\n            _chart.chartBodyG().select('.brush')\n                .call(_chart.brush().extent(extent));\n        }\n\n        return extent;\n    };\n\n    /**\n     * Set or get whether rounding is enabled when bars are centered. If false, using\n     * rounding with centered bars will result in a warning and rounding will be ignored.  This flag\n     * has no effect if bars are not {@link dc.barChart#centerBar centered}.\n     * When using standard d3.js rounding methods, the brush often doesn't align correctly with\n     * centered bars since the bars are offset.  The rounding function must add an offset to\n     * compensate, such as in the following example.\n     * @method alwaysUseRounding\n     * @memberof dc.barChart\n     * @instance\n     * @example\n     * chart.round(function(n) { return Math.floor(n) + 0.5; });\n     * @param {Boolean} [alwaysUseRounding=false]\n     * @returns {Boolean|dc.barChart}\n     */\n    _chart.alwaysUseRounding = function (alwaysUseRounding) {\n        if (!arguments.length) {\n            return _alwaysUseRounding;\n        }\n        _alwaysUseRounding = alwaysUseRounding;\n        return _chart;\n    };\n\n    function colorFilter (color, inv) {\n        return function () {\n            var item = d3.select(this);\n            var match = item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n    }\n\n    _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n            _chart.g().selectAll('rect.bar')\n                .classed('highlight', colorFilter(d.color))\n                .classed('fadeout', colorFilter(d.color, true));\n        }\n    };\n\n    _chart.legendReset = function () {\n        _chart.g().selectAll('rect.bar')\n            .classed('highlight', false)\n            .classed('fadeout', false);\n    };\n\n    dc.override(_chart, 'xAxisMax', function () {\n        var max = this._xAxisMax();\n        if ('resolution' in _chart.xUnits()) {\n            var res = _chart.xUnits().resolution;\n            max += res;\n        }\n        return max;\n    });\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Concrete line/area chart implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class lineChart\n * @memberof dc\n * @mixes dc.stackMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a line chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.lineChart('#chart-container1');\n * // create a line chart under #chart-container2 element using chart group A\n * var chart2 = dc.lineChart('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.lineChart(compositeChart);\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n * specifying a dom block element such as a div; or a dom element or d3 selection.  If the line\n * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n * composite chart instance instead.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.lineChart}\n */\ndc.lineChart = function (parent, chartGroup) {\n    var DEFAULT_DOT_RADIUS = 5;\n    var TOOLTIP_G_CLASS = 'dc-tooltip';\n    var DOT_CIRCLE_CLASS = 'dot';\n    var Y_AXIS_REF_LINE_CLASS = 'yRef';\n    var X_AXIS_REF_LINE_CLASS = 'xRef';\n    var DEFAULT_DOT_OPACITY = 1e-6;\n    var LABEL_PADDING = 3;\n\n    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n    var _renderArea = false;\n    var _dotRadius = DEFAULT_DOT_RADIUS;\n    var _dataPointRadius = null;\n    var _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n    var _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n    var _interpolate = 'linear';\n    var _tension = 0.7;\n    var _defined;\n    var _dashStyle;\n    var _xyTipsOn = true;\n\n    _chart.transitionDuration(500);\n    _chart.transitionDelay(0);\n    _chart._rangeBandPadding(1);\n\n    _chart.plotData = function () {\n        var chartBody = _chart.chartBodyG();\n        var layersList = chartBody.select('g.stack-list');\n\n        if (layersList.empty()) {\n            layersList = chartBody.append('g').attr('class', 'stack-list');\n        }\n\n        var layers = layersList.selectAll('g.stack').data(_chart.data());\n\n        var layersEnter = layers\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return 'stack ' + '_' + i;\n            });\n\n        drawLine(layersEnter, layers);\n\n        drawArea(layersEnter, layers);\n\n        drawDots(chartBody, layers);\n\n        if (_chart.renderLabel()) {\n            drawLabels(layers);\n        }\n    };\n\n    /**\n     * Gets or sets the interpolator to use for lines drawn, by string name, allowing e.g. step\n     * functions, splines, and cubic interpolation.  This is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate} and\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate},\n     * where you can find a complete list of valid arguments.\n     * @method interpolate\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n     * @param  {String} [interpolate='linear']\n     * @returns {String|dc.lineChart}\n     */\n    _chart.interpolate = function (interpolate) {\n        if (!arguments.length) {\n            return _interpolate;\n        }\n        _interpolate = interpolate;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the tension to use for lines drawn, in the range 0 to 1.\n     * This parameter further customizes the interpolation behavior.  It is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_tension d3.svg.line.tension} and\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_tension d3.svg.area.tension}.\n     * @method tension\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n     * @param  {Number} [tension=0.7]\n     * @returns {Number|dc.lineChart}\n     */\n    _chart.tension = function (tension) {\n        if (!arguments.length) {\n            return _tension;\n        }\n        _tension = tension;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets a function that will determine discontinuities in the line which should be\n     * skipped: the path will be broken into separate subpaths if some points are undefined.\n     * This function is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n     *\n     * Note: crossfilter will sometimes coerce nulls to 0, so you may need to carefully write\n     * custom reduce functions to get this to work, depending on your data. See\n     * {@link https://github.com/dc-js/dc.js/issues/615#issuecomment-49089248 this GitHub comment}\n     * for more details and an example.\n     * @method defined\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n     * @param  {Function} [defined]\n     * @returns {Function|dc.lineChart}\n     */\n    _chart.defined = function (defined) {\n        if (!arguments.length) {\n            return _defined;\n        }\n        _defined = defined;\n        return _chart;\n    };\n\n    /**\n     * Set the line's d3 dashstyle. This value becomes the 'stroke-dasharray' of line. Defaults to empty\n     * array (solid line).\n     * @method dashStyle\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray stroke-dasharray}\n     * @example\n     * // create a Dash Dot Dot Dot\n     * chart.dashStyle([3,1,1,1]);\n     * @param  {Array<Number>} [dashStyle=[]]\n     * @returns {Array<Number>|dc.lineChart}\n     */\n    _chart.dashStyle = function (dashStyle) {\n        if (!arguments.length) {\n            return _dashStyle;\n        }\n        _dashStyle = dashStyle;\n        return _chart;\n    };\n\n    /**\n     * Get or set render area flag. If the flag is set to true then the chart will render the area\n     * beneath each line and the line chart effectively becomes an area chart.\n     * @method renderArea\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Boolean} [renderArea=false]\n     * @returns {Boolean|dc.lineChart}\n     */\n    _chart.renderArea = function (renderArea) {\n        if (!arguments.length) {\n            return _renderArea;\n        }\n        _renderArea = renderArea;\n        return _chart;\n    };\n\n    function colors (d, i) {\n        return _chart.getColor.call(d, d.values, i);\n    }\n\n    function drawLine (layersEnter, layers) {\n        var line = d3.svg.line()\n            .x(function (d) {\n                return _chart.x()(d.x);\n            })\n            .y(function (d) {\n                return _chart.y()(d.y + d.y0);\n            })\n            .interpolate(_interpolate)\n            .tension(_tension);\n        if (_defined) {\n            line.defined(_defined);\n        }\n\n        var path = layersEnter.append('path')\n            .attr('class', 'line')\n            .attr('stroke', colors);\n        if (_dashStyle) {\n            path.attr('stroke-dasharray', _dashStyle);\n        }\n\n        dc.transition(layers.select('path.line'), _chart.transitionDuration(), _chart.transitionDelay())\n            //.ease('linear')\n            .attr('stroke', colors)\n            .attr('d', function (d) {\n                return safeD(line(d.values));\n            });\n    }\n\n    function drawArea (layersEnter, layers) {\n        if (_renderArea) {\n            var area = d3.svg.area()\n                .x(function (d) {\n                    return _chart.x()(d.x);\n                })\n                .y(function (d) {\n                    return _chart.y()(d.y + d.y0);\n                })\n                .y0(function (d) {\n                    return _chart.y()(d.y0);\n                })\n                .interpolate(_interpolate)\n                .tension(_tension);\n            if (_defined) {\n                area.defined(_defined);\n            }\n\n            layersEnter.append('path')\n                .attr('class', 'area')\n                .attr('fill', colors)\n                .attr('d', function (d) {\n                    return safeD(area(d.values));\n                });\n\n            dc.transition(layers.select('path.area'), _chart.transitionDuration(), _chart.transitionDelay())\n                //.ease('linear')\n                .attr('fill', colors)\n                .attr('d', function (d) {\n                    return safeD(area(d.values));\n                });\n        }\n    }\n\n    function safeD (d) {\n        return (!d || d.indexOf('NaN') >= 0) ? 'M0,0' : d;\n    }\n\n    function drawDots (chartBody, layers) {\n        if (_chart.xyTipsOn() === 'always' || (!_chart.brushOn() && _chart.xyTipsOn())) {\n            var tooltipListClass = TOOLTIP_G_CLASS + '-list';\n            var tooltips = chartBody.select('g.' + tooltipListClass);\n\n            if (tooltips.empty()) {\n                tooltips = chartBody.append('g').attr('class', tooltipListClass);\n            }\n\n            layers.each(function (d, layerIndex) {\n                var points = d.values;\n                if (_defined) {\n                    points = points.filter(_defined);\n                }\n\n                var g = tooltips.select('g.' + TOOLTIP_G_CLASS + '._' + layerIndex);\n                if (g.empty()) {\n                    g = tooltips.append('g').attr('class', TOOLTIP_G_CLASS + ' _' + layerIndex);\n                }\n\n                createRefLines(g);\n\n                var dots = g.selectAll('circle.' + DOT_CIRCLE_CLASS)\n                    .data(points, dc.pluck('x'));\n\n                dots.enter()\n                    .append('circle')\n                    .attr('class', DOT_CIRCLE_CLASS)\n                    .attr('r', getDotRadius())\n                    .style('fill-opacity', _dataPointFillOpacity)\n                    .style('stroke-opacity', _dataPointStrokeOpacity)\n                    .attr('fill', _chart.getColor)\n                    .on('mousemove', function () {\n                        var dot = d3.select(this);\n                        showDot(dot);\n                        showRefLines(dot, g);\n                    })\n                    .on('mouseout', function () {\n                        var dot = d3.select(this);\n                        hideDot(dot);\n                        hideRefLines(g);\n                    });\n\n                dots.call(renderTitle, d);\n\n                dc.transition(dots, _chart.transitionDuration())\n                    .attr('cx', function (d) {\n                        return dc.utils.safeNumber(_chart.x()(d.x));\n                    })\n                    .attr('cy', function (d) {\n                        return dc.utils.safeNumber(_chart.y()(d.y + d.y0));\n                    })\n                    .attr('fill', _chart.getColor);\n\n                dots.exit().remove();\n            });\n        }\n    }\n\n    _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n    }, false);\n\n    function drawLabels (layers) {\n        layers.each(function (d, layerIndex) {\n            var layer = d3.select(this);\n            var labels = layer.selectAll('text.lineLabel')\n                .data(d.values, dc.pluck('x'));\n\n            labels.enter()\n                .append('text')\n                .attr('class', 'lineLabel')\n                .attr('text-anchor', 'middle');\n\n            dc.transition(labels, _chart.transitionDuration())\n                .attr('x', function (d) {\n                    return dc.utils.safeNumber(_chart.x()(d.x));\n                })\n                .attr('y', function (d) {\n                    var y = _chart.y()(d.y + d.y0) - LABEL_PADDING;\n                    return dc.utils.safeNumber(y);\n                })\n                .text(function (d) {\n                    return _chart.label()(d);\n                });\n\n            dc.transition(labels.exit(), _chart.transitionDuration())\n                .attr('height', 0)\n                .remove();\n        });\n    }\n\n    function createRefLines (g) {\n        var yRefLine = g.select('path.' + Y_AXIS_REF_LINE_CLASS).empty() ?\n            g.append('path').attr('class', Y_AXIS_REF_LINE_CLASS) : g.select('path.' + Y_AXIS_REF_LINE_CLASS);\n        yRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n\n        var xRefLine = g.select('path.' + X_AXIS_REF_LINE_CLASS).empty() ?\n            g.append('path').attr('class', X_AXIS_REF_LINE_CLASS) : g.select('path.' + X_AXIS_REF_LINE_CLASS);\n        xRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n    }\n\n    function showDot (dot) {\n        dot.style('fill-opacity', 0.8);\n        dot.style('stroke-opacity', 0.8);\n        dot.attr('r', _dotRadius);\n        return dot;\n    }\n\n    function showRefLines (dot, g) {\n        var x = dot.attr('cx');\n        var y = dot.attr('cy');\n        var yAxisX = (_chart._yAxisX() - _chart.margins().left);\n        var yAxisRefPathD = 'M' + yAxisX + ' ' + y + 'L' + (x) + ' ' + (y);\n        var xAxisRefPathD = 'M' + x + ' ' + _chart.yAxisHeight() + 'L' + x + ' ' + y;\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', '').attr('d', yAxisRefPathD);\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', '').attr('d', xAxisRefPathD);\n    }\n\n    function getDotRadius () {\n        return _dataPointRadius || _dotRadius;\n    }\n\n    function hideDot (dot) {\n        dot.style('fill-opacity', _dataPointFillOpacity)\n            .style('stroke-opacity', _dataPointStrokeOpacity)\n            .attr('r', getDotRadius());\n    }\n\n    function hideRefLines (g) {\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', 'none');\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', 'none');\n    }\n\n    function renderTitle (dot, d) {\n        if (_chart.renderTitle()) {\n            dot.select('title').remove();\n            dot.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n    }\n\n    /**\n     * Turn on/off the mouseover behavior of an individual data point which renders a circle and x/y axis\n     * dashed lines back to each respective axis.  This is ignored if the chart\n     * {@link dc.coordinateGridMixin#brushOn brush} is on\n     * @method xyTipsOn\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Boolean} [xyTipsOn=false]\n     * @returns {Boolean|dc.lineChart}\n     */\n    _chart.xyTipsOn = function (xyTipsOn) {\n        if (!arguments.length) {\n            return _xyTipsOn;\n        }\n        _xyTipsOn = xyTipsOn;\n        return _chart;\n    };\n\n    /**\n     * Get or set the radius (in px) for dots displayed on the data points.\n     * @method dotRadius\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Number} [dotRadius=5]\n     * @returns {Number|dc.lineChart}\n     */\n    _chart.dotRadius = function (dotRadius) {\n        if (!arguments.length) {\n            return _dotRadius;\n        }\n        _dotRadius = dotRadius;\n        return _chart;\n    };\n\n    /**\n     * Always show individual dots for each datapoint.\n     *\n     * If `options` is falsy, it disables data point rendering. If no `options` are provided, the\n     * current `options` values are instead returned.\n     * @method renderDataPoints\n     * @memberof dc.lineChart\n     * @instance\n     * @example\n     * chart.renderDataPoints({radius: 2, fillOpacity: 0.8, strokeOpacity: 0.8})\n     * @param  {{fillOpacity: Number, strokeOpacity: Number, radius: Number}} [options={fillOpacity: 0.8, strokeOpacity: 0.8, radius: 2}]\n     * @returns {{fillOpacity: Number, strokeOpacity: Number, radius: Number}|dc.lineChart}\n     */\n    _chart.renderDataPoints = function (options) {\n        if (!arguments.length) {\n            return {\n                fillOpacity: _dataPointFillOpacity,\n                strokeOpacity: _dataPointStrokeOpacity,\n                radius: _dataPointRadius\n            };\n        } else if (!options) {\n            _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n            _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n            _dataPointRadius = null;\n        } else {\n            _dataPointFillOpacity = options.fillOpacity || 0.8;\n            _dataPointStrokeOpacity = options.strokeOpacity || 0.8;\n            _dataPointRadius = options.radius || 2;\n        }\n        return _chart;\n    };\n\n    function colorFilter (color, dashstyle, inv) {\n        return function () {\n            var item = d3.select(this);\n            var match = (item.attr('stroke') === color &&\n                item.attr('stroke-dasharray') === ((dashstyle instanceof Array) ?\n                    dashstyle.join(',') : null)) || item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n    }\n\n    _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n            _chart.g().selectAll('path.line, path.area')\n                .classed('highlight', colorFilter(d.color, d.dashstyle))\n                .classed('fadeout', colorFilter(d.color, d.dashstyle, true));\n        }\n    };\n\n    _chart.legendReset = function () {\n        _chart.g().selectAll('path.line, path.area')\n            .classed('highlight', false)\n            .classed('fadeout', false);\n    };\n\n    dc.override(_chart, 'legendables', function () {\n        var legendables = _chart._legendables();\n        if (!_dashStyle) {\n            return legendables;\n        }\n        return legendables.map(function (l) {\n            l.dashstyle = _dashStyle;\n            return l;\n        });\n    });\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The data count widget is a simple widget designed to display the number of records selected by the\n * current filters out of the total number of records in the data set. Once created the data count widget\n * will automatically update the text content of child elements with the following classes:\n *\n * * `.total-count` - total number of records\n * * `.filter-count` - number of records matched by the current filters\n *\n * Note: this widget works best for the specific case of showing the number of records out of a\n * total. If you want a more general-purpose numeric display, please use the\n * {@link dc.numberDisplay} widget instead.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class dataCount\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * var ndx = crossfilter(data);\n * var all = ndx.groupAll();\n *\n * dc.dataCount('.dc-data-count')\n *     .dimension(ndx)\n *     .group(all);\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataCount}\n */\ndc.dataCount = function (parent, chartGroup) {\n    var _formatNumber = d3.format(',d');\n    var _chart = dc.baseMixin({});\n    var _html = {some: '', all: ''};\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending how many items are\n     * selected. The text `%total-count` will replaced with the total number of records, and the text\n     * `%filter-count` will be replaced with the number of selected records.\n     * - all: HTML template to use if all items are selected\n     * - some: HTML template to use if not all items are selected\n     * @method html\n     * @memberof dc.dataCount\n     * @instance\n     * @example\n     * counter.html({\n     *      some: '%filter-count out of %total-count records selected',\n     *      all: 'All records selected. Click on charts to apply filters'\n     * })\n     * @param {{some:String, all: String}} [options]\n     * @returns {{some:String, all: String}|dc.dataCount}\n     */\n    _chart.html = function (options) {\n        if (!arguments.length) {\n            return _html;\n        }\n        if (options.all) {\n            _html.all = options.all;\n        }\n        if (options.some) {\n            _html.some = options.some;\n        }\n        return _chart;\n    };\n\n    /**\n     * Gets or sets an optional function to format the filter count and total count.\n     * @method formatNumber\n     * @memberof dc.dataCount\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n     * @example\n     * counter.formatNumber(d3.format('.2g'))\n     * @param {Function} [formatter=d3.format('.2g')]\n     * @returns {Function|dc.dataCount}\n     */\n    _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n            return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        var tot = _chart.dimension().size(),\n            val = _chart.group().value();\n        var all = _formatNumber(tot);\n        var selected = _formatNumber(val);\n\n        if ((tot === val) && (_html.all !== '')) {\n            _chart.root().html(_html.all.replace('%total-count', all).replace('%filter-count', selected));\n        } else if (_html.some !== '') {\n            _chart.root().html(_html.some.replace('%total-count', all).replace('%filter-count', selected));\n        } else {\n            _chart.selectAll('.total-count').text(all);\n            _chart.selectAll('.filter-count').text(selected);\n        }\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The data table is a simple widget designed to list crossfilter focused data set (rows being\n * filtered) in a good old tabular fashion.\n *\n * Note: Unlike other charts, the data table (and data grid chart) use the {@link dc.dataTable#group group} attribute as a\n * keying function for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data\n * together in groups.  Do not pass in a crossfilter group as this will not work.\n *\n * Another interesting feature of the data table is that you can pass a crossfilter group to the `dimension`, as\n * long as you specify the {@link dc.dataTable#order order} as `d3.descending`, since the data\n * table will use `dimension.top()` to fetch the data in that case, and the method is equally\n * supported on the crossfilter group as the crossfilter dimension.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.io/dc.js/examples/table-on-aggregated-data.html dataTable on a crossfilter group}\n * ({@link https://github.com/dc-js/dc.js/blob/develop/web/examples/table-on-aggregated-data.html source})\n * @class dataTable\n * @memberof dc\n * @mixes dc.baseMixin\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataTable}\n */\ndc.dataTable = function (parent, chartGroup) {\n    var LABEL_CSS_CLASS = 'dc-table-label';\n    var ROW_CSS_CLASS = 'dc-table-row';\n    var COLUMN_CSS_CLASS = 'dc-table-column';\n    var GROUP_CSS_CLASS = 'dc-table-group';\n    var HEAD_CSS_CLASS = 'dc-table-head';\n\n    var _chart = dc.baseMixin({});\n\n    var _size = 25;\n    var _columns = [];\n    var _sortBy = function (d) {\n        return d;\n    };\n    var _order = d3.ascending;\n    var _beginSlice = 0;\n    var _endSlice;\n    var _showGroups = true;\n\n    _chart._doRender = function () {\n        _chart.selectAll('tbody').remove();\n\n        renderRows(renderGroups());\n\n        return _chart;\n    };\n\n    _chart._doColumnValueFormat = function (v, d) {\n        return ((typeof v === 'function') ?\n                v(d) :                          // v as function\n                ((typeof v === 'string') ?\n                 d[v] :                         // v is field name string\n                 v.format(d)                        // v is Object, use fn (element 2)\n                )\n               );\n    };\n\n    _chart._doColumnHeaderFormat = function (d) {\n        // if 'function', convert to string representation\n        // show a string capitalized\n        // if an object then display its label string as-is.\n        return (typeof d === 'function') ?\n                _chart._doColumnHeaderFnToString(d) :\n                ((typeof d === 'string') ?\n                 _chart._doColumnHeaderCapitalize(d) : String(d.label));\n    };\n\n    _chart._doColumnHeaderCapitalize = function (s) {\n        // capitalize\n        return s.charAt(0).toUpperCase() + s.slice(1);\n    };\n\n    _chart._doColumnHeaderFnToString = function (f) {\n        // columnString(f) {\n        var s = String(f);\n        var i1 = s.indexOf('return ');\n        if (i1 >= 0) {\n            var i2 = s.lastIndexOf(';');\n            if (i2 >= 0) {\n                s = s.substring(i1 + 7, i2);\n                var i3 = s.indexOf('numberFormat');\n                if (i3 >= 0) {\n                    s = s.replace('numberFormat', '');\n                }\n            }\n        }\n        return s;\n    };\n\n    function renderGroups () {\n        // The 'original' example uses all 'functions'.\n        // If all 'functions' are used, then don't remove/add a header, and leave\n        // the html alone. This preserves the functionality of earlier releases.\n        // A 2nd option is a string representing a field in the data.\n        // A third option is to supply an Object such as an array of 'information', and\n        // supply your own _doColumnHeaderFormat and _doColumnValueFormat functions to\n        // create what you need.\n        var bAllFunctions = true;\n        _columns.forEach(function (f) {\n            bAllFunctions = bAllFunctions & (typeof f === 'function');\n        });\n\n        if (!bAllFunctions) {\n            // ensure one thead\n            var thead = _chart.selectAll('thead').data([0]);\n            thead.enter().append('thead');\n            thead.exit().remove();\n\n            // with one tr\n            var headrow = thead.selectAll('tr').data([0]);\n            headrow.enter().append('tr');\n            headrow.exit().remove();\n\n            // with a th for each column\n            var headcols = headrow.selectAll('th')\n                .data(_columns);\n            headcols.enter().append('th');\n            headcols.exit().remove();\n\n            headcols\n                .attr('class', HEAD_CSS_CLASS)\n                    .html(function (d) {\n                        return (_chart._doColumnHeaderFormat(d));\n\n                    });\n        }\n\n        var groups = _chart.root().selectAll('tbody')\n            .data(nestEntries(), function (d) {\n                return _chart.keyAccessor()(d);\n            });\n\n        var rowGroup = groups\n            .enter()\n            .append('tbody');\n\n        if (_showGroups === true) {\n            rowGroup\n                .append('tr')\n                .attr('class', GROUP_CSS_CLASS)\n                    .append('td')\n                    .attr('class', LABEL_CSS_CLASS)\n                    .attr('colspan', _columns.length)\n                    .html(function (d) {\n                        return _chart.keyAccessor()(d);\n                    });\n        }\n\n        groups.exit().remove();\n\n        return rowGroup;\n    }\n\n    function nestEntries () {\n        var entries;\n        if (_order === d3.ascending) {\n            entries = _chart.dimension().bottom(_size);\n        } else {\n            entries = _chart.dimension().top(_size);\n        }\n\n        return d3.nest()\n            .key(_chart.group())\n            .sortKeys(_order)\n            .entries(entries.sort(function (a, b) {\n                return _order(_sortBy(a), _sortBy(b));\n            }).slice(_beginSlice, _endSlice));\n    }\n\n    function renderRows (groups) {\n        var rows = groups.order()\n            .selectAll('tr.' + ROW_CSS_CLASS)\n            .data(function (d) {\n                return d.values;\n            });\n\n        var rowEnter = rows.enter()\n            .append('tr')\n            .attr('class', ROW_CSS_CLASS);\n\n        _columns.forEach(function (v, i) {\n            rowEnter.append('td')\n                .attr('class', COLUMN_CSS_CLASS + ' _' + i)\n                .html(function (d) {\n                    return _chart._doColumnValueFormat(v, d);\n                });\n        });\n\n        rows.exit().remove();\n\n        return rows;\n    }\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set the group function for the data table. The group function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n     * to split rows into groups.\n     *\n     * Do not pass in a crossfilter group as this will not work.\n     * @method group\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * // group rows by the value of their field\n     * chart\n     *     .group(function(d) { return d.field; })\n     * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n     * @returns {Function|dc.dataTable}\n     */\n\n    /**\n     * Get or set the table size which determines the number of rows displayed by the widget.\n     * @method size\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number} [size=25]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.size = function (size) {\n        if (!arguments.length) {\n            return _size;\n        }\n        _size = size;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed\n     * by the widget. Useful when implementing pagination.\n     *\n     * Note: the sortBy function will determine how the rows are ordered for pagination purposes.\n\n     * See the {@link http://dc-js.github.io/dc.js/examples/table-pagination.html table pagination example}\n     * to see how to implement the pagination user interface using `beginSlice` and `endSlice`.\n     * @method beginSlice\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n            return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the\n     * widget. Useful when implementing pagination. See {@link dc.dataTable#beginSlice `beginSlice`} for more information.\n     * @method endSlice\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number|undefined} [endSlice=undefined]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n            return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set column functions. The data table widget supports several methods of specifying the\n     * columns to display.\n     *\n     * The original method uses an array of functions to generate dynamic columns. Column functions\n     * are simple javascript functions with only one input argument `d` which represents a row in\n     * the data set. The return value of these functions will be used to generate the content for\n     * each cell. However, this method requires the HTML for the table to have a fixed set of column\n     * headers.\n     *\n     * <pre><code>chart.columns([\n     *     function(d) { return d.date; },\n     *     function(d) { return d.open; },\n     *     function(d) { return d.close; },\n     *     function(d) { return numberFormat(d.close - d.open); },\n     *     function(d) { return d.volume; }\n     * ]);\n     * </code></pre>\n     *\n     * In the second method, you can list the columns to read from the data without specifying it as\n     * a function, except where necessary (ie, computed columns).  Note the data element name is\n     * capitalized when displayed in the table header. You can also mix in functions as necessary,\n     * using the third `{label, format}` form, as shown below.\n     *\n     * <pre><code>chart.columns([\n     *     \"date\",    // d[\"date\"], ie, a field accessor; capitalized automatically\n     *     \"open\",    // ...\n     *     \"close\",   // ...\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) {\n     *             return numberFormat(d.close - d.open);\n     *         }\n     *     },\n     *     \"volume\"   // d[\"volume\"], ie, a field accessor; capitalized automatically\n     * ]);\n     * </code></pre>\n     *\n     * In the third example, we specify all fields using the `{label, format}` method:\n     * <pre><code>chart.columns([\n     *     {\n     *         label: \"Date\",\n     *         format: function (d) { return d.date; }\n     *     },\n     *     {\n     *         label: \"Open\",\n     *         format: function (d) { return numberFormat(d.open); }\n     *     },\n     *     {\n     *         label: \"Close\",\n     *         format: function (d) { return numberFormat(d.close); }\n     *     },\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) { return numberFormat(d.close - d.open); }\n     *     },\n     *     {\n     *         label: \"Volume\",\n     *         format: function (d) { return d.volume; }\n     *     }\n     * ]);\n     * </code></pre>\n     *\n     * You may wish to override the dataTable functions `_doColumnHeaderCapitalize` and\n     * `_doColumnHeaderFnToString`, which are used internally to translate the column information or\n     * function into a displayed header. The first one is used on the \"string\" column specifier; the\n     * second is used to transform a stringified function into something displayable. For the Stock\n     * example, the function for Change becomes the table header **d.close - d.open**.\n     *\n     * Finally, you can even specify a completely different form of column definition. To do this,\n     * override `_chart._doColumnHeaderFormat` and `_chart._doColumnValueFormat` Be aware that\n     * fields without numberFormat specification will be displayed just as they are stored in the\n     * data, unformatted.\n     * @method columns\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Array<Function>} [columns=[]]\n     * @returns {Array<Function>}|dc.dataTable}\n     */\n    _chart.columns = function (columns) {\n        if (!arguments.length) {\n            return _columns;\n        }\n        _columns = columns;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at row level and returns a\n     * particular field to be sorted by.\n     * @method sortBy\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortBy=identity function]\n     * @returns {Function|dc.dataTable}\n     */\n    _chart.sortBy = function (sortBy) {\n        if (!arguments.length) {\n            return _sortBy;\n        }\n        _sortBy = sortBy;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort order. If the order is `d3.ascending`, the data table will use\n     * `dimension().bottom()` to fetch the data; otherwise it will use `dimension().top()`\n     * @method order\n     * @memberof dc.dataTable\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|dc.dataTable}\n     */\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    /**\n     * Get or set if group rows will be shown. The dataTable {@link dc.dataTable#group group}\n     * function must be specified even if groups are not shown.\n     * @method showGroups\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * chart\n     *     .group([value], [name])\n     *     .showGroups(true|false);\n     * @param {Boolean} [showGroups=true]\n     * @returns {Boolean|dc.dataTable}\n     */\n    _chart.showGroups = function (showGroups) {\n        if (!arguments.length) {\n            return _showGroups;\n        }\n        _showGroups = showGroups;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Data grid is a simple widget designed to list the filtered records, providing\n * a simple way to define how the items are displayed.\n *\n * Note: Unlike other charts, the data grid chart (and data table) use the {@link dc.dataGrid#group group} attribute as a keying function\n * for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data together in groups.\n * Do not pass in a crossfilter group as this will not work.\n *\n * Examples:\n * - {@link http://europarl.me/dc.js/web/ep/index.html List of members of the european parliament}\n * @class dataGrid\n * @memberof dc\n * @mixes dc.baseMixin\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataGrid}\n */\ndc.dataGrid = function (parent, chartGroup) {\n    var LABEL_CSS_CLASS = 'dc-grid-label';\n    var ITEM_CSS_CLASS = 'dc-grid-item';\n    var GROUP_CSS_CLASS = 'dc-grid-group';\n    var GRID_CSS_CLASS = 'dc-grid-top';\n\n    var _chart = dc.baseMixin({});\n\n    var _size = 999; // shouldn't be needed, but you might\n    var _html = function (d) { return 'you need to provide an html() handling param:  ' + JSON.stringify(d); };\n    var _sortBy = function (d) {\n        return d;\n    };\n    var _order = d3.ascending;\n    var _beginSlice = 0, _endSlice;\n\n    var _htmlGroup = function (d) {\n        return '<div class=\\'' + GROUP_CSS_CLASS + '\\'><h1 class=\\'' + LABEL_CSS_CLASS + '\\'>' +\n            _chart.keyAccessor()(d) + '</h1></div>';\n    };\n\n    _chart._doRender = function () {\n        _chart.selectAll('div.' + GRID_CSS_CLASS).remove();\n\n        renderItems(renderGroups());\n\n        return _chart;\n    };\n\n    function renderGroups () {\n        var groups = _chart.root().selectAll('div.' + GRID_CSS_CLASS)\n                .data(nestEntries(), function (d) {\n                    return _chart.keyAccessor()(d);\n                });\n\n        var itemGroup = groups\n                .enter()\n                .append('div')\n                .attr('class', GRID_CSS_CLASS);\n\n        if (_htmlGroup) {\n            itemGroup\n                .html(function (d) {\n                    return _htmlGroup(d);\n                });\n        }\n\n        groups.exit().remove();\n        return itemGroup;\n    }\n\n    function nestEntries () {\n        var entries = _chart.dimension().top(_size);\n\n        return d3.nest()\n            .key(_chart.group())\n            .sortKeys(_order)\n            .entries(entries.sort(function (a, b) {\n                return _order(_sortBy(a), _sortBy(b));\n            }).slice(_beginSlice, _endSlice));\n    }\n\n    function renderItems (groups) {\n        var items = groups.order()\n                .selectAll('div.' + ITEM_CSS_CLASS)\n                .data(function (d) {\n                    return d.values;\n                });\n\n        items.enter()\n            .append('div')\n            .attr('class', ITEM_CSS_CLASS)\n            .html(function (d) {\n                return _html(d);\n            });\n\n        items.exit().remove();\n\n        return items;\n    }\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set the group function for the data grid. The group function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n     * to split rows into groups.\n     *\n     * Do not pass in a crossfilter group as this will not work.\n     * @method group\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * // group rows by the value of their field\n     * chart\n     *     .group(function(d) { return d.field; })\n     * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n     * @returns {Function|dc.dataTable}\n     */\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @method beginSlice\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n            return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @method endSlice\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [endSlice]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n            return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the grid size which determines the number of items displayed by the widget.\n     * @method size\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [size=999]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.size = function (size) {\n        if (!arguments.length) {\n            return _size;\n        }\n        _size = size;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that formats an item. The data grid widget uses a\n     * function to generate dynamic html. Use your favourite templating engine or\n     * generate the string directly.\n     * @method html\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.html(function (d) { return '<div class='item '+data.exampleCategory+''>'+data.exampleString+'</div>';});\n     * @param {Function} [html]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.html = function (html) {\n        if (!arguments.length) {\n            return _html;\n        }\n        _html = html;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that formats a group label.\n     * @method htmlGroup\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.htmlGroup (function (d) { return '<h2>'.d.key . 'with ' . d.values.length .' items</h2>'});\n     * @param {Function} [htmlGroup]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.htmlGroup = function (htmlGroup) {\n        if (!arguments.length) {\n            return _htmlGroup;\n        }\n        _htmlGroup = htmlGroup;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at the item\n     * level and returns a particular field to be sorted.\n     * @method sortBy\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortByFunction]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.sortBy = function (sortByFunction) {\n        if (!arguments.length) {\n            return _sortBy;\n        }\n        _sortBy = sortByFunction;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort the order function.\n     * @method order\n     * @memberof dc.dataGrid\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A concrete implementation of a general purpose bubble chart that allows data visualization using the\n * following dimensions:\n * - x axis position\n * - y axis position\n * - bubble radius\n * - color\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n * @class bubbleChart\n * @memberof dc\n * @mixes dc.bubbleMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a bubble chart under #chart-container1 element using the default global chart group\n * var bubbleChart1 = dc.bubbleChart('#chart-container1');\n * // create a bubble chart under #chart-container2 element using chart group A\n * var bubbleChart2 = dc.bubbleChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.bubbleChart}\n */\ndc.bubbleChart = function (parent, chartGroup) {\n    var _chart = dc.bubbleMixin(dc.coordinateGridMixin({}));\n\n    _chart.transitionDuration(750);\n\n    _chart.transitionDelay(0);\n\n    var bubbleLocator = function (d) {\n        return 'translate(' + (bubbleX(d)) + ',' + (bubbleY(d)) + ')';\n    };\n\n    _chart.plotData = function () {\n        _chart.calculateRadiusDomain();\n        _chart.r().range([_chart.MIN_RADIUS, _chart.xAxisLength() * _chart.maxBubbleRelativeSize()]);\n\n        var data = _chart.data();\n        var bubbleG = _chart.chartBodyG().selectAll('g.' + _chart.BUBBLE_NODE_CLASS)\n                .data(data, function (d) { return d.key; });\n        if (_chart.sortBubbleSize()) {\n            // update dom order based on sort\n            bubbleG.order();\n        }\n\n        renderNodes(bubbleG);\n\n        updateNodes(bubbleG);\n\n        removeNodes(bubbleG);\n\n        _chart.fadeDeselectedArea();\n    };\n\n    function renderNodes (bubbleG) {\n        var bubbleGEnter = bubbleG.enter().append('g');\n\n        bubbleGEnter\n            .attr('class', _chart.BUBBLE_NODE_CLASS)\n            .attr('transform', bubbleLocator)\n            .append('circle').attr('class', function (d, i) {\n                return _chart.BUBBLE_CLASS + ' _' + i;\n            })\n            .on('click', _chart.onClick)\n            .attr('fill', _chart.getColor)\n            .attr('r', 0);\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay())\n            .select('circle.' + _chart.BUBBLE_CLASS)\n            .attr('r', function (d) {\n                return _chart.bubbleR(d);\n            })\n            .attr('opacity', function (d) {\n                return (_chart.bubbleR(d) > 0) ? 1 : 0;\n            });\n\n        _chart._doRenderLabel(bubbleGEnter);\n\n        _chart._doRenderTitles(bubbleGEnter);\n    }\n\n    function updateNodes (bubbleG) {\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', bubbleLocator)\n            .select('circle.' + _chart.BUBBLE_CLASS)\n            .attr('fill', _chart.getColor)\n            .attr('r', function (d) {\n                return _chart.bubbleR(d);\n            })\n            .attr('opacity', function (d) {\n                return (_chart.bubbleR(d) > 0) ? 1 : 0;\n            });\n\n        _chart.doUpdateLabels(bubbleG);\n        _chart.doUpdateTitles(bubbleG);\n    }\n\n    function removeNodes (bubbleG) {\n        bubbleG.exit().remove();\n    }\n\n    function bubbleX (d) {\n        var x = _chart.x()(_chart.keyAccessor()(d));\n        if (isNaN(x)) {\n            x = 0;\n        }\n        return x;\n    }\n\n    function bubbleY (d) {\n        var y = _chart.y()(_chart.valueAccessor()(d));\n        if (isNaN(y)) {\n            y = 0;\n        }\n        return y;\n    }\n\n    _chart.renderBrush = function () {\n        // override default x axis brush from parent chart\n    };\n\n    _chart.redrawBrush = function () {\n        // override default x axis brush from parent chart\n        _chart.fadeDeselectedArea();\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Composite charts are a special kind of chart that render multiple charts on the same Coordinate\n * Grid. You can overlay (compose) different bar/line/area charts in a single composite chart to\n * achieve some quite flexible charting effects.\n * @class compositeChart\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a composite chart under #chart-container1 element using the default global chart group\n * var compositeChart1 = dc.compositeChart('#chart-container1');\n * // create a composite chart under #chart-container2 element using chart group A\n * var compositeChart2 = dc.compositeChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.compositeChart}\n */\ndc.compositeChart = function (parent, chartGroup) {\n\n    var SUB_CHART_CLASS = 'sub';\n    var DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING = 12;\n\n    var _chart = dc.coordinateGridMixin({});\n    var _children = [];\n\n    var _childOptions = {};\n\n    var _shareColors = false,\n        _shareTitle = true,\n        _alignYAxes = false;\n\n    var _rightYAxis = d3.svg.axis(),\n        _rightYAxisLabel = 0,\n        _rightYAxisLabelPadding = DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING,\n        _rightY,\n        _rightAxisGridLines = false;\n\n    _chart._mandatoryAttributes([]);\n    _chart.transitionDuration(500);\n    _chart.transitionDelay(0);\n\n    dc.override(_chart, '_generateG', function () {\n        var g = this.__generateG();\n\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n\n            generateChildG(child, i);\n\n            if (!child.dimension()) {\n                child.dimension(_chart.dimension());\n            }\n            if (!child.group()) {\n                child.group(_chart.group());\n            }\n\n            child.chartGroup(_chart.chartGroup());\n            child.svg(_chart.svg());\n            child.xUnits(_chart.xUnits());\n            child.transitionDuration(_chart.transitionDuration(), _chart.transitionDelay());\n            child.brushOn(_chart.brushOn());\n            child.renderTitle(_chart.renderTitle());\n            child.elasticX(_chart.elasticX());\n        }\n\n        return g;\n    });\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n        var brushIsEmpty = _chart.brushIsEmpty(extent);\n\n        for (var i = 0; i < _children.length; ++i) {\n            _children[i].replaceFilter(brushIsEmpty ? null : extent);\n        }\n    };\n\n    _chart._prepareYAxis = function () {\n        var left = (leftYAxisChildren().length !== 0);\n        var right = (rightYAxisChildren().length !== 0);\n        var ranges = calculateYAxisRanges(left, right);\n\n        if (left) { prepareLeftYAxis(ranges); }\n        if (right) { prepareRightYAxis(ranges); }\n\n        if (leftYAxisChildren().length > 0 && !_rightAxisGridLines) {\n            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _chart.y(), _chart.yAxis());\n        } else if (rightYAxisChildren().length > 0) {\n            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _rightY, _rightYAxis);\n        }\n    };\n\n    _chart.renderYAxis = function () {\n        if (leftYAxisChildren().length !== 0) {\n            _chart.renderYAxisAt('y', _chart.yAxis(), _chart.margins().left);\n            _chart.renderYAxisLabel('y', _chart.yAxisLabel(), -90);\n        }\n\n        if (rightYAxisChildren().length !== 0) {\n            _chart.renderYAxisAt('yr', _chart.rightYAxis(), _chart.width() - _chart.margins().right);\n            _chart.renderYAxisLabel('yr', _chart.rightYAxisLabel(), 90, _chart.width() - _rightYAxisLabelPadding);\n        }\n    };\n\n    function calculateYAxisRanges (left, right) {\n        var lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax;\n        var ranges;\n\n        if (left) {\n            lyAxisMin = yAxisMin();\n            lyAxisMax = yAxisMax();\n        }\n\n        if (right) {\n            ryAxisMin = rightYAxisMin();\n            ryAxisMax = rightYAxisMax();\n        }\n\n        if (_chart.alignYAxes() && left && right) {\n            ranges = alignYAxisRanges(lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax);\n        }\n\n        return ranges || {\n            lyAxisMin: lyAxisMin,\n            lyAxisMax: lyAxisMax,\n            ryAxisMin: ryAxisMin,\n            ryAxisMax: ryAxisMax\n        };\n    }\n\n    function alignYAxisRanges (lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax) {\n        // since the two series will share a zero, each Y is just a multiple\n        // of the other. and the ratio should be the ratio of the ranges of the\n        // input data, so that they come out the same height. so we just min/max\n\n        // note: both ranges already include zero due to the stack mixin (#667)\n        // if #667 changes, we can reconsider whether we want data height or\n        // height from zero to be equal. and it will be possible for the axes\n        // to be aligned but not visible.\n        var extentRatio = (ryAxisMax - ryAxisMin) / (lyAxisMax - lyAxisMin);\n\n        return {\n            lyAxisMin: Math.min(lyAxisMin, ryAxisMin / extentRatio),\n            lyAxisMax: Math.max(lyAxisMax, ryAxisMax / extentRatio),\n            ryAxisMin: Math.min(ryAxisMin, lyAxisMin * extentRatio),\n            ryAxisMax: Math.max(ryAxisMax, lyAxisMax * extentRatio)\n        };\n    }\n\n    function prepareRightYAxis (ranges) {\n        var needDomain = _chart.rightY() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n        if (_chart.rightY() === undefined) {\n            _chart.rightY(d3.scale.linear());\n        }\n        if (needDomain) {\n            _chart.rightY().domain([ranges.ryAxisMin, ranges.ryAxisMax]);\n        }\n        if (needRange) {\n            _chart.rightY().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.rightY().range([_chart.yAxisHeight(), 0]);\n        _chart.rightYAxis(_chart.rightYAxis().scale(_chart.rightY()));\n\n        _chart.rightYAxis().orient('right');\n    }\n\n    function prepareLeftYAxis (ranges) {\n        var needDomain = _chart.y() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n        if (_chart.y() === undefined) {\n            _chart.y(d3.scale.linear());\n        }\n        if (needDomain) {\n            _chart.y().domain([ranges.lyAxisMin, ranges.lyAxisMax]);\n        }\n        if (needRange) {\n            _chart.y().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.y().range([_chart.yAxisHeight(), 0]);\n        _chart.yAxis(_chart.yAxis().scale(_chart.y()));\n\n        _chart.yAxis().orient('left');\n    }\n\n    function generateChildG (child, i) {\n        child._generateG(_chart.g());\n        child.g().attr('class', SUB_CHART_CLASS + ' _' + i);\n    }\n\n    _chart.plotData = function () {\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n\n            if (!child.g()) {\n                generateChildG(child, i);\n            }\n\n            if (_shareColors) {\n                child.colors(_chart.colors());\n            }\n\n            child.x(_chart.x());\n\n            child.xAxis(_chart.xAxis());\n\n            if (child.useRightYAxis()) {\n                child.y(_chart.rightY());\n                child.yAxis(_chart.rightYAxis());\n            } else {\n                child.y(_chart.y());\n                child.yAxis(_chart.yAxis());\n            }\n\n            child.plotData();\n\n            child._activateRenderlets();\n        }\n    };\n\n    /**\n     * Get or set whether to draw gridlines from the right y axis.  Drawing from the left y axis is the\n     * default behavior. This option is only respected when subcharts with both left and right y-axes\n     * are present.\n     * @method useRightAxisGridLines\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [useRightAxisGridLines=false]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.useRightAxisGridLines = function (useRightAxisGridLines) {\n        if (!arguments) {\n            return _rightAxisGridLines;\n        }\n\n        _rightAxisGridLines = useRightAxisGridLines;\n        return _chart;\n    };\n\n    /**\n     * Get or set chart-specific options for all child charts. This is equivalent to calling\n     * {@link dc.baseMixin#options .options} on each child chart.\n     * @method childOptions\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Object} [childOptions]\n     * @returns {Object|dc.compositeChart}\n     */\n    _chart.childOptions = function (childOptions) {\n        if (!arguments.length) {\n            return _childOptions;\n        }\n        _childOptions = childOptions;\n        _children.forEach(function (child) {\n            child.options(_childOptions);\n        });\n        return _chart;\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n            child.brush(_chart.brush());\n            child.fadeDeselectedArea();\n        }\n    };\n\n    /**\n     * Set or get the right y axis label.\n     * @method rightYAxisLabel\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {String} [rightYAxisLabel]\n     * @param {Number} [padding]\n     * @returns {String|dc.compositeChart}\n     */\n    _chart.rightYAxisLabel = function (rightYAxisLabel, padding) {\n        if (!arguments.length) {\n            return _rightYAxisLabel;\n        }\n        _rightYAxisLabel = rightYAxisLabel;\n        _chart.margins().right -= _rightYAxisLabelPadding;\n        _rightYAxisLabelPadding = (padding === undefined) ? DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING : padding;\n        _chart.margins().right += _rightYAxisLabelPadding;\n        return _chart;\n    };\n\n    /**\n     * Combine the given charts into one single composite coordinate grid chart.\n     * @method compose\n     * @memberof dc.compositeChart\n     * @instance\n     * @example\n     * moveChart.compose([\n     *     // when creating sub-chart you need to pass in the parent chart\n     *     dc.lineChart(moveChart)\n     *         .group(indexAvgByMonthGroup) // if group is missing then parent's group will be used\n     *         .valueAccessor(function (d){return d.value.avg;})\n     *         // most of the normal functions will continue to work in a composed chart\n     *         .renderArea(true)\n     *         .stack(monthlyMoveGroup, function (d){return d.value;})\n     *         .title(function (d){\n     *             var value = d.value.avg?d.value.avg:d.value;\n     *             if(isNaN(value)) value = 0;\n     *             return dateFormat(d.key) + '\\n' + numberFormat(value);\n     *         }),\n     *     dc.barChart(moveChart)\n     *         .group(volumeByMonthGroup)\n     *         .centerBar(true)\n     * ]);\n     * @param {Array<Chart>} [subChartArray]\n     * @returns {dc.compositeChart}\n     */\n    _chart.compose = function (subChartArray) {\n        _children = subChartArray;\n        _children.forEach(function (child) {\n            child.height(_chart.height());\n            child.width(_chart.width());\n            child.margins(_chart.margins());\n\n            if (_shareTitle) {\n                child.title(_chart.title());\n            }\n\n            child.options(_childOptions);\n        });\n        return _chart;\n    };\n\n    /**\n     * Returns the child charts which are composed into the composite chart.\n     * @method children\n     * @memberof dc.compositeChart\n     * @instance\n     * @returns {Array<dc.baseMixin>}\n     */\n    _chart.children = function () {\n        return _children;\n    };\n\n    /**\n     * Get or set color sharing for the chart. If set, the {@link dc.colorMixin#colors .colors()} value from this chart\n     * will be shared with composed children. Additionally if the child chart implements\n     * Stackable and has not set a custom .colorAccessor, then it will generate a color\n     * specific to its order in the composition.\n     * @method shareColors\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [shareColors=false]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.shareColors = function (shareColors) {\n        if (!arguments.length) {\n            return _shareColors;\n        }\n        _shareColors = shareColors;\n        return _chart;\n    };\n\n    /**\n     * Get or set title sharing for the chart. If set, the {@link dc.baseMixin#title .title()} value from\n     * this chart will be shared with composed children.\n     * @method shareTitle\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [shareTitle=true]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.shareTitle = function (shareTitle) {\n        if (!arguments.length) {\n            return _shareTitle;\n        }\n        _shareTitle = shareTitle;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y scale for the right axis. The right y scale is typically automatically\n     * generated by the chart implementation.\n     * @method rightY\n     * @memberof dc.compositeChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|dc.compositeChart}\n     */\n    _chart.rightY = function (yScale) {\n        if (!arguments.length) {\n            return _rightY;\n        }\n        _rightY = yScale;\n        _chart.rescale();\n        return _chart;\n    };\n\n    /**\n     * Get or set alignment between left and right y axes. A line connecting '0' on both y axis\n     * will be parallel to x axis. This only has effect when {@link #dc.coordinateGridMixin+elasticY elasticY} is true.\n     * @method alignYAxes\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [alignYAxes=false]\n     * @returns {Chart}\n     */\n    _chart.alignYAxes = function (alignYAxes) {\n        if (!arguments.length) {\n            return _alignYAxes;\n        }\n        _alignYAxes = alignYAxes;\n        _chart.rescale();\n        return _chart;\n    };\n\n    function leftYAxisChildren () {\n        return _children.filter(function (child) {\n            return !child.useRightYAxis();\n        });\n    }\n\n    function rightYAxisChildren () {\n        return _children.filter(function (child) {\n            return child.useRightYAxis();\n        });\n    }\n\n    function getYAxisMin (charts) {\n        return charts.map(function (c) {\n            return c.yAxisMin();\n        });\n    }\n\n    delete _chart.yAxisMin;\n    function yAxisMin () {\n        return d3.min(getYAxisMin(leftYAxisChildren()));\n    }\n\n    function rightYAxisMin () {\n        return d3.min(getYAxisMin(rightYAxisChildren()));\n    }\n\n    function getYAxisMax (charts) {\n        return charts.map(function (c) {\n            return c.yAxisMax();\n        });\n    }\n\n    delete _chart.yAxisMax;\n    function yAxisMax () {\n        return dc.utils.add(d3.max(getYAxisMax(leftYAxisChildren())), _chart.yAxisPadding());\n    }\n\n    function rightYAxisMax () {\n        return dc.utils.add(d3.max(getYAxisMax(rightYAxisChildren())), _chart.yAxisPadding());\n    }\n\n    function getAllXAxisMinFromChildCharts () {\n        return _children.map(function (c) {\n            return c.xAxisMin();\n        });\n    }\n\n    dc.override(_chart, 'xAxisMin', function () {\n        return dc.utils.subtract(d3.min(getAllXAxisMinFromChildCharts()), _chart.xAxisPadding());\n    });\n\n    function getAllXAxisMaxFromChildCharts () {\n        return _children.map(function (c) {\n            return c.xAxisMax();\n        });\n    }\n\n    dc.override(_chart, 'xAxisMax', function () {\n        return dc.utils.add(d3.max(getAllXAxisMaxFromChildCharts()), _chart.xAxisPadding());\n    });\n\n    _chart.legendables = function () {\n        return _children.reduce(function (items, child) {\n            if (_shareColors) {\n                child.colors(_chart.colors());\n            }\n            items.push.apply(items, child.legendables());\n            return items;\n        }, []);\n    };\n\n    _chart.legendHighlight = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n            var child = _children[j];\n            child.legendHighlight(d);\n        }\n    };\n\n    _chart.legendReset = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n            var child = _children[j];\n            child.legendReset(d);\n        }\n    };\n\n    _chart.legendToggle = function () {\n        console.log('composite should not be getting legendToggle itself');\n    };\n\n    /**\n     * Set or get the right y axis used by the composite chart. This function is most useful when y\n     * axis customization is required. The y axis in dc.js is an instance of a [d3 axis\n     * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis) therefore it supports any valid\n     * d3 axis manipulation.\n     *\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.\n     * @method rightYAxis\n     * @memberof dc.compositeChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize y axis tick format\n     * chart.rightYAxis().tickFormat(function (v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.rightYAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [rightYAxis]\n     * @returns {d3.svg.axis|dc.compositeChart}\n     */\n    _chart.rightYAxis = function (rightYAxis) {\n        if (!arguments.length) {\n            return _rightYAxis;\n        }\n        _rightYAxis = rightYAxis;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A series chart is a chart that shows multiple series of data overlaid on one chart, where the\n * series is specified in the data. It is a specialization of Composite Chart and inherits all\n * composite features other than recomposing the chart.\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/series.html Series Chart}\n * @class seriesChart\n * @memberof dc\n * @mixes dc.compositeChart\n * @example\n * // create a series chart under #chart-container1 element using the default global chart group\n * var seriesChart1 = dc.seriesChart(\"#chart-container1\");\n * // create a series chart under #chart-container2 element using chart group A\n * var seriesChart2 = dc.seriesChart(\"#chart-container2\", \"chartGroupA\");\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.seriesChart}\n */\ndc.seriesChart = function (parent, chartGroup) {\n    var _chart = dc.compositeChart(parent, chartGroup);\n\n    function keySort (a, b) {\n        return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n    }\n\n    var _charts = {};\n    var _chartFunction = dc.lineChart;\n    var _seriesAccessor;\n    var _seriesSort = d3.ascending;\n    var _valueSort = keySort;\n\n    _chart._mandatoryAttributes().push('seriesAccessor', 'chart');\n    _chart.shareColors(true);\n\n    _chart._preprocessData = function () {\n        var keep = [];\n        var childrenChanged;\n        var nester = d3.nest().key(_seriesAccessor);\n        if (_seriesSort) {\n            nester.sortKeys(_seriesSort);\n        }\n        if (_valueSort) {\n            nester.sortValues(_valueSort);\n        }\n        var nesting = nester.entries(_chart.data());\n        var children =\n            nesting.map(function (sub, i) {\n                var subChart = _charts[sub.key] || _chartFunction.call(_chart, _chart, chartGroup, sub.key, i);\n                if (!_charts[sub.key]) {\n                    childrenChanged = true;\n                }\n                _charts[sub.key] = subChart;\n                keep.push(sub.key);\n                return subChart\n                    .dimension(_chart.dimension())\n                    .group({all: d3.functor(sub.values)}, sub.key)\n                    .keyAccessor(_chart.keyAccessor())\n                    .valueAccessor(_chart.valueAccessor())\n                    .brushOn(_chart.brushOn());\n            });\n        // this works around the fact compositeChart doesn't really\n        // have a removal interface\n        Object.keys(_charts)\n            .filter(function (c) {return keep.indexOf(c) === -1;})\n            .forEach(function (c) {\n                clearChart(c);\n                childrenChanged = true;\n            });\n        _chart._compose(children);\n        if (childrenChanged && _chart.legend()) {\n            _chart.legend().render();\n        }\n    };\n\n    function clearChart (c) {\n        if (_charts[c].g()) {\n            _charts[c].g().remove();\n        }\n        delete _charts[c];\n    }\n\n    function resetChildren () {\n        Object.keys(_charts).map(clearChart);\n        _charts = {};\n    }\n\n    /**\n     * Get or set the chart function, which generates the child charts.\n     * @method chart\n     * @memberof dc.seriesChart\n     * @instance\n     * @example\n     * // put interpolation on the line charts used for the series\n     * chart.chart(function(c) { return dc.lineChart(c).interpolate('basis'); })\n     * // do a scatter series chart\n     * chart.chart(dc.scatterPlot)\n     * @param {Function} [chartFunction=dc.lineChart]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.chart = function (chartFunction) {\n        if (!arguments.length) {\n            return _chartFunction;\n        }\n        _chartFunction = chartFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Get or set accessor function for the displayed series. Given a datum, this function\n     * should return the series that datum belongs to.\n     * @method seriesAccessor\n     * @memberof dc.seriesChart\n     * @instance\n     * @example\n     * // simple series accessor\n     * chart.seriesAccessor(function(d) { return \"Expt: \" + d.key[0]; })\n     * @param {Function} [accessor]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.seriesAccessor = function (accessor) {\n        if (!arguments.length) {\n            return _seriesAccessor;\n        }\n        _seriesAccessor = accessor;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * Get or set a function to sort the list of series by, given series values.\n     * @method seriesSort\n     * @memberof dc.seriesChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.seriesSort(d3.descending);\n     * @param {Function} [sortFunction=d3.ascending]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.seriesSort = function (sortFunction) {\n        if (!arguments.length) {\n            return _seriesSort;\n        }\n        _seriesSort = sortFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * Get or set a function to sort each series values by. By default this is the key accessor which,\n     * for example, will ensure a lineChart series connects its points in increasing key/x order,\n     * rather than haphazardly.\n     * @method valueSort\n     * @memberof dc.seriesChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * // Default value sort\n     * _chart.valueSort(function keySort (a, b) {\n     *     return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n     * });\n     * @param {Function} [sortFunction]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.valueSort = function (sortFunction) {\n        if (!arguments.length) {\n            return _valueSort;\n        }\n        _valueSort = sortFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    // make compose private\n    _chart._compose = _chart.compose;\n    delete _chart.compose;\n\n    return _chart;\n};\n\n/**\n * The geo choropleth chart is designed as an easy way to create a crossfilter driven choropleth map\n * from GeoJson data. This chart implementation was inspired by\n * {@link http://bl.ocks.org/4060606 the great d3 choropleth example}.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n * @class geoChoroplethChart\n * @memberof dc\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a choropleth chart under '#us-chart' element using the default global chart group\n * var chart1 = dc.geoChoroplethChart('#us-chart');\n * // create a choropleth chart under '#us-chart2' element using chart group A\n * var chart2 = dc.compositeChart('#us-chart2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.geoChoroplethChart}\n */\ndc.geoChoroplethChart = function (parent, chartGroup) {\n    var _chart = dc.colorMixin(dc.baseMixin({}));\n\n    _chart.colorAccessor(function (d) {\n        return d || 0;\n    });\n\n    var _geoPath = d3.geo.path();\n    var _projectionFlag;\n\n    var _geoJsons = [];\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n            var states = _chart.svg().append('g')\n                .attr('class', 'layer' + layerIndex);\n\n            var regionG = states.selectAll('g.' + geoJson(layerIndex).name)\n                .data(geoJson(layerIndex).data)\n                .enter()\n                .append('g')\n                .attr('class', geoJson(layerIndex).name);\n\n            regionG\n                .append('path')\n                .attr('fill', 'white')\n                .attr('d', _geoPath);\n\n            regionG.append('title');\n\n            plotData(layerIndex);\n        }\n        _projectionFlag = false;\n    };\n\n    function plotData (layerIndex) {\n        var data = generateLayeredData();\n\n        if (isDataLayer(layerIndex)) {\n            var regionG = renderRegionG(layerIndex);\n\n            renderPaths(regionG, layerIndex, data);\n\n            renderTitle(regionG, layerIndex, data);\n        }\n    }\n\n    function generateLayeredData () {\n        var data = {};\n        var groupAll = _chart.data();\n        for (var i = 0; i < groupAll.length; ++i) {\n            data[_chart.keyAccessor()(groupAll[i])] = _chart.valueAccessor()(groupAll[i]);\n        }\n        return data;\n    }\n\n    function isDataLayer (layerIndex) {\n        return geoJson(layerIndex).keyAccessor;\n    }\n\n    function renderRegionG (layerIndex) {\n        var regionG = _chart.svg()\n            .selectAll(layerSelector(layerIndex))\n            .classed('selected', function (d) {\n                return isSelected(layerIndex, d);\n            })\n            .classed('deselected', function (d) {\n                return isDeselected(layerIndex, d);\n            })\n            .attr('class', function (d) {\n                var layerNameClass = geoJson(layerIndex).name;\n                var regionClass = dc.utils.nameToId(geoJson(layerIndex).keyAccessor(d));\n                var baseClasses = layerNameClass + ' ' + regionClass;\n                if (isSelected(layerIndex, d)) {\n                    baseClasses += ' selected';\n                }\n                if (isDeselected(layerIndex, d)) {\n                    baseClasses += ' deselected';\n                }\n                return baseClasses;\n            });\n        return regionG;\n    }\n\n    function layerSelector (layerIndex) {\n        return 'g.layer' + layerIndex + ' g.' + geoJson(layerIndex).name;\n    }\n\n    function isSelected (layerIndex, d) {\n        return _chart.hasFilter() && _chart.hasFilter(getKey(layerIndex, d));\n    }\n\n    function isDeselected (layerIndex, d) {\n        return _chart.hasFilter() && !_chart.hasFilter(getKey(layerIndex, d));\n    }\n\n    function getKey (layerIndex, d) {\n        return geoJson(layerIndex).keyAccessor(d);\n    }\n\n    function geoJson (index) {\n        return _geoJsons[index];\n    }\n\n    function renderPaths (regionG, layerIndex, data) {\n        var paths = regionG\n            .select('path')\n            .attr('fill', function () {\n                var currentFill = d3.select(this).attr('fill');\n                if (currentFill) {\n                    return currentFill;\n                }\n                return 'none';\n            })\n            .on('click', function (d) {\n                return _chart.onClick(d, layerIndex);\n            });\n\n        dc.transition(paths, _chart.transitionDuration(), _chart.transitionDelay()).attr('fill', function (d, i) {\n            return _chart.getColor(data[geoJson(layerIndex).keyAccessor(d)], i);\n        });\n    }\n\n    _chart.onClick = function (d, layerIndex) {\n        var selectedRegion = geoJson(layerIndex).keyAccessor(d);\n        dc.events.trigger(function () {\n            _chart.filter(selectedRegion);\n            _chart.redrawGroup();\n        });\n    };\n\n    function renderTitle (regionG, layerIndex, data) {\n        if (_chart.renderTitle()) {\n            regionG.selectAll('title').text(function (d) {\n                var key = getKey(layerIndex, d);\n                var value = data[key];\n                return _chart.title()({key: key, value: value});\n            });\n        }\n    }\n\n    _chart._doRedraw = function () {\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n            plotData(layerIndex);\n            if (_projectionFlag) {\n                _chart.svg().selectAll('g.' + geoJson(layerIndex).name + ' path').attr('d', _geoPath);\n            }\n        }\n        _projectionFlag = false;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Use this function to insert a new GeoJson map layer. This function can be invoked multiple times\n     * if you have multiple GeoJson data layers to render on top of each other. If you overlay multiple\n     * layers with the same name the new overlay will override the existing one.\n     * @method overlayGeoJson\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link http://geojson.org/ GeoJSON}\n     * @see {@link https://github.com/topojson/topojson/wiki TopoJSON}\n     * @see {@link https://github.com/topojson/topojson-1.x-api-reference/blob/master/API-Reference.md#wiki-feature topojson.feature}\n     * @example\n     * // insert a layer for rendering US states\n     * chart.overlayGeoJson(statesJson.features, 'state', function(d) {\n     *      return d.properties.name;\n     * });\n     * @param {geoJson} json - a geojson feed\n     * @param {String} name - name of the layer\n     * @param {Function} keyAccessor - accessor function used to extract 'key' from the GeoJson data. The key extracted by\n     * this function should match the keys returned by the crossfilter groups.\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.overlayGeoJson = function (json, name, keyAccessor) {\n        for (var i = 0; i < _geoJsons.length; ++i) {\n            if (_geoJsons[i].name === name) {\n                _geoJsons[i].data = json;\n                _geoJsons[i].keyAccessor = keyAccessor;\n                return _chart;\n            }\n        }\n        _geoJsons.push({name: name, data: json, keyAccessor: keyAccessor});\n        return _chart;\n    };\n\n    /**\n     * Set custom geo projection function. See the available\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3 geo projection functions}.\n     * @method projection\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3.geo.projection}\n     * @see {@link https://github.com/d3/d3-geo-projection Extended d3.geo.projection}\n     * @param {d3.projection} [projection=d3.geo.albersUsa()]\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.projection = function (projection) {\n        _geoPath.projection(projection);\n        _projectionFlag = true;\n        return _chart;\n    };\n\n    /**\n     * Returns all GeoJson layers currently registered with this chart. The returned array is a\n     * reference to this chart's internal data structure, so any modification to this array will also\n     * modify this chart's internal registration.\n     * @method geoJsons\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @returns {Array<{name:String, data: Object, accessor: Function}>}\n     */\n    _chart.geoJsons = function () {\n        return _geoJsons;\n    };\n\n    /**\n     * Returns the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path} object used to\n     * render the projection and features.  Can be useful for figuring out the bounding box of the\n     * feature set and thus a way to calculate scale and translation for the projection.\n     * @method geoPath\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path}\n     * @returns {d3.geo.path}\n     */\n    _chart.geoPath = function () {\n        return _geoPath;\n    };\n\n    /**\n     * Remove a GeoJson layer from this chart by name\n     * @method removeGeoJson\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @param {String} name\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.removeGeoJson = function (name) {\n        var geoJsons = [];\n\n        for (var i = 0; i < _geoJsons.length; ++i) {\n            var layer = _geoJsons[i];\n            if (layer.name !== name) {\n                geoJsons.push(layer);\n            }\n        }\n\n        _geoJsons = geoJsons;\n\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The bubble overlay chart is quite different from the typical bubble chart. With the bubble overlay\n * chart you can arbitrarily place bubbles on an existing svg or bitmap image, thus changing the\n * typical x and y positioning while retaining the capability to visualize data using bubble radius\n * and coloring.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class bubbleOverlay\n * @memberof dc\n * @mixes dc.bubbleMixin\n * @mixes dc.baseMixin\n * @example\n * // create a bubble overlay chart on top of the '#chart-container1 svg' element using the default global chart group\n * var bubbleChart1 = dc.bubbleOverlayChart('#chart-container1').svg(d3.select('#chart-container1 svg'));\n * // create a bubble overlay chart on top of the '#chart-container2 svg' element using chart group A\n * var bubbleChart2 = dc.compositeChart('#chart-container2', 'chartGroupA').svg(d3.select('#chart-container2 svg'));\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.bubbleOverlay}\n */\ndc.bubbleOverlay = function (parent, chartGroup) {\n    var BUBBLE_OVERLAY_CLASS = 'bubble-overlay';\n    var BUBBLE_NODE_CLASS = 'node';\n    var BUBBLE_CLASS = 'bubble';\n\n    /**\n     * **mandatory**\n     *\n     * Set the underlying svg image element. Unlike other dc charts this chart will not generate a svg\n     * element; therefore the bubble overlay chart will not work if this function is not invoked. If the\n     * underlying image is a bitmap, then an empty svg will need to be created on top of the image.\n     * @method svg\n     * @memberof dc.bubbleOverlay\n     * @instance\n     * @example\n     * // set up underlying svg element\n     * chart.svg(d3.select('#chart svg'));\n     * @param {SVGElement|d3.selection} [imageElement]\n     * @returns {dc.bubbleOverlay}\n     */\n    var _chart = dc.bubbleMixin(dc.baseMixin({}));\n    var _g;\n    var _points = [];\n\n    _chart.transitionDuration(750);\n\n    _chart.transitionDelay(0);\n\n    _chart.radiusValueAccessor(function (d) {\n        return d.value;\n    });\n\n    /**\n     * **mandatory**\n     *\n     * Set up a data point on the overlay. The name of a data point should match a specific 'key' among\n     * data groups generated using keyAccessor.  If a match is found (point name <-> data group key)\n     * then a bubble will be generated at the position specified by the function. x and y\n     * value specified here are relative to the underlying svg.\n     * @method point\n     * @memberof dc.bubbleOverlay\n     * @instance\n     * @param {String} name\n     * @param {Number} x\n     * @param {Number} y\n     * @returns {dc.bubbleOverlay}\n     */\n    _chart.point = function (name, x, y) {\n        _points.push({name: name, x: x, y: y});\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        _g = initOverlayG();\n\n        _chart.r().range([_chart.MIN_RADIUS, _chart.width() * _chart.maxBubbleRelativeSize()]);\n\n        initializeBubbles();\n\n        _chart.fadeDeselectedArea();\n\n        return _chart;\n    };\n\n    function initOverlayG () {\n        _g = _chart.select('g.' + BUBBLE_OVERLAY_CLASS);\n        if (_g.empty()) {\n            _g = _chart.svg().append('g').attr('class', BUBBLE_OVERLAY_CLASS);\n        }\n        return _g;\n    }\n\n    function initializeBubbles () {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n            var nodeG = getNodeG(point, data);\n\n            var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n\n            if (circle.empty()) {\n                circle = nodeG.append('circle')\n                    .attr('class', BUBBLE_CLASS)\n                    .attr('r', 0)\n                    .attr('fill', _chart.getColor)\n                    .on('click', _chart.onClick);\n            }\n\n            dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('r', function (d) {\n                    return _chart.bubbleR(d);\n                });\n\n            _chart._doRenderLabel(nodeG);\n\n            _chart._doRenderTitles(nodeG);\n        });\n    }\n\n    function mapData () {\n        var data = {};\n        _chart.data().forEach(function (datum) {\n            data[_chart.keyAccessor()(datum)] = datum;\n        });\n        return data;\n    }\n\n    function getNodeG (point, data) {\n        var bubbleNodeClass = BUBBLE_NODE_CLASS + ' ' + dc.utils.nameToId(point.name);\n\n        var nodeG = _g.select('g.' + dc.utils.nameToId(point.name));\n\n        if (nodeG.empty()) {\n            nodeG = _g.append('g')\n                .attr('class', bubbleNodeClass)\n                .attr('transform', 'translate(' + point.x + ',' + point.y + ')');\n        }\n\n        nodeG.datum(data[point.name]);\n\n        return nodeG;\n    }\n\n    _chart._doRedraw = function () {\n        updateBubbles();\n\n        _chart.fadeDeselectedArea();\n\n        return _chart;\n    };\n\n    function updateBubbles () {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n            var nodeG = getNodeG(point, data);\n\n            var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n\n            dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('r', function (d) {\n                    return _chart.bubbleR(d);\n                })\n                .attr('fill', _chart.getColor);\n\n            _chart.doUpdateLabels(nodeG);\n\n            _chart.doUpdateTitles(nodeG);\n        });\n    }\n\n    _chart.debug = function (flag) {\n        if (flag) {\n            var debugG = _chart.select('g.' + dc.constants.DEBUG_GROUP_CLASS);\n\n            if (debugG.empty()) {\n                debugG = _chart.svg()\n                    .append('g')\n                    .attr('class', dc.constants.DEBUG_GROUP_CLASS);\n            }\n\n            var debugText = debugG.append('text')\n                .attr('x', 10)\n                .attr('y', 20);\n\n            debugG\n                .append('rect')\n                .attr('width', _chart.width())\n                .attr('height', _chart.height())\n                .on('mousemove', function () {\n                    var position = d3.mouse(debugG.node());\n                    var msg = position[0] + ', ' + position[1];\n                    debugText.text(msg);\n                });\n        } else {\n            _chart.selectAll('.debug').remove();\n        }\n\n        return _chart;\n    };\n\n    _chart.anchor(parent, chartGroup);\n\n    return _chart;\n};\n\n/**\n * Concrete row chart implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class rowChart\n * @memberof dc\n * @mixes dc.capMixin\n * @mixes dc.marginMixin\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a row chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.rowChart('#chart-container1');\n * // create a row chart under #chart-container2 element using chart group A\n * var chart2 = dc.rowChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.rowChart}\n */\ndc.rowChart = function (parent, chartGroup) {\n\n    var _g;\n\n    var _labelOffsetX = 10;\n    var _labelOffsetY = 15;\n    var _hasLabelOffsetY = false;\n    var _dyOffset = '0.35em';  // this helps center labels https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#svg_text\n    var _titleLabelOffsetX = 2;\n\n    var _gap = 5;\n\n    var _fixedBarHeight = false;\n    var _rowCssClass = 'row';\n    var _titleRowCssClass = 'titlerow';\n    var _renderTitleLabel = false;\n\n    var _chart = dc.capMixin(dc.marginMixin(dc.colorMixin(dc.baseMixin({}))));\n\n    var _x;\n\n    var _elasticX;\n\n    var _xAxis = d3.svg.axis().orient('bottom');\n\n    var _rowData;\n\n    _chart.rowsCap = _chart.cap;\n\n    function calculateAxisScale () {\n        if (!_x || _elasticX) {\n            var extent = d3.extent(_rowData, _chart.cappedValueAccessor);\n            if (extent[0] > 0) {\n                extent[0] = 0;\n            }\n            if (extent[1] < 0) {\n                extent[1] = 0;\n            }\n            _x = d3.scale.linear().domain(extent)\n                .range([0, _chart.effectiveWidth()]);\n        }\n        _xAxis.scale(_x);\n    }\n\n    function drawAxis () {\n        var axisG = _g.select('g.axis');\n\n        calculateAxisScale();\n\n        if (axisG.empty()) {\n            axisG = _g.append('g').attr('class', 'axis');\n        }\n        axisG.attr('transform', 'translate(0, ' + _chart.effectiveHeight() + ')');\n\n        dc.transition(axisG, _chart.transitionDuration(), _chart.transitionDelay())\n            .call(_xAxis);\n    }\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg()\n            .append('g')\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n\n        drawChart();\n\n        return _chart;\n    };\n\n    _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n    });\n\n    _chart.label(_chart.cappedKeyAccessor);\n\n    /**\n     * Gets or sets the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}.\n     * @method x\n     * @memberof dc.rowChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}\n     * @param {d3.scale} [scale]\n     * @returns {d3.scale|dc.rowChart}\n     */\n    _chart.x = function (scale) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = scale;\n        return _chart;\n    };\n\n    function drawGridLines () {\n        _g.selectAll('g.tick')\n            .select('line.grid-line')\n            .remove();\n\n        _g.selectAll('g.tick')\n            .append('line')\n            .attr('class', 'grid-line')\n            .attr('x1', 0)\n            .attr('y1', 0)\n            .attr('x2', 0)\n            .attr('y2', function () {\n                return -_chart.effectiveHeight();\n            });\n    }\n\n    function drawChart () {\n        _rowData = _chart.data();\n\n        drawAxis();\n        drawGridLines();\n\n        var rows = _g.selectAll('g.' + _rowCssClass)\n            .data(_rowData);\n\n        createElements(rows);\n        removeElements(rows);\n        updateElements(rows);\n    }\n\n    function createElements (rows) {\n        var rowEnter = rows.enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return _rowCssClass + ' _' + i;\n            });\n\n        rowEnter.append('rect').attr('width', 0);\n\n        createLabels(rowEnter);\n    }\n\n    function removeElements (rows) {\n        rows.exit().remove();\n    }\n\n    function rootValue () {\n        var root = _x(0);\n        return (root === -Infinity || root !== root) ? _x(1) : root;\n    }\n\n    function updateElements (rows) {\n        var n = _rowData.length;\n\n        var height;\n        if (!_fixedBarHeight) {\n            height = (_chart.effectiveHeight() - (n + 1) * _gap) / n;\n        } else {\n            height = _fixedBarHeight;\n        }\n\n        // vertically align label in center unless they override the value via property setter\n        if (!_hasLabelOffsetY) {\n            _labelOffsetY = height / 2;\n        }\n\n        var rect = rows.attr('transform', function (d, i) {\n                return 'translate(0,' + ((i + 1) * _gap + i * height) + ')';\n            }).select('rect')\n            .attr('height', height)\n            .attr('fill', _chart.getColor)\n            .on('click', onClick)\n            .classed('deselected', function (d) {\n                return (_chart.hasFilter()) ? !isSelectedRow(d) : false;\n            })\n            .classed('selected', function (d) {\n                return (_chart.hasFilter()) ? isSelectedRow(d) : false;\n            });\n\n        dc.transition(rect, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('width', function (d) {\n                return Math.abs(rootValue() - _x(_chart.valueAccessor()(d)));\n            })\n            .attr('transform', translateX);\n\n        createTitles(rows);\n        updateLabels(rows);\n    }\n\n    function createTitles (rows) {\n        if (_chart.renderTitle()) {\n            rows.select('title').remove();\n            rows.append('title').text(_chart.title());\n        }\n    }\n\n    function createLabels (rowEnter) {\n        if (_chart.renderLabel()) {\n            rowEnter.append('text')\n                .on('click', onClick);\n        }\n        if (_chart.renderTitleLabel()) {\n            rowEnter.append('text')\n                .attr('class', _titleRowCssClass)\n                .on('click', onClick);\n        }\n    }\n\n    function updateLabels (rows) {\n        if (_chart.renderLabel()) {\n            var lab = rows.select('text')\n                .attr('x', _labelOffsetX)\n                .attr('y', _labelOffsetY)\n                .attr('dy', _dyOffset)\n                .on('click', onClick)\n                .attr('class', function (d, i) {\n                    return _rowCssClass + ' _' + i;\n                })\n                .text(function (d) {\n                    return _chart.label()(d);\n                });\n            dc.transition(lab, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', translateX);\n        }\n        if (_chart.renderTitleLabel()) {\n            var titlelab = rows.select('.' + _titleRowCssClass)\n                    .attr('x', _chart.effectiveWidth() - _titleLabelOffsetX)\n                    .attr('y', _labelOffsetY)\n                    .attr('dy', _dyOffset)\n                    .attr('text-anchor', 'end')\n                    .on('click', onClick)\n                    .attr('class', function (d, i) {\n                        return _titleRowCssClass + ' _' + i ;\n                    })\n                    .text(function (d) {\n                        return _chart.title()(d);\n                    });\n            dc.transition(titlelab, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', translateX);\n        }\n    }\n\n    /**\n     * Turn on/off Title label rendering (values) using SVG style of text-anchor 'end'.\n     * @method renderTitleLabel\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Boolean} [renderTitleLabel=false]\n     * @returns {Boolean|dc.rowChart}\n     */\n    _chart.renderTitleLabel = function (renderTitleLabel) {\n        if (!arguments.length) {\n            return _renderTitleLabel;\n        }\n        _renderTitleLabel = renderTitleLabel;\n        return _chart;\n    };\n\n    function onClick (d) {\n        _chart.onClick(d);\n    }\n\n    function translateX (d) {\n        var x = _x(_chart.cappedValueAccessor(d)),\n            x0 = rootValue(),\n            s = x > x0 ? x0 : x;\n        return 'translate(' + s + ',0)';\n    }\n\n    _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n    };\n\n    /**\n     * Get the x axis for the row chart instance.  Note: not settable for row charts.\n     * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object}\n     * documention for more information.\n     * @method xAxis\n     * @memberof dc.rowChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function (v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * @returns {d3.svg.axis}\n     */\n    _chart.xAxis = function () {\n        return _xAxis;\n    };\n\n    /**\n     * Get or set the fixed bar height. Default is [false] which will auto-scale bars.\n     * For example, if you want to fix the height for a specific number of bars (useful in TopN charts)\n     * you could fix height as follows (where count = total number of bars in your TopN and gap is\n     * your vertical gap space).\n     * @method fixedBarHeight\n     * @memberof dc.rowChart\n     * @instance\n     * @example\n     * chart.fixedBarHeight( chartheight - (count + 1) * gap / count);\n     * @param {Boolean|Number} [fixedBarHeight=false]\n     * @returns {Boolean|Number|dc.rowChart}\n     */\n    _chart.fixedBarHeight = function (fixedBarHeight) {\n        if (!arguments.length) {\n            return _fixedBarHeight;\n        }\n        _fixedBarHeight = fixedBarHeight;\n        return _chart;\n    };\n\n    /**\n     * Get or set the vertical gap space between rows on a particular row chart instance.\n     * @method gap\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [gap=5]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _chart;\n    };\n\n    /**\n     * Get or set the elasticity on x axis. If this attribute is set to true, then the x axis will rescle to auto-fit the\n     * data range when filtered.\n     * @method elasticX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Boolean} [elasticX]\n     * @returns {Boolean|dc.rowChart}\n     */\n    _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n            return _elasticX;\n        }\n        _elasticX = elasticX;\n        return _chart;\n    };\n\n    /**\n     * Get or set the x offset (horizontal space to the top left corner of a row) for labels on a particular row chart.\n     * @method labelOffsetX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [labelOffsetX=10]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.labelOffsetX = function (labelOffsetX) {\n        if (!arguments.length) {\n            return _labelOffsetX;\n        }\n        _labelOffsetX = labelOffsetX;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y offset (vertical space to the top left corner of a row) for labels on a particular row chart.\n     * @method labelOffsetY\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [labelOffsety=15]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.labelOffsetY = function (labelOffsety) {\n        if (!arguments.length) {\n            return _labelOffsetY;\n        }\n        _labelOffsetY = labelOffsety;\n        _hasLabelOffsetY = true;\n        return _chart;\n    };\n\n    /**\n     * Get of set the x offset (horizontal space between right edge of row and right edge or text.\n     * @method titleLabelOffsetX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [titleLabelOffsetX=2]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.titleLabelOffsetX = function (titleLabelOffsetX) {\n        if (!arguments.length) {\n            return _titleLabelOffsetX;\n        }\n        _titleLabelOffsetX = titleLabelOffsetX;\n        return _chart;\n    };\n\n    function isSelectedRow (d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d));\n    }\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Legend is a attachable widget that can be added to other dc charts to render horizontal legend\n * labels.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class legend\n * @memberof dc\n * @example\n * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n * @returns {dc.legend}\n */\ndc.legend = function () {\n    var LABEL_GAP = 2;\n\n    var _legend = {},\n        _parent,\n        _x = 0,\n        _y = 0,\n        _itemHeight = 12,\n        _gap = 5,\n        _horizontal = false,\n        _legendWidth = 560,\n        _itemWidth = 70,\n        _autoItemWidth = false,\n        _legendText = dc.pluck('name'),\n        _maxItems;\n\n    var _g;\n\n    _legend.parent = function (p) {\n        if (!arguments.length) {\n            return _parent;\n        }\n        _parent = p;\n        return _legend;\n    };\n\n    _legend.render = function () {\n        _parent.svg().select('g.dc-legend').remove();\n        _g = _parent.svg().append('g')\n            .attr('class', 'dc-legend')\n            .attr('transform', 'translate(' + _x + ',' + _y + ')');\n        var legendables = _parent.legendables();\n\n        if (_maxItems !== undefined) {\n            legendables = legendables.slice(0, _maxItems);\n        }\n\n        var itemEnter = _g.selectAll('g.dc-legend-item')\n            .data(legendables)\n            .enter()\n            .append('g')\n            .attr('class', 'dc-legend-item')\n            .on('mouseover', function (d) {\n                _parent.legendHighlight(d);\n            })\n            .on('mouseout', function (d) {\n                _parent.legendReset(d);\n            })\n            .on('click', function (d) {\n                d.chart.legendToggle(d);\n            });\n\n        _g.selectAll('g.dc-legend-item')\n            .classed('fadeout', function (d) {\n                return d.chart.isLegendableHidden(d);\n            });\n\n        if (legendables.some(dc.pluck('dashstyle'))) {\n            itemEnter\n                .append('line')\n                .attr('x1', 0)\n                .attr('y1', _itemHeight / 2)\n                .attr('x2', _itemHeight)\n                .attr('y2', _itemHeight / 2)\n                .attr('stroke-width', 2)\n                .attr('stroke-dasharray', dc.pluck('dashstyle'))\n                .attr('stroke', dc.pluck('color'));\n        } else {\n            itemEnter\n                .append('rect')\n                .attr('width', _itemHeight)\n                .attr('height', _itemHeight)\n                .attr('fill', function (d) {return d ? d.color : 'blue';});\n        }\n\n        itemEnter.append('text')\n                .text(_legendText)\n                .attr('x', _itemHeight + LABEL_GAP)\n                .attr('y', function () {\n                    return _itemHeight / 2 + (this.clientHeight ? this.clientHeight : 13) / 2 - 2;\n                });\n\n        var _cumulativeLegendTextWidth = 0;\n        var row = 0;\n        itemEnter.attr('transform', function (d, i) {\n            if (_horizontal) {\n                var itemWidth   = _autoItemWidth === true ? this.getBBox().width + _gap : _itemWidth;\n                if ((_cumulativeLegendTextWidth + itemWidth) > _legendWidth && _cumulativeLegendTextWidth > 0) {\n                    ++row;\n                    _cumulativeLegendTextWidth = 0;\n                }\n                var translateBy = 'translate(' + _cumulativeLegendTextWidth + ',' + row * legendItemHeight() + ')';\n                _cumulativeLegendTextWidth += itemWidth;\n                return translateBy;\n            } else {\n                return 'translate(0,' + i * legendItemHeight() + ')';\n            }\n        });\n    };\n\n    function legendItemHeight () {\n        return _gap + _itemHeight;\n    }\n\n    /**\n     * Set or get x coordinate for legend widget.\n     * @method x\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [x=0]\n     * @returns {Number|dc.legend}\n     */\n    _legend.x = function (x) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = x;\n        return _legend;\n    };\n\n    /**\n     * Set or get y coordinate for legend widget.\n     * @method y\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [y=0]\n     * @returns {Number|dc.legend}\n     */\n    _legend.y = function (y) {\n        if (!arguments.length) {\n            return _y;\n        }\n        _y = y;\n        return _legend;\n    };\n\n    /**\n     * Set or get gap between legend items.\n     * @method gap\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [gap=5]\n     * @returns {Number|dc.legend}\n     */\n    _legend.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _legend;\n    };\n\n    /**\n     * Set or get legend item height.\n     * @method itemHeight\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [itemHeight=12]\n     * @returns {Number|dc.legend}\n     */\n    _legend.itemHeight = function (itemHeight) {\n        if (!arguments.length) {\n            return _itemHeight;\n        }\n        _itemHeight = itemHeight;\n        return _legend;\n    };\n\n    /**\n     * Position legend horizontally instead of vertically.\n     * @method horizontal\n     * @memberof dc.legend\n     * @instance\n     * @param  {Boolean} [horizontal=false]\n     * @returns {Boolean|dc.legend}\n     */\n    _legend.horizontal = function (horizontal) {\n        if (!arguments.length) {\n            return _horizontal;\n        }\n        _horizontal = horizontal;\n        return _legend;\n    };\n\n    /**\n     * Maximum width for horizontal legend.\n     * @method legendWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [legendWidth=500]\n     * @returns {Number|dc.legend}\n     */\n    _legend.legendWidth = function (legendWidth) {\n        if (!arguments.length) {\n            return _legendWidth;\n        }\n        _legendWidth = legendWidth;\n        return _legend;\n    };\n\n    /**\n     * Legend item width for horizontal legend.\n     * @method itemWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [itemWidth=70]\n     * @returns {Number|dc.legend}\n     */\n    _legend.itemWidth = function (itemWidth) {\n        if (!arguments.length) {\n            return _itemWidth;\n        }\n        _itemWidth = itemWidth;\n        return _legend;\n    };\n\n    /**\n     * Turn automatic width for legend items on or off. If true, {@link dc.legend#itemWidth itemWidth} is ignored.\n     * This setting takes into account the {@link dc.legend#gap gap}.\n     * @method autoItemWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Boolean} [autoItemWidth=false]\n     * @returns {Boolean|dc.legend}\n     */\n    _legend.autoItemWidth = function (autoItemWidth) {\n        if (!arguments.length) {\n            return _autoItemWidth;\n        }\n        _autoItemWidth = autoItemWidth;\n        return _legend;\n    };\n\n    /**\n     * Set or get the legend text function. The legend widget uses this function to render the legend\n     * text for each item. If no function is specified the legend widget will display the names\n     * associated with each group.\n     * @method legendText\n     * @memberof dc.legend\n     * @instance\n     * @param  {Function} [legendText]\n     * @returns {Function|dc.legend}\n     * @example\n     * // default legendText\n     * legend.legendText(dc.pluck('name'))\n     *\n     * // create numbered legend items\n     * chart.legend(dc.legend().legendText(function(d, i) { return i + '. ' + d.name; }))\n     *\n     * // create legend displaying group counts\n     * chart.legend(dc.legend().legendText(function(d) { return d.name + ': ' d.data; }))\n     **/\n    _legend.legendText = function (legendText) {\n        if (!arguments.length) {\n            return _legendText;\n        }\n        _legendText = legendText;\n        return _legend;\n    };\n\n    /**\n     * Maximum number of legend items to display\n     * @method maxItems\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [maxItems]\n     * @return {dc.legend}\n     */\n    _legend.maxItems = function (maxItems) {\n        if (!arguments.length) {\n            return _maxItems;\n        }\n        _maxItems = dc.utils.isNumber(maxItems) ? maxItems : undefined;\n        return _legend;\n    };\n\n    return _legend;\n};\n\n/**\n * A scatter plot chart\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/scatter.html Scatter Chart}\n * - {@link http://dc-js.github.io/dc.js/examples/multi-scatter.html Multi-Scatter Chart}\n * @class scatterPlot\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a scatter plot under #chart-container1 element using the default global chart group\n * var chart1 = dc.scatterPlot('#chart-container1');\n * // create a scatter plot under #chart-container2 element using chart group A\n * var chart2 = dc.scatterPlot('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.scatterPlot(compositeChart);\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.scatterPlot}\n */\ndc.scatterPlot = function (parent, chartGroup) {\n    var _chart = dc.coordinateGridMixin({});\n    var _symbol = d3.svg.symbol();\n\n    var _existenceAccessor = function (d) { return d.value; };\n\n    var originalKeyAccessor = _chart.keyAccessor();\n    _chart.keyAccessor(function (d) { return originalKeyAccessor(d)[0]; });\n    _chart.valueAccessor(function (d) { return originalKeyAccessor(d)[1]; });\n    _chart.colorAccessor(function () { return _chart._groupName; });\n\n    _chart.title(function (d) {\n        // this basically just counteracts the setting of its own key/value accessors\n        // see https://github.com/dc-js/dc.js/issues/702\n        return _chart.keyAccessor()(d) + ',' + _chart.valueAccessor()(d) + ': ' +\n            _chart.existenceAccessor()(d);\n    });\n\n    var _locator = function (d) {\n        return 'translate(' + _chart.x()(_chart.keyAccessor()(d)) + ',' +\n                              _chart.y()(_chart.valueAccessor()(d)) + ')';\n    };\n\n    var _highlightedSize = 7;\n    var _symbolSize = 5;\n    var _excludedSize = 3;\n    var _excludedColor = null;\n    var _excludedOpacity = 1.0;\n    var _emptySize = 0;\n    var _emptyOpacity = 0;\n    var _nonemptyOpacity = 1;\n    var _emptyColor = null;\n    var _filtered = [];\n\n    function elementSize (d, i) {\n        if (!_existenceAccessor(d)) {\n            return Math.pow(_emptySize, 2);\n        } else if (_filtered[i]) {\n            return Math.pow(_symbolSize, 2);\n        } else {\n            return Math.pow(_excludedSize, 2);\n        }\n    }\n    _symbol.size(elementSize);\n\n    dc.override(_chart, '_filter', function (filter) {\n        if (!arguments.length) {\n            return _chart.__filter();\n        }\n\n        return _chart.__filter(dc.filters.RangedTwoDimensionalFilter(filter));\n    });\n\n    _chart.plotData = function () {\n        var symbols = _chart.chartBodyG().selectAll('path.symbol')\n            .data(_chart.data());\n\n        symbols\n            .enter()\n        .append('path')\n            .attr('class', 'symbol')\n            .attr('opacity', 0)\n            .attr('fill', _chart.getColor)\n            .attr('transform', _locator);\n\n        symbols.call(renderTitles, _chart.data());\n\n        symbols.each(function (d, i) {\n            _filtered[i] = !_chart.filter() || _chart.filter().isFiltered([d.key[0], d.key[1]]);\n        });\n\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('opacity', function (d, i) {\n                if (!_existenceAccessor(d)) {\n                    return _emptyOpacity;\n                } else if (_filtered[i]) {\n                    return _nonemptyOpacity;\n                } else {\n                    return _chart.excludedOpacity();\n                }\n            })\n            .attr('fill', function (d, i) {\n                if (_emptyColor && !_existenceAccessor(d)) {\n                    return _emptyColor;\n                } else if (_chart.excludedColor() && !_filtered[i]) {\n                    return _chart.excludedColor();\n                } else {\n                    return _chart.getColor(d);\n                }\n            })\n            .attr('transform', _locator)\n            .attr('d', _symbol);\n\n        dc.transition(symbols.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('opacity', 0).remove();\n    };\n\n    function renderTitles (symbol, d) {\n        if (_chart.renderTitle()) {\n            symbol.selectAll('title').remove();\n            symbol.append('title').text(function (d) {\n                return _chart.title()(d);\n            });\n        }\n    }\n\n    /**\n     * Get or set the existence accessor.  If a point exists, it is drawn with\n     * {@link dc.scatterPlot#symbolSize symbolSize} radius and\n     * opacity 1; if it does not exist, it is drawn with\n     * {@link dc.scatterPlot#emptySize emptySize} radius and opacity 0. By default,\n     * the existence accessor checks if the reduced value is truthy.\n     * @method existenceAccessor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link dc.scatterPlot#symbolSize symbolSize}\n     * @see {@link dc.scatterPlot#emptySize emptySize}\n     * @example\n     * // default accessor\n     * chart.existenceAccessor(function (d) { return d.value; });\n     * @param {Function} [accessor]\n     * @returns {Function|dc.scatterPlot}\n     */\n    _chart.existenceAccessor = function (accessor) {\n        if (!arguments.length) {\n            return _existenceAccessor;\n        }\n        _existenceAccessor = accessor;\n        return this;\n    };\n\n    /**\n     * Get or set the symbol type used for each point. By default the symbol is a circle.\n     * Type can be a constant or an accessor.\n     * @method symbol\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_type d3.svg.symbol.type}\n     * @example\n     * // Circle type\n     * chart.symbol('circle');\n     * // Square type\n     * chart.symbol('square');\n     * @param {String|Function} [type='circle']\n     * @returns {String|Function|dc.scatterPlot}\n     */\n    _chart.symbol = function (type) {\n        if (!arguments.length) {\n            return _symbol.type();\n        }\n        _symbol.type(type);\n        return _chart;\n    };\n\n    /**\n     * Get or set the symbol generator. By default `dc.scatterPlot` will use\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol()}\n     * to generate symbols. `dc.scatterPlot` will set the\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size size accessor}\n     * on the symbol generator.\n     * @method customSymbol\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol}\n     * @see {@link https://stackoverflow.com/questions/25332120/create-additional-d3-js-symbols Create additional D3.js symbols}\n     * @param {String|Function} [customSymbol=d3.svg.symbol()]\n     * @returns {String|Function|dc.scatterPlot}\n     */\n    _chart.customSymbol = function (customSymbol) {\n        if (!arguments.length) {\n            return _symbol;\n        }\n        _symbol = customSymbol;\n        _symbol.size(elementSize);\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for symbols.\n     * @method symbolSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [symbolSize=3]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.symbolSize = function (symbolSize) {\n        if (!arguments.length) {\n            return _symbolSize;\n        }\n        _symbolSize = symbolSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for highlighted symbols.\n     * @method highlightedSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [highlightedSize=5]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.highlightedSize = function (highlightedSize) {\n        if (!arguments.length) {\n            return _highlightedSize;\n        }\n        _highlightedSize = highlightedSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get size for symbols excluded from this chart's filter. If null, no\n     * special size is applied for symbols based on their filter status.\n     * @method excludedSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [excludedSize=null]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedSize = function (excludedSize) {\n        if (!arguments.length) {\n            return _excludedSize;\n        }\n        _excludedSize = excludedSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get color for symbols excluded from this chart's filter. If null, no\n     * special color is applied for symbols based on their filter status.\n     * @method excludedColor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [excludedColor=null]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedColor = function (excludedColor) {\n        if (!arguments.length) {\n            return _excludedColor;\n        }\n        _excludedColor = excludedColor;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols excluded from this chart's filter.\n     * @method excludedOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [excludedOpacity=1.0]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedOpacity = function (excludedOpacity) {\n        if (!arguments.length) {\n            return _excludedOpacity;\n        }\n        _excludedOpacity = excludedOpacity;\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for symbols when the group is empty.\n     * @method emptySize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [emptySize=0]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.hiddenSize = _chart.emptySize = function (emptySize) {\n        if (!arguments.length) {\n            return _emptySize;\n        }\n        _emptySize = emptySize;\n        return _chart;\n    };\n\n    /**\n     * Set or get color for symbols when the group is empty. If null, just use the\n     * {@link dc.colorMixin#colors colorMixin.colors} color scale zero value.\n     * @name emptyColor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {String} [emptyColor=null]\n     * @return {String}\n     * @return {dc.scatterPlot}/\n     */\n    _chart.emptyColor = function (emptyColor) {\n        if (!arguments.length) {\n            return _emptyColor;\n        }\n        _emptyColor = emptyColor;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols when the group is empty.\n     * @name emptyOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [emptyOpacity=0]\n     * @return {Number}\n     * @return {dc.scatterPlot}\n     */\n    _chart.emptyOpacity = function (emptyOpacity) {\n        if (!arguments.length) {\n            return _emptyOpacity;\n        }\n        _emptyOpacity = emptyOpacity;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols when the group is not empty.\n     * @name nonemptyOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [nonemptyOpacity=1]\n     * @return {Number}\n     * @return {dc.scatterPlot}\n     */\n    _chart.nonemptyOpacity = function (nonemptyOpacity) {\n        if (!arguments.length) {\n            return _emptyOpacity;\n        }\n        _nonemptyOpacity = nonemptyOpacity;\n        return _chart;\n    };\n\n    _chart.legendables = function () {\n        return [{chart: _chart, name: _chart._groupName, color: _chart.getColor()}];\n    };\n\n    _chart.legendHighlight = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n            return symbol.attr('fill') === d.color;\n        }, _highlightedSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', true);\n    };\n\n    _chart.legendReset = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n            return symbol.attr('fill') === d.color;\n        }, _symbolSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', false);\n    };\n\n    function resizeSymbolsWhere (condition, size) {\n        var symbols = _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return condition(d3.select(this));\n        });\n        var oldSize = _symbol.size();\n        _symbol.size(Math.pow(size, 2));\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay()).attr('d', _symbol);\n        _symbol.size(oldSize);\n    }\n\n    _chart.setHandlePaths = function () {\n        // no handle paths for poly-brushes\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n        if (_chart.round()) {\n            extent[0] = extent[0].map(_chart.round());\n            extent[1] = extent[1].map(_chart.round());\n\n            _chart.g().select('.brush')\n                .call(_chart.brush().extent(extent));\n        }\n        return extent;\n    };\n\n    _chart.brushIsEmpty = function (extent) {\n        return _chart.brush().empty() || !extent || extent[0][0] >= extent[1][0] || extent[0][1] >= extent[1][1];\n    };\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n\n        _chart.redrawBrush(_chart.g());\n\n        if (_chart.brushIsEmpty(extent)) {\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.redrawGroup();\n            });\n\n        } else {\n            var ranged2DFilter = dc.filters.RangedTwoDimensionalFilter(extent);\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.filter(ranged2DFilter);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n\n        }\n    };\n\n    _chart.setBrushY = function (gBrush) {\n        gBrush.call(_chart.brush().y(_chart.y()));\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A display of a single numeric value.\n * Unlike other charts, you do not need to set a dimension. Instead a group object must be provided and\n * a valueAccessor that returns a single value.\n * @class numberDisplay\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * // create a number display under #chart-container1 element using the default global chart group\n * var display1 = dc.numberDisplay('#chart-container1');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.numberDisplay}\n */\ndc.numberDisplay = function (parent, chartGroup) {\n    var SPAN_CLASS = 'number-display';\n    var _formatNumber = d3.format('.2s');\n    var _chart = dc.baseMixin({});\n    var _html = {one: '', some: '', none: ''};\n    var _lastValue;\n\n    // dimension not required\n    _chart._mandatoryAttributes(['group']);\n\n    // default to ordering by value, to emulate old group.top(1) behavior when multiple groups\n    _chart.ordering(function (kv) { return kv.value; });\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending on the number\n     * displayed.  The text `%number` will be replaced with the current value.\n     * - one: HTML template to use if the number is 1\n     * - zero: HTML template to use if the number is 0\n     * - some: HTML template to use otherwise\n     * @method html\n     * @memberof dc.numberDisplay\n     * @instance\n     * @example\n     * numberWidget.html({\n     *      one:'%number record',\n     *      some:'%number records',\n     *      none:'no records'})\n     * @param {{one:String, some:String, none:String}} [html={one: '', some: '', none: ''}]\n     * @returns {{one:String, some:String, none:String}|dc.numberDisplay}\n     */\n    _chart.html = function (html) {\n        if (!arguments.length) {\n            return _html;\n        }\n        if (html.none) {\n            _html.none = html.none;//if none available\n        } else if (html.one) {\n            _html.none = html.one;//if none not available use one\n        } else if (html.some) {\n            _html.none = html.some;//if none and one not available use some\n        }\n        if (html.one) {\n            _html.one = html.one;//if one available\n        } else if (html.some) {\n            _html.one = html.some;//if one not available use some\n        }\n        if (html.some) {\n            _html.some = html.some;//if some available\n        } else if (html.one) {\n            _html.some = html.one;//if some not available use one\n        }\n        return _chart;\n    };\n\n    /**\n     * Calculate and return the underlying value of the display.\n     * @method value\n     * @memberof dc.numberDisplay\n     * @instance\n     * @returns {Number}\n     */\n    _chart.value = function () {\n        return _chart.data();\n    };\n\n    function maxBin (all) {\n        if (!all.length) {\n            return null;\n        }\n        var sorted = _chart._computeOrderedGroups(all);\n        return sorted[sorted.length - 1];\n    }\n    _chart.data(function (group) {\n        var valObj = group.value ? group.value() : maxBin(group.all());\n        return _chart.valueAccessor()(valObj);\n    });\n\n    _chart.transitionDuration(250); // good default\n    _chart.transitionDelay(0);\n\n    _chart._doRender = function () {\n        var newValue = _chart.value(),\n            span = _chart.selectAll('.' + SPAN_CLASS);\n\n        if (span.empty()) {\n            span = span.data([0])\n                .enter()\n                .append('span')\n                .attr('class', SPAN_CLASS);\n        }\n\n        span.transition()\n            .duration(_chart.transitionDuration())\n            .delay(_chart.transitionDelay())\n            .ease('quad-out-in')\n            .tween('text', function () {\n                // [XA] don't try and interpolate from Infinity, else this breaks.\n                var interpStart = isFinite(_lastValue) ? _lastValue : 0;\n                var interp = d3.interpolateNumber(interpStart || 0, newValue);\n                _lastValue = newValue;\n                return function (t) {\n                    var html = null, num = _chart.formatNumber()(interp(t));\n                    if (newValue === 0 && (_html.none !== '')) {\n                        html = _html.none;\n                    } else if (newValue === 1 && (_html.one !== '')) {\n                        html = _html.one;\n                    } else if (_html.some !== '') {\n                        html = _html.some;\n                    }\n                    this.innerHTML = html ? html.replace('%number', num) : num;\n                };\n            });\n    };\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set a function to format the value for the display.\n     * @method formatNumber\n     * @memberof dc.numberDisplay\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n     * @param {Function} [formatter=d3.format('.2s')]\n     * @returns {Function|dc.numberDisplay}\n     */\n    _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n            return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A heat map is matrix that represents the values of two dimensions of data using colors.\n * @class heatMap\n * @memberof dc\n * @mixes dc.colorMixin\n * @mixes dc.marginMixin\n * @mixes dc.baseMixin\n * @example\n * // create a heat map under #chart-container1 element using the default global chart group\n * var heatMap1 = dc.heatMap('#chart-container1');\n * // create a heat map under #chart-container2 element using chart group A\n * var heatMap2 = dc.heatMap('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.heatMap}\n */\ndc.heatMap = function (parent, chartGroup) {\n\n    var DEFAULT_BORDER_RADIUS = 6.75;\n\n    var _chartBody;\n\n    var _cols;\n    var _rows;\n    var _colOrdering = d3.ascending;\n    var _rowOrdering = d3.ascending;\n    var _colScale = d3.scale.ordinal();\n    var _rowScale = d3.scale.ordinal();\n\n    var _xBorderRadius = DEFAULT_BORDER_RADIUS;\n    var _yBorderRadius = DEFAULT_BORDER_RADIUS;\n\n    var _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin({})));\n    _chart._mandatoryAttributes(['group']);\n    _chart.title(_chart.colorAccessor());\n\n    var _colsLabel = function (d) {\n        return d;\n    };\n    var _rowsLabel = function (d) {\n        return d;\n    };\n\n    /**\n     * Set or get the column label function. The chart class uses this function to render\n     * column labels on the X axis. It is passed the column name.\n     * @method colsLabel\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // the default label function just returns the name\n     * chart.colsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.colsLabel = function (labelFunction) {\n        if (!arguments.length) {\n            return _colsLabel;\n        }\n        _colsLabel = labelFunction;\n        return _chart;\n    };\n\n    /**\n     * Set or get the row label function. The chart class uses this function to render\n     * row labels on the Y axis. It is passed the row name.\n     * @method rowsLabel\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // the default label function just returns the name\n     * chart.rowsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.rowsLabel = function (labelFunction) {\n        if (!arguments.length) {\n            return _rowsLabel;\n        }\n        _rowsLabel = labelFunction;\n        return _chart;\n    };\n\n    var _xAxisOnClick = function (d) { filterAxis(0, d); };\n    var _yAxisOnClick = function (d) { filterAxis(1, d); };\n    var _boxOnClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    function filterAxis (axis, value) {\n        var cellsOnAxis = _chart.selectAll('.box-group').filter(function (d) {\n            return d.key[axis] === value;\n        });\n        var unfilteredCellsOnAxis = cellsOnAxis.filter(function (d) {\n            return !_chart.hasFilter(d.key);\n        });\n        dc.events.trigger(function () {\n            var selection = unfilteredCellsOnAxis.empty() ? cellsOnAxis : unfilteredCellsOnAxis;\n            var filters = selection.data().map(function (kv) {\n                return dc.filters.TwoDimensionalFilter(kv.key);\n            });\n            _chart._filter([filters]);\n            _chart.redrawGroup();\n        });\n    }\n\n    dc.override(_chart, 'filter', function (filter) {\n        if (!arguments.length) {\n            return _chart._filter();\n        }\n\n        return _chart._filter(dc.filters.TwoDimensionalFilter(filter));\n    });\n\n    /**\n     * Gets or sets the values used to create the rows of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the value accessor.\n     * @method rows\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Array<String|Number>} [rows]\n     * @returns {Array<String|Number>|dc.heatMap}\n     */\n\n    _chart.rows = function (rows) {\n        if (!arguments.length) {\n            return _rows;\n        }\n        _rows = rows;\n        return _chart;\n    };\n\n    /**\n     #### .rowOrdering([orderFunction])\n     Get or set an accessor to order the rows.  Default is d3.ascending.\n     */\n    _chart.rowOrdering = function (_) {\n        if (!arguments.length) {\n            return _rowOrdering;\n        }\n        _rowOrdering = _;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the keys used to create the columns of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the key accessor.\n     * @method cols\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Array<String|Number>} [cols]\n     * @returns {Array<String|Number>|dc.heatMap}\n     */\n    _chart.cols = function (cols) {\n        if (!arguments.length) {\n            return _cols;\n        }\n        _cols = cols;\n        return _chart;\n    };\n\n    /**\n     #### .colOrdering([orderFunction])\n     Get or set an accessor to order the cols.  Default is ascending.\n     */\n    _chart.colOrdering = function (_) {\n        if (!arguments.length) {\n            return _colOrdering;\n        }\n        _colOrdering = _;\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chartBody = _chart.svg()\n            .append('g')\n            .attr('class', 'heatmap')\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n\n        return _chart._doRedraw();\n    };\n\n    _chart._doRedraw = function () {\n        var data = _chart.data(),\n            rows = _chart.rows() || data.map(_chart.valueAccessor()),\n            cols = _chart.cols() || data.map(_chart.keyAccessor());\n        if (_rowOrdering) {\n            rows = rows.sort(_rowOrdering);\n        }\n        if (_colOrdering) {\n            cols = cols.sort(_colOrdering);\n        }\n        rows = _rowScale.domain(rows);\n        cols = _colScale.domain(cols);\n\n        var rowCount = rows.domain().length,\n            colCount = cols.domain().length,\n            boxWidth = Math.floor(_chart.effectiveWidth() / colCount),\n            boxHeight = Math.floor(_chart.effectiveHeight() / rowCount);\n\n        cols.rangeRoundBands([0, _chart.effectiveWidth()]);\n        rows.rangeRoundBands([_chart.effectiveHeight(), 0]);\n\n        var boxes = _chartBody.selectAll('g.box-group').data(_chart.data(), function (d, i) {\n            return _chart.keyAccessor()(d, i) + '\\0' + _chart.valueAccessor()(d, i);\n        });\n        var gEnter = boxes.enter().append('g')\n            .attr('class', 'box-group');\n\n        gEnter.append('rect')\n            .attr('class', 'heat-box')\n            .attr('fill', 'white')\n            .on('click', _chart.boxOnClick());\n\n        if (_chart.renderTitle()) {\n            gEnter.append('title');\n            boxes.select('title').text(_chart.title());\n        }\n\n        dc.transition(boxes.select('rect'), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d, i) { return cols(_chart.keyAccessor()(d, i)); })\n            .attr('y', function (d, i) { return rows(_chart.valueAccessor()(d, i)); })\n            .attr('rx', _xBorderRadius)\n            .attr('ry', _yBorderRadius)\n            .attr('fill', _chart.getColor)\n            .attr('width', boxWidth)\n            .attr('height', boxHeight);\n\n        boxes.exit().remove();\n\n        var gCols = _chartBody.select('g.cols');\n        if (gCols.empty()) {\n            gCols = _chartBody.append('g').attr('class', 'cols axis');\n        }\n        var gColsText = gCols.selectAll('text').data(cols.domain());\n        gColsText.enter().append('text')\n              .attr('x', function (d) { return cols(d) + boxWidth / 2; })\n              .style('text-anchor', 'middle')\n              .attr('y', _chart.effectiveHeight())\n              .attr('dy', 12)\n              .on('click', _chart.xAxisOnClick())\n              .text(_chart.colsLabel());\n        dc.transition(gColsText, _chart.transitionDuration(), _chart.transitionDelay())\n               .text(_chart.colsLabel())\n               .attr('x', function (d) { return cols(d) + boxWidth / 2; })\n               .attr('y', _chart.effectiveHeight());\n        gColsText.exit().remove();\n        var gRows = _chartBody.select('g.rows');\n        if (gRows.empty()) {\n            gRows = _chartBody.append('g').attr('class', 'rows axis');\n        }\n        var gRowsText = gRows.selectAll('text').data(rows.domain());\n        gRowsText.enter().append('text')\n              .attr('dy', 6)\n              .style('text-anchor', 'end')\n              .attr('x', 0)\n              .attr('dx', -2)\n              .on('click', _chart.yAxisOnClick())\n              .text(_chart.rowsLabel());\n        dc.transition(gRowsText, _chart.transitionDuration(), _chart.transitionDelay())\n              .text(_chart.rowsLabel())\n              .attr('y', function (d) { return rows(d) + boxHeight / 2; });\n        gRowsText.exit().remove();\n\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.box-group').each(function (d) {\n                if (_chart.isSelectedNode(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.box-group').each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when an individual cell is clicked in the heatmap.\n     * By default, filtering of the cell will be toggled.\n     * @method boxOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // default box on click handler\n     * chart.boxOnClick(function (d) {\n     *     var filter = d.key;\n     *     dc.events.trigger(function () {\n     *         _chart.filter(filter);\n     *         _chart.redrawGroup();\n     *     });\n     * });\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.boxOnClick = function (handler) {\n        if (!arguments.length) {\n            return _boxOnClick;\n        }\n        _boxOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when a column tick is clicked in the x axis.\n     * By default, if any cells in the column are unselected, the whole column will be selected,\n     * otherwise the whole column will be unselected.\n     * @method xAxisOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.xAxisOnClick = function (handler) {\n        if (!arguments.length) {\n            return _xAxisOnClick;\n        }\n        _xAxisOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when a row tick is clicked in the y axis.\n     * By default, if any cells in the row are unselected, the whole row will be selected,\n     * otherwise the whole row will be unselected.\n     * @method yAxisOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.yAxisOnClick = function (handler) {\n        if (!arguments.length) {\n            return _yAxisOnClick;\n        }\n        _yAxisOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the X border radius.  Set to 0 to get full rectangles.\n     * @method xBorderRadius\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Number} [xBorderRadius=6.75]\n     * @returns {Number|dc.heatMap}\n     */\n    _chart.xBorderRadius = function (xBorderRadius) {\n        if (!arguments.length) {\n            return _xBorderRadius;\n        }\n        _xBorderRadius = xBorderRadius;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the Y border radius.  Set to 0 to get full rectangles.\n     * @method yBorderRadius\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Number} [yBorderRadius=6.75]\n     * @returns {Number|dc.heatMap}\n     */\n    _chart.yBorderRadius = function (yBorderRadius) {\n        if (!arguments.length) {\n            return _yBorderRadius;\n        }\n        _yBorderRadius = yBorderRadius;\n        return _chart;\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n// https://github.com/d3/d3-plugins/blob/master/box/box.js\n(function () {\n\n    // Inspired by http://informationandvisualization.de/blog/box-plot\n    d3.box = function () {\n        var width = 1,\n            height = 1,\n            duration = 0,\n            delay = 0,\n            domain = null,\n            value = Number,\n            whiskers = boxWhiskers,\n            quartiles = boxQuartiles,\n            tickFormat = null;\n\n        // For each small multiple…\n        function box (g) {\n            g.each(function (d, i) {\n                d = d.map(value).sort(d3.ascending);\n                var g = d3.select(this),\n                    n = d.length,\n                    min = d[0],\n                    max = d[n - 1];\n\n                // Compute quartiles. Must return exactly 3 elements.\n                var quartileData = d.quartiles = quartiles(d);\n\n                // Compute whiskers. Must return exactly 2 elements, or null.\n                var whiskerIndices = whiskers && whiskers.call(this, d, i),\n                    whiskerData = whiskerIndices && whiskerIndices.map(function (i) { return d[i]; });\n\n                // Compute outliers. If no whiskers are specified, all data are 'outliers'.\n                // We compute the outliers as indices, so that we can join across transitions!\n                var outlierIndices = whiskerIndices ?\n                    d3.range(0, whiskerIndices[0]).concat(d3.range(whiskerIndices[1] + 1, n)) : d3.range(n);\n\n                // Compute the new x-scale.\n                var x1 = d3.scale.linear()\n                    .domain(domain && domain.call(this, d, i) || [min, max])\n                    .range([height, 0]);\n\n                // Retrieve the old x-scale, if this is an update.\n                var x0 = this.__chart__ || d3.scale.linear()\n                    .domain([0, Infinity])\n                    .range(x1.range());\n\n                // Stash the new scale.\n                this.__chart__ = x1;\n\n                // Note: the box, median, and box tick elements are fixed in number,\n                // so we only have to handle enter and update. In contrast, the outliers\n                // and other elements are variable, so we need to exit them! Variable\n                // elements also fade in and out.\n\n                // Update center line: the vertical line spanning the whiskers.\n                var center = g.selectAll('line.center')\n                    .data(whiskerData ? [whiskerData] : []);\n\n                center.enter().insert('line', 'rect')\n                    .attr('class', 'center')\n                    .attr('x1', width / 2)\n                    .attr('y1', function (d) { return x0(d[0]); })\n                    .attr('x2', width / 2)\n                    .attr('y2', function (d) { return x0(d[1]); })\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); });\n\n                center.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1)\n                    .attr('x1', width / 2)\n                    .attr('x2', width / 2)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); });\n\n                center.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1e-6)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); })\n                    .remove();\n\n                // Update innerquartile box.\n                var box = g.selectAll('rect.box')\n                    .data([quartileData]);\n\n                box.enter().append('rect')\n                    .attr('class', 'box')\n                    .attr('x', 0)\n                    .attr('y', function (d) { return x0(d[2]); })\n                    .attr('width', width)\n                    .attr('height', function (d) { return x0(d[0]) - x0(d[2]); })\n                  .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', function (d) { return x1(d[2]); })\n                    .attr('height', function (d) { return x1(d[0]) - x1(d[2]); });\n\n                box.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('width', width)\n                    .attr('y', function (d) { return x1(d[2]); })\n                    .attr('height', function (d) { return x1(d[0]) - x1(d[2]); });\n\n                // Update median line.\n                var medianLine = g.selectAll('line.median')\n                    .data([quartileData[1]]);\n\n                medianLine.enter().append('line')\n                    .attr('class', 'median')\n                    .attr('x1', 0)\n                    .attr('y1', x0)\n                    .attr('x2', width)\n                    .attr('y2', x0)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1);\n\n                medianLine.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('x1', 0)\n                    .attr('x2', width)\n                    .attr('y1', x1)\n                    .attr('y2', x1);\n\n                // Update whiskers.\n                var whisker = g.selectAll('line.whisker')\n                    .data(whiskerData || []);\n\n                whisker.enter().insert('line', 'circle, text')\n                    .attr('class', 'whisker')\n                    .attr('x1', 0)\n                    .attr('y1', x0)\n                    .attr('x2', width)\n                    .attr('y2', x0)\n                    .style('opacity', 1e-6)\n                  .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1);\n\n                whisker.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('x1', 0)\n                    .attr('x2', width)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1);\n\n                whisker.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1e-6)\n                    .remove();\n\n                // Update outliers.\n                var outlier = g.selectAll('circle.outlier')\n                    .data(outlierIndices, Number);\n\n                outlier.enter().insert('circle', 'text')\n                    .attr('class', 'outlier')\n                    .attr('r', 5)\n                    .attr('cx', width / 2)\n                    .attr('cy', function (i) { return x0(d[i]); })\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1);\n\n                outlier.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cx', width / 2)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1);\n\n                outlier.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1e-6)\n                    .remove();\n\n                // Compute the tick format.\n                var format = tickFormat || x1.tickFormat(8);\n\n                // Update box ticks.\n                var boxTick = g.selectAll('text.box')\n                    .data(quartileData);\n\n                boxTick.enter().append('text')\n                    .attr('class', 'box')\n                    .attr('dy', '.3em')\n                    .attr('dx', function (d, i) { return i & 1 ? 6 : -6; })\n                    .attr('x', function (d, i) { return i & 1 ? width : 0; })\n                    .attr('y', x0)\n                    .attr('text-anchor', function (d, i) { return i & 1 ? 'start' : 'end'; })\n                    .text(format)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1);\n\n                boxTick.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .text(format)\n                    .attr('x', function (d, i) { return i & 1 ? width : 0; })\n                    .attr('y', x1);\n\n                // Update whisker ticks. These are handled separately from the box\n                // ticks because they may or may not exist, and we want don't want\n                // to join box ticks pre-transition with whisker ticks post-.\n                var whiskerTick = g.selectAll('text.whisker')\n                    .data(whiskerData || []);\n\n                whiskerTick.enter().append('text')\n                    .attr('class', 'whisker')\n                    .attr('dy', '.3em')\n                    .attr('dx', 6)\n                    .attr('x', width)\n                    .attr('y', x0)\n                    .text(format)\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1)\n                    .style('opacity', 1);\n\n                whiskerTick.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .text(format)\n                    .attr('x', width)\n                    .attr('y', x1)\n                    .style('opacity', 1);\n\n                whiskerTick.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1)\n                    .style('opacity', 1e-6)\n                    .remove();\n            });\n            d3.timer.flush();\n        }\n\n        box.width = function (x) {\n            if (!arguments.length) {\n                return width;\n            }\n            width = x;\n            return box;\n        };\n\n        box.height = function (x) {\n            if (!arguments.length) {\n                return height;\n            }\n            height = x;\n            return box;\n        };\n\n        box.tickFormat = function (x) {\n            if (!arguments.length) {\n                return tickFormat;\n            }\n            tickFormat = x;\n            return box;\n        };\n\n        box.duration = function (x) {\n            if (!arguments.length) {\n                return duration;\n            }\n            duration = x;\n            return box;\n        };\n\n        box.domain = function (x) {\n            if (!arguments.length) {\n                return domain;\n            }\n            domain = x === null ? x : d3.functor(x);\n            return box;\n        };\n\n        box.value = function (x) {\n            if (!arguments.length) {\n                return value;\n            }\n            value = x;\n            return box;\n        };\n\n        box.whiskers = function (x) {\n            if (!arguments.length) {\n                return whiskers;\n            }\n            whiskers = x;\n            return box;\n        };\n\n        box.quartiles = function (x) {\n            if (!arguments.length) {\n                return quartiles;\n            }\n            quartiles = x;\n            return box;\n        };\n\n        return box;\n    };\n\n    function boxWhiskers (d) {\n        return [0, d.length - 1];\n    }\n\n    function boxQuartiles (d) {\n        return [\n            d3.quantile(d, 0.25),\n            d3.quantile(d, 0.5),\n            d3.quantile(d, 0.75)\n        ];\n    }\n\n})();\n\n\n/**\n * A box plot is a chart that depicts numerical data via their quartile ranges.\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/box-plot-time.html Box plot time example}\n * - {@link http://dc-js.github.io/dc.js/examples/box-plot.html Box plot example}\n * @class boxPlot\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a box plot under #chart-container1 element using the default global chart group\n * var boxPlot1 = dc.boxPlot('#chart-container1');\n * // create a box plot under #chart-container2 element using chart group A\n * var boxPlot2 = dc.boxPlot('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.boxPlot}\n */\ndc.boxPlot = function (parent, chartGroup) {\n    var _chart = dc.coordinateGridMixin({});\n\n    // Returns a function to compute the interquartile range.\n    function DEFAULT_WHISKERS_IQR (k) {\n        return function (d) {\n            var q1 = d.quartiles[0],\n                q3 = d.quartiles[2],\n                iqr = (q3 - q1) * k,\n                i = -1,\n                j = d.length;\n            do { ++i; } while (d[i] < q1 - iqr);\n            do { --j; } while (d[j] > q3 + iqr);\n            return [i, j];\n        };\n    }\n\n    var _whiskerIqrFactor = 1.5;\n    var _whiskersIqr = DEFAULT_WHISKERS_IQR;\n    var _whiskers = _whiskersIqr(_whiskerIqrFactor);\n\n    var _box = d3.box();\n    var _tickFormat = null;\n\n    var _boxWidth = function (innerChartWidth, xUnits) {\n        if (_chart.isOrdinal()) {\n            return _chart.x().rangeBand();\n        } else {\n            return innerChartWidth / (1 + _chart.boxPadding()) / xUnits;\n        }\n    };\n\n    // default padding to handle min/max whisker text\n    _chart.yAxisPadding(12);\n\n    // default to ordinal\n    _chart.x(d3.scale.ordinal());\n    _chart.xUnits(dc.units.ordinal);\n\n    // valueAccessor should return an array of values that can be coerced into numbers\n    // or if data is overloaded for a static array of arrays, it should be `Number`.\n    // Empty arrays are not included.\n    _chart.data(function (group) {\n        return group.all().map(function (d) {\n            d.map = function (accessor) { return accessor.call(d, d); };\n            return d;\n        }).filter(function (d) {\n            var values = _chart.valueAccessor()(d);\n            return values.length !== 0;\n        });\n    });\n\n    /**\n     * Get or set the spacing between boxes as a fraction of box size. Valid values are within 0-1.\n     * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n     * for a visual description of how the padding is applied.\n     * @method boxPadding\n     * @memberof dc.boxPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3.scale.ordinal.rangeBands}\n     * @param {Number} [padding=0.8]\n     * @returns {Number|dc.boxPlot}\n     */\n    _chart.boxPadding = _chart._rangeBandPadding;\n    _chart.boxPadding(0.8);\n\n    /**\n     * Get or set the outer padding on an ordinal box chart. This setting has no effect on non-ordinal charts\n     * or on charts with a custom {@link dc.boxPlot#boxWidth .boxWidth}. Will pad the width by\n     * `padding * barWidth` on each side of the chart.\n     * @method outerPadding\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Number} [padding=0.5]\n     * @returns {Number|dc.boxPlot}\n     */\n    _chart.outerPadding = _chart._outerRangeBandPadding;\n    _chart.outerPadding(0.5);\n\n    /**\n     * Get or set the numerical width of the boxplot box. The width may also be a function taking as\n     * parameters the chart width excluding the right and left margins, as well as the number of x\n     * units.\n     * @example\n     * // Using numerical parameter\n     * chart.boxWidth(10);\n     * // Using function\n     * chart.boxWidth((innerChartWidth, xUnits) { ... });\n     * @method boxWidth\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Number|Function} [boxWidth=0.5]\n     * @returns {Number|Function|dc.boxPlot}\n     */\n    _chart.boxWidth = function (boxWidth) {\n        if (!arguments.length) {\n            return _boxWidth;\n        }\n        _boxWidth = d3.functor(boxWidth);\n        return _chart;\n    };\n\n    var boxTransform = function (d, i) {\n        var xOffset = _chart.x()(_chart.keyAccessor()(d, i));\n        return 'translate(' + xOffset + ', 0)';\n    };\n\n    _chart._preprocessData = function () {\n        if (_chart.elasticX()) {\n            _chart.x().domain([]);\n        }\n    };\n\n    _chart.plotData = function () {\n        var _calculatedBoxWidth = _boxWidth(_chart.effectiveWidth(), _chart.xUnitCount());\n\n        _box.whiskers(_whiskers)\n            .width(_calculatedBoxWidth)\n            .height(_chart.effectiveHeight())\n            .value(_chart.valueAccessor())\n            .domain(_chart.y().domain())\n            .duration(_chart.transitionDuration())\n            .tickFormat(_tickFormat);\n\n        var boxesG = _chart.chartBodyG().selectAll('g.box').data(_chart.data(), _chart.keyAccessor());\n\n        renderBoxes(boxesG);\n        updateBoxes(boxesG);\n        removeBoxes(boxesG);\n\n        _chart.fadeDeselectedArea();\n    };\n\n    function renderBoxes (boxesG) {\n        var boxesGEnter = boxesG.enter().append('g');\n\n        boxesGEnter\n            .attr('class', 'box')\n            .attr('transform', boxTransform)\n            .call(_box)\n            .on('click', function (d) {\n                _chart.filter(_chart.keyAccessor()(d));\n                _chart.redrawGroup();\n            });\n    }\n\n    function updateBoxes (boxesG) {\n        dc.transition(boxesG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', boxTransform)\n            .call(_box)\n            .each(function () {\n                d3.select(this).select('rect.box').attr('fill', _chart.getColor);\n            });\n    }\n\n    function removeBoxes (boxesG) {\n        boxesG.exit().remove().call(_box);\n    }\n\n    _chart.fadeDeselectedArea = function () {\n        if (_chart.hasFilter()) {\n            if (_chart.isOrdinal()) {\n                _chart.g().selectAll('g.box').each(function (d) {\n                    if (_chart.isSelectedNode(d)) {\n                        _chart.highlightSelected(this);\n                    } else {\n                        _chart.fadeDeselected(this);\n                    }\n                });\n            } else {\n                var extent = _chart.brush().extent();\n                var start = extent[0];\n                var end = extent[1];\n                var keyAccessor = _chart.keyAccessor();\n                _chart.g().selectAll('g.box').each(function (d) {\n                    var key = keyAccessor(d);\n                    if (key < start || key >= end) {\n                        _chart.fadeDeselected(this);\n                    } else {\n                        _chart.highlightSelected(this);\n                    }\n                });\n            }\n        } else {\n            _chart.g().selectAll('g.box').each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(_chart.keyAccessor()(d));\n    };\n\n    _chart.yAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return d3.min(_chart.valueAccessor()(e));\n        });\n        return dc.utils.subtract(min, _chart.yAxisPadding());\n    };\n\n    _chart.yAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return d3.max(_chart.valueAccessor()(e));\n        });\n        return dc.utils.add(max, _chart.yAxisPadding());\n    };\n\n    /**\n     * Set the numerical format of the boxplot median, whiskers and quartile labels. Defaults to\n     * integer formatting.\n     * @example\n     * // format ticks to 2 decimal places\n     * chart.tickFormat(d3.format('.2f'));\n     * @method tickFormat\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Function} [tickFormat]\n     * @returns {Number|Function|dc.boxPlot}\n     */\n    _chart.tickFormat = function (tickFormat) {\n        if (!arguments.length) {\n            return _tickFormat;\n        }\n        _tickFormat = tickFormat;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The select menu is a simple widget designed to filter a dimension by selecting an option from\n * an HTML `<select/>` menu. The menu can be optionally turned into a multiselect.\n * @class selectMenu\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * // create a select menu under #select-container using the default global chart group\n * var select = dc.selectMenu('#select-container')\n *                .dimension(states)\n *                .group(stateGroup);\n * // the option text can be set via the title() function\n * // by default the option text is '`key`: `value`'\n * select.title(function (d){\n *     return 'STATE: ' + d.key;\n * })\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this widget should be placed in.\n * Interaction with the widget will only trigger events and redraws within its group.\n * @returns {selectMenu}\n **/\ndc.selectMenu = function (parent, chartGroup) {\n    var SELECT_CSS_CLASS = 'dc-select-menu';\n    var OPTION_CSS_CLASS = 'dc-select-option';\n\n    var _chart = dc.baseMixin({});\n\n    var _select;\n    var _promptText = 'Select all';\n    var _multiple = false;\n    var _promptValue = null;\n    var _numberVisible = null;\n    var _order = function (a, b) {\n        return _chart.keyAccessor()(a) > _chart.keyAccessor()(b) ?\n             1 : _chart.keyAccessor()(b) > _chart.keyAccessor()(a) ?\n            -1 : 0;\n    };\n\n    var _filterDisplayed = function (d) {\n        return _chart.valueAccessor()(d) > 0;\n    };\n\n    _chart.data(function (group) {\n        return group.all().filter(_filterDisplayed);\n    });\n\n    _chart._doRender = function () {\n        _chart.select('select').remove();\n        _select = _chart.root().append('select')\n                        .classed(SELECT_CSS_CLASS, true);\n        _select.append('option').text(_promptText).attr('value', '');\n\n        _chart._doRedraw();\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        setAttributes();\n        renderOptions();\n        // select the option(s) corresponding to current filter(s)\n        if (_chart.hasFilter() && _multiple) {\n            _select.selectAll('option')\n                .property('selected', function (d) {\n                    return d && _chart.filters().indexOf(String(_chart.keyAccessor()(d))) >= 0;\n                });\n        } else if (_chart.hasFilter()) {\n            _select.property('value', _chart.filter());\n        } else {\n            _select.property('value', '');\n        }\n        return _chart;\n    };\n\n    function renderOptions () {\n        var options = _select.selectAll('option.' + OPTION_CSS_CLASS)\n          .data(_chart.data(), function (d) { return _chart.keyAccessor()(d); });\n\n        options.enter()\n              .append('option')\n              .classed(OPTION_CSS_CLASS, true)\n              .attr('value', function (d) { return _chart.keyAccessor()(d); });\n\n        options.text(_chart.title());\n        options.exit().remove();\n        _select.selectAll('option.' + OPTION_CSS_CLASS).sort(_order);\n\n        _select.on('change', onChange);\n        return options;\n    }\n\n    function onChange (d, i) {\n        var values;\n        var target = d3.event.target;\n        if (target.selectedOptions) {\n            var selectedOptions = Array.prototype.slice.call(target.selectedOptions);\n            values = selectedOptions.map(function (d) {\n                return d.value;\n            });\n        } else { // IE and other browsers do not support selectedOptions\n            // adapted from this polyfill: https://gist.github.com/brettz9/4212217\n            var options = [].slice.call(d3.event.target.options);\n            values = options.filter(function (option) {\n                return option.selected;\n            }).map(function (option) {\n                return option.value;\n            });\n        }\n        // console.log(values);\n        // check if only prompt option is selected\n        if (values.length === 1 && values[0] === '') {\n            values = _promptValue || null;\n        } else if (!_multiple && values.length === 1) {\n            values = values[0];\n        }\n        _chart.onChange(values);\n    }\n\n    _chart.onChange = function (val) {\n        if (val && _multiple) {\n            _chart.replaceFilter([val]);\n        } else if (val) {\n            _chart.replaceFilter(val);\n        } else {\n            _chart.filterAll();\n        }\n        dc.events.trigger(function () {\n            _chart.redrawGroup();\n        });\n    };\n\n    function setAttributes () {\n        if (_multiple) {\n            _select.attr('multiple', true);\n        } else {\n            _select.attr('multiple', null);\n        }\n        if (_numberVisible !== null) {\n            _select.attr('size', _numberVisible);\n        } else {\n            _select.attr('size', null);\n        }\n    }\n\n    /**\n     * Get or set the function that controls the ordering of option tags in the\n     * select menu. By default options are ordered by the group key in ascending\n     * order.\n     * @name order\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {Function} [order]\n     * @example\n     * // order by the group's value\n     * chart.order(function (a,b) {\n     *     return a.value > b.value ? 1 : b.value > a.value ? -1 : 0;\n     * });\n     **/\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    /**\n     * Get or set the text displayed in the options used to prompt selection.\n     * @name promptText\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {String} [promptText='Select all']\n     * @example\n     * chart.promptText('All states');\n     **/\n    _chart.promptText = function (_) {\n        if (!arguments.length) {\n            return _promptText;\n        }\n        _promptText = _;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that filters option tags prior to display. By default options\n     * with a value of < 1 are not displayed.\n     * @name filterDisplayed\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {function} [filterDisplayed]\n     * @example\n     * // display all options override the `filterDisplayed` function:\n     * chart.filterDisplayed(function () {\n     *     return true;\n     * });\n     **/\n    _chart.filterDisplayed = function (filterDisplayed) {\n        if (!arguments.length) {\n            return _filterDisplayed;\n        }\n        _filterDisplayed = filterDisplayed;\n        return _chart;\n    };\n\n    /**\n     * Controls the type of select menu. Setting it to true converts the underlying\n     * HTML tag into a multiple select.\n     * @name multiple\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {boolean} [multiple=false]\n     * @example\n     * chart.multiple(true);\n     **/\n    _chart.multiple = function (multiple) {\n        if (!arguments.length) {\n            return _multiple;\n        }\n        _multiple = multiple;\n\n        return _chart;\n    };\n\n    /**\n     * Controls the default value to be used for\n     * [dimension.filter](https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter)\n     * when only the prompt value is selected. If `null` (the default), no filtering will occur when\n     * just the prompt is selected.\n     * @name promptValue\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {?*} [promptValue=null]\n     **/\n    _chart.promptValue = function (promptValue) {\n        if (!arguments.length) {\n            return _promptValue;\n        }\n        _promptValue = promptValue;\n\n        return _chart;\n    };\n\n    /**\n     * Controls the number of items to show in the select menu, when `.multiple()` is true. This\n     * controls the [`size` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#Attributes) of\n     * the `select` element. If `null` (the default), uses the browser's default height.\n     * @name numberItems\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {?number} [numberVisible=null]\n     * @example\n     * chart.numberVisible(10);\n     **/\n    _chart.numberVisible = function (numberVisible) {\n        if (!arguments.length) {\n            return _numberVisible;\n        }\n        _numberVisible = numberVisible;\n\n        return _chart;\n    };\n\n    _chart.size = dc.logger.deprecate(_chart.numberVisible, 'selectMenu.size is ambiguous - use numberVisible instead');\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n// Renamed functions\n\ndc.abstractBubbleChart = dc.bubbleMixin;\ndc.baseChart = dc.baseMixin;\ndc.capped = dc.capMixin;\ndc.colorChart = dc.colorMixin;\ndc.coordinateGridChart = dc.coordinateGridMixin;\ndc.marginable = dc.marginMixin;\ndc.stackableChart = dc.stackMixin;\n\n// Expose d3 and crossfilter, so that clients in browserify\n// case can obtain them if they need them.\ndc.d3 = d3;\ndc.crossfilter = crossfilter;\n\nreturn dc;}\n    if(typeof define === \"function\" && define.amd) {\n        define([\"d3\", \"crossfilter2\"], _dc);\n    } else if(typeof module === \"object\" && module.exports) {\n        var _d3 = require('d3');\n        var _crossfilter = require('crossfilter2');\n        // When using npm + browserify, 'crossfilter' is a function,\n        // since package.json specifies index.js as main function, and it\n        // does special handling. When using bower + browserify,\n        // there's no main in bower.json (in fact, there's no bower.json),\n        // so we need to fix it.\n        if (typeof _crossfilter !== \"function\") {\n            _crossfilter = _crossfilter.crossfilter;\n        }\n        module.exports = _dc(_d3, _crossfilter);\n    } else {\n        this.dc = _dc(d3, crossfilter);\n    }\n}\n)();\n\n//# sourceMappingURL=dc.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dc/dc.js\n// module id = 270\n// module chunks = 0 1","!function() {\n  var d3 = {\n    version: \"3.5.17\"\n  };\n  var d3_arraySlice = [].slice, d3_array = function(list) {\n    return d3_arraySlice.call(list);\n  };\n  var d3_document = this.document;\n  function d3_documentElement(node) {\n    return node && (node.ownerDocument || node.document || node).documentElement;\n  }\n  function d3_window(node) {\n    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n  }\n  if (d3_document) {\n    try {\n      d3_array(d3_document.documentElement.childNodes)[0].nodeType;\n    } catch (e) {\n      d3_array = function(list) {\n        var i = list.length, array = new Array(i);\n        while (i--) array[i] = list[i];\n        return array;\n      };\n    }\n  }\n  if (!Date.now) Date.now = function() {\n    return +new Date();\n  };\n  if (d3_document) {\n    try {\n      d3_document.createElement(\"DIV\").style.setProperty(\"opacity\", 0, \"\");\n    } catch (error) {\n      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n      d3_element_prototype.setAttribute = function(name, value) {\n        d3_element_setAttribute.call(this, name, value + \"\");\n      };\n      d3_element_prototype.setAttributeNS = function(space, local, value) {\n        d3_element_setAttributeNS.call(this, space, local, value + \"\");\n      };\n      d3_style_prototype.setProperty = function(name, value, priority) {\n        d3_style_setProperty.call(this, name, value + \"\", priority);\n      };\n    }\n  }\n  d3.ascending = d3_ascending;\n  function d3_ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n  d3.descending = function(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  };\n  d3.min = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;\n    }\n    return a;\n  };\n  d3.max = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;\n    }\n    return a;\n  };\n  d3.extent = function(array, f) {\n    var i = -1, n = array.length, a, b, c;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n    return [ a, c ];\n  };\n  function d3_number(x) {\n    return x === null ? NaN : +x;\n  }\n  function d3_numeric(x) {\n    return !isNaN(x);\n  }\n  d3.sum = function(array, f) {\n    var s = 0, n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = +array[i])) s += a;\n    } else {\n      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n    }\n    return s;\n  };\n  d3.mean = function(array, f) {\n    var s = 0, n = array.length, a, i = -1, j = n;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;\n    }\n    if (j) return s / j;\n  };\n  d3.quantile = function(values, p) {\n    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;\n    return e ? v + e * (values[h] - v) : v;\n  };\n  d3.median = function(array, f) {\n    var numbers = [], n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n    }\n    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n  };\n  d3.variance = function(array, f) {\n    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    } else {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n    if (j > 1) return s / (j - 1);\n  };\n  d3.deviation = function() {\n    var v = d3.variance.apply(this, arguments);\n    return v ? Math.sqrt(v) : v;\n  };\n  function d3_bisector(compare) {\n    return {\n      left: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n  var d3_bisect = d3_bisector(d3_ascending);\n  d3.bisectLeft = d3_bisect.left;\n  d3.bisect = d3.bisectRight = d3_bisect.right;\n  d3.bisector = function(f) {\n    return d3_bisector(f.length === 1 ? function(d, x) {\n      return d3_ascending(f(d), x);\n    } : f);\n  };\n  d3.shuffle = function(array, i0, i1) {\n    if ((m = arguments.length) < 3) {\n      i1 = array.length;\n      if (m < 2) i0 = 0;\n    }\n    var m = i1 - i0, t, i;\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n    }\n    return array;\n  };\n  d3.permute = function(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  };\n  d3.pairs = function(array) {\n    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];\n    return pairs;\n  };\n  d3.transpose = function(matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  };\n  function d3_transposeLength(d) {\n    return d.length;\n  }\n  d3.zip = function() {\n    return d3.transpose(arguments);\n  };\n  d3.keys = function(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  };\n  d3.values = function(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  };\n  d3.entries = function(map) {\n    var entries = [];\n    for (var key in map) entries.push({\n      key: key,\n      value: map[key]\n    });\n    return entries;\n  };\n  d3.merge = function(arrays) {\n    var n = arrays.length, m, i = -1, j = 0, merged, array;\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n    return merged;\n  };\n  var abs = Math.abs;\n  d3.range = function(start, stop, step) {\n    if (arguments.length < 3) {\n      step = 1;\n      if (arguments.length < 2) {\n        stop = start;\n        start = 0;\n      }\n    }\n    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n    start *= k, stop *= k, step *= k;\n    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n    return range;\n  };\n  function d3_range_integerScale(x) {\n    var k = 1;\n    while (x * k % 1) k *= 10;\n    return k;\n  }\n  function d3_class(ctor, properties) {\n    for (var key in properties) {\n      Object.defineProperty(ctor.prototype, key, {\n        value: properties[key],\n        enumerable: false\n      });\n    }\n  }\n  d3.map = function(object, f) {\n    var map = new d3_Map();\n    if (object instanceof d3_Map) {\n      object.forEach(function(key, value) {\n        map.set(key, value);\n      });\n    } else if (Array.isArray(object)) {\n      var i = -1, n = object.length, o;\n      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);\n    } else {\n      for (var key in object) map.set(key, object[key]);\n    }\n    return map;\n  };\n  function d3_Map() {\n    this._ = Object.create(null);\n  }\n  var d3_map_proto = \"__proto__\", d3_map_zero = \"\\x00\";\n  d3_class(d3_Map, {\n    has: d3_map_has,\n    get: function(key) {\n      return this._[d3_map_escape(key)];\n    },\n    set: function(key, value) {\n      return this._[d3_map_escape(key)] = value;\n    },\n    remove: d3_map_remove,\n    keys: d3_map_keys,\n    values: function() {\n      var values = [];\n      for (var key in this._) values.push(this._[key]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var key in this._) entries.push({\n        key: d3_map_unescape(key),\n        value: this._[key]\n      });\n      return entries;\n    },\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);\n    }\n  });\n  function d3_map_escape(key) {\n    return (key += \"\") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n  }\n  function d3_map_unescape(key) {\n    return (key += \"\")[0] === d3_map_zero ? key.slice(1) : key;\n  }\n  function d3_map_has(key) {\n    return d3_map_escape(key) in this._;\n  }\n  function d3_map_remove(key) {\n    return (key = d3_map_escape(key)) in this._ && delete this._[key];\n  }\n  function d3_map_keys() {\n    var keys = [];\n    for (var key in this._) keys.push(d3_map_unescape(key));\n    return keys;\n  }\n  function d3_map_size() {\n    var size = 0;\n    for (var key in this._) ++size;\n    return size;\n  }\n  function d3_map_empty() {\n    for (var key in this._) return false;\n    return true;\n  }\n  d3.nest = function() {\n    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;\n    function map(mapType, array, depth) {\n      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n          values.push(object);\n        } else {\n          valuesByKey.set(keyValue, [ object ]);\n        }\n      }\n      if (mapType) {\n        object = mapType();\n        setter = function(keyValue, values) {\n          object.set(keyValue, map(mapType, values, depth));\n        };\n      } else {\n        object = {};\n        setter = function(keyValue, values) {\n          object[keyValue] = map(mapType, values, depth);\n        };\n      }\n      valuesByKey.forEach(setter);\n      return object;\n    }\n    function entries(map, depth) {\n      if (depth >= keys.length) return map;\n      var array = [], sortKey = sortKeys[depth++];\n      map.forEach(function(key, keyMap) {\n        array.push({\n          key: key,\n          values: entries(keyMap, depth)\n        });\n      });\n      return sortKey ? array.sort(function(a, b) {\n        return sortKey(a.key, b.key);\n      }) : array;\n    }\n    nest.map = function(array, mapType) {\n      return map(mapType, array, 0);\n    };\n    nest.entries = function(array) {\n      return entries(map(d3.map, array, 0), 0);\n    };\n    nest.key = function(d) {\n      keys.push(d);\n      return nest;\n    };\n    nest.sortKeys = function(order) {\n      sortKeys[keys.length - 1] = order;\n      return nest;\n    };\n    nest.sortValues = function(order) {\n      sortValues = order;\n      return nest;\n    };\n    nest.rollup = function(f) {\n      rollup = f;\n      return nest;\n    };\n    return nest;\n  };\n  d3.set = function(array) {\n    var set = new d3_Set();\n    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);\n    return set;\n  };\n  function d3_Set() {\n    this._ = Object.create(null);\n  }\n  d3_class(d3_Set, {\n    has: d3_map_has,\n    add: function(key) {\n      this._[d3_map_escape(key += \"\")] = true;\n      return key;\n    },\n    remove: d3_map_remove,\n    values: d3_map_keys,\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key));\n    }\n  });\n  d3.behavior = {};\n  function d3_identity(d) {\n    return d;\n  }\n  d3.rebind = function(target, source) {\n    var i = 1, n = arguments.length, method;\n    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n    return target;\n  };\n  function d3_rebind(target, source, method) {\n    return function() {\n      var value = method.apply(source, arguments);\n      return value === source ? target : value;\n    };\n  }\n  function d3_vendorSymbol(object, name) {\n    if (name in object) return name;\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {\n      var prefixName = d3_vendorPrefixes[i] + name;\n      if (prefixName in object) return prefixName;\n    }\n  }\n  var d3_vendorPrefixes = [ \"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\" ];\n  function d3_noop() {}\n  d3.dispatch = function() {\n    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    return dispatch;\n  };\n  function d3_dispatch() {}\n  d3_dispatch.prototype.on = function(type, listener) {\n    var i = type.indexOf(\".\"), name = \"\";\n    if (i >= 0) {\n      name = type.slice(i + 1);\n      type = type.slice(0, i);\n    }\n    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);\n    if (arguments.length === 2) {\n      if (listener == null) for (type in this) {\n        if (this.hasOwnProperty(type)) this[type].on(name, null);\n      }\n      return this;\n    }\n  };\n  function d3_dispatch_event(dispatch) {\n    var listeners = [], listenerByName = new d3_Map();\n    function event() {\n      var z = listeners, i = -1, n = z.length, l;\n      while (++i < n) if (l = z[i].on) l.apply(this, arguments);\n      return dispatch;\n    }\n    event.on = function(name, listener) {\n      var l = listenerByName.get(name), i;\n      if (arguments.length < 2) return l && l.on;\n      if (l) {\n        l.on = null;\n        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n        listenerByName.remove(name);\n      }\n      if (listener) listeners.push(listenerByName.set(name, {\n        on: listener\n      }));\n      return dispatch;\n    };\n    return event;\n  }\n  d3.event = null;\n  function d3_eventPreventDefault() {\n    d3.event.preventDefault();\n  }\n  function d3_eventSource() {\n    var e = d3.event, s;\n    while (s = e.sourceEvent) e = s;\n    return e;\n  }\n  function d3_eventDispatch(target) {\n    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    dispatch.of = function(thiz, argumentz) {\n      return function(e1) {\n        try {\n          var e0 = e1.sourceEvent = d3.event;\n          e1.target = target;\n          d3.event = e1;\n          dispatch[e1.type].apply(thiz, argumentz);\n        } finally {\n          d3.event = e0;\n        }\n      };\n    };\n    return dispatch;\n  }\n  d3.requote = function(s) {\n    return s.replace(d3_requote_re, \"\\\\$&\");\n  };\n  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  var d3_subclass = {}.__proto__ ? function(object, prototype) {\n    object.__proto__ = prototype;\n  } : function(object, prototype) {\n    for (var property in prototype) object[property] = prototype[property];\n  };\n  function d3_selection(groups) {\n    d3_subclass(groups, d3_selectionPrototype);\n    return groups;\n  }\n  var d3_select = function(s, n) {\n    return n.querySelector(s);\n  }, d3_selectAll = function(s, n) {\n    return n.querySelectorAll(s);\n  }, d3_selectMatches = function(n, s) {\n    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, \"matchesSelector\")];\n    d3_selectMatches = function(n, s) {\n      return d3_selectMatcher.call(n, s);\n    };\n    return d3_selectMatches(n, s);\n  };\n  if (typeof Sizzle === \"function\") {\n    d3_select = function(s, n) {\n      return Sizzle(s, n)[0] || null;\n    };\n    d3_selectAll = Sizzle;\n    d3_selectMatches = Sizzle.matchesSelector;\n  }\n  d3.selection = function() {\n    return d3.select(d3_document.documentElement);\n  };\n  var d3_selectionPrototype = d3.selection.prototype = [];\n  d3_selectionPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, group, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selector(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_select(selector, this);\n    };\n  }\n  d3_selectionPrototype.selectAll = function(selector) {\n    var subgroups = [], subgroup, node;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n          subgroup.parentNode = node;\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selectorAll(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_selectAll(selector, this);\n    };\n  }\n  var d3_nsXhtml = \"http://www.w3.org/1999/xhtml\";\n  var d3_nsPrefix = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: d3_nsXhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n  d3.ns = {\n    prefix: d3_nsPrefix,\n    qualify: function(name) {\n      var i = name.indexOf(\":\"), prefix = name;\n      if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n        space: d3_nsPrefix[prefix],\n        local: name\n      } : name;\n    }\n  };\n  d3_selectionPrototype.attr = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node();\n        name = d3.ns.qualify(name);\n        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n      }\n      for (value in name) this.each(d3_selection_attr(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_attr(name, value));\n  };\n  function d3_selection_attr(name, value) {\n    name = d3.ns.qualify(name);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrConstant() {\n      this.setAttribute(name, value);\n    }\n    function attrConstantNS() {\n      this.setAttributeNS(name.space, name.local, value);\n    }\n    function attrFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);\n    }\n    function attrFunctionNS() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n    }\n    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n  }\n  function d3_collapse(s) {\n    return s.trim().replace(/\\s+/g, \" \");\n  }\n  d3_selectionPrototype.classed = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;\n        if (value = node.classList) {\n          while (++i < n) if (!value.contains(name[i])) return false;\n        } else {\n          value = node.getAttribute(\"class\");\n          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;\n        }\n        return true;\n      }\n      for (value in name) this.each(d3_selection_classed(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_classed(name, value));\n  };\n  function d3_selection_classedRe(name) {\n    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");\n  }\n  function d3_selection_classes(name) {\n    return (name + \"\").trim().split(/^|\\s+/);\n  }\n  function d3_selection_classed(name, value) {\n    name = d3_selection_classes(name).map(d3_selection_classedName);\n    var n = name.length;\n    function classedConstant() {\n      var i = -1;\n      while (++i < n) name[i](this, value);\n    }\n    function classedFunction() {\n      var i = -1, x = value.apply(this, arguments);\n      while (++i < n) name[i](this, x);\n    }\n    return typeof value === \"function\" ? classedFunction : classedConstant;\n  }\n  function d3_selection_classedName(name) {\n    var re = d3_selection_classedRe(name);\n    return function(node, value) {\n      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n      var c = node.getAttribute(\"class\") || \"\";\n      if (value) {\n        re.lastIndex = 0;\n        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));\n      } else {\n        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));\n      }\n    };\n  }\n  d3_selectionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));\n        return this;\n      }\n      if (n < 2) {\n        var node = this.node();\n        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);\n      }\n      priority = \"\";\n    }\n    return this.each(d3_selection_style(name, value, priority));\n  };\n  function d3_selection_style(name, value, priority) {\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleConstant() {\n      this.style.setProperty(name, value, priority);\n    }\n    function styleFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);\n    }\n    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;\n  }\n  d3_selectionPrototype.property = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") return this.node()[name];\n      for (value in name) this.each(d3_selection_property(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_property(name, value));\n  };\n  function d3_selection_property(name, value) {\n    function propertyNull() {\n      delete this[name];\n    }\n    function propertyConstant() {\n      this[name] = value;\n    }\n    function propertyFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) delete this[name]; else this[name] = x;\n    }\n    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;\n  }\n  d3_selectionPrototype.text = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.textContent = \"\";\n    } : function() {\n      this.textContent = value;\n    }) : this.node().textContent;\n  };\n  d3_selectionPrototype.html = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.innerHTML = \"\";\n    } : function() {\n      this.innerHTML = value;\n    }) : this.node().innerHTML;\n  };\n  d3_selectionPrototype.append = function(name) {\n    name = d3_selection_creator(name);\n    return this.select(function() {\n      return this.appendChild(name.apply(this, arguments));\n    });\n  };\n  function d3_selection_creator(name) {\n    function create() {\n      var document = this.ownerDocument, namespace = this.namespaceURI;\n      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);\n    }\n    function createNS() {\n      return this.ownerDocument.createElementNS(name.space, name.local);\n    }\n    return typeof name === \"function\" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;\n  }\n  d3_selectionPrototype.insert = function(name, before) {\n    name = d3_selection_creator(name);\n    before = d3_selection_selector(before);\n    return this.select(function() {\n      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n    });\n  };\n  d3_selectionPrototype.remove = function() {\n    return this.each(d3_selectionRemove);\n  };\n  function d3_selectionRemove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n  d3_selectionPrototype.data = function(value, key) {\n    var i = -1, n = this.length, group, node;\n    if (!arguments.length) {\n      value = new Array(n = (group = this[0]).length);\n      while (++i < n) {\n        if (node = group[i]) {\n          value[i] = node.__data__;\n        }\n      }\n      return value;\n    }\n    function bind(group, groupData) {\n      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n      if (key) {\n        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;\n        for (i = -1; ++i < n; ) {\n          if (node = group[i]) {\n            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {\n              exitNodes[i] = node;\n            } else {\n              nodeByKeyValue.set(keyValue, node);\n            }\n            keyValues[i] = keyValue;\n          }\n        }\n        for (i = -1; ++i < m; ) {\n          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          } else if (node !== true) {\n            updateNodes[i] = node;\n            node.__data__ = nodeData;\n          }\n          nodeByKeyValue.set(keyValue, true);\n        }\n        for (i = -1; ++i < n; ) {\n          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {\n            exitNodes[i] = group[i];\n          }\n        }\n      } else {\n        for (i = -1; ++i < n0; ) {\n          node = group[i];\n          nodeData = groupData[i];\n          if (node) {\n            node.__data__ = nodeData;\n            updateNodes[i] = node;\n          } else {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          }\n        }\n        for (;i < m; ++i) {\n          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n        }\n        for (;i < n; ++i) {\n          exitNodes[i] = group[i];\n        }\n      }\n      enterNodes.update = updateNodes;\n      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n      enter.push(enterNodes);\n      update.push(updateNodes);\n      exit.push(exitNodes);\n    }\n    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);\n    if (typeof value === \"function\") {\n      while (++i < n) {\n        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n      }\n    } else {\n      while (++i < n) {\n        bind(group = this[i], value);\n      }\n    }\n    update.enter = function() {\n      return enter;\n    };\n    update.exit = function() {\n      return exit;\n    };\n    return update;\n  };\n  function d3_selection_dataNode(data) {\n    return {\n      __data__: data\n    };\n  }\n  d3_selectionPrototype.datum = function(value) {\n    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");\n  };\n  d3_selectionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_filter(selector) {\n    return function() {\n      return d3_selectMatches(this, selector);\n    };\n  }\n  d3_selectionPrototype.order = function() {\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n    return this;\n  };\n  d3_selectionPrototype.sort = function(comparator) {\n    comparator = d3_selection_sortComparator.apply(this, arguments);\n    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);\n    return this.order();\n  };\n  function d3_selection_sortComparator(comparator) {\n    if (!arguments.length) comparator = d3_ascending;\n    return function(a, b) {\n      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;\n    };\n  }\n  d3_selectionPrototype.each = function(callback) {\n    return d3_selection_each(this, function(node, i, j) {\n      callback.call(node, node.__data__, i, j);\n    });\n  };\n  function d3_selection_each(groups, callback) {\n    for (var j = 0, m = groups.length; j < m; j++) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {\n        if (node = group[i]) callback(node, i, j);\n      }\n    }\n    return groups;\n  }\n  d3_selectionPrototype.call = function(callback) {\n    var args = d3_array(arguments);\n    callback.apply(args[0] = this, args);\n    return this;\n  };\n  d3_selectionPrototype.empty = function() {\n    return !this.node();\n  };\n  d3_selectionPrototype.node = function() {\n    for (var j = 0, m = this.length; j < m; j++) {\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n    return null;\n  };\n  d3_selectionPrototype.size = function() {\n    var n = 0;\n    d3_selection_each(this, function() {\n      ++n;\n    });\n    return n;\n  };\n  function d3_selection_enter(selection) {\n    d3_subclass(selection, d3_selection_enterPrototype);\n    return selection;\n  }\n  var d3_selection_enterPrototype = [];\n  d3.selection.enter = d3_selection_enter;\n  d3.selection.enter.prototype = d3_selection_enterPrototype;\n  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n  d3_selection_enterPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, upgroup, group, node;\n    for (var j = -1, m = this.length; ++j < m; ) {\n      upgroup = (group = this[j]).update;\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = group.parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n          subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  d3_selection_enterPrototype.insert = function(name, before) {\n    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);\n    return d3_selectionPrototype.insert.call(this, name, before);\n  };\n  function d3_selection_enterInsertBefore(enter) {\n    var i0, j0;\n    return function(d, i, j) {\n      var group = enter[j].update, n = group.length, node;\n      if (j != j0) j0 = j, i0 = 0;\n      if (i >= i0) i0 = i + 1;\n      while (!(node = group[i0]) && ++i0 < n) ;\n      return node;\n    };\n  }\n  d3.select = function(node) {\n    var group;\n    if (typeof node === \"string\") {\n      group = [ d3_select(node, d3_document) ];\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = [ node ];\n      group.parentNode = d3_documentElement(node);\n    }\n    return d3_selection([ group ]);\n  };\n  d3.selectAll = function(nodes) {\n    var group;\n    if (typeof nodes === \"string\") {\n      group = d3_array(d3_selectAll(nodes, d3_document));\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = d3_array(nodes);\n      group.parentNode = null;\n    }\n    return d3_selection([ group ]);\n  };\n  d3_selectionPrototype.on = function(type, listener, capture) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof type !== \"string\") {\n        if (n < 2) listener = false;\n        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));\n        return this;\n      }\n      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;\n      capture = false;\n    }\n    return this.each(d3_selection_on(type, listener, capture));\n  };\n  function d3_selection_on(type, listener, capture) {\n    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;\n    if (i > 0) type = type.slice(0, i);\n    var filter = d3_selection_onFilters.get(type);\n    if (filter) type = filter, wrap = d3_selection_onFilter;\n    function onRemove() {\n      var l = this[name];\n      if (l) {\n        this.removeEventListener(type, l, l.$);\n        delete this[name];\n      }\n    }\n    function onAdd() {\n      var l = wrap(listener, d3_array(arguments));\n      onRemove.call(this);\n      this.addEventListener(type, this[name] = l, l.$ = capture);\n      l._ = listener;\n    }\n    function removeAll() {\n      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;\n      for (var name in this) {\n        if (match = name.match(re)) {\n          var l = this[name];\n          this.removeEventListener(match[1], l, l.$);\n          delete this[name];\n        }\n      }\n    }\n    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n  }\n  var d3_selection_onFilters = d3.map({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n  });\n  if (d3_document) {\n    d3_selection_onFilters.forEach(function(k) {\n      if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);\n    });\n  }\n  function d3_selection_onListener(listener, argumentz) {\n    return function(e) {\n      var o = d3.event;\n      d3.event = e;\n      argumentz[0] = this.__data__;\n      try {\n        listener.apply(this, argumentz);\n      } finally {\n        d3.event = o;\n      }\n    };\n  }\n  function d3_selection_onFilter(listener, argumentz) {\n    var l = d3_selection_onListener(listener, argumentz);\n    return function(e) {\n      var target = this, related = e.relatedTarget;\n      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {\n        l.call(target, e);\n      }\n    };\n  }\n  var d3_event_dragSelect, d3_event_dragId = 0;\n  function d3_event_dragSuppress(node) {\n    var name = \".dragsuppress-\" + ++d3_event_dragId, click = \"click\" + name, w = d3.select(d3_window(node)).on(\"touchmove\" + name, d3_eventPreventDefault).on(\"dragstart\" + name, d3_eventPreventDefault).on(\"selectstart\" + name, d3_eventPreventDefault);\n    if (d3_event_dragSelect == null) {\n      d3_event_dragSelect = \"onselectstart\" in node ? false : d3_vendorSymbol(node.style, \"userSelect\");\n    }\n    if (d3_event_dragSelect) {\n      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];\n      style[d3_event_dragSelect] = \"none\";\n    }\n    return function(suppressClick) {\n      w.on(name, null);\n      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n      if (suppressClick) {\n        var off = function() {\n          w.on(click, null);\n        };\n        w.on(click, function() {\n          d3_eventPreventDefault();\n          off();\n        }, true);\n        setTimeout(off, 0);\n      }\n    };\n  }\n  d3.mouse = function(container) {\n    return d3_mousePoint(container, d3_eventSource());\n  };\n  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;\n  function d3_mousePoint(container, e) {\n    if (e.changedTouches) e = e.changedTouches[0];\n    var svg = container.ownerSVGElement || container;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      if (d3_mouse_bug44083 < 0) {\n        var window = d3_window(container);\n        if (window.scrollX || window.scrollY) {\n          svg = d3.select(\"body\").append(\"svg\").style({\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            margin: 0,\n            padding: 0,\n            border: \"none\"\n          }, \"important\");\n          var ctm = svg[0][0].getScreenCTM();\n          d3_mouse_bug44083 = !(ctm.f || ctm.e);\n          svg.remove();\n        }\n      }\n      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, \n      point.y = e.clientY;\n      point = point.matrixTransform(container.getScreenCTM().inverse());\n      return [ point.x, point.y ];\n    }\n    var rect = container.getBoundingClientRect();\n    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];\n  }\n  d3.touch = function(container, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;\n    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return d3_mousePoint(container, touch);\n      }\n    }\n  };\n  d3.behavior.drag = function() {\n    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, \"mousemove\", \"mouseup\"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, \"touchmove\", \"touchend\");\n    function drag() {\n      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", touchstart);\n    }\n    function dragstart(id, position, subject, move, end) {\n      return function() {\n        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \".drag\" + (dragId == null ? \"\" : \"-\" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);\n        if (origin) {\n          dragOffset = origin.apply(that, arguments);\n          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];\n        } else {\n          dragOffset = [ 0, 0 ];\n        }\n        dispatch({\n          type: \"dragstart\"\n        });\n        function moved() {\n          var position1 = position(parent, dragId), dx, dy;\n          if (!position1) return;\n          dx = position1[0] - position0[0];\n          dy = position1[1] - position0[1];\n          dragged |= dx | dy;\n          position0 = position1;\n          dispatch({\n            type: \"drag\",\n            x: position1[0] + dragOffset[0],\n            y: position1[1] + dragOffset[1],\n            dx: dx,\n            dy: dy\n          });\n        }\n        function ended() {\n          if (!position(parent, dragId)) return;\n          dragSubject.on(move + dragName, null).on(end + dragName, null);\n          dragRestore(dragged);\n          dispatch({\n            type: \"dragend\"\n          });\n        }\n      };\n    }\n    drag.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return drag;\n    };\n    return d3.rebind(drag, event, \"on\");\n  };\n  function d3_behavior_dragTouchId() {\n    return d3.event.changedTouches[0].identifier;\n  }\n  d3.touches = function(container, touches) {\n    if (arguments.length < 2) touches = d3_eventSource().touches;\n    return touches ? d3_array(touches).map(function(touch) {\n      var point = d3_mousePoint(container, touch);\n      point.identifier = touch.identifier;\n      return point;\n    }) : [];\n  };\n  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n  function d3_sgn(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  }\n  function d3_cross2d(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n  function d3_acos(x) {\n    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);\n  }\n  function d3_asin(x) {\n    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);\n  }\n  function d3_sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n  function d3_cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n  function d3_tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n  function d3_haversin(x) {\n    return (x = Math.sin(x / 2)) * x;\n  }\n  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;\n  d3.interpolateZoom = function(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;\n    if (d2 < ε2) {\n      S = Math.log(w1 / w0) / ρ;\n      i = function(t) {\n        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];\n      };\n    } else {\n      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / ρ;\n      i = function(t) {\n        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];\n      };\n    }\n    i.duration = S * 1e3;\n    return i;\n  };\n  d3.behavior.zoom = function() {\n    var view = {\n      x: 0,\n      y: 0,\n      k: 1\n    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \"mousedown.zoom\", mousemove = \"mousemove.zoom\", mouseup = \"mouseup.zoom\", mousewheelTimer, touchstart = \"touchstart.zoom\", touchtime, event = d3_eventDispatch(zoom, \"zoomstart\", \"zoom\", \"zoomend\"), x0, x1, y0, y1;\n    if (!d3_behavior_zoomWheel) {\n      d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n      }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return d3.event.wheelDelta;\n      }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {\n        return -d3.event.detail;\n      }, \"MozMousePixelScroll\");\n    }\n    function zoom(g) {\n      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \".zoom\", mousewheeled).on(\"dblclick.zoom\", dblclicked).on(touchstart, touchstarted);\n    }\n    zoom.event = function(g) {\n      g.each(function() {\n        var dispatch = event.of(this, arguments), view1 = view;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.zoom\", function() {\n            view = this.__chart__ || {\n              x: 0,\n              y: 0,\n              k: 1\n            };\n            zoomstarted(dispatch);\n          }).tween(\"zoom:zoom\", function() {\n            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n            return function(t) {\n              var l = i(t), k = dx / l[2];\n              this.__chart__ = view = {\n                x: cx - l[0] * k,\n                y: cy - l[1] * k,\n                k: k\n              };\n              zoomed(dispatch);\n            };\n          }).each(\"interrupt.zoom\", function() {\n            zoomended(dispatch);\n          }).each(\"end.zoom\", function() {\n            zoomended(dispatch);\n          });\n        } else {\n          this.__chart__ = view;\n          zoomstarted(dispatch);\n          zoomed(dispatch);\n          zoomended(dispatch);\n        }\n      });\n    };\n    zoom.translate = function(_) {\n      if (!arguments.length) return [ view.x, view.y ];\n      view = {\n        x: +_[0],\n        y: +_[1],\n        k: view.k\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scale = function(_) {\n      if (!arguments.length) return view.k;\n      view = {\n        x: view.x,\n        y: view.y,\n        k: null\n      };\n      scaleTo(+_);\n      rescale();\n      return zoom;\n    };\n    zoom.scaleExtent = function(_) {\n      if (!arguments.length) return scaleExtent;\n      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.center = function(_) {\n      if (!arguments.length) return center;\n      center = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.size = function(_) {\n      if (!arguments.length) return size;\n      size = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.duration = function(_) {\n      if (!arguments.length) return duration;\n      duration = +_;\n      return zoom;\n    };\n    zoom.x = function(z) {\n      if (!arguments.length) return x1;\n      x1 = z;\n      x0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    zoom.y = function(z) {\n      if (!arguments.length) return y1;\n      y1 = z;\n      y0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    function location(p) {\n      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];\n    }\n    function point(l) {\n      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];\n    }\n    function scaleTo(s) {\n      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n    }\n    function translateTo(p, l) {\n      l = point(l);\n      view.x += p[0] - l[0];\n      view.y += p[1] - l[1];\n    }\n    function zoomTo(that, p, l, k) {\n      that.__chart__ = {\n        x: view.x,\n        y: view.y,\n        k: view.k\n      };\n      scaleTo(Math.pow(2, k));\n      translateTo(center0 = p, l);\n      that = d3.select(that);\n      if (duration > 0) that = that.transition().duration(duration);\n      that.call(zoom.event);\n    }\n    function rescale() {\n      if (x1) x1.domain(x0.range().map(function(x) {\n        return (x - view.x) / view.k;\n      }).map(x0.invert));\n      if (y1) y1.domain(y0.range().map(function(y) {\n        return (y - view.y) / view.k;\n      }).map(y0.invert));\n    }\n    function zoomstarted(dispatch) {\n      if (!zooming++) dispatch({\n        type: \"zoomstart\"\n      });\n    }\n    function zoomed(dispatch) {\n      rescale();\n      dispatch({\n        type: \"zoom\",\n        scale: view.k,\n        translate: [ view.x, view.y ]\n      });\n    }\n    function zoomended(dispatch) {\n      if (!--zooming) dispatch({\n        type: \"zoomend\"\n      }), center0 = null;\n    }\n    function mousedowned() {\n      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);\n      d3_selection_interrupt.call(that);\n      zoomstarted(dispatch);\n      function moved() {\n        dragged = 1;\n        translateTo(d3.mouse(that), location0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        subject.on(mousemove, null).on(mouseup, null);\n        dragRestore(dragged);\n        zoomended(dispatch);\n      }\n    }\n    function touchstarted() {\n      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \".zoom-\" + d3.event.changedTouches[0].identifier, touchmove = \"touchmove\" + zoomName, touchend = \"touchend\" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);\n      started();\n      zoomstarted(dispatch);\n      subject.on(mousedown, null).on(touchstart, started);\n      function relocate() {\n        var touches = d3.touches(that);\n        scale0 = view.k;\n        touches.forEach(function(t) {\n          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n        });\n        return touches;\n      }\n      function started() {\n        var target = d3.event.target;\n        d3.select(target).on(touchmove, moved).on(touchend, ended);\n        targets.push(target);\n        var changed = d3.event.changedTouches;\n        for (var i = 0, n = changed.length; i < n; ++i) {\n          locations0[changed[i].identifier] = null;\n        }\n        var touches = relocate(), now = Date.now();\n        if (touches.length === 1) {\n          if (now - touchtime < 500) {\n            var p = touches[0];\n            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n            d3_eventPreventDefault();\n          }\n          touchtime = now;\n        } else if (touches.length > 1) {\n          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];\n          distance0 = dx * dx + dy * dy;\n        }\n      }\n      function moved() {\n        var touches = d3.touches(that), p0, l0, p1, l1;\n        d3_selection_interrupt.call(that);\n        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {\n          p1 = touches[i];\n          if (l1 = locations0[p1.identifier]) {\n            if (l0) break;\n            p0 = p1, l0 = l1;\n          }\n        }\n        if (l1) {\n          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);\n          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];\n          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];\n          scaleTo(scale1 * scale0);\n        }\n        touchtime = null;\n        translateTo(p0, l0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        if (d3.event.touches.length) {\n          var changed = d3.event.changedTouches;\n          for (var i = 0, n = changed.length; i < n; ++i) {\n            delete locations0[changed[i].identifier];\n          }\n          for (var identifier in locations0) {\n            return void relocate();\n          }\n        }\n        d3.selectAll(targets).on(zoomName, null);\n        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n        dragRestore();\n        zoomended(dispatch);\n      }\n    }\n    function mousewheeled() {\n      var dispatch = event.of(this, arguments);\n      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), \n      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);\n      mousewheelTimer = setTimeout(function() {\n        mousewheelTimer = null;\n        zoomended(dispatch);\n      }, 50);\n      d3_eventPreventDefault();\n      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n      translateTo(center0, translate0);\n      zoomed(dispatch);\n    }\n    function dblclicked() {\n      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;\n      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n    }\n    return d3.rebind(zoom, event, \"on\");\n  };\n  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;\n  d3.color = d3_color;\n  function d3_color() {}\n  d3_color.prototype.toString = function() {\n    return this.rgb() + \"\";\n  };\n  d3.hsl = d3_hsl;\n  function d3_hsl(h, s, l) {\n    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n  }\n  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n  d3_hslPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, this.l / k);\n  };\n  d3_hslPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, k * this.l);\n  };\n  d3_hslPrototype.rgb = function() {\n    return d3_hsl_rgb(this.h, this.s, this.l);\n  };\n  function d3_hsl_rgb(h, s, l) {\n    var m1, m2;\n    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;\n    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;\n    l = l < 0 ? 0 : l > 1 ? 1 : l;\n    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;\n    m1 = 2 * l - m2;\n    function v(h) {\n      if (h > 360) h -= 360; else if (h < 0) h += 360;\n      if (h < 60) return m1 + (m2 - m1) * h / 60;\n      if (h < 180) return m2;\n      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;\n      return m1;\n    }\n    function vv(h) {\n      return Math.round(v(h) * 255);\n    }\n    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n  }\n  d3.hcl = d3_hcl;\n  function d3_hcl(h, c, l) {\n    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n  }\n  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n  d3_hclPrototype.brighter = function(k) {\n    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.darker = function(k) {\n    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.rgb = function() {\n    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n  };\n  function d3_hcl_lab(h, c, l) {\n    if (isNaN(h)) h = 0;\n    if (isNaN(c)) c = 0;\n    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n  }\n  d3.lab = d3_lab;\n  function d3_lab(l, a, b) {\n    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n  }\n  var d3_lab_K = 18;\n  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;\n  var d3_labPrototype = d3_lab.prototype = new d3_color();\n  d3_labPrototype.brighter = function(k) {\n    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.darker = function(k) {\n    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.rgb = function() {\n    return d3_lab_rgb(this.l, this.a, this.b);\n  };\n  function d3_lab_rgb(l, a, b) {\n    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;\n    x = d3_lab_xyz(x) * d3_lab_X;\n    y = d3_lab_xyz(y) * d3_lab_Y;\n    z = d3_lab_xyz(z) * d3_lab_Z;\n    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n  }\n  function d3_lab_hcl(l, a, b) {\n    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n  }\n  function d3_lab_xyz(x) {\n    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n  }\n  function d3_xyz_lab(x) {\n    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n  }\n  function d3_xyz_rgb(r) {\n    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n  }\n  d3.rgb = d3_rgb;\n  function d3_rgb(r, g, b) {\n    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n  }\n  function d3_rgbNumber(value) {\n    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);\n  }\n  function d3_rgbString(value) {\n    return d3_rgbNumber(value) + \"\";\n  }\n  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n  d3_rgbPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    var r = this.r, g = this.g, b = this.b, i = 30;\n    if (!r && !g && !b) return new d3_rgb(i, i, i);\n    if (r && r < i) r = i;\n    if (g && g < i) g = i;\n    if (b && b < i) b = i;\n    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n  };\n  d3_rgbPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n  };\n  d3_rgbPrototype.hsl = function() {\n    return d3_rgb_hsl(this.r, this.g, this.b);\n  };\n  d3_rgbPrototype.toString = function() {\n    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n  };\n  function d3_rgb_hex(v) {\n    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n  }\n  function d3_rgb_parse(format, rgb, hsl) {\n    var r = 0, g = 0, b = 0, m1, m2, color;\n    m1 = /([a-z]+)\\((.*)\\)/.exec(format = format.toLowerCase());\n    if (m1) {\n      m2 = m1[2].split(\",\");\n      switch (m1[1]) {\n       case \"hsl\":\n        {\n          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n        }\n\n       case \"rgb\":\n        {\n          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n        }\n      }\n    }\n    if (color = d3_rgb_names.get(format)) {\n      return rgb(color.r, color.g, color.b);\n    }\n    if (format != null && format.charAt(0) === \"#\" && !isNaN(color = parseInt(format.slice(1), 16))) {\n      if (format.length === 4) {\n        r = (color & 3840) >> 4;\n        r = r >> 4 | r;\n        g = color & 240;\n        g = g >> 4 | g;\n        b = color & 15;\n        b = b << 4 | b;\n      } else if (format.length === 7) {\n        r = (color & 16711680) >> 16;\n        g = (color & 65280) >> 8;\n        b = color & 255;\n      }\n    }\n    return rgb(r, g, b);\n  }\n  function d3_rgb_hsl(r, g, b) {\n    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n    if (d) {\n      s = l < .5 ? d / (max + min) : d / (2 - max - min);\n      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n      h *= 60;\n    } else {\n      h = NaN;\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new d3_hsl(h, s, l);\n  }\n  function d3_rgb_lab(r, g, b) {\n    r = d3_rgb_xyz(r);\n    g = d3_rgb_xyz(g);\n    b = d3_rgb_xyz(b);\n    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n  }\n  function d3_rgb_xyz(r) {\n    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n  }\n  function d3_rgb_parseNumber(c) {\n    var f = parseFloat(c);\n    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;\n  }\n  var d3_rgb_names = d3.map({\n    aliceblue: 15792383,\n    antiquewhite: 16444375,\n    aqua: 65535,\n    aquamarine: 8388564,\n    azure: 15794175,\n    beige: 16119260,\n    bisque: 16770244,\n    black: 0,\n    blanchedalmond: 16772045,\n    blue: 255,\n    blueviolet: 9055202,\n    brown: 10824234,\n    burlywood: 14596231,\n    cadetblue: 6266528,\n    chartreuse: 8388352,\n    chocolate: 13789470,\n    coral: 16744272,\n    cornflowerblue: 6591981,\n    cornsilk: 16775388,\n    crimson: 14423100,\n    cyan: 65535,\n    darkblue: 139,\n    darkcyan: 35723,\n    darkgoldenrod: 12092939,\n    darkgray: 11119017,\n    darkgreen: 25600,\n    darkgrey: 11119017,\n    darkkhaki: 12433259,\n    darkmagenta: 9109643,\n    darkolivegreen: 5597999,\n    darkorange: 16747520,\n    darkorchid: 10040012,\n    darkred: 9109504,\n    darksalmon: 15308410,\n    darkseagreen: 9419919,\n    darkslateblue: 4734347,\n    darkslategray: 3100495,\n    darkslategrey: 3100495,\n    darkturquoise: 52945,\n    darkviolet: 9699539,\n    deeppink: 16716947,\n    deepskyblue: 49151,\n    dimgray: 6908265,\n    dimgrey: 6908265,\n    dodgerblue: 2003199,\n    firebrick: 11674146,\n    floralwhite: 16775920,\n    forestgreen: 2263842,\n    fuchsia: 16711935,\n    gainsboro: 14474460,\n    ghostwhite: 16316671,\n    gold: 16766720,\n    goldenrod: 14329120,\n    gray: 8421504,\n    green: 32768,\n    greenyellow: 11403055,\n    grey: 8421504,\n    honeydew: 15794160,\n    hotpink: 16738740,\n    indianred: 13458524,\n    indigo: 4915330,\n    ivory: 16777200,\n    khaki: 15787660,\n    lavender: 15132410,\n    lavenderblush: 16773365,\n    lawngreen: 8190976,\n    lemonchiffon: 16775885,\n    lightblue: 11393254,\n    lightcoral: 15761536,\n    lightcyan: 14745599,\n    lightgoldenrodyellow: 16448210,\n    lightgray: 13882323,\n    lightgreen: 9498256,\n    lightgrey: 13882323,\n    lightpink: 16758465,\n    lightsalmon: 16752762,\n    lightseagreen: 2142890,\n    lightskyblue: 8900346,\n    lightslategray: 7833753,\n    lightslategrey: 7833753,\n    lightsteelblue: 11584734,\n    lightyellow: 16777184,\n    lime: 65280,\n    limegreen: 3329330,\n    linen: 16445670,\n    magenta: 16711935,\n    maroon: 8388608,\n    mediumaquamarine: 6737322,\n    mediumblue: 205,\n    mediumorchid: 12211667,\n    mediumpurple: 9662683,\n    mediumseagreen: 3978097,\n    mediumslateblue: 8087790,\n    mediumspringgreen: 64154,\n    mediumturquoise: 4772300,\n    mediumvioletred: 13047173,\n    midnightblue: 1644912,\n    mintcream: 16121850,\n    mistyrose: 16770273,\n    moccasin: 16770229,\n    navajowhite: 16768685,\n    navy: 128,\n    oldlace: 16643558,\n    olive: 8421376,\n    olivedrab: 7048739,\n    orange: 16753920,\n    orangered: 16729344,\n    orchid: 14315734,\n    palegoldenrod: 15657130,\n    palegreen: 10025880,\n    paleturquoise: 11529966,\n    palevioletred: 14381203,\n    papayawhip: 16773077,\n    peachpuff: 16767673,\n    peru: 13468991,\n    pink: 16761035,\n    plum: 14524637,\n    powderblue: 11591910,\n    purple: 8388736,\n    rebeccapurple: 6697881,\n    red: 16711680,\n    rosybrown: 12357519,\n    royalblue: 4286945,\n    saddlebrown: 9127187,\n    salmon: 16416882,\n    sandybrown: 16032864,\n    seagreen: 3050327,\n    seashell: 16774638,\n    sienna: 10506797,\n    silver: 12632256,\n    skyblue: 8900331,\n    slateblue: 6970061,\n    slategray: 7372944,\n    slategrey: 7372944,\n    snow: 16775930,\n    springgreen: 65407,\n    steelblue: 4620980,\n    tan: 13808780,\n    teal: 32896,\n    thistle: 14204888,\n    tomato: 16737095,\n    turquoise: 4251856,\n    violet: 15631086,\n    wheat: 16113331,\n    white: 16777215,\n    whitesmoke: 16119285,\n    yellow: 16776960,\n    yellowgreen: 10145074\n  });\n  d3_rgb_names.forEach(function(key, value) {\n    d3_rgb_names.set(key, d3_rgbNumber(value));\n  });\n  function d3_functor(v) {\n    return typeof v === \"function\" ? v : function() {\n      return v;\n    };\n  }\n  d3.functor = d3_functor;\n  d3.xhr = d3_xhrType(d3_identity);\n  function d3_xhrType(response) {\n    return function(url, mimeType, callback) {\n      if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType, \n      mimeType = null;\n      return d3_xhr(url, mimeType, response, callback);\n    };\n  }\n  function d3_xhr(url, mimeType, response, callback) {\n    var xhr = {}, dispatch = d3.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"), headers = {}, request = new XMLHttpRequest(), responseType = null;\n    if (this.XDomainRequest && !(\"withCredentials\" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {\n      request.readyState > 3 && respond();\n    };\n    function respond() {\n      var status = request.status, result;\n      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {\n        try {\n          result = response.call(xhr, request);\n        } catch (e) {\n          dispatch.error.call(xhr, e);\n          return;\n        }\n        dispatch.load.call(xhr, result);\n      } else {\n        dispatch.error.call(xhr, request);\n      }\n    }\n    request.onprogress = function(event) {\n      var o = d3.event;\n      d3.event = event;\n      try {\n        dispatch.progress.call(xhr, request);\n      } finally {\n        d3.event = o;\n      }\n    };\n    xhr.header = function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers[name];\n      if (value == null) delete headers[name]; else headers[name] = value + \"\";\n      return xhr;\n    };\n    xhr.mimeType = function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return xhr;\n    };\n    xhr.responseType = function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return xhr;\n    };\n    xhr.response = function(value) {\n      response = value;\n      return xhr;\n    };\n    [ \"get\", \"post\" ].forEach(function(method) {\n      xhr[method] = function() {\n        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));\n      };\n    });\n    xhr.send = function(method, data, callback) {\n      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;\n      request.open(method, url, true);\n      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";\n      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);\n      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);\n      if (responseType != null) request.responseType = responseType;\n      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {\n        callback(null, request);\n      });\n      dispatch.beforesend.call(xhr, request);\n      request.send(data == null ? null : data);\n      return xhr;\n    };\n    xhr.abort = function() {\n      request.abort();\n      return xhr;\n    };\n    d3.rebind(xhr, dispatch, \"on\");\n    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n  }\n  function d3_xhr_fixCallback(callback) {\n    return callback.length === 1 ? function(error, request) {\n      callback(error == null ? request : null);\n    } : callback;\n  }\n  function d3_xhrHasResponse(request) {\n    var type = request.responseType;\n    return type && type !== \"text\" ? request.response : request.responseText;\n  }\n  d3.dsv = function(delimiter, mimeType) {\n    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);\n    function dsv(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n      xhr.row = function(_) {\n        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n      };\n      return xhr;\n    }\n    function response(request) {\n      return dsv.parse(request.responseText);\n    }\n    function typedResponse(f) {\n      return function(request) {\n        return dsv.parse(request.responseText, f);\n      };\n    }\n    dsv.parse = function(text, f) {\n      var o;\n      return dsv.parseRows(text, function(row, i) {\n        if (o) return o(row, i - 1);\n        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {\n          return JSON.stringify(name) + \": d[\" + i + \"]\";\n        }).join(\",\") + \"}\");\n        o = f ? function(row, i) {\n          return f(a(row), i);\n        } : a;\n      });\n    };\n    dsv.parseRows = function(text, f) {\n      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n      function token() {\n        if (I >= N) return EOF;\n        if (eol) return eol = false, EOL;\n        var j = I;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          var c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, '\"');\n        }\n        while (I < N) {\n          var c = text.charCodeAt(I++), k = 1;\n          if (c === 10) eol = true; else if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(I) === 10) ++I, ++k;\n          } else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n        return text.slice(j);\n      }\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n      return rows;\n    };\n    dsv.format = function(rows) {\n      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n      var fieldSet = new d3_Set(), fields = [];\n      rows.forEach(function(row) {\n        for (var field in row) {\n          if (!fieldSet.has(field)) {\n            fields.push(fieldSet.add(field));\n          }\n        }\n      });\n      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {\n        return fields.map(function(field) {\n          return formatValue(row[field]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    };\n    dsv.formatRows = function(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    };\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n    function formatValue(text) {\n      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;\n    }\n    return dsv;\n  };\n  d3.csv = d3.dsv(\",\", \"text/csv\");\n  d3.tsv = d3.dsv(\"\t\", \"text/tab-separated-values\");\n  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, \"requestAnimationFrame\")] || function(callback) {\n    setTimeout(callback, 17);\n  };\n  d3.timer = function() {\n    d3_timer.apply(this, arguments);\n  };\n  function d3_timer(callback, delay, then) {\n    var n = arguments.length;\n    if (n < 2) delay = 0;\n    if (n < 3) then = Date.now();\n    var time = then + delay, timer = {\n      c: callback,\n      t: time,\n      n: null\n    };\n    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;\n    d3_timer_queueTail = timer;\n    if (!d3_timer_interval) {\n      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n    return timer;\n  }\n  function d3_timer_step() {\n    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;\n    if (delay > 24) {\n      if (isFinite(delay)) {\n        clearTimeout(d3_timer_timeout);\n        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n      }\n      d3_timer_interval = 0;\n    } else {\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  }\n  d3.timer.flush = function() {\n    d3_timer_mark();\n    d3_timer_sweep();\n  };\n  function d3_timer_mark() {\n    var now = Date.now(), timer = d3_timer_queueHead;\n    while (timer) {\n      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;\n      timer = timer.n;\n    }\n    return now;\n  }\n  function d3_timer_sweep() {\n    var t0, t1 = d3_timer_queueHead, time = Infinity;\n    while (t1) {\n      if (t1.c) {\n        if (t1.t < time) time = t1.t;\n        t1 = (t0 = t1).n;\n      } else {\n        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n      }\n    }\n    d3_timer_queueTail = t0;\n    return time;\n  }\n  function d3_format_precision(x, p) {\n    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n  }\n  d3.round = function(x, n) {\n    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n  };\n  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n  d3.formatPrefix = function(value, precision) {\n    var i = 0;\n    if (value = +value) {\n      if (value < 0) value *= -1;\n      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n    }\n    return d3_formatPrefixes[8 + i / 3];\n  };\n  function d3_formatPrefix(d, i) {\n    var k = Math.pow(10, abs(8 - i) * 3);\n    return {\n      scale: i > 8 ? function(d) {\n        return d / k;\n      } : function(d) {\n        return d * k;\n      },\n      symbol: d\n    };\n  }\n  function d3_locale_numberFormat(locale) {\n    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {\n      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n      }\n      return t.reverse().join(locale_thousands);\n    } : d3_identity;\n    return function(specifier) {\n      var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"-\", symbol = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \"\", suffix = \"\", integer = false, exponent = true;\n      if (precision) precision = +precision.substring(1);\n      if (zfill || fill === \"0\" && align === \"=\") {\n        zfill = fill = \"0\";\n        align = \"=\";\n      }\n      switch (type) {\n       case \"n\":\n        comma = true;\n        type = \"g\";\n        break;\n\n       case \"%\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"f\";\n        break;\n\n       case \"p\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"r\";\n        break;\n\n       case \"b\":\n       case \"o\":\n       case \"x\":\n       case \"X\":\n        if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();\n\n       case \"c\":\n        exponent = false;\n\n       case \"d\":\n        integer = true;\n        precision = 0;\n        break;\n\n       case \"s\":\n        scale = -1;\n        type = \"r\";\n        break;\n      }\n      if (symbol === \"$\") prefix = locale_currency[0], suffix = locale_currency[1];\n      if (type == \"r\" && !precision) type = \"g\";\n      if (precision != null) {\n        if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n      }\n      type = d3_format_types.get(type) || d3_format_typeDefault;\n      var zcomma = zfill && comma;\n      return function(value) {\n        var fullSuffix = suffix;\n        if (integer && value % 1) return \"\";\n        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign === \"-\" ? \"\" : sign;\n        if (scale < 0) {\n          var unit = d3.formatPrefix(value, precision);\n          value = unit.scale(value);\n          fullSuffix = unit.symbol + suffix;\n        } else {\n          value *= scale;\n        }\n        value = type(value, precision);\n        var i = value.lastIndexOf(\".\"), before, after;\n        if (i < 0) {\n          var j = exponent ? value.lastIndexOf(\"e\") : -1;\n          if (j < 0) before = value, after = \"\"; else before = value.substring(0, j), after = value.substring(j);\n        } else {\n          before = value.substring(0, i);\n          after = locale_decimal + value.substring(i + 1);\n        }\n        if (!zfill && comma) before = formatGroup(before, Infinity);\n        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n        negative += prefix;\n        value = before + after;\n        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n      };\n    };\n  }\n  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n  var d3_format_types = d3.map({\n    b: function(x) {\n      return x.toString(2);\n    },\n    c: function(x) {\n      return String.fromCharCode(x);\n    },\n    o: function(x) {\n      return x.toString(8);\n    },\n    x: function(x) {\n      return x.toString(16);\n    },\n    X: function(x) {\n      return x.toString(16).toUpperCase();\n    },\n    g: function(x, p) {\n      return x.toPrecision(p);\n    },\n    e: function(x, p) {\n      return x.toExponential(p);\n    },\n    f: function(x, p) {\n      return x.toFixed(p);\n    },\n    r: function(x, p) {\n      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n    }\n  });\n  function d3_format_typeDefault(x) {\n    return x + \"\";\n  }\n  var d3_time = d3.time = {}, d3_date = Date;\n  function d3_date_utc() {\n    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n  }\n  d3_date_utc.prototype = {\n    getDate: function() {\n      return this._.getUTCDate();\n    },\n    getDay: function() {\n      return this._.getUTCDay();\n    },\n    getFullYear: function() {\n      return this._.getUTCFullYear();\n    },\n    getHours: function() {\n      return this._.getUTCHours();\n    },\n    getMilliseconds: function() {\n      return this._.getUTCMilliseconds();\n    },\n    getMinutes: function() {\n      return this._.getUTCMinutes();\n    },\n    getMonth: function() {\n      return this._.getUTCMonth();\n    },\n    getSeconds: function() {\n      return this._.getUTCSeconds();\n    },\n    getTime: function() {\n      return this._.getTime();\n    },\n    getTimezoneOffset: function() {\n      return 0;\n    },\n    valueOf: function() {\n      return this._.valueOf();\n    },\n    setDate: function() {\n      d3_time_prototype.setUTCDate.apply(this._, arguments);\n    },\n    setDay: function() {\n      d3_time_prototype.setUTCDay.apply(this._, arguments);\n    },\n    setFullYear: function() {\n      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n    },\n    setHours: function() {\n      d3_time_prototype.setUTCHours.apply(this._, arguments);\n    },\n    setMilliseconds: function() {\n      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n    },\n    setMinutes: function() {\n      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n    },\n    setMonth: function() {\n      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n    },\n    setSeconds: function() {\n      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n    },\n    setTime: function() {\n      d3_time_prototype.setTime.apply(this._, arguments);\n    }\n  };\n  var d3_time_prototype = Date.prototype;\n  function d3_time_interval(local, step, number) {\n    function round(date) {\n      var d0 = local(date), d1 = offset(d0, 1);\n      return date - d0 < d1 - date ? d0 : d1;\n    }\n    function ceil(date) {\n      step(date = local(new d3_date(date - 1)), 1);\n      return date;\n    }\n    function offset(date, k) {\n      step(date = new d3_date(+date), k);\n      return date;\n    }\n    function range(t0, t1, dt) {\n      var time = ceil(t0), times = [];\n      if (dt > 1) {\n        while (time < t1) {\n          if (!(number(time) % dt)) times.push(new Date(+time));\n          step(time, 1);\n        }\n      } else {\n        while (time < t1) times.push(new Date(+time)), step(time, 1);\n      }\n      return times;\n    }\n    function range_utc(t0, t1, dt) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = t0;\n        return range(utc, t1, dt);\n      } finally {\n        d3_date = Date;\n      }\n    }\n    local.floor = local;\n    local.round = round;\n    local.ceil = ceil;\n    local.offset = offset;\n    local.range = range;\n    var utc = local.utc = d3_time_interval_utc(local);\n    utc.floor = utc;\n    utc.round = d3_time_interval_utc(round);\n    utc.ceil = d3_time_interval_utc(ceil);\n    utc.offset = d3_time_interval_utc(offset);\n    utc.range = range_utc;\n    return local;\n  }\n  function d3_time_interval_utc(method) {\n    return function(date, k) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = date;\n        return method(utc, k)._;\n      } finally {\n        d3_date = Date;\n      }\n    };\n  }\n  d3_time.year = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setMonth(0, 1);\n    return date;\n  }, function(date, offset) {\n    date.setFullYear(date.getFullYear() + offset);\n  }, function(date) {\n    return date.getFullYear();\n  });\n  d3_time.years = d3_time.year.range;\n  d3_time.years.utc = d3_time.year.utc.range;\n  d3_time.day = d3_time_interval(function(date) {\n    var day = new d3_date(2e3, 0);\n    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    return day;\n  }, function(date, offset) {\n    date.setDate(date.getDate() + offset);\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n  d3_time.days = d3_time.day.range;\n  d3_time.days.utc = d3_time.day.utc.range;\n  d3_time.dayOfYear = function(date) {\n    var year = d3_time.year(date);\n    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n  };\n  [ \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\" ].forEach(function(day, i) {\n    i = 7 - i;\n    var interval = d3_time[day] = d3_time_interval(function(date) {\n      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n      return date;\n    }, function(date, offset) {\n      date.setDate(date.getDate() + Math.floor(offset) * 7);\n    }, function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n    });\n    d3_time[day + \"s\"] = interval.range;\n    d3_time[day + \"s\"].utc = interval.utc.range;\n    d3_time[day + \"OfYear\"] = function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n    };\n  });\n  d3_time.week = d3_time.sunday;\n  d3_time.weeks = d3_time.sunday.range;\n  d3_time.weeks.utc = d3_time.sunday.utc.range;\n  d3_time.weekOfYear = d3_time.sundayOfYear;\n  function d3_locale_timeFormat(locale) {\n    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n    function d3_time_format(template) {\n      var n = template.length;\n      function format(date) {\n        var string = [], i = -1, j = 0, c, p, f;\n        while (++i < n) {\n          if (template.charCodeAt(i) === 37) {\n            string.push(template.slice(j, i));\n            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n        string.push(template.slice(j, i));\n        return string.join(\"\");\n      }\n      format.parse = function(string) {\n        var d = {\n          y: 1900,\n          m: 0,\n          d: 1,\n          H: 0,\n          M: 0,\n          S: 0,\n          L: 0,\n          Z: null\n        }, i = d3_time_parse(d, template, string, 0);\n        if (i != string.length) return null;\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();\n        if (\"j\" in d) date.setFullYear(d.y, 0, d.j); else if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n          date.setFullYear(d.y, 0, 1);\n          date.setFullYear(d.y, 0, \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n        } else date.setFullYear(d.y, d.m, d.d);\n        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n        return localZ ? date._ : date;\n      };\n      format.toString = function() {\n        return template;\n      };\n      return format;\n    }\n    function d3_time_parse(date, template, string, j) {\n      var c, p, t, i = 0, n = template.length, m = string.length;\n      while (i < n) {\n        if (j >= m) return -1;\n        c = template.charCodeAt(i++);\n        if (c === 37) {\n          t = template.charAt(i++);\n          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n          if (!p || (j = p(date, string, j)) < 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n      return j;\n    }\n    d3_time_format.utc = function(template) {\n      var local = d3_time_format(template);\n      function format(date) {\n        try {\n          d3_date = d3_date_utc;\n          var utc = new d3_date();\n          utc._ = date;\n          return local(utc);\n        } finally {\n          d3_date = Date;\n        }\n      }\n      format.parse = function(string) {\n        try {\n          d3_date = d3_date_utc;\n          var date = local.parse(string);\n          return date && date._;\n        } finally {\n          d3_date = Date;\n        }\n      };\n      format.toString = local.toString;\n      return format;\n    };\n    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n    locale_periods.forEach(function(p, i) {\n      d3_time_periodLookup.set(p.toLowerCase(), i);\n    });\n    var d3_time_formats = {\n      a: function(d) {\n        return locale_shortDays[d.getDay()];\n      },\n      A: function(d) {\n        return locale_days[d.getDay()];\n      },\n      b: function(d) {\n        return locale_shortMonths[d.getMonth()];\n      },\n      B: function(d) {\n        return locale_months[d.getMonth()];\n      },\n      c: d3_time_format(locale_dateTime),\n      d: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      e: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      H: function(d, p) {\n        return d3_time_formatPad(d.getHours(), p, 2);\n      },\n      I: function(d, p) {\n        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n      },\n      j: function(d, p) {\n        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n      },\n      L: function(d, p) {\n        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n      },\n      m: function(d, p) {\n        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n      },\n      M: function(d, p) {\n        return d3_time_formatPad(d.getMinutes(), p, 2);\n      },\n      p: function(d) {\n        return locale_periods[+(d.getHours() >= 12)];\n      },\n      S: function(d, p) {\n        return d3_time_formatPad(d.getSeconds(), p, 2);\n      },\n      U: function(d, p) {\n        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n      },\n      w: function(d) {\n        return d.getDay();\n      },\n      W: function(d, p) {\n        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n      },\n      x: d3_time_format(locale_date),\n      X: d3_time_format(locale_time),\n      y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n      },\n      Y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n      },\n      Z: d3_time_zone,\n      \"%\": function() {\n        return \"%\";\n      }\n    };\n    var d3_time_parsers = {\n      a: d3_time_parseWeekdayAbbrev,\n      A: d3_time_parseWeekday,\n      b: d3_time_parseMonthAbbrev,\n      B: d3_time_parseMonth,\n      c: d3_time_parseLocaleFull,\n      d: d3_time_parseDay,\n      e: d3_time_parseDay,\n      H: d3_time_parseHour24,\n      I: d3_time_parseHour24,\n      j: d3_time_parseDayOfYear,\n      L: d3_time_parseMilliseconds,\n      m: d3_time_parseMonthNumber,\n      M: d3_time_parseMinutes,\n      p: d3_time_parseAmPm,\n      S: d3_time_parseSeconds,\n      U: d3_time_parseWeekNumberSunday,\n      w: d3_time_parseWeekdayNumber,\n      W: d3_time_parseWeekNumberMonday,\n      x: d3_time_parseLocaleDate,\n      X: d3_time_parseLocaleTime,\n      y: d3_time_parseYear,\n      Y: d3_time_parseFullYear,\n      Z: d3_time_parseZone,\n      \"%\": d3_time_parseLiteralPercent\n    };\n    function d3_time_parseWeekdayAbbrev(date, string, i) {\n      d3_time_dayAbbrevRe.lastIndex = 0;\n      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseWeekday(date, string, i) {\n      d3_time_dayRe.lastIndex = 0;\n      var n = d3_time_dayRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonthAbbrev(date, string, i) {\n      d3_time_monthAbbrevRe.lastIndex = 0;\n      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonth(date, string, i) {\n      d3_time_monthRe.lastIndex = 0;\n      var n = d3_time_monthRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseLocaleFull(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n    }\n    function d3_time_parseLocaleDate(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n    }\n    function d3_time_parseLocaleTime(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n    }\n    function d3_time_parseAmPm(date, string, i) {\n      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n      return n == null ? -1 : (date.p = n, i);\n    }\n    return d3_time_format;\n  }\n  var d3_time_formatPads = {\n    \"-\": \"\",\n    _: \" \",\n    \"0\": \"0\"\n  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;\n  function d3_time_formatPad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\", string = (sign ? -value : value) + \"\", length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n  function d3_time_formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");\n  }\n  function d3_time_formatLookup(names) {\n    var map = new d3_Map(), i = -1, n = names.length;\n    while (++i < n) map.set(names[i].toLowerCase(), i);\n    return map;\n  }\n  function d3_time_parseWeekdayNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n    return n ? (date.w = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberSunday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.U = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberMonday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.W = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseFullYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n    return n ? (date.y = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n  }\n  function d3_time_parseZone(date, string, i) {\n    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, \n    i + 5) : -1;\n  }\n  function d3_time_expandYear(d) {\n    return d + (d > 68 ? 1900 : 2e3);\n  }\n  function d3_time_parseMonthNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n  }\n  function d3_time_parseDay(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.d = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseDayOfYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.j = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseHour24(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.H = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMinutes(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.M = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseSeconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.S = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMilliseconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.L = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_zone(d) {\n    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = abs(z) / 60 | 0, zm = abs(z) % 60;\n    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);\n  }\n  function d3_time_parseLiteralPercent(date, string, i) {\n    d3_time_percentRe.lastIndex = 0;\n    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n  function d3_time_formatMulti(formats) {\n    var n = formats.length, i = -1;\n    while (++i < n) formats[i][0] = this(formats[i][0]);\n    return function(date) {\n      var i = 0, f = formats[i];\n      while (!f[1](date)) f = formats[++i];\n      return f[0](date);\n    };\n  }\n  d3.locale = function(locale) {\n    return {\n      numberFormat: d3_locale_numberFormat(locale),\n      timeFormat: d3_locale_timeFormat(locale)\n    };\n  };\n  var d3_locale_enUS = d3.locale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [ 3 ],\n    currency: [ \"$\", \"\" ],\n    dateTime: \"%a %b %e %X %Y\",\n    date: \"%m/%d/%Y\",\n    time: \"%H:%M:%S\",\n    periods: [ \"AM\", \"PM\" ],\n    days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],\n    shortDays: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],\n    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n    shortMonths: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\n  });\n  d3.format = d3_locale_enUS.numberFormat;\n  d3.geo = {};\n  function d3_adder() {}\n  d3_adder.prototype = {\n    s: 0,\n    t: 0,\n    add: function(y) {\n      d3_adderSum(y, this.t, d3_adderTemp);\n      d3_adderSum(d3_adderTemp.s, this.s, this);\n      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;\n    },\n    reset: function() {\n      this.s = this.t = 0;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n  var d3_adderTemp = new d3_adder();\n  function d3_adderSum(a, b, o) {\n    var x = o.s = a + b, bv = x - a, av = x - bv;\n    o.t = a - av + (b - bv);\n  }\n  d3.geo.stream = function(object, listener) {\n    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n      d3_geo_streamObjectType[object.type](object, listener);\n    } else {\n      d3_geo_streamGeometry(object, listener);\n    }\n  };\n  function d3_geo_streamGeometry(geometry, listener) {\n    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n    }\n  }\n  var d3_geo_streamObjectType = {\n    Feature: function(feature, listener) {\n      d3_geo_streamGeometry(feature.geometry, listener);\n    },\n    FeatureCollection: function(object, listener) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);\n    }\n  };\n  var d3_geo_streamGeometryType = {\n    Sphere: function(object, listener) {\n      listener.sphere();\n    },\n    Point: function(object, listener) {\n      object = object.coordinates;\n      listener.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, listener) {\n      d3_geo_streamLine(object.coordinates, listener, 0);\n    },\n    MultiLineString: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);\n    },\n    Polygon: function(object, listener) {\n      d3_geo_streamPolygon(object.coordinates, listener);\n    },\n    MultiPolygon: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);\n    },\n    GeometryCollection: function(object, listener) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);\n    }\n  };\n  function d3_geo_streamLine(coordinates, listener, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    listener.lineStart();\n    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n    listener.lineEnd();\n  }\n  function d3_geo_streamPolygon(coordinates, listener) {\n    var i = -1, n = coordinates.length;\n    listener.polygonStart();\n    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);\n    listener.polygonEnd();\n  }\n  d3.geo.area = function(object) {\n    d3_geo_areaSum = 0;\n    d3.geo.stream(object, d3_geo_area);\n    return d3_geo_areaSum;\n  };\n  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();\n  var d3_geo_area = {\n    sphere: function() {\n      d3_geo_areaSum += 4 * π;\n    },\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_areaRingSum.reset();\n      d3_geo_area.lineStart = d3_geo_areaRingStart;\n    },\n    polygonEnd: function() {\n      var area = 2 * d3_geo_areaRingSum;\n      d3_geo_areaSum += area < 0 ? 4 * π + area : area;\n      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n    }\n  };\n  function d3_geo_areaRingStart() {\n    var λ00, φ00, λ0, cosφ0, sinφ0;\n    d3_geo_area.point = function(λ, φ) {\n      d3_geo_area.point = nextPoint;\n      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), \n      sinφ0 = Math.sin(φ);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      φ = φ * d3_radians / 2 + π / 4;\n      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n      d3_geo_areaRingSum.add(Math.atan2(v, u));\n      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n    }\n    d3_geo_area.lineEnd = function() {\n      nextPoint(λ00, φ00);\n    };\n  }\n  function d3_geo_cartesian(spherical) {\n    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);\n    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];\n  }\n  function d3_geo_cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n  function d3_geo_cartesianCross(a, b) {\n    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];\n  }\n  function d3_geo_cartesianAdd(a, b) {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n  }\n  function d3_geo_cartesianScale(vector, k) {\n    return [ vector[0] * k, vector[1] * k, vector[2] * k ];\n  }\n  function d3_geo_cartesianNormalize(d) {\n    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l;\n    d[1] /= l;\n    d[2] /= l;\n  }\n  function d3_geo_spherical(cartesian) {\n    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];\n  }\n  function d3_geo_sphericalEqual(a, b) {\n    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;\n  }\n  d3.geo.bounds = function() {\n    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n    var bound = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        bound.point = ringPoint;\n        bound.lineStart = ringStart;\n        bound.lineEnd = ringEnd;\n        dλSum = 0;\n        d3_geo_area.polygonStart();\n      },\n      polygonEnd: function() {\n        d3_geo_area.polygonEnd();\n        bound.point = point;\n        bound.lineStart = lineStart;\n        bound.lineEnd = lineEnd;\n        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;\n        range[0] = λ0, range[1] = λ1;\n      }\n    };\n    function point(λ, φ) {\n      ranges.push(range = [ λ0 = λ, λ1 = λ ]);\n      if (φ < φ0) φ0 = φ;\n      if (φ > φ1) φ1 = φ;\n    }\n    function linePoint(λ, φ) {\n      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);\n      if (p0) {\n        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n        d3_geo_cartesianNormalize(inflection);\n        inflection = d3_geo_spherical(inflection);\n        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;\n        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = inflection[1] * d3_degrees;\n          if (φi > φ1) φ1 = φi;\n        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = -inflection[1] * d3_degrees;\n          if (φi < φ0) φ0 = φi;\n        } else {\n          if (φ < φ0) φ0 = φ;\n          if (φ > φ1) φ1 = φ;\n        }\n        if (antimeridian) {\n          if (λ < λ_) {\n            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n          } else {\n            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n          }\n        } else {\n          if (λ1 >= λ0) {\n            if (λ < λ0) λ0 = λ;\n            if (λ > λ1) λ1 = λ;\n          } else {\n            if (λ > λ_) {\n              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n            } else {\n              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n            }\n          }\n        }\n      } else {\n        point(λ, φ);\n      }\n      p0 = p, λ_ = λ;\n    }\n    function lineStart() {\n      bound.point = linePoint;\n    }\n    function lineEnd() {\n      range[0] = λ0, range[1] = λ1;\n      bound.point = point;\n      p0 = null;\n    }\n    function ringPoint(λ, φ) {\n      if (p0) {\n        var dλ = λ - λ_;\n        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;\n      } else λ__ = λ, φ__ = φ;\n      d3_geo_area.point(λ, φ);\n      linePoint(λ, φ);\n    }\n    function ringStart() {\n      d3_geo_area.lineStart();\n    }\n    function ringEnd() {\n      ringPoint(λ__, φ__);\n      d3_geo_area.lineEnd();\n      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);\n      range[0] = λ0, range[1] = λ1;\n      p0 = null;\n    }\n    function angle(λ0, λ1) {\n      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;\n    }\n    function compareRanges(a, b) {\n      return a[0] - b[0];\n    }\n    function withinRange(x, range) {\n      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n    }\n    return function(feature) {\n      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n      ranges = [];\n      d3.geo.stream(feature, bound);\n      var n = ranges.length;\n      if (n) {\n        ranges.sort(compareRanges);\n        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {\n          b = ranges[i];\n          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n          } else {\n            merged.push(a = b);\n          }\n        }\n        var best = -Infinity, dλ;\n        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {\n          b = merged[i];\n          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];\n        }\n      }\n      ranges = range = null;\n      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];\n    };\n  }();\n  d3.geo.centroid = function(object) {\n    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n    d3.geo.stream(object, d3_geo_centroid);\n    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;\n    if (m < ε2) {\n      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n      m = x * x + y * y + z * z;\n      if (m < ε2) return [ NaN, NaN ];\n    }\n    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];\n  };\n  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n  var d3_geo_centroid = {\n    sphere: d3_noop,\n    point: d3_geo_centroidPoint,\n    lineStart: d3_geo_centroidLineStart,\n    lineEnd: d3_geo_centroidLineEnd,\n    polygonStart: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n    }\n  };\n  function d3_geo_centroidPoint(λ, φ) {\n    λ *= d3_radians;\n    var cosφ = Math.cos(φ *= d3_radians);\n    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n  }\n  function d3_geo_centroidPointXYZ(x, y, z) {\n    ++d3_geo_centroidW0;\n    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n  }\n  function d3_geo_centroidLineStart() {\n    var x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroid.point = nextPoint;\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_centroidLineEnd() {\n    d3_geo_centroid.point = d3_geo_centroidPoint;\n  }\n  function d3_geo_centroidRingStart() {\n    var λ00, φ00, x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ00 = λ, φ00 = φ;\n      d3_geo_centroid.point = nextPoint;\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    d3_geo_centroid.lineEnd = function() {\n      nextPoint(λ00, φ00);\n      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n      d3_geo_centroid.point = d3_geo_centroidPoint;\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);\n      d3_geo_centroidX2 += v * cx;\n      d3_geo_centroidY2 += v * cy;\n      d3_geo_centroidZ2 += v * cz;\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_compose(a, b) {\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n    return compose;\n  }\n  function d3_true() {\n    return true;\n  }\n  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n    var subject = [], clip = [];\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n];\n      if (d3_geo_sphericalEqual(p0, p1)) {\n        listener.lineStart();\n        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);\n        listener.lineEnd();\n        return;\n      }\n      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n    });\n    clip.sort(compare);\n    d3_geo_clipPolygonLinkCircular(subject);\n    d3_geo_clipPolygonLinkCircular(clip);\n    if (!subject.length) return;\n    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {\n      clip[i].e = entry = !entry;\n    }\n    var start = subject[0], points, point;\n    while (1) {\n      var current = start, isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      listener.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, listener);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, listener);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      listener.lineEnd();\n    }\n  }\n  function d3_geo_clipPolygonLinkCircular(array) {\n    if (!(n = array.length)) return;\n    var n, i = 0, a = array[0], b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other;\n    this.e = entry;\n    this.v = false;\n    this.n = this.p = null;\n  }\n  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n    return function(rotate, listener) {\n      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = d3.merge(segments);\n          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n          if (segments.length) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n          } else if (clipStartInside) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            interpolate(null, null, 1, listener);\n            listener.lineEnd();\n          }\n          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          listener.polygonStart();\n          listener.lineStart();\n          interpolate(null, null, 1, listener);\n          listener.lineEnd();\n          listener.polygonEnd();\n        }\n      };\n      function point(λ, φ) {\n        var point = rotate(λ, φ);\n        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n      }\n      function pointLine(λ, φ) {\n        var point = rotate(λ, φ);\n        line.point(point[0], point[1]);\n      }\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n      var segments;\n      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n      function pointRing(λ, φ) {\n        ring.push([ λ, φ ]);\n        var point = rotate(λ, φ);\n        ringListener.point(point[0], point[1]);\n      }\n      function ringStart() {\n        ringListener.lineStart();\n        ring = [];\n      }\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringListener.lineEnd();\n        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n        if (!n) return;\n        if (clean & 1) {\n          segment = ringSegments[0];\n          var n = segment.length - 1, i = -1, point;\n          if (n > 0) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            while (++i < n) listener.point((point = segment[i])[0], point[1]);\n            listener.lineEnd();\n          }\n          return;\n        }\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n      }\n      return clip;\n    };\n  }\n  function d3_geo_clipSegmentLength1(segment) {\n    return segment.length > 1;\n  }\n  function d3_geo_clipBufferListener() {\n    var lines = [], line;\n    return {\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      point: function(λ, φ) {\n        line.push([ λ, φ ]);\n      },\n      lineEnd: d3_noop,\n      buffer: function() {\n        var buffer = lines;\n        lines = [];\n        line = null;\n        return buffer;\n      },\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      }\n    };\n  }\n  function d3_geo_clipSort(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n  }\n  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n  function d3_geo_clipAntimeridianLine(listener) {\n    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;\n    return {\n      lineStart: function() {\n        listener.lineStart();\n        clean = 1;\n      },\n      point: function(λ1, φ1) {\n        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);\n        if (abs(dλ - π) < ε) {\n          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          listener.point(λ1, φ0);\n          clean = 0;\n        } else if (sλ0 !== sλ1 && dλ >= π) {\n          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;\n          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;\n          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          clean = 0;\n        }\n        listener.point(λ0 = λ1, φ0 = φ1);\n        sλ0 = sλ1;\n      },\n      lineEnd: function() {\n        listener.lineEnd();\n        λ0 = φ0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean;\n      }\n    };\n  }\n  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);\n    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n  }\n  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n    var φ;\n    if (from == null) {\n      φ = direction * halfπ;\n      listener.point(-π, φ);\n      listener.point(0, φ);\n      listener.point(π, φ);\n      listener.point(π, 0);\n      listener.point(π, -φ);\n      listener.point(0, -φ);\n      listener.point(-π, -φ);\n      listener.point(-π, 0);\n      listener.point(-π, φ);\n    } else if (abs(from[0] - to[0]) > ε) {\n      var s = from[0] < to[0] ? π : -π;\n      φ = direction * s / 2;\n      listener.point(-s, φ);\n      listener.point(0, φ);\n      listener.point(s, φ);\n    } else {\n      listener.point(to[0], to[1]);\n    }\n  }\n  function d3_geo_pointInPolygon(point, polygon) {\n    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n    d3_geo_areaRingSum.reset();\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      var ring = polygon[i], m = ring.length;\n      if (!m) continue;\n      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n      while (true) {\n        if (j === m) j = 0;\n        point = ring[j];\n        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;\n        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {\n          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n          d3_geo_cartesianNormalize(arc);\n          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n          d3_geo_cartesianNormalize(intersection);\n          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);\n          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ dλ >= 0 ? 1 : -1;\n          }\n        }\n        if (!j++) break;\n        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n      }\n    }\n    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;\n  }\n  function d3_geo_clipCircle(radius) {\n    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);\n    function visible(λ, φ) {\n      return Math.cos(λ) * Math.cos(φ) > cr;\n    }\n    function clipLine(listener) {\n      var point0, c0, v0, v00, clean;\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(λ, φ) {\n          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n          if (!point0 && (v00 = v0 = v)) listener.lineStart();\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n              point1[0] += ε;\n              point1[1] += ε;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              listener.lineStart();\n              point2 = intersect(point1, point0);\n              listener.point(point2[0], point2[1]);\n            } else {\n              point2 = intersect(point0, point1);\n              listener.point(point2[0], point2[1]);\n              listener.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n              } else {\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n            listener.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) listener.lineEnd();\n          point0 = null;\n        },\n        clean: function() {\n          return clean | (v00 && v0) << 1;\n        }\n      };\n    }\n    function intersect(a, b, two) {\n      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);\n      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n      if (!determinant) return !two && a;\n      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n      d3_geo_cartesianAdd(A, B);\n      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n      if (t2 < 0) return;\n      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);\n      d3_geo_cartesianAdd(q, A);\n      q = d3_geo_spherical(q);\n      if (!two) return q;\n      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;\n      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;\n      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;\n      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;\n      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n        d3_geo_cartesianAdd(q1, A);\n        return [ q, d3_geo_spherical(q1) ];\n      }\n    }\n    function code(λ, φ) {\n      var r = smallRadius ? radius : π - radius, code = 0;\n      if (λ < -r) code |= 1; else if (λ > r) code |= 2;\n      if (φ < -r) code |= 4; else if (φ > r) code |= 8;\n      return code;\n    }\n  }\n  function d3_geom_clipLine(x0, y0, x1, y1) {\n    return function(line) {\n      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n      r = x0 - ax;\n      if (!dx && r > 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dx > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = x1 - ax;\n      if (!dx && r < 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dx > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      r = y0 - ay;\n      if (!dy && r > 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dy > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = y1 - ay;\n      if (!dy && r < 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dy > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      if (t0 > 0) line.a = {\n        x: ax + t0 * dx,\n        y: ay + t0 * dy\n      };\n      if (t1 < 1) line.b = {\n        x: ax + t1 * dx,\n        y: ay + t1 * dy\n      };\n      return line;\n    };\n  }\n  var d3_geo_clipExtentMAX = 1e9;\n  d3.geo.clipExtent = function() {\n    var x0, y0, x1, y1, stream, clip, clipExtent = {\n      stream: function(output) {\n        if (stream) stream.valid = false;\n        stream = clip(output);\n        stream.valid = true;\n        return stream;\n      },\n      extent: function(_) {\n        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n        if (stream) stream.valid = false, stream = null;\n        return clipExtent;\n      }\n    };\n    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);\n  };\n  function d3_geo_clipExtent(x0, y0, x1, y1) {\n    return function(listener) {\n      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          listener = bufferListener;\n          segments = [];\n          polygon = [];\n          clean = true;\n        },\n        polygonEnd: function() {\n          listener = listener_;\n          segments = d3.merge(segments);\n          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;\n          if (inside || visible) {\n            listener.polygonStart();\n            if (inside) {\n              listener.lineStart();\n              interpolate(null, null, 1, listener);\n              listener.lineEnd();\n            }\n            if (visible) {\n              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n            }\n            listener.polygonEnd();\n          }\n          segments = polygon = ring = null;\n        }\n      };\n      function insidePolygon(p) {\n        var wn = 0, n = polygon.length, y = p[1];\n        for (var i = 0; i < n; ++i) {\n          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {\n            b = v[j];\n            if (a[1] <= y) {\n              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;\n            } else {\n              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;\n            }\n            a = b;\n          }\n        }\n        return wn !== 0;\n      }\n      function interpolate(from, to, direction, listener) {\n        var a = 0, a1 = 0;\n        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n          do {\n            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n          } while ((a = (a + direction + 4) % 4) !== a1);\n        } else {\n          listener.point(to[0], to[1]);\n        }\n      }\n      function pointVisible(x, y) {\n        return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n      }\n      function point(x, y) {\n        if (pointVisible(x, y)) listener.point(x, y);\n      }\n      var x__, y__, v__, x_, y_, v_, first, clean;\n      function lineStart() {\n        clip.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferListener.rejoin();\n          segments.push(bufferListener.buffer());\n        }\n        clip.point = point;\n        if (v_) listener.lineEnd();\n      }\n      function linePoint(x, y) {\n        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n        var v = pointVisible(x, y);\n        if (polygon) ring.push([ x, y ]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            listener.lineStart();\n            listener.point(x, y);\n          }\n        } else {\n          if (v && v_) listener.point(x, y); else {\n            var l = {\n              a: {\n                x: x_,\n                y: y_\n              },\n              b: {\n                x: x,\n                y: y\n              }\n            };\n            if (clipLine(l)) {\n              if (!v_) {\n                listener.lineStart();\n                listener.point(l.a.x, l.a.y);\n              }\n              listener.point(l.b.x, l.b.y);\n              if (!v) listener.lineEnd();\n              clean = false;\n            } else if (v) {\n              listener.lineStart();\n              listener.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n      return clip;\n    };\n    function corner(p, direction) {\n      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n    }\n    function compare(a, b) {\n      return comparePoints(a.x, b.x);\n    }\n    function comparePoints(a, b) {\n      var ca = corner(a, 1), cb = corner(b, 1);\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }\n  }\n  function d3_geo_conic(projectAt) {\n    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);\n    p.parallels = function(_) {\n      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];\n      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n    };\n    return p;\n  }\n  function d3_geo_conicEqualArea(φ0, φ1) {\n    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;\n    function forward(λ, φ) {\n      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = ρ0 - y;\n      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEqualArea = function() {\n    return d3_geo_conic(d3_geo_conicEqualArea);\n  }).raw = d3_geo_conicEqualArea;\n  d3.geo.albers = function() {\n    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);\n  };\n  d3.geo.albersUsa = function() {\n    var lower48 = d3.geo.albers();\n    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);\n    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);\n    var point, pointStream = {\n      point: function(x, y) {\n        point = [ x, y ];\n      }\n    }, lower48Point, alaskaPoint, hawaiiPoint;\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      point = null;\n      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);\n      return point;\n    }\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n    };\n    albersUsa.stream = function(stream) {\n      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n      return {\n        point: function(x, y) {\n          lower48Stream.point(x, y);\n          alaskaStream.point(x, y);\n          hawaiiStream.point(x, y);\n        },\n        sphere: function() {\n          lower48Stream.sphere();\n          alaskaStream.sphere();\n          hawaiiStream.sphere();\n        },\n        lineStart: function() {\n          lower48Stream.lineStart();\n          alaskaStream.lineStart();\n          hawaiiStream.lineStart();\n        },\n        lineEnd: function() {\n          lower48Stream.lineEnd();\n          alaskaStream.lineEnd();\n          hawaiiStream.lineEnd();\n        },\n        polygonStart: function() {\n          lower48Stream.polygonStart();\n          alaskaStream.polygonStart();\n          hawaiiStream.polygonStart();\n        },\n        polygonEnd: function() {\n          lower48Stream.polygonEnd();\n          alaskaStream.polygonEnd();\n          hawaiiStream.polygonEnd();\n        }\n      };\n    };\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_);\n      alaska.precision(_);\n      hawaii.precision(_);\n      return albersUsa;\n    };\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_);\n      alaska.scale(_ * .35);\n      hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      return albersUsa;\n    };\n    return albersUsa.scale(1070);\n  };\n  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_pathAreaPolygon = 0;\n      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n    }\n  };\n  function d3_geo_pathAreaRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathArea.point = function(x, y) {\n      d3_geo_pathArea.point = nextPoint;\n      x00 = x0 = x, y00 = y0 = y;\n    };\n    function nextPoint(x, y) {\n      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n      x0 = x, y0 = y;\n    }\n    d3_geo_pathArea.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n  var d3_geo_pathBounds = {\n    point: d3_geo_pathBoundsPoint,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_pathBoundsPoint(x, y) {\n    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n  }\n  function d3_geo_pathBuffer() {\n    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = d3_geo_pathBufferCircle(_);\n        return stream;\n      },\n      result: function() {\n        if (buffer.length) {\n          var result = buffer.join(\"\");\n          buffer = [];\n          return result;\n        }\n      }\n    };\n    function point(x, y) {\n      buffer.push(\"M\", x, \",\", y, pointCircle);\n    }\n    function pointLineStart(x, y) {\n      buffer.push(\"M\", x, \",\", y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      buffer.push(\"L\", x, \",\", y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      buffer.push(\"Z\");\n    }\n    return stream;\n  }\n  function d3_geo_pathBufferCircle(radius) {\n    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n  }\n  var d3_geo_pathCentroid = {\n    point: d3_geo_pathCentroidPoint,\n    lineStart: d3_geo_pathCentroidLineStart,\n    lineEnd: d3_geo_pathCentroidLineEnd,\n    polygonStart: function() {\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n    }\n  };\n  function d3_geo_pathCentroidPoint(x, y) {\n    d3_geo_centroidX0 += x;\n    d3_geo_centroidY0 += y;\n    ++d3_geo_centroidZ0;\n  }\n  function d3_geo_pathCentroidLineStart() {\n    var x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n  }\n  function d3_geo_pathCentroidLineEnd() {\n    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n  }\n  function d3_geo_pathCentroidRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      z = y0 * x - x0 * y;\n      d3_geo_centroidX2 += z * (x0 + x);\n      d3_geo_centroidY2 += z * (y0 + y);\n      d3_geo_centroidZ2 += z * 3;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n    d3_geo_pathCentroid.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  function d3_geo_pathContext(context) {\n    var pointRadius = 4.5;\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n      result: d3_noop\n    };\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, τ);\n    }\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      context.closePath();\n    }\n    return stream;\n  }\n  function d3_geo_resample(project) {\n    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;\n    function resample(stream) {\n      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n    }\n    function resampleNone(stream) {\n      return d3_geo_transformPoint(stream, function(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      });\n    }\n    function resampleRecursive(stream) {\n      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n      var resample = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          stream.polygonStart();\n          resample.lineStart = ringStart;\n        },\n        polygonEnd: function() {\n          stream.polygonEnd();\n          resample.lineStart = lineStart;\n        }\n      };\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n      function lineStart() {\n        x0 = NaN;\n        resample.point = linePoint;\n        stream.lineStart();\n      }\n      function linePoint(λ, φ) {\n        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n      function lineEnd() {\n        resample.point = point;\n        stream.lineEnd();\n      }\n      function ringStart() {\n        lineStart();\n        resample.point = ringPoint;\n        resample.lineEnd = ringEnd;\n      }\n      function ringPoint(λ, φ) {\n        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resample.point = linePoint;\n      }\n      function ringEnd() {\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n        resample.lineEnd = lineEnd;\n        lineEnd();\n      }\n      return resample;\n    }\n    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n      if (d2 > 4 * δ2 && depth--) {\n        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    resample.precision = function(_) {\n      if (!arguments.length) return Math.sqrt(δ2);\n      maxDepth = (δ2 = _ * _) > 0 && 16;\n      return resample;\n    };\n    return resample;\n  }\n  d3.geo.path = function() {\n    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n        d3.geo.stream(object, cacheStream);\n      }\n      return contextStream.result();\n    }\n    path.area = function(object) {\n      d3_geo_pathAreaSum = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n      return d3_geo_pathAreaSum;\n    };\n    path.centroid = function(object) {\n      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n    };\n    path.bounds = function(object) {\n      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];\n    };\n    path.projection = function(_) {\n      if (!arguments.length) return projection;\n      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n      return reset();\n    };\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return reset();\n    };\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n    function reset() {\n      cacheStream = null;\n      return path;\n    }\n    return path.projection(d3.geo.albersUsa()).context(null);\n  };\n  function d3_geo_pathProjectStream(project) {\n    var resample = d3_geo_resample(function(x, y) {\n      return project([ x * d3_degrees, y * d3_degrees ]);\n    });\n    return function(stream) {\n      return d3_geo_projectionRadians(resample(stream));\n    };\n  }\n  d3.geo.transform = function(methods) {\n    return {\n      stream: function(stream) {\n        var transform = new d3_geo_transform(stream);\n        for (var k in methods) transform[k] = methods[k];\n        return transform;\n      }\n    };\n  };\n  function d3_geo_transform(stream) {\n    this.stream = stream;\n  }\n  d3_geo_transform.prototype = {\n    point: function(x, y) {\n      this.stream.point(x, y);\n    },\n    sphere: function() {\n      this.stream.sphere();\n    },\n    lineStart: function() {\n      this.stream.lineStart();\n    },\n    lineEnd: function() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function() {\n      this.stream.polygonEnd();\n    }\n  };\n  function d3_geo_transformPoint(stream, point) {\n    return {\n      point: point,\n      sphere: function() {\n        stream.sphere();\n      },\n      lineStart: function() {\n        stream.lineStart();\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n      },\n      polygonStart: function() {\n        stream.polygonStart();\n      },\n      polygonEnd: function() {\n        stream.polygonEnd();\n      }\n    };\n  }\n  d3.geo.projection = d3_geo_projection;\n  d3.geo.projectionMutator = d3_geo_projectionMutator;\n  function d3_geo_projection(project) {\n    return d3_geo_projectionMutator(function() {\n      return project;\n    })();\n  }\n  function d3_geo_projectionMutator(projectAt) {\n    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {\n      x = project(x, y);\n      return [ x[0] * k + δx, δy - x[1] * k ];\n    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n    function projection(point) {\n      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n      return [ point[0] * k + δx, δy - point[1] * k ];\n    }\n    function invert(point) {\n      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];\n    }\n    projection.stream = function(output) {\n      if (stream) stream.valid = false;\n      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n      stream.valid = true;\n      return stream;\n    };\n    projection.clipAngle = function(_) {\n      if (!arguments.length) return clipAngle;\n      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n      return invalidate();\n    };\n    projection.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent;\n      clipExtent = _;\n      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n      return invalidate();\n    };\n    projection.scale = function(_) {\n      if (!arguments.length) return k;\n      k = +_;\n      return reset();\n    };\n    projection.translate = function(_) {\n      if (!arguments.length) return [ x, y ];\n      x = +_[0];\n      y = +_[1];\n      return reset();\n    };\n    projection.center = function(_) {\n      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];\n      λ = _[0] % 360 * d3_radians;\n      φ = _[1] % 360 * d3_radians;\n      return reset();\n    };\n    projection.rotate = function(_) {\n      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];\n      δλ = _[0] % 360 * d3_radians;\n      δφ = _[1] % 360 * d3_radians;\n      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;\n      return reset();\n    };\n    d3.rebind(projection, projectResample, \"precision\");\n    function reset() {\n      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n      var center = project(λ, φ);\n      δx = x - center[0] * k;\n      δy = y + center[1] * k;\n      return invalidate();\n    }\n    function invalidate() {\n      if (stream) stream.valid = false, stream = null;\n      return projection;\n    }\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return reset();\n    };\n  }\n  function d3_geo_projectionRadians(stream) {\n    return d3_geo_transformPoint(stream, function(x, y) {\n      stream.point(x * d3_radians, y * d3_radians);\n    });\n  }\n  function d3_geo_equirectangular(λ, φ) {\n    return [ λ, φ ];\n  }\n  (d3.geo.equirectangular = function() {\n    return d3_geo_projection(d3_geo_equirectangular);\n  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n  d3.geo.rotation = function(rotate) {\n    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    }\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    };\n    return forward;\n  };\n  function d3_geo_identityRotation(λ, φ) {\n    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n  }\n  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n  function d3_geo_rotation(δλ, δφ, δγ) {\n    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n  }\n  function d3_geo_forwardRotationλ(δλ) {\n    return function(λ, φ) {\n      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n    };\n  }\n  function d3_geo_rotationλ(δλ) {\n    var rotation = d3_geo_forwardRotationλ(δλ);\n    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n    return rotation;\n  }\n  function d3_geo_rotationφγ(δφ, δγ) {\n    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);\n    function rotation(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];\n    }\n    rotation.invert = function(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];\n    };\n    return rotation;\n  }\n  d3.geo.circle = function() {\n    var origin = [ 0, 0 ], angle, precision = 6, interpolate;\n    function circle() {\n      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n      interpolate(null, null, 1, {\n        point: function(x, y) {\n          ring.push(x = rotate(x, y));\n          x[0] *= d3_degrees, x[1] *= d3_degrees;\n        }\n      });\n      return {\n        type: \"Polygon\",\n        coordinates: [ ring ]\n      };\n    }\n    circle.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return circle;\n    };\n    circle.angle = function(x) {\n      if (!arguments.length) return angle;\n      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n      return circle;\n    };\n    circle.precision = function(_) {\n      if (!arguments.length) return precision;\n      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n      return circle;\n    };\n    return circle.angle(90);\n  };\n  function d3_geo_circleInterpolate(radius, precision) {\n    var cr = Math.cos(radius), sr = Math.sin(radius);\n    return function(from, to, direction, listener) {\n      var step = direction * precision;\n      if (from != null) {\n        from = d3_geo_circleAngle(cr, from);\n        to = d3_geo_circleAngle(cr, to);\n        if (direction > 0 ? from < to : from > to) from += direction * τ;\n      } else {\n        from = radius + direction * τ;\n        to = radius - .5 * step;\n      }\n      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {\n        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);\n      }\n    };\n  }\n  function d3_geo_circleAngle(cr, point) {\n    var a = d3_geo_cartesian(point);\n    a[0] -= cr;\n    d3_geo_cartesianNormalize(a);\n    var angle = d3_acos(-a[1]);\n    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n  }\n  d3.geo.distance = function(a, b) {\n    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n  };\n  d3.geo.graticule = function() {\n    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;\n    function graticule() {\n      return {\n        type: \"MultiLineString\",\n        coordinates: lines()\n      };\n    }\n    function lines() {\n      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n        return abs(x % DX) > ε;\n      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {\n        return abs(y % DY) > ε;\n      }).map(y));\n    }\n    graticule.lines = function() {\n      return lines().map(function(coordinates) {\n        return {\n          type: \"LineString\",\n          coordinates: coordinates\n        };\n      });\n    };\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]\n      };\n    };\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.minorExtent();\n      return graticule.majorExtent(_).minorExtent(_);\n    };\n    graticule.majorExtent = function(_) {\n      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.minorExtent = function(_) {\n      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.minorStep();\n      return graticule.majorStep(_).minorStep(_);\n    };\n    graticule.majorStep = function(_) {\n      if (!arguments.length) return [ DX, DY ];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n    graticule.minorStep = function(_) {\n      if (!arguments.length) return [ dx, dy ];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = d3_geo_graticuleX(y0, y1, 90);\n      y = d3_geo_graticuleY(x0, x1, precision);\n      X = d3_geo_graticuleX(Y0, Y1, 90);\n      Y = d3_geo_graticuleY(X0, X1, precision);\n      return graticule;\n    };\n    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n  };\n  function d3_geo_graticuleX(y0, y1, dy) {\n    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n    return function(x) {\n      return y.map(function(y) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_geo_graticuleY(x0, x1, dx) {\n    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n    return function(y) {\n      return x.map(function(x) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_source(d) {\n    return d.source;\n  }\n  function d3_target(d) {\n    return d.target;\n  }\n  d3.geo.greatArc = function() {\n    var source = d3_source, source_, target = d3_target, target_;\n    function greatArc() {\n      return {\n        type: \"LineString\",\n        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]\n      };\n    }\n    greatArc.distance = function() {\n      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n    };\n    greatArc.source = function(_) {\n      if (!arguments.length) return source;\n      source = _, source_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.target = function(_) {\n      if (!arguments.length) return target;\n      target = _, target_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.precision = function() {\n      return arguments.length ? greatArc : 0;\n    };\n    return greatArc;\n  };\n  d3.geo.interpolate = function(source, target) {\n    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n  };\n  function d3_geo_interpolate(x0, y0, x1, y1) {\n    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n    var interpolate = d ? function(t) {\n      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];\n    } : function() {\n      return [ x0 * d3_degrees, y0 * d3_degrees ];\n    };\n    interpolate.distance = d;\n    return interpolate;\n  }\n  d3.geo.length = function(object) {\n    d3_geo_lengthSum = 0;\n    d3.geo.stream(object, d3_geo_length);\n    return d3_geo_lengthSum;\n  };\n  var d3_geo_lengthSum;\n  var d3_geo_length = {\n    sphere: d3_noop,\n    point: d3_noop,\n    lineStart: d3_geo_lengthLineStart,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_lengthLineStart() {\n    var λ0, sinφ0, cosφ0;\n    d3_geo_length.point = function(λ, φ) {\n      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n      d3_geo_length.point = nextPoint;\n    };\n    d3_geo_length.lineEnd = function() {\n      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n    };\n    function nextPoint(λ, φ) {\n      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n    }\n  }\n  function d3_geo_azimuthal(scale, angle) {\n    function azimuthal(λ, φ) {\n      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);\n      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];\n    }\n    azimuthal.invert = function(x, y) {\n      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);\n      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];\n    };\n    return azimuthal;\n  }\n  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {\n    return Math.sqrt(2 / (1 + cosλcosφ));\n  }, function(ρ) {\n    return 2 * Math.asin(ρ / 2);\n  });\n  (d3.geo.azimuthalEqualArea = function() {\n    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n  }).raw = d3_geo_azimuthalEqualArea;\n  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {\n    var c = Math.acos(cosλcosφ);\n    return c && c / Math.sin(c);\n  }, d3_identity);\n  (d3.geo.azimuthalEquidistant = function() {\n    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n  }).raw = d3_geo_azimuthalEquidistant;\n  function d3_geo_conicConformal(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), t = function(φ) {\n      return Math.tan(π / 4 + φ / 2);\n    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n    if (!n) return d3_geo_mercator;\n    function forward(λ, φ) {\n      if (F > 0) {\n        if (φ < -halfπ + ε) φ = -halfπ + ε;\n      } else {\n        if (φ > halfπ - ε) φ = halfπ - ε;\n      }\n      var ρ = F / Math.pow(t(φ), n);\n      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];\n    };\n    return forward;\n  }\n  (d3.geo.conicConformal = function() {\n    return d3_geo_conic(d3_geo_conicConformal);\n  }).raw = d3_geo_conicConformal;\n  function d3_geo_conicEquidistant(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;\n    if (abs(n) < ε) return d3_geo_equirectangular;\n    function forward(λ, φ) {\n      var ρ = G - φ;\n      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = G - y;\n      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEquidistant = function() {\n    return d3_geo_conic(d3_geo_conicEquidistant);\n  }).raw = d3_geo_conicEquidistant;\n  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / cosλcosφ;\n  }, Math.atan);\n  (d3.geo.gnomonic = function() {\n    return d3_geo_projection(d3_geo_gnomonic);\n  }).raw = d3_geo_gnomonic;\n  function d3_geo_mercator(λ, φ) {\n    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];\n  }\n  d3_geo_mercator.invert = function(x, y) {\n    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];\n  };\n  function d3_geo_mercatorProjection(project) {\n    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;\n    m.scale = function() {\n      var v = scale.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.translate = function() {\n      var v = translate.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.clipExtent = function(_) {\n      var v = clipExtent.apply(m, arguments);\n      if (v === m) {\n        if (clipAuto = _ == null) {\n          var k = π * scale(), t = translate();\n          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);\n        }\n      } else if (clipAuto) {\n        v = null;\n      }\n      return v;\n    };\n    return m.clipExtent(null);\n  }\n  (d3.geo.mercator = function() {\n    return d3_geo_mercatorProjection(d3_geo_mercator);\n  }).raw = d3_geo_mercator;\n  var d3_geo_orthographic = d3_geo_azimuthal(function() {\n    return 1;\n  }, Math.asin);\n  (d3.geo.orthographic = function() {\n    return d3_geo_projection(d3_geo_orthographic);\n  }).raw = d3_geo_orthographic;\n  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / (1 + cosλcosφ);\n  }, function(ρ) {\n    return 2 * Math.atan(ρ);\n  });\n  (d3.geo.stereographic = function() {\n    return d3_geo_projection(d3_geo_stereographic);\n  }).raw = d3_geo_stereographic;\n  function d3_geo_transverseMercator(λ, φ) {\n    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];\n  }\n  d3_geo_transverseMercator.invert = function(x, y) {\n    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];\n  };\n  (d3.geo.transverseMercator = function() {\n    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n    projection.center = function(_) {\n      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);\n    };\n    projection.rotate = function(_) {\n      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), \n      [ _[0], _[1], _[2] - 90 ]);\n    };\n    return rotate([ 0, 0, 90 ]);\n  }).raw = d3_geo_transverseMercator;\n  d3.geom = {};\n  function d3_geom_pointX(d) {\n    return d[0];\n  }\n  function d3_geom_pointY(d) {\n    return d[1];\n  }\n  d3.geom.hull = function(vertices) {\n    var x = d3_geom_pointX, y = d3_geom_pointY;\n    if (arguments.length) return hull(vertices);\n    function hull(data) {\n      if (data.length < 3) return [];\n      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];\n      for (i = 0; i < n; i++) {\n        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);\n      }\n      points.sort(d3_geom_hullOrder);\n      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);\n      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);\n      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);\n      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);\n      return polygon;\n    }\n    hull.x = function(_) {\n      return arguments.length ? (x = _, hull) : x;\n    };\n    hull.y = function(_) {\n      return arguments.length ? (y = _, hull) : y;\n    };\n    return hull;\n  };\n  function d3_geom_hullUpper(points) {\n    var n = points.length, hull = [ 0, 1 ], hs = 2;\n    for (var i = 2; i < n; i++) {\n      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;\n      hull[hs++] = i;\n    }\n    return hull.slice(0, hs);\n  }\n  function d3_geom_hullOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n  d3.geom.polygon = function(coordinates) {\n    d3_subclass(coordinates, d3_geom_polygonPrototype);\n    return coordinates;\n  };\n  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n  d3_geom_polygonPrototype.area = function() {\n    var i = -1, n = this.length, a, b = this[n - 1], area = 0;\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n    return area * .5;\n  };\n  d3_geom_polygonPrototype.centroid = function(k) {\n    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;\n    if (!arguments.length) k = -1 / (6 * this.area());\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n    return [ x * k, y * k ];\n  };\n  d3_geom_polygonPrototype.clip = function(subject) {\n    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n    while (++i < n) {\n      input = subject.slice();\n      subject.length = 0;\n      b = this[i];\n      c = input[(m = input.length - closed) - 1];\n      j = -1;\n      while (++j < m) {\n        d = input[j];\n        if (d3_geom_polygonInside(d, a, b)) {\n          if (!d3_geom_polygonInside(c, a, b)) {\n            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n          }\n          subject.push(d);\n        } else if (d3_geom_polygonInside(c, a, b)) {\n          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n        }\n        c = d;\n      }\n      if (closed) subject.push(subject[0]);\n      a = b;\n    }\n    return subject;\n  };\n  function d3_geom_polygonInside(p, a, b) {\n    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);\n  }\n  function d3_geom_polygonIntersect(c, d, a, b) {\n    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n    return [ x1 + ua * x21, y1 + ua * y21 ];\n  }\n  function d3_geom_polygonClosed(coordinates) {\n    var a = coordinates[0], b = coordinates[coordinates.length - 1];\n    return !(a[0] - b[0] || a[1] - b[1]);\n  }\n  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n  function d3_geom_voronoiBeach() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.edge = this.site = this.circle = null;\n  }\n  function d3_geom_voronoiCreateBeach(site) {\n    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n    beach.site = site;\n    return beach;\n  }\n  function d3_geom_voronoiDetachBeach(beach) {\n    d3_geom_voronoiDetachCircle(beach);\n    d3_geom_voronoiBeaches.remove(beach);\n    d3_geom_voronoiBeachPool.push(beach);\n    d3_geom_voronoiRedBlackNode(beach);\n  }\n  function d3_geom_voronoiRemoveBeach(beach) {\n    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {\n      x: x,\n      y: y\n    }, previous = beach.P, next = beach.N, disappearing = [ beach ];\n    d3_geom_voronoiDetachBeach(beach);\n    var lArc = previous;\n    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      d3_geom_voronoiDetachBeach(lArc);\n      lArc = previous;\n    }\n    disappearing.unshift(lArc);\n    d3_geom_voronoiDetachCircle(lArc);\n    var rArc = next;\n    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      d3_geom_voronoiDetachBeach(rArc);\n      rArc = next;\n    }\n    disappearing.push(rArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var nArcs = disappearing.length, iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiAddBeach(site) {\n    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;\n    while (node) {\n      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n      if (dxl > ε) node = node.L; else {\n        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n        if (dxr > ε) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -ε) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -ε) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n    var newArc = d3_geom_voronoiCreateBeach(site);\n    d3_geom_voronoiBeaches.insert(lArc, newArc);\n    if (!lArc && !rArc) return;\n    if (lArc === rArc) {\n      d3_geom_voronoiDetachCircle(lArc);\n      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n      d3_geom_voronoiBeaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      d3_geom_voronoiAttachCircle(lArc);\n      d3_geom_voronoiAttachCircle(rArc);\n      return;\n    }\n    if (!rArc) {\n      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      return;\n    }\n    d3_geom_voronoiDetachCircle(lArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n      x: (cy * hb - by * hc) / d + ax,\n      y: (bx * hc - cx * hb) / d + ay\n    };\n    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;\n    if (!pby2) return rfocx;\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n    site = lArc.site;\n    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;\n    if (!plby2) return lfocx;\n    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n    return (rfocx + lfocx) / 2;\n  }\n  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site.y === directrix ? site.x : Infinity;\n  }\n  function d3_geom_voronoiCell(site) {\n    this.site = site;\n    this.edges = [];\n  }\n  d3_geom_voronoiCell.prototype.prepare = function() {\n    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;\n    while (iHalfEdge--) {\n      edge = halfEdges[iHalfEdge].edge;\n      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n    }\n    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n    return halfEdges.length;\n  };\n  function d3_geom_voronoiCloseCells(extent) {\n    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n    while (iCell--) {\n      cell = cells[iCell];\n      if (!cell || !cell.prepare()) continue;\n      halfEdges = cell.edges;\n      nHalfEdges = halfEdges.length;\n      iHalfEdge = 0;\n      while (iHalfEdge < nHalfEdges) {\n        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {\n          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n            x: x0,\n            y: abs(x2 - x0) < ε ? y2 : y1\n          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {\n            x: abs(y2 - y1) < ε ? x2 : x1,\n            y: y1\n          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {\n            x: x1,\n            y: abs(x2 - x1) < ε ? y2 : y0\n          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {\n            x: abs(y2 - y0) < ε ? x2 : x0,\n            y: y0\n          } : null), cell.site, null));\n          ++nHalfEdges;\n        }\n      }\n    }\n  }\n  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n    return b.angle - a.angle;\n  }\n  function d3_geom_voronoiCircle() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.x = this.y = this.arc = this.site = this.cy = null;\n  }\n  function d3_geom_voronoiAttachCircle(arc) {\n    var lArc = arc.P, rArc = arc.N;\n    if (!lArc || !rArc) return;\n    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\n    if (lSite === rSite) return;\n    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -ε2) return;\n    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = cy + Math.sqrt(x * x + y * y);\n    circle.cy = cy;\n    arc.circle = circle;\n    var before = null, node = d3_geom_voronoiCircles._;\n    while (node) {\n      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n        if (node.L) node = node.L; else {\n          before = node.P;\n          break;\n        }\n      } else {\n        if (node.R) node = node.R; else {\n          before = node;\n          break;\n        }\n      }\n    }\n    d3_geom_voronoiCircles.insert(before, circle);\n    if (!before) d3_geom_voronoiFirstCircle = circle;\n  }\n  function d3_geom_voronoiDetachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n      d3_geom_voronoiCircles.remove(circle);\n      d3_geom_voronoiCirclePool.push(circle);\n      d3_geom_voronoiRedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n  function d3_geom_voronoiClipEdges(extent) {\n    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n    while (i--) {\n      e = edges[i];\n      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {\n        e.a = e.b = null;\n        edges.splice(i, 1);\n      }\n    }\n  }\n  function d3_geom_voronoiConnectEdge(edge, extent) {\n    var vb = edge.b;\n    if (vb) return true;\n    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!va) va = {\n          x: fx,\n          y: y0\n        }; else if (va.y >= y1) return;\n        vb = {\n          x: fx,\n          y: y1\n        };\n      } else {\n        if (!va) va = {\n          x: fx,\n          y: y1\n        }; else if (va.y < y0) return;\n        vb = {\n          x: fx,\n          y: y0\n        };\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!va) va = {\n            x: (y0 - fb) / fm,\n            y: y0\n          }; else if (va.y >= y1) return;\n          vb = {\n            x: (y1 - fb) / fm,\n            y: y1\n          };\n        } else {\n          if (!va) va = {\n            x: (y1 - fb) / fm,\n            y: y1\n          }; else if (va.y < y0) return;\n          vb = {\n            x: (y0 - fb) / fm,\n            y: y0\n          };\n        }\n      } else {\n        if (ly < ry) {\n          if (!va) va = {\n            x: x0,\n            y: fm * x0 + fb\n          }; else if (va.x >= x1) return;\n          vb = {\n            x: x1,\n            y: fm * x1 + fb\n          };\n        } else {\n          if (!va) va = {\n            x: x1,\n            y: fm * x1 + fb\n          }; else if (va.x < x0) return;\n          vb = {\n            x: x0,\n            y: fm * x0 + fb\n          };\n        }\n      }\n    }\n    edge.a = va;\n    edge.b = vb;\n    return true;\n  }\n  function d3_geom_voronoiEdge(lSite, rSite) {\n    this.l = lSite;\n    this.r = rSite;\n    this.a = this.b = null;\n  }\n  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n    d3_geom_voronoiEdges.push(edge);\n    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n    return edge;\n  }\n  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, null);\n    edge.a = va;\n    edge.b = vb;\n    d3_geom_voronoiEdges.push(edge);\n    return edge;\n  }\n  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n    if (!edge.a && !edge.b) {\n      edge.a = vertex;\n      edge.l = lSite;\n      edge.r = rSite;\n    } else if (edge.l === rSite) {\n      edge.b = vertex;\n    } else {\n      edge.a = vertex;\n    }\n  }\n  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n    var va = edge.a, vb = edge.b;\n    this.edge = edge;\n    this.site = lSite;\n    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n  }\n  d3_geom_voronoiHalfEdge.prototype = {\n    start: function() {\n      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n    },\n    end: function() {\n      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n    }\n  };\n  function d3_geom_voronoiRedBlackTree() {\n    this._ = null;\n  }\n  function d3_geom_voronoiRedBlackNode(node) {\n    node.U = node.C = node.L = node.R = node.P = node.N = null;\n  }\n  d3_geom_voronoiRedBlackTree.prototype = {\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = d3_geom_voronoiRedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              d3_geom_voronoiRedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n      var parent = node.U, sibling, left = node.L, right = node.R, next, red;\n      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);\n      if (parent) {\n        if (parent.L === node) parent.L = next; else parent.R = next;\n      } else {\n        this._ = next;\n      }\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) {\n        node.C = false;\n        return;\n      }\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n      if (node) node.C = false;\n    }\n  };\n  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n    var p = node, q = node.R, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n    var p = node, q = node.L, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n  function d3_geom_voronoiRedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n  function d3_geom_voronoi(sites, bbox) {\n    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;\n    d3_geom_voronoiEdges = [];\n    d3_geom_voronoiCells = new Array(sites.length);\n    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n    while (true) {\n      circle = d3_geom_voronoiFirstCircle;\n      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {\n        if (site.x !== x0 || site.y !== y0) {\n          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n          d3_geom_voronoiAddBeach(site);\n          x0 = site.x, y0 = site.y;\n        }\n        site = sites.pop();\n      } else if (circle) {\n        d3_geom_voronoiRemoveBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n    var diagram = {\n      cells: d3_geom_voronoiCells,\n      edges: d3_geom_voronoiEdges\n    };\n    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n    return diagram;\n  }\n  function d3_geom_voronoiVertexOrder(a, b) {\n    return b.y - a.y || b.x - a.x;\n  }\n  d3.geom.voronoi = function(points) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;\n    if (points) return voronoi(points);\n    function voronoi(data) {\n      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {\n        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {\n          var s = e.start();\n          return [ s.x, s.y ];\n        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n        polygon.point = data[i];\n      });\n      return polygons;\n    }\n    function sites(data) {\n      return data.map(function(d, i) {\n        return {\n          x: Math.round(fx(d, i) / ε) * ε,\n          y: Math.round(fy(d, i) / ε) * ε,\n          i: i\n        };\n      });\n    }\n    voronoi.links = function(data) {\n      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {\n        return edge.l && edge.r;\n      }).map(function(edge) {\n        return {\n          source: data[edge.l.i],\n          target: data[edge.r.i]\n        };\n      });\n    };\n    voronoi.triangles = function(data) {\n      var triangles = [];\n      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {\n        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n        while (++j < m) {\n          e0 = e1;\n          s0 = s1;\n          e1 = edges[j].edge;\n          s1 = e1.l === site ? e1.r : e1.l;\n          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {\n            triangles.push([ data[i], data[s0.i], data[s1.i] ]);\n          }\n        }\n      });\n      return triangles;\n    };\n    voronoi.x = function(_) {\n      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n    };\n    voronoi.y = function(_) {\n      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n    };\n    voronoi.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n      return voronoi;\n    };\n    voronoi.size = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];\n      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);\n    };\n    return voronoi;\n  };\n  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];\n  function d3_geom_voronoiTriangleArea(a, b, c) {\n    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n  }\n  d3.geom.delaunay = function(vertices) {\n    return d3.geom.voronoi().triangles(vertices);\n  };\n  d3.geom.quadtree = function(points, x1, y1, x2, y2) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, compat;\n    if (compat = arguments.length) {\n      x = d3_geom_quadtreeCompatX;\n      y = d3_geom_quadtreeCompatY;\n      if (compat === 3) {\n        y2 = y1;\n        x2 = x1;\n        y1 = x1 = 0;\n      }\n      return quadtree(points);\n    }\n    function quadtree(data) {\n      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;\n      if (x1 != null) {\n        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n      } else {\n        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n        xs = [], ys = [];\n        n = data.length;\n        if (compat) for (i = 0; i < n; ++i) {\n          d = data[i];\n          if (d.x < x1_) x1_ = d.x;\n          if (d.y < y1_) y1_ = d.y;\n          if (d.x > x2_) x2_ = d.x;\n          if (d.y > y2_) y2_ = d.y;\n          xs.push(d.x);\n          ys.push(d.y);\n        } else for (i = 0; i < n; ++i) {\n          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);\n          if (x_ < x1_) x1_ = x_;\n          if (y_ < y1_) y1_ = y_;\n          if (x_ > x2_) x2_ = x_;\n          if (y_ > y2_) y2_ = y_;\n          xs.push(x_);\n          ys.push(y_);\n        }\n      }\n      var dx = x2_ - x1_, dy = y2_ - y1_;\n      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;\n      function insert(n, d, x, y, x1, y1, x2, y2) {\n        if (isNaN(x) || isNaN(y)) return;\n        if (n.leaf) {\n          var nx = n.x, ny = n.y;\n          if (nx != null) {\n            if (abs(nx - x) + abs(ny - y) < .01) {\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            } else {\n              var nPoint = n.point;\n              n.x = n.y = n.point = null;\n              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            }\n          } else {\n            n.x = x, n.y = y, n.point = d;\n          }\n        } else {\n          insertChild(n, d, x, y, x1, y1, x2, y2);\n        }\n      }\n      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;\n        n.leaf = false;\n        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n        if (right) x1 = xm; else x2 = xm;\n        if (below) y1 = ym; else y2 = ym;\n        insert(n, d, x, y, x1, y1, x2, y2);\n      }\n      var root = d3_geom_quadtreeNode();\n      root.add = function(d) {\n        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n      };\n      root.visit = function(f) {\n        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n      };\n      root.find = function(point) {\n        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n      };\n      i = -1;\n      if (x1 == null) {\n        while (++i < n) {\n          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n        }\n        --i;\n      } else data.forEach(root.add);\n      xs = ys = data = d = null;\n      return root;\n    }\n    quadtree.x = function(_) {\n      return arguments.length ? (x = _, quadtree) : x;\n    };\n    quadtree.y = function(_) {\n      return arguments.length ? (y = _, quadtree) : y;\n    };\n    quadtree.extent = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], \n      y2 = +_[1][1];\n      return quadtree;\n    };\n    quadtree.size = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n      return quadtree;\n    };\n    return quadtree;\n  };\n  function d3_geom_quadtreeCompatX(d) {\n    return d.x;\n  }\n  function d3_geom_quadtreeCompatY(d) {\n    return d.y;\n  }\n  function d3_geom_quadtreeNode() {\n    return {\n      leaf: true,\n      nodes: [],\n      point: null,\n      x: null,\n      y: null\n    };\n  }\n  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n    if (!f(node, x1, y1, x2, y2)) {\n      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;\n      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n    }\n  }\n  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n    var minDistance2 = Infinity, closestPoint;\n    (function find(node, x1, y1, x2, y2) {\n      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\n      if (point = node.point) {\n        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;\n        if (distance2 < minDistance2) {\n          var distance = Math.sqrt(minDistance2 = distance2);\n          x0 = x - distance, y0 = y - distance;\n          x3 = x + distance, y3 = y + distance;\n          closestPoint = point;\n        }\n      }\n      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;\n      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {\n        if (node = children[i & 3]) switch (i & 3) {\n         case 0:\n          find(node, x1, y1, xm, ym);\n          break;\n\n         case 1:\n          find(node, xm, y1, x2, ym);\n          break;\n\n         case 2:\n          find(node, x1, ym, xm, y2);\n          break;\n\n         case 3:\n          find(node, xm, ym, x2, y2);\n          break;\n        }\n      }\n    })(root, x0, y0, x3, y3);\n    return closestPoint;\n  }\n  d3.interpolateRgb = d3_interpolateRgb;\n  function d3_interpolateRgb(a, b) {\n    a = d3.rgb(a);\n    b = d3.rgb(b);\n    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;\n    return function(t) {\n      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n    };\n  }\n  d3.interpolateObject = d3_interpolateObject;\n  function d3_interpolateObject(a, b) {\n    var i = {}, c = {}, k;\n    for (k in a) {\n      if (k in b) {\n        i[k] = d3_interpolate(a[k], b[k]);\n      } else {\n        c[k] = a[k];\n      }\n    }\n    for (k in b) {\n      if (!(k in a)) {\n        c[k] = b[k];\n      }\n    }\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n  d3.interpolateNumber = d3_interpolateNumber;\n  function d3_interpolateNumber(a, b) {\n    a = +a, b = +b;\n    return function(t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n  d3.interpolateString = d3_interpolateString;\n  function d3_interpolateString(a, b) {\n    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n    a = a + \"\", b = b + \"\";\n    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) {\n        if (s[i]) s[i] += bm; else s[++i] = bm;\n      } else {\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: d3_interpolateNumber(am, bm)\n        });\n      }\n      bi = d3_interpolate_numberB.lastIndex;\n    }\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; else s[++i] = bs;\n    }\n    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {\n      return b(t) + \"\";\n    }) : function() {\n      return b;\n    } : (b = q.length, function(t) {\n      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    });\n  }\n  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \"g\");\n  d3.interpolate = d3_interpolate;\n  function d3_interpolate(a, b) {\n    var i = d3.interpolators.length, f;\n    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;\n    return f;\n  }\n  d3.interpolators = [ function(a, b) {\n    var t = typeof b;\n    return (t === \"string\" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\\(|hsl\\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \"object\" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n  } ];\n  d3.interpolateArray = d3_interpolateArray;\n  function d3_interpolateArray(a, b) {\n    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;\n    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));\n    for (;i < na; ++i) c[i] = a[i];\n    for (;i < nb; ++i) c[i] = b[i];\n    return function(t) {\n      for (i = 0; i < n0; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n  var d3_ease_default = function() {\n    return d3_identity;\n  };\n  var d3_ease = d3.map({\n    linear: d3_ease_default,\n    poly: d3_ease_poly,\n    quad: function() {\n      return d3_ease_quad;\n    },\n    cubic: function() {\n      return d3_ease_cubic;\n    },\n    sin: function() {\n      return d3_ease_sin;\n    },\n    exp: function() {\n      return d3_ease_exp;\n    },\n    circle: function() {\n      return d3_ease_circle;\n    },\n    elastic: d3_ease_elastic,\n    back: d3_ease_back,\n    bounce: function() {\n      return d3_ease_bounce;\n    }\n  });\n  var d3_ease_mode = d3.map({\n    \"in\": d3_identity,\n    out: d3_ease_reverse,\n    \"in-out\": d3_ease_reflect,\n    \"out-in\": function(f) {\n      return d3_ease_reflect(d3_ease_reverse(f));\n    }\n  });\n  d3.ease = function(name) {\n    var i = name.indexOf(\"-\"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : \"in\";\n    t = d3_ease.get(t) || d3_ease_default;\n    m = d3_ease_mode.get(m) || d3_identity;\n    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n  };\n  function d3_ease_clamp(f) {\n    return function(t) {\n      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);\n    };\n  }\n  function d3_ease_reverse(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n  function d3_ease_reflect(f) {\n    return function(t) {\n      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n    };\n  }\n  function d3_ease_quad(t) {\n    return t * t;\n  }\n  function d3_ease_cubic(t) {\n    return t * t * t;\n  }\n  function d3_ease_cubicInOut(t) {\n    if (t <= 0) return 0;\n    if (t >= 1) return 1;\n    var t2 = t * t, t3 = t2 * t;\n    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n  }\n  function d3_ease_poly(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n  function d3_ease_sin(t) {\n    return 1 - Math.cos(t * halfπ);\n  }\n  function d3_ease_exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  function d3_ease_circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  function d3_ease_elastic(a, p) {\n    var s;\n    if (arguments.length < 2) p = .45;\n    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n    };\n  }\n  function d3_ease_back(s) {\n    if (!s) s = 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n  function d3_ease_bounce(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }\n  d3.interpolateHcl = d3_interpolateHcl;\n  function d3_interpolateHcl(a, b) {\n    a = d3.hcl(a);\n    b = d3.hcl(b);\n    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;\n    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateHsl = d3_interpolateHsl;\n  function d3_interpolateHsl(a, b) {\n    a = d3.hsl(a);\n    b = d3.hsl(b);\n    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;\n    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateLab = d3_interpolateLab;\n  function d3_interpolateLab(a, b) {\n    a = d3.lab(a);\n    b = d3.lab(b);\n    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;\n    return function(t) {\n      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";\n    };\n  }\n  d3.interpolateRound = d3_interpolateRound;\n  function d3_interpolateRound(a, b) {\n    b -= a;\n    return function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n  d3.transform = function(string) {\n    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");\n    return (d3.transform = function(string) {\n      if (string != null) {\n        g.setAttribute(\"transform\", string);\n        var t = g.transform.baseVal.consolidate();\n      }\n      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n    })(string);\n  };\n  function d3_transform(m) {\n    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n    if (r0[0] * r1[1] < r1[0] * r0[1]) {\n      r0[0] *= -1;\n      r0[1] *= -1;\n      kx *= -1;\n      kz *= -1;\n    }\n    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n    this.translate = [ m.e, m.f ];\n    this.scale = [ kx, ky ];\n    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n  }\n  d3_transform.prototype.toString = function() {\n    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n  };\n  function d3_transformDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n  function d3_transformNormalize(a) {\n    var k = Math.sqrt(d3_transformDot(a, a));\n    if (k) {\n      a[0] /= k;\n      a[1] /= k;\n    }\n    return k;\n  }\n  function d3_transformCombine(a, b, k) {\n    a[0] += k * b[0];\n    a[1] += k * b[1];\n    return a;\n  }\n  var d3_transformIdentity = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0\n  };\n  d3.interpolateTransform = d3_interpolateTransform;\n  function d3_interpolateTransformPop(s) {\n    return s.length ? s.pop() + \",\" : \"\";\n  }\n  function d3_interpolateTranslate(ta, tb, s, q) {\n    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {\n      var i = s.push(\"translate(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ta[0], tb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ta[1], tb[1])\n      });\n    } else if (tb[0] || tb[1]) {\n      s.push(\"translate(\" + tb + \")\");\n    }\n  }\n  function d3_interpolateRotate(ra, rb, s, q) {\n    if (ra !== rb) {\n      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"rotate(\", null, \")\") - 2,\n        x: d3_interpolateNumber(ra, rb)\n      });\n    } else if (rb) {\n      s.push(d3_interpolateTransformPop(s) + \"rotate(\" + rb + \")\");\n    }\n  }\n  function d3_interpolateSkew(wa, wb, s, q) {\n    if (wa !== wb) {\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"skewX(\", null, \")\") - 2,\n        x: d3_interpolateNumber(wa, wb)\n      });\n    } else if (wb) {\n      s.push(d3_interpolateTransformPop(s) + \"skewX(\" + wb + \")\");\n    }\n  }\n  function d3_interpolateScale(ka, kb, s, q) {\n    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {\n      var i = s.push(d3_interpolateTransformPop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ka[0], kb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ka[1], kb[1])\n      });\n    } else if (kb[0] !== 1 || kb[1] !== 1) {\n      s.push(d3_interpolateTransformPop(s) + \"scale(\" + kb + \")\");\n    }\n  }\n  function d3_interpolateTransform(a, b) {\n    var s = [], q = [];\n    a = d3.transform(a), b = d3.transform(b);\n    d3_interpolateTranslate(a.translate, b.translate, s, q);\n    d3_interpolateRotate(a.rotate, b.rotate, s, q);\n    d3_interpolateSkew(a.skew, b.skew, s, q);\n    d3_interpolateScale(a.scale, b.scale, s, q);\n    a = b = null;\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  }\n  function d3_uninterpolateNumber(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return (x - a) / b;\n    };\n  }\n  function d3_uninterpolateClamp(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return Math.max(0, Math.min(1, (x - a) / b));\n    };\n  }\n  d3.layout = {};\n  d3.layout.bundle = function() {\n    return function(links) {\n      var paths = [], i = -1, n = links.length;\n      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));\n      return paths;\n    };\n  };\n  function d3_layout_bundlePath(link) {\n    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n    while (start !== lca) {\n      start = start.parent;\n      points.push(start);\n    }\n    var k = points.length;\n    while (end !== lca) {\n      points.splice(k, 0, end);\n      end = end.parent;\n    }\n    return points;\n  }\n  function d3_layout_bundleAncestors(node) {\n    var ancestors = [], parent = node.parent;\n    while (parent != null) {\n      ancestors.push(node);\n      node = parent;\n      parent = parent.parent;\n    }\n    ancestors.push(node);\n    return ancestors;\n  }\n  function d3_layout_bundleLeastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n    while (aNode === bNode) {\n      sharedNode = aNode;\n      aNode = aNodes.pop();\n      bNode = bNodes.pop();\n    }\n    return sharedNode;\n  }\n  d3.layout.chord = function() {\n    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n    function relayout() {\n      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n      chords = [];\n      groups = [];\n      k = 0, i = -1;\n      while (++i < n) {\n        x = 0, j = -1;\n        while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(d3.range(n));\n        k += x;\n      }\n      if (sortGroups) {\n        groupIndex.sort(function(a, b) {\n          return sortGroups(groupSums[a], groupSums[b]);\n        });\n      }\n      if (sortSubgroups) {\n        subgroupIndex.forEach(function(d, i) {\n          d.sort(function(a, b) {\n            return sortSubgroups(matrix[i][a], matrix[i][b]);\n          });\n        });\n      }\n      k = (τ - padding * n) / k;\n      x = 0, i = -1;\n      while (++i < n) {\n        x0 = x, j = -1;\n        while (++j < n) {\n          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;\n          subgroups[di + \"-\" + dj] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: groupSums[di]\n        };\n        x += padding;\n      }\n      i = -1;\n      while (++i < n) {\n        j = i - 1;\n        while (++j < n) {\n          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value ? {\n              source: target,\n              target: source\n            } : {\n              source: source,\n              target: target\n            });\n          }\n        }\n      }\n      if (sortChords) resort();\n    }\n    function resort() {\n      chords.sort(function(a, b) {\n        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n      });\n    }\n    chord.matrix = function(x) {\n      if (!arguments.length) return matrix;\n      n = (matrix = x) && matrix.length;\n      chords = groups = null;\n      return chord;\n    };\n    chord.padding = function(x) {\n      if (!arguments.length) return padding;\n      padding = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortGroups = function(x) {\n      if (!arguments.length) return sortGroups;\n      sortGroups = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortSubgroups = function(x) {\n      if (!arguments.length) return sortSubgroups;\n      sortSubgroups = x;\n      chords = null;\n      return chord;\n    };\n    chord.sortChords = function(x) {\n      if (!arguments.length) return sortChords;\n      sortChords = x;\n      if (chords) resort();\n      return chord;\n    };\n    chord.chords = function() {\n      if (!chords) relayout();\n      return chords;\n    };\n    chord.groups = function() {\n      if (!groups) relayout();\n      return groups;\n    };\n    return chord;\n  };\n  d3.layout.force = function() {\n    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n    function repulse(node) {\n      return function(quad, x1, _, x2) {\n        if (quad.point !== node) {\n          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;\n          if (dw * dw / theta2 < dn) {\n            if (dn < chargeDistance2) {\n              var k = quad.charge / dn;\n              node.px -= dx * k;\n              node.py -= dy * k;\n            }\n            return true;\n          }\n          if (quad.point && dn && dn < chargeDistance2) {\n            var k = quad.pointCharge / dn;\n            node.px -= dx * k;\n            node.py -= dy * k;\n          }\n        }\n        return !quad.charge;\n      };\n    }\n    force.tick = function() {\n      if ((alpha *= .99) < .005) {\n        timer = null;\n        event.end({\n          type: \"end\",\n          alpha: alpha = 0\n        });\n        return true;\n      }\n      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        s = o.source;\n        t = o.target;\n        x = t.x - s.x;\n        y = t.y - s.y;\n        if (l = x * x + y * y) {\n          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n          x *= l;\n          y *= l;\n          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);\n          t.y -= y * k;\n          s.x += x * (k = 1 - k);\n          s.y += y * k;\n        }\n      }\n      if (k = alpha * gravity) {\n        x = size[0] / 2;\n        y = size[1] / 2;\n        i = -1;\n        if (k) while (++i < n) {\n          o = nodes[i];\n          o.x += (x - o.x) * k;\n          o.y += (y - o.y) * k;\n        }\n      }\n      if (charge) {\n        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n        i = -1;\n        while (++i < n) {\n          if (!(o = nodes[i]).fixed) {\n            q.visit(repulse(o));\n          }\n        }\n      }\n      i = -1;\n      while (++i < n) {\n        o = nodes[i];\n        if (o.fixed) {\n          o.x = o.px;\n          o.y = o.py;\n        } else {\n          o.x -= (o.px - (o.px = o.x)) * friction;\n          o.y -= (o.py - (o.py = o.y)) * friction;\n        }\n      }\n      event.tick({\n        type: \"tick\",\n        alpha: alpha\n      });\n    };\n    force.nodes = function(x) {\n      if (!arguments.length) return nodes;\n      nodes = x;\n      return force;\n    };\n    force.links = function(x) {\n      if (!arguments.length) return links;\n      links = x;\n      return force;\n    };\n    force.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return force;\n    };\n    force.linkDistance = function(x) {\n      if (!arguments.length) return linkDistance;\n      linkDistance = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.distance = force.linkDistance;\n    force.linkStrength = function(x) {\n      if (!arguments.length) return linkStrength;\n      linkStrength = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.friction = function(x) {\n      if (!arguments.length) return friction;\n      friction = +x;\n      return force;\n    };\n    force.charge = function(x) {\n      if (!arguments.length) return charge;\n      charge = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.chargeDistance = function(x) {\n      if (!arguments.length) return Math.sqrt(chargeDistance2);\n      chargeDistance2 = x * x;\n      return force;\n    };\n    force.gravity = function(x) {\n      if (!arguments.length) return gravity;\n      gravity = +x;\n      return force;\n    };\n    force.theta = function(x) {\n      if (!arguments.length) return Math.sqrt(theta2);\n      theta2 = x * x;\n      return force;\n    };\n    force.alpha = function(x) {\n      if (!arguments.length) return alpha;\n      x = +x;\n      if (alpha) {\n        if (x > 0) {\n          alpha = x;\n        } else {\n          timer.c = null, timer.t = NaN, timer = null;\n          event.end({\n            type: \"end\",\n            alpha: alpha = 0\n          });\n        }\n      } else if (x > 0) {\n        event.start({\n          type: \"start\",\n          alpha: alpha = x\n        });\n        timer = d3_timer(force.tick);\n      }\n      return force;\n    };\n    force.start = function() {\n      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;\n      for (i = 0; i < n; ++i) {\n        (o = nodes[i]).index = i;\n        o.weight = 0;\n      }\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        if (typeof o.source == \"number\") o.source = nodes[o.source];\n        if (typeof o.target == \"number\") o.target = nodes[o.target];\n        ++o.source.weight;\n        ++o.target.weight;\n      }\n      for (i = 0; i < n; ++i) {\n        o = nodes[i];\n        if (isNaN(o.x)) o.x = position(\"x\", w);\n        if (isNaN(o.y)) o.y = position(\"y\", h);\n        if (isNaN(o.px)) o.px = o.x;\n        if (isNaN(o.py)) o.py = o.y;\n      }\n      distances = [];\n      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n      strengths = [];\n      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n      charges = [];\n      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n      function position(dimension, size) {\n        if (!neighbors) {\n          neighbors = new Array(n);\n          for (j = 0; j < n; ++j) {\n            neighbors[j] = [];\n          }\n          for (j = 0; j < m; ++j) {\n            var o = links[j];\n            neighbors[o.source.index].push(o.target);\n            neighbors[o.target.index].push(o.source);\n          }\n        }\n        var candidates = neighbors[i], j = -1, l = candidates.length, x;\n        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;\n        return Math.random() * size;\n      }\n      return force.resume();\n    };\n    force.resume = function() {\n      return force.alpha(.1);\n    };\n    force.stop = function() {\n      return force.alpha(0);\n    };\n    force.drag = function() {\n      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n      if (!arguments.length) return drag;\n      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);\n    };\n    function dragmove(d) {\n      d.px = d3.event.x, d.py = d3.event.y;\n      force.resume();\n    }\n    return d3.rebind(force, event, \"on\");\n  };\n  function d3_layout_forceDragstart(d) {\n    d.fixed |= 2;\n  }\n  function d3_layout_forceDragend(d) {\n    d.fixed &= ~6;\n  }\n  function d3_layout_forceMouseover(d) {\n    d.fixed |= 4;\n    d.px = d.x, d.py = d.y;\n  }\n  function d3_layout_forceMouseout(d) {\n    d.fixed &= ~4;\n  }\n  function d3_layout_forceAccumulate(quad, alpha, charges) {\n    var cx = 0, cy = 0;\n    quad.charge = 0;\n    if (!quad.leaf) {\n      var nodes = quad.nodes, n = nodes.length, i = -1, c;\n      while (++i < n) {\n        c = nodes[i];\n        if (c == null) continue;\n        d3_layout_forceAccumulate(c, alpha, charges);\n        quad.charge += c.charge;\n        cx += c.charge * c.cx;\n        cy += c.charge * c.cy;\n      }\n    }\n    if (quad.point) {\n      if (!quad.leaf) {\n        quad.point.x += Math.random() - .5;\n        quad.point.y += Math.random() - .5;\n      }\n      var k = alpha * charges[quad.point.index];\n      quad.charge += quad.pointCharge = k;\n      cx += k * quad.point.x;\n      cy += k * quad.point.y;\n    }\n    quad.cx = cx / quad.charge;\n    quad.cy = cy / quad.charge;\n  }\n  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;\n  d3.layout.hierarchy = function() {\n    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;\n    function hierarchy(root) {\n      var stack = [ root ], nodes = [], node;\n      root.depth = 0;\n      while ((node = stack.pop()) != null) {\n        nodes.push(node);\n        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {\n          var n, childs, child;\n          while (--n >= 0) {\n            stack.push(child = childs[n]);\n            child.parent = node;\n            child.depth = node.depth + 1;\n          }\n          if (value) node.value = 0;\n          node.children = childs;\n        } else {\n          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          delete node.children;\n        }\n      }\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var childs, parent;\n        if (sort && (childs = node.children)) childs.sort(sort);\n        if (value && (parent = node.parent)) parent.value += node.value;\n      });\n      return nodes;\n    }\n    hierarchy.sort = function(x) {\n      if (!arguments.length) return sort;\n      sort = x;\n      return hierarchy;\n    };\n    hierarchy.children = function(x) {\n      if (!arguments.length) return children;\n      children = x;\n      return hierarchy;\n    };\n    hierarchy.value = function(x) {\n      if (!arguments.length) return value;\n      value = x;\n      return hierarchy;\n    };\n    hierarchy.revalue = function(root) {\n      if (value) {\n        d3_layout_hierarchyVisitBefore(root, function(node) {\n          if (node.children) node.value = 0;\n        });\n        d3_layout_hierarchyVisitAfter(root, function(node) {\n          var parent;\n          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          if (parent = node.parent) parent.value += node.value;\n        });\n      }\n      return root;\n    };\n    return hierarchy;\n  };\n  function d3_layout_hierarchyRebind(object, hierarchy) {\n    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");\n    object.nodes = object;\n    object.links = d3_layout_hierarchyLinks;\n    return object;\n  }\n  function d3_layout_hierarchyVisitBefore(node, callback) {\n    var nodes = [ node ];\n    while ((node = nodes.pop()) != null) {\n      callback(node);\n      if ((children = node.children) && (n = children.length)) {\n        var n, children;\n        while (--n >= 0) nodes.push(children[n]);\n      }\n    }\n  }\n  function d3_layout_hierarchyVisitAfter(node, callback) {\n    var nodes = [ node ], nodes2 = [];\n    while ((node = nodes.pop()) != null) {\n      nodes2.push(node);\n      if ((children = node.children) && (n = children.length)) {\n        var i = -1, n, children;\n        while (++i < n) nodes.push(children[i]);\n      }\n    }\n    while ((node = nodes2.pop()) != null) {\n      callback(node);\n    }\n  }\n  function d3_layout_hierarchyChildren(d) {\n    return d.children;\n  }\n  function d3_layout_hierarchyValue(d) {\n    return d.value;\n  }\n  function d3_layout_hierarchySort(a, b) {\n    return b.value - a.value;\n  }\n  function d3_layout_hierarchyLinks(nodes) {\n    return d3.merge(nodes.map(function(parent) {\n      return (parent.children || []).map(function(child) {\n        return {\n          source: parent,\n          target: child\n        };\n      });\n    }));\n  }\n  d3.layout.partition = function() {\n    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];\n    function position(node, x, dx, dy) {\n      var children = node.children;\n      node.x = x;\n      node.y = node.depth * dy;\n      node.dx = dx;\n      node.dy = dy;\n      if (children && (n = children.length)) {\n        var i = -1, n, c, d;\n        dx = node.value ? dx / node.value : 0;\n        while (++i < n) {\n          position(c = children[i], x, d = c.value * dx, dy);\n          x += d;\n        }\n      }\n    }\n    function depth(node) {\n      var children = node.children, d = 0;\n      if (children && (n = children.length)) {\n        var i = -1, n;\n        while (++i < n) d = Math.max(d, depth(children[i]));\n      }\n      return 1 + d;\n    }\n    function partition(d, i) {\n      var nodes = hierarchy.call(this, d, i);\n      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n      return nodes;\n    }\n    partition.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return partition;\n    };\n    return d3_layout_hierarchyRebind(partition, hierarchy);\n  };\n  d3.layout.pie = function() {\n    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;\n    function pie(data) {\n      var n = data.length, values = data.map(function(d, i) {\n        return +value.call(pie, d, i);\n      }), a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \"function\" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;\n      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {\n        return values[j] - values[i];\n      } : function(i, j) {\n        return sort(data[i], data[j]);\n      });\n      index.forEach(function(i) {\n        arcs[i] = {\n          data: data[i],\n          value: v = values[i],\n          startAngle: a,\n          endAngle: a += v * k + pa,\n          padAngle: p\n        };\n      });\n      return arcs;\n    }\n    pie.value = function(_) {\n      if (!arguments.length) return value;\n      value = _;\n      return pie;\n    };\n    pie.sort = function(_) {\n      if (!arguments.length) return sort;\n      sort = _;\n      return pie;\n    };\n    pie.startAngle = function(_) {\n      if (!arguments.length) return startAngle;\n      startAngle = _;\n      return pie;\n    };\n    pie.endAngle = function(_) {\n      if (!arguments.length) return endAngle;\n      endAngle = _;\n      return pie;\n    };\n    pie.padAngle = function(_) {\n      if (!arguments.length) return padAngle;\n      padAngle = _;\n      return pie;\n    };\n    return pie;\n  };\n  var d3_layout_pieSortByValue = {};\n  d3.layout.stack = function() {\n    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n    function stack(data, index) {\n      if (!(n = data.length)) return data;\n      var series = data.map(function(d, i) {\n        return values.call(stack, d, i);\n      });\n      var points = series.map(function(d) {\n        return d.map(function(v, i) {\n          return [ x.call(stack, v, i), y.call(stack, v, i) ];\n        });\n      });\n      var orders = order.call(stack, points, index);\n      series = d3.permute(series, orders);\n      points = d3.permute(points, orders);\n      var offsets = offset.call(stack, points, index);\n      var m = series[0].length, n, i, j, o;\n      for (j = 0; j < m; ++j) {\n        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n        for (i = 1; i < n; ++i) {\n          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n        }\n      }\n      return data;\n    }\n    stack.values = function(x) {\n      if (!arguments.length) return values;\n      values = x;\n      return stack;\n    };\n    stack.order = function(x) {\n      if (!arguments.length) return order;\n      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n      return stack;\n    };\n    stack.offset = function(x) {\n      if (!arguments.length) return offset;\n      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n      return stack;\n    };\n    stack.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      return stack;\n    };\n    stack.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      return stack;\n    };\n    stack.out = function(z) {\n      if (!arguments.length) return out;\n      out = z;\n      return stack;\n    };\n    return stack;\n  };\n  function d3_layout_stackX(d) {\n    return d.x;\n  }\n  function d3_layout_stackY(d) {\n    return d.y;\n  }\n  function d3_layout_stackOut(d, y0, y) {\n    d.y0 = y0;\n    d.y = y;\n  }\n  var d3_layout_stackOrders = d3.map({\n    \"inside-out\": function(data) {\n      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n        return max[a] - max[b];\n      }), top = 0, bottom = 0, tops = [], bottoms = [];\n      for (i = 0; i < n; ++i) {\n        j = index[i];\n        if (top < bottom) {\n          top += sums[j];\n          tops.push(j);\n        } else {\n          bottom += sums[j];\n          bottoms.push(j);\n        }\n      }\n      return bottoms.reverse().concat(tops);\n    },\n    reverse: function(data) {\n      return d3.range(data.length).reverse();\n    },\n    \"default\": d3_layout_stackOrderDefault\n  });\n  var d3_layout_stackOffsets = d3.map({\n    silhouette: function(data) {\n      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o > max) max = o;\n        sums.push(o);\n      }\n      for (j = 0; j < m; ++j) {\n        y0[j] = (max - sums[j]) / 2;\n      }\n      return y0;\n    },\n    wiggle: function(data) {\n      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];\n      y0[0] = o = o0 = 0;\n      for (j = 1; j < m; ++j) {\n        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];\n        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {\n          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {\n            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n          }\n          s2 += s3 * data[i][j][1];\n        }\n        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n        if (o < o0) o0 = o;\n      }\n      for (j = 0; j < m; ++j) y0[j] -= o0;\n      return y0;\n    },\n    expand: function(data) {\n      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;\n      }\n      for (j = 0; j < m; ++j) y0[j] = 0;\n      return y0;\n    },\n    zero: d3_layout_stackOffsetZero\n  });\n  function d3_layout_stackOrderDefault(data) {\n    return d3.range(data.length);\n  }\n  function d3_layout_stackOffsetZero(data) {\n    var j = -1, m = data[0].length, y0 = [];\n    while (++j < m) y0[j] = 0;\n    return y0;\n  }\n  function d3_layout_stackMaxIndex(array) {\n    var i = 1, j = 0, v = array[0][1], k, n = array.length;\n    for (;i < n; ++i) {\n      if ((k = array[i][1]) > v) {\n        j = i;\n        v = k;\n      }\n    }\n    return j;\n  }\n  function d3_layout_stackReduceSum(d) {\n    return d.reduce(d3_layout_stackSum, 0);\n  }\n  function d3_layout_stackSum(p, d) {\n    return p + d[1];\n  }\n  d3.layout.histogram = function() {\n    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;\n    function histogram(data, i) {\n      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n      while (++i < m) {\n        bin = bins[i] = [];\n        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n        bin.y = 0;\n      }\n      if (m > 0) {\n        i = -1;\n        while (++i < n) {\n          x = values[i];\n          if (x >= range[0] && x <= range[1]) {\n            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n            bin.y += k;\n            bin.push(data[i]);\n          }\n        }\n      }\n      return bins;\n    }\n    histogram.value = function(x) {\n      if (!arguments.length) return valuer;\n      valuer = x;\n      return histogram;\n    };\n    histogram.range = function(x) {\n      if (!arguments.length) return ranger;\n      ranger = d3_functor(x);\n      return histogram;\n    };\n    histogram.bins = function(x) {\n      if (!arguments.length) return binner;\n      binner = typeof x === \"number\" ? function(range) {\n        return d3_layout_histogramBinFixed(range, x);\n      } : d3_functor(x);\n      return histogram;\n    };\n    histogram.frequency = function(x) {\n      if (!arguments.length) return frequency;\n      frequency = !!x;\n      return histogram;\n    };\n    return histogram;\n  };\n  function d3_layout_histogramBinSturges(range, values) {\n    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n  }\n  function d3_layout_histogramBinFixed(range, n) {\n    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];\n    while (++x <= n) f[x] = m * x + b;\n    return f;\n  }\n  function d3_layout_histogramRange(values) {\n    return [ d3.min(values), d3.max(values) ];\n  }\n  d3.layout.pack = function() {\n    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;\n    function pack(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \"function\" ? radius : function() {\n        return radius;\n      };\n      root.x = root.y = 0;\n      d3_layout_hierarchyVisitAfter(root, function(d) {\n        d.r = +r(d.value);\n      });\n      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n      if (padding) {\n        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r += dr;\n        });\n        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r -= dr;\n        });\n      }\n      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n      return nodes;\n    }\n    pack.size = function(_) {\n      if (!arguments.length) return size;\n      size = _;\n      return pack;\n    };\n    pack.radius = function(_) {\n      if (!arguments.length) return radius;\n      radius = _ == null || typeof _ === \"function\" ? _ : +_;\n      return pack;\n    };\n    pack.padding = function(_) {\n      if (!arguments.length) return padding;\n      padding = +_;\n      return pack;\n    };\n    return d3_layout_hierarchyRebind(pack, hierarchy);\n  };\n  function d3_layout_packSort(a, b) {\n    return a.value - b.value;\n  }\n  function d3_layout_packInsert(a, b) {\n    var c = a._pack_next;\n    a._pack_next = b;\n    b._pack_prev = a;\n    b._pack_next = c;\n    c._pack_prev = b;\n  }\n  function d3_layout_packSplice(a, b) {\n    a._pack_next = b;\n    b._pack_prev = a;\n  }\n  function d3_layout_packIntersects(a, b) {\n    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;\n    return .999 * dr * dr > dx * dx + dy * dy;\n  }\n  function d3_layout_packSiblings(node) {\n    if (!(nodes = node.children) || !(n = nodes.length)) return;\n    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;\n    function bound(node) {\n      xMin = Math.min(node.x - node.r, xMin);\n      xMax = Math.max(node.x + node.r, xMax);\n      yMin = Math.min(node.y - node.r, yMin);\n      yMax = Math.max(node.y + node.r, yMax);\n    }\n    nodes.forEach(d3_layout_packLink);\n    a = nodes[0];\n    a.x = -a.r;\n    a.y = 0;\n    bound(a);\n    if (n > 1) {\n      b = nodes[1];\n      b.x = b.r;\n      b.y = 0;\n      bound(b);\n      if (n > 2) {\n        c = nodes[2];\n        d3_layout_packPlace(a, b, c);\n        bound(c);\n        d3_layout_packInsert(a, c);\n        a._pack_prev = c;\n        d3_layout_packInsert(c, b);\n        b = a._pack_next;\n        for (i = 3; i < n; i++) {\n          d3_layout_packPlace(a, b, c = nodes[i]);\n          var isect = 0, s1 = 1, s2 = 1;\n          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n            if (d3_layout_packIntersects(j, c)) {\n              isect = 1;\n              break;\n            }\n          }\n          if (isect == 1) {\n            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n              if (d3_layout_packIntersects(k, c)) {\n                break;\n              }\n            }\n          }\n          if (isect) {\n            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);\n            i--;\n          } else {\n            d3_layout_packInsert(a, c);\n            b = c;\n            bound(c);\n          }\n        }\n      }\n    }\n    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;\n    for (i = 0; i < n; i++) {\n      c = nodes[i];\n      c.x -= cx;\n      c.y -= cy;\n      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n    }\n    node.r = cr;\n    nodes.forEach(d3_layout_packUnlink);\n  }\n  function d3_layout_packLink(node) {\n    node._pack_next = node._pack_prev = node;\n  }\n  function d3_layout_packUnlink(node) {\n    delete node._pack_next;\n    delete node._pack_prev;\n  }\n  function d3_layout_packTransform(node, x, y, k) {\n    var children = node.children;\n    node.x = x += k * node.x;\n    node.y = y += k * node.y;\n    node.r *= k;\n    if (children) {\n      var i = -1, n = children.length;\n      while (++i < n) d3_layout_packTransform(children[i], x, y, k);\n    }\n  }\n  function d3_layout_packPlace(a, b, c) {\n    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;\n    if (db && (dx || dy)) {\n      var da = b.r + c.r, dc = dx * dx + dy * dy;\n      da *= da;\n      db *= db;\n      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = a.x + x * dx + y * dy;\n      c.y = a.y + x * dy - y * dx;\n    } else {\n      c.x = a.x + db;\n      c.y = a.y;\n    }\n  }\n  d3.layout.tree = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n    function tree(d, i) {\n      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);\n      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {\n        var left = root0, right = root0, bottom = root0;\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n      return nodes;\n    }\n    function wrapTree(root0) {\n      var root1 = {\n        A: null,\n        children: [ root0 ]\n      }, queue = [ root1 ], node1;\n      while ((node1 = queue.pop()) != null) {\n        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {\n          queue.push((children[i] = child = {\n            _: children[i],\n            parent: node1,\n            children: (child = children[i].children) && child.slice() || [],\n            A: null,\n            a: null,\n            z: 0,\n            m: 0,\n            c: 0,\n            s: 0,\n            t: null,\n            i: i\n          }).a = child);\n        }\n      }\n      return root1.children[0];\n    }\n    function firstWalk(v) {\n      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;\n      if (children.length) {\n        d3_layout_treeShift(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {\n          vom = d3_layout_treeLeft(vom);\n          vop = d3_layout_treeRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !d3_layout_treeRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !d3_layout_treeLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n    function sizeNode(node) {\n      node.x *= size[0];\n      node.y = node.depth * size[1];\n    }\n    tree.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return tree;\n    };\n    tree.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null ? sizeNode : null;\n      return tree;\n    };\n    tree.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) == null ? null : sizeNode;\n      return tree;\n    };\n    return d3_layout_hierarchyRebind(tree, hierarchy);\n  };\n  function d3_layout_treeSeparation(a, b) {\n    return a.parent == b.parent ? 1 : 2;\n  }\n  function d3_layout_treeLeft(v) {\n    var children = v.children;\n    return children.length ? children[0] : v.t;\n  }\n  function d3_layout_treeRight(v) {\n    var children = v.children, n;\n    return (n = children.length) ? children[n - 1] : v.t;\n  }\n  function d3_layout_treeMove(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n  function d3_layout_treeShift(v) {\n    var shift = 0, change = 0, children = v.children, i = children.length, w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n  function d3_layout_treeAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n  d3.layout.cluster = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n    function cluster(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var children = node.children;\n        if (children && children.length) {\n          node.x = d3_layout_clusterX(children);\n          node.y = d3_layout_clusterY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {\n        node.x = (node.x - root.x) * size[0];\n        node.y = (root.y - node.y) * size[1];\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * size[0];\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n      });\n      return nodes;\n    }\n    cluster.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return cluster;\n    };\n    cluster.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null;\n      return cluster;\n    };\n    cluster.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) != null;\n      return cluster;\n    };\n    return d3_layout_hierarchyRebind(cluster, hierarchy);\n  };\n  function d3_layout_clusterY(children) {\n    return 1 + d3.max(children, function(child) {\n      return child.y;\n    });\n  }\n  function d3_layout_clusterX(children) {\n    return children.reduce(function(x, child) {\n      return x + child.x;\n    }, 0) / children.length;\n  }\n  function d3_layout_clusterLeft(node) {\n    var children = node.children;\n    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;\n  }\n  function d3_layout_clusterRight(node) {\n    var children = node.children, n;\n    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n  }\n  d3.layout.treemap = function() {\n    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n    function scale(children, k) {\n      var i = -1, n = children.length, child, area;\n      while (++i < n) {\n        area = (child = children[i]).value * (k < 0 ? 0 : k);\n        child.area = isNaN(area) || area <= 0 ? 0 : area;\n      }\n    }\n    function squarify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while ((n = remaining.length) > 0) {\n          row.push(child = remaining[n - 1]);\n          row.area += child.area;\n          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {\n            remaining.pop();\n            best = score;\n          } else {\n            row.area -= row.pop().area;\n            position(row, u, rect, false);\n            u = Math.min(rect.dx, rect.dy);\n            row.length = row.area = 0;\n            best = Infinity;\n          }\n        }\n        if (row.length) {\n          position(row, u, rect, true);\n          row.length = row.area = 0;\n        }\n        children.forEach(squarify);\n      }\n    }\n    function stickify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), remaining = children.slice(), child, row = [];\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while (child = remaining.pop()) {\n          row.push(child);\n          row.area += child.area;\n          if (child.z != null) {\n            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n            row.length = row.area = 0;\n          }\n        }\n        children.forEach(stickify);\n      }\n    }\n    function worst(row, u) {\n      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;\n      while (++i < n) {\n        if (!(r = row[i].area)) continue;\n        if (r < rmin) rmin = r;\n        if (r > rmax) rmax = r;\n      }\n      s *= s;\n      u *= u;\n      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n    }\n    function position(row, u, rect, flush) {\n      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;\n      if (u == rect.dx) {\n        if (flush || v > rect.dy) v = rect.dy;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dy = v;\n          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n        }\n        o.z = true;\n        o.dx += rect.x + rect.dx - x;\n        rect.y += v;\n        rect.dy -= v;\n      } else {\n        if (flush || v > rect.dx) v = rect.dx;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dx = v;\n          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n        }\n        o.z = false;\n        o.dy += rect.y + rect.dy - y;\n        rect.x += v;\n        rect.dx -= v;\n      }\n    }\n    function treemap(d) {\n      var nodes = stickies || hierarchy(d), root = nodes[0];\n      root.x = root.y = 0;\n      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;\n      if (stickies) hierarchy.revalue(root);\n      scale([ root ], root.dx * root.dy / root.value);\n      (stickies ? stickify : squarify)(root);\n      if (sticky) stickies = nodes;\n      return nodes;\n    }\n    treemap.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return treemap;\n    };\n    treemap.padding = function(x) {\n      if (!arguments.length) return padding;\n      function padFunction(node) {\n        var p = x.call(treemap, node, node.depth);\n        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n      }\n      function padConstant(node) {\n        return d3_layout_treemapPad(node, x);\n      }\n      var type;\n      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ], \n      padConstant) : padConstant;\n      return treemap;\n    };\n    treemap.round = function(x) {\n      if (!arguments.length) return round != Number;\n      round = x ? Math.round : Number;\n      return treemap;\n    };\n    treemap.sticky = function(x) {\n      if (!arguments.length) return sticky;\n      sticky = x;\n      stickies = null;\n      return treemap;\n    };\n    treemap.ratio = function(x) {\n      if (!arguments.length) return ratio;\n      ratio = x;\n      return treemap;\n    };\n    treemap.mode = function(x) {\n      if (!arguments.length) return mode;\n      mode = x + \"\";\n      return treemap;\n    };\n    return d3_layout_hierarchyRebind(treemap, hierarchy);\n  };\n  function d3_layout_treemapPadNull(node) {\n    return {\n      x: node.x,\n      y: node.y,\n      dx: node.dx,\n      dy: node.dy\n    };\n  }\n  function d3_layout_treemapPad(node, padding) {\n    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n    if (dx < 0) {\n      x += dx / 2;\n      dx = 0;\n    }\n    if (dy < 0) {\n      y += dy / 2;\n      dy = 0;\n    }\n    return {\n      x: x,\n      y: y,\n      dx: dx,\n      dy: dy\n    };\n  }\n  d3.random = {\n    normal: function(µ, σ) {\n      var n = arguments.length;\n      if (n < 2) σ = 1;\n      if (n < 1) µ = 0;\n      return function() {\n        var x, y, r;\n        do {\n          x = Math.random() * 2 - 1;\n          y = Math.random() * 2 - 1;\n          r = x * x + y * y;\n        } while (!r || r > 1);\n        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n      };\n    },\n    logNormal: function() {\n      var random = d3.random.normal.apply(d3, arguments);\n      return function() {\n        return Math.exp(random());\n      };\n    },\n    bates: function(m) {\n      var random = d3.random.irwinHall(m);\n      return function() {\n        return random() / m;\n      };\n    },\n    irwinHall: function(m) {\n      return function() {\n        for (var s = 0, j = 0; j < m; j++) s += Math.random();\n        return s;\n      };\n    }\n  };\n  d3.scale = {};\n  function d3_scaleExtent(domain) {\n    var start = domain[0], stop = domain[domain.length - 1];\n    return start < stop ? [ start, stop ] : [ stop, start ];\n  }\n  function d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n  }\n  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);\n    return function(x) {\n      return i(u(x));\n    };\n  }\n  function d3_scale_nice(domain, nice) {\n    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;\n    if (x1 < x0) {\n      dx = i0, i0 = i1, i1 = dx;\n      dx = x0, x0 = x1, x1 = dx;\n    }\n    domain[i0] = nice.floor(x0);\n    domain[i1] = nice.ceil(x1);\n    return domain;\n  }\n  function d3_scale_niceStep(step) {\n    return step ? {\n      floor: function(x) {\n        return Math.floor(x / step) * step;\n      },\n      ceil: function(x) {\n        return Math.ceil(x / step) * step;\n      }\n    } : d3_scale_niceIdentity;\n  }\n  var d3_scale_niceIdentity = {\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;\n    if (domain[k] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n    while (++j <= k) {\n      u.push(uninterpolate(domain[j - 1], domain[j]));\n      i.push(interpolate(range[j - 1], range[j]));\n    }\n    return function(x) {\n      var j = d3.bisect(domain, x, 1, k) - 1;\n      return i[j](u[j](x));\n    };\n  }\n  d3.scale.linear = function() {\n    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);\n  };\n  function d3_scale_linear(domain, range, interpolate, clamp) {\n    var output, input;\n    function rescale() {\n      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n      output = linear(domain, range, uninterpolate, interpolate);\n      input = linear(range, domain, uninterpolate, d3_interpolate);\n      return scale;\n    }\n    function scale(x) {\n      return output(x);\n    }\n    scale.invert = function(y) {\n      return input(y);\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(Number);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.rangeRound = function(x) {\n      return scale.range(x).interpolate(d3_interpolateRound);\n    };\n    scale.clamp = function(x) {\n      if (!arguments.length) return clamp;\n      clamp = x;\n      return rescale();\n    };\n    scale.interpolate = function(x) {\n      if (!arguments.length) return interpolate;\n      interpolate = x;\n      return rescale();\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      d3_scale_linearNice(domain, m);\n      return rescale();\n    };\n    scale.copy = function() {\n      return d3_scale_linear(domain, range, interpolate, clamp);\n    };\n    return rescale();\n  }\n  function d3_scale_linearRebind(scale, linear) {\n    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");\n  }\n  function d3_scale_linearNice(domain, m) {\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    return domain;\n  }\n  function d3_scale_linearTickRange(domain, m) {\n    if (m == null) m = 10;\n    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;\n    extent[0] = Math.ceil(extent[0] / step) * step;\n    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n    extent[2] = step;\n    return extent;\n  }\n  function d3_scale_linearTicks(domain, m) {\n    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n  }\n  function d3_scale_linearTickFormat(domain, m, format) {\n    var range = d3_scale_linearTickRange(domain, m);\n    if (format) {\n      var match = d3_format_re.exec(format);\n      match.shift();\n      if (match[8] === \"s\") {\n        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n        if (!match[7]) match[7] = \".\" + d3_scale_linearPrecision(prefix.scale(range[2]));\n        match[8] = \"f\";\n        format = d3.format(match.join(\"\"));\n        return function(d) {\n          return format(prefix.scale(d)) + prefix.symbol;\n        };\n      }\n      if (!match[7]) match[7] = \".\" + d3_scale_linearFormatPrecision(match[8], range);\n      format = match.join(\"\");\n    } else {\n      format = \",.\" + d3_scale_linearPrecision(range[2]) + \"f\";\n    }\n    return d3.format(format);\n  }\n  var d3_scale_linearFormatSignificant = {\n    s: 1,\n    g: 1,\n    p: 1,\n    r: 1,\n    e: 1\n  };\n  function d3_scale_linearPrecision(value) {\n    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n  }\n  function d3_scale_linearFormatPrecision(type, range) {\n    var p = d3_scale_linearPrecision(range[2]);\n    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \"e\") : p - (type === \"%\") * 2;\n  }\n  d3.scale.log = function() {\n    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);\n  };\n  function d3_scale_log(linear, base, positive, domain) {\n    function log(x) {\n      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);\n    }\n    function pow(x) {\n      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n    }\n    function scale(x) {\n      return linear(log(x));\n    }\n    scale.invert = function(x) {\n      return pow(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      positive = x[0] >= 0;\n      linear.domain((domain = x.map(Number)).map(log));\n      return scale;\n    };\n    scale.base = function(_) {\n      if (!arguments.length) return base;\n      base = +_;\n      linear.domain(domain.map(log));\n      return scale;\n    };\n    scale.nice = function() {\n      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n      linear.domain(niced);\n      domain = niced.map(pow);\n      return scale;\n    };\n    scale.ticks = function() {\n      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n      if (isFinite(j - i)) {\n        if (positive) {\n          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);\n          ticks.push(pow(i));\n        } else {\n          ticks.push(pow(i));\n          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);\n        }\n        for (i = 0; ticks[i] < u; i++) {}\n        for (j = ticks.length; ticks[j - 1] > v; j--) {}\n        ticks = ticks.slice(i, j);\n      }\n      return ticks;\n    };\n    scale.tickFormat = function(n, format) {\n      if (!arguments.length) return d3_scale_logFormat;\n      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== \"function\") format = d3.format(format);\n      var k = Math.max(1, base * n / scale.ticks().length);\n      return function(d) {\n        var i = d / pow(Math.round(log(d)));\n        if (i * base < base - .5) i *= base;\n        return i <= k ? format(d) : \"\";\n      };\n    };\n    scale.copy = function() {\n      return d3_scale_log(linear.copy(), base, positive, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  var d3_scale_logFormat = d3.format(\".0e\"), d3_scale_logNiceNegative = {\n    floor: function(x) {\n      return -Math.ceil(-x);\n    },\n    ceil: function(x) {\n      return -Math.floor(-x);\n    }\n  };\n  d3.scale.pow = function() {\n    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);\n  };\n  function d3_scale_pow(linear, exponent, domain) {\n    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);\n    function scale(x) {\n      return linear(powp(x));\n    }\n    scale.invert = function(x) {\n      return powb(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      linear.domain((domain = x.map(Number)).map(powp));\n      return scale;\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      return scale.domain(d3_scale_linearNice(domain, m));\n    };\n    scale.exponent = function(x) {\n      if (!arguments.length) return exponent;\n      powp = d3_scale_powPow(exponent = x);\n      powb = d3_scale_powPow(1 / exponent);\n      linear.domain(domain.map(powp));\n      return scale;\n    };\n    scale.copy = function() {\n      return d3_scale_pow(linear.copy(), exponent, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_scale_powPow(e) {\n    return function(x) {\n      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n    };\n  }\n  d3.scale.sqrt = function() {\n    return d3.scale.pow().exponent(.5);\n  };\n  d3.scale.ordinal = function() {\n    return d3_scale_ordinal([], {\n      t: \"range\",\n      a: [ [] ]\n    });\n  };\n  function d3_scale_ordinal(domain, ranger) {\n    var index, range, rangeBand;\n    function scale(x) {\n      return range[((index.get(x) || (ranger.t === \"range\" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n    }\n    function steps(start, step) {\n      return d3.range(domain.length).map(function(i) {\n        return start + step * i;\n      });\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = [];\n      index = new d3_Map();\n      var i = -1, n = x.length, xi;\n      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n      return scale[ranger.t].apply(scale, ranger.a);\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      rangeBand = 0;\n      ranger = {\n        t: \"range\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangePoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, \n      0) : (stop - start) / (domain.length - 1 + padding);\n      range = steps(start + step * padding / 2, step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangePoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundPoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), \n      0) : (stop - start) / (domain.length - 1 + padding) | 0;\n      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangeRoundPoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n      range = steps(start + step * outerPadding, step);\n      if (reverse) range.reverse();\n      rangeBand = step * (1 - padding);\n      ranger = {\n        t: \"rangeBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n      if (reverse) range.reverse();\n      rangeBand = Math.round(step * (1 - padding));\n      ranger = {\n        t: \"rangeRoundBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBand = function() {\n      return rangeBand;\n    };\n    scale.rangeExtent = function() {\n      return d3_scaleExtent(ranger.a[0]);\n    };\n    scale.copy = function() {\n      return d3_scale_ordinal(domain, ranger);\n    };\n    return scale.domain(domain);\n  }\n  d3.scale.category10 = function() {\n    return d3.scale.ordinal().range(d3_category10);\n  };\n  d3.scale.category20 = function() {\n    return d3.scale.ordinal().range(d3_category20);\n  };\n  d3.scale.category20b = function() {\n    return d3.scale.ordinal().range(d3_category20b);\n  };\n  d3.scale.category20c = function() {\n    return d3.scale.ordinal().range(d3_category20c);\n  };\n  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n  d3.scale.quantile = function() {\n    return d3_scale_quantile([], []);\n  };\n  function d3_scale_quantile(domain, range) {\n    var thresholds;\n    function rescale() {\n      var k = 0, q = range.length;\n      thresholds = [];\n      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);\n      return scale;\n    }\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.quantiles = function() {\n      return thresholds;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantile(domain, range);\n    };\n    return rescale();\n  }\n  d3.scale.quantize = function() {\n    return d3_scale_quantize(0, 1, [ 0, 1 ]);\n  };\n  function d3_scale_quantize(x0, x1, range) {\n    var kx, i;\n    function scale(x) {\n      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n    }\n    function rescale() {\n      kx = range.length / (x1 - x0);\n      i = range.length - 1;\n      return scale;\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return [ x0, x1 ];\n      x0 = +x[0];\n      x1 = +x[x.length - 1];\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      y = y < 0 ? NaN : y / kx + x0;\n      return [ y, y + 1 / kx ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantize(x0, x1, range);\n    };\n    return rescale();\n  }\n  d3.scale.threshold = function() {\n    return d3_scale_threshold([ .5 ], [ 0, 1 ]);\n  };\n  function d3_scale_threshold(domain, range) {\n    function scale(x) {\n      if (x <= x) return range[d3.bisect(domain, x)];\n    }\n    scale.domain = function(_) {\n      if (!arguments.length) return domain;\n      domain = _;\n      return scale;\n    };\n    scale.range = function(_) {\n      if (!arguments.length) return range;\n      range = _;\n      return scale;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return [ domain[y - 1], domain[y] ];\n    };\n    scale.copy = function() {\n      return d3_scale_threshold(domain, range);\n    };\n    return scale;\n  }\n  d3.scale.identity = function() {\n    return d3_scale_identity([ 0, 1 ]);\n  };\n  function d3_scale_identity(domain) {\n    function identity(x) {\n      return +x;\n    }\n    identity.invert = identity;\n    identity.domain = identity.range = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(identity);\n      return identity;\n    };\n    identity.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    identity.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    identity.copy = function() {\n      return d3_scale_identity(domain);\n    };\n    return identity;\n  }\n  d3.svg = {};\n  function d3_zero() {\n    return 0;\n  }\n  d3.svg.arc = function() {\n    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n    function arc() {\n      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;\n      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;\n      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \"\") + \"Z\";\n      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];\n      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n        if (!cw) p1 *= -1;\n        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n      }\n      if (r1) {\n        x0 = r1 * Math.cos(a0 + p1);\n        y0 = r1 * Math.sin(a0 + p1);\n        x1 = r1 * Math.cos(a1 - p1);\n        y1 = r1 * Math.sin(a1 - p1);\n        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;\n        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n          var h1 = (a0 + a1) / 2;\n          x0 = r1 * Math.cos(h1);\n          y0 = r1 * Math.sin(h1);\n          x1 = y1 = null;\n        }\n      } else {\n        x0 = y0 = 0;\n      }\n      if (r0) {\n        x2 = r0 * Math.cos(a1 - p0);\n        y2 = r0 * Math.sin(a1 - p0);\n        x3 = r0 * Math.cos(a0 + p0);\n        y3 = r0 * Math.sin(a0 + p0);\n        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;\n        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n          var h0 = (a0 + a1) / 2;\n          x2 = r0 * Math.cos(h0);\n          y2 = r0 * Math.sin(h0);\n          x3 = y3 = null;\n        }\n      } else {\n        x2 = y2 = 0;\n      }\n      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {\n        cr = r0 < r1 ^ cw ? 0 : 1;\n        var rc1 = rc, rc0 = rc;\n        if (da < π) {\n          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n        }\n        if (x1 != null) {\n          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n          if (rc === rc1) {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t30[1], \"A\", r1, \",\", r1, \" 0 \", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \",\", cw, \" \", t12[1], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t12[0]);\n          } else {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 1,\", cr, \" \", t12[0]);\n          }\n        } else {\n          path.push(\"M\", x0, \",\", y0);\n        }\n        if (x3 != null) {\n          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n          if (rc === rc0) {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t21[1], \"A\", r0, \",\", r0, \" 0 \", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \",\", 1 - cw, \" \", t03[1], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          } else {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          }\n        } else {\n          path.push(\"L\", x2, \",\", y2);\n        }\n      } else {\n        path.push(\"M\", x0, \",\", y0);\n        if (x1 != null) path.push(\"A\", r1, \",\", r1, \" 0 \", l1, \",\", cw, \" \", x1, \",\", y1);\n        path.push(\"L\", x2, \",\", y2);\n        if (x3 != null) path.push(\"A\", r0, \",\", r0, \" 0 \", l0, \",\", 1 - cw, \" \", x3, \",\", y3);\n      }\n      path.push(\"Z\");\n      return path.join(\"\");\n    }\n    function circleSegment(r1, cw) {\n      return \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + r1;\n    }\n    arc.innerRadius = function(v) {\n      if (!arguments.length) return innerRadius;\n      innerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.outerRadius = function(v) {\n      if (!arguments.length) return outerRadius;\n      outerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.cornerRadius = function(v) {\n      if (!arguments.length) return cornerRadius;\n      cornerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.padRadius = function(v) {\n      if (!arguments.length) return padRadius;\n      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n      return arc;\n    };\n    arc.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return arc;\n    };\n    arc.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return arc;\n    };\n    arc.padAngle = function(v) {\n      if (!arguments.length) return padAngle;\n      padAngle = d3_functor(v);\n      return arc;\n    };\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n      return [ Math.cos(a) * r, Math.sin(a) * r ];\n    };\n    return arc;\n  };\n  var d3_svg_arcAuto = \"auto\";\n  function d3_svg_arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n  function d3_svg_arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n  function d3_svg_arcStartAngle(d) {\n    return d.startAngle;\n  }\n  function d3_svg_arcEndAngle(d) {\n    return d.endAngle;\n  }\n  function d3_svg_arcPadAngle(d) {\n    return d && d.padAngle;\n  }\n  function d3_svg_arcSweep(x0, y0, x1, y1) {\n    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;\n  }\n  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];\n  }\n  function d3_svg_line(projection) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n    function line(data) {\n      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points), tension));\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);\n        } else if (points.length) {\n          segment();\n          points = [];\n        }\n      }\n      if (points.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    line.x = function(_) {\n      if (!arguments.length) return x;\n      x = _;\n      return line;\n    };\n    line.y = function(_) {\n      if (!arguments.length) return y;\n      y = _;\n      return line;\n    };\n    line.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return line;\n    };\n    line.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      return line;\n    };\n    line.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return line;\n    };\n    return line;\n  }\n  d3.svg.line = function() {\n    return d3_svg_line(d3_identity);\n  };\n  var d3_svg_lineInterpolators = d3.map({\n    linear: d3_svg_lineLinear,\n    \"linear-closed\": d3_svg_lineLinearClosed,\n    step: d3_svg_lineStep,\n    \"step-before\": d3_svg_lineStepBefore,\n    \"step-after\": d3_svg_lineStepAfter,\n    basis: d3_svg_lineBasis,\n    \"basis-open\": d3_svg_lineBasisOpen,\n    \"basis-closed\": d3_svg_lineBasisClosed,\n    bundle: d3_svg_lineBundle,\n    cardinal: d3_svg_lineCardinal,\n    \"cardinal-open\": d3_svg_lineCardinalOpen,\n    \"cardinal-closed\": d3_svg_lineCardinalClosed,\n    monotone: d3_svg_lineMonotone\n  });\n  d3_svg_lineInterpolators.forEach(function(key, value) {\n    value.key = key;\n    value.closed = /-closed$/.test(key);\n  });\n  function d3_svg_lineLinear(points) {\n    return points.length > 1 ? points.join(\"L\") : points + \"Z\";\n  }\n  function d3_svg_lineLinearClosed(points) {\n    return points.join(\"L\") + \"Z\";\n  }\n  function d3_svg_lineStep(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p[0] + (p = points[i])[0]) / 2, \"V\", p[1]);\n    if (n > 1) path.push(\"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepBefore(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepAfter(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineCardinalOpen(points, tension) {\n    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineCardinalClosed(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));\n  }\n  function d3_svg_lineCardinal(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineHermite(points, tangents) {\n    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {\n      return d3_svg_lineLinear(points);\n    }\n    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n    if (quad) {\n      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];\n      p0 = points[1];\n      pi = 2;\n    }\n    if (tangents.length > 1) {\n      t = tangents[1];\n      p = points[pi];\n      pi++;\n      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      for (var i = 2; i < tangents.length; i++, pi++) {\n        p = points[pi];\n        t = tangents[i];\n        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      }\n    }\n    if (quad) {\n      var lp = points[pi];\n      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];\n    }\n    return path;\n  }\n  function d3_svg_lineCardinalTangents(points, tension) {\n    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;\n    while (++i < n) {\n      p0 = p1;\n      p1 = p2;\n      p2 = points[i];\n      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineBasis(points) {\n    if (points.length < 3) return d3_svg_lineLinear(points);\n    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0, \"L\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    points.push(points[n - 1]);\n    while (++i <= n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    points.pop();\n    path.push(\"L\", pi);\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisOpen(points) {\n    if (points.length < 4) return d3_svg_lineLinear(points);\n    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];\n    while (++i < 3) {\n      pi = points[i];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n    --i;\n    while (++i < n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisClosed(points) {\n    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];\n    while (++i < 4) {\n      pi = points[i % n];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    --i;\n    while (++i < m) {\n      pi = points[i % n];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBundle(points, tension) {\n    var n = points.length - 1;\n    if (n) {\n      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;\n      while (++i <= n) {\n        p = points[i];\n        t = i / n;\n        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n      }\n    }\n    return d3_svg_lineBasis(points);\n  }\n  function d3_svg_lineDot4(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n  function d3_svg_lineBasisBezier(path, x, y) {\n    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n  }\n  function d3_svg_lineSlope(p0, p1) {\n    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n  }\n  function d3_svg_lineFiniteDifferences(points) {\n    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);\n    while (++i < j) {\n      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n    }\n    m[i] = d;\n    return m;\n  }\n  function d3_svg_lineMonotoneTangents(points) {\n    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;\n    while (++i < j) {\n      d = d3_svg_lineSlope(points[i], points[i + 1]);\n      if (abs(d) < ε) {\n        m[i] = m[i + 1] = 0;\n      } else {\n        a = m[i] / d;\n        b = m[i + 1] / d;\n        s = a * a + b * b;\n        if (s > 9) {\n          s = d * 3 / Math.sqrt(s);\n          m[i] = s * a;\n          m[i + 1] = s * b;\n        }\n      }\n    }\n    i = -1;\n    while (++i <= j) {\n      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n      tangents.push([ s || 0, m[i] * s || 0 ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineMonotone(points) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n  }\n  d3.svg.line.radial = function() {\n    var line = d3_svg_line(d3_svg_lineRadial);\n    line.radius = line.x, delete line.x;\n    line.angle = line.y, delete line.y;\n    return line;\n  };\n  function d3_svg_lineRadial(points) {\n    var point, i = -1, n = points.length, r, a;\n    while (++i < n) {\n      point = points[i];\n      r = point[0];\n      a = point[1] - halfπ;\n      point[0] = r * Math.cos(a);\n      point[1] = r * Math.sin(a);\n    }\n    return points;\n  }\n  function d3_svg_area(projection) {\n    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n    function area(data) {\n      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n        return x;\n      } : d3_functor(x1), fy1 = y0 === y1 ? function() {\n        return y;\n      } : d3_functor(y1), x, y;\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);\n          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);\n        } else if (points0.length) {\n          segment();\n          points0 = [];\n          points1 = [];\n        }\n      }\n      if (points0.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    area.x = function(_) {\n      if (!arguments.length) return x1;\n      x0 = x1 = _;\n      return area;\n    };\n    area.x0 = function(_) {\n      if (!arguments.length) return x0;\n      x0 = _;\n      return area;\n    };\n    area.x1 = function(_) {\n      if (!arguments.length) return x1;\n      x1 = _;\n      return area;\n    };\n    area.y = function(_) {\n      if (!arguments.length) return y1;\n      y0 = y1 = _;\n      return area;\n    };\n    area.y0 = function(_) {\n      if (!arguments.length) return y0;\n      y0 = _;\n      return area;\n    };\n    area.y1 = function(_) {\n      if (!arguments.length) return y1;\n      y1 = _;\n      return area;\n    };\n    area.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return area;\n    };\n    area.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      interpolateReverse = interpolate.reverse || interpolate;\n      L = interpolate.closed ? \"M\" : \"L\";\n      return area;\n    };\n    area.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return area;\n    };\n    return area;\n  }\n  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n  d3.svg.area = function() {\n    return d3_svg_area(d3_identity);\n  };\n  d3.svg.area.radial = function() {\n    var area = d3_svg_area(d3_svg_lineRadial);\n    area.radius = area.x, delete area.x;\n    area.innerRadius = area.x0, delete area.x0;\n    area.outerRadius = area.x1, delete area.x1;\n    area.angle = area.y, delete area.y;\n    area.startAngle = area.y0, delete area.y0;\n    area.endAngle = area.y1, delete area.y1;\n    return area;\n  };\n  d3.svg.chord = function() {\n    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n    function chord(d, i) {\n      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);\n      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n    }\n    function subgroup(self, f, d, i) {\n      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n      return {\n        r: r,\n        a0: a0,\n        a1: a1,\n        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],\n        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]\n      };\n    }\n    function equals(a, b) {\n      return a.a0 == b.a0 && a.a1 == b.a1;\n    }\n    function arc(r, p, a) {\n      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;\n    }\n    function curve(r0, p0, r1, p1) {\n      return \"Q 0,0 \" + p1;\n    }\n    chord.radius = function(v) {\n      if (!arguments.length) return radius;\n      radius = d3_functor(v);\n      return chord;\n    };\n    chord.source = function(v) {\n      if (!arguments.length) return source;\n      source = d3_functor(v);\n      return chord;\n    };\n    chord.target = function(v) {\n      if (!arguments.length) return target;\n      target = d3_functor(v);\n      return chord;\n    };\n    chord.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return chord;\n    };\n    chord.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return chord;\n    };\n    return chord;\n  };\n  function d3_svg_chordRadius(d) {\n    return d.radius;\n  }\n  d3.svg.diagonal = function() {\n    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;\n    function diagonal(d, i) {\n      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {\n        x: p0.x,\n        y: m\n      }, {\n        x: p3.x,\n        y: m\n      }, p3 ];\n      p = p.map(projection);\n      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];\n    }\n    diagonal.source = function(x) {\n      if (!arguments.length) return source;\n      source = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.target = function(x) {\n      if (!arguments.length) return target;\n      target = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.projection = function(x) {\n      if (!arguments.length) return projection;\n      projection = x;\n      return diagonal;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalProjection(d) {\n    return [ d.x, d.y ];\n  }\n  d3.svg.diagonal.radial = function() {\n    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;\n    diagonal.projection = function(x) {\n      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalRadialProjection(projection) {\n    return function() {\n      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;\n      return [ r * Math.cos(a), r * Math.sin(a) ];\n    };\n  }\n  d3.svg.symbol = function() {\n    var type = d3_svg_symbolType, size = d3_svg_symbolSize;\n    function symbol(d, i) {\n      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n    }\n    symbol.type = function(x) {\n      if (!arguments.length) return type;\n      type = d3_functor(x);\n      return symbol;\n    };\n    symbol.size = function(x) {\n      if (!arguments.length) return size;\n      size = d3_functor(x);\n      return symbol;\n    };\n    return symbol;\n  };\n  function d3_svg_symbolSize() {\n    return 64;\n  }\n  function d3_svg_symbolType() {\n    return \"circle\";\n  }\n  function d3_svg_symbolCircle(size) {\n    var r = Math.sqrt(size / π);\n    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";\n  }\n  var d3_svg_symbols = d3.map({\n    circle: d3_svg_symbolCircle,\n    cross: function(size) {\n      var r = Math.sqrt(size / 5) / 2;\n      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n    },\n    diamond: function(size) {\n      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;\n      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";\n    },\n    square: function(size) {\n      var r = Math.sqrt(size) / 2;\n      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";\n    },\n    \"triangle-down\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";\n    },\n    \"triangle-up\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";\n    }\n  });\n  d3.svg.symbolTypes = d3_svg_symbols.keys();\n  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n  d3_selectionPrototype.transition = function(name) {\n    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n      time: Date.now(),\n      ease: d3_ease_cubicInOut,\n      delay: 0,\n      duration: 250\n    };\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_selectionPrototype.interrupt = function(name) {\n    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));\n  };\n  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());\n  function d3_selection_interruptNS(ns) {\n    return function() {\n      var lock, activeId, active;\n      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        if (--lock.count) delete lock[activeId]; else delete this[ns];\n        lock.active += .5;\n        active.event && active.event.interrupt.call(this, this.__data__, active.index);\n      }\n    };\n  }\n  function d3_transition(groups, ns, id) {\n    d3_subclass(groups, d3_transitionPrototype);\n    groups.namespace = ns;\n    groups.id = id;\n    return groups;\n  }\n  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;\n  d3_transitionPrototype.call = d3_selectionPrototype.call;\n  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n  d3_transitionPrototype.node = d3_selectionPrototype.node;\n  d3_transitionPrototype.size = d3_selectionPrototype.size;\n  d3.transition = function(selection, name) {\n    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);\n  };\n  d3.transition.prototype = d3_transitionPrototype;\n  d3_transitionPrototype.select = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n          subgroup.push(subnode);\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.selectAll = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          transition = node[ns][id];\n          subnodes = selector.call(node, node.__data__, i, j);\n          subgroups.push(subgroup = []);\n          for (var k = -1, o = subnodes.length; ++k < o; ) {\n            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n            subgroup.push(subnode);\n          }\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_transition(subgroups, this.namespace, this.id);\n  };\n  d3_transitionPrototype.tween = function(name, tween) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);\n    return d3_selection_each(this, tween == null ? function(node) {\n      node[ns][id].tween.remove(name);\n    } : function(node) {\n      node[ns][id].tween.set(name, tween);\n    });\n  };\n  function d3_transition_tween(groups, name, value, tween) {\n    var id = groups.id, ns = groups.namespace;\n    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n    } : (value = tween(value), function(node) {\n      node[ns][id].tween.set(name, value);\n    }));\n  }\n  d3_transitionPrototype.attr = function(nameNS, value) {\n    if (arguments.length < 2) {\n      for (value in nameNS) this.attr(value, nameNS[value]);\n      return this;\n    }\n    var interpolate = nameNS == \"transform\" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrTween(b) {\n      return b == null ? attrNull : (b += \"\", function() {\n        var a = this.getAttribute(name), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttribute(name, i(t));\n        });\n      });\n    }\n    function attrTweenNS(b) {\n      return b == null ? attrNullNS : (b += \"\", function() {\n        var a = this.getAttributeNS(name.space, name.local), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttributeNS(name.space, name.local, i(t));\n        });\n      });\n    }\n    return d3_transition_tween(this, \"attr.\" + nameNS, value, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.attrTween = function(nameNS, tween) {\n    var name = d3.ns.qualify(nameNS);\n    function attrTween(d, i) {\n      var f = tween.call(this, d, i, this.getAttribute(name));\n      return f && function(t) {\n        this.setAttribute(name, f(t));\n      };\n    }\n    function attrTweenNS(d, i) {\n      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n      return f && function(t) {\n        this.setAttributeNS(name.space, name.local, f(t));\n      };\n    }\n    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.style(priority, name[priority], value);\n        return this;\n      }\n      priority = \"\";\n    }\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleString(b) {\n      return b == null ? styleNull : (b += \"\", function() {\n        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;\n        return a !== b && (i = d3_interpolate(a, b), function(t) {\n          this.style.setProperty(name, i(t), priority);\n        });\n      });\n    }\n    return d3_transition_tween(this, \"style.\" + name, value, styleString);\n  };\n  d3_transitionPrototype.styleTween = function(name, tween, priority) {\n    if (arguments.length < 3) priority = \"\";\n    function styleTween(d, i) {\n      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));\n      return f && function(t) {\n        this.style.setProperty(name, f(t), priority);\n      };\n    }\n    return this.tween(\"style.\" + name, styleTween);\n  };\n  d3_transitionPrototype.text = function(value) {\n    return d3_transition_tween(this, \"text\", value, d3_transition_text);\n  };\n  function d3_transition_text(b) {\n    if (b == null) b = \"\";\n    return function() {\n      this.textContent = b;\n    };\n  }\n  d3_transitionPrototype.remove = function() {\n    var ns = this.namespace;\n    return this.each(\"end.transition\", function() {\n      var p;\n      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);\n    });\n  };\n  d3_transitionPrototype.ease = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].ease;\n    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);\n    return d3_selection_each(this, function(node) {\n      node[ns][id].ease = value;\n    });\n  };\n  d3_transitionPrototype.delay = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].delay;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n    } : (value = +value, function(node) {\n      node[ns][id].delay = value;\n    }));\n  };\n  d3_transitionPrototype.duration = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].duration;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n    } : (value = Math.max(1, value), function(node) {\n      node[ns][id].duration = value;\n    }));\n  };\n  d3_transitionPrototype.each = function(type, listener) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) {\n      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;\n      try {\n        d3_transitionInheritId = id;\n        d3_selection_each(this, function(node, i, j) {\n          d3_transitionInherit = node[ns][id];\n          type.call(node, node.__data__, i, j);\n        });\n      } finally {\n        d3_transitionInherit = inherit;\n        d3_transitionInheritId = inheritId;\n      }\n    } else {\n      d3_selection_each(this, function(node) {\n        var transition = node[ns][id];\n        (transition.event || (transition.event = d3.dispatch(\"start\", \"end\", \"interrupt\"))).on(type, listener);\n      });\n    }\n    return this;\n  };\n  d3_transitionPrototype.transition = function() {\n    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if (node = group[i]) {\n          transition = node[ns][id0];\n          d3_transitionNode(node, i, ns, id1, {\n            time: transition.time,\n            ease: transition.ease,\n            delay: transition.delay + transition.duration,\n            duration: transition.duration\n          });\n        }\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id1);\n  };\n  function d3_transitionNamespace(name) {\n    return name == null ? \"__transition__\" : \"__transition_\" + name + \"__\";\n  }\n  function d3_transitionNode(node, i, ns, id, inherit) {\n    var lock = node[ns] || (node[ns] = {\n      active: 0,\n      count: 0\n    }), transition = lock[id], time, timer, duration, ease, tweens;\n    function schedule(elapsed) {\n      var delay = transition.delay;\n      timer.t = delay + time;\n      if (delay <= elapsed) return start(elapsed - delay);\n      timer.c = start;\n    }\n    function start(elapsed) {\n      var activeId = lock.active, active = lock[activeId];\n      if (active) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        --lock.count;\n        delete lock[activeId];\n        active.event && active.event.interrupt.call(node, node.__data__, active.index);\n      }\n      for (var cancelId in lock) {\n        if (+cancelId < id) {\n          var cancel = lock[cancelId];\n          cancel.timer.c = null;\n          cancel.timer.t = NaN;\n          --lock.count;\n          delete lock[cancelId];\n        }\n      }\n      timer.c = tick;\n      d3_timer(function() {\n        if (timer.c && tick(elapsed || 1)) {\n          timer.c = null;\n          timer.t = NaN;\n        }\n        return 1;\n      }, 0, time);\n      lock.active = id;\n      transition.event && transition.event.start.call(node, node.__data__, i);\n      tweens = [];\n      transition.tween.forEach(function(key, value) {\n        if (value = value.call(node, node.__data__, i)) {\n          tweens.push(value);\n        }\n      });\n      ease = transition.ease;\n      duration = transition.duration;\n    }\n    function tick(elapsed) {\n      var t = elapsed / duration, e = ease(t), n = tweens.length;\n      while (n > 0) {\n        tweens[--n].call(node, e);\n      }\n      if (t >= 1) {\n        transition.event && transition.event.end.call(node, node.__data__, i);\n        if (--lock.count) delete lock[id]; else delete node[ns];\n        return 1;\n      }\n    }\n    if (!transition) {\n      time = inherit.time;\n      timer = d3_timer(schedule, 0, time);\n      transition = lock[id] = {\n        tween: new d3_Map(),\n        time: time,\n        timer: timer,\n        delay: inherit.delay,\n        duration: inherit.duration,\n        ease: inherit.ease,\n        index: i\n      };\n      inherit = null;\n      ++lock.count;\n    }\n  }\n  d3.svg.axis = function() {\n    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n    function axis(g) {\n      g.each(function() {\n        var g = d3.select(this);\n        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();\n        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\".tick\").data(ticks, scale1), tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", ε), tickExit = d3.transition(tick.exit()).style(\"opacity\", ε).remove(), tickUpdate = d3.transition(tick.order()).style(\"opacity\", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n        var range = d3_scaleRange(scale1), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), \n        d3.transition(path));\n        tickEnter.append(\"line\");\n        tickEnter.append(\"text\");\n        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\"), sign = orient === \"top\" || orient === \"left\" ? -1 : 1, x1, x2, y1, y2;\n        if (orient === \"bottom\" || orient === \"top\") {\n          tickTransform = d3_svg_axisX, x1 = \"x\", y1 = \"y\", x2 = \"x2\", y2 = \"y2\";\n          text.attr(\"dy\", sign < 0 ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\");\n          pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + sign * outerTickSize + \"V0H\" + range[1] + \"V\" + sign * outerTickSize);\n        } else {\n          tickTransform = d3_svg_axisY, x1 = \"y\", y1 = \"x\", x2 = \"y2\", y2 = \"x2\";\n          text.attr(\"dy\", \".32em\").style(\"text-anchor\", sign < 0 ? \"end\" : \"start\");\n          pathUpdate.attr(\"d\", \"M\" + sign * outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * outerTickSize);\n        }\n        lineEnter.attr(y2, sign * innerTickSize);\n        textEnter.attr(y1, sign * tickSpacing);\n        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n        if (scale1.rangeBand) {\n          var x = scale1, dx = x.rangeBand() / 2;\n          scale0 = scale1 = function(d) {\n            return x(d) + dx;\n          };\n        } else if (scale0.rangeBand) {\n          scale0 = scale1;\n        } else {\n          tickExit.call(tickTransform, scale1, scale0);\n        }\n        tickEnter.call(tickTransform, scale0, scale1);\n        tickUpdate.call(tickTransform, scale1, scale1);\n      });\n    }\n    axis.scale = function(x) {\n      if (!arguments.length) return scale;\n      scale = x;\n      return axis;\n    };\n    axis.orient = function(x) {\n      if (!arguments.length) return orient;\n      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;\n      return axis;\n    };\n    axis.ticks = function() {\n      if (!arguments.length) return tickArguments_;\n      tickArguments_ = d3_array(arguments);\n      return axis;\n    };\n    axis.tickValues = function(x) {\n      if (!arguments.length) return tickValues;\n      tickValues = x;\n      return axis;\n    };\n    axis.tickFormat = function(x) {\n      if (!arguments.length) return tickFormat_;\n      tickFormat_ = x;\n      return axis;\n    };\n    axis.tickSize = function(x) {\n      var n = arguments.length;\n      if (!n) return innerTickSize;\n      innerTickSize = +x;\n      outerTickSize = +arguments[n - 1];\n      return axis;\n    };\n    axis.innerTickSize = function(x) {\n      if (!arguments.length) return innerTickSize;\n      innerTickSize = +x;\n      return axis;\n    };\n    axis.outerTickSize = function(x) {\n      if (!arguments.length) return outerTickSize;\n      outerTickSize = +x;\n      return axis;\n    };\n    axis.tickPadding = function(x) {\n      if (!arguments.length) return tickPadding;\n      tickPadding = +x;\n      return axis;\n    };\n    axis.tickSubdivide = function() {\n      return arguments.length && axis;\n    };\n    return axis;\n  };\n  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  };\n  function d3_svg_axisX(selection, x0, x1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = x0(d);\n      return \"translate(\" + (isFinite(v0) ? v0 : x1(d)) + \",0)\";\n    });\n  }\n  function d3_svg_axisY(selection, y0, y1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = y0(d);\n      return \"translate(0,\" + (isFinite(v0) ? v0 : y1(d)) + \")\";\n    });\n  }\n  d3.svg.brush = function() {\n    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n    function brush(g) {\n      g.each(function() {\n        var g = d3.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);\n        var background = g.selectAll(\".background\").data([ 0 ]);\n        background.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n        g.selectAll(\".extent\").data([ 0 ]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");\n        var resize = g.selectAll(\".resize\").data(resizes, d3_identity);\n        resize.exit().remove();\n        resize.enter().append(\"g\").attr(\"class\", function(d) {\n          return \"resize \" + d;\n        }).style(\"cursor\", function(d) {\n          return d3_svg_brushCursor[d];\n        }).append(\"rect\").attr(\"x\", function(d) {\n          return /[ew]$/.test(d) ? -3 : null;\n        }).attr(\"y\", function(d) {\n          return /^[ns]/.test(d) ? -3 : null;\n        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");\n        resize.style(\"display\", brush.empty() ? \"none\" : null);\n        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;\n        if (x) {\n          range = d3_scaleRange(x);\n          backgroundUpdate.attr(\"x\", range[0]).attr(\"width\", range[1] - range[0]);\n          redrawX(gUpdate);\n        }\n        if (y) {\n          range = d3_scaleRange(y);\n          backgroundUpdate.attr(\"y\", range[0]).attr(\"height\", range[1] - range[0]);\n          redrawY(gUpdate);\n        }\n        redraw(gUpdate);\n      });\n    }\n    brush.event = function(g) {\n      g.each(function() {\n        var event_ = event.of(this, arguments), extent1 = {\n          x: xExtent,\n          y: yExtent,\n          i: xExtentDomain,\n          j: yExtentDomain\n        }, extent0 = this.__chart__ || extent1;\n        this.__chart__ = extent1;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.brush\", function() {\n            xExtentDomain = extent0.i;\n            yExtentDomain = extent0.j;\n            xExtent = extent0.x;\n            yExtent = extent0.y;\n            event_({\n              type: \"brushstart\"\n            });\n          }).tween(\"brush:brush\", function() {\n            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);\n            xExtentDomain = yExtentDomain = null;\n            return function(t) {\n              xExtent = extent1.x = xi(t);\n              yExtent = extent1.y = yi(t);\n              event_({\n                type: \"brush\",\n                mode: \"resize\"\n              });\n            };\n          }).each(\"end.brush\", function() {\n            xExtentDomain = extent1.i;\n            yExtentDomain = extent1.j;\n            event_({\n              type: \"brush\",\n              mode: \"resize\"\n            });\n            event_({\n              type: \"brushend\"\n            });\n          });\n        } else {\n          event_({\n            type: \"brushstart\"\n          });\n          event_({\n            type: \"brush\",\n            mode: \"resize\"\n          });\n          event_({\n            type: \"brushend\"\n          });\n        }\n      });\n    };\n    function redraw(g) {\n      g.selectAll(\".resize\").attr(\"transform\", function(d) {\n        return \"translate(\" + xExtent[+/e$/.test(d)] + \",\" + yExtent[+/^s/.test(d)] + \")\";\n      });\n    }\n    function redrawX(g) {\n      g.select(\".extent\").attr(\"x\", xExtent[0]);\n      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", xExtent[1] - xExtent[0]);\n    }\n    function redrawY(g) {\n      g.select(\".extent\").attr(\"y\", yExtent[0]);\n      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", yExtent[1] - yExtent[0]);\n    }\n    function brushstart() {\n      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;\n      var w = d3.select(d3_window(target)).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);\n      if (d3.event.changedTouches) {\n        w.on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend);\n      } else {\n        w.on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend);\n      }\n      g.interrupt().selectAll(\"*\").interrupt();\n      if (dragging) {\n        origin[0] = xExtent[0] - origin[0];\n        origin[1] = yExtent[0] - origin[1];\n      } else if (resizing) {\n        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);\n        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];\n        origin[0] = xExtent[ex];\n        origin[1] = yExtent[ey];\n      } else if (d3.event.altKey) center = origin.slice();\n      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);\n      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));\n      event_({\n        type: \"brushstart\"\n      });\n      brushmove();\n      function keydown() {\n        if (d3.event.keyCode == 32) {\n          if (!dragging) {\n            center = null;\n            origin[0] -= xExtent[1];\n            origin[1] -= yExtent[1];\n            dragging = 2;\n          }\n          d3_eventPreventDefault();\n        }\n      }\n      function keyup() {\n        if (d3.event.keyCode == 32 && dragging == 2) {\n          origin[0] += xExtent[1];\n          origin[1] += yExtent[1];\n          dragging = 0;\n          d3_eventPreventDefault();\n        }\n      }\n      function brushmove() {\n        var point = d3.mouse(target), moved = false;\n        if (offset) {\n          point[0] += offset[0];\n          point[1] += offset[1];\n        }\n        if (!dragging) {\n          if (d3.event.altKey) {\n            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];\n            origin[0] = xExtent[+(point[0] < center[0])];\n            origin[1] = yExtent[+(point[1] < center[1])];\n          } else center = null;\n        }\n        if (resizingX && move1(point, x, 0)) {\n          redrawX(g);\n          moved = true;\n        }\n        if (resizingY && move1(point, y, 1)) {\n          redrawY(g);\n          moved = true;\n        }\n        if (moved) {\n          redraw(g);\n          event_({\n            type: \"brush\",\n            mode: dragging ? \"move\" : \"resize\"\n          });\n        }\n      }\n      function move1(point, scale, i) {\n        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n        if (dragging) {\n          r0 -= position;\n          r1 -= size + position;\n        }\n        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n        if (dragging) {\n          max = (min += position) + size;\n        } else {\n          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n          if (position < min) {\n            max = min;\n            min = position;\n          } else {\n            max = position;\n          }\n        }\n        if (extent[0] != min || extent[1] != max) {\n          if (i) yExtentDomain = null; else xExtentDomain = null;\n          extent[0] = min;\n          extent[1] = max;\n          return true;\n        }\n      }\n      function brushend() {\n        brushmove();\n        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);\n        d3.select(\"body\").style(\"cursor\", null);\n        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n        dragRestore();\n        event_({\n          type: \"brushend\"\n        });\n      }\n    }\n    brush.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.clamp = function(z) {\n      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;\n      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;\n      return brush;\n    };\n    brush.extent = function(z) {\n      var x0, x1, y0, y1, t;\n      if (!arguments.length) {\n        if (x) {\n          if (xExtentDomain) {\n            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n          } else {\n            x0 = xExtent[0], x1 = xExtent[1];\n            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n          }\n        }\n        if (y) {\n          if (yExtentDomain) {\n            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n          } else {\n            y0 = yExtent[0], y1 = yExtent[1];\n            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n          }\n        }\n        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];\n      }\n      if (x) {\n        x0 = z[0], x1 = z[1];\n        if (y) x0 = x0[0], x1 = x1[0];\n        xExtentDomain = [ x0, x1 ];\n        if (x.invert) x0 = x(x0), x1 = x(x1);\n        if (x1 < x0) t = x0, x0 = x1, x1 = t;\n        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];\n      }\n      if (y) {\n        y0 = z[0], y1 = z[1];\n        if (x) y0 = y0[1], y1 = y1[1];\n        yExtentDomain = [ y0, y1 ];\n        if (y.invert) y0 = y(y0), y1 = y(y1);\n        if (y1 < y0) t = y0, y0 = y1, y1 = t;\n        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];\n      }\n      return brush;\n    };\n    brush.clear = function() {\n      if (!brush.empty()) {\n        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];\n        xExtentDomain = yExtentDomain = null;\n      }\n      return brush;\n    };\n    brush.empty = function() {\n      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];\n    };\n    return d3.rebind(brush, event, \"on\");\n  };\n  var d3_svg_brushCursor = {\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];\n  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n  var d3_time_formatUtc = d3_time_format.utc;\n  var d3_time_formatIso = d3_time_formatUtc(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n  d3_time_format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n  function d3_time_formatIsoNative(date) {\n    return date.toISOString();\n  }\n  d3_time_formatIsoNative.parse = function(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  };\n  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n  d3_time.second = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 1e3) * 1e3);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n  }, function(date) {\n    return date.getSeconds();\n  });\n  d3_time.seconds = d3_time.second.range;\n  d3_time.seconds.utc = d3_time.second.utc.range;\n  d3_time.minute = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 6e4) * 6e4);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n  }, function(date) {\n    return date.getMinutes();\n  });\n  d3_time.minutes = d3_time.minute.range;\n  d3_time.minutes.utc = d3_time.minute.utc.range;\n  d3_time.hour = d3_time_interval(function(date) {\n    var timezone = date.getTimezoneOffset() / 60;\n    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n  }, function(date) {\n    return date.getHours();\n  });\n  d3_time.hours = d3_time.hour.range;\n  d3_time.hours.utc = d3_time.hour.utc.range;\n  d3_time.month = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setDate(1);\n    return date;\n  }, function(date, offset) {\n    date.setMonth(date.getMonth() + offset);\n  }, function(date) {\n    return date.getMonth();\n  });\n  d3_time.months = d3_time.month.range;\n  d3_time.months.utc = d3_time.month.utc.range;\n  function d3_time_scale(linear, methods, format) {\n    function scale(x) {\n      return linear(x);\n    }\n    scale.invert = function(x) {\n      return d3_time_scaleDate(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n      linear.domain(x);\n      return scale;\n    };\n    function tickMethod(extent, count) {\n      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);\n      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {\n        return d / 31536e6;\n      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n    }\n    scale.nice = function(interval, skip) {\n      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" && tickMethod(extent, interval);\n      if (method) interval = method[0], skip = method[1];\n      function skipped(date) {\n        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n      }\n      return scale.domain(d3_scale_nice(domain, skip > 1 ? {\n        floor: function(date) {\n          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);\n          return date;\n        },\n        ceil: function(date) {\n          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);\n          return date;\n        }\n      } : interval));\n    };\n    scale.ticks = function(interval, skip) {\n      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" ? tickMethod(extent, interval) : !interval.range && [ {\n        range: interval\n      }, skip ];\n      if (method) interval = method[0], skip = method[1];\n      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);\n    };\n    scale.tickFormat = function() {\n      return format;\n    };\n    scale.copy = function() {\n      return d3_time_scale(linear.copy(), methods, format);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_time_scaleDate(t) {\n    return new Date(t);\n  }\n  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \".%L\", function(d) {\n    return d.getMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getDay() && d.getDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  var d3_time_scaleMilliseconds = {\n    range: function(start, stop, step) {\n      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n    },\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  d3_time_scaleLocalMethods.year = d3_time.year;\n  d3_time.scale = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n  };\n  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {\n    return [ m[0].utc, m[1] ];\n  });\n  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \".%L\", function(d) {\n    return d.getUTCMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getUTCSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getUTCMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getUTCHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getUTCDay() && d.getUTCDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getUTCDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getUTCMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n  d3_time.scale.utc = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n  };\n  d3.text = d3_xhrType(function(request) {\n    return request.responseText;\n  });\n  d3.json = function(url, callback) {\n    return d3_xhr(url, \"application/json\", d3_json, callback);\n  };\n  function d3_json(request) {\n    return JSON.parse(request.responseText);\n  }\n  d3.html = function(url, callback) {\n    return d3_xhr(url, \"text/html\", d3_html, callback);\n  };\n  function d3_html(request) {\n    var range = d3_document.createRange();\n    range.selectNode(d3_document.body);\n    return range.createContextualFragment(request.responseText);\n  }\n  d3.xml = d3_xhrType(function(request) {\n    return request.responseXML;\n  });\n  if (typeof define === \"function\" && define.amd) this.d3 = d3, define(d3); else if (typeof module === \"object\" && module.exports) module.exports = d3; else this.d3 = d3;\n}();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/d3/d3.js\n// module id = 271\n// module chunks = 0 1","module.exports = require(\"./crossfilter\").crossfilter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dc/node_modules/crossfilter2/index.js\n// module id = 272\n// module chunks = 0 1","(function(exports){\ncrossfilter.version = \"1.3.14\";\nfunction crossfilter_identity(d) {\n  return d;\n}\ncrossfilter.permute = permute;\n\nfunction permute(array, index) {\n  for (var i = 0, n = index.length, copy = new Array(n); i < n; ++i) {\n    copy[i] = array[index[i]];\n  }\n  return copy;\n}\nvar bisect = crossfilter.bisect = bisect_by(crossfilter_identity);\n\nbisect.by = bisect_by;\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\nvar heap = crossfilter.heap = heap_by(crossfilter_identity);\n\nheap.by = heap_by;\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\nvar heapselect = crossfilter.heapselect = heapselect_by(crossfilter_identity);\n\nheapselect.by = heapselect_by;\n\nfunction heapselect_by(f) {\n  var heap = heap_by(f);\n\n  // Returns a new array containing the top k elements in the array a[lo:hi].\n  // The returned array is not sorted, but maintains the heap property. If k is\n  // greater than hi - lo, then fewer than k elements will be returned. The\n  // order of elements in a is unchanged by this operation.\n  function heapselect(a, lo, hi, k) {\n    var queue = new Array(k = Math.min(hi - lo, k)),\n        min,\n        i,\n        x,\n        d;\n\n    for (i = 0; i < k; ++i) queue[i] = a[lo++];\n    heap(queue, 0, k);\n\n    if (lo < hi) {\n      min = f(queue[0]);\n      do {\n        if (x = f(d = a[lo]) > min) {\n          queue[0] = d;\n          min = f(heap(queue, 0, k)[0]);\n        }\n      } while (++lo < hi);\n    }\n\n    return queue;\n  }\n\n  return heapselect;\n}\nvar insertionsort = crossfilter.insertionsort = insertionsort_by(crossfilter_identity);\n\ninsertionsort.by = insertionsort_by;\n\nfunction insertionsort_by(f) {\n\n  function insertionsort(a, lo, hi) {\n    for (var i = lo + 1; i < hi; ++i) {\n      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n        a[j] = a[j - 1];\n      }\n      a[j] = t;\n    }\n    return a;\n  }\n\n  return insertionsort;\n}\n// Algorithm designed by Vladimir Yaroslavskiy.\n// Implementation based on the Dart project; see lib/dart/LICENSE for details.\n\nvar quicksort = crossfilter.quicksort = quicksort_by(crossfilter_identity);\n\nquicksort.by = quicksort_by;\n\nfunction quicksort_by(f) {\n  var insertionsort = insertionsort_by(f);\n\n  function sort(a, lo, hi) {\n    return (hi - lo < quicksort_sizeThreshold\n        ? insertionsort\n        : quicksort)(a, lo, hi);\n  }\n\n  function quicksort(a, lo, hi) {\n    // Compute the two pivots by looking at 5 elements.\n    var sixth = (hi - lo) / 6 | 0,\n        i1 = lo + sixth,\n        i5 = hi - 1 - sixth,\n        i3 = lo + hi - 1 >> 1,  // The midpoint.\n        i2 = i3 - sixth,\n        i4 = i3 + sixth;\n\n    var e1 = a[i1], x1 = f(e1),\n        e2 = a[i2], x2 = f(e2),\n        e3 = a[i3], x3 = f(e3),\n        e4 = a[i4], x4 = f(e4),\n        e5 = a[i5], x5 = f(e5);\n\n    var t;\n\n    // Sort the selected 5 elements using a sorting network.\n    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n    var pivot1 = e2, pivotValue1 = x2,\n        pivot2 = e4, pivotValue2 = x4;\n\n    // e2 and e4 have been saved in the pivot variables. They will be written\n    // back, once the partitioning is finished.\n    a[i1] = e1;\n    a[i2] = a[lo];\n    a[i3] = e3;\n    a[i4] = a[hi - 1];\n    a[i5] = e5;\n\n    var less = lo + 1,   // First element in the middle partition.\n        great = hi - 2;  // Last element in the middle partition.\n\n    // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n    // Object.prototype.valueOf; == and === do not, so in order to be consistent\n    // with natural order (such as for Date objects), we must do two compares.\n    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n    if (pivotsEqual) {\n\n      // Degenerated case where the partitioning becomes a dutch national flag\n      // problem.\n      //\n      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n      //  ^             ^          ^             ^            ^\n      // left         less         k           great         right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1) for x in ]left, less[ : x < pivot.\n      //   2) for x in [less, k[ : x == pivot.\n      //   3) for x in ]great, right[ : x > pivot.\n      for (var k = less; k <= great; ++k) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else if (xk > pivotValue1) {\n\n          // Find the first element <= pivot in the range [k - 1, great] and\n          // put [:ek:] there. We know that such an element must exist:\n          // When k == less, then el3 (which is equal to pivot) lies in the\n          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n          // Note that in the latter case invariant 2 will be violated for a\n          // short amount of time. The invariant will be restored when the\n          // pivots are put into their final positions.\n          while (true) {\n            var greatValue = f(a[great]);\n            if (greatValue > pivotValue1) {\n              great--;\n              // This is the only location in the while-loop where a new\n              // iteration is started.\n              continue;\n            } else if (greatValue < pivotValue1) {\n              // Triple exchange.\n              a[k] = a[less];\n              a[less++] = a[great];\n              a[great--] = ek;\n              break;\n            } else {\n              a[k] = a[great];\n              a[great--] = ek;\n              // Note: if great < k then we will exit the outer loop and fix\n              // invariant 2 (which we just violated).\n              break;\n            }\n          }\n        }\n      }\n    } else {\n\n      // We partition the list into three parts:\n      //  1. < pivot1\n      //  2. >= pivot1 && <= pivot2\n      //  3. > pivot2\n      //\n      // During the loop we have:\n      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n      //  ^            ^                        ^              ^             ^\n      // left         less                     k              great        right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1. for x in ]left, less[ : x < pivot1\n      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n      //   3. for x in ]great, right[ : x > pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else {\n          if (xk > pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] <= pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] >= pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Move pivots into their final positions.\n    // We shrunk the list from both sides (a[left] and a[right] have\n    // meaningless values in them) and now we move elements from the first\n    // and third partition into these locations so that we can store the\n    // pivots.\n    a[lo] = a[less - 1];\n    a[less - 1] = pivot1;\n    a[hi - 1] = a[great + 1];\n    a[great + 1] = pivot2;\n\n    // The list is now partitioned into three partitions:\n    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n    //  ^            ^                        ^             ^\n    // left         less                     great        right\n\n    // Recursive descent. (Don't include the pivot values.)\n    sort(a, lo, less - 1);\n    sort(a, great + 2, hi);\n\n    if (pivotsEqual) {\n      // All elements in the second partition are equal to the pivot. No\n      // need to sort them.\n      return a;\n    }\n\n    // In theory it should be enough to call _doSort recursively on the second\n    // partition.\n    // The Android source however removes the pivot elements from the recursive\n    // call if the second partition is too large (more than 2/3 of the list).\n    if (less < i1 && great > i5) {\n      var lessValue, greatValue;\n      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\n      while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\n\n      // Copy paste of the previous 3-way partitioning with adaptions.\n      //\n      // We partition the list into three parts:\n      //  1. == pivot1\n      //  2. > pivot1 && < pivot2\n      //  3. == pivot2\n      //\n      // During the loop we have:\n      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n      //              ^                      ^              ^\n      //            less                     k              great\n      //\n      // Invariants:\n      //   1. for x in [ *, less[ : x == pivot1\n      //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n      //   3. for x in ]great, * ] : x == pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk <= pivotValue1 && xk >= pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          less++;\n        } else {\n          if (xk <= pivotValue2 && xk >= pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] < pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] == pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // The second partition has now been cleared of pivot elements and looks\n    // as follows:\n    // [  *  |  > pivot1 && < pivot2  | * ]\n    //        ^                      ^\n    //       less                  great\n    // Sort the second partition using recursive descent.\n\n    // The second partition looks as follows:\n    // [  *  |  >= pivot1 && <= pivot2  | * ]\n    //        ^                        ^\n    //       less                    great\n    // Simply sort it by recursive descent.\n\n    return sort(a, less, great + 1);\n  }\n\n  return sort;\n}\n\nvar quicksort_sizeThreshold = 32;\nvar crossfilter_array8 = crossfilter_arrayUntyped,\n    crossfilter_array16 = crossfilter_arrayUntyped,\n    crossfilter_array32 = crossfilter_arrayUntyped,\n    crossfilter_arrayLengthen = crossfilter_arrayLengthenUntyped,\n    crossfilter_arrayWiden = crossfilter_arrayWidenUntyped;\n\nif (typeof Uint8Array !== \"undefined\") {\n  crossfilter_array8 = function(n) { return new Uint8Array(n); };\n  crossfilter_array16 = function(n) { return new Uint16Array(n); };\n  crossfilter_array32 = function(n) { return new Uint32Array(n); };\n\n  crossfilter_arrayLengthen = function(array, length) {\n    if (array.length >= length) return array;\n    var copy = new array.constructor(length);\n    copy.set(array);\n    return copy;\n  };\n\n  crossfilter_arrayWiden = function(array, width) {\n    var copy;\n    switch (width) {\n      case 16: copy = crossfilter_array16(array.length); break;\n      case 32: copy = crossfilter_array32(array.length); break;\n      default: throw new Error(\"invalid array width!\");\n    }\n    copy.set(array);\n    return copy;\n  };\n}\n\nfunction crossfilter_arrayUntyped(n) {\n  var array = new Array(n), i = -1;\n  while (++i < n) array[i] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayLengthenUntyped(array, length) {\n  var n = array.length;\n  while (n < length) array[n++] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayWidenUntyped(array, width) {\n  if (width > 32) throw new Error(\"invalid array width!\");\n  return array;\n}\nfunction crossfilter_filterExact(bisect, value) {\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n  };\n}\n\nfunction crossfilter_filterRange(bisect, range) {\n  var min = range[0],\n      max = range[1];\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n  };\n}\n\nfunction crossfilter_filterAll(values) {\n  return [0, values.length];\n}\nfunction crossfilter_null() {\n  return null;\n}\nfunction crossfilter_zero() {\n  return 0;\n}\nfunction crossfilter_reduceIncrement(p) {\n  return p + 1;\n}\n\nfunction crossfilter_reduceDecrement(p) {\n  return p - 1;\n}\n\nfunction crossfilter_reduceAdd(f) {\n  return function(p, v) {\n    return p + +f(v);\n  };\n}\n\nfunction crossfilter_reduceSubtract(f) {\n  return function(p, v) {\n    return p - f(v);\n  };\n}\nexports.crossfilter = crossfilter;\n\nfunction crossfilter() {\n  var crossfilter = {\n    add: add,\n    remove: removeData,\n    dimension: dimension,\n    groupAll: groupAll,\n    size: size\n  };\n\n  var data = [], // the records\n      n = 0, // the number of records; data.length\n      m = 0, // a bit mask representing which dimensions are in use\n      M = 8, // number of dimensions that can fit in `filters`\n      filters = crossfilter_array8(0), // M bits per record; 1 is filtered out\n      filterListeners = [], // when the filters change\n      dataListeners = [], // when data is added\n      removeDataListeners = []; // when data is removed\n\n  // Adds the specified new records to this crossfilter.\n  function add(newData) {\n    var n0 = n,\n        n1 = newData.length;\n\n    // If there's actually new data to add…\n    // Merge the new data into the existing data.\n    // Lengthen the filter bitset to handle the new records.\n    // Notify listeners (dimensions and groups) that new data is available.\n    if (n1) {\n      data = data.concat(newData);\n      filters = crossfilter_arrayLengthen(filters, n += n1);\n      dataListeners.forEach(function(l) { l(newData, n0, n1); });\n    }\n\n    return crossfilter;\n  }\n\n  // Removes all records that match the current filters.\n  function removeData() {\n    var newIndex = crossfilter_index(n, n),\n        removed = [];\n    for (var i = 0, j = 0; i < n; ++i) {\n      if (filters[i]) newIndex[i] = j++;\n      else removed.push(i);\n    }\n\n    // Remove all matching records from groups.\n    filterListeners.forEach(function(l) { l(0, [], removed); });\n\n    // Update indexes.\n    removeDataListeners.forEach(function(l) { l(newIndex); });\n\n    // Remove old filters and data by overwriting.\n    for (var i = 0, j = 0, k; i < n; ++i) {\n      if (k = filters[i]) {\n        if (i !== j) filters[j] = k, data[j] = data[i];\n        ++j;\n      }\n    }\n    data.length = j;\n    while (n > j) filters[--n] = 0;\n  }\n\n  // Adds a new dimension with the specified value accessor function.\n  function dimension(value) {\n    var dimension = {\n      filter: filter,\n      filterExact: filterExact,\n      filterRange: filterRange,\n      filterFunction: filterFunction,\n      filterAll: filterAll,\n      top: top,\n      bottom: bottom,\n      group: group,\n      groupAll: groupAll,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var one = ~m & -~m, // lowest unset bit as mask, e.g., 00001000\n        zero = ~one, // inverted one, e.g., 11110111\n        values, // sorted, cached array\n        index, // value rank ↦ object id\n        newValues, // temporary array storing newly-added values\n        newIndex, // temporary array storing newly-added index\n        sort = quicksort_by(function(i) { return newValues[i]; }),\n        refilter = crossfilter_filterAll, // for recomputing filter\n        refilterFunction, // the custom filter function in use\n        indexListeners = [], // when data is added\n        dimensionGroups = [],\n        lo0 = 0,\n        hi0 = 0;\n\n    // Updating a dimension is a two-stage process. First, we must update the\n    // associated filters for the newly-added records. Once all dimensions have\n    // updated their filters, the groups are notified to update.\n    dataListeners.unshift(preAdd);\n    dataListeners.push(postAdd);\n\n    removeDataListeners.push(removeData);\n\n    // Incorporate any existing data into this dimension, and make sure that the\n    // filter bitset is wide enough to handle the new dimension.\n    m |= one;\n    if (M >= 32 ? !one : m & -(1 << M)) {\n      filters = crossfilter_arrayWiden(filters, M <<= 1);\n    }\n    preAdd(data, 0, n);\n    postAdd(data, 0, n);\n\n    // Incorporates the specified new records into this dimension.\n    // This function is responsible for updating filters, values, and index.\n    function preAdd(newData, n0, n1) {\n\n      // Permute new values into natural order using a sorted index.\n      newValues = newData.map(value);\n      newIndex = sort(crossfilter_range(n1), 0, n1);\n      newValues = permute(newValues, newIndex);\n\n      // Bisect newValues to determine which new records are selected.\n      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1], i;\n      if (refilterFunction) {\n        for (i = 0; i < n1; ++i) {\n          if (!refilterFunction(newValues[i], i)) filters[newIndex[i] + n0] |= one;\n        }\n      } else {\n        for (i = 0; i < lo1; ++i) filters[newIndex[i] + n0] |= one;\n        for (i = hi1; i < n1; ++i) filters[newIndex[i] + n0] |= one;\n      }\n\n      // If this dimension previously had no data, then we don't need to do the\n      // more expensive merge operation; use the new values and index as-is.\n      if (!n0) {\n        values = newValues;\n        index = newIndex;\n        lo0 = lo1;\n        hi0 = hi1;\n        return;\n      }\n\n      var oldValues = values,\n          oldIndex = index,\n          i0 = 0,\n          i1 = 0;\n\n      // Otherwise, create new arrays into which to merge new and old.\n      values = new Array(n);\n      index = crossfilter_index(n, n);\n\n      // Merge the old and new sorted values, and old and new index.\n      for (i = 0; i0 < n0 && i1 < n1; ++i) {\n        if (oldValues[i0] < newValues[i1]) {\n          values[i] = oldValues[i0];\n          index[i] = oldIndex[i0++];\n        } else {\n          values[i] = newValues[i1];\n          index[i] = newIndex[i1++] + n0;\n        }\n      }\n\n      // Add any remaining old values.\n      for (; i0 < n0; ++i0, ++i) {\n        values[i] = oldValues[i0];\n        index[i] = oldIndex[i0];\n      }\n\n      // Add any remaining new values.\n      for (; i1 < n1; ++i1, ++i) {\n        values[i] = newValues[i1];\n        index[i] = newIndex[i1] + n0;\n      }\n\n      // Bisect again to recompute lo0 and hi0.\n      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // When all filters have updated, notify index listeners of the new values.\n    function postAdd(newData, n0, n1) {\n      indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\n      newValues = newIndex = null;\n    }\n\n    function removeData(reIndex) {\n      for (var i = 0, j = 0, k; i < n; ++i) {\n        if (filters[k = index[i]]) {\n          if (i !== j) values[j] = values[i];\n          index[j] = reIndex[k];\n          ++j;\n        }\n      }\n      values.length = j;\n      while (j < n) index[j++] = 0;\n\n      // Bisect again to recompute lo0 and hi0.\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // Updates the selected values based on the specified bounds [lo, hi].\n    // This implementation is used by all the public filter methods.\n    function filterIndexBounds(bounds) {\n      var lo1 = bounds[0],\n          hi1 = bounds[1];\n\n      if (refilterFunction) {\n        refilterFunction = null;\n        filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; });\n        lo0 = lo1;\n        hi0 = hi1;\n        return dimension;\n      }\n\n      var i,\n          j,\n          k,\n          added = [],\n          removed = [];\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      lo0 = lo1;\n      hi0 = hi1;\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n      return dimension;\n    }\n\n    // Filters this dimension using the specified range, value, or null.\n    // If the range is null, this is equivalent to filterAll.\n    // If the range is an array, this is equivalent to filterRange.\n    // Otherwise, this is equivalent to filterExact.\n    function filter(range) {\n      return range == null\n          ? filterAll() : Array.isArray(range)\n          ? filterRange(range) : typeof range === \"function\"\n          ? filterFunction(range)\n          : filterExact(range);\n    }\n\n    // Filters this dimension to select the exact value.\n    function filterExact(value) {\n      return filterIndexBounds((refilter = crossfilter_filterExact(bisect, value))(values));\n    }\n\n    // Filters this dimension to select the specified range [lo, hi].\n    // The lower bound is inclusive, and the upper bound is exclusive.\n    function filterRange(range) {\n      return filterIndexBounds((refilter = crossfilter_filterRange(bisect, range))(values));\n    }\n\n    // Clears any filters on this dimension.\n    function filterAll() {\n      return filterIndexBounds((refilter = crossfilter_filterAll)(values));\n    }\n\n    // Filters this dimension using an arbitrary function.\n    function filterFunction(f) {\n      refilter = crossfilter_filterAll;\n\n      filterIndexFunction(refilterFunction = f);\n\n      lo0 = 0;\n      hi0 = n;\n\n      return dimension;\n    }\n\n    function filterIndexFunction(f) {\n      var i,\n          k,\n          x,\n          added = [],\n          removed = [];\n\n      for (i = 0; i < n; ++i) {\n        if (!(filters[k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n          if (x) filters[k] &= zero, added.push(k);\n          else filters[k] |= one, removed.push(k);\n        }\n      }\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n    }\n\n    // Returns the top K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function top(k) {\n      var array = [],\n          i = hi0,\n          j;\n\n      while (--i >= lo0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n      }\n\n      return array;\n    }\n\n    // Returns the bottom K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function bottom(k) {\n      var array = [],\n          i = lo0,\n          j;\n\n      while (i < hi0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n        i++;\n      }\n\n      return array;\n    }\n\n    // Adds a new group to this dimension, using the specified key function.\n    function group(key) {\n      var group = {\n        top: top,\n        all: all,\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        order: order,\n        orderNatural: orderNatural,\n        size: size,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      // Ensure that this group will be removed when the dimension is removed.\n      dimensionGroups.push(group);\n\n      var groups, // array of {key, value}\n          groupIndex, // object id ↦ group id\n          groupWidth = 8,\n          groupCapacity = crossfilter_capacity(groupWidth),\n          k = 0, // cardinality\n          select,\n          heap,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          update = crossfilter_null,\n          reset = crossfilter_null,\n          resetNeeded = true,\n          groupAll = key === crossfilter_null;\n\n      if (arguments.length < 1) key = crossfilter_identity;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the associated reduce values. It must also listen to\n      // the parent dimension for when data is added, and compute new keys.\n      filterListeners.push(update);\n      indexListeners.push(add);\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into the grouping.\n      add(values, index, 0, n);\n\n      // Incorporates the specified new values into this group.\n      // This function is responsible for updating groups and groupIndex.\n      function add(newValues, newIndex, n0, n1) {\n        var oldGroups = groups,\n            reIndex = crossfilter_index(k, groupCapacity),\n            add = reduceAdd,\n            initial = reduceInitial,\n            k0 = k, // old cardinality\n            i0 = 0, // index of old group\n            i1 = 0, // index of new record\n            j, // object id\n            g0, // old group\n            x0, // old key\n            x1, // new key\n            g, // group to add\n            x; // key of group to add\n\n        // If a reset is needed, we don't need to update the reduce values.\n        if (resetNeeded) add = initial = crossfilter_null;\n\n        // Reset the new groups (k is a lower bound).\n        // Also, make sure that groupIndex exists and is long enough.\n        groups = new Array(k), k = 0;\n        groupIndex = k0 > 1 ? crossfilter_arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n\n        // Get the first old key (x0 of g0), if it exists.\n        if (k0) x0 = (g0 = oldGroups[0]).key;\n\n        // Find the first new key (x1), skipping NaN keys.\n        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\n\n        // While new keys remain…\n        while (i1 < n1) {\n\n          // Determine the lesser of the two current keys; new and old.\n          // If there are no old keys remaining, then always add the new key.\n          if (g0 && x0 <= x1) {\n            g = g0, x = x0;\n\n            // Record the new index of the old group.\n            reIndex[i0] = k;\n\n            // Retrieve the next old key.\n            if (g0 = oldGroups[++i0]) x0 = g0.key;\n          } else {\n            g = {key: x1, value: initial()}, x = x1;\n          }\n\n          // Add the lesser group.\n          groups[k] = g;\n\n          // Add any selected records belonging to the added group, while\n          // advancing the new key and populating the associated group index.\n          while (!(x1 > x)) {\n            groupIndex[j = newIndex[i1] + n0] = k;\n            if (!(filters[j] & zero)) g.value = add(g.value, data[j]);\n            if (++i1 >= n1) break;\n            x1 = key(newValues[i1]);\n          }\n\n          groupIncrement();\n        }\n\n        // Add any remaining old groups that were greater than all new keys.\n        // No incremental reduce is needed; these groups have no new records.\n        // Also record the new index of the old group.\n        while (i0 < k0) {\n          groups[reIndex[i0] = k] = oldGroups[i0++];\n          groupIncrement();\n        }\n\n        // If we added any new groups before any old groups,\n        // update the group index of all the old records.\n        if (k > i0) for (i0 = 0; i0 < n0; ++i0) {\n          groupIndex[i0] = reIndex[groupIndex[i0]];\n        }\n\n        // Modify the update and reset behavior based on the cardinality.\n        // If the cardinality is less than or equal to one, then the groupIndex\n        // is not needed. If the cardinality is zero, then there are no records\n        // and therefore no groups to update or reset. Note that we also must\n        // change the registered listener to point to the new method.\n        j = filterListeners.indexOf(update);\n        if (k > 1) {\n          update = updateMany;\n          reset = resetMany;\n        } else {\n          if (!k && groupAll) {\n            k = 1;\n            groups = [{key: null, value: initial()}];\n          }\n          if (k === 1) {\n            update = updateOne;\n            reset = resetOne;\n          } else {\n            update = crossfilter_null;\n            reset = crossfilter_null;\n          }\n          groupIndex = null;\n        }\n        filterListeners[j] = update;\n\n        // Count the number of added groups,\n        // and widen the group index as needed.\n        function groupIncrement() {\n          if (++k === groupCapacity) {\n            reIndex = crossfilter_arrayWiden(reIndex, groupWidth <<= 1);\n            groupIndex = crossfilter_arrayWiden(groupIndex, groupWidth);\n            groupCapacity = crossfilter_capacity(groupWidth);\n          }\n        }\n      }\n\n      function removeData() {\n        if (k > 1) {\n          var oldK = k,\n              oldGroups = groups,\n              seenGroups = crossfilter_index(oldK, oldK);\n\n          // Filter out non-matches by copying matching group index entries to\n          // the beginning of the array.\n          for (var i = 0, j = 0; i < n; ++i) {\n            if (filters[i]) {\n              seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n              ++j;\n            }\n          }\n\n          // Reassemble groups including only those groups that were referred\n          // to by matching group index entries.  Note the new group index in\n          // seenGroups.\n          groups = [], k = 0;\n          for (i = 0; i < oldK; ++i) {\n            if (seenGroups[i]) {\n              seenGroups[i] = k++;\n              groups.push(oldGroups[i]);\n            }\n          }\n\n          if (k > 1) {\n            // Reindex the group index using seenGroups to find the new index.\n            for (var i = 0; i < j; ++i) groupIndex[i] = seenGroups[groupIndex[i]];\n          } else {\n            groupIndex = null;\n          }\n          filterListeners[filterListeners.indexOf(update)] = k > 1\n              ? (reset = resetMany, update = updateMany)\n              : k === 1 ? (reset = resetOne, update = updateOne)\n              : reset = update = crossfilter_null;\n        } else if (k === 1) {\n          if (groupAll) return;\n          for (var i = 0; i < n; ++i) if (filters[i]) return;\n          groups = [], k = 0;\n          filterListeners[filterListeners.indexOf(update)] =\n          update = reset = crossfilter_null;\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is greater than 1.\n      function updateMany(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g;\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g = groups[groupIndex[k]];\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is 1.\n      function updateOne(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g = groups[0];\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is greater than 1.\n      function resetMany() {\n        var i,\n            g;\n\n        // Reset all group values.\n        for (i = 0; i < k; ++i) {\n          groups[i].value = reduceInitial();\n        }\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g = groups[groupIndex[i]];\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is 1.\n      function resetOne() {\n        var i,\n            g = groups[0];\n\n        // Reset the singleton group values.\n        g.value = reduceInitial();\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Returns the array of group values, in the dimension's natural order.\n      function all() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return groups;\n      }\n\n      // Returns a new array containing the top K group values, in reduce order.\n      function top(k) {\n        var top = select(all(), 0, groups.length, k);\n        return heap.sort(top, 0, top.length);\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce values, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Sets the reduce order, using the specified accessor.\n      function order(value) {\n        select = heapselect_by(valueOf);\n        heap = heap_by(valueOf);\n        function valueOf(d) { return value(d.value); }\n        return group;\n      }\n\n      // A convenience method for natural ordering by reduce value.\n      function orderNatural() {\n        return order(crossfilter_identity);\n      }\n\n      // Returns the cardinality of this group, irrespective of any filters.\n      function size() {\n        return k;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i, 1);\n        i = indexListeners.indexOf(add);\n        if (i >= 0) indexListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        return group;\n      }\n\n      return reduceCount().orderNatural();\n    }\n\n    // A convenience function for generating a singleton group.\n    function groupAll() {\n      var g = group(crossfilter_null), all = g.all;\n      delete g.all;\n      delete g.top;\n      delete g.order;\n      delete g.orderNatural;\n      delete g.size;\n      g.value = function() { return all()[0].value; };\n      return g;\n    }\n\n    // Removes this dimension and associated groups and event listeners.\n    function dispose() {\n      dimensionGroups.forEach(function(group) { group.dispose(); });\n      var i = dataListeners.indexOf(preAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = dataListeners.indexOf(postAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = removeDataListeners.indexOf(removeData);\n      if (i >= 0) removeDataListeners.splice(i, 1);\n      m &= zero;\n      return filterAll();\n    }\n\n    return dimension;\n  }\n\n  // A convenience method for groupAll on a dummy dimension.\n  // This implementation can be optimized since it always has cardinality 1.\n  function groupAll() {\n    var group = {\n      reduce: reduce,\n      reduceCount: reduceCount,\n      reduceSum: reduceSum,\n      value: value,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var reduceValue,\n        reduceAdd,\n        reduceRemove,\n        reduceInitial,\n        resetNeeded = true;\n\n    // The group listens to the crossfilter for when any dimension changes, so\n    // that it can update the reduce value. It must also listen to the parent\n    // dimension for when data is added.\n    filterListeners.push(update);\n    dataListeners.push(add);\n\n    // For consistency; actually a no-op since resetNeeded is true.\n    add(data, 0, n);\n\n    // Incorporates the specified new values into this group.\n    function add(newData, n0) {\n      var i;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = n0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Reduces the specified selected or deselected records.\n    function update(filterOne, added, removed) {\n      var i,\n          k,\n          n;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = 0, n = added.length; i < n; ++i) {\n        if (!filters[k = added[i]]) {\n          reduceValue = reduceAdd(reduceValue, data[k]);\n        }\n      }\n\n      // Remove the removed values.\n      for (i = 0, n = removed.length; i < n; ++i) {\n        if (filters[k = removed[i]] === filterOne) {\n          reduceValue = reduceRemove(reduceValue, data[k]);\n        }\n      }\n    }\n\n    // Recomputes the group reduce value from scratch.\n    function reset() {\n      var i;\n\n      reduceValue = reduceInitial();\n\n      for (i = 0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Sets the reduce behavior for this group to use the specified functions.\n    // This method lazily recomputes the reduce value, waiting until needed.\n    function reduce(add, remove, initial) {\n      reduceAdd = add;\n      reduceRemove = remove;\n      reduceInitial = initial;\n      resetNeeded = true;\n      return group;\n    }\n\n    // A convenience method for reducing by count.\n    function reduceCount() {\n      return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n    }\n\n    // A convenience method for reducing by sum(value).\n    function reduceSum(value) {\n      return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n    }\n\n    // Returns the computed reduce value.\n    function value() {\n      if (resetNeeded) reset(), resetNeeded = false;\n      return reduceValue;\n    }\n\n    // Removes this group and associated event listeners.\n    function dispose() {\n      var i = filterListeners.indexOf(update);\n      if (i >= 0) filterListeners.splice(i);\n      i = dataListeners.indexOf(add);\n      if (i >= 0) dataListeners.splice(i);\n      return group;\n    }\n\n    return reduceCount();\n  }\n\n  // Returns the number of records in this crossfilter, irrespective of any filters.\n  function size() {\n    return n;\n  }\n\n  return arguments.length\n      ? add(arguments[0])\n      : crossfilter;\n}\n\n// Returns an array of size n, big enough to store ids up to m.\nfunction crossfilter_index(n, m) {\n  return (m < 0x101\n      ? crossfilter_array8 : m < 0x10001\n      ? crossfilter_array16\n      : crossfilter_array32)(n);\n}\n\n// Constructs a new array of size n, with sequential values from 0 to n - 1.\nfunction crossfilter_range(n) {\n  var range = crossfilter_index(n, n);\n  for (var i = -1; ++i < n;) range[i] = i;\n  return range;\n}\n\nfunction crossfilter_capacity(w) {\n  return w === 8\n      ? 0x100 : w === 16\n      ? 0x10000\n      : 0x100000000;\n}\n})(typeof exports !== 'undefined' && exports || this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dc/node_modules/crossfilter2/crossfilter.js\n// module id = 273\n// module chunks = 0 1","'use strict';\n\nvar crossfilter_identity = require('./identity');\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\n\nmodule.exports = heap_by(crossfilter_identity);\nmodule.exports.by = heap_by;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/heap.js\n// module id = 274\n// module chunks = 0","'use strict';\n\nvar crossfilter_identity = require('./identity');\n\nfunction insertionsort_by(f) {\n\n  function insertionsort(a, lo, hi) {\n    for (var i = lo + 1; i < hi; ++i) {\n      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n        a[j] = a[j - 1];\n      }\n      a[j] = t;\n    }\n    return a;\n  }\n\n  return insertionsort;\n}\n\nmodule.exports = insertionsort_by(crossfilter_identity);\nmodule.exports.by = insertionsort_by;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/insertionsort.js\n// module id = 275\n// module chunks = 0","module.exports = require(\"./src/crossfilter\").crossfilter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/index.js\n// module id = 276\n// module chunks = 0","'use strict';\n\nvar xfilterArray = require('./array');\nvar xfilterFilter = require('./filter');\nvar crossfilter_identity = require('./identity');\nvar crossfilter_null = require('./null');\nvar crossfilter_zero = require('./zero');\nvar xfilterHeapselect = require('./heapselect');\nvar xfilterHeap = require('./heap');\nvar bisect = require('./bisect');\nvar insertionsort = require('./insertionsort');\nvar permute = require('./permute');\nvar quicksort = require('./quicksort');\nvar xfilterReduce = require('./reduce');\nvar packageJson = require('./../package.json'); // require own package.json for the version field\nvar result = require('lodash.result');\n// expose API exports\nexports.crossfilter = crossfilter;\nexports.crossfilter.heap = xfilterHeap;\nexports.crossfilter.heapselect = xfilterHeapselect;\nexports.crossfilter.bisect = bisect;\nexports.crossfilter.insertionsort = insertionsort;\nexports.crossfilter.permute = permute;\nexports.crossfilter.quicksort = quicksort;\nexports.crossfilter.version = packageJson.version; // please note use of \"package-json-versionify\" transform\n\nfunction crossfilter() {\n  var crossfilter = {\n    add: add,\n    remove: removeData,\n    dimension: dimension,\n    groupAll: groupAll,\n    size: size,\n    all: all,\n    allFiltered: allFiltered,\n    onChange: onChange,\n    isElementFiltered: isElementFiltered\n  };\n\n  var data = [], // the records\n      n = 0, // the number of records; data.length\n      filters, // 1 is filtered out\n      filterListeners = [], // when the filters change\n      dataListeners = [], // when data is added\n      removeDataListeners = [], // when data is removed\n      callbacks = [];\n\n  filters = new xfilterArray.bitarray(0);\n\n  // Adds the specified new records to this crossfilter.\n  function add(newData) {\n    var n0 = n,\n        n1 = newData.length;\n\n    // If there's actually new data to add…\n    // Merge the new data into the existing data.\n    // Lengthen the filter bitset to handle the new records.\n    // Notify listeners (dimensions and groups) that new data is available.\n    if (n1) {\n      data = data.concat(newData);\n      filters.lengthen(n += n1);\n      dataListeners.forEach(function(l) { l(newData, n0, n1); });\n      triggerOnChange('dataAdded');\n    }\n\n    return crossfilter;\n  }\n\n  // Removes all records that match the current filters.\n  function removeData() {\n    var newIndex = crossfilter_index(n, n),\n        removed = [];\n\n    for (var index1 = 0, index2 = 0; index1 < n; ++index1) {\n      if (!filters.zero(index1)) newIndex[index1] = index2++;\n      else removed.push(index1);\n    }\n\n    // Remove all matching records from groups.\n    filterListeners.forEach(function(l) { l(-1, -1, [], removed, true); });\n\n    // Update indexes.\n    removeDataListeners.forEach(function(l) { l(newIndex); });\n\n    // Remove old filters and data by overwriting.\n    for (var index3 = 0, index4 = 0; index3 < n; ++index3) {\n      if (!filters.zero(index3)) {\n        if (index3 !== index4) filters.copy(index4, index3), data[index4] = data[index3];\n        ++index4;\n      }\n    }\n\n    data.length = n = index4;\n    filters.truncate(index4);\n    triggerOnChange('dataRemoved');\n  }\n\n  // Return true if the data element at index i is filtered IN.\n  // Optionally, ignore the filters of any dimensions in the ignore_dimensions list.\n  function isElementFiltered(i, ignore_dimensions) {\n    var n,\n        d,\n        id,\n        len,\n        mask = Array(filters.subarrays);\n    for (n = 0; n < filters.subarrays; n++) { mask[n] = ~0; }\n    if (ignore_dimensions) {\n      for (d = 0, len = ignore_dimensions.length; d < len; d++) {\n        // The top bits of the ID are the subarray offset and the lower bits are the bit\n        // offset of the \"one\" mask.\n        id = ignore_dimensions[d].id();\n        mask[id >> 7] &= ~(0x1 << (id & 0x3f));\n      }\n    }\n    return filters.zeroExceptMask(i,mask);\n  }\n\n  // Adds a new dimension with the specified value accessor function.\n  function dimension(value, iterable) {\n\n    if (typeof value === 'string') {\n      var accessorPath = value;\n      value = function(d) { return result(d, accessorPath); };\n    }\n\n    var dimension = {\n      filter: filter,\n      filterExact: filterExact,\n      filterRange: filterRange,\n      filterFunction: filterFunction,\n      filterAll: filterAll,\n      top: top,\n      bottom: bottom,\n      group: group,\n      groupAll: groupAll,\n      dispose: dispose,\n      remove: dispose, // for backwards-compatibility\n      accessor: value,\n      id: function() { return id; }\n    };\n\n    var one, // lowest unset bit as mask, e.g., 00001000\n        zero, // inverted one, e.g., 11110111\n        offset, // offset into the filters arrays\n        id, // unique ID for this dimension (reused when dimensions are disposed)\n        values, // sorted, cached array\n        index, // value rank ↦ object id\n        newValues, // temporary array storing newly-added values\n        newIndex, // temporary array storing newly-added index\n        iterablesIndexCount,\n        newIterablesIndexCount,\n        iterablesIndexFilterStatus,\n        newIterablesIndexFilterStatus,\n        iterablesEmptyRows = [],\n        sort = quicksort.by(function(i) { return newValues[i]; }),\n        refilter = xfilterFilter.filterAll, // for recomputing filter\n        refilterFunction, // the custom filter function in use\n        indexListeners = [], // when data is added\n        dimensionGroups = [],\n        lo0 = 0,\n        hi0 = 0,\n        t = 0,\n        k;\n\n    // Updating a dimension is a two-stage process. First, we must update the\n    // associated filters for the newly-added records. Once all dimensions have\n    // updated their filters, the groups are notified to update.\n    dataListeners.unshift(preAdd);\n    dataListeners.push(postAdd);\n\n    removeDataListeners.push(removeData);\n\n    // Add a new dimension in the filter bitmap and store the offset and bitmask.\n    var tmp = filters.add();\n    offset = tmp.offset;\n    one = tmp.one;\n    zero = ~one;\n\n    // Create a unique ID for the dimension\n    // IDs will be re-used if dimensions are disposed.\n    // For internal use the ID is the subarray offset shifted left 7 bits or'd with the\n    // bit offset of the set bit in the dimension's \"one\" mask.\n    id = (offset << 7) | (Math.log(one) / Math.log(2));\n\n    preAdd(data, 0, n);\n    postAdd(data, 0, n);\n\n    // Incorporates the specified new records into this dimension.\n    // This function is responsible for updating filters, values, and index.\n    function preAdd(newData, n0, n1) {\n\n      if (iterable){\n        // Count all the values\n        t = 0;\n        j = 0;\n        k = [];\n\n        for (var i0 = 0; i0 < newData.length; i0++) {\n          for(j = 0, k = value(newData[i0]); j < k.length; j++) {\n            t++;\n          }\n        }\n\n        newValues = [];\n        newIterablesIndexCount = crossfilter_range(newData.length);\n        newIterablesIndexFilterStatus = crossfilter_index(t,1);\n        var unsortedIndex = crossfilter_range(t);\n\n        for (var l = 0, index1 = 0; index1 < newData.length; index1++) {\n          k = value(newData[index1])\n          //\n          if(!k.length){\n            newIterablesIndexCount[index1] = 0;\n            iterablesEmptyRows.push(index1 + n0);\n            continue;\n          }\n          newIterablesIndexCount[index1] = k.length\n          for (j = 0; j < k.length; j++) {\n            newValues.push(k[j]);\n            unsortedIndex[l] = index1;\n            l++;\n          }\n        }\n\n        // Create the Sort map used to sort both the values and the valueToData indices\n        var sortMap = sort(crossfilter_range(t), 0, t);\n\n        // Use the sortMap to sort the newValues\n        newValues = permute(newValues, sortMap);\n\n\n        // Use the sortMap to sort the unsortedIndex map\n        // newIndex should be a map of sortedValue -> crossfilterData\n        newIndex = permute(unsortedIndex, sortMap)\n\n      } else{\n        // Permute new values into natural order using a standard sorted index.\n        newValues = newData.map(value);\n        newIndex = sort(crossfilter_range(n1), 0, n1);\n        newValues = permute(newValues, newIndex);\n      }\n\n      if(iterable) {\n        n1 = t;\n      }\n\n      // Bisect newValues to determine which new records are selected.\n      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1];\n      if (refilterFunction) {\n        for (var index2 = 0; index2 < n1; ++index2) {\n          if (!refilterFunction(newValues[index2], index2)) {\n            filters[offset][newIndex[index2] + n0] |= one;\n            if(iterable) newIterablesIndexFilterStatus[index2] = 1;\n          }\n        }\n      } else {\n        for (var index3 = 0; index3 < lo1; ++index3) {\n          filters[offset][newIndex[index3] + n0] |= one;\n          if(iterable) newIterablesIndexFilterStatus[index3] = 1;\n        }\n        for (var index4 = hi1; index4 < n1; ++index4) {\n          filters[offset][newIndex[index4] + n0] |= one;\n          if(iterable) newIterablesIndexFilterStatus[index4] = 1;\n        }\n      }\n\n      // If this dimension previously had no data, then we don't need to do the\n      // more expensive merge operation; use the new values and index as-is.\n      if (!n0) {\n        values = newValues;\n        index = newIndex;\n        iterablesIndexCount = newIterablesIndexCount;\n        iterablesIndexFilterStatus = newIterablesIndexFilterStatus;\n        lo0 = lo1;\n        hi0 = hi1;\n        return;\n      }\n\n\n\n      var oldValues = values,\n        oldIndex = index,\n        oldIterablesIndexFilterStatus = iterablesIndexFilterStatus,\n        old_n0,\n        i1 = 0;\n\n      i0 = 0;\n\n      if(iterable){\n        old_n0 = n0\n        n0 = oldValues.length;\n        n1 = t\n      }\n\n      // Otherwise, create new arrays into which to merge new and old.\n      values = iterable ? new Array(n0 + n1) : new Array(n);\n      index = iterable ? new Array(n0 + n1) : crossfilter_index(n, n);\n      if(iterable) iterablesIndexFilterStatus = crossfilter_index(n0 + n1, 1);\n\n      // Concatenate the newIterablesIndexCount onto the old one.\n      if(iterable) {\n        var oldiiclength = iterablesIndexCount.length;\n        iterablesIndexCount = xfilterArray.arrayLengthen(iterablesIndexCount, n);\n        for(var j=0; j+oldiiclength < n; j++) {\n          iterablesIndexCount[j+oldiiclength] = newIterablesIndexCount[j];\n        }\n      }\n\n      // Merge the old and new sorted values, and old and new index.\n      var index5 = 0;\n      for (; i0 < n0 && i1 < n1; ++index5) {\n        if (oldValues[i0] < newValues[i1]) {\n          values[index5] = oldValues[i0];\n          if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];\n          index[index5] = oldIndex[i0++];\n        } else {\n          values[index5] = newValues[i1];\n          if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];\n          index[index5] = newIndex[i1++] + (iterable ? old_n0 : n0);\n        }\n      }\n\n      // Add any remaining old values.\n      for (; i0 < n0; ++i0, ++index5) {\n        values[index5] = oldValues[i0];\n        if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];\n        index[index5] = oldIndex[i0];\n      }\n\n      // Add any remaining new values.\n      for (; i1 < n1; ++i1, ++index5) {\n        values[index5] = newValues[i1];\n        if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];\n        index[index5] = newIndex[i1] + (iterable ? old_n0 : n0);\n      }\n\n      // Bisect again to recompute lo0 and hi0.\n      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // When all filters have updated, notify index listeners of the new values.\n    function postAdd(newData, n0, n1) {\n      indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\n      newValues = newIndex = null;\n    }\n\n    function removeData(reIndex) {\n      for (var i = 0, j = 0, k; i < n; ++i) {\n        if (!filters.zero(k = index[i])) {\n          if (i !== j) values[j] = values[i];\n          index[j] = reIndex[k];\n          ++j;\n        }\n      }\n      values.length = j;\n      while (j < n) index[j++] = 0;\n\n      // Bisect again to recompute lo0 and hi0.\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // Updates the selected values based on the specified bounds [lo, hi].\n    // This implementation is used by all the public filter methods.\n    function filterIndexBounds(bounds) {\n\n      var lo1 = bounds[0],\n          hi1 = bounds[1];\n\n      if (refilterFunction) {\n        refilterFunction = null;\n        filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; }, bounds[0] === 0 && bounds[1] === index.length);\n        lo0 = lo1;\n        hi0 = hi1;\n        return dimension;\n      }\n\n      var i,\n          j,\n          k,\n          added = [],\n          removed = [],\n          valueIndexAdded = [],\n          valueIndexRemoved = [];\n\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          added.push(index[i]);\n          valueIndexAdded.push(i);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          removed.push(index[i]);\n          valueIndexRemoved.push(i);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          added.push(index[i]);\n          valueIndexAdded.push(i);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          removed.push(index[i]);\n          valueIndexRemoved.push(i);\n        }\n      }\n\n      if(!iterable) {\n        // Flip filters normally.\n\n        for(i=0; i<added.length; i++) {\n          filters[offset][added[i]] ^= one;\n        }\n\n        for(i=0; i<removed.length; i++) {\n          filters[offset][removed[i]] ^= one;\n        }\n\n      } else {\n        // For iterables, we need to figure out if the row has been completely removed vs partially included\n        // Only count a row as added if it is not already being aggregated. Only count a row\n        // as removed if the last element being aggregated is removed.\n\n        var newAdded = [];\n        var newRemoved = [];\n        for (i = 0; i < added.length; i++) {\n          iterablesIndexCount[added[i]]++\n          iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;\n          if(iterablesIndexCount[added[i]] === 1) {\n            filters[offset][added[i]] ^= one;\n            newAdded.push(added[i]);\n          }\n        }\n        for (i = 0; i < removed.length; i++) {\n          iterablesIndexCount[removed[i]]--\n          iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;\n          if(iterablesIndexCount[removed[i]] === 0) {\n            filters[offset][removed[i]] ^= one;\n            newRemoved.push(removed[i]);\n          }\n        }\n\n        added = newAdded;\n        removed = newRemoved;\n\n        // Now handle empty rows.\n        if(bounds[0] === 0 && bounds[1] === index.length) {\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if((filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was not in the filter, so set the filter and add\n              filters[offset][k] ^= one;\n              added.push(k);\n            }\n          }\n        } else {\n          // filter in place - remove empty rows if necessary\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was in the filter, so set the filter and remove\n              filters[offset][k] ^= one;\n              removed.push(k);\n            }\n          }\n        }\n      }\n\n      lo0 = lo1;\n      hi0 = hi1;\n      filterListeners.forEach(function(l) { l(one, offset, added, removed); });\n      triggerOnChange('filtered');\n      return dimension;\n    }\n\n    // Filters this dimension using the specified range, value, or null.\n    // If the range is null, this is equivalent to filterAll.\n    // If the range is an array, this is equivalent to filterRange.\n    // Otherwise, this is equivalent to filterExact.\n    function filter(range) {\n      return range == null\n          ? filterAll() : Array.isArray(range)\n          ? filterRange(range) : typeof range === \"function\"\n          ? filterFunction(range)\n          : filterExact(range);\n    }\n\n    // Filters this dimension to select the exact value.\n    function filterExact(value) {\n      return filterIndexBounds((refilter = xfilterFilter.filterExact(bisect, value))(values));\n    }\n\n    // Filters this dimension to select the specified range [lo, hi].\n    // The lower bound is inclusive, and the upper bound is exclusive.\n    function filterRange(range) {\n      return filterIndexBounds((refilter = xfilterFilter.filterRange(bisect, range))(values));\n    }\n\n    // Clears any filters on this dimension.\n    function filterAll() {\n      return filterIndexBounds((refilter = xfilterFilter.filterAll)(values));\n    }\n\n    // Filters this dimension using an arbitrary function.\n    function filterFunction(f) {\n      refilterFunction = f;\n      refilter = xfilterFilter.filterAll;\n\n      filterIndexFunction(f, false);\n\n      lo0 = 0;\n      hi0 = n;\n\n      return dimension;\n    }\n\n    function filterIndexFunction(f, filterAll) {\n      var i,\n          k,\n          x,\n          added = [],\n          removed = [],\n          valueIndexAdded = [],\n          valueIndexRemoved = [],\n          indexLength = index.length;\n\n      if(!iterable) {\n        for (i = 0; i < indexLength; ++i) {\n          if (!(filters[offset][k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n            if (x) added.push(k);\n            else removed.push(k);\n          }\n        }\n      }\n\n      if(iterable) {\n        for(i=0; i < indexLength; ++i) {\n          if(f(values[i], i)) {\n            added.push(index[i]);\n            valueIndexAdded.push(i);\n          } else {\n            removed.push(index[i]);\n            valueIndexRemoved.push(i);\n          }\n        }\n      }\n\n      if(!iterable) {\n        for(i=0; i<added.length; i++) {\n          if(filters[offset][added[i]] & one) filters[offset][added[i]] &= zero;\n        }\n\n        for(i=0; i<removed.length; i++) {\n          if(!(filters[offset][removed[i]] & one)) filters[offset][removed[i]] |= one;\n        }\n      } else {\n\n        var newAdded = [];\n        var newRemoved = [];\n        for (i = 0; i < added.length; i++) {\n          // First check this particular value needs to be added\n          if(iterablesIndexFilterStatus[valueIndexAdded[i]] === 1) {\n            iterablesIndexCount[added[i]]++\n            iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;\n            if(iterablesIndexCount[added[i]] === 1) {\n              filters[offset][added[i]] ^= one;\n              newAdded.push(added[i]);\n            }\n          }\n        }\n        for (i = 0; i < removed.length; i++) {\n          // First check this particular value needs to be removed\n          if(iterablesIndexFilterStatus[valueIndexRemoved[i]] === 0) {\n            iterablesIndexCount[removed[i]]--\n            iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;\n            if(iterablesIndexCount[removed[i]] === 0) {\n              filters[offset][removed[i]] ^= one;\n              newRemoved.push(removed[i]);\n            }\n          }\n        }\n\n        added = newAdded;\n        removed = newRemoved;\n\n        // Now handle empty rows.\n        if(filterAll) {\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if((filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was not in the filter, so set the filter and add\n              filters[offset][k] ^= one;\n              added.push(k);\n            }\n          }\n        } else {\n          // filter in place - remove empty rows if necessary\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was in the filter, so set the filter and remove\n              filters[offset][k] ^= one;\n              removed.push(k);\n            }\n          }\n        }\n      }\n\n      filterListeners.forEach(function(l) { l(one, offset, added, removed); });\n      triggerOnChange('filtered');\n    }\n\n    // Returns the top K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function top(k, top_offset) {\n      var array = [],\n          i = hi0,\n          j,\n          toSkip = 0;\n\n      if(top_offset && top_offset > 0) toSkip = top_offset;\n\n      while (--i >= lo0 && k > 0) {\n        if (filters.zero(j = index[i])) {\n          if(toSkip > 0) {\n            //skip matching row\n            --toSkip;\n          } else {\n            array.push(data[j]);\n            --k;\n          }\n        }\n      }\n\n      if(iterable){\n        for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {\n          // Add row with empty iterable column at the end\n          if(filters.zero(j = iterablesEmptyRows[i])) {\n            if(toSkip > 0) {\n              //skip matching row\n              --toSkip;\n            } else {\n              array.push(data[j]);\n              --k;\n            }\n          }\n        }\n      }\n\n      return array;\n    }\n\n    // Returns the bottom K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function bottom(k, bottom_offset) {\n      var array = [],\n          i,\n          j,\n          toSkip = 0;\n\n      if(bottom_offset && bottom_offset > 0) toSkip = bottom_offset;\n\n      if(iterable) {\n        // Add row with empty iterable column at the top\n        for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {\n          if(filters.zero(j = iterablesEmptyRows[i])) {\n            if(toSkip > 0) {\n              //skip matching row\n              --toSkip;\n            } else {\n              array.push(data[j]);\n              --k;\n            }\n          }\n        }\n      }\n\n      i = lo0;\n\n      while (i < hi0 && k > 0) {\n        if (filters.zero(j = index[i])) {\n          if(toSkip > 0) {\n            //skip matching row\n            --toSkip;\n          } else {\n            array.push(data[j]);\n            --k;\n          }\n        }\n        i++;\n      }\n\n      return array;\n    }\n\n    // Adds a new group to this dimension, using the specified key function.\n    function group(key) {\n      var group = {\n        top: top,\n        all: all,\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        order: order,\n        orderNatural: orderNatural,\n        size: size,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      // Ensure that this group will be removed when the dimension is removed.\n      dimensionGroups.push(group);\n\n      var groups, // array of {key, value}\n          groupIndex, // object id ↦ group id\n          groupWidth = 8,\n          groupCapacity = crossfilter_capacity(groupWidth),\n          k = 0, // cardinality\n          select,\n          heap,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          update = crossfilter_null,\n          reset = crossfilter_null,\n          resetNeeded = true,\n          groupAll = key === crossfilter_null,\n          n0old;\n\n      if (arguments.length < 1) key = crossfilter_identity;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the associated reduce values. It must also listen to\n      // the parent dimension for when data is added, and compute new keys.\n      filterListeners.push(update);\n      indexListeners.push(add);\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into the grouping.\n      add(values, index, 0, n);\n\n      // Incorporates the specified new values into this group.\n      // This function is responsible for updating groups and groupIndex.\n      function add(newValues, newIndex, n0, n1) {\n\n        if(iterable) {\n          n0old = n0\n          n0 = values.length - newValues.length\n          n1 = newValues.length;\n        }\n\n        var oldGroups = groups,\n            reIndex = iterable ? [] : crossfilter_index(k, groupCapacity),\n            add = reduceAdd,\n            remove = reduceRemove,\n            initial = reduceInitial,\n            k0 = k, // old cardinality\n            i0 = 0, // index of old group\n            i1 = 0, // index of new record\n            j, // object id\n            g0, // old group\n            x0, // old key\n            x1, // new key\n            g, // group to add\n            x; // key of group to add\n\n        // If a reset is needed, we don't need to update the reduce values.\n        if (resetNeeded) add = initial = crossfilter_null;\n        if (resetNeeded) remove = initial = crossfilter_null;\n\n        // Reset the new groups (k is a lower bound).\n        // Also, make sure that groupIndex exists and is long enough.\n        groups = new Array(k), k = 0;\n        if(iterable){\n          groupIndex = k0 > 1 ? groupIndex : [];\n        }\n        else{\n          groupIndex = k0 > 1 ? xfilterArray.arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n        }\n\n\n        // Get the first old key (x0 of g0), if it exists.\n        if (k0) x0 = (g0 = oldGroups[0]).key;\n\n        // Find the first new key (x1), skipping NaN keys.\n        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\n\n        // While new keys remain…\n        while (i1 < n1) {\n\n          // Determine the lesser of the two current keys; new and old.\n          // If there are no old keys remaining, then always add the new key.\n          if (g0 && x0 <= x1) {\n            g = g0, x = x0;\n\n            // Record the new index of the old group.\n            reIndex[i0] = k;\n\n            // Retrieve the next old key.\n            g0 = oldGroups[++i0];\n            if (g0) x0 = g0.key;\n          } else {\n            g = {key: x1, value: initial()}, x = x1;\n          }\n\n          // Add the lesser group.\n          groups[k] = g;\n\n          // Add any selected records belonging to the added group, while\n          // advancing the new key and populating the associated group index.\n\n          while (x1 <= x) {\n            j = newIndex[i1] + (iterable ? n0old : n0)\n\n\n            if(iterable){\n              if(groupIndex[j]){\n                groupIndex[j].push(k)\n              }\n              else{\n                groupIndex[j] = [k]\n              }\n            }\n            else{\n              groupIndex[j] = k;\n            }\n\n            // Always add new values to groups. Only remove when not in filter.\n            // This gives groups full information on data life-cycle.\n            g.value = add(g.value, data[j], true);\n            if (!filters.zeroExcept(j, offset, zero)) g.value = remove(g.value, data[j], false);\n            if (++i1 >= n1) break;\n            x1 = key(newValues[i1]);\n          }\n\n          groupIncrement();\n        }\n\n        // Add any remaining old groups that were greater th1an all new keys.\n        // No incremental reduce is needed; these groups have no new records.\n        // Also record the new index of the old group.\n        while (i0 < k0) {\n          groups[reIndex[i0] = k] = oldGroups[i0++];\n          groupIncrement();\n        }\n\n\n        // Fill in gaps with empty arrays where there may have been rows with empty iterables\n        if(iterable){\n          for (var index1 = 0; index1 < n; index1++) {\n            if(!groupIndex[index1]){\n              groupIndex[index1] = [];\n            }\n          }\n        }\n\n        // If we added any new groups before any old groups,\n        // update the group index of all the old records.\n        if(k > i0){\n          if(iterable){\n            groupIndex = permute(groupIndex, reIndex, true)\n          }\n          else{\n            for (i0 = 0; i0 < n0; ++i0) {\n              groupIndex[i0] = reIndex[groupIndex[i0]];\n            }\n          }\n        }\n\n        // Modify the update and reset behavior based on the cardinality.\n        // If the cardinality is less than or equal to one, then the groupIndex\n        // is not needed. If the cardinality is zero, then there are no records\n        // and therefore no groups to update or reset. Note that we also must\n        // change the registered listener to point to the new method.\n        j = filterListeners.indexOf(update);\n        if (k > 1) {\n          update = updateMany;\n          reset = resetMany;\n        } else {\n          if (!k && groupAll) {\n            k = 1;\n            groups = [{key: null, value: initial()}];\n          }\n          if (k === 1) {\n            update = updateOne;\n            reset = resetOne;\n          } else {\n            update = crossfilter_null;\n            reset = crossfilter_null;\n          }\n          groupIndex = null;\n        }\n        filterListeners[j] = update;\n\n        // Count the number of added groups,\n        // and widen the group index as needed.\n        function groupIncrement() {\n          if(iterable){\n            k++\n            return\n          }\n          if (++k === groupCapacity) {\n            reIndex = xfilterArray.arrayWiden(reIndex, groupWidth <<= 1);\n            groupIndex = xfilterArray.arrayWiden(groupIndex, groupWidth);\n            groupCapacity = crossfilter_capacity(groupWidth);\n          }\n        }\n      }\n\n      function removeData() {\n        if (k > 1) {\n          var oldK = k,\n              oldGroups = groups,\n              seenGroups = crossfilter_index(oldK, oldK);\n\n          // Filter out non-matches by copying matching group index entries to\n          // the beginning of the array.\n          for (var i = 0, j = 0; i < n; ++i) {\n            if (!filters.zero(i)) {\n              seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n              ++j;\n            }\n          }\n\n          // Reassemble groups including only those groups that were referred\n          // to by matching group index entries.  Note the new group index in\n          // seenGroups.\n          groups = [], k = 0;\n          for (i = 0; i < oldK; ++i) {\n            if (seenGroups[i]) {\n              seenGroups[i] = k++;\n              groups.push(oldGroups[i]);\n            }\n          }\n\n          if (k > 1) {\n            // Reindex the group index using seenGroups to find the new index.\n            for (var index2 = 0; index2 < j; ++index2) groupIndex[index2] = seenGroups[groupIndex[index2]];\n          } else {\n            groupIndex = null;\n          }\n          filterListeners[filterListeners.indexOf(update)] = k > 1\n              ? (reset = resetMany, update = updateMany)\n              : k === 1 ? (reset = resetOne, update = updateOne)\n              : reset = update = crossfilter_null;\n        } else if (k === 1) {\n          if (groupAll) return;\n          for (var index3 = 0; index3 < n; ++index3) if (!filters.zero(index3)) return;\n          groups = [], k = 0;\n          filterListeners[filterListeners.indexOf(update)] =\n          update = reset = crossfilter_null;\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is greater than 1.\n      // notFilter indicates a crossfilter.add/remove operation.\n      function updateMany(filterOne, filterOffset, added, removed, notFilter) {\n\n        if ((filterOne === one && filterOffset === offset) || resetNeeded) return;\n\n        var i,\n            j,\n            k,\n            n,\n            g;\n\n        if(iterable){\n          // Add the added values.\n          for (i = 0, n = added.length; i < n; ++i) {\n            if (filters.zeroExcept(k = added[i], offset, zero)) {\n              for (j = 0; j < groupIndex[k].length; j++) {\n                g = groups[groupIndex[k][j]];\n                g.value = reduceAdd(g.value, data[k], false, j);\n              }\n            }\n          }\n\n          // Remove the removed values.\n          for (i = 0, n = removed.length; i < n; ++i) {\n            if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n              for (j = 0; j < groupIndex[k].length; j++) {\n                g = groups[groupIndex[k][j]];\n                g.value = reduceRemove(g.value, data[k], notFilter, j);\n              }\n            }\n          }\n          return;\n        }\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (filters.zeroExcept(k = added[i], offset, zero)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceAdd(g.value, data[k], false);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceRemove(g.value, data[k], notFilter);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is 1.\n      // notFilter indicates a crossfilter.add/remove operation.\n      function updateOne(filterOne, filterOffset, added, removed, notFilter) {\n        if ((filterOne === one && filterOffset === offset) || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g = groups[0];\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (filters.zeroExcept(k = added[i], offset, zero)) {\n            g.value = reduceAdd(g.value, data[k], false);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n            g.value = reduceRemove(g.value, data[k], notFilter);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is greater than 1.\n      function resetMany() {\n        var i,\n            j,\n            g;\n\n        // Reset all group values.\n        for (i = 0; i < k; ++i) {\n          groups[i].value = reduceInitial();\n        }\n\n        // We add all records and then remove filtered records so that reducers\n        // can build an 'unfiltered' view even if there are already filters in\n        // place on other dimensions.\n        if(iterable){\n          for (i = 0; i < n; ++i) {\n            for (j = 0; j < groupIndex[i].length; j++) {\n              g = groups[groupIndex[i][j]];\n              g.value = reduceAdd(g.value, data[i], true, j);\n            }\n          }\n          for (i = 0; i < n; ++i) {\n            if (!filters.zeroExcept(i, offset, zero)) {\n              for (j = 0; j < groupIndex[i].length; j++) {\n                g = groups[groupIndex[i][j]];\n                g.value = reduceRemove(g.value, data[i], false, j);\n              }\n            }\n          }\n          return;\n        }\n\n        for (i = 0; i < n; ++i) {\n          g = groups[groupIndex[i]];\n          g.value = reduceAdd(g.value, data[i], true);\n        }\n        for (i = 0; i < n; ++i) {\n          if (!filters.zeroExcept(i, offset, zero)) {\n            g = groups[groupIndex[i]];\n            g.value = reduceRemove(g.value, data[i], false);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is 1.\n      function resetOne() {\n        var i,\n            g = groups[0];\n\n        // Reset the singleton group values.\n        g.value = reduceInitial();\n\n        // We add all records and then remove filtered records so that reducers\n        // can build an 'unfiltered' view even if there are already filters in\n        // place on other dimensions.\n        for (i = 0; i < n; ++i) {\n          g.value = reduceAdd(g.value, data[i], true);\n        }\n\n        for (i = 0; i < n; ++i) {\n          if (!filters.zeroExcept(i, offset, zero)) {\n            g.value = reduceRemove(g.value, data[i], false);\n          }\n        }\n      }\n\n      // Returns the array of group values, in the dimension's natural order.\n      function all() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return groups;\n      }\n\n      // Returns a new array containing the top K group values, in reduce order.\n      function top(k) {\n        var top = select(all(), 0, groups.length, k);\n        return heap.sort(top, 0, top.length);\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce values, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Sets the reduce order, using the specified accessor.\n      function order(value) {\n        select = xfilterHeapselect.by(valueOf);\n        heap = xfilterHeap.by(valueOf);\n        function valueOf(d) { return value(d.value); }\n        return group;\n      }\n\n      // A convenience method for natural ordering by reduce value.\n      function orderNatural() {\n        return order(crossfilter_identity);\n      }\n\n      // Returns the cardinality of this group, irrespective of any filters.\n      function size() {\n        return k;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i, 1);\n        i = indexListeners.indexOf(add);\n        if (i >= 0) indexListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        return group;\n      }\n\n      return reduceCount().orderNatural();\n    }\n\n    // A convenience function for generating a singleton group.\n    function groupAll() {\n      var g = group(crossfilter_null), all = g.all;\n      delete g.all;\n      delete g.top;\n      delete g.order;\n      delete g.orderNatural;\n      delete g.size;\n      g.value = function() { return all()[0].value; };\n      return g;\n    }\n\n    // Removes this dimension and associated groups and event listeners.\n    function dispose() {\n      dimensionGroups.forEach(function(group) { group.dispose(); });\n      var i = dataListeners.indexOf(preAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = dataListeners.indexOf(postAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = removeDataListeners.indexOf(removeData);\n      if (i >= 0) removeDataListeners.splice(i, 1);\n      filters.masks[offset] &= zero;\n      return filterAll();\n    }\n\n    return dimension;\n  }\n\n  // A convenience method for groupAll on a dummy dimension.\n  // This implementation can be optimized since it always has cardinality 1.\n  function groupAll() {\n    var group = {\n      reduce: reduce,\n      reduceCount: reduceCount,\n      reduceSum: reduceSum,\n      value: value,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var reduceValue,\n        reduceAdd,\n        reduceRemove,\n        reduceInitial,\n        resetNeeded = true;\n\n    // The group listens to the crossfilter for when any dimension changes, so\n    // that it can update the reduce value. It must also listen to the parent\n    // dimension for when data is added.\n    filterListeners.push(update);\n    dataListeners.push(add);\n\n    // For consistency; actually a no-op since resetNeeded is true.\n    add(data, 0, n);\n\n    // Incorporates the specified new values into this group.\n    function add(newData, n0) {\n      var i;\n\n      if (resetNeeded) return;\n\n      // Cycle through all the values.\n      for (i = n0; i < n; ++i) {\n\n        // Add all values all the time.\n        reduceValue = reduceAdd(reduceValue, data[i], true);\n\n        // Remove the value if filtered.\n        if (!filters.zero(i)) {\n          reduceValue = reduceRemove(reduceValue, data[i], false);\n        }\n      }\n    }\n\n    // Reduces the specified selected or deselected records.\n    function update(filterOne, filterOffset, added, removed, notFilter) {\n      var i,\n          k,\n          n;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = 0, n = added.length; i < n; ++i) {\n        if (filters.zero(k = added[i])) {\n          reduceValue = reduceAdd(reduceValue, data[k], notFilter);\n        }\n      }\n\n      // Remove the removed values.\n      for (i = 0, n = removed.length; i < n; ++i) {\n        if (filters.only(k = removed[i], filterOffset, filterOne)) {\n          reduceValue = reduceRemove(reduceValue, data[k], notFilter);\n        }\n      }\n    }\n\n    // Recomputes the group reduce value from scratch.\n    function reset() {\n      var i;\n\n      reduceValue = reduceInitial();\n\n      // Cycle through all the values.\n      for (i = 0; i < n; ++i) {\n\n        // Add all values all the time.\n        reduceValue = reduceAdd(reduceValue, data[i], true);\n\n        // Remove the value if it is filtered.\n        if (!filters.zero(i)) {\n          reduceValue = reduceRemove(reduceValue, data[i], false);\n        }\n      }\n    }\n\n    // Sets the reduce behavior for this group to use the specified functions.\n    // This method lazily recomputes the reduce value, waiting until needed.\n    function reduce(add, remove, initial) {\n      reduceAdd = add;\n      reduceRemove = remove;\n      reduceInitial = initial;\n      resetNeeded = true;\n      return group;\n    }\n\n    // A convenience method for reducing by count.\n    function reduceCount() {\n      return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, crossfilter_zero);\n    }\n\n    // A convenience method for reducing by sum(value).\n    function reduceSum(value) {\n      return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), crossfilter_zero);\n    }\n\n    // Returns the computed reduce value.\n    function value() {\n      if (resetNeeded) reset(), resetNeeded = false;\n      return reduceValue;\n    }\n\n    // Removes this group and associated event listeners.\n    function dispose() {\n      var i = filterListeners.indexOf(update);\n      if (i >= 0) filterListeners.splice(i);\n      i = dataListeners.indexOf(add);\n      if (i >= 0) dataListeners.splice(i);\n      return group;\n    }\n\n    return reduceCount();\n  }\n\n  // Returns the number of records in this crossfilter, irrespective of any filters.\n  function size() {\n    return n;\n  }\n\n  // Returns the raw row data contained in this crossfilter\n  function all(){\n    return data;\n  }\n\n  // Returns row data with all dimension filters applied\n  function allFiltered() {\n    var array = [],\n        i = 0;\n\n      for (i = 0; i < n; i++) {\n        if (filters.zero(i)) {\n          array.push(data[i]);\n        }\n      }\n\n      return array;\n  }\n\n  function onChange(cb){\n    if(typeof cb !== 'function'){\n      /* eslint no-console: 0 */\n      console.warn('onChange callback parameter must be a function!');\n      return;\n    }\n    callbacks.push(cb);\n    return function(){\n      callbacks.splice(callbacks.indexOf(cb), 1);\n    };\n  }\n\n  function triggerOnChange(eventName){\n    for (var i = 0; i < callbacks.length; i++) {\n      callbacks[i](eventName);\n    }\n  }\n\n  return arguments.length\n      ? add(arguments[0])\n      : crossfilter;\n}\n\n// Returns an array of size n, big enough to store ids up to m.\nfunction crossfilter_index(n, m) {\n  return (m < 0x101\n      ? xfilterArray.array8 : m < 0x10001\n      ? xfilterArray.array16\n      : xfilterArray.array32)(n);\n}\n\n// Constructs a new array of size n, with sequential values from 0 to n - 1.\nfunction crossfilter_range(n) {\n  var range = crossfilter_index(n, n);\n  for (var i = -1; ++i < n;) range[i] = i;\n  return range;\n}\n\nfunction crossfilter_capacity(w) {\n  return w === 8\n      ? 0x100 : w === 16\n      ? 0x10000\n      : 0x100000000;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/crossfilter.js\n// module id = 277\n// module chunks = 0","if (typeof Uint8Array !== \"undefined\") {\n  var crossfilter_array8 = function(n) { return new Uint8Array(n); };\n  var crossfilter_array16 = function(n) { return new Uint16Array(n); };\n  var crossfilter_array32 = function(n) { return new Uint32Array(n); };\n\n  var crossfilter_arrayLengthen = function(array, length) {\n    if (array.length >= length) return array;\n    var copy = new array.constructor(length);\n    copy.set(array);\n    return copy;\n  };\n\n  var crossfilter_arrayWiden = function(array, width) {\n    var copy;\n    switch (width) {\n      case 16: copy = crossfilter_array16(array.length); break;\n      case 32: copy = crossfilter_array32(array.length); break;\n      default: throw new Error(\"invalid array width!\");\n    }\n    copy.set(array);\n    return copy;\n  };\n}\n\nfunction crossfilter_arrayUntyped(n) {\n  var array = new Array(n), i = -1;\n  while (++i < n) array[i] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayLengthenUntyped(array, length) {\n  var n = array.length;\n  while (n < length) array[n++] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayWidenUntyped(array, width) {\n  if (width > 32) throw new Error(\"invalid array width!\");\n  return array;\n}\n\n// An arbitrarily-wide array of bitmasks\nfunction crossfilter_bitarray(n) {\n  this.length = n;\n  this.subarrays = 1;\n  this.width = 8;\n  this.masks = {\n    0: 0\n  }\n\n  this[0] = crossfilter_array8(n);\n}\n\ncrossfilter_bitarray.prototype.lengthen = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    this[i] = crossfilter_arrayLengthen(this[i], n);\n  }\n  this.length = n;\n};\n\n// Reserve a new bit index in the array, returns {offset, one}\ncrossfilter_bitarray.prototype.add = function() {\n  var m, w, one, i, len;\n\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    m = this.masks[i];\n    w = this.width - (32 * i);\n    one = ~m & -~m;\n\n    if (w >= 32 && !one) {\n      continue;\n    }\n\n    if (w < 32 && (one & (1 << w))) {\n      // widen this subarray\n      this[i] = crossfilter_arrayWiden(this[i], w <<= 1);\n      this.width = 32 * i + w;\n    }\n\n    this.masks[i] |= one;\n\n    return {\n      offset: i,\n      one: one\n    };\n  }\n\n  // add a new subarray\n  this[this.subarrays] = crossfilter_array8(this.length);\n  this.masks[this.subarrays] = 1;\n  this.width += 8;\n  return {\n    offset: this.subarrays++,\n    one: 1\n  };\n};\n\n// Copy record from index src to index dest\ncrossfilter_bitarray.prototype.copy = function(dest, src) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    this[i][dest] = this[i][src];\n  }\n};\n\n// Truncate the array to the given length\ncrossfilter_bitarray.prototype.truncate = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    for (var j = this.length - 1; j >= n; j--) {\n      this[i][j] = 0;\n    }\n    this[i].length = n;\n  }\n  this.length = n;\n};\n\n// Checks that all bits for the given index are 0\ncrossfilter_bitarray.prototype.zero = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that all bits for the given index are 0 except for possibly one\ncrossfilter_bitarray.prototype.zeroExcept = function(n, offset, zero) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (i === offset ? this[i][n] & zero : this[i][n]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that all bits for the given indez are 0 except for the specified mask.\n// The mask should be an array of the same size as the filter subarrays width.\ncrossfilter_bitarray.prototype.zeroExceptMask = function(n, mask) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n] & mask[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Checks that only the specified bit is set for the given index\ncrossfilter_bitarray.prototype.only = function(n, offset, one) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n] != (i === offset ? one : 0)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that only the specified bit is set for the given index except for possibly one other\ncrossfilter_bitarray.prototype.onlyExcept = function(n, offset, zero, onlyOffset, onlyOne) {\n  var mask;\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    mask = this[i][n];\n    if (i === offset)\n      mask &= zero;\n    if (mask != (i === onlyOffset ? onlyOne : 0)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  array8: crossfilter_arrayUntyped,\n  array16: crossfilter_arrayUntyped,\n  array32: crossfilter_arrayUntyped,\n  arrayLengthen: crossfilter_arrayLengthenUntyped,\n  arrayWiden: crossfilter_arrayWidenUntyped,\n  bitarray: crossfilter_bitarray\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/array.js\n// module id = 278\n// module chunks = 0","'use strict';\n\nfunction crossfilter_filterExact(bisect, value) {\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n  };\n}\n\nfunction crossfilter_filterRange(bisect, range) {\n  var min = range[0],\n      max = range[1];\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n  };\n}\n\nfunction crossfilter_filterAll(values) {\n  return [0, values.length];\n}\n\nmodule.exports = {\n  filterExact: crossfilter_filterExact,\n  filterRange: crossfilter_filterRange,\n  filterAll: crossfilter_filterAll\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/filter.js\n// module id = 279\n// module chunks = 0","'use strict';\n\nfunction crossfilter_null() {\n  return null;\n}\n\nmodule.exports = crossfilter_null;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/null.js\n// module id = 280\n// module chunks = 0","'use strict';\n\nfunction crossfilter_zero() {\n  return 0;\n}\n\nmodule.exports = crossfilter_zero;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/zero.js\n// module id = 281\n// module chunks = 0","'use strict';\n\nvar crossfilter_identity = require('./identity');\nvar xFilterHeap = require('./heap');\n\nfunction heapselect_by(f) {\n  var heap = xFilterHeap.by(f);\n\n  // Returns a new array containing the top k elements in the array a[lo:hi].\n  // The returned array is not sorted, but maintains the heap property. If k is\n  // greater than hi - lo, then fewer than k elements will be returned. The\n  // order of elements in a is unchanged by this operation.\n  function heapselect(a, lo, hi, k) {\n    var queue = new Array(k = Math.min(hi - lo, k)),\n        min,\n        i,\n        d;\n\n    for (i = 0; i < k; ++i) queue[i] = a[lo++];\n    heap(queue, 0, k);\n\n    if (lo < hi) {\n      min = f(queue[0]);\n      do {\n        if (f(d = a[lo]) > min) {\n          queue[0] = d;\n          min = f(heap(queue, 0, k)[0]);\n        }\n      } while (++lo < hi);\n    }\n\n    return queue;\n  }\n\n  return heapselect;\n}\n\nmodule.exports = heapselect_by(crossfilter_identity);\nmodule.exports.by = heapselect_by; // assign the raw function to the export as well\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/heapselect.js\n// module id = 282\n// module chunks = 0","'use strict';\n\nvar crossfilter_identity = require('./identity');\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\n\nmodule.exports = bisect_by(crossfilter_identity);\nmodule.exports.by = bisect_by; // assign the raw function to the export as well\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/bisect.js\n// module id = 283\n// module chunks = 0","'use strict';\n\nfunction permute(array, index, deep) {\n  for (var i = 0, n = index.length, copy = deep ? JSON.parse(JSON.stringify(array)) : new Array(n); i < n; ++i) {\n    copy[i] = array[index[i]];\n  }\n  return copy;\n}\n\nmodule.exports = permute;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/permute.js\n// module id = 284\n// module chunks = 0","var crossfilter_identity = require('./identity');\nvar xFilterInsertionsort = require('./insertionsort');\n\n// Algorithm designed by Vladimir Yaroslavskiy.\n// Implementation based on the Dart project; see NOTICE and AUTHORS for details.\n\nfunction quicksort_by(f) {\n  var insertionsort = xFilterInsertionsort.by(f);\n\n  function sort(a, lo, hi) {\n    return (hi - lo < quicksort_sizeThreshold\n        ? insertionsort\n        : quicksort)(a, lo, hi);\n  }\n\n  function quicksort(a, lo, hi) {\n    // Compute the two pivots by looking at 5 elements.\n    var sixth = (hi - lo) / 6 | 0,\n        i1 = lo + sixth,\n        i5 = hi - 1 - sixth,\n        i3 = lo + hi - 1 >> 1,  // The midpoint.\n        i2 = i3 - sixth,\n        i4 = i3 + sixth;\n\n    var e1 = a[i1], x1 = f(e1),\n        e2 = a[i2], x2 = f(e2),\n        e3 = a[i3], x3 = f(e3),\n        e4 = a[i4], x4 = f(e4),\n        e5 = a[i5], x5 = f(e5);\n\n    var t;\n\n    // Sort the selected 5 elements using a sorting network.\n    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n    var pivot1 = e2, pivotValue1 = x2,\n        pivot2 = e4, pivotValue2 = x4;\n\n    // e2 and e4 have been saved in the pivot variables. They will be written\n    // back, once the partitioning is finished.\n    a[i1] = e1;\n    a[i2] = a[lo];\n    a[i3] = e3;\n    a[i4] = a[hi - 1];\n    a[i5] = e5;\n\n    var less = lo + 1,   // First element in the middle partition.\n        great = hi - 2;  // Last element in the middle partition.\n\n    // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n    // Object.prototype.valueOf; == and === do not, so in order to be consistent\n    // with natural order (such as for Date objects), we must do two compares.\n    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n    if (pivotsEqual) {\n\n      // Degenerated case where the partitioning becomes a dutch national flag\n      // problem.\n      //\n      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n      //  ^             ^          ^             ^            ^\n      // left         less         k           great         right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1) for x in ]left, less[ : x < pivot.\n      //   2) for x in [less, k[ : x == pivot.\n      //   3) for x in ]great, right[ : x > pivot.\n      for (var k = less; k <= great; ++k) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else if (xk > pivotValue1) {\n\n          // Find the first element <= pivot in the range [k - 1, great] and\n          // put [:ek:] there. We know that such an element must exist:\n          // When k == less, then el3 (which is equal to pivot) lies in the\n          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n          // Note that in the latter case invariant 2 will be violated for a\n          // short amount of time. The invariant will be restored when the\n          // pivots are put into their final positions.\n          /* eslint no-constant-condition: 0 */\n          while (true) {\n            var greatValue = f(a[great]);\n            if (greatValue > pivotValue1) {\n              great--;\n              // This is the only location in the while-loop where a new\n              // iteration is started.\n              continue;\n            } else if (greatValue < pivotValue1) {\n              // Triple exchange.\n              a[k] = a[less];\n              a[less++] = a[great];\n              a[great--] = ek;\n              break;\n            } else {\n              a[k] = a[great];\n              a[great--] = ek;\n              // Note: if great < k then we will exit the outer loop and fix\n              // invariant 2 (which we just violated).\n              break;\n            }\n          }\n        }\n      }\n    } else {\n\n      // We partition the list into three parts:\n      //  1. < pivot1\n      //  2. >= pivot1 && <= pivot2\n      //  3. > pivot2\n      //\n      // During the loop we have:\n      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n      //  ^            ^                        ^              ^             ^\n      // left         less                     k              great        right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1. for x in ]left, less[ : x < pivot1\n      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n      //   3. for x in ]great, right[ : x > pivot2\n      (function () { // isolate scope\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else {\n          if (xk > pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] <= pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] >= pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n      })(); // isolate scope\n    }\n\n    // Move pivots into their final positions.\n    // We shrunk the list from both sides (a[left] and a[right] have\n    // meaningless values in them) and now we move elements from the first\n    // and third partition into these locations so that we can store the\n    // pivots.\n    a[lo] = a[less - 1];\n    a[less - 1] = pivot1;\n    a[hi - 1] = a[great + 1];\n    a[great + 1] = pivot2;\n\n    // The list is now partitioned into three partitions:\n    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n    //  ^            ^                        ^             ^\n    // left         less                     great        right\n\n    // Recursive descent. (Don't include the pivot values.)\n    sort(a, lo, less - 1);\n    sort(a, great + 2, hi);\n\n    if (pivotsEqual) {\n      // All elements in the second partition are equal to the pivot. No\n      // need to sort them.\n      return a;\n    }\n\n    // In theory it should be enough to call _doSort recursively on the second\n    // partition.\n    // The Android source however removes the pivot elements from the recursive\n    // call if the second partition is too large (more than 2/3 of the list).\n    if (less < i1 && great > i5) {\n\n      (function () { // isolate scope\n      var lessValue, greatValue;\n      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\n      while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\n\n      // Copy paste of the previous 3-way partitioning with adaptions.\n      //\n      // We partition the list into three parts:\n      //  1. == pivot1\n      //  2. > pivot1 && < pivot2\n      //  3. == pivot2\n      //\n      // During the loop we have:\n      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n      //              ^                      ^              ^\n      //            less                     k              great\n      //\n      // Invariants:\n      //   1. for x in [ *, less[ : x == pivot1\n      //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n      //   3. for x in ]great, * ] : x == pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk <= pivotValue1 && xk >= pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          less++;\n        } else {\n          if (xk <= pivotValue2 && xk >= pivotValue2) {\n            /* eslint no-constant-condition: 0 */\n            while (true) {\n              greatValue = f(a[great]);\n              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] < pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] == pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n      })(); // isolate scope\n\n    }\n\n    // The second partition has now been cleared of pivot elements and looks\n    // as follows:\n    // [  *  |  > pivot1 && < pivot2  | * ]\n    //        ^                      ^\n    //       less                  great\n    // Sort the second partition using recursive descent.\n\n    // The second partition looks as follows:\n    // [  *  |  >= pivot1 && <= pivot2  | * ]\n    //        ^                        ^\n    //       less                    great\n    // Simply sort it by recursive descent.\n\n    return sort(a, less, great + 1);\n  }\n\n  return sort;\n}\n\nvar quicksort_sizeThreshold = 32;\n\nmodule.exports = quicksort_by(crossfilter_identity);\nmodule.exports.by = quicksort_by;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/quicksort.js\n// module id = 285\n// module chunks = 0","'use strict';\n\nfunction crossfilter_reduceIncrement(p) {\n  return p + 1;\n}\n\nfunction crossfilter_reduceDecrement(p) {\n  return p - 1;\n}\n\nfunction crossfilter_reduceAdd(f) {\n  return function(p, v) {\n    return p + +f(v);\n  };\n}\n\nfunction crossfilter_reduceSubtract(f) {\n  return function(p, v) {\n    return p - f(v);\n  };\n}\n\nmodule.exports = {\n  reduceIncrement: crossfilter_reduceIncrement,\n  reduceDecrement: crossfilter_reduceDecrement,\n  reduceAdd: crossfilter_reduceAdd,\n  reduceSubtract: crossfilter_reduceSubtract\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/reduce.js\n// module id = 286\n// module chunks = 0","module.exports = {\"_from\":\"crossfilter2\",\"_id\":\"crossfilter2@1.4.1\",\"_inBundle\":false,\"_integrity\":\"sha512-0ykBoUMRMMUUq5aBZk0Dn+pZgD+3a3KuUKRRCi5a/jxlnkwpu9B5FZM4BEaK5j9gUXF8BTDJXr/zIbM4Gi7Wig==\",\"_location\":\"/crossfilter2\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"crossfilter2\",\"name\":\"crossfilter2\",\"escapedName\":\"crossfilter2\",\"rawSpec\":\"\",\"saveSpec\":null,\"fetchSpec\":\"latest\"},\"_requiredBy\":[\"#USER\",\"/\"],\"_resolved\":\"https://registry.npmjs.org/crossfilter2/-/crossfilter2-1.4.1.tgz\",\"_shasum\":\"068100767d1ee46290ebce1b053e6968bee61344\",\"_spec\":\"crossfilter2\",\"_where\":\"D:\\\\projects\\\\personal-blog\",\"author\":{\"name\":\"Mike Bostock\",\"url\":\"http://bost.ocks.org/mike\"},\"bugs\":{\"url\":\"https://github.com/crossfilter/crossfilter/issues\"},\"bundleDependencies\":false,\"contributors\":[{\"name\":\"Jason Davies\",\"url\":\"http://www.jasondavies.com/\"}],\"dependencies\":{\"lodash.result\":\"^4.4.0\"},\"deprecated\":false,\"description\":\"Fast multidimensional filtering for coordinated views.\",\"devDependencies\":{\"browserify\":\"^13.0.0\",\"d3\":\"3.5\",\"eslint\":\"2.10.2\",\"package-json-versionify\":\"1.0.2\",\"semver\":\"^5.3.0\",\"uglify-js\":\"2.4.0\",\"vows\":\"0.7.0\"},\"eslintConfig\":{\"env\":{\"browser\":true,\"node\":true},\"globals\":{\"Uint8Array\":true,\"Uint16Array\":true,\"Uint32Array\":true},\"extends\":\"eslint:recommended\"},\"files\":[\"src\",\"index.js\",\"crossfilter.js\",\"crossfilter.min.js\"],\"homepage\":\"http://crossfilter.github.com/crossfilter/\",\"keywords\":[\"analytics\",\"visualization\",\"crossfilter\"],\"license\":\"Apache-2.0\",\"main\":\"./index.js\",\"maintainers\":[{\"name\":\"Gordon Woodhull\",\"url\":\"https://github.com/gordonwoodhull\"},{\"name\":\"Tanner Linsley\",\"url\":\"https://github.com/tannerlinsley\"},{\"name\":\"Ethan Jewett\",\"url\":\"https://github.com/esjewett\"}],\"name\":\"crossfilter2\",\"repository\":{\"type\":\"git\",\"url\":\"git+ssh://git@github.com/crossfilter/crossfilter.git\"},\"scripts\":{\"benchmark\":\"node test/benchmark.js\",\"build\":\"browserify index.js -t package-json-versionify --standalone crossfilter -o crossfilter.js && uglifyjs --compress --mangle --screw-ie8 crossfilter.js -o crossfilter.min.js\",\"clean\":\"rm -f crossfilter.js crossfilter.min.js\",\"test\":\"vows --verbose && eslint src/\"},\"version\":\"1.4.1\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/package.json\n// module id = 287\n// module chunks = 0","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * This method is like `_.get` except that if the resolved value is a\n * function it's invoked with the `this` binding of its parent object and\n * its result is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to resolve.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n *\n * _.result(object, 'a[0].b.c1');\n * // => 3\n *\n * _.result(object, 'a[0].b.c2');\n * // => 4\n *\n * _.result(object, 'a[0].b.c3', 'default');\n * // => 'default'\n *\n * _.result(object, 'a[0].b.c3', _.constant('default'));\n * // => 'default'\n */\nfunction result(object, path, defaultValue) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = -1,\n      length = path.length;\n\n  // Ensure the loop is entered when path is empty.\n  if (!length) {\n    object = undefined;\n    length = 1;\n  }\n  while (++index < length) {\n    var value = object == null ? undefined : object[toKey(path[index])];\n    if (value === undefined) {\n      index = length;\n      value = defaultValue;\n    }\n    object = isFunction(value) ? value.call(object) : value;\n  }\n  return object;\n}\n\nmodule.exports = result;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash.result/index.js\n// module id = 288\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../css-loader/index.js??ref--1-oneOf-2-2!../postcss-loader/lib/index.js??postcss!./dc.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../css-loader/index.js??ref--1-oneOf-2-2!../postcss-loader/lib/index.js??postcss!./dc.css\", function() {\n\t\t\tvar newContent = require(\"!!../css-loader/index.js??ref--1-oneOf-2-2!../postcss-loader/lib/index.js??postcss!./dc.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dc/dc.css\n// module id = 289\n// module chunks = 0","exports = module.exports = require(\"../css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".dc-chart path.dc-symbol,.dc-legend g.dc-legend-item.fadeout{fill-opacity:.5;stroke-opacity:.5}div.dc-chart{float:left}.dc-chart rect.bar{stroke:none;cursor:pointer}.dc-chart rect.bar:hover{fill-opacity:.5}.dc-chart rect.deselected{stroke:none;fill:#ccc}.dc-chart .pie-slice{fill:#fff;font-size:12px;cursor:pointer}.dc-chart .pie-slice.external{fill:#000}.dc-chart .pie-slice.highlight,.dc-chart .pie-slice :hover{fill-opacity:.8}.dc-chart .pie-path{fill:none;stroke-width:2px;stroke:#000;opacity:.4}.dc-chart .selected circle,.dc-chart .selected path{stroke-width:3;stroke:#ccc;fill-opacity:1}.dc-chart .deselected circle,.dc-chart .deselected path{stroke:none;fill-opacity:.5;fill:#ccc}.dc-chart .axis line,.dc-chart .axis path{fill:none;stroke:#000;shape-rendering:crispEdges}.dc-chart .axis text{font:10px sans-serif}.dc-chart .axis .grid-line,.dc-chart .axis .grid-line line,.dc-chart .grid-line,.dc-chart .grid-line line{fill:none;stroke:#ccc;opacity:.5;shape-rendering:crispEdges}.dc-chart .brush rect.background{z-index:-999}.dc-chart .brush rect.extent{fill:#4682b4;fill-opacity:.125}.dc-chart .brush .resize path{fill:#eee;stroke:#666}.dc-chart path.line{fill:none;stroke-width:1.5px}.dc-chart path.area{fill-opacity:.3;stroke:none}.dc-chart path.highlight{stroke-width:3;fill-opacity:1;stroke-opacity:1}.dc-chart g.state{cursor:pointer}.dc-chart g.state :hover{fill-opacity:.8}.dc-chart g.state path{stroke:#fff}.dc-chart g.deselected path{fill:gray}.dc-chart g.deselected text{display:none}.dc-chart g.row rect{fill-opacity:.8;cursor:pointer}.dc-chart g.row rect:hover{fill-opacity:.6}.dc-chart g.row text{fill:#fff;font-size:12px;cursor:pointer}.dc-chart g.dc-tooltip path{fill:none;stroke:gray;stroke-opacity:.8}.dc-chart g.county path{stroke:#fff;fill:none}.dc-chart g.debug rect{fill:#00f;fill-opacity:.2}.dc-chart g.axis text{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none}.dc-chart .node{font-size:.7em;cursor:pointer}.dc-chart .node :hover{fill-opacity:.8}.dc-chart .bubble{stroke:none;fill-opacity:.6}.dc-chart .highlight{fill-opacity:1;stroke-opacity:1}.dc-chart .fadeout{fill-opacity:.2;stroke-opacity:.2}.dc-chart .box text{font:10px sans-serif;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none}.dc-chart .box circle,.dc-chart .box line{fill:#fff}.dc-chart .box circle,.dc-chart .box line,.dc-chart .box rect{stroke:#000;stroke-width:1.5px}.dc-chart .box .center{stroke-dasharray:3,3}.dc-chart .box .outlier{fill:none;stroke:#ccc}.dc-chart .box.deselected{opacity:.5}.dc-chart .box.deselected .box{fill:#ccc}.dc-chart .symbol{stroke:none}.dc-chart .heatmap .box-group.deselected rect{stroke:none;fill-opacity:.5;fill:#ccc}.dc-chart .heatmap g.axis text{pointer-events:all;cursor:pointer}.dc-chart .empty-chart .pie-slice{cursor:default}.dc-chart .empty-chart .pie-slice path{fill:#fee;cursor:default}.dc-chart circle.dot{stroke:none}.dc-data-count{float:right;margin-top:15px;margin-right:15px}.dc-data-count .filter-count,.dc-data-count .total-count{color:#3182bd;font-weight:700}.dc-legend{font-size:11px}.dc-legend .dc-legend-item{cursor:pointer}.dc-hard .number-display{float:none}\", \"\", {\"version\":3,\"sources\":[\"D:/projects/personal-blog/node_modules/dc/dc.css\"],\"names\":[],\"mappings\":\"AAAA,6DACE,gBAAkB,AAClB,iBAAoB,CAAE,AAExB,aACE,UAAY,CAAE,AAEhB,mBACE,YAAa,AACb,cAAgB,CAAE,AAClB,yBACE,eAAiB,CAAE,AAEvB,0BACE,YAAa,AACb,SAAW,CAAE,AAEf,qBACE,UAAW,AACX,eAAgB,AAChB,cAAgB,CAAE,AAClB,8BACE,SAAW,CAAE,AACf,2DACE,eAAiB,CAAE,AAEvB,oBACE,UAAW,AACX,iBAAkB,AAClB,YAAa,AACb,UAAa,CAAE,AAEjB,oDACE,eAAgB,AAChB,YAAa,AACb,cAAgB,CAAE,AAEpB,wDACE,YAAa,AACb,gBAAiB,AACjB,SAAW,CAAE,AAEf,0CACE,UAAW,AACX,YAAa,AACb,0BAA4B,CAAE,AAEhC,qBACE,oBAAsB,CAAE,AAE1B,0GACE,UAAW,AACX,YAAa,AACb,WAAY,AACZ,0BAA4B,CAAE,AAEhC,iCACE,YAAc,CAAE,AAElB,6BACE,aAAc,AACd,iBAAmB,CAAE,AAEvB,8BACE,UAAW,AACX,WAAa,CAAE,AAEjB,oBACE,UAAW,AACX,kBAAoB,CAAE,AAExB,oBACE,gBAAiB,AACjB,WAAa,CAAE,AAEjB,yBACE,eAAgB,AAChB,eAAgB,AAChB,gBAAkB,CAAE,AAEtB,kBACE,cAAgB,CAAE,AAClB,yBACE,eAAiB,CAAE,AACrB,uBACE,WAAa,CAAE,AAEnB,4BACE,SAAc,CAAE,AAElB,4BACE,YAAc,CAAE,AAElB,qBACE,gBAAkB,AAClB,cAAgB,CAAE,AAClB,2BACE,eAAkB,CAAE,AAExB,qBACE,UAAW,AACX,eAAgB,AAChB,cAAgB,CAAE,AAEpB,4BACE,UAAW,AACX,YAAgB,AAChB,iBAAmB,CAAE,AAEvB,wBACE,YAAa,AACb,SAAW,CAAE,AAEf,uBACE,UAAW,AACX,eAAiB,CAAE,AAErB,sBACE,2BAA4B,AAC5B,yBAA0B,AAC1B,sBAAuB,AACvB,qBAAsB,AACtB,iBAAkB,AAClB,mBAAqB,CAAE,AAEzB,gBACE,eAAiB,AACjB,cAAgB,CAAE,AAClB,uBACE,eAAiB,CAAE,AAEvB,kBACE,YAAa,AACb,eAAkB,CAAE,AAEtB,qBACE,eAAgB,AAChB,gBAAkB,CAAE,AAEtB,mBACE,gBAAkB,AAClB,iBAAoB,CAAE,AAExB,oBACE,qBAAsB,AACtB,2BAA4B,AAC5B,yBAA0B,AAC1B,sBAAuB,AACvB,qBAAsB,AACtB,iBAAkB,AAClB,mBAAqB,CAAE,AAEzB,0CACE,SAAW,CAAE,AAEf,8DACE,YAAa,AACb,kBAAoB,CAAE,AAExB,uBACE,oBAAuB,CAAE,AAE3B,wBACE,UAAW,AACX,WAAa,CAAE,AAEjB,0BACE,UAAa,CAAE,AACf,+BACE,SAAW,CAAE,AAEjB,kBACE,WAAa,CAAE,AAEjB,8CACE,YAAa,AACb,gBAAkB,AAClB,SAAW,CAAE,AAEf,+BACE,mBAAoB,AACpB,cAAgB,CAAE,AAEpB,kCACE,cAAgB,CAAE,AAClB,uCACE,UAAW,AACX,cAAgB,CAAE,AAEtB,qBACE,WAAa,CAAE,AAEjB,eACE,YAAa,AACb,gBAAiB,AACjB,iBAAmB,CAAE,AACrB,yDACE,cAAe,AACf,eAAkB,CAAE,AAExB,WACE,cAAgB,CAAE,AAClB,2BACE,cAAgB,CAAE,AAEtB,yBACE,UAAY,CAAE\",\"file\":\"dc.css\",\"sourcesContent\":[\".dc-chart path.dc-symbol, .dc-legend g.dc-legend-item.fadeout {\\n  fill-opacity: 0.5;\\n  stroke-opacity: 0.5; }\\n\\ndiv.dc-chart {\\n  float: left; }\\n\\n.dc-chart rect.bar {\\n  stroke: none;\\n  cursor: pointer; }\\n  .dc-chart rect.bar:hover {\\n    fill-opacity: .5; }\\n\\n.dc-chart rect.deselected {\\n  stroke: none;\\n  fill: #ccc; }\\n\\n.dc-chart .pie-slice {\\n  fill: #fff;\\n  font-size: 12px;\\n  cursor: pointer; }\\n  .dc-chart .pie-slice.external {\\n    fill: #000; }\\n  .dc-chart .pie-slice :hover, .dc-chart .pie-slice.highlight {\\n    fill-opacity: .8; }\\n\\n.dc-chart .pie-path {\\n  fill: none;\\n  stroke-width: 2px;\\n  stroke: #000;\\n  opacity: 0.4; }\\n\\n.dc-chart .selected path, .dc-chart .selected circle {\\n  stroke-width: 3;\\n  stroke: #ccc;\\n  fill-opacity: 1; }\\n\\n.dc-chart .deselected path, .dc-chart .deselected circle {\\n  stroke: none;\\n  fill-opacity: .5;\\n  fill: #ccc; }\\n\\n.dc-chart .axis path, .dc-chart .axis line {\\n  fill: none;\\n  stroke: #000;\\n  shape-rendering: crispEdges; }\\n\\n.dc-chart .axis text {\\n  font: 10px sans-serif; }\\n\\n.dc-chart .grid-line, .dc-chart .axis .grid-line, .dc-chart .grid-line line, .dc-chart .axis .grid-line line {\\n  fill: none;\\n  stroke: #ccc;\\n  opacity: .5;\\n  shape-rendering: crispEdges; }\\n\\n.dc-chart .brush rect.background {\\n  z-index: -999; }\\n\\n.dc-chart .brush rect.extent {\\n  fill: #4682b4;\\n  fill-opacity: .125; }\\n\\n.dc-chart .brush .resize path {\\n  fill: #eee;\\n  stroke: #666; }\\n\\n.dc-chart path.line {\\n  fill: none;\\n  stroke-width: 1.5px; }\\n\\n.dc-chart path.area {\\n  fill-opacity: .3;\\n  stroke: none; }\\n\\n.dc-chart path.highlight {\\n  stroke-width: 3;\\n  fill-opacity: 1;\\n  stroke-opacity: 1; }\\n\\n.dc-chart g.state {\\n  cursor: pointer; }\\n  .dc-chart g.state :hover {\\n    fill-opacity: .8; }\\n  .dc-chart g.state path {\\n    stroke: #fff; }\\n\\n.dc-chart g.deselected path {\\n  fill: #808080; }\\n\\n.dc-chart g.deselected text {\\n  display: none; }\\n\\n.dc-chart g.row rect {\\n  fill-opacity: 0.8;\\n  cursor: pointer; }\\n  .dc-chart g.row rect:hover {\\n    fill-opacity: 0.6; }\\n\\n.dc-chart g.row text {\\n  fill: #fff;\\n  font-size: 12px;\\n  cursor: pointer; }\\n\\n.dc-chart g.dc-tooltip path {\\n  fill: none;\\n  stroke: #808080;\\n  stroke-opacity: .8; }\\n\\n.dc-chart g.county path {\\n  stroke: #fff;\\n  fill: none; }\\n\\n.dc-chart g.debug rect {\\n  fill: #00f;\\n  fill-opacity: .2; }\\n\\n.dc-chart g.axis text {\\n  -webkit-touch-callout: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n  pointer-events: none; }\\n\\n.dc-chart .node {\\n  font-size: 0.7em;\\n  cursor: pointer; }\\n  .dc-chart .node :hover {\\n    fill-opacity: .8; }\\n\\n.dc-chart .bubble {\\n  stroke: none;\\n  fill-opacity: 0.6; }\\n\\n.dc-chart .highlight {\\n  fill-opacity: 1;\\n  stroke-opacity: 1; }\\n\\n.dc-chart .fadeout {\\n  fill-opacity: 0.2;\\n  stroke-opacity: 0.2; }\\n\\n.dc-chart .box text {\\n  font: 10px sans-serif;\\n  -webkit-touch-callout: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n  pointer-events: none; }\\n\\n.dc-chart .box line, .dc-chart .box circle {\\n  fill: #fff; }\\n\\n.dc-chart .box rect, .dc-chart .box line, .dc-chart .box circle {\\n  stroke: #000;\\n  stroke-width: 1.5px; }\\n\\n.dc-chart .box .center {\\n  stroke-dasharray: 3, 3; }\\n\\n.dc-chart .box .outlier {\\n  fill: none;\\n  stroke: #ccc; }\\n\\n.dc-chart .box.deselected {\\n  opacity: 0.5; }\\n  .dc-chart .box.deselected .box {\\n    fill: #ccc; }\\n\\n.dc-chart .symbol {\\n  stroke: none; }\\n\\n.dc-chart .heatmap .box-group.deselected rect {\\n  stroke: none;\\n  fill-opacity: 0.5;\\n  fill: #ccc; }\\n\\n.dc-chart .heatmap g.axis text {\\n  pointer-events: all;\\n  cursor: pointer; }\\n\\n.dc-chart .empty-chart .pie-slice {\\n  cursor: default; }\\n  .dc-chart .empty-chart .pie-slice path {\\n    fill: #fee;\\n    cursor: default; }\\n\\n.dc-chart circle.dot {\\n  stroke: none; }\\n\\n.dc-data-count {\\n  float: right;\\n  margin-top: 15px;\\n  margin-right: 15px; }\\n  .dc-data-count .filter-count, .dc-data-count .total-count {\\n    color: #3182bd;\\n    font-weight: bold; }\\n\\n.dc-legend {\\n  font-size: 11px; }\\n  .dc-legend .dc-legend-item {\\n    cursor: pointer; }\\n\\n.dc-hard .number-display {\\n  float: none; }\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader?{\"importLoaders\":1,\"minimize\":true,\"sourceMap\":true}!./node_modules/postcss-loader/lib?{\"ident\":\"postcss\",\"plugins\":[null,null]}!./node_modules/dc/dc.css\n// module id = 290\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js??ref--1-oneOf-2-2!../../node_modules/postcss-loader/lib/index.js??postcss!./chart.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js??ref--1-oneOf-2-2!../../node_modules/postcss-loader/lib/index.js??postcss!./chart.css\", function() {\n\t\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js??ref--1-oneOf-2-2!../../node_modules/postcss-loader/lib/index.js??postcss!./chart.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/chart.css\n// module id = 291\n// module chunks = 0","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \"div.dc-chart{float:none;background-color:#b5bdc5}.dc-chart .pie-slice,.dc-chart g.row text{fill:#000}button.reset.btn.btn-sm{font-size:.5em;padding:0 .5em;border-radius:1em;cursor:pointer}.dc-chart legend{position:relative;padding:0 1rem;border-bottom:1px solid #4e5d6c;color:#2b3e50}.dc-chart legend .reset{position:absolute;right:1rem;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%)}\", \"\", {\"version\":3,\"sources\":[\"D:/projects/personal-blog/src/components/chart.css\"],\"names\":[],\"mappings\":\"AAAA,aACE,WAAY,AACZ,wBAA0B,CAC3B,AAED,0CAEE,SAAY,CACb,AAED,wBACE,eAAiB,AACjB,eAAiB,AACjB,kBAAmB,AACnB,cAAgB,CACjB,AAED,iBACE,kBAAmB,AACnB,eAAgB,AAChB,gCAAiC,AACjC,aAAe,CAChB,AAED,wBACE,kBAAmB,AACnB,WAAY,AACZ,QAAS,AACT,mCAAoC,AAChC,+BAAgC,AAC5B,0BAA4B,CACrC\",\"file\":\"chart.css\",\"sourcesContent\":[\"div.dc-chart {\\r\\n  float: none;\\r\\n  background-color: #b5bdc5;\\r\\n}\\r\\n\\r\\n.dc-chart g.row text,\\r\\n.dc-chart .pie-slice {\\r\\n  fill: black;\\r\\n}\\r\\n\\r\\nbutton.reset.btn.btn-sm {\\r\\n  font-size: 0.5em;\\r\\n  padding: 0 0.5em;\\r\\n  border-radius: 1em;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.dc-chart legend {\\r\\n  position: relative;\\r\\n  padding: 0 1rem;\\r\\n  border-bottom: 1px solid #4e5d6c;\\r\\n  color: #2b3e50;\\r\\n}\\r\\n\\r\\n.dc-chart legend .reset {\\r\\n  position: absolute;\\r\\n  right: 1rem;\\r\\n  top: 50%;\\r\\n  -webkit-transform: translateY(-50%);\\r\\n      -ms-transform: translateY(-50%);\\r\\n          transform: translateY(-50%);\\r\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader?{\"importLoaders\":1,\"minimize\":true,\"sourceMap\":true}!./node_modules/postcss-loader/lib?{\"ident\":\"postcss\",\"plugins\":[null,null]}!./src/components/chart.css\n// module id = 292\n// module chunks = 0"],"sourceRoot":""}