{"version":3,"sources":["../static/js/visualisation.77d1739e.chunk.js","components/Visualisation.jsx","../node_modules/crossfilter2/src/identity.js","../node_modules/crossfilter2/src/heap.js","../node_modules/crossfilter2/src/insertionsort.js","../node_modules/crossfilter2/index.js","../node_modules/crossfilter2/src/crossfilter.js","../node_modules/crossfilter2/src/array.js","../node_modules/crossfilter2/src/filter.js","../node_modules/crossfilter2/src/null.js","../node_modules/crossfilter2/src/zero.js","../node_modules/crossfilter2/src/heapselect.js","../node_modules/crossfilter2/src/bisect.js","../node_modules/crossfilter2/src/permute.js","../node_modules/crossfilter2/src/quicksort.js","../node_modules/crossfilter2/src/reduce.js","../node_modules/crossfilter2/package.json","../node_modules/lodash.result/index.js","webpack:///./node_modules/dc/dc.js?5131","../node_modules/dc/dc.js","../node_modules/d3/d3.js","../node_modules/dc/node_modules/crossfilter2/index.js","../node_modules/dc/node_modules/crossfilter2/crossfilter.js","webpack:///./node_modules/dc/dc.css?6aae","../node_modules/dc/dc.css","webpack:///./src/components/chart.css?4c7c","components/chart.css"],"names":["webpackJsonp","269","module","__webpack_exports__","__webpack_require__","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","__WEBPACK_IMPORTED_MODULE_0_react__","__WEBPACK_IMPORTED_MODULE_0_react___default","n","__WEBPACK_IMPORTED_MODULE_1_prop_types__","__WEBPACK_IMPORTED_MODULE_1_prop_types___default","__WEBPACK_IMPORTED_MODULE_2_crossfilter2__","__WEBPACK_IMPORTED_MODULE_2_crossfilter2___default","__WEBPACK_IMPORTED_MODULE_3_expose_loader_dc_dc__","__WEBPACK_IMPORTED_MODULE_3_expose_loader_dc_dc___default","__WEBPACK_IMPORTED_MODULE_4_react_loading_animation__","__WEBPACK_IMPORTED_MODULE_4_react_loading_animation___default","__WEBPACK_IMPORTED_MODULE_5_dc_dc_css__","__WEBPACK_IMPORTED_MODULE_6__chart_css__","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","Vis","data","Charts","_class","_temp","_PureComponent","Visualisation","this","_this","getPrototypeOf","state","loading","ndx","console","time","timeEnd","setState","window","addEventListener","resize","removeEventListener","a","chartRegistry","clear","disableTransitions","renderAll","createElement","width","height","childContextTypes","object","isRequired","273","exports","crossfilter_identity","d","274","heap_by","f","heap","lo","hi","sift","sort","t","child","x","by","275","insertionsort_by","insertionsort","j","276","crossfilter","277","add","newData","n0","n1","concat","filters","lengthen","dataListeners","forEach","l","triggerOnChange","removeData","newIndex","crossfilter_index","removed","index1","index2","zero","push","filterListeners","removeDataListeners","index3","index4","copy","truncate","isElementFiltered","ignore_dimensions","id","len","mask","Array","subarrays","zeroExceptMask","dimension","iterable","preAdd","k","i0","newValues","newIterablesIndexCount","crossfilter_range","newIterablesIndexFilterStatus","unsortedIndex","iterablesEmptyRows","sortMap","permute","map","bounds","refilter","lo1","hi1","refilterFunction","offset","one","values","index","iterablesIndexCount","iterablesIndexFilterStatus","lo0","hi0","old_n0","oldValues","oldIndex","oldIterablesIndexFilterStatus","i1","oldiiclength","xfilterArray","arrayLengthen","index5","postAdd","indexListeners","reIndex","filterIndexBounds","filterIndexFunction","added","valueIndexAdded","valueIndexRemoved","Math","min","max","newAdded","newRemoved","filter","range","filterAll","isArray","filterRange","filterFunction","filterExact","xfilterFilter","bisect","indexLength","top","top_offset","array","toSkip","bottom","bottom_offset","group","groupIncrement","groupCapacity","arrayWiden","groupWidth","groupIndex","crossfilter_capacity","n0old","g0","x0","x1","g","oldGroups","groups","reduceAdd","remove","reduceRemove","initial","reduceInitial","k0","resetNeeded","crossfilter_null","zeroExcept","indexOf","update","updateMany","reset","resetMany","groupAll","updateOne","resetOne","oldK","seenGroups","filterOne","filterOffset","notFilter","onlyExcept","all","select","reduce","reduceCount","xfilterReduce","reduceIncrement","reduceDecrement","crossfilter_zero","reduceSum","reduceSubtract","order","valueOf","xfilterHeapselect","xfilterHeap","orderNatural","size","dispose","splice","dimensionGroups","arguments","masks","accessorPath","result","accessor","quicksort","unshift","tmp","log","reduceValue","only","allFiltered","onChange","cb","warn","callbacks","eventName","bitarray","m","array8","array16","array32","w","packageJson","heapselect","version","278","crossfilter_arrayUntyped","crossfilter_arrayLengthenUntyped","crossfilter_arrayWidenUntyped","Error","crossfilter_bitarray","0","crossfilter_array8","Uint8Array","crossfilter_array16","Uint16Array","crossfilter_array32","Uint32Array","crossfilter_arrayLengthen","set","crossfilter_arrayWiden","dest","src","onlyOffset","onlyOne","279","crossfilter_filterExact","left","right","crossfilter_filterRange","crossfilter_filterAll","280","281","282","heapselect_by","queue","xFilterHeap","283","bisect_by","bisectLeft","mid","bisectRight","284","deep","JSON","parse","stringify","285","quicksort_by","quicksort_sizeThreshold","sixth","i5","i3","i2","i4","e1","e2","x2","e3","x3","e4","x4","e5","x5","pivot1","pivotValue1","pivot2","pivotValue2","less","great","pivotsEqual","ek","xk","greatValue","lessValue","xFilterInsertionsort","286","crossfilter_reduceIncrement","p","crossfilter_reduceDecrement","crossfilter_reduceAdd","v","crossfilter_reduceSubtract","287","_args","_from","_id","_inBundle","_integrity","_location","_phantomChildren","_requested","type","registry","raw","name","escapedName","rawSpec","saveSpec","fetchSpec","_requiredBy","_resolved","_spec","_where","author","url","bugs","contributors","dependencies","lodash.result","description","devDependencies","browserify","d3","eslint","package-json-versionify","semver","uglify-js","vows","eslintConfig","env","browser","node","globals","extends","files","homepage","keywords","license","main","maintainers","repository","scripts","benchmark","build","clean","test","288","global","getValue","undefined","isHostObject","toString","e","Hash","entries","entry","hashClear","__data__","nativeCreate","hashDelete","has","hashGet","HASH_UNDEFINED","hasOwnProperty","hashHas","hashSet","ListCache","listCacheClear","listCacheDelete","assocIndexOf","pop","listCacheGet","listCacheHas","listCacheSet","MapCache","mapCacheClear","hash","Map","string","mapCacheDelete","getMapData","mapCacheGet","get","mapCacheHas","mapCacheSet","eq","baseIsNative","isObject","isMasked","isFunction","reIsNative","reIsHostCtor","toSource","baseToString","isSymbol","symbolToString","INFINITY","castPath","stringToPath","isKeyable","getNative","isKey","reIsPlainProp","reIsDeepProp","func","maskSrcKey","toKey","funcToString","memoize","resolver","FUNC_ERROR_TEXT","memoized","args","apply","cache","Cache","other","tag","objectToString","funcTag","genTag","isObjectLike","symbolTag","path","defaultValue","reLeadingDot","rePropName","reRegExpChar","reEscapeChar","freeGlobal","freeSelf","root","Function","arrayProto","funcProto","objectProto","coreJsData","uid","exec","keys","IE_PROTO","RegExp","replace","Symbol","symbolProto","match","number","quote","289","290","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","_dc","dc","constants","CHART_CLASS","DEBUG_GROUP_CLASS","STACK_CLASS","DESELECTED_CLASS","SELECTED_CLASS","NODE_INDEX_NAME","GROUP_INDEX_NAME","DEFAULT_CHART_GROUP","EVENT_DELAY","NEGLIGIBLE_NUMBER","_renderlet","initializeChartGroup","_chartMap","chart","register","deregister","anchorName","list","registerChart","deregisterChart","hasChart","deregisterAllCharts","charts","refocusAll","focus","render","redrawAll","redraw","transition","selection","duration","delay","s","optionalTransition","enable","afterTransition","callback","empty","each","units","integers","start","end","abs","ordinal","domain","fp","precision","_f","resolution","utils","isNegligible","floor","ceil","round","override","obj","functionName","newFunction","existingFunction","renderlet","_","instanceOfChart","o","__dcFlag__","errors","Exception","msg","_msg","message","stack","InvalidStateException","BadArgumentException","dateFormat","format","printers","printSingleValue","pluck","Date","isFloat","fformat","isInteger","r","getTime","percentage","subtract","isNumber","clamp","val","_idCounter","uniqueId","nameToId","toLowerCase","appendOrSelect","parent","selector","element","append","safeNumber","logger","enableDebugLog","debug","deprecate","fn","deprecated","warned","events","current","trigger","closure","setTimeout","RangedFilter","low","high","isFiltered","filterType","TwoDimensionalFilter","RangedTwoDimensionalFilter","fromBottomLeft","Infinity","y","baseMixin","_chart","sizeSvg","_svg","_useViewBoxResizing","attr","generateSvg","checkForMandatoryAttributes","applyFilters","fs","_filterHandler","_dimension","_group","_anchor","_root","_isChild","_width","_height","_orderSort","_legend","_commitHandler","_minWidth","_defaultWidthCalc","getBoundingClientRect","_widthCalc","_minHeight","_defaultHeightCalc","_heightCalc","_keyAccessor","_valueAccessor","_label","_ordering","_renderLabel","_title","keyAccessor","valueAccessor","_renderTitle","_controlsUseVisibility","_transitionDuration","_transitionDelay","_filterPrinter","_mandatoryAttributes","_chartGroup","_listeners","dispatch","_filters","_data","functor","minWidth","minHeight","useViewBoxResizing","expireCache","_groupName","ordering","orderFunction","_computeOrderedGroups","dataCopy","slice","selectAll","anchor","chartGroup","classed","chartID","rootElement","svg","svgElement","resetSvg","filterPrinter","filterPrinterFunction","controlsUseVisibility","useVisibility","turnOnControls","attribute","style","text","turnOffControls","transitionDuration","transitionDelay","preRender","_doRender","_activateRenderlets","event","pretransition","preRedraw","_doRedraw","commitHandler","redrawGroup","error","renderGroup","_invokeFilteredListener","filtered","_invokeZoomedListener","zoomed","_hasFilterHandler","some","hasFilterHandler","hasFilter","_removeFilterHandler","removeFilterHandler","_addFilterHandler","addFilterHandler","_resetFilterHandler","resetFilterHandler","replaceFilter","highlightSelected","fadeDeselected","resetHighlight","onClick","datum","filterHandler","legendables","legendHighlight","legendReset","legendToggle","isLegendableHidden","label","labelFunction","enableLabels","renderLabel","title","titleFunction","renderTitle","renderletFunction","on","legend","options","opts","applyOptions","listener","marginMixin","_margin","margins","effectiveWidth","effectiveHeight","colorMixin","_colors","scale","category20c","_defaultAccessor","_colorAccessor","colors","colorScale","quantize","ordinalColors","linearColors","linear","interpolate","interpolateHcl","colorAccessor","defaultColorAccessor","colorDomain","calculateColorDomain","newDomain","getColor","colorCalculator","coordinateGridMixin","compareDomains","d1","d2","elem","prepareXAxis","isOrdinal","elasticX","_x","_ordinalXDomain","xAxisMin","xAxisMax","xdom","_lastXDomain","rescale","rangeBands","xAxisLength","_rangeBandPadding","_useOuterPadding","_outerRangeBandPadding","_xAxis","renderVerticalGridLines","gridLineG","VERTICAL_CLASS","_renderVerticalGridLine","insert","GRID_LINE_CLASS","ticks","tickValues","lines","linesGEnter","enter","_xAxisY","exit","brushHeight","getClipPathId","generateClipPath","defs","_parent","chartBodyClip","padding","_clipPadding","yAxisHeight","drawChart","_brushOn","_prepareYAxis","plotData","_resizing","renderXAxis","elasticY","renderYAxis","renderBrush","redrawBrush","fadeDeselectedArea","configureMouseZoom","_mouseZoomable","_enableMouseZoom","_hasBeenMouseZoomable","_disableMouseZoom","zoomHandler","_refocused","_zoomOutRestrict","constraint","_xOriginalDomain","_rangeChart","intersectExtents","constrained","constrainExtent","domFilter","rangesEqual","ext1","ext2","extent","range1","range2","hasRangeSelected","category10","_g","_chartBodyG","_xAxisLabel","_y","_yAxisLabel","_round","_unitCount","_focusChart","axis","orient","_xUnits","_xAxisPadding","_xAxisPaddingUnit","_xElasticity","_xAxisLabelPadding","_yAxis","_yAxisPadding","_yElasticity","_yAxisLabelPadding","_brush","brush","_renderHorizontalGridLine","_zoomScale","_zoom","behavior","zoom","_nullZoom","_useRightYAxis","resizing","rangeChart","focusChart","zoomScale","zoomOutRestrict","_generateG","href","location","split","gElement","mouseZoomable","chartBodyG","xScale","xOriginalDomain","xUnits","xAxis","xAxisPadding","xAxisPaddingUnit","unit","xUnitCount","useRightYAxis","axisXG","axisXLab","xAxisLabel","labelText","yAxisMin","yAxisMax","rangeRound","_renderHorizontalGridLinesForAxis","renderYAxisLabel","axisClass","rotation","labelXPosition","axisYLab","labelYPosition","Y_AXIS_LABEL_CLASS","renderYAxisAt","position","axisYG","axisPosition","_yAxisX","labelPosition","yAxisLabel","yScale","yAxis","renderHorizontalGridLines","yAxisPadding","_filter","_brushing","gBrush","setBrushY","setHandlePaths","resizeHandlePath","extendBrush","brushIsEmpty","rangedFilter","doTransition","clipPadding","_preprocessData","scaleExtent","refocused","c","brushOn","stackMixin","prepareValues","layer","layerIdx","valAccessor","String","hidden","domainFilter","_evadeDomainFilter","xDomain","findLayerByName","_stack","flattenStack","valueses","visability","_stackLayout","layout","_titles","_hidableStacks","hidableStacks","hideStack","stackName","showStack","getValueAccessorByIndex","y0","titleAccessor","stackLayout","evadeDomainFilter","layers","flat","color","capMixin","_cap","_takeFront","_othersLabel","kv","_othersGrouper","topItems","restItems","restItemsSum","sum","restKeys","others","othersLabel","cappedKeyAccessor","cappedValueAccessor","rest","items","cap","count","takeFront","othersGrouper","grouperFunction","_onClick","bubbleMixin","_maxBubbleRelativeSize","_minRadiusWithLabel","_sortBubbleSize","_elasticRadius","BUBBLE_NODE_CLASS","BUBBLE_CLASS","MIN_RADIUS","radiusAccessor","radiusValueAccessor","b","descending","_r","_rValueAccessor","bubbleRadiusScale","elasticRadius","calculateRadiusDomain","rMin","rMax","bubbleR","isNaN","shouldLabel","labelOpacity","labelPointerEvent","_doRenderLabel","bubbleGEnter","doUpdateLabels","labels","_doRenderTitles","doUpdateTitles","sortBubbleSize","minRadius","radius","minRadiusWithLabel","maxBubbleRelativeSize","relativeSize","isSelectedNode","pieChart","maxRadius","_radius","_givenRadius","pieData","arc","buildArcs","pie","pieLayout","_emptyCssClass","_emptyTitle","slices","_sliceGroupCssClass","_sliceCssClass","_labelGroupCssClass","_labelCssClass","createElements","updateElements","removeElements","highlightFilter","cx","cy","slicesEnter","createSliceNodes","createSlicePath","createTitles","createLabels","slicePath","fill","safeArc","attrTween","tweenPie","positionLabels","_applyLabelText","highlightSlice","whether","classes","_externalLabelRadius","_drawPaths","updateLabelPaths","polyline","arc2","outerRadius","_externalRadiusPadding","innerRadius","_current","startAngle","endAngle","centroid","updateSlicePaths","updateLabels","updateTitles","slicePaths","isSelectedSlice","_innerRadius","sliceTooSmall","angle","_minAngleForLabel","sliceHasNoData","isOffCanvas","highlightSliceFromLegendable","legendable","highlighted","_cx","_cy","slicesCap","externalRadiusPadding","minAngleForLabel","emptyTitle","externalLabels","externalLabelRadius","drawPaths","barChart","barHeight","renderLabels","layerIndex","_centerBar","_barWidth","LABEL_PADDING","renderBars","bars","_gap","calculateBarWidth","numberOfBars","rangeBand","barPadding","MIN_BAR_WIDTH","colorFilter","inv","item","_alwaysUseRounding","_rescale","_render","last","centerBar","outerPadding","gap","alwaysUseRounding","_xAxisMax","lineChart","drawLine","layersEnter","line","_interpolate","tension","_tension","_defined","defined","_dashStyle","safeD","drawArea","_renderArea","area","drawDots","chartBody","xyTipsOn","tooltipListClass","TOOLTIP_G_CLASS","tooltips","points","createRefLines","dots","DOT_CIRCLE_CLASS","getDotRadius","_dataPointFillOpacity","_dataPointStrokeOpacity","dot","showDot","showRefLines","hideDot","hideRefLines","drawLabels","Y_AXIS_REF_LINE_CLASS","X_AXIS_REF_LINE_CLASS","_dotRadius","yAxisX","yAxisRefPathD","xAxisRefPathD","_dataPointRadius","dashstyle","join","_xyTipsOn","layersList","dashStyle","renderArea","dotRadius","renderDataPoints","fillOpacity","strokeOpacity","_legendables","dataCount","_formatNumber","_html","html","formatNumber","formatter","tot","selected","dataTable","renderGroups","bAllFunctions","_columns","thead","headrow","headcols","HEAD_CSS_CLASS","_doColumnHeaderFormat","nestEntries","rowGroup","_showGroups","GROUP_CSS_CLASS","LABEL_CSS_CLASS","_order","ascending","_size","nest","sortKeys","_sortBy","_beginSlice","_endSlice","renderRows","rows","ROW_CSS_CLASS","rowEnter","COLUMN_CSS_CLASS","_doColumnValueFormat","_doColumnHeaderFnToString","_doColumnHeaderCapitalize","charAt","toUpperCase","lastIndexOf","substring","beginSlice","endSlice","columns","sortBy","showGroups","dataGrid","GRID_CSS_CLASS","itemGroup","_htmlGroup","renderItems","ITEM_CSS_CLASS","htmlGroup","sortByFunction","bubbleChart","renderNodes","bubbleG","bubbleLocator","updateNodes","removeNodes","bubbleX","bubbleY","compositeChart","calculateYAxisRanges","lyAxisMin","lyAxisMax","ryAxisMin","ryAxisMax","ranges","rightYAxisMin","rightYAxisMax","alignYAxes","alignYAxisRanges","extentRatio","prepareRightYAxis","needDomain","rightY","needRange","rightYAxis","prepareLeftYAxis","generateChildG","SUB_CHART_CLASS","leftYAxisChildren","_children","rightYAxisChildren","getYAxisMin","getYAxisMax","getAllXAxisMinFromChildCharts","getAllXAxisMaxFromChildCharts","_rightY","_childOptions","_shareColors","_shareTitle","_alignYAxes","_rightYAxis","_rightYAxisLabel","_rightYAxisLabelPadding","_rightAxisGridLines","__generateG","rightYAxisLabel","useRightAxisGridLines","childOptions","compose","subChartArray","children","shareColors","shareTitle","seriesChart","keySort","clearChart","_charts","resetChildren","_seriesAccessor","_chartFunction","_seriesSort","_valueSort","childrenChanged","keep","nester","sortValues","nesting","sub","subChart","_compose","chartFunction","seriesAccessor","seriesSort","sortFunction","valueSort","geoChoroplethChart","generateLayeredData","isDataLayer","regionG","renderRegionG","renderPaths","geoJson","layerSelector","isSelected","isDeselected","layerNameClass","regionClass","baseClasses","getKey","_geoJsons","paths","currentFill","_projectionFlag","_geoPath","geo","states","selectedRegion","overlayGeoJson","json","projection","geoJsons","geoPath","removeGeoJson","bubbleOverlay","initOverlayG","BUBBLE_OVERLAY_CLASS","initializeBubbles","mapData","_points","point","nodeG","getNodeG","circle","bubbleNodeClass","updateBubbles","flag","debugG","debugText","mouse","rowChart","calculateAxisScale","_elasticX","_rowData","drawAxis","axisG","drawGridLines","_rowCssClass","rootValue","_fixedBarHeight","_hasLabelOffsetY","_labelOffsetY","rect","isSelectedRow","translateX","renderTitleLabel","_titleRowCssClass","lab","_labelOffsetX","_dyOffset","titlelab","_titleLabelOffsetX","_renderTitleLabel","rowsCap","fixedBarHeight","labelOffsetX","labelOffsetY","labelOffsety","titleLabelOffsetX","legendItemHeight","_itemHeight","_maxItems","_horizontal","_legendWidth","_itemWidth","_autoItemWidth","_legendText","itemEnter","clientHeight","_cumulativeLegendTextWidth","row","itemWidth","getBBox","translateBy","itemHeight","horizontal","legendWidth","autoItemWidth","legendText","maxItems","scatterPlot","elementSize","_existenceAccessor","_filtered","pow","_symbolSize","_excludedSize","_emptySize","renderTitles","symbol","resizeSymbolsWhere","condition","symbols","oldSize","_symbol","originalKeyAccessor","existenceAccessor","_locator","_highlightedSize","_excludedColor","_excludedOpacity","_emptyOpacity","_nonemptyOpacity","_emptyColor","__filter","excludedOpacity","excludedColor","customSymbol","symbolSize","highlightedSize","excludedSize","hiddenSize","emptySize","emptyColor","emptyOpacity","nonemptyOpacity","ranged2DFilter","numberDisplay","maxBin","sorted","_lastValue","none","valObj","newValue","span","ease","tween","interpStart","isFinite","interp","interpolateNumber","num","innerHTML","heatMap","filterAxis","cellsOnAxis","unfilteredCellsOnAxis","_chartBody","_cols","_rows","_colOrdering","_rowOrdering","_colScale","_rowScale","_xBorderRadius","_yBorderRadius","_colsLabel","_rowsLabel","colsLabel","rowsLabel","_xAxisOnClick","_yAxisOnClick","_boxOnClick","rowOrdering","cols","colOrdering","rowCount","colCount","boxWidth","boxHeight","rangeRoundBands","boxes","gEnter","boxOnClick","gCols","gColsText","xAxisOnClick","gRows","gRowsText","yAxisOnClick","handler","xBorderRadius","yBorderRadius","boxWhiskers","boxQuartiles","quantile","box","quartileData","quartiles","whiskerIndices","whiskers","whiskerData","outlierIndices","__chart__","center","medianLine","whisker","outlier","Number","tickFormat","boxTick","whiskerTick","timer","flush","boxPlot","DEFAULT_WHISKERS_IQR","q1","q3","iqr","renderBoxes","boxesG","boxTransform","_box","updateBoxes","removeBoxes","_whiskersIqr","_whiskers","_tickFormat","_boxWidth","innerChartWidth","boxPadding","_calculatedBoxWidth","selectMenu","renderOptions","_select","OPTION_CSS_CLASS","selectedOptions","option","_promptValue","_multiple","setAttributes","_numberVisible","_promptText","_filterDisplayed","property","promptText","filterDisplayed","multiple","promptValue","numberVisible","abstractBubbleChart","baseChart","capped","colorChart","coordinateGridChart","marginable","stackableChart","291","d3_documentElement","ownerDocument","document","documentElement","d3_window","defaultView","d3_ascending","NaN","d3_number","d3_numeric","d3_bisector","compare","d3_transposeLength","d3_range_integerScale","d3_class","ctor","properties","d3_Map","d3_map_escape","d3_map_proto","d3_map_zero","d3_map_unescape","d3_map_has","d3_map_remove","d3_map_keys","d3_map_size","d3_map_empty","d3_Set","d3_identity","d3_rebind","source","method","d3_vendorSymbol","d3_vendorPrefixes","prefixName","d3_noop","d3_dispatch","d3_dispatch_event","z","listeners","listenerByName","d3_eventPreventDefault","preventDefault","d3_eventSource","sourceEvent","d3_eventDispatch","of","thiz","argumentz","e0","d3_selection","d3_subclass","d3_selectionPrototype","d3_selection_selector","d3_select","d3_selection_selectorAll","d3_selectAll","d3_selection_attr","attrNull","removeAttribute","attrNullNS","removeAttributeNS","space","local","attrConstant","setAttribute","attrConstantNS","setAttributeNS","attrFunction","attrFunctionNS","ns","qualify","d3_collapse","trim","d3_selection_classedRe","requote","d3_selection_classes","d3_selection_classed","classedConstant","classedFunction","d3_selection_classedName","re","classList","getAttribute","lastIndex","d3_selection_style","priority","styleNull","removeProperty","styleConstant","setProperty","styleFunction","d3_selection_property","propertyNull","propertyConstant","propertyFunction","d3_selection_creator","namespace","namespaceURI","d3_nsXhtml","createElementNS","createNS","d3_selectionRemove","parentNode","removeChild","d3_selection_dataNode","d3_selection_filter","d3_selectMatches","d3_selection_sortComparator","comparator","d3_selection_each","d3_selection_enter","d3_selection_enterPrototype","d3_selection_enterInsertBefore","j0","d3_selection_on","capture","onRemove","$","onAdd","wrap","d3_array","removeAll","d3_selection_onListener","d3_selection_onFilters","d3_selection_onFilter","related","relatedTarget","compareDocumentPosition","d3_event_dragSuppress","d3_event_dragId","click","d3_event_dragSelect","suppressClick","off","d3_mousePoint","container","changedTouches","ownerSVGElement","createSVGPoint","d3_mouse_bug44083","scrollX","scrollY","margin","border","ctm","getScreenCTM","pageX","pageY","clientX","clientY","matrixTransform","inverse","clientLeft","clientTop","d3_behavior_dragTouchId","identifier","d3_sgn","d3_cross2d","d3_acos","π","acos","d3_asin","halfπ","asin","d3_sinh","exp","d3_cosh","d3_tanh","d3_haversin","sin","d3_color","d3_hsl","h","d3_rgb_parse","d3_rgb_hsl","d3_hsl_rgb","m1","m2","vv","d3_rgb","d3_hcl","d3_lab","d3_lab_hcl","d3_rgb_lab","rgb","d3_hcl_lab","cos","d3_radians","d3_lab_rgb","d3_lab_xyz","d3_lab_X","d3_lab_Y","d3_lab_Z","d3_xyz_rgb","atan2","d3_degrees","sqrt","d3_xyz_lab","d3_rgbNumber","d3_rgbString","d3_rgb_hex","hsl","parseFloat","d3_rgb_parseNumber","d3_rgb_names","parseInt","d3_rgb_xyz","d3_functor","d3_xhrType","response","mimeType","d3_xhr","respond","status","request","d3_xhrHasResponse","xhr","load","headers","XMLHttpRequest","responseType","XDomainRequest","onload","onerror","onreadystatechange","readyState","onprogress","progress","header","send","open","setRequestHeader","overrideMimeType","beforesend","abort","rebind","d3_xhr_fixCallback","responseText","d3_timer","then","now","d3_timer_queueTail","d3_timer_queueHead","d3_timer_interval","d3_timer_timeout","clearTimeout","d3_timer_frame","d3_timer_step","d3_timer_mark","d3_timer_sweep","t0","t1","d3_format_precision","LN10","d3_formatPrefix","d3_locale_numberFormat","locale","locale_decimal","decimal","locale_thousands","thousands","locale_grouping","grouping","locale_currency","currency","formatGroup","reverse","specifier","d3_format_re","align","sign","zfill","comma","prefix","suffix","integer","exponent","d3_format_types","d3_format_typeDefault","zcomma","fullSuffix","negative","formatPrefix","before","after","d3_date_utc","UTC","d3_time_interval","step","date","d0","d3_date","dt","times","range_utc","utc","d3_time_interval_utc","d3_locale_timeFormat","d3_time_format","template","charCodeAt","d3_time_formatPads","d3_time_formats","H","M","S","L","Z","d3_time_parse","localZ","setFullYear","W","getDay","U","setHours","d3_time_parsers","d3_time_parseWeekdayAbbrev","d3_time_dayAbbrevRe","d3_time_dayAbbrevLookup","d3_time_parseWeekday","d3_time_dayRe","d3_time_dayLookup","d3_time_parseMonthAbbrev","d3_time_monthAbbrevRe","d3_time_monthAbbrevLookup","d3_time_parseMonth","d3_time_monthRe","d3_time_monthLookup","d3_time_parseLocaleFull","d3_time_parseLocaleDate","d3_time_parseLocaleTime","X","d3_time_parseAmPm","d3_time_periodLookup","locale_dateTime","dateTime","locale_date","locale_time","locale_periods","periods","locale_days","days","locale_shortDays","shortDays","locale_months","months","locale_shortMonths","shortMonths","multi","d3_time_formatMulti","d3_time_formatRe","d3_time_formatLookup","A","getMonth","B","d3_time_formatPad","getDate","getHours","I","d3_time","dayOfYear","getMilliseconds","getMinutes","getSeconds","sundayOfYear","mondayOfYear","getFullYear","Y","d3_time_zone","%","d3_time_parseDay","d3_time_parseHour24","d3_time_parseDayOfYear","d3_time_parseMilliseconds","d3_time_parseMonthNumber","d3_time_parseMinutes","d3_time_parseSeconds","d3_time_parseWeekNumberSunday","d3_time_parseWeekdayNumber","d3_time_parseWeekNumberMonday","d3_time_parseYear","d3_time_parseFullYear","d3_time_parseZone","d3_time_parseLiteralPercent","names","d3_time_numberRe","d3_time_expandYear","getTimezoneOffset","zs","zh","zm","d3_time_percentRe","formats","d3_adder","d3_adderSum","bv","av","d3_geo_streamGeometry","geometry","d3_geo_streamGeometryType","d3_geo_streamLine","coordinates","closed","coordinate","lineStart","lineEnd","d3_geo_streamPolygon","polygonStart","polygonEnd","d3_geo_areaRingStart","nextPoint","λ","φ","dλ","λ0","sdλ","adλ","cosφ","sinφ","sinφ0","u","cosφ0","d3_geo_areaRingSum","λ00","φ00","d3_geo_area","d3_geo_cartesian","spherical","d3_geo_cartesianDot","d3_geo_cartesianCross","d3_geo_cartesianAdd","d3_geo_cartesianScale","vector","d3_geo_cartesianNormalize","d3_geo_spherical","cartesian","d3_geo_sphericalEqual","ε","d3_geo_centroidPoint","d3_geo_centroidPointXYZ","d3_geo_centroidW0","d3_geo_centroidX0","d3_geo_centroidY0","d3_geo_centroidZ0","d3_geo_centroidLineStart","z0","d3_geo_centroidW1","d3_geo_centroidX1","d3_geo_centroidY1","d3_geo_centroidZ1","d3_geo_centroid","d3_geo_centroidLineEnd","d3_geo_centroidRingStart","cz","d3_geo_centroidX2","d3_geo_centroidY2","d3_geo_centroidZ2","d3_geo_compose","invert","d3_true","d3_geo_clipPolygon","segments","clipStartInside","subject","clip","segment","p0","p1","d3_geo_clipPolygonIntersection","d3_geo_clipPolygonLinkCircular","isSubject","d3_geo_clip","pointVisible","clipLine","clipStart","rotate","pointLine","pointRing","ring","ringListener","ringStart","ringEnd","ringSegments","buffer","polygon","polygonStarted","shift","d3_geo_clipSegmentLength1","rotatedClipStart","merge","d3_geo_pointInPolygon","d3_geo_clipSort","sphere","d3_geo_clipBufferListener","rejoin","d3_geo_clipAntimeridianLine","φ0","sλ0","λ1","φ1","sλ1","d3_geo_clipAntimeridianIntersect","cosφ1","sinλ0_λ1","atan","d3_geo_clipAntimeridianInterpolate","from","to","direction","meridian","parallel","meridianNormal","polarAngle","winding","point0","antimeridian","τ","intersection","φarc","d3_geo_clipCircle","visible","cr","c0","v0","v00","point2","point1","smallRadius","code","intersect","notHemisphere","two","pa","pb","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","uu","t2","q","δλ","polar","d3_geo_circleInterpolate","d3_geom_clipLine","y1","ax","ay","bx","dx","dy","d3_geo_clipExtent","corner","comparePoints","ca","insidePolygon","wn","a1","linePoint","first","v_","x_","y_","x__","y__","v__","bufferListener","d3_geo_clipExtentMAX","listener_","inside","d3_geo_conic","projectAt","d3_geo_projectionMutator","parallels","d3_geo_conicEqualArea","forward","ρ","C","ρ0","ρ0_y","d3_geo_pathAreaRingStart","d3_geo_pathAreaPolygon","x00","y00","d3_geo_pathArea","d3_geo_pathBoundsPoint","d3_geo_pathBoundsX0","d3_geo_pathBoundsX1","d3_geo_pathBoundsY0","d3_geo_pathBoundsY1","d3_geo_pathBuffer","pointCircle","pointLineStart","stream","lineEndPolygon","d3_geo_pathBufferCircle","pointRadius","d3_geo_pathCentroidPoint","d3_geo_pathCentroidLineStart","d3_geo_pathCentroid","d3_geo_pathCentroidLineEnd","d3_geo_pathCentroidRingStart","d3_geo_pathContext","context","moveTo","lineTo","closePath","d3_geo_resample","project","resample","maxDepth","resampleRecursive","resampleNone","d3_geo_transformPoint","resampleLineTo","a0","b0","ringPoint","a00","b00","c00","b1","depth","δ2","φ2","λ2","y2","dx2","dy2","dz","cosMinDistance","d3_geo_pathProjectStream","d3_geo_projectionRadians","d3_geo_transform","d3_geo_projection","projectRotate","δx","δy","d3_geo_rotation","δφ","δγ","invalidate","valid","projectResample","preclip","d3_geo_clipAntimeridian","postclip","clipAngle","clipExtent","output","translate","d3_geo_equirectangular","d3_geo_identityRotation","d3_geo_rotationλ","d3_geo_rotationφγ","d3_geo_forwardRotationλ","cosδφ","sinδφ","cosδγ","sinδγ","sr","d3_geo_circleAngle","PI","d3_geo_graticuleX","d3_geo_graticuleY","d3_source","d3_target","d3_geo_interpolate","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","distance","d3_geo_lengthLineStart","cosΔλ","d3_geo_lengthSum","d3_geo_length","d3_geo_azimuthal","azimuthal","cosλ","sinc","cosc","d3_geo_conicConformal","F","tan","d3_geo_mercator","d3_geo_conicEquidistant","G","d3_geo_mercatorProjection","clipAuto","d3_geo_transverseMercator","d3_geom_pointX","d3_geom_pointY","d3_geom_hullUpper","hull","hs","d3_geom_hullOrder","d3_geom_polygonInside","d3_geom_polygonIntersect","x21","x43","y3","y21","y43","ua","d3_geom_polygonClosed","d3_geom_voronoiBeach","d3_geom_voronoiRedBlackNode","edge","site","d3_geom_voronoiCreateBeach","beach","d3_geom_voronoiBeachPool","d3_geom_voronoiDetachBeach","d3_geom_voronoiDetachCircle","d3_geom_voronoiBeaches","d3_geom_voronoiRemoveBeach","vertex","previous","P","next","N","disappearing","lArc","rArc","iArc","nArcs","d3_geom_voronoiSetEdgeEnd","d3_geom_voronoiCreateEdge","d3_geom_voronoiAttachCircle","d3_geom_voronoiAddBeach","dxl","dxr","directrix","d3_geom_voronoiLeftBreakPoint","d3_geom_voronoiRightBreakPoint","R","newArc","lSite","rSite","hb","hc","rfocx","rfocy","pby2","lfocx","lfocy","plby2","hl","aby2","d3_geom_voronoiCell","edges","d3_geom_voronoiCloseCells","cell","iHalfEdge","halfEdges","nHalfEdges","cells","d3_geom_voronoiCells","iCell","prepare","d3_geom_voronoiHalfEdge","d3_geom_voronoiCreateBorderEdge","d3_geom_voronoiHalfEdgeOrder","d3_geom_voronoiCircle","cSite","ε2","ha","d3_geom_voronoiCirclePool","d3_geom_voronoiCircles","d3_geom_voronoiFirstCircle","d3_geom_voronoiClipEdges","d3_geom_voronoiEdges","d3_geom_voronoiConnectEdge","vb","fm","fb","va","lx","ly","rx","ry","fx","fy","d3_geom_voronoiEdge","d3_geom_voronoiRedBlackTree","d3_geom_voronoiRedBlackRotateLeft","tree","d3_geom_voronoiRedBlackRotateRight","d3_geom_voronoiRedBlackFirst","d3_geom_voronoi","sites","bbox","d3_geom_voronoiVertexOrder","diagram","d3_geom_voronoiTriangleArea","d3_geom_quadtreeCompatX","d3_geom_quadtreeCompatY","d3_geom_quadtreeNode","leaf","nodes","d3_geom_quadtreeVisit","sx","sy","d3_geom_quadtreeFind","closestPoint","minDistance2","find","distance2","xm","ym","below","d3_interpolateRgb","ar","ag","ab","br","bg","bb","d3_interpolateObject","d3_interpolate","d3_interpolateNumber","d3_interpolateString","am","bm","bs","bi","d3_interpolate_numberA","d3_interpolate_numberB","interpolators","d3_interpolateArray","na","nb","d3_ease_clamp","d3_ease_reverse","d3_ease_reflect","d3_ease_quad","d3_ease_cubic","d3_ease_cubicInOut","t3","d3_ease_poly","d3_ease_sin","d3_ease_exp","d3_ease_circle","d3_ease_elastic","d3_ease_back","d3_ease_bounce","d3_interpolateHcl","hcl","ah","ac","al","bh","bc","bl","d3_interpolateHsl","as","d3_interpolateLab","aa","ba","d3_interpolateRound","d3_transform","r0","r1","kx","d3_transformNormalize","kz","d3_transformDot","ky","d3_transformCombine","skew","d3_interpolateTransformPop","d3_interpolateTranslate","ta","tb","d3_interpolateRotate","ra","rb","d3_interpolateSkew","wa","wb","d3_interpolateScale","ka","kb","d3_interpolateTransform","transform","d3_uninterpolateNumber","d3_uninterpolateClamp","d3_layout_bundlePath","link","lca","d3_layout_bundleLeastCommonAncestor","d3_layout_bundleAncestors","ancestors","aNodes","bNodes","aNode","bNode","sharedNode","d3_layout_forceDragstart","fixed","d3_layout_forceDragend","d3_layout_forceMouseover","px","py","d3_layout_forceMouseout","d3_layout_forceAccumulate","quad","alpha","charges","charge","random","pointCharge","d3_layout_hierarchyRebind","hierarchy","links","d3_layout_hierarchyLinks","d3_layout_hierarchyVisitBefore","d3_layout_hierarchyVisitAfter","nodes2","d3_layout_hierarchyChildren","d3_layout_hierarchyValue","d3_layout_hierarchySort","d3_layout_stackX","d3_layout_stackY","d3_layout_stackOut","d3_layout_stackOrderDefault","d3_layout_stackOffsetZero","d3_layout_stackMaxIndex","d3_layout_stackReduceSum","d3_layout_stackSum","d3_layout_histogramBinSturges","d3_layout_histogramBinFixed","LN2","d3_layout_histogramRange","d3_layout_packSort","d3_layout_packInsert","_pack_next","_pack_prev","d3_layout_packSplice","d3_layout_packIntersects","dr","d3_layout_packSiblings","bound","xMin","xMax","yMin","yMax","d3_layout_packLink","d3_layout_packPlace","isect","s1","s2","d3_layout_packUnlink","d3_layout_packTransform","db","da","d3_layout_treeSeparation","d3_layout_treeLeft","d3_layout_treeRight","d3_layout_treeMove","wm","wp","change","d3_layout_treeShift","d3_layout_treeAncestor","vim","ancestor","d3_layout_clusterY","d3_layout_clusterX","d3_layout_clusterLeft","d3_layout_clusterRight","d3_layout_treemapPadNull","d3_layout_treemapPad","d3_scaleExtent","stop","d3_scaleRange","rangeExtent","d3_scale_bilinear","uninterpolate","d3_scale_nice","nice","d3_scale_niceStep","d3_scale_niceIdentity","d3_scale_polylinear","d3_scale_linear","input","d3_scale_linearTicks","d3_scale_linearTickFormat","d3_scale_linearNice","d3_scale_linearRebind","d3_scale_linearTickRange","err","d3_scale_linearPrecision","d3_scale_linearFormatPrecision","d3_scale_linearFormatSignificant","d3_scale_log","base","positive","niced","d3_scale_logNiceNegative","d3_scale_logFormat","d3_scale_pow","powp","d3_scale_powPow","powb","d3_scale_ordinal","ranger","steps","xi","rangePoints","rangeRoundPoints","d3_scale_quantile","thresholds","quantiles","invertExtent","d3_scale_quantize","d3_scale_threshold","d3_scale_identity","identity","d3_zero","d3_svg_arcInnerRadius","d3_svg_arcOuterRadius","d3_svg_arcStartAngle","d3_svg_arcEndAngle","d3_svg_arcPadAngle","padAngle","d3_svg_arcSweep","d3_svg_arcCornerTangents","rc","cw","x01","y01","ox","oy","D","cx0","cx1","dx0","dy0","dx1","dy1","d3_svg_line","d3_svg_lineLinear","interpolateKey","d3_svg_lineInterpolators","d3_svg_lineLinearClosed","d3_svg_lineStep","d3_svg_lineStepBefore","d3_svg_lineStepAfter","d3_svg_lineCardinalOpen","d3_svg_lineHermite","d3_svg_lineCardinalTangents","d3_svg_lineCardinalClosed","d3_svg_lineCardinal","tangents","pi","lp","p2","d3_svg_lineBasis","d3_svg_lineDot4","d3_svg_lineBasisBezier3","d3_svg_lineBasisBezier","d3_svg_lineBasisOpen","d3_svg_lineBasisClosed","d3_svg_lineBundle","d3_svg_lineBasisBezier1","d3_svg_lineBasisBezier2","d3_svg_lineSlope","d3_svg_lineFiniteDifferences","d3_svg_lineMonotoneTangents","d3_svg_lineMonotone","d3_svg_lineRadial","d3_svg_area","points1","interpolateReverse","points0","fx0","fy0","fx1","fy1","d3_svg_chordRadius","d3_svg_diagonalProjection","d3_svg_diagonalRadialProjection","d3_svg_symbolSize","d3_svg_symbolType","d3_svg_symbolCircle","d3_selection_interruptNS","lock","activeId","active","interrupt","d3_transition","d3_transitionPrototype","d3_transition_tween","d3_transition_text","textContent","d3_transitionNamespace","d3_transitionNode","inherit","schedule","elapsed","cancelId","cancel","tick","tweens","d3_svg_axisX","d3_svg_axisY","d3_time_formatIsoNative","toISOString","d3_time_scale","methods","tickMethod","d3_time_scaleSteps","year","d3_time_scaleMilliseconds","d3_time_scaleDate","interval","skip","skipped","d3_json","d3_html","d3_document","createRange","selectNode","body","createContextualFragment","d3_arraySlice","childNodes","nodeType","d3_element_prototype","Element","d3_element_setAttribute","d3_element_setAttributeNS","d3_style_prototype","CSSStyleDeclaration","d3_style_setProperty","mean","median","numbers","variance","deviation","d3_bisect","bisector","shuffle","indexes","permutes","pairs","transpose","matrix","zip","arrays","merged","mapType","rollup","keyValue","setter","valuesByKey","sortKey","keyMap","d3_requote_re","querySelector","querySelectorAll","d3_selectMatcher","matches","Sizzle","matchesSelector","subgroup","subnode","subgroups","d3_nsPrefix","xhtml","xlink","xml","xmlns","getAttributeNS","contains","getComputedStyle","getPropertyValue","appendChild","insertBefore","bind","groupData","nodeData","enterNodes","exitNodes","nodeByKeyValue","keyValues","nextSibling","upgroup","mouseenter","mouseleave","navigator","userAgent","touch","touches","drag","mousedown","touchstart","dragstart","move","moved","position1","dragId","position0","dragged","dragOffset","ended","dragSubject","dragName","dragRestore","that","correspondingElement","origin","τε","SQRT2","interpolateZoom","ux0","uy0","w0","ux1","uy1","w1","coshr0","mousedowned","d3_behavior_zoomWheel","mousewheeled","dblclicked","touchstarted","view","scaleTo","translateTo","zoomTo","center0","zoomstarted","zooming","zoomended","location0","mousemove","mouseup","d3_selection_interrupt","relocate","scale0","locations0","started","touchmove","touchend","targets","changed","touchtime","distance0","l0","l1","distance1","scale1","zoomName","mousewheelTimer","translate0","d3_behavior_zoomDelta","shiftKey","d3_behavior_zoomInfinity","deltaY","deltaMode","wheelDelta","detail","view1","d3_transitionInheritId","d3_hslPrototype","brighter","darker","d3_hclPrototype","d3_lab_K","d3_labPrototype","d3_rgbPrototype","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","dsv","delimiter","typedResponse","formatRow","formatValue","reFormat","delimiterCode","parseRows","token","EOF","eol","EOL","formatRows","fieldSet","fields","field","csv","tsv","d3_formatPrefixes","fromCharCode","toPrecision","toExponential","toFixed","getUTCDate","getUTCDay","getUTCFullYear","getUTCHours","getUTCMilliseconds","getUTCMinutes","getUTCMonth","getUTCSeconds","setDate","d3_time_prototype","setUTCDate","setDay","setUTCDay","setUTCFullYear","setUTCHours","setMilliseconds","setUTCMilliseconds","setMinutes","setUTCMinutes","setMonth","setUTCMonth","setSeconds","setUTCSeconds","setTime","day","years","week","sunday","weeks","weekOfYear","-","numberFormat","timeFormat","d3_locale_enUS","d3_adderTemp","d3_geo_streamObjectType","Feature","feature","FeatureCollection","features","Sphere","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeometryCollection","geometries","d3_geo_areaSum","normal","equatorial","inflection","λ_","λi","φi","dλSum","λ__","φ__","compareRanges","withinRange","best","conicEqualArea","albers","albersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","alaska","hawaii","pointStream","lower48Stream","alaskaStream","hawaiiStream","d3_geo_pathAreaSum","d3_geo_pathBounds","contextStream","cacheStream","projectStream","projectionMutator","equirectangular","Δλ","sinΔλ","sinφ1","graticule","X0","DX","X1","Y0","DY","Y1","outline","majorExtent","minorExtent","majorStep","minorStep","greatArc","source_","target_","d3_geo_azimuthalEqualArea","cosλcosφ","azimuthalEqualArea","d3_geo_azimuthalEquidistant","azimuthalEquidistant","conicConformal","conicEquidistant","d3_geo_gnomonic","gnomonic","mercator","d3_geo_orthographic","orthographic","d3_geo_stereographic","stereographic","transverseMercator","geom","vertices","flippedPoints","upper","lower","skipLeft","skipRight","d3_geom_polygonPrototype","grandpa","uncle","sibling","voronoi","polygons","d3_geom_voronoiClipExtent","triangles","s0","delaunay","quadtree","nx","ny","insertChild","nPoint","xs","ys","x1_","y1_","x2_","y2_","compat","visit","interpolateRgb","interpolateObject","interpolateString","interpolateArray","d3_ease_default","d3_ease","poly","cubic","elastic","back","bounce","d3_ease_mode","in","out","in-out","out-in","interpolateHsl","interpolateLab","interpolateRound","baseVal","consolidate","d3_transformIdentity","interpolateTransform","bundle","chord","relayout","groupSums","subgroupIndex","chords","sortGroups","sortSubgroups","di","dj","subindex","sortChords","resort","force","repulse","dw","dn","theta2","chargeDistance2","dragmove","resume","distances","strengths","friction","linkDistance","d3_layout_forceLinkDistance","linkStrength","d3_layout_forceLinkStrength","d3_layout_forceChargeDistance2","gravity","weight","chargeDistance","theta","neighbors","candidates","childs","revalue","partition","arcs","d3_layout_pieSortByValue","series","orders","offsets","d3_layout_stackOrders","d3_layout_stackOffsets","inside-out","sums","tops","bottoms","default","silhouette","wiggle","s3","o0","expand","histogram","bin","bins","valuer","binner","frequency","pack","root0","root1","wrapTree","firstWalk","secondWalk","nodeSize","sizeNode","tx","separation","node1","siblings","midpoint","apportion","vip","vop","vom","sip","sop","sim","som","cluster","previousNode","treemap","squarify","score","pad","remaining","mode","worst","stickify","rmax","rmin","ratio","stickies","sticky","padFunction","padConstant","µ","σ","logNormal","bates","irwinHall","d3_category10","category20","d3_category20","category20b","d3_category20b","d3_category20c","threshold","circleSegment","rp","ap","padRadius","d3_svg_arcAuto","h1","h0","cornerRadius","rc1","rc0","oc","kc","lc","t30","t12","t03","t21","linear-closed","step-before","step-after","basis","basis-open","basis-closed","cardinal","cardinal-open","cardinal-closed","monotone","radial","equals","curve","diagonal","p3","projection_","d3_svg_symbols","cross","diamond","d3_svg_symbolTan30","square","triangle-down","d3_svg_symbolSqrt3","triangle-up","symbolTypes","d3_transitionId","d3_transitionInherit","subnodes","nameNS","attrTweenNS","styleString","styleTween","inheritId","id0","id1","tickTransform","tickArguments_","tickFormat_","tickEnter","tickExit","tickUpdate","tickSpacing","innerTickSize","tickPadding","pathUpdate","lineEnter","lineUpdate","textEnter","textUpdate","outerTickSize","d3_svg_axisDefaultOrient","d3_svg_axisOrients","tickSize","tickSubdivide","brushstart","background","resizes","d3_svg_brushCursor","gUpdate","backgroundUpdate","redrawX","redrawY","xExtent","yExtent","keydown","keyCode","dragging","keyup","brushmove","altKey","resizingX","move1","resizingY","event_","yClamp","xClamp","yExtentDomain","xExtentDomain","brushend","eventTarget","ex","ey","d3_svg_brushResizes","extent1","extent0","yi","nw","ne","se","sw","d3_time_formatUtc","d3_time_formatIso","iso","second","seconds","minute","minutes","hour","timezone","hours","month","d3_time_scaleLocalMethods","d3_time_scaleLocalFormat","d3_time_scaleUtcMethods","d3_time_scaleUtcFormat","responseXML","292","293","294","content","locals","295","sources","mappings","file","sourcesContent","sourceRoot","296","297"],"mappings":"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","file":"static/js/visualisation.77d1739e.chunk.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 269:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_crossfilter2__ = __webpack_require__(276);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_crossfilter2___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_crossfilter2__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_expose_loader_dc_dc__ = __webpack_require__(289);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_expose_loader_dc_dc___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_expose_loader_dc_dc__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_react_loading_animation__ = __webpack_require__(108);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_react_loading_animation___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_react_loading_animation__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_dc_dc_css__ = __webpack_require__(294);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_dc_dc_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_dc_dc_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__chart_css__ = __webpack_require__(296);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__chart_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__chart_css__);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/* eslint class-methods-use-this: off *//* eslint react/no-did-mount-set-state: off */// eslint-disable-line\nvar Vis=function Vis(data,Charts){var _class,_temp;return _temp=_class=function(_PureComponent){_inherits(Visualisation,_PureComponent);function Visualisation(){_classCallCheck(this,Visualisation);var _this=_possibleConstructorReturn(this,(Visualisation.__proto__||Object.getPrototypeOf(Visualisation)).call(this));_this.state={loading:true};_this.ndx={};return _this;}_createClass(Visualisation,[{key:'getChildContext',value:function getChildContext(){return{ndx:this.ndx};}},{key:'componentDidMount',value:function componentDidMount(){console.time('ndx');this.ndx=__WEBPACK_IMPORTED_MODULE_2_crossfilter2___default()(data);console.timeEnd('ndx');this.setState({loading:false});window.addEventListener('resize',this.resize);}},{key:'componentWillUnmount',value:function componentWillUnmount(){window.removeEventListener('resize',this.resize);__WEBPACK_IMPORTED_MODULE_3_expose_loader_dc_dc___default.a.chartRegistry.clear();}},{key:'resize',value:function resize(){// TODO: maybe throttle this\n__WEBPACK_IMPORTED_MODULE_3_expose_loader_dc_dc___default.a.disableTransitions=true;__WEBPACK_IMPORTED_MODULE_3_expose_loader_dc_dc___default.a.renderAll();__WEBPACK_IMPORTED_MODULE_3_expose_loader_dc_dc___default.a.disableTransitions=false;}},{key:'render',value:function render(){if(this.state.loading){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4_react_loading_animation___default.a,{width:'300px',height:'300px'});}return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(Charts,null);}}]);return Visualisation;}(__WEBPACK_IMPORTED_MODULE_0_react__[\"PureComponent\"]),_class.childContextTypes={ndx:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object.isRequired},_temp;};/* harmony default export */ __webpack_exports__[\"default\"] = (Vis);\n\n/***/ }),\n\n/***/ 273:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction crossfilter_identity(d) {\n  return d;\n}\n\nmodule.exports = crossfilter_identity;\n\n\n/***/ }),\n\n/***/ 274:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar crossfilter_identity = __webpack_require__(273);\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\n\nmodule.exports = heap_by(crossfilter_identity);\nmodule.exports.by = heap_by;\n\n\n/***/ }),\n\n/***/ 275:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar crossfilter_identity = __webpack_require__(273);\n\nfunction insertionsort_by(f) {\n\n  function insertionsort(a, lo, hi) {\n    for (var i = lo + 1; i < hi; ++i) {\n      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n        a[j] = a[j - 1];\n      }\n      a[j] = t;\n    }\n    return a;\n  }\n\n  return insertionsort;\n}\n\nmodule.exports = insertionsort_by(crossfilter_identity);\nmodule.exports.by = insertionsort_by;\n\n\n/***/ }),\n\n/***/ 276:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(277).crossfilter;\n\n\n/***/ }),\n\n/***/ 277:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar xfilterArray = __webpack_require__(278);\nvar xfilterFilter = __webpack_require__(279);\nvar crossfilter_identity = __webpack_require__(273);\nvar crossfilter_null = __webpack_require__(280);\nvar crossfilter_zero = __webpack_require__(281);\nvar xfilterHeapselect = __webpack_require__(282);\nvar xfilterHeap = __webpack_require__(274);\nvar bisect = __webpack_require__(283);\nvar insertionsort = __webpack_require__(275);\nvar permute = __webpack_require__(284);\nvar quicksort = __webpack_require__(285);\nvar xfilterReduce = __webpack_require__(286);\nvar packageJson = __webpack_require__(287); // require own package.json for the version field\nvar result = __webpack_require__(288);\n// expose API exports\nexports.crossfilter = crossfilter;\nexports.crossfilter.heap = xfilterHeap;\nexports.crossfilter.heapselect = xfilterHeapselect;\nexports.crossfilter.bisect = bisect;\nexports.crossfilter.insertionsort = insertionsort;\nexports.crossfilter.permute = permute;\nexports.crossfilter.quicksort = quicksort;\nexports.crossfilter.version = packageJson.version; // please note use of \"package-json-versionify\" transform\n\nfunction crossfilter() {\n  var crossfilter = {\n    add: add,\n    remove: removeData,\n    dimension: dimension,\n    groupAll: groupAll,\n    size: size,\n    all: all,\n    allFiltered: allFiltered,\n    onChange: onChange,\n    isElementFiltered: isElementFiltered\n  };\n\n  var data = [], // the records\n      n = 0, // the number of records; data.length\n      filters, // 1 is filtered out\n      filterListeners = [], // when the filters change\n      dataListeners = [], // when data is added\n      removeDataListeners = [], // when data is removed\n      callbacks = [];\n\n  filters = new xfilterArray.bitarray(0);\n\n  // Adds the specified new records to this crossfilter.\n  function add(newData) {\n    var n0 = n,\n        n1 = newData.length;\n\n    // If there's actually new data to add…\n    // Merge the new data into the existing data.\n    // Lengthen the filter bitset to handle the new records.\n    // Notify listeners (dimensions and groups) that new data is available.\n    if (n1) {\n      data = data.concat(newData);\n      filters.lengthen(n += n1);\n      dataListeners.forEach(function(l) { l(newData, n0, n1); });\n      triggerOnChange('dataAdded');\n    }\n\n    return crossfilter;\n  }\n\n  // Removes all records that match the current filters.\n  function removeData() {\n    var newIndex = crossfilter_index(n, n),\n        removed = [];\n\n    for (var index1 = 0, index2 = 0; index1 < n; ++index1) {\n      if (!filters.zero(index1)) newIndex[index1] = index2++;\n      else removed.push(index1);\n    }\n\n    // Remove all matching records from groups.\n    filterListeners.forEach(function(l) { l(-1, -1, [], removed, true); });\n\n    // Update indexes.\n    removeDataListeners.forEach(function(l) { l(newIndex); });\n\n    // Remove old filters and data by overwriting.\n    for (var index3 = 0, index4 = 0; index3 < n; ++index3) {\n      if (!filters.zero(index3)) {\n        if (index3 !== index4) filters.copy(index4, index3), data[index4] = data[index3];\n        ++index4;\n      }\n    }\n\n    data.length = n = index4;\n    filters.truncate(index4);\n    triggerOnChange('dataRemoved');\n  }\n\n  // Return true if the data element at index i is filtered IN.\n  // Optionally, ignore the filters of any dimensions in the ignore_dimensions list.\n  function isElementFiltered(i, ignore_dimensions) {\n    var n,\n        d,\n        id,\n        len,\n        mask = Array(filters.subarrays);\n    for (n = 0; n < filters.subarrays; n++) { mask[n] = ~0; }\n    if (ignore_dimensions) {\n      for (d = 0, len = ignore_dimensions.length; d < len; d++) {\n        // The top bits of the ID are the subarray offset and the lower bits are the bit\n        // offset of the \"one\" mask.\n        id = ignore_dimensions[d].id();\n        mask[id >> 7] &= ~(0x1 << (id & 0x3f));\n      }\n    }\n    return filters.zeroExceptMask(i,mask);\n  }\n\n  // Adds a new dimension with the specified value accessor function.\n  function dimension(value, iterable) {\n\n    if (typeof value === 'string') {\n      var accessorPath = value;\n      value = function(d) { return result(d, accessorPath); };\n    }\n\n    var dimension = {\n      filter: filter,\n      filterExact: filterExact,\n      filterRange: filterRange,\n      filterFunction: filterFunction,\n      filterAll: filterAll,\n      top: top,\n      bottom: bottom,\n      group: group,\n      groupAll: groupAll,\n      dispose: dispose,\n      remove: dispose, // for backwards-compatibility\n      accessor: value,\n      id: function() { return id; }\n    };\n\n    var one, // lowest unset bit as mask, e.g., 00001000\n        zero, // inverted one, e.g., 11110111\n        offset, // offset into the filters arrays\n        id, // unique ID for this dimension (reused when dimensions are disposed)\n        values, // sorted, cached array\n        index, // value rank ↦ object id\n        newValues, // temporary array storing newly-added values\n        newIndex, // temporary array storing newly-added index\n        iterablesIndexCount,\n        newIterablesIndexCount,\n        iterablesIndexFilterStatus,\n        newIterablesIndexFilterStatus,\n        iterablesEmptyRows = [],\n        sort = quicksort.by(function(i) { return newValues[i]; }),\n        refilter = xfilterFilter.filterAll, // for recomputing filter\n        refilterFunction, // the custom filter function in use\n        indexListeners = [], // when data is added\n        dimensionGroups = [],\n        lo0 = 0,\n        hi0 = 0,\n        t = 0,\n        k;\n\n    // Updating a dimension is a two-stage process. First, we must update the\n    // associated filters for the newly-added records. Once all dimensions have\n    // updated their filters, the groups are notified to update.\n    dataListeners.unshift(preAdd);\n    dataListeners.push(postAdd);\n\n    removeDataListeners.push(removeData);\n\n    // Add a new dimension in the filter bitmap and store the offset and bitmask.\n    var tmp = filters.add();\n    offset = tmp.offset;\n    one = tmp.one;\n    zero = ~one;\n\n    // Create a unique ID for the dimension\n    // IDs will be re-used if dimensions are disposed.\n    // For internal use the ID is the subarray offset shifted left 7 bits or'd with the\n    // bit offset of the set bit in the dimension's \"one\" mask.\n    id = (offset << 7) | (Math.log(one) / Math.log(2));\n\n    preAdd(data, 0, n);\n    postAdd(data, 0, n);\n\n    // Incorporates the specified new records into this dimension.\n    // This function is responsible for updating filters, values, and index.\n    function preAdd(newData, n0, n1) {\n\n      if (iterable){\n        // Count all the values\n        t = 0;\n        j = 0;\n        k = [];\n\n        for (var i0 = 0; i0 < newData.length; i0++) {\n          for(j = 0, k = value(newData[i0]); j < k.length; j++) {\n            t++;\n          }\n        }\n\n        newValues = [];\n        newIterablesIndexCount = crossfilter_range(newData.length);\n        newIterablesIndexFilterStatus = crossfilter_index(t,1);\n        var unsortedIndex = crossfilter_range(t);\n\n        for (var l = 0, index1 = 0; index1 < newData.length; index1++) {\n          k = value(newData[index1])\n          //\n          if(!k.length){\n            newIterablesIndexCount[index1] = 0;\n            iterablesEmptyRows.push(index1 + n0);\n            continue;\n          }\n          newIterablesIndexCount[index1] = k.length\n          for (j = 0; j < k.length; j++) {\n            newValues.push(k[j]);\n            unsortedIndex[l] = index1;\n            l++;\n          }\n        }\n\n        // Create the Sort map used to sort both the values and the valueToData indices\n        var sortMap = sort(crossfilter_range(t), 0, t);\n\n        // Use the sortMap to sort the newValues\n        newValues = permute(newValues, sortMap);\n\n\n        // Use the sortMap to sort the unsortedIndex map\n        // newIndex should be a map of sortedValue -> crossfilterData\n        newIndex = permute(unsortedIndex, sortMap)\n\n      } else{\n        // Permute new values into natural order using a standard sorted index.\n        newValues = newData.map(value);\n        newIndex = sort(crossfilter_range(n1), 0, n1);\n        newValues = permute(newValues, newIndex);\n      }\n\n      if(iterable) {\n        n1 = t;\n      }\n\n      // Bisect newValues to determine which new records are selected.\n      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1];\n      if (refilterFunction) {\n        for (var index2 = 0; index2 < n1; ++index2) {\n          if (!refilterFunction(newValues[index2], index2)) {\n            filters[offset][newIndex[index2] + n0] |= one;\n            if(iterable) newIterablesIndexFilterStatus[index2] = 1;\n          }\n        }\n      } else {\n        for (var index3 = 0; index3 < lo1; ++index3) {\n          filters[offset][newIndex[index3] + n0] |= one;\n          if(iterable) newIterablesIndexFilterStatus[index3] = 1;\n        }\n        for (var index4 = hi1; index4 < n1; ++index4) {\n          filters[offset][newIndex[index4] + n0] |= one;\n          if(iterable) newIterablesIndexFilterStatus[index4] = 1;\n        }\n      }\n\n      // If this dimension previously had no data, then we don't need to do the\n      // more expensive merge operation; use the new values and index as-is.\n      if (!n0) {\n        values = newValues;\n        index = newIndex;\n        iterablesIndexCount = newIterablesIndexCount;\n        iterablesIndexFilterStatus = newIterablesIndexFilterStatus;\n        lo0 = lo1;\n        hi0 = hi1;\n        return;\n      }\n\n\n\n      var oldValues = values,\n        oldIndex = index,\n        oldIterablesIndexFilterStatus = iterablesIndexFilterStatus,\n        old_n0,\n        i1 = 0;\n\n      i0 = 0;\n\n      if(iterable){\n        old_n0 = n0\n        n0 = oldValues.length;\n        n1 = t\n      }\n\n      // Otherwise, create new arrays into which to merge new and old.\n      values = iterable ? new Array(n0 + n1) : new Array(n);\n      index = iterable ? new Array(n0 + n1) : crossfilter_index(n, n);\n      if(iterable) iterablesIndexFilterStatus = crossfilter_index(n0 + n1, 1);\n\n      // Concatenate the newIterablesIndexCount onto the old one.\n      if(iterable) {\n        var oldiiclength = iterablesIndexCount.length;\n        iterablesIndexCount = xfilterArray.arrayLengthen(iterablesIndexCount, n);\n        for(var j=0; j+oldiiclength < n; j++) {\n          iterablesIndexCount[j+oldiiclength] = newIterablesIndexCount[j];\n        }\n      }\n\n      // Merge the old and new sorted values, and old and new index.\n      var index5 = 0;\n      for (; i0 < n0 && i1 < n1; ++index5) {\n        if (oldValues[i0] < newValues[i1]) {\n          values[index5] = oldValues[i0];\n          if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];\n          index[index5] = oldIndex[i0++];\n        } else {\n          values[index5] = newValues[i1];\n          if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];\n          index[index5] = newIndex[i1++] + (iterable ? old_n0 : n0);\n        }\n      }\n\n      // Add any remaining old values.\n      for (; i0 < n0; ++i0, ++index5) {\n        values[index5] = oldValues[i0];\n        if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];\n        index[index5] = oldIndex[i0];\n      }\n\n      // Add any remaining new values.\n      for (; i1 < n1; ++i1, ++index5) {\n        values[index5] = newValues[i1];\n        if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];\n        index[index5] = newIndex[i1] + (iterable ? old_n0 : n0);\n      }\n\n      // Bisect again to recompute lo0 and hi0.\n      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // When all filters have updated, notify index listeners of the new values.\n    function postAdd(newData, n0, n1) {\n      indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\n      newValues = newIndex = null;\n    }\n\n    function removeData(reIndex) {\n      for (var i = 0, j = 0, k; i < n; ++i) {\n        if (!filters.zero(k = index[i])) {\n          if (i !== j) values[j] = values[i];\n          index[j] = reIndex[k];\n          ++j;\n        }\n      }\n      values.length = j;\n      while (j < n) index[j++] = 0;\n\n      // Bisect again to recompute lo0 and hi0.\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // Updates the selected values based on the specified bounds [lo, hi].\n    // This implementation is used by all the public filter methods.\n    function filterIndexBounds(bounds) {\n\n      var lo1 = bounds[0],\n          hi1 = bounds[1];\n\n      if (refilterFunction) {\n        refilterFunction = null;\n        filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; }, bounds[0] === 0 && bounds[1] === index.length);\n        lo0 = lo1;\n        hi0 = hi1;\n        return dimension;\n      }\n\n      var i,\n          j,\n          k,\n          added = [],\n          removed = [],\n          valueIndexAdded = [],\n          valueIndexRemoved = [];\n\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          added.push(index[i]);\n          valueIndexAdded.push(i);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          removed.push(index[i]);\n          valueIndexRemoved.push(i);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          added.push(index[i]);\n          valueIndexAdded.push(i);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          removed.push(index[i]);\n          valueIndexRemoved.push(i);\n        }\n      }\n\n      if(!iterable) {\n        // Flip filters normally.\n\n        for(i=0; i<added.length; i++) {\n          filters[offset][added[i]] ^= one;\n        }\n\n        for(i=0; i<removed.length; i++) {\n          filters[offset][removed[i]] ^= one;\n        }\n\n      } else {\n        // For iterables, we need to figure out if the row has been completely removed vs partially included\n        // Only count a row as added if it is not already being aggregated. Only count a row\n        // as removed if the last element being aggregated is removed.\n\n        var newAdded = [];\n        var newRemoved = [];\n        for (i = 0; i < added.length; i++) {\n          iterablesIndexCount[added[i]]++\n          iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;\n          if(iterablesIndexCount[added[i]] === 1) {\n            filters[offset][added[i]] ^= one;\n            newAdded.push(added[i]);\n          }\n        }\n        for (i = 0; i < removed.length; i++) {\n          iterablesIndexCount[removed[i]]--\n          iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;\n          if(iterablesIndexCount[removed[i]] === 0) {\n            filters[offset][removed[i]] ^= one;\n            newRemoved.push(removed[i]);\n          }\n        }\n\n        added = newAdded;\n        removed = newRemoved;\n\n        // Now handle empty rows.\n        if(bounds[0] === 0 && bounds[1] === index.length) {\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if((filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was not in the filter, so set the filter and add\n              filters[offset][k] ^= one;\n              added.push(k);\n            }\n          }\n        } else {\n          // filter in place - remove empty rows if necessary\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was in the filter, so set the filter and remove\n              filters[offset][k] ^= one;\n              removed.push(k);\n            }\n          }\n        }\n      }\n\n      lo0 = lo1;\n      hi0 = hi1;\n      filterListeners.forEach(function(l) { l(one, offset, added, removed); });\n      triggerOnChange('filtered');\n      return dimension;\n    }\n\n    // Filters this dimension using the specified range, value, or null.\n    // If the range is null, this is equivalent to filterAll.\n    // If the range is an array, this is equivalent to filterRange.\n    // Otherwise, this is equivalent to filterExact.\n    function filter(range) {\n      return range == null\n          ? filterAll() : Array.isArray(range)\n          ? filterRange(range) : typeof range === \"function\"\n          ? filterFunction(range)\n          : filterExact(range);\n    }\n\n    // Filters this dimension to select the exact value.\n    function filterExact(value) {\n      return filterIndexBounds((refilter = xfilterFilter.filterExact(bisect, value))(values));\n    }\n\n    // Filters this dimension to select the specified range [lo, hi].\n    // The lower bound is inclusive, and the upper bound is exclusive.\n    function filterRange(range) {\n      return filterIndexBounds((refilter = xfilterFilter.filterRange(bisect, range))(values));\n    }\n\n    // Clears any filters on this dimension.\n    function filterAll() {\n      return filterIndexBounds((refilter = xfilterFilter.filterAll)(values));\n    }\n\n    // Filters this dimension using an arbitrary function.\n    function filterFunction(f) {\n      refilterFunction = f;\n      refilter = xfilterFilter.filterAll;\n\n      filterIndexFunction(f, false);\n\n      lo0 = 0;\n      hi0 = n;\n\n      return dimension;\n    }\n\n    function filterIndexFunction(f, filterAll) {\n      var i,\n          k,\n          x,\n          added = [],\n          removed = [],\n          valueIndexAdded = [],\n          valueIndexRemoved = [],\n          indexLength = index.length;\n\n      if(!iterable) {\n        for (i = 0; i < indexLength; ++i) {\n          if (!(filters[offset][k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n            if (x) added.push(k);\n            else removed.push(k);\n          }\n        }\n      }\n\n      if(iterable) {\n        for(i=0; i < indexLength; ++i) {\n          if(f(values[i], i)) {\n            added.push(index[i]);\n            valueIndexAdded.push(i);\n          } else {\n            removed.push(index[i]);\n            valueIndexRemoved.push(i);\n          }\n        }\n      }\n\n      if(!iterable) {\n        for(i=0; i<added.length; i++) {\n          if(filters[offset][added[i]] & one) filters[offset][added[i]] &= zero;\n        }\n\n        for(i=0; i<removed.length; i++) {\n          if(!(filters[offset][removed[i]] & one)) filters[offset][removed[i]] |= one;\n        }\n      } else {\n\n        var newAdded = [];\n        var newRemoved = [];\n        for (i = 0; i < added.length; i++) {\n          // First check this particular value needs to be added\n          if(iterablesIndexFilterStatus[valueIndexAdded[i]] === 1) {\n            iterablesIndexCount[added[i]]++\n            iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;\n            if(iterablesIndexCount[added[i]] === 1) {\n              filters[offset][added[i]] ^= one;\n              newAdded.push(added[i]);\n            }\n          }\n        }\n        for (i = 0; i < removed.length; i++) {\n          // First check this particular value needs to be removed\n          if(iterablesIndexFilterStatus[valueIndexRemoved[i]] === 0) {\n            iterablesIndexCount[removed[i]]--\n            iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;\n            if(iterablesIndexCount[removed[i]] === 0) {\n              filters[offset][removed[i]] ^= one;\n              newRemoved.push(removed[i]);\n            }\n          }\n        }\n\n        added = newAdded;\n        removed = newRemoved;\n\n        // Now handle empty rows.\n        if(filterAll) {\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if((filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was not in the filter, so set the filter and add\n              filters[offset][k] ^= one;\n              added.push(k);\n            }\n          }\n        } else {\n          // filter in place - remove empty rows if necessary\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was in the filter, so set the filter and remove\n              filters[offset][k] ^= one;\n              removed.push(k);\n            }\n          }\n        }\n      }\n\n      filterListeners.forEach(function(l) { l(one, offset, added, removed); });\n      triggerOnChange('filtered');\n    }\n\n    // Returns the top K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function top(k, top_offset) {\n      var array = [],\n          i = hi0,\n          j,\n          toSkip = 0;\n\n      if(top_offset && top_offset > 0) toSkip = top_offset;\n\n      while (--i >= lo0 && k > 0) {\n        if (filters.zero(j = index[i])) {\n          if(toSkip > 0) {\n            //skip matching row\n            --toSkip;\n          } else {\n            array.push(data[j]);\n            --k;\n          }\n        }\n      }\n\n      if(iterable){\n        for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {\n          // Add row with empty iterable column at the end\n          if(filters.zero(j = iterablesEmptyRows[i])) {\n            if(toSkip > 0) {\n              //skip matching row\n              --toSkip;\n            } else {\n              array.push(data[j]);\n              --k;\n            }\n          }\n        }\n      }\n\n      return array;\n    }\n\n    // Returns the bottom K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function bottom(k, bottom_offset) {\n      var array = [],\n          i,\n          j,\n          toSkip = 0;\n\n      if(bottom_offset && bottom_offset > 0) toSkip = bottom_offset;\n\n      if(iterable) {\n        // Add row with empty iterable column at the top\n        for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {\n          if(filters.zero(j = iterablesEmptyRows[i])) {\n            if(toSkip > 0) {\n              //skip matching row\n              --toSkip;\n            } else {\n              array.push(data[j]);\n              --k;\n            }\n          }\n        }\n      }\n\n      i = lo0;\n\n      while (i < hi0 && k > 0) {\n        if (filters.zero(j = index[i])) {\n          if(toSkip > 0) {\n            //skip matching row\n            --toSkip;\n          } else {\n            array.push(data[j]);\n            --k;\n          }\n        }\n        i++;\n      }\n\n      return array;\n    }\n\n    // Adds a new group to this dimension, using the specified key function.\n    function group(key) {\n      var group = {\n        top: top,\n        all: all,\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        order: order,\n        orderNatural: orderNatural,\n        size: size,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      // Ensure that this group will be removed when the dimension is removed.\n      dimensionGroups.push(group);\n\n      var groups, // array of {key, value}\n          groupIndex, // object id ↦ group id\n          groupWidth = 8,\n          groupCapacity = crossfilter_capacity(groupWidth),\n          k = 0, // cardinality\n          select,\n          heap,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          update = crossfilter_null,\n          reset = crossfilter_null,\n          resetNeeded = true,\n          groupAll = key === crossfilter_null,\n          n0old;\n\n      if (arguments.length < 1) key = crossfilter_identity;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the associated reduce values. It must also listen to\n      // the parent dimension for when data is added, and compute new keys.\n      filterListeners.push(update);\n      indexListeners.push(add);\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into the grouping.\n      add(values, index, 0, n);\n\n      // Incorporates the specified new values into this group.\n      // This function is responsible for updating groups and groupIndex.\n      function add(newValues, newIndex, n0, n1) {\n\n        if(iterable) {\n          n0old = n0\n          n0 = values.length - newValues.length\n          n1 = newValues.length;\n        }\n\n        var oldGroups = groups,\n            reIndex = iterable ? [] : crossfilter_index(k, groupCapacity),\n            add = reduceAdd,\n            remove = reduceRemove,\n            initial = reduceInitial,\n            k0 = k, // old cardinality\n            i0 = 0, // index of old group\n            i1 = 0, // index of new record\n            j, // object id\n            g0, // old group\n            x0, // old key\n            x1, // new key\n            g, // group to add\n            x; // key of group to add\n\n        // If a reset is needed, we don't need to update the reduce values.\n        if (resetNeeded) add = initial = crossfilter_null;\n        if (resetNeeded) remove = initial = crossfilter_null;\n\n        // Reset the new groups (k is a lower bound).\n        // Also, make sure that groupIndex exists and is long enough.\n        groups = new Array(k), k = 0;\n        if(iterable){\n          groupIndex = k0 > 1 ? groupIndex : [];\n        }\n        else{\n          groupIndex = k0 > 1 ? xfilterArray.arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n        }\n\n\n        // Get the first old key (x0 of g0), if it exists.\n        if (k0) x0 = (g0 = oldGroups[0]).key;\n\n        // Find the first new key (x1), skipping NaN keys.\n        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\n\n        // While new keys remain…\n        while (i1 < n1) {\n\n          // Determine the lesser of the two current keys; new and old.\n          // If there are no old keys remaining, then always add the new key.\n          if (g0 && x0 <= x1) {\n            g = g0, x = x0;\n\n            // Record the new index of the old group.\n            reIndex[i0] = k;\n\n            // Retrieve the next old key.\n            g0 = oldGroups[++i0];\n            if (g0) x0 = g0.key;\n          } else {\n            g = {key: x1, value: initial()}, x = x1;\n          }\n\n          // Add the lesser group.\n          groups[k] = g;\n\n          // Add any selected records belonging to the added group, while\n          // advancing the new key and populating the associated group index.\n\n          while (x1 <= x) {\n            j = newIndex[i1] + (iterable ? n0old : n0)\n\n\n            if(iterable){\n              if(groupIndex[j]){\n                groupIndex[j].push(k)\n              }\n              else{\n                groupIndex[j] = [k]\n              }\n            }\n            else{\n              groupIndex[j] = k;\n            }\n\n            // Always add new values to groups. Only remove when not in filter.\n            // This gives groups full information on data life-cycle.\n            g.value = add(g.value, data[j], true);\n            if (!filters.zeroExcept(j, offset, zero)) g.value = remove(g.value, data[j], false);\n            if (++i1 >= n1) break;\n            x1 = key(newValues[i1]);\n          }\n\n          groupIncrement();\n        }\n\n        // Add any remaining old groups that were greater th1an all new keys.\n        // No incremental reduce is needed; these groups have no new records.\n        // Also record the new index of the old group.\n        while (i0 < k0) {\n          groups[reIndex[i0] = k] = oldGroups[i0++];\n          groupIncrement();\n        }\n\n\n        // Fill in gaps with empty arrays where there may have been rows with empty iterables\n        if(iterable){\n          for (var index1 = 0; index1 < n; index1++) {\n            if(!groupIndex[index1]){\n              groupIndex[index1] = [];\n            }\n          }\n        }\n\n        // If we added any new groups before any old groups,\n        // update the group index of all the old records.\n        if(k > i0){\n          if(iterable){\n            groupIndex = permute(groupIndex, reIndex, true)\n          }\n          else{\n            for (i0 = 0; i0 < n0; ++i0) {\n              groupIndex[i0] = reIndex[groupIndex[i0]];\n            }\n          }\n        }\n\n        // Modify the update and reset behavior based on the cardinality.\n        // If the cardinality is less than or equal to one, then the groupIndex\n        // is not needed. If the cardinality is zero, then there are no records\n        // and therefore no groups to update or reset. Note that we also must\n        // change the registered listener to point to the new method.\n        j = filterListeners.indexOf(update);\n        if (k > 1) {\n          update = updateMany;\n          reset = resetMany;\n        } else {\n          if (!k && groupAll) {\n            k = 1;\n            groups = [{key: null, value: initial()}];\n          }\n          if (k === 1) {\n            update = updateOne;\n            reset = resetOne;\n          } else {\n            update = crossfilter_null;\n            reset = crossfilter_null;\n          }\n          groupIndex = null;\n        }\n        filterListeners[j] = update;\n\n        // Count the number of added groups,\n        // and widen the group index as needed.\n        function groupIncrement() {\n          if(iterable){\n            k++\n            return\n          }\n          if (++k === groupCapacity) {\n            reIndex = xfilterArray.arrayWiden(reIndex, groupWidth <<= 1);\n            groupIndex = xfilterArray.arrayWiden(groupIndex, groupWidth);\n            groupCapacity = crossfilter_capacity(groupWidth);\n          }\n        }\n      }\n\n      function removeData() {\n        if (k > 1) {\n          var oldK = k,\n              oldGroups = groups,\n              seenGroups = crossfilter_index(oldK, oldK);\n\n          // Filter out non-matches by copying matching group index entries to\n          // the beginning of the array.\n          for (var i = 0, j = 0; i < n; ++i) {\n            if (!filters.zero(i)) {\n              seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n              ++j;\n            }\n          }\n\n          // Reassemble groups including only those groups that were referred\n          // to by matching group index entries.  Note the new group index in\n          // seenGroups.\n          groups = [], k = 0;\n          for (i = 0; i < oldK; ++i) {\n            if (seenGroups[i]) {\n              seenGroups[i] = k++;\n              groups.push(oldGroups[i]);\n            }\n          }\n\n          if (k > 1) {\n            // Reindex the group index using seenGroups to find the new index.\n            for (var index2 = 0; index2 < j; ++index2) groupIndex[index2] = seenGroups[groupIndex[index2]];\n          } else {\n            groupIndex = null;\n          }\n          filterListeners[filterListeners.indexOf(update)] = k > 1\n              ? (reset = resetMany, update = updateMany)\n              : k === 1 ? (reset = resetOne, update = updateOne)\n              : reset = update = crossfilter_null;\n        } else if (k === 1) {\n          if (groupAll) return;\n          for (var index3 = 0; index3 < n; ++index3) if (!filters.zero(index3)) return;\n          groups = [], k = 0;\n          filterListeners[filterListeners.indexOf(update)] =\n          update = reset = crossfilter_null;\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is greater than 1.\n      // notFilter indicates a crossfilter.add/remove operation.\n      function updateMany(filterOne, filterOffset, added, removed, notFilter) {\n\n        if ((filterOne === one && filterOffset === offset) || resetNeeded) return;\n\n        var i,\n            j,\n            k,\n            n,\n            g;\n\n        if(iterable){\n          // Add the added values.\n          for (i = 0, n = added.length; i < n; ++i) {\n            if (filters.zeroExcept(k = added[i], offset, zero)) {\n              for (j = 0; j < groupIndex[k].length; j++) {\n                g = groups[groupIndex[k][j]];\n                g.value = reduceAdd(g.value, data[k], false, j);\n              }\n            }\n          }\n\n          // Remove the removed values.\n          for (i = 0, n = removed.length; i < n; ++i) {\n            if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n              for (j = 0; j < groupIndex[k].length; j++) {\n                g = groups[groupIndex[k][j]];\n                g.value = reduceRemove(g.value, data[k], notFilter, j);\n              }\n            }\n          }\n          return;\n        }\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (filters.zeroExcept(k = added[i], offset, zero)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceAdd(g.value, data[k], false);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceRemove(g.value, data[k], notFilter);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is 1.\n      // notFilter indicates a crossfilter.add/remove operation.\n      function updateOne(filterOne, filterOffset, added, removed, notFilter) {\n        if ((filterOne === one && filterOffset === offset) || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g = groups[0];\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (filters.zeroExcept(k = added[i], offset, zero)) {\n            g.value = reduceAdd(g.value, data[k], false);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n            g.value = reduceRemove(g.value, data[k], notFilter);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is greater than 1.\n      function resetMany() {\n        var i,\n            j,\n            g;\n\n        // Reset all group values.\n        for (i = 0; i < k; ++i) {\n          groups[i].value = reduceInitial();\n        }\n\n        // We add all records and then remove filtered records so that reducers\n        // can build an 'unfiltered' view even if there are already filters in\n        // place on other dimensions.\n        if(iterable){\n          for (i = 0; i < n; ++i) {\n            for (j = 0; j < groupIndex[i].length; j++) {\n              g = groups[groupIndex[i][j]];\n              g.value = reduceAdd(g.value, data[i], true, j);\n            }\n          }\n          for (i = 0; i < n; ++i) {\n            if (!filters.zeroExcept(i, offset, zero)) {\n              for (j = 0; j < groupIndex[i].length; j++) {\n                g = groups[groupIndex[i][j]];\n                g.value = reduceRemove(g.value, data[i], false, j);\n              }\n            }\n          }\n          return;\n        }\n\n        for (i = 0; i < n; ++i) {\n          g = groups[groupIndex[i]];\n          g.value = reduceAdd(g.value, data[i], true);\n        }\n        for (i = 0; i < n; ++i) {\n          if (!filters.zeroExcept(i, offset, zero)) {\n            g = groups[groupIndex[i]];\n            g.value = reduceRemove(g.value, data[i], false);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is 1.\n      function resetOne() {\n        var i,\n            g = groups[0];\n\n        // Reset the singleton group values.\n        g.value = reduceInitial();\n\n        // We add all records and then remove filtered records so that reducers\n        // can build an 'unfiltered' view even if there are already filters in\n        // place on other dimensions.\n        for (i = 0; i < n; ++i) {\n          g.value = reduceAdd(g.value, data[i], true);\n        }\n\n        for (i = 0; i < n; ++i) {\n          if (!filters.zeroExcept(i, offset, zero)) {\n            g.value = reduceRemove(g.value, data[i], false);\n          }\n        }\n      }\n\n      // Returns the array of group values, in the dimension's natural order.\n      function all() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return groups;\n      }\n\n      // Returns a new array containing the top K group values, in reduce order.\n      function top(k) {\n        var top = select(all(), 0, groups.length, k);\n        return heap.sort(top, 0, top.length);\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce values, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Sets the reduce order, using the specified accessor.\n      function order(value) {\n        select = xfilterHeapselect.by(valueOf);\n        heap = xfilterHeap.by(valueOf);\n        function valueOf(d) { return value(d.value); }\n        return group;\n      }\n\n      // A convenience method for natural ordering by reduce value.\n      function orderNatural() {\n        return order(crossfilter_identity);\n      }\n\n      // Returns the cardinality of this group, irrespective of any filters.\n      function size() {\n        return k;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i, 1);\n        i = indexListeners.indexOf(add);\n        if (i >= 0) indexListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        return group;\n      }\n\n      return reduceCount().orderNatural();\n    }\n\n    // A convenience function for generating a singleton group.\n    function groupAll() {\n      var g = group(crossfilter_null), all = g.all;\n      delete g.all;\n      delete g.top;\n      delete g.order;\n      delete g.orderNatural;\n      delete g.size;\n      g.value = function() { return all()[0].value; };\n      return g;\n    }\n\n    // Removes this dimension and associated groups and event listeners.\n    function dispose() {\n      dimensionGroups.forEach(function(group) { group.dispose(); });\n      var i = dataListeners.indexOf(preAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = dataListeners.indexOf(postAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = removeDataListeners.indexOf(removeData);\n      if (i >= 0) removeDataListeners.splice(i, 1);\n      filters.masks[offset] &= zero;\n      return filterAll();\n    }\n\n    return dimension;\n  }\n\n  // A convenience method for groupAll on a dummy dimension.\n  // This implementation can be optimized since it always has cardinality 1.\n  function groupAll() {\n    var group = {\n      reduce: reduce,\n      reduceCount: reduceCount,\n      reduceSum: reduceSum,\n      value: value,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var reduceValue,\n        reduceAdd,\n        reduceRemove,\n        reduceInitial,\n        resetNeeded = true;\n\n    // The group listens to the crossfilter for when any dimension changes, so\n    // that it can update the reduce value. It must also listen to the parent\n    // dimension for when data is added.\n    filterListeners.push(update);\n    dataListeners.push(add);\n\n    // For consistency; actually a no-op since resetNeeded is true.\n    add(data, 0, n);\n\n    // Incorporates the specified new values into this group.\n    function add(newData, n0) {\n      var i;\n\n      if (resetNeeded) return;\n\n      // Cycle through all the values.\n      for (i = n0; i < n; ++i) {\n\n        // Add all values all the time.\n        reduceValue = reduceAdd(reduceValue, data[i], true);\n\n        // Remove the value if filtered.\n        if (!filters.zero(i)) {\n          reduceValue = reduceRemove(reduceValue, data[i], false);\n        }\n      }\n    }\n\n    // Reduces the specified selected or deselected records.\n    function update(filterOne, filterOffset, added, removed, notFilter) {\n      var i,\n          k,\n          n;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = 0, n = added.length; i < n; ++i) {\n        if (filters.zero(k = added[i])) {\n          reduceValue = reduceAdd(reduceValue, data[k], notFilter);\n        }\n      }\n\n      // Remove the removed values.\n      for (i = 0, n = removed.length; i < n; ++i) {\n        if (filters.only(k = removed[i], filterOffset, filterOne)) {\n          reduceValue = reduceRemove(reduceValue, data[k], notFilter);\n        }\n      }\n    }\n\n    // Recomputes the group reduce value from scratch.\n    function reset() {\n      var i;\n\n      reduceValue = reduceInitial();\n\n      // Cycle through all the values.\n      for (i = 0; i < n; ++i) {\n\n        // Add all values all the time.\n        reduceValue = reduceAdd(reduceValue, data[i], true);\n\n        // Remove the value if it is filtered.\n        if (!filters.zero(i)) {\n          reduceValue = reduceRemove(reduceValue, data[i], false);\n        }\n      }\n    }\n\n    // Sets the reduce behavior for this group to use the specified functions.\n    // This method lazily recomputes the reduce value, waiting until needed.\n    function reduce(add, remove, initial) {\n      reduceAdd = add;\n      reduceRemove = remove;\n      reduceInitial = initial;\n      resetNeeded = true;\n      return group;\n    }\n\n    // A convenience method for reducing by count.\n    function reduceCount() {\n      return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, crossfilter_zero);\n    }\n\n    // A convenience method for reducing by sum(value).\n    function reduceSum(value) {\n      return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), crossfilter_zero);\n    }\n\n    // Returns the computed reduce value.\n    function value() {\n      if (resetNeeded) reset(), resetNeeded = false;\n      return reduceValue;\n    }\n\n    // Removes this group and associated event listeners.\n    function dispose() {\n      var i = filterListeners.indexOf(update);\n      if (i >= 0) filterListeners.splice(i);\n      i = dataListeners.indexOf(add);\n      if (i >= 0) dataListeners.splice(i);\n      return group;\n    }\n\n    return reduceCount();\n  }\n\n  // Returns the number of records in this crossfilter, irrespective of any filters.\n  function size() {\n    return n;\n  }\n\n  // Returns the raw row data contained in this crossfilter\n  function all(){\n    return data;\n  }\n\n  // Returns row data with all dimension filters applied\n  function allFiltered() {\n    var array = [],\n        i = 0;\n\n      for (i = 0; i < n; i++) {\n        if (filters.zero(i)) {\n          array.push(data[i]);\n        }\n      }\n\n      return array;\n  }\n\n  function onChange(cb){\n    if(typeof cb !== 'function'){\n      /* eslint no-console: 0 */\n      console.warn('onChange callback parameter must be a function!');\n      return;\n    }\n    callbacks.push(cb);\n    return function(){\n      callbacks.splice(callbacks.indexOf(cb), 1);\n    };\n  }\n\n  function triggerOnChange(eventName){\n    for (var i = 0; i < callbacks.length; i++) {\n      callbacks[i](eventName);\n    }\n  }\n\n  return arguments.length\n      ? add(arguments[0])\n      : crossfilter;\n}\n\n// Returns an array of size n, big enough to store ids up to m.\nfunction crossfilter_index(n, m) {\n  return (m < 0x101\n      ? xfilterArray.array8 : m < 0x10001\n      ? xfilterArray.array16\n      : xfilterArray.array32)(n);\n}\n\n// Constructs a new array of size n, with sequential values from 0 to n - 1.\nfunction crossfilter_range(n) {\n  var range = crossfilter_index(n, n);\n  for (var i = -1; ++i < n;) range[i] = i;\n  return range;\n}\n\nfunction crossfilter_capacity(w) {\n  return w === 8\n      ? 0x100 : w === 16\n      ? 0x10000\n      : 0x100000000;\n}\n\n\n/***/ }),\n\n/***/ 278:\n/***/ (function(module, exports) {\n\nif (typeof Uint8Array !== \"undefined\") {\n  var crossfilter_array8 = function(n) { return new Uint8Array(n); };\n  var crossfilter_array16 = function(n) { return new Uint16Array(n); };\n  var crossfilter_array32 = function(n) { return new Uint32Array(n); };\n\n  var crossfilter_arrayLengthen = function(array, length) {\n    if (array.length >= length) return array;\n    var copy = new array.constructor(length);\n    copy.set(array);\n    return copy;\n  };\n\n  var crossfilter_arrayWiden = function(array, width) {\n    var copy;\n    switch (width) {\n      case 16: copy = crossfilter_array16(array.length); break;\n      case 32: copy = crossfilter_array32(array.length); break;\n      default: throw new Error(\"invalid array width!\");\n    }\n    copy.set(array);\n    return copy;\n  };\n}\n\nfunction crossfilter_arrayUntyped(n) {\n  var array = new Array(n), i = -1;\n  while (++i < n) array[i] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayLengthenUntyped(array, length) {\n  var n = array.length;\n  while (n < length) array[n++] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayWidenUntyped(array, width) {\n  if (width > 32) throw new Error(\"invalid array width!\");\n  return array;\n}\n\n// An arbitrarily-wide array of bitmasks\nfunction crossfilter_bitarray(n) {\n  this.length = n;\n  this.subarrays = 1;\n  this.width = 8;\n  this.masks = {\n    0: 0\n  }\n\n  this[0] = crossfilter_array8(n);\n}\n\ncrossfilter_bitarray.prototype.lengthen = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    this[i] = crossfilter_arrayLengthen(this[i], n);\n  }\n  this.length = n;\n};\n\n// Reserve a new bit index in the array, returns {offset, one}\ncrossfilter_bitarray.prototype.add = function() {\n  var m, w, one, i, len;\n\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    m = this.masks[i];\n    w = this.width - (32 * i);\n    one = ~m & -~m;\n\n    if (w >= 32 && !one) {\n      continue;\n    }\n\n    if (w < 32 && (one & (1 << w))) {\n      // widen this subarray\n      this[i] = crossfilter_arrayWiden(this[i], w <<= 1);\n      this.width = 32 * i + w;\n    }\n\n    this.masks[i] |= one;\n\n    return {\n      offset: i,\n      one: one\n    };\n  }\n\n  // add a new subarray\n  this[this.subarrays] = crossfilter_array8(this.length);\n  this.masks[this.subarrays] = 1;\n  this.width += 8;\n  return {\n    offset: this.subarrays++,\n    one: 1\n  };\n};\n\n// Copy record from index src to index dest\ncrossfilter_bitarray.prototype.copy = function(dest, src) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    this[i][dest] = this[i][src];\n  }\n};\n\n// Truncate the array to the given length\ncrossfilter_bitarray.prototype.truncate = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    for (var j = this.length - 1; j >= n; j--) {\n      this[i][j] = 0;\n    }\n    this[i].length = n;\n  }\n  this.length = n;\n};\n\n// Checks that all bits for the given index are 0\ncrossfilter_bitarray.prototype.zero = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that all bits for the given index are 0 except for possibly one\ncrossfilter_bitarray.prototype.zeroExcept = function(n, offset, zero) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (i === offset ? this[i][n] & zero : this[i][n]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that all bits for the given indez are 0 except for the specified mask.\n// The mask should be an array of the same size as the filter subarrays width.\ncrossfilter_bitarray.prototype.zeroExceptMask = function(n, mask) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n] & mask[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Checks that only the specified bit is set for the given index\ncrossfilter_bitarray.prototype.only = function(n, offset, one) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n] != (i === offset ? one : 0)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that only the specified bit is set for the given index except for possibly one other\ncrossfilter_bitarray.prototype.onlyExcept = function(n, offset, zero, onlyOffset, onlyOne) {\n  var mask;\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    mask = this[i][n];\n    if (i === offset)\n      mask &= zero;\n    if (mask != (i === onlyOffset ? onlyOne : 0)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  array8: crossfilter_arrayUntyped,\n  array16: crossfilter_arrayUntyped,\n  array32: crossfilter_arrayUntyped,\n  arrayLengthen: crossfilter_arrayLengthenUntyped,\n  arrayWiden: crossfilter_arrayWidenUntyped,\n  bitarray: crossfilter_bitarray\n};\n\n\n/***/ }),\n\n/***/ 279:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction crossfilter_filterExact(bisect, value) {\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n  };\n}\n\nfunction crossfilter_filterRange(bisect, range) {\n  var min = range[0],\n      max = range[1];\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n  };\n}\n\nfunction crossfilter_filterAll(values) {\n  return [0, values.length];\n}\n\nmodule.exports = {\n  filterExact: crossfilter_filterExact,\n  filterRange: crossfilter_filterRange,\n  filterAll: crossfilter_filterAll\n};\n\n\n/***/ }),\n\n/***/ 280:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction crossfilter_null() {\n  return null;\n}\n\nmodule.exports = crossfilter_null;\n\n\n/***/ }),\n\n/***/ 281:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction crossfilter_zero() {\n  return 0;\n}\n\nmodule.exports = crossfilter_zero;\n\n\n/***/ }),\n\n/***/ 282:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar crossfilter_identity = __webpack_require__(273);\nvar xFilterHeap = __webpack_require__(274);\n\nfunction heapselect_by(f) {\n  var heap = xFilterHeap.by(f);\n\n  // Returns a new array containing the top k elements in the array a[lo:hi].\n  // The returned array is not sorted, but maintains the heap property. If k is\n  // greater than hi - lo, then fewer than k elements will be returned. The\n  // order of elements in a is unchanged by this operation.\n  function heapselect(a, lo, hi, k) {\n    var queue = new Array(k = Math.min(hi - lo, k)),\n        min,\n        i,\n        d;\n\n    for (i = 0; i < k; ++i) queue[i] = a[lo++];\n    heap(queue, 0, k);\n\n    if (lo < hi) {\n      min = f(queue[0]);\n      do {\n        if (f(d = a[lo]) > min) {\n          queue[0] = d;\n          min = f(heap(queue, 0, k)[0]);\n        }\n      } while (++lo < hi);\n    }\n\n    return queue;\n  }\n\n  return heapselect;\n}\n\nmodule.exports = heapselect_by(crossfilter_identity);\nmodule.exports.by = heapselect_by; // assign the raw function to the export as well\n\n\n/***/ }),\n\n/***/ 283:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar crossfilter_identity = __webpack_require__(273);\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\n\nmodule.exports = bisect_by(crossfilter_identity);\nmodule.exports.by = bisect_by; // assign the raw function to the export as well\n\n\n/***/ }),\n\n/***/ 284:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction permute(array, index, deep) {\n  for (var i = 0, n = index.length, copy = deep ? JSON.parse(JSON.stringify(array)) : new Array(n); i < n; ++i) {\n    copy[i] = array[index[i]];\n  }\n  return copy;\n}\n\nmodule.exports = permute;\n\n\n/***/ }),\n\n/***/ 285:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar crossfilter_identity = __webpack_require__(273);\nvar xFilterInsertionsort = __webpack_require__(275);\n\n// Algorithm designed by Vladimir Yaroslavskiy.\n// Implementation based on the Dart project; see NOTICE and AUTHORS for details.\n\nfunction quicksort_by(f) {\n  var insertionsort = xFilterInsertionsort.by(f);\n\n  function sort(a, lo, hi) {\n    return (hi - lo < quicksort_sizeThreshold\n        ? insertionsort\n        : quicksort)(a, lo, hi);\n  }\n\n  function quicksort(a, lo, hi) {\n    // Compute the two pivots by looking at 5 elements.\n    var sixth = (hi - lo) / 6 | 0,\n        i1 = lo + sixth,\n        i5 = hi - 1 - sixth,\n        i3 = lo + hi - 1 >> 1,  // The midpoint.\n        i2 = i3 - sixth,\n        i4 = i3 + sixth;\n\n    var e1 = a[i1], x1 = f(e1),\n        e2 = a[i2], x2 = f(e2),\n        e3 = a[i3], x3 = f(e3),\n        e4 = a[i4], x4 = f(e4),\n        e5 = a[i5], x5 = f(e5);\n\n    var t;\n\n    // Sort the selected 5 elements using a sorting network.\n    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n    var pivot1 = e2, pivotValue1 = x2,\n        pivot2 = e4, pivotValue2 = x4;\n\n    // e2 and e4 have been saved in the pivot variables. They will be written\n    // back, once the partitioning is finished.\n    a[i1] = e1;\n    a[i2] = a[lo];\n    a[i3] = e3;\n    a[i4] = a[hi - 1];\n    a[i5] = e5;\n\n    var less = lo + 1,   // First element in the middle partition.\n        great = hi - 2;  // Last element in the middle partition.\n\n    // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n    // Object.prototype.valueOf; == and === do not, so in order to be consistent\n    // with natural order (such as for Date objects), we must do two compares.\n    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n    if (pivotsEqual) {\n\n      // Degenerated case where the partitioning becomes a dutch national flag\n      // problem.\n      //\n      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n      //  ^             ^          ^             ^            ^\n      // left         less         k           great         right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1) for x in ]left, less[ : x < pivot.\n      //   2) for x in [less, k[ : x == pivot.\n      //   3) for x in ]great, right[ : x > pivot.\n      for (var k = less; k <= great; ++k) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else if (xk > pivotValue1) {\n\n          // Find the first element <= pivot in the range [k - 1, great] and\n          // put [:ek:] there. We know that such an element must exist:\n          // When k == less, then el3 (which is equal to pivot) lies in the\n          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n          // Note that in the latter case invariant 2 will be violated for a\n          // short amount of time. The invariant will be restored when the\n          // pivots are put into their final positions.\n          /* eslint no-constant-condition: 0 */\n          while (true) {\n            var greatValue = f(a[great]);\n            if (greatValue > pivotValue1) {\n              great--;\n              // This is the only location in the while-loop where a new\n              // iteration is started.\n              continue;\n            } else if (greatValue < pivotValue1) {\n              // Triple exchange.\n              a[k] = a[less];\n              a[less++] = a[great];\n              a[great--] = ek;\n              break;\n            } else {\n              a[k] = a[great];\n              a[great--] = ek;\n              // Note: if great < k then we will exit the outer loop and fix\n              // invariant 2 (which we just violated).\n              break;\n            }\n          }\n        }\n      }\n    } else {\n\n      // We partition the list into three parts:\n      //  1. < pivot1\n      //  2. >= pivot1 && <= pivot2\n      //  3. > pivot2\n      //\n      // During the loop we have:\n      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n      //  ^            ^                        ^              ^             ^\n      // left         less                     k              great        right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1. for x in ]left, less[ : x < pivot1\n      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n      //   3. for x in ]great, right[ : x > pivot2\n      (function () { // isolate scope\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else {\n          if (xk > pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] <= pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] >= pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n      })(); // isolate scope\n    }\n\n    // Move pivots into their final positions.\n    // We shrunk the list from both sides (a[left] and a[right] have\n    // meaningless values in them) and now we move elements from the first\n    // and third partition into these locations so that we can store the\n    // pivots.\n    a[lo] = a[less - 1];\n    a[less - 1] = pivot1;\n    a[hi - 1] = a[great + 1];\n    a[great + 1] = pivot2;\n\n    // The list is now partitioned into three partitions:\n    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n    //  ^            ^                        ^             ^\n    // left         less                     great        right\n\n    // Recursive descent. (Don't include the pivot values.)\n    sort(a, lo, less - 1);\n    sort(a, great + 2, hi);\n\n    if (pivotsEqual) {\n      // All elements in the second partition are equal to the pivot. No\n      // need to sort them.\n      return a;\n    }\n\n    // In theory it should be enough to call _doSort recursively on the second\n    // partition.\n    // The Android source however removes the pivot elements from the recursive\n    // call if the second partition is too large (more than 2/3 of the list).\n    if (less < i1 && great > i5) {\n\n      (function () { // isolate scope\n      var lessValue, greatValue;\n      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\n      while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\n\n      // Copy paste of the previous 3-way partitioning with adaptions.\n      //\n      // We partition the list into three parts:\n      //  1. == pivot1\n      //  2. > pivot1 && < pivot2\n      //  3. == pivot2\n      //\n      // During the loop we have:\n      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n      //              ^                      ^              ^\n      //            less                     k              great\n      //\n      // Invariants:\n      //   1. for x in [ *, less[ : x == pivot1\n      //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n      //   3. for x in ]great, * ] : x == pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk <= pivotValue1 && xk >= pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          less++;\n        } else {\n          if (xk <= pivotValue2 && xk >= pivotValue2) {\n            /* eslint no-constant-condition: 0 */\n            while (true) {\n              greatValue = f(a[great]);\n              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] < pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] == pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n      })(); // isolate scope\n\n    }\n\n    // The second partition has now been cleared of pivot elements and looks\n    // as follows:\n    // [  *  |  > pivot1 && < pivot2  | * ]\n    //        ^                      ^\n    //       less                  great\n    // Sort the second partition using recursive descent.\n\n    // The second partition looks as follows:\n    // [  *  |  >= pivot1 && <= pivot2  | * ]\n    //        ^                        ^\n    //       less                    great\n    // Simply sort it by recursive descent.\n\n    return sort(a, less, great + 1);\n  }\n\n  return sort;\n}\n\nvar quicksort_sizeThreshold = 32;\n\nmodule.exports = quicksort_by(crossfilter_identity);\nmodule.exports.by = quicksort_by;\n\n\n/***/ }),\n\n/***/ 286:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction crossfilter_reduceIncrement(p) {\n  return p + 1;\n}\n\nfunction crossfilter_reduceDecrement(p) {\n  return p - 1;\n}\n\nfunction crossfilter_reduceAdd(f) {\n  return function(p, v) {\n    return p + +f(v);\n  };\n}\n\nfunction crossfilter_reduceSubtract(f) {\n  return function(p, v) {\n    return p - f(v);\n  };\n}\n\nmodule.exports = {\n  reduceIncrement: crossfilter_reduceIncrement,\n  reduceDecrement: crossfilter_reduceDecrement,\n  reduceAdd: crossfilter_reduceAdd,\n  reduceSubtract: crossfilter_reduceSubtract\n};\n\n\n/***/ }),\n\n/***/ 287:\n/***/ (function(module, exports) {\n\nmodule.exports = {\"_args\":[[\"crossfilter2@1.4.1\",\"D:\\\\projects\\\\personal-blog\"]],\"_from\":\"crossfilter2@1.4.1\",\"_id\":\"crossfilter2@1.4.1\",\"_inBundle\":false,\"_integrity\":\"sha512-0ykBoUMRMMUUq5aBZk0Dn+pZgD+3a3KuUKRRCi5a/jxlnkwpu9B5FZM4BEaK5j9gUXF8BTDJXr/zIbM4Gi7Wig==\",\"_location\":\"/crossfilter2\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"version\",\"registry\":true,\"raw\":\"crossfilter2@1.4.1\",\"name\":\"crossfilter2\",\"escapedName\":\"crossfilter2\",\"rawSpec\":\"1.4.1\",\"saveSpec\":null,\"fetchSpec\":\"1.4.1\"},\"_requiredBy\":[\"/\"],\"_resolved\":\"https://registry.npmjs.org/crossfilter2/-/crossfilter2-1.4.1.tgz\",\"_spec\":\"1.4.1\",\"_where\":\"D:\\\\projects\\\\personal-blog\",\"author\":{\"name\":\"Mike Bostock\",\"url\":\"http://bost.ocks.org/mike\"},\"bugs\":{\"url\":\"https://github.com/crossfilter/crossfilter/issues\"},\"contributors\":[{\"name\":\"Jason Davies\",\"url\":\"http://www.jasondavies.com/\"}],\"dependencies\":{\"lodash.result\":\"^4.4.0\"},\"description\":\"Fast multidimensional filtering for coordinated views.\",\"devDependencies\":{\"browserify\":\"^13.0.0\",\"d3\":\"3.5\",\"eslint\":\"2.10.2\",\"package-json-versionify\":\"1.0.2\",\"semver\":\"^5.3.0\",\"uglify-js\":\"2.4.0\",\"vows\":\"0.7.0\"},\"eslintConfig\":{\"env\":{\"browser\":true,\"node\":true},\"globals\":{\"Uint8Array\":true,\"Uint16Array\":true,\"Uint32Array\":true},\"extends\":\"eslint:recommended\"},\"files\":[\"src\",\"index.js\",\"crossfilter.js\",\"crossfilter.min.js\"],\"homepage\":\"http://crossfilter.github.com/crossfilter/\",\"keywords\":[\"analytics\",\"visualization\",\"crossfilter\"],\"license\":\"Apache-2.0\",\"main\":\"./index.js\",\"maintainers\":[{\"name\":\"Gordon Woodhull\",\"url\":\"https://github.com/gordonwoodhull\"},{\"name\":\"Tanner Linsley\",\"url\":\"https://github.com/tannerlinsley\"},{\"name\":\"Ethan Jewett\",\"url\":\"https://github.com/esjewett\"}],\"name\":\"crossfilter2\",\"repository\":{\"type\":\"git\",\"url\":\"git+ssh://git@github.com/crossfilter/crossfilter.git\"},\"scripts\":{\"benchmark\":\"node test/benchmark.js\",\"build\":\"browserify index.js -t package-json-versionify --standalone crossfilter -o crossfilter.js && uglifyjs --compress --mangle --screw-ie8 crossfilter.js -o crossfilter.min.js\",\"clean\":\"rm -f crossfilter.js crossfilter.min.js\",\"test\":\"vows --verbose && eslint src/\"},\"version\":\"1.4.1\"}\n\n/***/ }),\n\n/***/ 288:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * This method is like `_.get` except that if the resolved value is a\n * function it's invoked with the `this` binding of its parent object and\n * its result is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to resolve.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n *\n * _.result(object, 'a[0].b.c1');\n * // => 3\n *\n * _.result(object, 'a[0].b.c2');\n * // => 4\n *\n * _.result(object, 'a[0].b.c3', 'default');\n * // => 'default'\n *\n * _.result(object, 'a[0].b.c3', _.constant('default'));\n * // => 'default'\n */\nfunction result(object, path, defaultValue) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = -1,\n      length = path.length;\n\n  // Ensure the loop is entered when path is empty.\n  if (!length) {\n    object = undefined;\n    length = 1;\n  }\n  while (++index < length) {\n    var value = object == null ? undefined : object[toKey(path[index])];\n    if (value === undefined) {\n      index = length;\n      value = defaultValue;\n    }\n    object = isFunction(value) ? value.call(object) : value;\n  }\n  return object;\n}\n\nmodule.exports = result;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(107)))\n\n/***/ }),\n\n/***/ 289:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {module.exports = global[\"dc\"] = __webpack_require__(290);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(107)))\n\n/***/ }),\n\n/***/ 290:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n *  dc 2.1.8\n *  http://dc-js.github.io/dc.js/\n *  Copyright 2012-2016 Nick Zhu & the dc.js Developers\n *  https://github.com/dc-js/dc.js/blob/master/AUTHORS\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n(function() { function _dc(d3, crossfilter) {\n'use strict';\n\n/**\n * The entire dc.js library is scoped under the **dc** name space. It does not introduce\n * anything else into the global name space.\n *\n * Most `dc` functions are designed to allow function chaining, meaning they return the current chart\n * instance whenever it is appropriate.  The getter forms of functions do not participate in function\n * chaining because they return values that are not the chart, although some,\n * such as {@link dc.baseMixin#svg .svg} and {@link dc.coordinateGridMixin#xAxis .xAxis},\n * return values that are themselves chainable d3 objects.\n * @namespace dc\n * @version 2.1.8\n * @example\n * // Example chaining\n * chart.width(300)\n *      .height(300)\n *      .filter('sunday');\n */\n/*jshint -W079*/\nvar dc = {\n    version: '2.1.8',\n    constants: {\n        CHART_CLASS: 'dc-chart',\n        DEBUG_GROUP_CLASS: 'debug',\n        STACK_CLASS: 'stack',\n        DESELECTED_CLASS: 'deselected',\n        SELECTED_CLASS: 'selected',\n        NODE_INDEX_NAME: '__index__',\n        GROUP_INDEX_NAME: '__group_index__',\n        DEFAULT_CHART_GROUP: '__default_chart_group__',\n        EVENT_DELAY: 40,\n        NEGLIGIBLE_NUMBER: 1e-10\n    },\n    _renderlet: null\n};\n/*jshint +W079*/\n\n/**\n * The dc.chartRegistry object maintains sets of all instantiated dc.js charts under named groups\n * and the default group.\n *\n * A chart group often corresponds to a crossfilter instance. It specifies\n * the set of charts which should be updated when a filter changes on one of the charts or when the\n * global functions {@link dc.filterAll dc.filterAll}, {@link dc.refocusAll dc.refocusAll},\n * {@link dc.renderAll dc.renderAll}, {@link dc.redrawAll dc.redrawAll}, or chart functions\n * {@link dc.baseMixin#renderGroup baseMixin.renderGroup},\n * {@link dc.baseMixin#redrawGroup baseMixin.redrawGroup} are called.\n *\n * @namespace chartRegistry\n * @memberof dc\n * @type {{has, register, deregister, clear, list}}\n */\ndc.chartRegistry = (function () {\n    // chartGroup:string => charts:array\n    var _chartMap = {};\n\n    function initializeChartGroup (group) {\n        if (!group) {\n            group = dc.constants.DEFAULT_CHART_GROUP;\n        }\n\n        if (!_chartMap[group]) {\n            _chartMap[group] = [];\n        }\n\n        return group;\n    }\n\n    return {\n        /**\n         * Determine if a given chart instance resides in any group in the registry.\n         * @method has\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @returns {Boolean}\n         */\n        has: function (chart) {\n            for (var e in _chartMap) {\n                if (_chartMap[e].indexOf(chart) >= 0) {\n                    return true;\n                }\n            }\n            return false;\n        },\n\n        /**\n         * Add given chart instance to the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method register\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        register: function (chart, group) {\n            group = initializeChartGroup(group);\n            _chartMap[group].push(chart);\n        },\n\n        /**\n         * Remove given chart instance from the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method deregister\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        deregister: function (chart, group) {\n            group = initializeChartGroup(group);\n            for (var i = 0; i < _chartMap[group].length; i++) {\n                if (_chartMap[group][i].anchorName() === chart.anchorName()) {\n                    _chartMap[group].splice(i, 1);\n                    break;\n                }\n            }\n        },\n\n        /**\n         * Clear given group if one is provided, otherwise clears all groups.\n         * @method clear\n         * @memberof dc.chartRegistry\n         * @param {String} group Group name\n         */\n        clear: function (group) {\n            if (group) {\n                delete _chartMap[group];\n            } else {\n                _chartMap = {};\n            }\n        },\n\n        /**\n         * Get an array of each chart instance in the given group.\n         * If no group is provided, the charts in the default group are returned.\n         * @method list\n         * @memberof dc.chartRegistry\n         * @param {String} [group] Group name\n         * @returns {Array<Object>}\n         */\n        list: function (group) {\n            group = initializeChartGroup(group);\n            return _chartMap[group];\n        }\n    };\n})();\n\n/**\n * Add given chart instance to the given group, creating the group if necessary.\n * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n * @memberof dc\n * @method registerChart\n * @param {Object} chart dc.js chart instance\n * @param {String} [group] Group name\n */\ndc.registerChart = function (chart, group) {\n    dc.chartRegistry.register(chart, group);\n};\n\n/**\n * Remove given chart instance from the given group, creating the group if necessary.\n * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n * @memberof dc\n * @method deregisterChart\n * @param {Object} chart dc.js chart instance\n * @param {String} [group] Group name\n */\ndc.deregisterChart = function (chart, group) {\n    dc.chartRegistry.deregister(chart, group);\n};\n\n/**\n * Determine if a given chart instance resides in any group in the registry.\n * @memberof dc\n * @method hasChart\n * @param {Object} chart dc.js chart instance\n * @returns {Boolean}\n */\ndc.hasChart = function (chart) {\n    return dc.chartRegistry.has(chart);\n};\n\n/**\n * Clear given group if one is provided, otherwise clears all groups.\n * @memberof dc\n * @method deregisterAllCharts\n * @param {String} group Group name\n */\ndc.deregisterAllCharts = function (group) {\n    dc.chartRegistry.clear(group);\n};\n\n/**\n * Clear all filters on all charts within the given chart group. If the chart group is not given then\n * only charts that belong to the default chart group will be reset.\n * @memberof dc\n * @method filterAll\n * @param {String} [group]\n */\ndc.filterAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].filterAll();\n    }\n};\n\n/**\n * Reset zoom level / focus on all charts that belong to the given chart group. If the chart group is\n * not given then only charts that belong to the default chart group will be reset.\n * @memberof dc\n * @method refocusAll\n * @param {String} [group]\n */\ndc.refocusAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        if (charts[i].focus) {\n            charts[i].focus();\n        }\n    }\n};\n\n/**\n * Re-render all charts belong to the given chart group. If the chart group is not given then only\n * charts that belong to the default chart group will be re-rendered.\n * @memberof dc\n * @method renderAll\n * @param {String} [group]\n */\ndc.renderAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].render();\n    }\n\n    if (dc._renderlet !== null) {\n        dc._renderlet(group);\n    }\n};\n\n/**\n * Redraw all charts belong to the given chart group. If the chart group is not given then only charts\n * that belong to the default chart group will be re-drawn. Redraw is different from re-render since\n * when redrawing dc tries to update the graphic incrementally, using transitions, instead of starting\n * from scratch.\n * @memberof dc\n * @method redrawAll\n * @param {String} [group]\n */\ndc.redrawAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].redraw();\n    }\n\n    if (dc._renderlet !== null) {\n        dc._renderlet(group);\n    }\n};\n\n/**\n * If this boolean is set truthy, all transitions will be disabled, and changes to the charts will happen\n * immediately.\n * @memberof dc\n * @member disableTransitions\n * @type {Boolean}\n * @default false\n */\ndc.disableTransitions = false;\n\n/**\n * Start a transition on a selection if transitions are globally enabled\n * ({@link dc.disableTransitions} is false) and the duration is greater than zero; otherwise return\n * the selection. Since most operations are the same on a d3 selection and a d3 transition, this\n * allows a common code path for both cases.\n * @memberof dc\n * @method transition\n * @param {d3.selection} selection - the selection to be transitioned\n * @param {Number|Function} [duration=250] - the duration of the transition in milliseconds, a\n * function returning the duration, or 0 for no transition\n * @param {Number|Function} [delay] - the delay of the transition in milliseconds, or a function\n * returning the delay, or 0 for no delay\n * @param {String} [name] - the name of the transition (if concurrent transitions on the same\n * elements are needed)\n * @returns {d3.transition|d3.selection}\n */\ndc.transition = function (selection, duration, delay, name) {\n    if (dc.disableTransitions || duration <= 0) {\n        return selection;\n    }\n\n    var s = selection.transition(name);\n\n    if (duration >= 0 || duration !== undefined) {\n        s = s.duration(duration);\n    }\n    if (delay >= 0 || delay !== undefined) {\n        s = s.delay(delay);\n    }\n\n    return s;\n};\n\n/* somewhat silly, but to avoid duplicating logic */\ndc.optionalTransition = function (enable, duration, delay, name) {\n    if (enable) {\n        return function (selection) {\n            return dc.transition(selection, duration, delay, name);\n        };\n    } else {\n        return function (selection) {\n            return selection;\n        };\n    }\n};\n\n// See http://stackoverflow.com/a/20773846\ndc.afterTransition = function (transition, callback) {\n    if (transition.empty() || !transition.duration) {\n        callback.call(transition);\n    } else {\n        var n = 0;\n        transition\n            .each(function () { ++n; })\n            .each('end', function () {\n                if (!--n) {\n                    callback.call(transition);\n                }\n            });\n    }\n};\n\n/**\n * @namespace units\n * @memberof dc\n * @type {{}}\n */\ndc.units = {};\n\n/**\n * The default value for {@link dc.coordinateGridMixin#xUnits .xUnits} for the\n * {@link dc.coordinateGridMixin Coordinate Grid Chart} and should\n * be used when the x values are a sequence of integers.\n * It is a function that counts the number of integers in the range supplied in its start and end parameters.\n * @method integers\n * @memberof dc.units\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @example\n * chart.xUnits(dc.units.integers) // already the default\n * @param {Number} start\n * @param {Number} end\n * @returns {Number}\n */\ndc.units.integers = function (start, end) {\n    return Math.abs(end - start);\n};\n\n/**\n * This argument can be passed to the {@link dc.coordinateGridMixin#xUnits .xUnits} function of the to\n * specify ordinal units for the x axis. Usually this parameter is used in combination with passing\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal} to\n * {@link dc.coordinateGridMixin#x .x}.\n * It just returns the domain passed to it, which for ordinal charts is an array of all values.\n * @method ordinal\n * @memberof dc.units\n * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal}\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @see {@link dc.coordinateGridMixin#x coordinateGridMixin.x}\n * @example\n * chart.xUnits(dc.units.ordinal)\n *      .x(d3.scale.ordinal())\n * @param {*} start\n * @param {*} end\n * @param {Array<String>} domain\n * @returns {Array<String>}\n */\ndc.units.ordinal = function (start, end, domain) {\n    return domain;\n};\n\n/**\n * @namespace fp\n * @memberof dc.units\n * @type {{}}\n */\ndc.units.fp = {};\n/**\n * This function generates an argument for the {@link dc.coordinateGridMixin Coordinate Grid Chart}\n * {@link dc.coordinateGridMixin#xUnits .xUnits} function specifying that the x values are floating-point\n * numbers with the given precision.\n * The returned function determines how many values at the given precision will fit into the range\n * supplied in its start and end parameters.\n * @method precision\n * @memberof dc.units.fp\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @example\n * // specify values (and ticks) every 0.1 units\n * chart.xUnits(dc.units.fp.precision(0.1)\n * // there are 500 units between 0.5 and 1 if the precision is 0.001\n * var thousandths = dc.units.fp.precision(0.001);\n * thousandths(0.5, 1.0) // returns 500\n * @param {Number} precision\n * @returns {Function} start-end unit function\n */\ndc.units.fp.precision = function (precision) {\n    var _f = function (s, e) {\n        var d = Math.abs((e - s) / _f.resolution);\n        if (dc.utils.isNegligible(d - Math.floor(d))) {\n            return Math.floor(d);\n        } else {\n            return Math.ceil(d);\n        }\n    };\n    _f.resolution = precision;\n    return _f;\n};\n\ndc.round = {};\ndc.round.floor = function (n) {\n    return Math.floor(n);\n};\ndc.round.ceil = function (n) {\n    return Math.ceil(n);\n};\ndc.round.round = function (n) {\n    return Math.round(n);\n};\n\ndc.override = function (obj, functionName, newFunction) {\n    var existingFunction = obj[functionName];\n    obj['_' + functionName] = existingFunction;\n    obj[functionName] = newFunction;\n};\n\ndc.renderlet = function (_) {\n    if (!arguments.length) {\n        return dc._renderlet;\n    }\n    dc._renderlet = _;\n    return dc;\n};\n\ndc.instanceOfChart = function (o) {\n    return o instanceof Object && o.__dcFlag__ && true;\n};\n\ndc.errors = {};\n\ndc.errors.Exception = function (msg) {\n    var _msg = msg || 'Unexpected internal error';\n\n    this.message = _msg;\n\n    this.toString = function () {\n        return _msg;\n    };\n    this.stack = (new Error()).stack;\n};\ndc.errors.Exception.prototype = Object.create(Error.prototype);\ndc.errors.Exception.prototype.constructor = dc.errors.Exception;\n\ndc.errors.InvalidStateException = function () {\n    dc.errors.Exception.apply(this, arguments);\n};\n\ndc.errors.InvalidStateException.prototype = Object.create(dc.errors.Exception.prototype);\ndc.errors.InvalidStateException.prototype.constructor = dc.errors.InvalidStateException;\n\ndc.errors.BadArgumentException = function () {\n    dc.errors.Exception.apply(this, arguments);\n};\n\ndc.errors.BadArgumentException.prototype = Object.create(dc.errors.Exception.prototype);\ndc.errors.BadArgumentException.prototype.constructor = dc.errors.BadArgumentException;\n\n/**\n * The default date format for dc.js\n * @name dateFormat\n * @memberof dc\n * @type {Function}\n * @default d3.time.format('%m/%d/%Y')\n */\ndc.dateFormat = d3.time.format('%m/%d/%Y');\n\n/**\n * @namespace printers\n * @memberof dc\n * @type {{}}\n */\ndc.printers = {};\n\n/**\n * Converts a list of filters into a readable string.\n * @method filters\n * @memberof dc.printers\n * @param {Array<dc.filters>} filters\n * @returns {String}\n */\ndc.printers.filters = function (filters) {\n    var s = '';\n\n    for (var i = 0; i < filters.length; ++i) {\n        if (i > 0) {\n            s += ', ';\n        }\n        s += dc.printers.filter(filters[i]);\n    }\n\n    return s;\n};\n\n/**\n * Converts a filter into a readable string.\n * @method filter\n * @memberof dc.printers\n * @param {dc.filters|any|Array<any>} filter\n * @returns {String}\n */\ndc.printers.filter = function (filter) {\n    var s = '';\n\n    if (typeof filter !== 'undefined' && filter !== null) {\n        if (filter instanceof Array) {\n            if (filter.length >= 2) {\n                s = '[' + dc.utils.printSingleValue(filter[0]) + ' -> ' + dc.utils.printSingleValue(filter[1]) + ']';\n            } else if (filter.length >= 1) {\n                s = dc.utils.printSingleValue(filter[0]);\n            }\n        } else {\n            s = dc.utils.printSingleValue(filter);\n        }\n    }\n\n    return s;\n};\n\n/**\n * Returns a function that given a string property name, can be used to pluck the property off an object.  A function\n * can be passed as the second argument to also alter the data being returned.\n *\n * This can be a useful shorthand method to create accessor functions.\n * @method pluck\n * @memberof dc\n * @example\n * var xPluck = dc.pluck('x');\n * var objA = {x: 1};\n * xPluck(objA) // 1\n * @example\n * var xPosition = dc.pluck('x', function (x, i) {\n *     // `this` is the original datum,\n *     // `x` is the x property of the datum,\n *     // `i` is the position in the array\n *     return this.radius + x;\n * });\n * dc.selectAll('.circle').data(...).x(xPosition);\n * @param {String} n\n * @param {Function} [f]\n * @returns {Function}\n */\ndc.pluck = function (n, f) {\n    if (!f) {\n        return function (d) { return d[n]; };\n    }\n    return function (d, i) { return f.call(d, d[n], i); };\n};\n\n/**\n * @namespace utils\n * @memberof dc\n * @type {{}}\n */\ndc.utils = {};\n\n/**\n * Print a single value filter.\n * @method printSingleValue\n * @memberof dc.utils\n * @param {any} filter\n * @returns {String}\n */\ndc.utils.printSingleValue = function (filter) {\n    var s = '' + filter;\n\n    if (filter instanceof Date) {\n        s = dc.dateFormat(filter);\n    } else if (typeof(filter) === 'string') {\n        s = filter;\n    } else if (dc.utils.isFloat(filter)) {\n        s = dc.utils.printSingleValue.fformat(filter);\n    } else if (dc.utils.isInteger(filter)) {\n        s = Math.round(filter);\n    }\n\n    return s;\n};\ndc.utils.printSingleValue.fformat = d3.format('.2f');\n\n/**\n * Arbitrary add one value to another.\n * @method add\n * @memberof dc.utils\n * @todo\n * These assume than any string r is a percentage (whether or not it includes %).\n * They also generate strange results if l is a string.\n * @param {String|Date|Number} l the value to modify\n * @param {Number} r the amount by which to modify the value\n * @param {String} [t] if `l` is a `Date`, the\n * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n * the `d3.time` namespace\n * @returns {String|Date|Number}\n */\ndc.utils.add = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() + r);\n        }\n        t = t || 'day';\n        return d3.time[t].offset(l, r);\n    } else if (typeof r === 'string') {\n        var percentage = (+r / 100);\n        return l > 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l + r;\n    }\n};\n\n/**\n * Arbitrary subtract one value from another.\n * @method subtract\n * @memberof dc.utils\n * @todo\n * These assume than any string r is a percentage (whether or not it includes %).\n * They also generate strange results if l is a string.\n * @param {String|Date|Number} l the value to modify\n * @param {Number} r the amount by which to modify the value\n * @param {String} [t] if `l` is a `Date`, the\n * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n * the `d3.time` namespace\n * @returns {String|Date|Number}\n */\ndc.utils.subtract = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() - r);\n        }\n        t = t || 'day';\n        return d3.time[t].offset(l, -r);\n    } else if (typeof r === 'string') {\n        var percentage = (+r / 100);\n        return l < 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l - r;\n    }\n};\n\n/**\n * Is the value a number?\n * @method isNumber\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isNumber = function (n) {\n    return n === +n;\n};\n\n/**\n * Is the value a float?\n * @method isFloat\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isFloat = function (n) {\n    return n === +n && n !== (n | 0);\n};\n\n/**\n * Is the value an integer?\n * @method isInteger\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isInteger = function (n) {\n    return n === +n && n === (n | 0);\n};\n\n/**\n * Is the value very close to zero?\n * @method isNegligible\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isNegligible = function (n) {\n    return !dc.utils.isNumber(n) || (n < dc.constants.NEGLIGIBLE_NUMBER && n > -dc.constants.NEGLIGIBLE_NUMBER);\n};\n\n/**\n * Ensure the value is no greater or less than the min/max values.  If it is return the boundary value.\n * @method clamp\n * @memberof dc.utils\n * @param {any} val\n * @param {any} min\n * @param {any} max\n * @returns {any}\n */\ndc.utils.clamp = function (val, min, max) {\n    return val < min ? min : (val > max ? max : val);\n};\n\n/**\n * Using a simple static counter, provide a unique integer id.\n * @method uniqueId\n * @memberof dc.utils\n * @returns {Number}\n */\nvar _idCounter = 0;\ndc.utils.uniqueId = function () {\n    return ++_idCounter;\n};\n\n/**\n * Convert a name to an ID.\n * @method nameToId\n * @memberof dc.utils\n * @param {String} name\n * @returns {String}\n */\ndc.utils.nameToId = function (name) {\n    return name.toLowerCase().replace(/[\\s]/g, '_').replace(/[\\.']/g, '');\n};\n\n/**\n * Append or select an item on a parent element.\n * @method appendOrSelect\n * @memberof dc.utils\n * @param {d3.selection} parent\n * @param {String} selector\n * @param {String} tag\n * @returns {d3.selection}\n */\ndc.utils.appendOrSelect = function (parent, selector, tag) {\n    tag = tag || selector;\n    var element = parent.select(selector);\n    if (element.empty()) {\n        element = parent.append(tag);\n    }\n    return element;\n};\n\n/**\n * Return the number if the value is a number; else 0.\n * @method safeNumber\n * @memberof dc.utils\n * @param {Number|any} n\n * @returns {Number}\n */\ndc.utils.safeNumber = function (n) { return dc.utils.isNumber(+n) ? +n : 0;};\n\ndc.logger = {};\n\ndc.logger.enableDebugLog = false;\n\ndc.logger.warn = function (msg) {\n    if (console) {\n        if (console.warn) {\n            console.warn(msg);\n        } else if (console.log) {\n            console.log(msg);\n        }\n    }\n\n    return dc.logger;\n};\n\ndc.logger.debug = function (msg) {\n    if (dc.logger.enableDebugLog && console) {\n        if (console.debug) {\n            console.debug(msg);\n        } else if (console.log) {\n            console.log(msg);\n        }\n    }\n\n    return dc.logger;\n};\n\ndc.logger.deprecate = function (fn, msg) {\n    // Allow logging of deprecation\n    var warned = false;\n    function deprecated () {\n        if (!warned) {\n            dc.logger.warn(msg);\n            warned = true;\n        }\n        return fn.apply(this, arguments);\n    }\n    return deprecated;\n};\n\ndc.events = {\n    current: null\n};\n\n/**\n * This function triggers a throttled event function with a specified delay (in milli-seconds).  Events\n * that are triggered repetitively due to user interaction such brush dragging might flood the library\n * and invoke more renders than can be executed in time. Using this function to wrap your event\n * function allows the library to smooth out the rendering by throttling events and only responding to\n * the most recent event.\n * @name events.trigger\n * @memberof dc\n * @example\n * chart.on('renderlet', function(chart) {\n *     // smooth the rendering through event throttling\n *     dc.events.trigger(function(){\n *         // focus some other chart to the range selected by user on this chart\n *         someOtherChart.focus(chart.filter());\n *     });\n * })\n * @param {Function} closure\n * @param {Number} [delay]\n */\ndc.events.trigger = function (closure, delay) {\n    if (!delay) {\n        closure();\n        return;\n    }\n\n    dc.events.current = closure;\n\n    setTimeout(function () {\n        if (closure === dc.events.current) {\n            closure();\n        }\n    }, delay);\n};\n\n/**\n * The dc.js filters are functions which are passed into crossfilter to chose which records will be\n * accumulated to produce values for the charts.  In the crossfilter model, any filters applied on one\n * dimension will affect all the other dimensions but not that one.  dc always applies a filter\n * function to the dimension; the function combines multiple filters and if any of them accept a\n * record, it is filtered in.\n *\n * These filter constructors are used as appropriate by the various charts to implement brushing.  We\n * mention below which chart uses which filter.  In some cases, many instances of a filter will be added.\n *\n * Each of the dc.js filters is an object with the following properties:\n * * `isFiltered` - a function that returns true if a value is within the filter\n * * `filterType` - a string identifying the filter, here the name of the constructor\n *\n * Currently these filter objects are also arrays, but this is not a requirement. Custom filters\n * can be used as long as they have the properties above.\n * @namespace filters\n * @memberof dc\n * @type {{}}\n */\ndc.filters = {};\n\n/**\n * RangedFilter is a filter which accepts keys between `low` and `high`.  It is used to implement X\n * axis brushing for the {@link dc.coordinateGridMixin coordinate grid charts}.\n *\n * Its `filterType` is 'RangedFilter'\n * @name RangedFilter\n * @memberof dc.filters\n * @param {Number} low\n * @param {Number} high\n * @returns {Array<Number>}\n * @constructor\n */\ndc.filters.RangedFilter = function (low, high) {\n    var range = new Array(low, high);\n    range.isFiltered = function (value) {\n        return value >= this[0] && value < this[1];\n    };\n    range.filterType = 'RangedFilter';\n\n    return range;\n};\n\n/**\n * TwoDimensionalFilter is a filter which accepts a single two-dimensional value.  It is used by the\n * {@link dc.heatMap heat map chart} to include particular cells as they are clicked.  (Rows and columns are\n * filtered by filtering all the cells in the row or column.)\n *\n * Its `filterType` is 'TwoDimensionalFilter'\n * @name TwoDimensionalFilter\n * @memberof dc.filters\n * @param {Array<Number>} filter\n * @returns {Array<Number>}\n * @constructor\n */\ndc.filters.TwoDimensionalFilter = function (filter) {\n    if (filter === null) { return null; }\n\n    var f = filter;\n    f.isFiltered = function (value) {\n        return value.length && value.length === f.length &&\n               value[0] === f[0] && value[1] === f[1];\n    };\n    f.filterType = 'TwoDimensionalFilter';\n\n    return f;\n};\n\n/**\n * The RangedTwoDimensionalFilter allows filtering all values which fit within a rectangular\n * region. It is used by the {@link dc.scatterPlot scatter plot} to implement rectangular brushing.\n *\n * It takes two two-dimensional points in the form `[[x1,y1],[x2,y2]]`, and normalizes them so that\n * `x1 <= x2` and `y1 <= y2`. It then returns a filter which accepts any points which are in the\n * rectangular range including the lower values but excluding the higher values.\n *\n * If an array of two values are given to the RangedTwoDimensionalFilter, it interprets the values as\n * two x coordinates `x1` and `x2` and returns a filter which accepts any points for which `x1 <= x <\n * x2`.\n *\n * Its `filterType` is 'RangedTwoDimensionalFilter'\n * @name RangedTwoDimensionalFilter\n * @memberof dc.filters\n * @param {Array<Array<Number>>} filter\n * @returns {Array<Array<Number>>}\n * @constructor\n */\ndc.filters.RangedTwoDimensionalFilter = function (filter) {\n    if (filter === null) { return null; }\n\n    var f = filter;\n    var fromBottomLeft;\n\n    if (f[0] instanceof Array) {\n        fromBottomLeft = [\n            [Math.min(filter[0][0], filter[1][0]), Math.min(filter[0][1], filter[1][1])],\n            [Math.max(filter[0][0], filter[1][0]), Math.max(filter[0][1], filter[1][1])]\n        ];\n    } else {\n        fromBottomLeft = [[filter[0], -Infinity], [filter[1], Infinity]];\n    }\n\n    f.isFiltered = function (value) {\n        var x, y;\n\n        if (value instanceof Array) {\n            x = value[0];\n            y = value[1];\n        } else {\n            x = value;\n            y = fromBottomLeft[0][1];\n        }\n\n        return x >= fromBottomLeft[0][0] && x < fromBottomLeft[1][0] &&\n               y >= fromBottomLeft[0][1] && y < fromBottomLeft[1][1];\n    };\n    f.filterType = 'RangedTwoDimensionalFilter';\n\n    return f;\n};\n\n/**\n * `dc.baseMixin` is an abstract functional object representing a basic `dc` chart object\n * for all chart and widget implementations. Methods from the {@link #dc.baseMixin dc.baseMixin} are inherited\n * and available on all chart implementations in the `dc` library.\n * @name baseMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.baseMixin}\n */\ndc.baseMixin = function (_chart) {\n    _chart.__dcFlag__ = dc.utils.uniqueId();\n\n    var _dimension;\n    var _group;\n\n    var _anchor;\n    var _root;\n    var _svg;\n    var _isChild;\n\n    var _minWidth = 200;\n    var _defaultWidthCalc = function (element) {\n        var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n        return (width && width > _minWidth) ? width : _minWidth;\n    };\n    var _widthCalc = _defaultWidthCalc;\n\n    var _minHeight = 200;\n    var _defaultHeightCalc = function (element) {\n        var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n        return (height && height > _minHeight) ? height : _minHeight;\n    };\n    var _heightCalc = _defaultHeightCalc;\n    var _width, _height;\n    var _useViewBoxResizing = false;\n\n    var _keyAccessor = dc.pluck('key');\n    var _valueAccessor = dc.pluck('value');\n    var _label = dc.pluck('key');\n\n    var _ordering = dc.pluck('key');\n    var _orderSort;\n\n    var _renderLabel = false;\n\n    var _title = function (d) {\n        return _chart.keyAccessor()(d) + ': ' + _chart.valueAccessor()(d);\n    };\n    var _renderTitle = true;\n    var _controlsUseVisibility = false;\n\n    var _transitionDuration = 750;\n\n    var _transitionDelay = 0;\n\n    var _filterPrinter = dc.printers.filters;\n\n    var _mandatoryAttributes = ['dimension', 'group'];\n\n    var _chartGroup = dc.constants.DEFAULT_CHART_GROUP;\n\n    var _listeners = d3.dispatch(\n        'preRender',\n        'postRender',\n        'preRedraw',\n        'postRedraw',\n        'filtered',\n        'zoomed',\n        'renderlet',\n        'pretransition');\n\n    var _legend;\n    var _commitHandler;\n\n    var _filters = [];\n    var _filterHandler = function (dimension, filters) {\n        if (filters.length === 0) {\n            dimension.filter(null);\n        } else if (filters.length === 1 && !filters[0].isFiltered) {\n            // single value and not a function-based filter\n            dimension.filterExact(filters[0]);\n        } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n            // single range-based filter\n            dimension.filterRange(filters[0]);\n        } else {\n            dimension.filterFunction(function (d) {\n                for (var i = 0; i < filters.length; i++) {\n                    var filter = filters[i];\n                    if (filter.isFiltered && filter.isFiltered(d)) {\n                        return true;\n                    } else if (filter <= d && filter >= d) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n        }\n        return filters;\n    };\n\n    var _data = function (group) {\n        return group.all();\n    };\n\n    /**\n     * Set or get the height attribute of a chart. The height is applied to the SVGElement generated by\n     * the chart when rendered (or re-rendered). If a value is given, then it will be used to calculate\n     * the new height and the chart returned for method chaining.  The value can either be a numeric, a\n     * function, or falsy. If no value is specified then the value of the current height attribute will\n     * be returned.\n     *\n     * By default, without an explicit height being given, the chart will select the width of its\n     * anchor element. If that isn't possible it defaults to 200 (provided by the\n     * {@link dc.baseMixin#minHeight minHeight} property). Setting the value falsy will return\n     * the chart to the default behavior.\n     * @method height\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#minHeight minHeight}\n     * @example\n     * // Default height\n     * chart.height(function (element) {\n     *     var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n     *     return (height && height > chart.minHeight()) ? height : chart.minHeight();\n     * });\n     *\n     * chart.height(250); // Set the chart's height to 250px;\n     * chart.height(function(anchor) { return doSomethingWith(anchor); }); // set the chart's height with a function\n     * chart.height(null); // reset the height to the default auto calculation\n     * @param {Number|Function} [height]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.height = function (height) {\n        if (!arguments.length) {\n            if (!dc.utils.isNumber(_height)) {\n                // only calculate once\n                _height = _heightCalc(_root.node());\n            }\n            return _height;\n        }\n        _heightCalc = d3.functor(height || _defaultHeightCalc);\n        _height = undefined;\n        return _chart;\n    };\n\n    /**\n     * Set or get the width attribute of a chart.\n     * @method width\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#height height}\n     * @see {@link dc.baseMixin#minWidth minWidth}\n     * @example\n     * // Default width\n     * chart.width(function (element) {\n     *     var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n     *     return (width && width > chart.minWidth()) ? width : chart.minWidth();\n     * });\n     * @param {Number|Function} [width]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.width = function (width) {\n        if (!arguments.length) {\n            if (!dc.utils.isNumber(_width)) {\n                // only calculate once\n                _width = _widthCalc(_root.node());\n            }\n            return _width;\n        }\n        _widthCalc = d3.functor(width || _defaultWidthCalc);\n        _width = undefined;\n        return _chart;\n    };\n\n    /**\n     * Set or get the minimum width attribute of a chart. This only has effect when used with the default\n     * {@link dc.baseMixin#width width} function.\n     * @method minWidth\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#width width}\n     * @param {Number} [minWidth=200]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.minWidth = function (minWidth) {\n        if (!arguments.length) {\n            return _minWidth;\n        }\n        _minWidth = minWidth;\n        return _chart;\n    };\n\n    /**\n     * Set or get the minimum height attribute of a chart. This only has effect when used with the default\n     * {@link dc.baseMixin#height height} function.\n     * @method minHeight\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#height height}\n     * @param {Number} [minHeight=200]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.minHeight = function (minHeight) {\n        if (!arguments.length) {\n            return _minHeight;\n        }\n        _minHeight = minHeight;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off using the SVG\n     * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox `viewBox` attribute}.\n     * When enabled, `viewBox` will be set on the svg root element instead of `width` and `height`.\n     * Requires that the chart aspect ratio be defined using chart.width(w) and chart.height(h).\n     *\n     * This will maintain the aspect ratio while enabling the chart to resize responsively to the\n     * space given to the chart using CSS. For example, the chart can use `width: 100%; height:\n     * 100%` or absolute positioning to resize to its parent div.\n     *\n     * Since the text will be sized as if the chart is drawn according to the width and height, and\n     * will be resized if the chart is any other size, you need to set the chart width and height so\n     * that the text looks good. In practice, 600x400 seems to work pretty well for most charts.\n     *\n     * You can see examples of this resizing strategy in the [Chart Resizing\n     * Examples](http://dc-js.github.io/dc.js/resizing/); just add `?resize=viewbox` to any of the\n     * one-chart examples to enable `useViewBoxResizing`.\n     * @method useViewBoxResizing\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [useViewBoxResizing=false]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.useViewBoxResizing = function (useViewBoxResizing) {\n        if (!arguments.length) {\n            return _useViewBoxResizing;\n        }\n        _useViewBoxResizing = useViewBoxResizing;\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the dimension attribute of a chart. In `dc`, a dimension can be any valid\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter dimension}\n     *\n     * If a value is given, then it will be used as the new dimension. If no value is specified then\n     * the current dimension will be returned.\n     * @method dimension\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter.dimension}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(dc.pluck('key'));\n     * chart.dimension(dimension);\n     * @param {crossfilter.dimension} [dimension]\n     * @returns {crossfilter.dimension|dc.baseMixin}\n     */\n    _chart.dimension = function (dimension) {\n        if (!arguments.length) {\n            return _dimension;\n        }\n        _dimension = dimension;\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * Set the data callback or retrieve the chart's data set. The data callback is passed the chart's\n     * group and by default will return\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all}.\n     * This behavior may be modified to, for instance, return only the top 5 groups.\n     * @method data\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // Default data function\n     * chart.data(function (group) { return group.all(); });\n     *\n     * chart.data(function (group) { return group.top(5); });\n     * @param {Function} [callback]\n     * @returns {*|dc.baseMixin}\n     */\n    _chart.data = function (callback) {\n        if (!arguments.length) {\n            return _data.call(_chart, _group);\n        }\n        _data = d3.functor(callback);\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the group attribute of a chart. In `dc` a group is a\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter group}.\n     * Usually the group should be created from the particular dimension associated with the same chart. If a value is\n     * given, then it will be used as the new group.\n     *\n     * If no value specified then the current group will be returned.\n     * If `name` is specified then it will be used to generate legend label.\n     * @method group\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(dc.pluck('key'));\n     * chart.dimension(dimension);\n     * chart.group(dimension.group(crossfilter.reduceSum()));\n     * @param {crossfilter.group} [group]\n     * @param {String} [name]\n     * @returns {crossfilter.group|dc.baseMixin}\n     */\n    _chart.group = function (group, name) {\n        if (!arguments.length) {\n            return _group;\n        }\n        _group = group;\n        _chart._groupName = name;\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * Get or set an accessor to order ordinal dimensions.  The chart uses\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n     * to sort elements; this accessor returns the value to order on.\n     * @method ordering\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n     * @example\n     * // Default ordering accessor\n     * _chart.ordering(dc.pluck('key'));\n     * @param {Function} [orderFunction]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.ordering = function (orderFunction) {\n        if (!arguments.length) {\n            return _ordering;\n        }\n        _ordering = orderFunction;\n        _orderSort = crossfilter.quicksort.by(_ordering);\n        _chart.expireCache();\n        return _chart;\n    };\n\n    _chart._computeOrderedGroups = function (data) {\n        var dataCopy = data.slice(0);\n\n        if (dataCopy.length <= 1) {\n            return dataCopy;\n        }\n\n        if (!_orderSort) {\n            _orderSort = crossfilter.quicksort.by(_ordering);\n        }\n\n        return _orderSort(dataCopy, 0, dataCopy.length);\n    };\n\n    /**\n     * Clear all filters associated with this chart. The same effect can be achieved by calling\n     * {@link dc.baseMixin#filter chart.filter(null)}.\n     * @method filterAll\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.filterAll = function () {\n        return _chart.filter(null);\n    };\n\n    /**\n     * Execute d3 single selection in the chart's scope using the given selector and return the d3\n     * selection.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @method select\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_select d3.select}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').select(selector)\n     * chart.select(selector)\n     * @returns {d3.selection}\n     */\n    _chart.select = function (s) {\n        return _root.select(s);\n    };\n\n    /**\n     * Execute in scope d3 selectAll using the given selector and return d3 selection result.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @method selectAll\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_selectAll d3.selectAll}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').selectAll(selector)\n     * chart.selectAll(selector)\n     * @returns {d3.selection}\n     */\n    _chart.selectAll = function (s) {\n        return _root ? _root.selectAll(s) : null;\n    };\n\n    /**\n     * Set the root SVGElement to either be an existing chart's root; or any valid [d3 single\n     * selector](https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements) specifying a dom\n     * block element such as a div; or a dom element or d3 selection. Optionally registers the chart\n     * within the chartGroup. This class is called internally on chart initialization, but be called\n     * again to relocate the chart. However, it will orphan any previously created SVGElements.\n     * @method anchor\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {anchorChart|anchorSelector|anchorNode} [parent]\n     * @param {String} [chartGroup]\n     * @returns {String|node|d3.selection|dc.baseMixin}\n     */\n    _chart.anchor = function (parent, chartGroup) {\n        if (!arguments.length) {\n            return _anchor;\n        }\n        if (dc.instanceOfChart(parent)) {\n            _anchor = parent.anchor();\n            _root = parent.root();\n            _isChild = true;\n        } else if (parent) {\n            if (parent.select && parent.classed) { // detect d3 selection\n                _anchor = parent.node();\n            } else {\n                _anchor = parent;\n            }\n            _root = d3.select(_anchor);\n            _root.classed(dc.constants.CHART_CLASS, true);\n            dc.registerChart(_chart, chartGroup);\n            _isChild = false;\n        } else {\n            throw new dc.errors.BadArgumentException('parent must be defined');\n        }\n        _chartGroup = chartGroup;\n        return _chart;\n    };\n\n    /**\n     * Returns the DOM id for the chart's anchored location.\n     * @method anchorName\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {String}\n     */\n    _chart.anchorName = function () {\n        var a = _chart.anchor();\n        if (a && a.id) {\n            return a.id;\n        }\n        if (a && a.replace) {\n            return a.replace('#', '');\n        }\n        return 'dc-chart' + _chart.chartID();\n    };\n\n    /**\n     * Returns the root element where a chart resides. Usually it will be the parent div element where\n     * the SVGElement was created. You can also pass in a new root element however this is usually handled by\n     * dc internally. Resetting the root element on a chart outside of dc internals may have\n     * unexpected consequences.\n     * @method root\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement HTMLElement}\n     * @param {HTMLElement} [rootElement]\n     * @returns {HTMLElement|dc.baseMixin}\n     */\n    _chart.root = function (rootElement) {\n        if (!arguments.length) {\n            return _root;\n        }\n        _root = rootElement;\n        return _chart;\n    };\n\n    /**\n     * Returns the top SVGElement for this specific chart. You can also pass in a new SVGElement,\n     * however this is usually handled by dc internally. Resetting the SVGElement on a chart outside\n     * of dc internals may have unexpected consequences.\n     * @method svg\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @param {SVGElement|d3.selection} [svgElement]\n     * @returns {SVGElement|d3.selection|dc.baseMixin}\n     */\n    _chart.svg = function (svgElement) {\n        if (!arguments.length) {\n            return _svg;\n        }\n        _svg = svgElement;\n        return _chart;\n    };\n\n    /**\n     * Remove the chart's SVGElements from the dom and recreate the container SVGElement.\n     * @method resetSvg\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @returns {SVGElement}\n     */\n    _chart.resetSvg = function () {\n        _chart.select('svg').remove();\n        return generateSvg();\n    };\n\n    function sizeSvg () {\n        if (_svg) {\n            if (!_useViewBoxResizing) {\n                _svg\n                    .attr('width', _chart.width())\n                    .attr('height', _chart.height());\n            } else if (!_svg.attr('viewBox')) {\n                _svg\n                    .attr('viewBox', '0 0 ' + _chart.width() + ' ' + _chart.height());\n            }\n        }\n    }\n\n    function generateSvg () {\n        _svg = _chart.root().append('svg');\n        sizeSvg();\n        return _svg;\n    }\n\n    /**\n     * Set or get the filter printer function. The filter printer function is used to generate human\n     * friendly text for filter value(s) associated with the chart instance. The text will get shown\n     * in the `.filter element; see {@link dc.baseMixin#turnOnControls turnOnControls}.\n     *\n     * By default dc charts use a default filter printer {@link dc.printers.filters dc.printers.filters}\n     * that provides simple printing support for both single value and ranged filters.\n     * @method filterPrinter\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // for a chart with an ordinal brush, print the filters in upper case\n     * chart.filterPrinter(function(filters) {\n     *   return filters.map(function(f) { return f.toUpperCase(); }).join(', ');\n     * });\n     * // for a chart with a range brush, print the filter as start and extent\n     * chart.filterPrinter(function(filters) {\n     *   return 'start ' + dc.utils.printSingleValue(filters[0][0]) +\n     *     ' extent ' + dc.utils.printSingleValue(filters[0][1] - filters[0][0]);\n     * });\n     * @param {Function} [filterPrinterFunction=dc.printers.filters]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.filterPrinter = function (filterPrinterFunction) {\n        if (!arguments.length) {\n            return _filterPrinter;\n        }\n        _filterPrinter = filterPrinterFunction;\n        return _chart;\n    };\n\n    /**\n     * If set, use the `visibility` attribute instead of the `display` attribute for showing/hiding\n     * chart reset and filter controls, for less disruption to the layout.\n     * @method controlsUseVisibility\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [controlsUseVisibility=false]\n     * @returns {Boolean|dc.baseMixin}\n     **/\n    _chart.controlsUseVisibility = function (useVisibility) {\n        if (!arguments.length) {\n            return _controlsUseVisibility;\n        }\n        _controlsUseVisibility = useVisibility;\n        return _chart;\n    };\n\n    /**\n     * Turn on optional control elements within the root element. dc currently supports the\n     * following html control elements.\n     * * root.selectAll('.reset') - elements are turned on if the chart has an active filter. This type\n     * of control element is usually used to store a reset link to allow user to reset filter on a\n     * certain chart. This element will be turned off automatically if the filter is cleared.\n     * * root.selectAll('.filter') elements are turned on if the chart has an active filter. The text\n     * content of this element is then replaced with the current filter value using the filter printer\n     * function. This type of element will be turned off automatically if the filter is cleared.\n     * @method turnOnControls\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.turnOnControls = function () {\n        if (_root) {\n            var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n            _chart.selectAll('.reset').style(attribute, null);\n            _chart.selectAll('.filter').text(_filterPrinter(_chart.filters())).style(attribute, null);\n        }\n        return _chart;\n    };\n\n    /**\n     * Turn off optional control elements within the root element.\n     * @method turnOffControls\n     * @memberof dc.baseMixin\n     * @see {@link dc.baseMixin#turnOnControls turnOnControls}\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.turnOffControls = function () {\n        if (_root) {\n            var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n            var value = _chart.controlsUseVisibility() ? 'hidden' : 'none';\n            _chart.selectAll('.reset').style(attribute, value);\n            _chart.selectAll('.filter').style(attribute, value).text(_chart.filter());\n        }\n        return _chart;\n    };\n\n    /**\n     * Set or get the animation transition duration (in milliseconds) for this chart instance.\n     * @method transitionDuration\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Number} [duration=750]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.transitionDuration = function (duration) {\n        if (!arguments.length) {\n            return _transitionDuration;\n        }\n        _transitionDuration = duration;\n        return _chart;\n    };\n\n    /**\n     * Set or get the animation transition delay (in milliseconds) for this chart instance.\n     * @method transitionDelay\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Number} [delay=0]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.transitionDelay = function (delay) {\n        if (!arguments.length) {\n            return _transitionDelay;\n        }\n        _transitionDelay = delay;\n        return _chart;\n    };\n\n    _chart._mandatoryAttributes = function (_) {\n        if (!arguments.length) {\n            return _mandatoryAttributes;\n        }\n        _mandatoryAttributes = _;\n        return _chart;\n    };\n\n    function checkForMandatoryAttributes (a) {\n        if (!_chart[a] || !_chart[a]()) {\n            throw new dc.errors.InvalidStateException('Mandatory attribute chart.' + a +\n                ' is missing on chart[#' + _chart.anchorName() + ']');\n        }\n    }\n\n    /**\n     * Invoking this method will force the chart to re-render everything from scratch. Generally it\n     * should only be used to render the chart for the first time on the page or if you want to make\n     * sure everything is redrawn from scratch instead of relying on the default incremental redrawing\n     * behaviour.\n     * @method render\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.render = function () {\n        _height = _width = undefined; // force recalculate\n        _listeners.preRender(_chart);\n\n        if (_mandatoryAttributes) {\n            _mandatoryAttributes.forEach(checkForMandatoryAttributes);\n        }\n\n        var result = _chart._doRender();\n\n        if (_legend) {\n            _legend.render();\n        }\n\n        _chart._activateRenderlets('postRender');\n\n        return result;\n    };\n\n    _chart._activateRenderlets = function (event) {\n        _listeners.pretransition(_chart);\n        if (_chart.transitionDuration() > 0 && _svg) {\n            _svg.transition().duration(_chart.transitionDuration()).delay(_chart.transitionDelay())\n                .each('end', function () {\n                    _listeners.renderlet(_chart);\n                    if (event) {\n                        _listeners[event](_chart);\n                    }\n                });\n        } else {\n            _listeners.renderlet(_chart);\n            if (event) {\n                _listeners[event](_chart);\n            }\n        }\n    };\n\n    /**\n     * Calling redraw will cause the chart to re-render data changes incrementally. If there is no\n     * change in the underlying data dimension then calling this method will have no effect on the\n     * chart. Most chart interaction in dc will automatically trigger this method through internal\n     * events (in particular {@link dc.redrawAll dc.redrawAll}); therefore, you only need to\n     * manually invoke this function if data is manipulated outside of dc's control (for example if\n     * data is loaded in the background using\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}).\n     * @method redraw\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.redraw = function () {\n        sizeSvg();\n        _listeners.preRedraw(_chart);\n\n        var result = _chart._doRedraw();\n\n        if (_legend) {\n            _legend.render();\n        }\n\n        _chart._activateRenderlets('postRedraw');\n\n        return result;\n    };\n\n    /**\n     * Gets/sets the commit handler. If the chart has a commit handler, the handler will be called when\n     * the chart's filters have changed, in order to send the filter data asynchronously to a server.\n     *\n     * Unlike other functions in dc.js, the commit handler is asynchronous. It takes two arguments:\n     * a flag indicating whether this is a render (true) or a redraw (false), and a callback to be\n     * triggered once the commit is filtered. The callback has the standard node.js continuation signature\n     * with error first and result second.\n     * @method commitHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.commitHandler = function (commitHandler) {\n        if (!arguments.length) {\n            return _commitHandler;\n        }\n        _commitHandler = commitHandler;\n        return _chart;\n    };\n\n    /**\n     * Redraws all charts in the same group as this chart, typically in reaction to a filter\n     * change. If the chart has a {@link dc.baseMixin.commitFilter commitHandler}, it will\n     * be executed and waited for.\n     * @method redrawGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.redrawGroup = function () {\n        if (_commitHandler) {\n            _commitHandler(false, function (error, result) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    dc.redrawAll(_chart.chartGroup());\n                }\n            });\n        } else {\n            dc.redrawAll(_chart.chartGroup());\n        }\n        return _chart;\n    };\n\n    /**\n     * Renders all charts in the same group as this chart. If the chart has a\n     * {@link dc.baseMixin.commitFilter commitHandler}, it will be executed and waited for\n     * @method renderGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.renderGroup = function () {\n        if (_commitHandler) {\n            _commitHandler(false, function (error, result) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    dc.renderAll(_chart.chartGroup());\n                }\n            });\n        } else {\n            dc.renderAll(_chart.chartGroup());\n        }\n        return _chart;\n    };\n\n    _chart._invokeFilteredListener = function (f) {\n        if (f !== undefined) {\n            _listeners.filtered(_chart, f);\n        }\n    };\n\n    _chart._invokeZoomedListener = function () {\n        _listeners.zoomed(_chart);\n    };\n\n    var _hasFilterHandler = function (filters, filter) {\n        if (filter === null || typeof(filter) === 'undefined') {\n            return filters.length > 0;\n        }\n        return filters.some(function (f) {\n            return filter <= f && filter >= f;\n        });\n    };\n\n    /**\n     * Set or get the has-filter handler. The has-filter handler is a function that checks to see if\n     * the chart's current filters (first argument) include a specific filter (second argument).  Using a custom has-filter handler allows\n     * you to change the way filters are checked for and replaced.\n     * @method hasFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default has-filter handler\n     * chart.hasFilterHandler(function (filters, filter) {\n     *     if (filter === null || typeof(filter) === 'undefined') {\n     *         return filters.length > 0;\n     *     }\n     *     return filters.some(function (f) {\n     *         return filter <= f && filter >= f;\n     *     });\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.hasFilterHandler(function(filters, filter) {\n     *     return false;\n     * });\n     * @param {Function} [hasFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.hasFilterHandler = function (hasFilterHandler) {\n        if (!arguments.length) {\n            return _hasFilterHandler;\n        }\n        _hasFilterHandler = hasFilterHandler;\n        return _chart;\n    };\n\n    /**\n     * Check whether any active filter or a specific filter is associated with particular chart instance.\n     * This function is **not chainable**.\n     * @method hasFilter\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#hasFilterHandler hasFilterHandler}\n     * @param {*} [filter]\n     * @returns {Boolean}\n     */\n    _chart.hasFilter = function (filter) {\n        return _hasFilterHandler(_filters, filter);\n    };\n\n    var _removeFilterHandler = function (filters, filter) {\n        for (var i = 0; i < filters.length; i++) {\n            if (filters[i] <= filter && filters[i] >= filter) {\n                filters.splice(i, 1);\n                break;\n            }\n        }\n        return filters;\n    };\n\n    /**\n     * Set or get the remove filter handler. The remove filter handler is a function that removes a\n     * filter from the chart's current filters. Using a custom remove filter handler allows you to\n     * change how filters are removed or perform additional work when removing a filter, e.g. when\n     * using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method removeFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default remove filter handler\n     * chart.removeFilterHandler(function (filters, filter) {\n     *     for (var i = 0; i < filters.length; i++) {\n     *         if (filters[i] <= filter && filters[i] >= filter) {\n     *             filters.splice(i, 1);\n     *             break;\n     *         }\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.removeFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [removeFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.removeFilterHandler = function (removeFilterHandler) {\n        if (!arguments.length) {\n            return _removeFilterHandler;\n        }\n        _removeFilterHandler = removeFilterHandler;\n        return _chart;\n    };\n\n    var _addFilterHandler = function (filters, filter) {\n        filters.push(filter);\n        return filters;\n    };\n\n    /**\n     * Set or get the add filter handler. The add filter handler is a function that adds a filter to\n     * the chart's filter list. Using a custom add filter handler allows you to change the way filters\n     * are added or perform additional work when adding a filter, e.g. when using a filter server other\n     * than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method addFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default add filter handler\n     * chart.addFilterHandler(function (filters, filter) {\n     *     filters.push(filter);\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.addFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [addFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.addFilterHandler = function (addFilterHandler) {\n        if (!arguments.length) {\n            return _addFilterHandler;\n        }\n        _addFilterHandler = addFilterHandler;\n        return _chart;\n    };\n\n    var _resetFilterHandler = function (filters) {\n        return [];\n    };\n\n    /**\n     * Set or get the reset filter handler. The reset filter handler is a function that resets the\n     * chart's filter list by returning a new list. Using a custom reset filter handler allows you to\n     * change the way filters are reset, or perform additional work when resetting the filters,\n     * e.g. when using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method resetFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default remove filter handler\n     * function (filters) {\n     *     return [];\n     * }\n     *\n     * // custom filter handler (no-op)\n     * chart.resetFilterHandler(function(filters) {\n     *     return filters;\n     * });\n     * @param {Function} [resetFilterHandler]\n     * @returns {dc.baseMixin}\n     */\n    _chart.resetFilterHandler = function (resetFilterHandler) {\n        if (!arguments.length) {\n            return _resetFilterHandler;\n        }\n        _resetFilterHandler = resetFilterHandler;\n        return _chart;\n    };\n\n    function applyFilters (filters) {\n        if (_chart.dimension() && _chart.dimension().filter) {\n            var fs = _filterHandler(_chart.dimension(), filters);\n            if (fs) {\n                filters = fs;\n            }\n        }\n        return filters;\n    }\n\n    /**\n     * Replace the chart filter. This is equivalent to calling `chart.filter(null).filter(filter)`\n     * but more efficient because the filter is only applied once.\n     *\n     * @method replaceFilter\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {*} [filter]\n     * @returns {dc.baseMixin}\n     **/\n    _chart.replaceFilter = function (filter) {\n        _filters = _resetFilterHandler(_filters);\n        _chart.filter(filter);\n        return _chart;\n    };\n\n    /**\n     * Filter the chart by the given parameter, or return the current filter if no input parameter\n     * is given.\n     *\n     * The filter parameter can take one of these forms:\n     * * A single value: the value will be toggled (added if it is not present in the current\n     * filters, removed if it is present)\n     * * An array containing a single array of values (`[[value,value,value]]`): each value is\n     * toggled\n     * * When appropriate for the chart, a {@link dc.filters dc filter object} such as\n     *   * {@link dc.filters.RangedFilter `dc.filters.RangedFilter`} for the\n     * {@link dc.coordinateGridMixin dc.coordinateGridMixin} charts\n     *   * {@link dc.filters.TwoDimensionalFilter `dc.filters.TwoDimensionalFilter`} for the\n     * {@link dc.heatMap heat map}\n     *   * {@link dc.filters.RangedTwoDimensionalFilter `dc.filters.RangedTwoDimensionalFilter`}\n     * for the {@link dc.scatterPlot scatter plot}\n     * * `null`: the filter will be reset using the\n     * {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n     *\n     * Note that this is always a toggle (even when it doesn't make sense for the filter type). If\n     * you wish to replace the current filter, either call `chart.filter(null)` first - or it's more\n     * efficient to call {@link dc.baseMixin#replaceFilter `chart.replaceFilter(filter)`} instead.\n     *\n     * Each toggle is executed by checking if the value is already present using the\n     * {@link dc.baseMixin#hasFilterHandler hasFilterHandler}; if it is not present, it is added\n     * using the {@link dc.baseMixin#addFilterHandler addFilterHandler}; if it is already present,\n     * it is removed using the {@link dc.baseMixin#removeFilterHandler removeFilterHandler}.\n     *\n     * Once the filters array has been updated, the filters are applied to the\n     * crossfilter dimension, using the {@link dc.baseMixin#filterHandler filterHandler}.\n     *\n     * Once you have set the filters, call {@link dc.baseMixin#redrawGroup `chart.redrawGroup()`}\n     * (or {@link dc.redrawAll `dc.redrawAll()`}) to redraw the chart's group.\n     * @method filter\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#addFilterHandler addFilterHandler}\n     * @see {@link dc.baseMixin#removeFilterHandler removeFilterHandler}\n     * @see {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n     * @see {@link dc.baseMixin#filterHandler filterHandler}\n     * @example\n     * // filter by a single string\n     * chart.filter('Sunday');\n     * // filter by a single age\n     * chart.filter(18);\n     * // filter by a set of states\n     * chart.filter([['MA', 'TX', 'ND', 'WA']]);\n     * // filter by range -- note the use of dc.filters.RangedFilter, which is different\n     * // from the syntax for filtering a crossfilter dimension directly, dimension.filter([15,20])\n     * chart.filter(dc.filters.RangedFilter(15,20));\n     * @param {*} [filter]\n     * @returns {dc.baseMixin}\n     */\n    _chart.filter = function (filter) {\n        if (!arguments.length) {\n            return _filters.length > 0 ? _filters[0] : null;\n        }\n        var filters = _filters;\n        if (filter instanceof Array && filter[0] instanceof Array && !filter.isFiltered) {\n            // toggle each filter\n            filter[0].forEach(function (f) {\n                if (_hasFilterHandler(filters, f)) {\n                    filters = _removeFilterHandler(filters, f);\n                } else {\n                    filters = _addFilterHandler(filters, f);\n                }\n            });\n        } else if (filter === null) {\n            filters = _resetFilterHandler(filters);\n        } else {\n            if (_hasFilterHandler(filters, filter)) {\n                filters = _removeFilterHandler(filters, filter);\n            } else {\n                filters = _addFilterHandler(filters, filter);\n            }\n        }\n        _filters = applyFilters(filters);\n        _chart._invokeFilteredListener(filter);\n\n        if (_root !== null && _chart.hasFilter()) {\n            _chart.turnOnControls();\n        } else {\n            _chart.turnOffControls();\n        }\n\n        return _chart;\n    };\n\n    /**\n     * Returns all current filters. This method does not perform defensive cloning of the internal\n     * filter array before returning, therefore any modification of the returned array will effect the\n     * chart's internal filter storage.\n     * @method filters\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {Array<*>}\n     */\n    _chart.filters = function () {\n        return _filters;\n    };\n\n    _chart.highlightSelected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, true);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n    };\n\n    _chart.fadeDeselected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, true);\n    };\n\n    _chart.resetHighlight = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n    };\n\n    /**\n     * This function is passed to d3 as the onClick handler for each chart. The default behavior is to\n     * filter on the clicked datum (passed to the callback) and redraw the chart group.\n     * @method onClick\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {*} datum\n     */\n    _chart.onClick = function (datum) {\n        var filter = _chart.keyAccessor()(datum);\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    /**\n     * Set or get the filter handler. The filter handler is a function that performs the filter action\n     * on a specific dimension. Using a custom filter handler allows you to perform additional logic\n     * before or after filtering.\n     * @method filterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter crossfilter.dimension.filter}\n     * @example\n     * // the default filter handler handles all possible cases for the charts in dc.js\n     * // you can replace it with something more specialized for your own chart\n     * chart.filterHandler(function (dimension, filters) {\n     *     if (filters.length === 0) {\n     *         // the empty case (no filtering)\n     *         dimension.filter(null);\n     *     } else if (filters.length === 1 && !filters[0].isFiltered) {\n     *         // single value and not a function-based filter\n     *         dimension.filterExact(filters[0]);\n     *     } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n     *         // single range-based filter\n     *         dimension.filterRange(filters[0]);\n     *     } else {\n     *         // an array of values, or an array of filter objects\n     *         dimension.filterFunction(function (d) {\n     *             for (var i = 0; i < filters.length; i++) {\n     *                 var filter = filters[i];\n     *                 if (filter.isFiltered && filter.isFiltered(d)) {\n     *                     return true;\n     *                 } else if (filter <= d && filter >= d) {\n     *                     return true;\n     *                 }\n     *             }\n     *             return false;\n     *         });\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler\n     * chart.filterHandler(function(dimension, filter){\n     *     var newFilter = filter + 10;\n     *     dimension.filter(newFilter);\n     *     return newFilter; // set the actual filter value to the new value\n     * });\n     * @param {Function} [filterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.filterHandler = function (filterHandler) {\n        if (!arguments.length) {\n            return _filterHandler;\n        }\n        _filterHandler = filterHandler;\n        return _chart;\n    };\n\n    // abstract function stub\n    _chart._doRender = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    _chart.legendables = function () {\n        // do nothing in base, should be overridden by sub-function\n        return [];\n    };\n\n    _chart.legendHighlight = function () {\n        // do nothing in base, should be overridden by sub-function\n    };\n\n    _chart.legendReset = function () {\n        // do nothing in base, should be overridden by sub-function\n    };\n\n    _chart.legendToggle = function () {\n        // do nothing in base, should be overriden by sub-function\n    };\n\n    _chart.isLegendableHidden = function () {\n        // do nothing in base, should be overridden by sub-function\n        return false;\n    };\n\n    /**\n     * Set or get the key accessor function. The key accessor function is used to retrieve the key\n     * value from the crossfilter group. Key values are used differently in different charts, for\n     * example keys correspond to slices in a pie chart and x axis positions in a grid coordinate chart.\n     * @method keyAccessor\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default key accessor\n     * chart.keyAccessor(function(d) { return d.key; });\n     * // custom key accessor for a multi-value crossfilter reduction\n     * chart.keyAccessor(function(p) { return p.value.absGain; });\n     * @param {Function} [keyAccessor]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.keyAccessor = function (keyAccessor) {\n        if (!arguments.length) {\n            return _keyAccessor;\n        }\n        _keyAccessor = keyAccessor;\n        return _chart;\n    };\n\n    /**\n     * Set or get the value accessor function. The value accessor function is used to retrieve the\n     * value from the crossfilter group. Group values are used differently in different charts, for\n     * example values correspond to slice sizes in a pie chart and y axis positions in a grid\n     * coordinate chart.\n     * @method valueAccessor\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default value accessor\n     * chart.valueAccessor(function(d) { return d.value; });\n     * // custom value accessor for a multi-value crossfilter reduction\n     * chart.valueAccessor(function(p) { return p.value.percentageGain; });\n     * @param {Function} [valueAccessor]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.valueAccessor = function (valueAccessor) {\n        if (!arguments.length) {\n            return _valueAccessor;\n        }\n        _valueAccessor = valueAccessor;\n        return _chart;\n    };\n\n    /**\n     * Set or get the label function. The chart class will use this function to render labels for each\n     * child element in the chart, e.g. slices in a pie chart or bubbles in a bubble chart. Not every\n     * chart supports the label function, for example line chart does not use this function\n     * at all. By default, enables labels; pass false for the second parameter if this is not desired.\n     * @method label\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default label function just return the key\n     * chart.label(function(d) { return d.key; });\n     * // label function has access to the standard d3 data binding and can get quite complicated\n     * chart.label(function(d) { return d.data.key + '(' + Math.floor(d.data.value / all.value() * 100) + '%)'; });\n     * @param {Function} [labelFunction]\n     * @param {Boolean} [enableLabels=true]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.label = function (labelFunction, enableLabels) {\n        if (!arguments.length) {\n            return _label;\n        }\n        _label = labelFunction;\n        if ((enableLabels === undefined) || enableLabels) {\n            _renderLabel = true;\n        }\n        return _chart;\n    };\n\n    /**\n     * Turn on/off label rendering\n     * @method renderLabel\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [renderLabel=false]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.renderLabel = function (renderLabel) {\n        if (!arguments.length) {\n            return _renderLabel;\n        }\n        _renderLabel = renderLabel;\n        return _chart;\n    };\n\n    /**\n     * Set or get the title function. The chart class will use this function to render the SVGElement title\n     * (usually interpreted by browser as tooltips) for each child element in the chart, e.g. a slice\n     * in a pie chart or a bubble in a bubble chart. Almost every chart supports the title function;\n     * however in grid coordinate charts you need to turn off the brush in order to see titles, because\n     * otherwise the brush layer will block tooltip triggering.\n     * @method title\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default title function shows \"key: value\"\n     * chart.title(function(d) { return d.key + ': ' + d.value; });\n     * // title function has access to the standard d3 data binding and can get quite complicated\n     * chart.title(function(p) {\n     *    return p.key.getFullYear()\n     *        + '\\n'\n     *        + 'Index Gain: ' + numberFormat(p.value.absGain) + '\\n'\n     *        + 'Index Gain in Percentage: ' + numberFormat(p.value.percentageGain) + '%\\n'\n     *        + 'Fluctuation / Index Ratio: ' + numberFormat(p.value.fluctuationPercentage) + '%';\n     * });\n     * @param {Function} [titleFunction]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.title = function (titleFunction) {\n        if (!arguments.length) {\n            return _title;\n        }\n        _title = titleFunction;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off title rendering, or return the state of the render title flag if no arguments are\n     * given.\n     * @method renderTitle\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [renderTitle=true]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.renderTitle = function (renderTitle) {\n        if (!arguments.length) {\n            return _renderTitle;\n        }\n        _renderTitle = renderTitle;\n        return _chart;\n    };\n\n    /**\n     * A renderlet is similar to an event listener on rendering event. Multiple renderlets can be added\n     * to an individual chart.  Each time a chart is rerendered or redrawn the renderlets are invoked\n     * right after the chart finishes its transitions, giving you a way to modify the SVGElements.\n     * Renderlet functions take the chart instance as the only input parameter and you can\n     * use the dc API or use raw d3 to achieve pretty much any effect.\n     *\n     * Use {@link dc.baseMixin#on on} with a 'renderlet' prefix.\n     * Generates a random key for the renderlet, which makes it hard to remove.\n     * @method renderlet\n     * @memberof dc.baseMixin\n     * @instance\n     * @deprecated\n     * @example\n     * // do this instead of .renderlet(function(chart) { ... })\n     * chart.on(\"renderlet\", function(chart){\n     *     // mix of dc API and d3 manipulation\n     *     chart.select('g.y').style('display', 'none');\n     *     // its a closure so you can also access other chart variable available in the closure scope\n     *     moveChart.filter(chart.filter());\n     * });\n     * @param {Function} renderletFunction\n     * @returns {dc.baseMixin}\n     */\n    _chart.renderlet = dc.logger.deprecate(function (renderletFunction) {\n        _chart.on('renderlet.' + dc.utils.uniqueId(), renderletFunction);\n        return _chart;\n    }, 'chart.renderlet has been deprecated.  Please use chart.on(\"renderlet.<renderletKey>\", renderletFunction)');\n\n    /**\n     * Get or set the chart group to which this chart belongs. Chart groups are rendered or redrawn\n     * together since it is expected they share the same underlying crossfilter data set.\n     * @method chartGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {String} [chartGroup]\n     * @returns {String|dc.baseMixin}\n     */\n    _chart.chartGroup = function (chartGroup) {\n        if (!arguments.length) {\n            return _chartGroup;\n        }\n        if (!_isChild) {\n            dc.deregisterChart(_chart, _chartGroup);\n        }\n        _chartGroup = chartGroup;\n        if (!_isChild) {\n            dc.registerChart(_chart, _chartGroup);\n        }\n        return _chart;\n    };\n\n    /**\n     * Expire the internal chart cache. dc charts cache some data internally on a per chart basis to\n     * speed up rendering and avoid unnecessary calculation; however it might be useful to clear the\n     * cache if you have changed state which will affect rendering.  For example, if you invoke\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}\n     * function or reset group or dimension after rendering, it is a good idea to\n     * clear the cache to make sure charts are rendered properly.\n     * @method expireCache\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.expireCache = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    /**\n     * Attach a dc.legend widget to this chart. The legend widget will automatically draw legend labels\n     * based on the color setting and names associated with each group.\n     * @method legend\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n     * @param {dc.legend} [legend]\n     * @returns {dc.legend|dc.baseMixin}\n     */\n    _chart.legend = function (legend) {\n        if (!arguments.length) {\n            return _legend;\n        }\n        _legend = legend;\n        _legend.parent(_chart);\n        return _chart;\n    };\n\n    /**\n     * Returns the internal numeric ID of the chart.\n     * @method chartID\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {String}\n     */\n    _chart.chartID = function () {\n        return _chart.__dcFlag__;\n    };\n\n    /**\n     * Set chart options using a configuration object. Each key in the object will cause the method of\n     * the same name to be called with the value to set that attribute for the chart.\n     * @method options\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * chart.options({dimension: myDimension, group: myGroup});\n     * @param {{}} opts\n     * @returns {dc.baseMixin}\n     */\n    _chart.options = function (opts) {\n        var applyOptions = [\n            'anchor',\n            'group',\n            'xAxisLabel',\n            'yAxisLabel',\n            'stack',\n            'title',\n            'point',\n            'getColor',\n            'overlayGeoJson'\n        ];\n\n        for (var o in opts) {\n            if (typeof(_chart[o]) === 'function') {\n                if (opts[o] instanceof Array && applyOptions.indexOf(o) !== -1) {\n                    _chart[o].apply(_chart, opts[o]);\n                } else {\n                    _chart[o].call(_chart, opts[o]);\n                }\n            } else {\n                dc.logger.debug('Not a valid option setter name: ' + o);\n            }\n        }\n        return _chart;\n    };\n\n    /**\n     * All dc chart instance supports the following listeners.\n     * Supports the following events:\n     * * `renderlet` - This listener function will be invoked after transitions after redraw and render. Replaces the\n     * deprecated {@link dc.baseMixin#renderlet renderlet} method.\n     * * `pretransition` - Like `.on('renderlet', ...)` but the event is fired before transitions start.\n     * * `preRender` - This listener function will be invoked before chart rendering.\n     * * `postRender` - This listener function will be invoked after chart finish rendering including\n     * all renderlets' logic.\n     * * `preRedraw` - This listener function will be invoked before chart redrawing.\n     * * `postRedraw` - This listener function will be invoked after chart finish redrawing\n     * including all renderlets' logic.\n     * * `filtered` - This listener function will be invoked after a filter is applied, added or removed.\n     * * `zoomed` - This listener function will be invoked after a zoom is triggered.\n     * @method on\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Internals.md#dispatch_on d3.dispatch.on}\n     * @example\n     * .on('renderlet', function(chart, filter){...})\n     * .on('pretransition', function(chart, filter){...})\n     * .on('preRender', function(chart){...})\n     * .on('postRender', function(chart){...})\n     * .on('preRedraw', function(chart){...})\n     * .on('postRedraw', function(chart){...})\n     * .on('filtered', function(chart, filter){...})\n     * .on('zoomed', function(chart, filter){...})\n     * @param {String} event\n     * @param {Function} listener\n     * @returns {dc.baseMixin}\n     */\n    _chart.on = function (event, listener) {\n        _listeners.on(event, listener);\n        return _chart;\n    };\n\n    return _chart;\n};\n\n/**\n * Margin is a mixin that provides margin utility functions for both the Row Chart and Coordinate Grid\n * Charts.\n * @name marginMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.marginMixin}\n */\ndc.marginMixin = function (_chart) {\n    var _margin = {top: 10, right: 50, bottom: 30, left: 30};\n\n    /**\n     * Get or set the margins for a particular coordinate grid chart instance. The margins is stored as\n     * an associative Javascript array.\n     * @method margins\n     * @memberof dc.marginMixin\n     * @instance\n     * @example\n     * var leftMargin = chart.margins().left; // 30 by default\n     * chart.margins().left = 50;\n     * leftMargin = chart.margins().left; // now 50\n     * @param {{top: Number, right: Number, left: Number, bottom: Number}} [margins={top: 10, right: 50, bottom: 30, left: 30}]\n     * @returns {{top: Number, right: Number, left: Number, bottom: Number}|dc.marginMixin}\n     */\n    _chart.margins = function (margins) {\n        if (!arguments.length) {\n            return _margin;\n        }\n        _margin = margins;\n        return _chart;\n    };\n\n    _chart.effectiveWidth = function () {\n        return _chart.width() - _chart.margins().left - _chart.margins().right;\n    };\n\n    _chart.effectiveHeight = function () {\n        return _chart.height() - _chart.margins().top - _chart.margins().bottom;\n    };\n\n    return _chart;\n};\n\n/**\n * The Color Mixin is an abstract chart functional class providing universal coloring support\n * as a mix-in for any concrete chart implementation.\n * @name colorMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.colorMixin}\n */\ndc.colorMixin = function (_chart) {\n    var _colors = d3.scale.category20c();\n    var _defaultAccessor = true;\n\n    var _colorAccessor = function (d) { return _chart.keyAccessor()(d); };\n\n    /**\n     * Retrieve current color scale or set a new color scale. This methods accepts any function that\n     * operates like a d3 scale.\n     * @method colors\n     * @memberof dc.colorMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @example\n     * // alternate categorical scale\n     * chart.colors(d3.scale.category20b());\n     * // ordinal scale\n     * chart.colors(d3.scale.ordinal().range(['red','green','blue']));\n     * // convenience method, the same as above\n     * chart.ordinalColors(['red','green','blue']);\n     * // set a linear scale\n     * chart.linearColors([\"#4575b4\", \"#ffffbf\", \"#a50026\"]);\n     * @param {d3.scale} [colorScale=d3.scale.category20c()]\n     * @returns {d3.scale|dc.colorMixin}\n     */\n    _chart.colors = function (colorScale) {\n        if (!arguments.length) {\n            return _colors;\n        }\n        if (colorScale instanceof Array) {\n            _colors = d3.scale.quantize().range(colorScale); // deprecated legacy support, note: this fails for ordinal domains\n        } else {\n            _colors = d3.functor(colorScale);\n        }\n        return _chart;\n    };\n\n    /**\n     * Convenience method to set the color scale to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal d3.scale.ordinal} with\n     * range `r`.\n     * @method ordinalColors\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<String>} r\n     * @returns {dc.colorMixin}\n     */\n    _chart.ordinalColors = function (r) {\n        return _chart.colors(d3.scale.ordinal().range(r));\n    };\n\n    /**\n     * Convenience method to set the color scale to an Hcl interpolated linear scale with range `r`.\n     * @method linearColors\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<Number>} r\n     * @returns {dc.colorMixin}\n     */\n    _chart.linearColors = function (r) {\n        return _chart.colors(d3.scale.linear()\n                             .range(r)\n                             .interpolate(d3.interpolateHcl));\n    };\n\n    /**\n     * Set or the get color accessor function. This function will be used to map a data point in a\n     * crossfilter group to a color value on the color scale. The default function uses the key\n     * accessor.\n     * @method colorAccessor\n     * @memberof dc.colorMixin\n     * @instance\n     * @example\n     * // default index based color accessor\n     * .colorAccessor(function (d, i){return i;})\n     * // color accessor for a multi-value crossfilter reduction\n     * .colorAccessor(function (d){return d.value.absGain;})\n     * @param {Function} [colorAccessor]\n     * @returns {Function|dc.colorMixin}\n     */\n    _chart.colorAccessor = function (colorAccessor) {\n        if (!arguments.length) {\n            return _colorAccessor;\n        }\n        _colorAccessor = colorAccessor;\n        _defaultAccessor = false;\n        return _chart;\n    };\n\n    // what is this?\n    _chart.defaultColorAccessor = function () {\n        return _defaultAccessor;\n    };\n\n    /**\n     * Set or get the current domain for the color mapping function. The domain must be supplied as an\n     * array.\n     *\n     * Note: previously this method accepted a callback function. Instead you may use a custom scale\n     * set by {@link dc.colorMixin#colors .colors}.\n     * @method colorDomain\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<String>} [domain]\n     * @returns {Array<String>|dc.colorMixin}\n     */\n    _chart.colorDomain = function (domain) {\n        if (!arguments.length) {\n            return _colors.domain();\n        }\n        _colors.domain(domain);\n        return _chart;\n    };\n\n    /**\n     * Set the domain by determining the min and max values as retrieved by\n     * {@link dc.colorMixin#colorAccessor .colorAccessor} over the chart's dataset.\n     * @method calculateColorDomain\n     * @memberof dc.colorMixin\n     * @instance\n     * @returns {dc.colorMixin}\n     */\n    _chart.calculateColorDomain = function () {\n        var newDomain = [d3.min(_chart.data(), _chart.colorAccessor()),\n                         d3.max(_chart.data(), _chart.colorAccessor())];\n        _colors.domain(newDomain);\n        return _chart;\n    };\n\n    /**\n     * Get the color for the datum d and counter i. This is used internally by charts to retrieve a color.\n     * @method getColor\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {*} d\n     * @param {Number} [i]\n     * @returns {String}\n     */\n    _chart.getColor = function (d, i) {\n        return _colors(_colorAccessor.call(this, d, i));\n    };\n\n    /**\n     * **Deprecated.** Get/set the color calculator. This actually replaces the\n     * {@link dc.colorMixin#getColor getColor} method!\n     *\n     * This is not recommended, since using a {@link dc.colorMixin#colorAccessor colorAccessor} and\n     * color scale ({@link dc.colorMixin#colors .colors}) is more powerful and idiomatic d3.\n     * @method colorCalculator\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {*} [colorCalculator]\n     * @returns {Function|dc.colorMixin}\n     */\n    _chart.colorCalculator = dc.logger.deprecate(function (colorCalculator) {\n        if (!arguments.length) {\n            return _chart.getColor;\n        }\n        _chart.getColor = colorCalculator;\n        return _chart;\n    }, 'colorMixin.colorCalculator has been deprecated. Please colorMixin.colors and colorMixin.colorAccessor instead');\n\n    return _chart;\n};\n\n/**\n * Coordinate Grid is an abstract base chart designed to support a number of coordinate grid based\n * concrete chart types, e.g. bar chart, line chart, and bubble chart.\n * @name coordinateGridMixin\n * @memberof dc\n * @mixin\n * @mixes dc.colorMixin\n * @mixes dc.marginMixin\n * @mixes dc.baseMixin\n * @param {Object} _chart\n * @returns {dc.coordinateGridMixin}\n */\ndc.coordinateGridMixin = function (_chart) {\n    var GRID_LINE_CLASS = 'grid-line';\n    var HORIZONTAL_CLASS = 'horizontal';\n    var VERTICAL_CLASS = 'vertical';\n    var Y_AXIS_LABEL_CLASS = 'y-axis-label';\n    var X_AXIS_LABEL_CLASS = 'x-axis-label';\n    var DEFAULT_AXIS_LABEL_PADDING = 12;\n\n    _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin(_chart)));\n\n    _chart.colors(d3.scale.category10());\n    _chart._mandatoryAttributes().push('x');\n    var _parent;\n    var _g;\n    var _chartBodyG;\n\n    var _x;\n    var _xOriginalDomain;\n    var _xAxis = d3.svg.axis().orient('bottom');\n    var _xUnits = dc.units.integers;\n    var _xAxisPadding = 0;\n    var _xAxisPaddingUnit = 'day';\n    var _xElasticity = false;\n    var _xAxisLabel;\n    var _xAxisLabelPadding = 0;\n    var _lastXDomain;\n\n    var _y;\n    var _yAxis = d3.svg.axis().orient('left');\n    var _yAxisPadding = 0;\n    var _yElasticity = false;\n    var _yAxisLabel;\n    var _yAxisLabelPadding = 0;\n\n    var _brush = d3.svg.brush();\n    var _brushOn = true;\n    var _round;\n\n    var _renderHorizontalGridLine = false;\n    var _renderVerticalGridLine = false;\n\n    var _refocused = false, _resizing = false;\n    var _unitCount;\n\n    var _zoomScale = [1, Infinity];\n    var _zoomOutRestrict = true;\n\n    var _zoom = d3.behavior.zoom().on('zoom', zoomHandler);\n    var _nullZoom = d3.behavior.zoom().on('zoom', null);\n    var _hasBeenMouseZoomable = false;\n\n    var _rangeChart;\n    var _focusChart;\n\n    var _mouseZoomable = false;\n    var _clipPadding = 0;\n\n    var _outerRangeBandPadding = 0.5;\n    var _rangeBandPadding = 0;\n\n    var _useRightYAxis = false;\n\n    /**\n     * When changing the domain of the x or y scale, it is necessary to tell the chart to recalculate\n     * and redraw the axes. (`.rescale()` is called automatically when the x or y scale is replaced\n     * with {@link dc.coordinateGridMixin+x .x()} or {@link dc.coordinateGridMixin#y .y()}, and has\n     * no effect on elastic scales.)\n     * @method rescale\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {dc.coordinateGridMixin}\n     */\n    _chart.rescale = function () {\n        _unitCount = undefined;\n        _resizing = true;\n        return _chart;\n    };\n\n    _chart.resizing = function () {\n        return _resizing;\n    };\n\n    /**\n     * Get or set the range selection chart associated with this instance. Setting the range selection\n     * chart using this function will automatically update its selection brush when the current chart\n     * zooms in. In return the given range chart will also automatically attach this chart as its focus\n     * chart hence zoom in when range brush updates.\n     *\n     * Usually the range and focus charts will share a dimension. The range chart will set the zoom\n     * boundaries for the focus chart, so its dimension values must be compatible with the domain of\n     * the focus chart.\n     *\n     * See the [Nasdaq 100 Index](http://dc-js.github.com/dc.js/) example for this effect in action.\n     * @method rangeChart\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {dc.coordinateGridMixin} [rangeChart]\n     * @returns {dc.coordinateGridMixin}\n     */\n    _chart.rangeChart = function (rangeChart) {\n        if (!arguments.length) {\n            return _rangeChart;\n        }\n        _rangeChart = rangeChart;\n        _rangeChart.focusChart(_chart);\n        return _chart;\n    };\n\n    /**\n     * Get or set the scale extent for mouse zooms.\n     * @method zoomScale\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Array<Number|Date>} [extent=[1, Infinity]]\n     * @returns {Array<Number|Date>|dc.coordinateGridMixin}\n     */\n    _chart.zoomScale = function (extent) {\n        if (!arguments.length) {\n            return _zoomScale;\n        }\n        _zoomScale = extent;\n        return _chart;\n    };\n\n    /**\n     * Get or set the zoom restriction for the chart. If true limits the zoom to origional domain of the chart.\n     * @method zoomOutRestrict\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [zoomOutRestrict=true]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.zoomOutRestrict = function (zoomOutRestrict) {\n        if (!arguments.length) {\n            return _zoomOutRestrict;\n        }\n        _zoomScale[0] = zoomOutRestrict ? 1 : 0;\n        _zoomOutRestrict = zoomOutRestrict;\n        return _chart;\n    };\n\n    _chart._generateG = function (parent) {\n        if (parent === undefined) {\n            _parent = _chart.svg();\n        } else {\n            _parent = parent;\n        }\n\n        var href = window.location.href.split('#')[0];\n\n        _g = _parent.append('g');\n\n        _chartBodyG = _g.append('g').attr('class', 'chart-body')\n            .attr('transform', 'translate(' + _chart.margins().left + ', ' + _chart.margins().top + ')')\n            .attr('clip-path', 'url(' + href + '#' + getClipPathId() + ')');\n\n        return _g;\n    };\n\n    /**\n     * Get or set the root g element. This method is usually used to retrieve the g element in order to\n     * overlay custom svg drawing programatically. **Caution**: The root g element is usually generated\n     * by dc.js internals, and resetting it might produce unpredictable result.\n     * @method g\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {SVGElement} [gElement]\n     * @returns {SVGElement|dc.coordinateGridMixin}\n     */\n    _chart.g = function (gElement) {\n        if (!arguments.length) {\n            return _g;\n        }\n        _g = gElement;\n        return _chart;\n    };\n\n    /**\n     * Set or get mouse zoom capability flag (default: false). When turned on the chart will be\n     * zoomable using the mouse wheel. If the range selector chart is attached zooming will also update\n     * the range selection brush on the associated range selector chart.\n     * @method mouseZoomable\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [mouseZoomable=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.mouseZoomable = function (mouseZoomable) {\n        if (!arguments.length) {\n            return _mouseZoomable;\n        }\n        _mouseZoomable = mouseZoomable;\n        return _chart;\n    };\n\n    /**\n     * Retrieve the svg group for the chart body.\n     * @method chartBodyG\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {SVGElement} [chartBodyG]\n     * @returns {SVGElement}\n     */\n    _chart.chartBodyG = function (chartBodyG) {\n        if (!arguments.length) {\n            return _chartBodyG;\n        }\n        _chartBodyG = chartBodyG;\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Get or set the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale} or\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md ordinal scale}.\n     * @method x\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @example\n     * // set x to a linear scale\n     * chart.x(d3.scale.linear().domain([-2500, 2500]))\n     * // set x to a time scale to generate histogram\n     * chart.x(d3.time.scale().domain([new Date(1985, 0, 1), new Date(2012, 11, 31)]))\n     * @param {d3.scale} [xScale]\n     * @returns {d3.scale|dc.coordinateGridMixin}\n     */\n    _chart.x = function (xScale) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = xScale;\n        _xOriginalDomain = _x.domain();\n        _chart.rescale();\n        return _chart;\n    };\n\n    _chart.xOriginalDomain = function () {\n        return _xOriginalDomain;\n    };\n\n    /**\n     * Set or get the xUnits function. The coordinate grid chart uses the xUnits function to calculate\n     * the number of data projections on x axis such as the number of bars for a bar chart or the\n     * number of dots for a line chart. This function is expected to return a Javascript array of all\n     * data points on x axis, or the number of points on the axis. [d3 time range functions\n     * d3.time.days, d3.time.months, and\n     * d3.time.years](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#aliases) are all valid xUnits\n     * function. dc.js also provides a few units function, see the {@link dc.units Units Namespace} for\n     * a list of built-in units functions.\n     * @method xUnits\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @todo Add docs for utilities\n     * @example\n     * // set x units to count days\n     * chart.xUnits(d3.time.days);\n     * // set x units to count months\n     * chart.xUnits(d3.time.months);\n     *\n     * // A custom xUnits function can be used as long as it follows the following interface:\n     * // units in integer\n     * function(start, end, xDomain) {\n     *      // simply calculates how many integers in the domain\n     *      return Math.abs(end - start);\n     * };\n     *\n     * // fixed units\n     * function(start, end, xDomain) {\n     *      // be aware using fixed units will disable the focus/zoom ability on the chart\n     *      return 1000;\n     * @param {Function} [xUnits=dc.units.integers]\n     * @returns {Function|dc.coordinateGridMixin}\n     */\n    _chart.xUnits = function (xUnits) {\n        if (!arguments.length) {\n            return _xUnits;\n        }\n        _xUnits = xUnits;\n        return _chart;\n    };\n\n    /**\n     * Set or get the x axis used by a particular coordinate grid chart instance. This function is most\n     * useful when x axis customization is required. The x axis in dc.js is an instance of a\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object};\n     * therefore it supports any valid d3 axis manipulation.\n     *\n     * **Caution**: The x axis is usually generated internally by dc; resetting it may cause\n     * unexpected results. Note also that when used as a getter, this function is not chainable:\n     * it returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n     * so attempting to call chart functions after calling `.xAxis()` will fail}.\n     * @method xAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function(v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [xAxis=d3.svg.axis().orient('bottom')]\n     * @returns {d3.svg.axis|dc.coordinateGridMixin}\n     */\n    _chart.xAxis = function (xAxis) {\n        if (!arguments.length) {\n            return _xAxis;\n        }\n        _xAxis = xAxis;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off elastic x axis behavior. If x axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the x axis range whenever a redraw event is triggered.\n     * @method elasticX\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [elasticX=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n            return _xElasticity;\n        }\n        _xElasticity = elasticX;\n        return _chart;\n    };\n\n    /**\n     * Set or get x axis padding for the elastic x axis. The padding will be added to both end of the x\n     * axis if elasticX is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date x axes.  When padding a date axis, an integer represents number of units being padded\n     * and a percentage string will be treated the same as an integer. The unit will be determined by the\n     * xAxisPaddingUnit variable.\n     * @method xAxisPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number|String} [padding=0]\n     * @returns {Number|String|dc.coordinateGridMixin}\n     */\n    _chart.xAxisPadding = function (padding) {\n        if (!arguments.length) {\n            return _xAxisPadding;\n        }\n        _xAxisPadding = padding;\n        return _chart;\n    };\n\n    /**\n     * Set or get x axis padding unit for the elastic x axis. The padding unit will determine which unit to\n     * use when applying xAxis padding if elasticX is turned on and if x-axis uses a time dimension;\n     * otherwise it is ignored.\n     *\n     * Padding unit is a string that will be used when the padding is calculated. Available parameters are\n     * the available d3 time intervals; see\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval d3.time.interval}.\n     * @method xAxisPaddingUnit\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [unit='days']\n     * @returns {String|dc.coordinateGridMixin}\n     */\n    _chart.xAxisPaddingUnit = function (unit) {\n        if (!arguments.length) {\n            return _xAxisPaddingUnit;\n        }\n        _xAxisPaddingUnit = unit;\n        return _chart;\n    };\n\n    /**\n     * Returns the number of units displayed on the x axis using the unit measure configured by\n     * {@link dc.coordinateGridMixin#xUnits xUnits}.\n     * @method xUnitCount\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {Number}\n     */\n    _chart.xUnitCount = function () {\n        if (_unitCount === undefined) {\n            var units = _chart.xUnits()(_chart.x().domain()[0], _chart.x().domain()[1], _chart.x().domain());\n\n            if (units instanceof Array) {\n                _unitCount = units.length;\n            } else {\n                _unitCount = units;\n            }\n        }\n\n        return _unitCount;\n    };\n\n    /**\n     * Gets or sets whether the chart should be drawn with a right axis instead of a left axis. When\n     * used with a chart in a composite chart, allows both left and right Y axes to be shown on a\n     * chart.\n     * @method useRightYAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [useRightYAxis=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.useRightYAxis = function (useRightYAxis) {\n        if (!arguments.length) {\n            return _useRightYAxis;\n        }\n        _useRightYAxis = useRightYAxis;\n        return _chart;\n    };\n\n    /**\n     * Returns true if the chart is using ordinal xUnits ({@link dc.units.ordinal dc.units.ordinal}, or false\n     * otherwise. Most charts behave differently with ordinal data and use the result of this method to\n     * trigger the appropriate logic.\n     * @method isOrdinal\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {Boolean}\n     */\n    _chart.isOrdinal = function () {\n        return _chart.xUnits() === dc.units.ordinal;\n    };\n\n    _chart._useOuterPadding = function () {\n        return true;\n    };\n\n    _chart._ordinalXDomain = function () {\n        var groups = _chart._computeOrderedGroups(_chart.data());\n        return groups.map(_chart.keyAccessor());\n    };\n\n    function compareDomains (d1, d2) {\n        return !d1 || !d2 || d1.length !== d2.length ||\n            d1.some(function (elem, i) { return (elem && d2[i]) ? elem.toString() !== d2[i].toString() : elem === d2[i]; });\n    }\n\n    function prepareXAxis (g, render) {\n        if (!_chart.isOrdinal()) {\n            if (_chart.elasticX()) {\n                _x.domain([_chart.xAxisMin(), _chart.xAxisMax()]);\n            }\n        } else { // _chart.isOrdinal()\n            if (_chart.elasticX() || _x.domain().length === 0) {\n                _x.domain(_chart._ordinalXDomain());\n            }\n        }\n\n        // has the domain changed?\n        var xdom = _x.domain();\n        if (render || compareDomains(_lastXDomain, xdom)) {\n            _chart.rescale();\n        }\n        _lastXDomain = xdom;\n\n        // please can't we always use rangeBands for bar charts?\n        if (_chart.isOrdinal()) {\n            _x.rangeBands([0, _chart.xAxisLength()], _rangeBandPadding,\n                          _chart._useOuterPadding() ? _outerRangeBandPadding : 0);\n        } else {\n            _x.range([0, _chart.xAxisLength()]);\n        }\n\n        _xAxis = _xAxis.scale(_chart.x());\n\n        renderVerticalGridLines(g);\n    }\n\n    _chart.renderXAxis = function (g) {\n        var axisXG = g.select('g.x');\n\n        if (axisXG.empty()) {\n            axisXG = g.append('g')\n                .attr('class', 'axis x')\n                .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')');\n        }\n\n        var axisXLab = g.select('text.' + X_AXIS_LABEL_CLASS);\n        if (axisXLab.empty() && _chart.xAxisLabel()) {\n            axisXLab = g.append('text')\n                .attr('class', X_AXIS_LABEL_CLASS)\n                .attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' +\n                      (_chart.height() - _xAxisLabelPadding) + ')')\n                .attr('text-anchor', 'middle');\n        }\n        if (_chart.xAxisLabel() && axisXLab.text() !== _chart.xAxisLabel()) {\n            axisXLab.text(_chart.xAxisLabel());\n        }\n\n        dc.transition(axisXG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')')\n            .call(_xAxis);\n        dc.transition(axisXLab, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' +\n                  (_chart.height() - _xAxisLabelPadding) + ')');\n    };\n\n    function renderVerticalGridLines (g) {\n        var gridLineG = g.select('g.' + VERTICAL_CLASS);\n\n        if (_renderVerticalGridLine) {\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child')\n                    .attr('class', GRID_LINE_CLASS + ' ' + VERTICAL_CLASS)\n                    .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n            }\n\n            var ticks = _xAxis.tickValues() ? _xAxis.tickValues() :\n                    (typeof _x.ticks === 'function' ? _x.ticks(_xAxis.ticks()[0]) : _x.domain());\n\n            var lines = gridLineG.selectAll('line')\n                .data(ticks);\n\n            // enter\n            var linesGEnter = lines.enter()\n                .append('line')\n                .attr('x1', function (d) {\n                    return _x(d);\n                })\n                .attr('y1', _chart._xAxisY() - _chart.margins().top)\n                .attr('x2', function (d) {\n                    return _x(d);\n                })\n                .attr('y2', 0)\n                .attr('opacity', 0);\n            dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', 1);\n\n            // update\n            dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('x1', function (d) {\n                    return _x(d);\n                })\n                .attr('y1', _chart._xAxisY() - _chart.margins().top)\n                .attr('x2', function (d) {\n                    return _x(d);\n                })\n                .attr('y2', 0);\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    }\n\n    _chart._xAxisY = function () {\n        return (_chart.height() - _chart.margins().bottom);\n    };\n\n    _chart.xAxisLength = function () {\n        return _chart.effectiveWidth();\n    };\n\n    /**\n     * Set or get the x axis label. If setting the label, you may optionally include additional padding to\n     * the margin to make room for the label. By default the padded is set to 12 to accomodate the text height.\n     * @method xAxisLabel\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String}\n     */\n    _chart.xAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n            return _xAxisLabel;\n        }\n        _xAxisLabel = labelText;\n        _chart.margins().bottom -= _xAxisLabelPadding;\n        _xAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().bottom += _xAxisLabelPadding;\n        return _chart;\n    };\n\n    _chart._prepareYAxis = function (g) {\n        if (_y === undefined || _chart.elasticY()) {\n            if (_y === undefined) {\n                _y = d3.scale.linear();\n            }\n            var min = _chart.yAxisMin() || 0,\n                max = _chart.yAxisMax() || 0;\n            _y.domain([min, max]).rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _y.range([_chart.yAxisHeight(), 0]);\n        _yAxis = _yAxis.scale(_y);\n\n        if (_useRightYAxis) {\n            _yAxis.orient('right');\n        }\n\n        _chart._renderHorizontalGridLinesForAxis(g, _y, _yAxis);\n    };\n\n    _chart.renderYAxisLabel = function (axisClass, text, rotation, labelXPosition) {\n        labelXPosition = labelXPosition || _yAxisLabelPadding;\n\n        var axisYLab = _chart.g().select('text.' + Y_AXIS_LABEL_CLASS + '.' + axisClass + '-label');\n        var labelYPosition = (_chart.margins().top + _chart.yAxisHeight() / 2);\n        if (axisYLab.empty() && text) {\n            axisYLab = _chart.g().append('text')\n                .attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')')\n                .attr('class', Y_AXIS_LABEL_CLASS + ' ' + axisClass + '-label')\n                .attr('text-anchor', 'middle')\n                .text(text);\n        }\n        if (text && axisYLab.text() !== text) {\n            axisYLab.text(text);\n        }\n        dc.transition(axisYLab, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')');\n    };\n\n    _chart.renderYAxisAt = function (axisClass, axis, position) {\n        var axisYG = _chart.g().select('g.' + axisClass);\n        if (axisYG.empty()) {\n            axisYG = _chart.g().append('g')\n                .attr('class', 'axis ' + axisClass)\n                .attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')');\n        }\n\n        dc.transition(axisYG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')')\n            .call(axis);\n    };\n\n    _chart.renderYAxis = function () {\n        var axisPosition = _useRightYAxis ? (_chart.width() - _chart.margins().right) : _chart._yAxisX();\n        _chart.renderYAxisAt('y', _yAxis, axisPosition);\n        var labelPosition = _useRightYAxis ? (_chart.width() - _yAxisLabelPadding) : _yAxisLabelPadding;\n        var rotation = _useRightYAxis ? 90 : -90;\n        _chart.renderYAxisLabel('y', _chart.yAxisLabel(), rotation, labelPosition);\n    };\n\n    _chart._renderHorizontalGridLinesForAxis = function (g, scale, axis) {\n        var gridLineG = g.select('g.' + HORIZONTAL_CLASS);\n\n        if (_renderHorizontalGridLine) {\n            var ticks = axis.tickValues() ? axis.tickValues() : scale.ticks(axis.ticks()[0]);\n\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child')\n                    .attr('class', GRID_LINE_CLASS + ' ' + HORIZONTAL_CLASS)\n                    .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n            }\n\n            var lines = gridLineG.selectAll('line')\n                .data(ticks);\n\n            // enter\n            var linesGEnter = lines.enter()\n                .append('line')\n                .attr('x1', 1)\n                .attr('y1', function (d) {\n                    return scale(d);\n                })\n                .attr('x2', _chart.xAxisLength())\n                .attr('y2', function (d) {\n                    return scale(d);\n                })\n                .attr('opacity', 0);\n            dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', 1);\n\n            // update\n            dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('x1', 1)\n                .attr('y1', function (d) {\n                    return scale(d);\n                })\n                .attr('x2', _chart.xAxisLength())\n                .attr('y2', function (d) {\n                    return scale(d);\n                });\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    };\n\n    _chart._yAxisX = function () {\n        return _chart.useRightYAxis() ? _chart.width() - _chart.margins().right : _chart.margins().left;\n    };\n\n    /**\n     * Set or get the y axis label. If setting the label, you may optionally include additional padding\n     * to the margin to make room for the label. By default the padding is set to 12 to accommodate the\n     * text height.\n     * @method yAxisLabel\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String|dc.coordinateGridMixin}\n     */\n    _chart.yAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n            return _yAxisLabel;\n        }\n        _yAxisLabel = labelText;\n        _chart.margins().left -= _yAxisLabelPadding;\n        _yAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().left += _yAxisLabelPadding;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y scale. The y scale is typically automatically determined by the chart implementation.\n     * @method y\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|dc.coordinateGridMixin}\n     */\n    _chart.y = function (yScale) {\n        if (!arguments.length) {\n            return _y;\n        }\n        _y = yScale;\n        _chart.rescale();\n        return _chart;\n    };\n\n    /**\n     * Set or get the y axis used by the coordinate grid chart instance. This function is most useful\n     * when y axis customization is required. The y axis in dc.js is simply an instance of a [d3 axis\n     * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis); therefore it supports any\n     * valid d3 axis manipulation.\n     *\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.  Note also that when used as a getter, this function is not chainable: it\n     * returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n     * so attempting to call chart functions after calling `.yAxis()` will fail}.\n     * @method yAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize y axis tick format\n     * chart.yAxis().tickFormat(function(v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.yAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [yAxis=d3.svg.axis().orient('left')]\n     * @returns {d3.svg.axis|dc.coordinateGridMixin}\n     */\n    _chart.yAxis = function (yAxis) {\n        if (!arguments.length) {\n            return _yAxis;\n        }\n        _yAxis = yAxis;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off elastic y axis behavior. If y axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the y axis range whenever a redraw event is triggered.\n     * @method elasticY\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [elasticY=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.elasticY = function (elasticY) {\n        if (!arguments.length) {\n            return _yElasticity;\n        }\n        _yElasticity = elasticY;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off horizontal grid lines.\n     * @method renderHorizontalGridLines\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [renderHorizontalGridLines=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.renderHorizontalGridLines = function (renderHorizontalGridLines) {\n        if (!arguments.length) {\n            return _renderHorizontalGridLine;\n        }\n        _renderHorizontalGridLine = renderHorizontalGridLines;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off vertical grid lines.\n     * @method renderVerticalGridLines\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [renderVerticalGridLines=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.renderVerticalGridLines = function (renderVerticalGridLines) {\n        if (!arguments.length) {\n            return _renderVerticalGridLine;\n        }\n        _renderVerticalGridLine = renderVerticalGridLines;\n        return _chart;\n    };\n\n    /**\n     * Calculates the minimum x value to display in the chart. Includes xAxisPadding if set.\n     * @method xAxisMin\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.xAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.keyAccessor()(e);\n        });\n        return dc.utils.subtract(min, _xAxisPadding, _xAxisPaddingUnit);\n    };\n\n    /**\n     * Calculates the maximum x value to display in the chart. Includes xAxisPadding if set.\n     * @method xAxisMax\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.xAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.keyAccessor()(e);\n        });\n        return dc.utils.add(max, _xAxisPadding, _xAxisPaddingUnit);\n    };\n\n    /**\n     * Calculates the minimum y value to display in the chart. Includes yAxisPadding if set.\n     * @method yAxisMin\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.yAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.valueAccessor()(e);\n        });\n        return dc.utils.subtract(min, _yAxisPadding);\n    };\n\n    /**\n     * Calculates the maximum y value to display in the chart. Includes yAxisPadding if set.\n     * @method yAxisMax\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.yAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.valueAccessor()(e);\n        });\n        return dc.utils.add(max, _yAxisPadding);\n    };\n\n    /**\n     * Set or get y axis padding for the elastic y axis. The padding will be added to the top and\n     * bottom of the y axis if elasticY is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date axes. When padding a date axis, an integer represents number of days being padded\n     * and a percentage string will be treated the same as an integer.\n     * @method yAxisPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number|String} [padding=0]\n     * @returns {Number|dc.coordinateGridMixin}\n     */\n    _chart.yAxisPadding = function (padding) {\n        if (!arguments.length) {\n            return _yAxisPadding;\n        }\n        _yAxisPadding = padding;\n        return _chart;\n    };\n\n    _chart.yAxisHeight = function () {\n        return _chart.effectiveHeight();\n    };\n\n    /**\n     * Set or get the rounding function used to quantize the selection when brushing is enabled.\n     * @method round\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @example\n     * // set x unit round to by month, this will make sure range selection brush will\n     * // select whole months\n     * chart.round(d3.time.month.round);\n     * @param {Function} [round]\n     * @returns {Function|dc.coordinateGridMixin}\n     */\n    _chart.round = function (round) {\n        if (!arguments.length) {\n            return _round;\n        }\n        _round = round;\n        return _chart;\n    };\n\n    _chart._rangeBandPadding = function (_) {\n        if (!arguments.length) {\n            return _rangeBandPadding;\n        }\n        _rangeBandPadding = _;\n        return _chart;\n    };\n\n    _chart._outerRangeBandPadding = function (_) {\n        if (!arguments.length) {\n            return _outerRangeBandPadding;\n        }\n        _outerRangeBandPadding = _;\n        return _chart;\n    };\n\n    dc.override(_chart, 'filter', function (_) {\n        if (!arguments.length) {\n            return _chart._filter();\n        }\n\n        _chart._filter(_);\n\n        if (_) {\n            _chart.brush().extent(_);\n        } else {\n            _chart.brush().clear();\n        }\n\n        return _chart;\n    });\n\n    _chart.brush = function (_) {\n        if (!arguments.length) {\n            return _brush;\n        }\n        _brush = _;\n        return _chart;\n    };\n\n    function brushHeight () {\n        return _chart._xAxisY() - _chart.margins().top;\n    }\n\n    _chart.renderBrush = function (g) {\n        if (_brushOn) {\n            _brush.on('brush', _chart._brushing);\n            _brush.on('brushstart', _chart._disableMouseZoom);\n            _brush.on('brushend', configureMouseZoom);\n\n            var gBrush = g.append('g')\n                .attr('class', 'brush')\n                .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')')\n                .call(_brush.x(_chart.x()));\n            _chart.setBrushY(gBrush, false);\n            _chart.setHandlePaths(gBrush);\n\n            if (_chart.hasFilter()) {\n                _chart.redrawBrush(g, false);\n            }\n        }\n    };\n\n    _chart.setHandlePaths = function (gBrush) {\n        gBrush.selectAll('.resize').append('path').attr('d', _chart.resizeHandlePath);\n    };\n\n    _chart.setBrushY = function (gBrush) {\n        gBrush.selectAll('rect')\n            .attr('height', brushHeight());\n        gBrush.selectAll('.resize path')\n            .attr('d', _chart.resizeHandlePath);\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _brush.extent();\n        if (_chart.round()) {\n            extent[0] = extent.map(_chart.round())[0];\n            extent[1] = extent.map(_chart.round())[1];\n\n            _g.select('.brush')\n                .call(_brush.extent(extent));\n        }\n        return extent;\n    };\n\n    _chart.brushIsEmpty = function (extent) {\n        return _brush.empty() || !extent || extent[1] <= extent[0];\n    };\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n\n        _chart.redrawBrush(_g, false);\n\n        if (_chart.brushIsEmpty(extent)) {\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n        } else {\n            var rangedFilter = dc.filters.RangedFilter(extent[0], extent[1]);\n\n            dc.events.trigger(function () {\n                _chart.replaceFilter(rangedFilter);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n        }\n    };\n\n    _chart.redrawBrush = function (g, doTransition) {\n        if (_brushOn) {\n            if (_chart.filter() && _chart.brush().empty()) {\n                _chart.brush().extent(_chart.filter());\n            }\n\n            var gBrush = dc.optionalTransition(doTransition, _chart.transitionDuration(), _chart.transitionDelay())(g.select('g.brush'));\n            _chart.setBrushY(gBrush);\n            gBrush.call(_chart.brush()\n                      .x(_chart.x())\n                      .extent(_chart.brush().extent()));\n        }\n\n        _chart.fadeDeselectedArea();\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        // do nothing, sub-chart should override this function\n    };\n\n    // borrowed from Crossfilter example\n    _chart.resizeHandlePath = function (d) {\n        var e = +(d === 'e'), x = e ? 1 : -1, y = brushHeight() / 3;\n        return 'M' + (0.5 * x) + ',' + y +\n            'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6) +\n            'V' + (2 * y - 6) +\n            'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y) +\n            'Z' +\n            'M' + (2.5 * x) + ',' + (y + 8) +\n            'V' + (2 * y - 8) +\n            'M' + (4.5 * x) + ',' + (y + 8) +\n            'V' + (2 * y - 8);\n    };\n\n    function getClipPathId () {\n        return _chart.anchorName().replace(/[ .#=\\[\\]\"]/g, '-') + '-clip';\n    }\n\n    /**\n     * Get or set the padding in pixels for the clip path. Once set padding will be applied evenly to\n     * the top, left, right, and bottom when the clip path is generated. If set to zero, the clip area\n     * will be exactly the chart body area minus the margins.\n     * @method clipPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number} [padding=5]\n     * @returns {Number|dc.coordinateGridMixin}\n     */\n    _chart.clipPadding = function (padding) {\n        if (!arguments.length) {\n            return _clipPadding;\n        }\n        _clipPadding = padding;\n        return _chart;\n    };\n\n    function generateClipPath () {\n        var defs = dc.utils.appendOrSelect(_parent, 'defs');\n        // cannot select <clippath> elements; bug in WebKit, must select by id\n        // https://groups.google.com/forum/#!topic/d3-js/6EpAzQ2gU9I\n        var id = getClipPathId();\n        var chartBodyClip = dc.utils.appendOrSelect(defs, '#' + id, 'clipPath').attr('id', id);\n\n        var padding = _clipPadding * 2;\n\n        dc.utils.appendOrSelect(chartBodyClip, 'rect')\n            .attr('width', _chart.xAxisLength() + padding)\n            .attr('height', _chart.yAxisHeight() + padding)\n            .attr('transform', 'translate(-' + _clipPadding + ', -' + _clipPadding + ')');\n    }\n\n    _chart._preprocessData = function () {};\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chart._preprocessData();\n\n        _chart._generateG();\n        generateClipPath();\n\n        drawChart(true);\n\n        configureMouseZoom();\n\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        _chart._preprocessData();\n\n        drawChart(false);\n        generateClipPath();\n\n        return _chart;\n    };\n\n    function drawChart (render) {\n        if (_chart.isOrdinal()) {\n            _brushOn = false;\n        }\n\n        prepareXAxis(_chart.g(), render);\n        _chart._prepareYAxis(_chart.g());\n\n        _chart.plotData();\n\n        if (_chart.elasticX() || _resizing || render) {\n            _chart.renderXAxis(_chart.g());\n        }\n\n        if (_chart.elasticY() || _resizing || render) {\n            _chart.renderYAxis(_chart.g());\n        }\n\n        if (render) {\n            _chart.renderBrush(_chart.g(), false);\n        } else {\n            _chart.redrawBrush(_chart.g(), _resizing);\n        }\n        _chart.fadeDeselectedArea();\n        _resizing = false;\n    }\n\n    function configureMouseZoom () {\n        if (_mouseZoomable) {\n            _chart._enableMouseZoom();\n        } else if (_hasBeenMouseZoomable) {\n            _chart._disableMouseZoom();\n        }\n    }\n\n    _chart._enableMouseZoom = function () {\n        _hasBeenMouseZoomable = true;\n        _zoom.x(_chart.x())\n            .scaleExtent(_zoomScale)\n            .size([_chart.width(), _chart.height()])\n            .duration(_chart.transitionDuration());\n        _chart.root().call(_zoom);\n    };\n\n    _chart._disableMouseZoom = function () {\n        _chart.root().call(_nullZoom);\n    };\n\n    function zoomHandler () {\n        _refocused = true;\n        if (_zoomOutRestrict) {\n            var constraint = _xOriginalDomain;\n            if (_rangeChart) {\n                constraint = intersectExtents(constraint, _rangeChart.x().domain());\n            }\n            var constrained = constrainExtent(_chart.x().domain(), constraint);\n            if (constrained) {\n                _chart.x().domain(constrained);\n            }\n        }\n\n        var domain = _chart.x().domain();\n        var domFilter = dc.filters.RangedFilter(domain[0], domain[1]);\n\n        _chart.replaceFilter(domFilter);\n        _chart.rescale();\n        _chart.redraw();\n\n        if (_rangeChart && !rangesEqual(_chart.filter(), _rangeChart.filter())) {\n            dc.events.trigger(function () {\n                _rangeChart.replaceFilter(domFilter);\n                _rangeChart.redraw();\n            });\n        }\n\n        _chart._invokeZoomedListener();\n\n        dc.events.trigger(function () {\n            _chart.redrawGroup();\n        }, dc.constants.EVENT_DELAY);\n\n        _refocused = !rangesEqual(domain, _xOriginalDomain);\n    }\n\n    function intersectExtents (ext1, ext2) {\n        if (ext1[0] > ext2[1] || ext1[1] < ext2[0]) {\n            console.warn('could not intersect extents');\n        }\n        return [Math.max(ext1[0], ext2[0]), Math.min(ext1[1], ext2[1])];\n    }\n\n    function constrainExtent (extent, constraint) {\n        var size = extent[1] - extent[0];\n        if (extent[0] < constraint[0]) {\n            return [constraint[0], Math.min(constraint[1], dc.utils.add(constraint[0], size, 'millis'))];\n        } else if (extent[1] > constraint[1]) {\n            return [Math.max(constraint[0], dc.utils.subtract(constraint[1], size, 'millis')), constraint[1]];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Zoom this chart to focus on the given range. The given range should be an array containing only\n     * 2 elements (`[start, end]`) defining a range in the x domain. If the range is not given or set\n     * to null, then the zoom will be reset. _For focus to work elasticX has to be turned off;\n     * otherwise focus will be ignored.\n     * @method focus\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @example\n     * chart.on('renderlet', function(chart) {\n     *     // smooth the rendering through event throttling\n     *     dc.events.trigger(function(){\n     *          // focus some other chart to the range selected by user on this chart\n     *          someOtherChart.focus(chart.filter());\n     *     });\n     * })\n     * @param {Array<Number>} [range]\n     */\n    _chart.focus = function (range) {\n        if (hasRangeSelected(range)) {\n            _chart.x().domain(range);\n        } else {\n            _chart.x().domain(_xOriginalDomain);\n        }\n\n        _zoom.x(_chart.x());\n        zoomHandler();\n    };\n\n    _chart.refocused = function () {\n        return _refocused;\n    };\n\n    _chart.focusChart = function (c) {\n        if (!arguments.length) {\n            return _focusChart;\n        }\n        _focusChart = c;\n        _chart.on('filtered', function (chart) {\n            if (!chart.filter()) {\n                dc.events.trigger(function () {\n                    _focusChart.x().domain(_focusChart.xOriginalDomain());\n                });\n            } else if (!rangesEqual(chart.filter(), _focusChart.filter())) {\n                dc.events.trigger(function () {\n                    _focusChart.focus(chart.filter());\n                });\n            }\n        });\n        return _chart;\n    };\n\n    function rangesEqual (range1, range2) {\n        if (!range1 && !range2) {\n            return true;\n        } else if (!range1 || !range2) {\n            return false;\n        } else if (range1.length === 0 && range2.length === 0) {\n            return true;\n        } else if (range1[0].valueOf() === range2[0].valueOf() &&\n            range1[1].valueOf() === range2[1].valueOf()) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Turn on/off the brush-based range filter. When brushing is on then user can drag the mouse\n     * across a chart with a quantitative scale to perform range filtering based on the extent of the\n     * brush, or click on the bars of an ordinal bar chart or slices of a pie chart to filter and\n     * un-filter them. However turning on the brush filter will disable other interactive elements on\n     * the chart such as highlighting, tool tips, and reference lines. Zooming will still be possible\n     * if enabled, but only via scrolling (panning will be disabled.)\n     * @method brushOn\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [brushOn=true]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.brushOn = function (brushOn) {\n        if (!arguments.length) {\n            return _brushOn;\n        }\n        _brushOn = brushOn;\n        return _chart;\n    };\n\n    function hasRangeSelected (range) {\n        return range instanceof Array && range.length > 1;\n    }\n\n    return _chart;\n};\n\n/**\n * Stack Mixin is an mixin that provides cross-chart support of stackability using d3.layout.stack.\n * @name stackMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.stackMixin}\n */\ndc.stackMixin = function (_chart) {\n\n    function prepareValues (layer, layerIdx) {\n        var valAccessor = layer.accessor || _chart.valueAccessor();\n        layer.name = String(layer.name || layerIdx);\n        layer.values = layer.group.all().map(function (d, i) {\n            return {\n                x: _chart.keyAccessor()(d, i),\n                y: layer.hidden ? null : valAccessor(d, i),\n                data: d,\n                layer: layer.name,\n                hidden: layer.hidden\n            };\n        });\n\n        layer.values = layer.values.filter(domainFilter());\n        return layer.values;\n    }\n\n    var _stackLayout = d3.layout.stack()\n        .values(prepareValues);\n\n    var _stack = [];\n    var _titles = {};\n\n    var _hidableStacks = false;\n    var _evadeDomainFilter = false;\n\n    function domainFilter () {\n        if (!_chart.x() || _evadeDomainFilter) {\n            return d3.functor(true);\n        }\n        var xDomain = _chart.x().domain();\n        if (_chart.isOrdinal()) {\n            // TODO #416\n            //var domainSet = d3.set(xDomain);\n            return function () {\n                return true; //domainSet.has(p.x);\n            };\n        }\n        if (_chart.elasticX()) {\n            return function () { return true; };\n        }\n        return function (p) {\n            //return true;\n            return p.x >= xDomain[0] && p.x <= xDomain[xDomain.length - 1];\n        };\n    }\n\n    /**\n     * Stack a new crossfilter group onto this chart with an optional custom value accessor. All stacks\n     * in the same chart will share the same key accessor and therefore the same set of keys.\n     *\n     * For example, in a stacked bar chart, the bars of each stack will be positioned using the same set\n     * of keys on the x axis, while stacked vertically. If name is specified then it will be used to\n     * generate the legend label.\n     * @method stack\n     * @memberof dc.stackMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * // stack group using default accessor\n     * chart.stack(valueSumGroup)\n     * // stack group using custom accessor\n     * .stack(avgByDayGroup, function(d){return d.value.avgByDay;});\n     * @param {crossfilter.group} group\n     * @param {String} [name]\n     * @param {Function} [accessor]\n     * @returns {Array<{group: crossfilter.group, name: String, accessor: Function}>|dc.stackMixin}\n     */\n    _chart.stack = function (group, name, accessor) {\n        if (!arguments.length) {\n            return _stack;\n        }\n\n        if (arguments.length <= 2) {\n            accessor = name;\n        }\n\n        var layer = {group: group};\n        if (typeof name === 'string') {\n            layer.name = name;\n        }\n        if (typeof accessor === 'function') {\n            layer.accessor = accessor;\n        }\n        _stack.push(layer);\n\n        return _chart;\n    };\n\n    dc.override(_chart, 'group', function (g, n, f) {\n        if (!arguments.length) {\n            return _chart._group();\n        }\n        _stack = [];\n        _titles = {};\n        _chart.stack(g, n);\n        if (f) {\n            _chart.valueAccessor(f);\n        }\n        return _chart._group(g, n);\n    });\n\n    /**\n     * Allow named stacks to be hidden or shown by clicking on legend items.\n     * This does not affect the behavior of hideStack or showStack.\n     * @method hidableStacks\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {Boolean} [hidableStacks=false]\n     * @returns {Boolean|dc.stackMixin}\n     */\n    _chart.hidableStacks = function (hidableStacks) {\n        if (!arguments.length) {\n            return _hidableStacks;\n        }\n        _hidableStacks = hidableStacks;\n        return _chart;\n    };\n\n    function findLayerByName (n) {\n        var i = _stack.map(dc.pluck('name')).indexOf(n);\n        return _stack[i];\n    }\n\n    /**\n     * Hide all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @method hideStack\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {String} stackName\n     * @returns {dc.stackMixin}\n     */\n    _chart.hideStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = true;\n        }\n        return _chart;\n    };\n\n    /**\n     * Show all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @method showStack\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {String} stackName\n     * @returns {dc.stackMixin}\n     */\n    _chart.showStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = false;\n        }\n        return _chart;\n    };\n\n    _chart.getValueAccessorByIndex = function (index) {\n        return _stack[index].accessor || _chart.valueAccessor();\n    };\n\n    _chart.yAxisMin = function () {\n        var min = d3.min(flattenStack(), function (p) {\n            return (p.y < 0) ? (p.y + p.y0) : p.y0;\n        });\n\n        return dc.utils.subtract(min, _chart.yAxisPadding());\n\n    };\n\n    _chart.yAxisMax = function () {\n        var max = d3.max(flattenStack(), function (p) {\n            return (p.y > 0) ? (p.y + p.y0) : p.y0;\n        });\n\n        return dc.utils.add(max, _chart.yAxisPadding());\n    };\n\n    function flattenStack () {\n        var valueses = _chart.data().map(function (layer) { return layer.values; });\n        return Array.prototype.concat.apply([], valueses);\n    }\n\n    _chart.xAxisMin = function () {\n        var min = d3.min(flattenStack(), dc.pluck('x'));\n        return dc.utils.subtract(min, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    };\n\n    _chart.xAxisMax = function () {\n        var max = d3.max(flattenStack(), dc.pluck('x'));\n        return dc.utils.add(max, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    };\n\n    /**\n     * Set or get the title function. Chart class will use this function to render svg title (usually interpreted by\n     * browser as tooltips) for each child element in the chart, i.e. a slice in a pie chart or a bubble in a bubble chart.\n     * Almost every chart supports title function however in grid coordinate chart you need to turn off brush in order to\n     * use title otherwise the brush layer will block tooltip trigger.\n     *\n     * If the first argument is a stack name, the title function will get or set the title for that stack. If stackName\n     * is not provided, the first stack is implied.\n     * @method title\n     * @memberof dc.stackMixin\n     * @instance\n     * @example\n     * // set a title function on 'first stack'\n     * chart.title('first stack', function(d) { return d.key + ': ' + d.value; });\n     * // get a title function from 'second stack'\n     * var secondTitleFunction = chart.title('second stack');\n     * @param {String} [stackName]\n     * @param {Function} [titleAccessor]\n     * @returns {String|dc.stackMixin}\n     */\n    dc.override(_chart, 'title', function (stackName, titleAccessor) {\n        if (!stackName) {\n            return _chart._title();\n        }\n\n        if (typeof stackName === 'function') {\n            return _chart._title(stackName);\n        }\n        if (stackName === _chart._groupName && typeof titleAccessor === 'function') {\n            return _chart._title(titleAccessor);\n        }\n\n        if (typeof titleAccessor !== 'function') {\n            return _titles[stackName] || _chart._title();\n        }\n\n        _titles[stackName] = titleAccessor;\n\n        return _chart;\n    });\n\n    /**\n     * Gets or sets the stack layout algorithm, which computes a baseline for each stack and\n     * propagates it to the next.\n     * @method stackLayout\n     * @memberof dc.stackMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Stack-Layout.md d3.layout.stack}\n     * @param {Function} [stack=d3.layout.stack]\n     * @returns {Function|dc.stackMixin}\n     */\n    _chart.stackLayout = function (stack) {\n        if (!arguments.length) {\n            return _stackLayout;\n        }\n        _stackLayout = stack;\n        if (_stackLayout.values() === d3.layout.stack().values()) {\n            _stackLayout.values(prepareValues);\n        }\n        return _chart;\n    };\n\n    /**\n     * Since dc.js 2.0, there has been {@link https://github.com/dc-js/dc.js/issues/949 an issue}\n     * where points are filtered to the current domain. While this is a useful optimization, it is\n     * incorrectly implemented: the next point outside the domain is required in order to draw lines\n     * that are clipped to the bounds, as well as bars that are partly clipped.\n     *\n     * A fix will be included in dc.js 2.1.x, but a workaround is needed for dc.js 2.0 and until\n     * that fix is published, so set this flag to skip any filtering of points.\n     *\n     * Once the bug is fixed, this flag will have no effect, and it will be deprecated.\n     * @method evadeDomainFilter\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {Boolean} [evadeDomainFilter=false]\n     * @returns {Boolean|dc.stackMixin}\n     */\n    _chart.evadeDomainFilter = function (evadeDomainFilter) {\n        if (!arguments.length) {\n            return _evadeDomainFilter;\n        }\n        _evadeDomainFilter = evadeDomainFilter;\n        return _chart;\n    };\n\n    function visability (l) {\n        return !l.hidden;\n    }\n\n    _chart.data(function () {\n        var layers = _stack.filter(visability);\n        return layers.length ? _chart.stackLayout()(layers) : [];\n    });\n\n    _chart._ordinalXDomain = function () {\n        var flat = flattenStack().map(dc.pluck('data'));\n        var ordered = _chart._computeOrderedGroups(flat);\n        return ordered.map(_chart.keyAccessor());\n    };\n\n    _chart.colorAccessor(function (d) {\n        var layer = this.layer || this.name || d.name || d.layer;\n        return layer;\n    });\n\n    _chart.legendables = function () {\n        return _stack.map(function (layer, i) {\n            return {\n                chart: _chart,\n                name: layer.name,\n                hidden: layer.hidden || false,\n                color: _chart.getColor.call(layer, layer.values, i)\n            };\n        });\n    };\n\n    _chart.isLegendableHidden = function (d) {\n        var layer = findLayerByName(d.name);\n        return layer ? layer.hidden : false;\n    };\n\n    _chart.legendToggle = function (d) {\n        if (_hidableStacks) {\n            if (_chart.isLegendableHidden(d)) {\n                _chart.showStack(d.name);\n            } else {\n                _chart.hideStack(d.name);\n            }\n            //_chart.redraw();\n            _chart.renderGroup();\n        }\n    };\n\n    return _chart;\n};\n\n/**\n * Cap is a mixin that groups small data elements below a _cap_ into an *others* grouping for both the\n * Row and Pie Charts.\n *\n * The top ordered elements in the group up to the cap amount will be kept in the chart, and the rest\n * will be replaced with an *others* element, with value equal to the sum of the replaced values. The\n * keys of the elements below the cap limit are recorded in order to filter by those keys when the\n * others* element is clicked.\n * @name capMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.capMixin}\n */\ndc.capMixin = function (_chart) {\n    var _cap = Infinity, _takeFront = true;\n    var _othersLabel = 'Others';\n\n    // emulate old group.top(N) ordering\n    _chart.ordering(function (kv) {\n        return -kv.value;\n    });\n\n    var _othersGrouper = function (topItems, restItems) {\n        var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n            restKeys = restItems.map(_chart.keyAccessor());\n        if (restItemsSum > 0) {\n            return topItems.concat([{\n                others: restKeys,\n                key: _chart.othersLabel(),\n                value: restItemsSum\n            }]);\n        }\n        return topItems;\n    };\n\n    _chart.cappedKeyAccessor = function (d, i) {\n        if (d.others) {\n            return d.key;\n        }\n        return _chart.keyAccessor()(d, i);\n    };\n\n    _chart.cappedValueAccessor = function (d, i) {\n        if (d.others) {\n            return d.value;\n        }\n        return _chart.valueAccessor()(d, i);\n    };\n\n    // return N \"top\" groups, where N is the cap, sorted by baseMixin.ordering\n    // whether top means front or back depends on takeFront\n    _chart.data(function (group) {\n        if (_cap === Infinity) {\n            return _chart._computeOrderedGroups(group.all());\n        } else {\n            var items = group.all(), rest;\n            items = _chart._computeOrderedGroups(items); // sort by baseMixin.ordering\n\n            if (_cap) {\n                if (_takeFront) {\n                    rest = items.slice(_cap);\n                    items = items.slice(0, _cap);\n                } else {\n                    var start = Math.max(0, items.length - _cap);\n                    rest = items.slice(0, start);\n                    items = items.slice(start);\n                }\n            }\n\n            if (_othersGrouper) {\n                return _othersGrouper(items, rest);\n            }\n            return items;\n        }\n    });\n\n    /**\n     * Get or set the count of elements to that will be included in the cap. If there is an\n     * {@link dc.capMixin#othersGrouper othersGrouper}, any further elements will be combined in an\n     * extra element with its name determined by {@link dc.capMixin#othersLabel othersLabel}.\n     *\n     * As of dc.js 2.1 and onward, the capped charts use\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all()}\n     * and {@link dc.baseMixin#ordering baseMixin.ordering()} to determine the order of\n     * elements. Then `cap` and {@link dc.capMixin#takeFront takeFront} determine how many elements\n     * to keep, from which end of the resulting array.\n     *\n     * **Migration note:** Up through dc.js 2.0.*, capping used\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_top group.top(N)},\n     * which selects the largest items according to\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_order group.order()}.\n     * The chart then sorted the items according to {@link dc.baseMixin#ordering baseMixin.ordering()}.\n     * So the two values essentially had to agree, but if the `group.order()` was incorrect (it's\n     * easy to forget about), the wrong rows or slices would be displayed, in the correct order.\n     *\n     * If your chart previously relied on `group.order()`, use `chart.ordering()` instead. As of\n     * 2.1.5, the ordering defaults to sorting from greatest to least like `group.top(N)` did.\n     *\n     * If you want to cap by one ordering but sort by another, please\n     * [file an issue](https://github.com/dc-js/dc.js/issues/new) - it's still possible but we'll\n     * need to work up an example.\n     * @method cap\n     * @memberof dc.capMixin\n     * @instance\n     * @param {Number} [count=Infinity]\n     * @returns {Number|dc.capMixin}\n     */\n    _chart.cap = function (count) {\n        if (!arguments.length) {\n            return _cap;\n        }\n        _cap = count;\n        return _chart;\n    };\n\n    /**\n     * Get or set the direction of capping. If set, the chart takes the first\n     * {@link dc.capMixin#cap cap} elements from the sorted array of elements; otherwise\n     * it takes the last `cap` elements.\n     * @method takeFront\n     * @memberof dc.capMixin\n     * @instance\n     * @param {Boolean} [takeFront=true]\n     * @returns {Boolean|dc.capMixin}\n     */\n    _chart.takeFront = function (takeFront) {\n        if (!arguments.length) {\n            return _takeFront;\n        }\n        _takeFront = takeFront;\n        return _chart;\n    };\n\n    /**\n     * Get or set the label for *Others* slice when slices cap is specified.\n     * @method othersLabel\n     * @memberof dc.capMixin\n     * @instance\n     * @param {String} [label=\"Others\"]\n     * @returns {String|dc.capMixin}\n     */\n    _chart.othersLabel = function (label) {\n        if (!arguments.length) {\n            return _othersLabel;\n        }\n        _othersLabel = label;\n        return _chart;\n    };\n\n    /**\n     * Get or set the grouper function that will perform the insertion of data for the *Others* slice\n     * if the slices cap is specified. If set to a falsy value, no others will be added.\n     *\n     * The grouper function takes an array of included (\"top\") items, and an array of the rest of\n     * the items. By default the grouper function computes the sum of the rest.\n     * @method othersGrouper\n     * @memberof dc.capMixin\n     * @instance\n     * @example\n     * // Do not show others\n     * chart.othersGrouper(null);\n     * // Default others grouper\n     * chart.othersGrouper(function (topItems, restItems) {\n     *     var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n     *         restKeys = restItems.map(_chart.keyAccessor());\n     *     if (restItemsSum > 0) {\n     *         return topItems.concat([{\n     *             others: restKeys,\n     *             key: _chart.othersLabel(),\n     *             value: restItemsSum\n     *         }]);\n     *     }\n     *     return topItems;\n     * });\n     * @param {Function} [grouperFunction]\n     * @returns {Function|dc.capMixin}\n     */\n    _chart.othersGrouper = function (grouperFunction) {\n        if (!arguments.length) {\n            return _othersGrouper;\n        }\n        _othersGrouper = grouperFunction;\n        return _chart;\n    };\n\n    dc.override(_chart, 'onClick', function (d) {\n        if (d.others) {\n            _chart.filter([d.others]);\n        }\n        _chart._onClick(d);\n    });\n\n    return _chart;\n};\n\n/**\n * This Mixin provides reusable functionalities for any chart that needs to visualize data using bubbles.\n * @name bubbleMixin\n * @memberof dc\n * @mixin\n * @mixes dc.colorMixin\n * @param {Object} _chart\n * @returns {dc.bubbleMixin}\n */\ndc.bubbleMixin = function (_chart) {\n    var _maxBubbleRelativeSize = 0.3;\n    var _minRadiusWithLabel = 10;\n    var _sortBubbleSize = false;\n    var _elasticRadius = false;\n\n    _chart.BUBBLE_NODE_CLASS = 'node';\n    _chart.BUBBLE_CLASS = 'bubble';\n    _chart.MIN_RADIUS = 10;\n\n    _chart = dc.colorMixin(_chart);\n\n    _chart.renderLabel(true);\n\n    _chart.data(function (group) {\n        var data = group.all();\n        if (_sortBubbleSize) {\n            // sort descending so smaller bubbles are on top\n            var radiusAccessor = _chart.radiusValueAccessor();\n            data.sort(function (a, b) { return d3.descending(radiusAccessor(a), radiusAccessor(b)); });\n        }\n        return data;\n    });\n\n    var _r = d3.scale.linear().domain([0, 100]);\n\n    var _rValueAccessor = function (d) {\n        return d.r;\n    };\n\n    /**\n     * Get or set the bubble radius scale. By default the bubble chart uses\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md#linear d3.scale.linear().domain([0, 100])}\n     * as its radius scale.\n     * @method r\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [bubbleRadiusScale=d3.scale.linear().domain([0, 100])]\n     * @returns {d3.scale|dc.bubbleMixin}\n     */\n    _chart.r = function (bubbleRadiusScale) {\n        if (!arguments.length) {\n            return _r;\n        }\n        _r = bubbleRadiusScale;\n        return _chart;\n    };\n\n    /**\n     * Turn on or off the elastic bubble radius feature, or return the value of the flag. If this\n     * feature is turned on, then bubble radii will be automatically rescaled to fit the chart better.\n     * @method elasticRadius\n     * @memberof dc.bubbleChart\n     * @instance\n     * @param {Boolean} [elasticRadius=false]\n     * @returns {Boolean|dc.bubbleChart}\n     */\n    _chart.elasticRadius = function (elasticRadius) {\n        if (!arguments.length) {\n            return _elasticRadius;\n        }\n        _elasticRadius = elasticRadius;\n        return _chart;\n    };\n\n    _chart.calculateRadiusDomain = function () {\n        if (_elasticRadius) {\n            _chart.r().domain([_chart.rMin(), _chart.rMax()]);\n        }\n    };\n\n    /**\n     * Get or set the radius value accessor function. If set, the radius value accessor function will\n     * be used to retrieve a data value for each bubble. The data retrieved then will be mapped using\n     * the r scale to the actual bubble radius. This allows you to encode a data dimension using bubble\n     * size.\n     * @method radiusValueAccessor\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Function} [radiusValueAccessor]\n     * @returns {Function|dc.bubbleMixin}\n     */\n    _chart.radiusValueAccessor = function (radiusValueAccessor) {\n        if (!arguments.length) {\n            return _rValueAccessor;\n        }\n        _rValueAccessor = radiusValueAccessor;\n        return _chart;\n    };\n\n    _chart.rMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.radiusValueAccessor()(e);\n        });\n        return min;\n    };\n\n    _chart.rMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.radiusValueAccessor()(e);\n        });\n        return max;\n    };\n\n    _chart.bubbleR = function (d) {\n        var value = _chart.radiusValueAccessor()(d);\n        var r = _chart.r()(value);\n        if (isNaN(r) || value <= 0) {\n            r = 0;\n        }\n        return r;\n    };\n\n    var labelFunction = function (d) {\n        return _chart.label()(d);\n    };\n\n    var shouldLabel = function (d) {\n        return (_chart.bubbleR(d) > _minRadiusWithLabel);\n    };\n\n    var labelOpacity = function (d) {\n        return shouldLabel(d) ? 1 : 0;\n    };\n\n    var labelPointerEvent = function (d) {\n        return shouldLabel(d) ? 'all' : 'none';\n    };\n\n    _chart._doRenderLabel = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n            var label = bubbleGEnter.select('text');\n\n            if (label.empty()) {\n                label = bubbleGEnter.append('text')\n                    .attr('text-anchor', 'middle')\n                    .attr('dy', '.3em')\n                    .on('click', _chart.onClick);\n            }\n\n            label\n                .attr('opacity', 0)\n                .attr('pointer-events', labelPointerEvent)\n                .text(labelFunction);\n            dc.transition(label, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', labelOpacity);\n        }\n    };\n\n    _chart.doUpdateLabels = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n            var labels = bubbleGEnter.select('text')\n                .attr('pointer-events', labelPointerEvent)\n                .text(labelFunction);\n            dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', labelOpacity);\n        }\n    };\n\n    var titleFunction = function (d) {\n        return _chart.title()(d);\n    };\n\n    _chart._doRenderTitles = function (g) {\n        if (_chart.renderTitle()) {\n            var title = g.select('title');\n\n            if (title.empty()) {\n                g.append('title').text(titleFunction);\n            }\n        }\n    };\n\n    _chart.doUpdateTitles = function (g) {\n        if (_chart.renderTitle()) {\n            g.select('title').text(titleFunction);\n        }\n    };\n\n    /**\n     * Turn on or off the bubble sorting feature, or return the value of the flag. If enabled,\n     * bubbles will be sorted by their radius, with smaller bubbles in front.\n     * @method sortBubbleSize\n     * @memberof dc.bubbleChart\n     * @instance\n     * @param {Boolean} [sortBubbleSize=false]\n     * @returns {Boolean|dc.bubbleChart}\n     */\n    _chart.sortBubbleSize = function (sortBubbleSize) {\n        if (!arguments.length) {\n            return _sortBubbleSize;\n        }\n        _sortBubbleSize = sortBubbleSize;\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimum radius. This will be used to initialize the radius scale's range.\n     * @method minRadius\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [radius=10]\n     * @returns {Number|dc.bubbleMixin}\n     */\n    _chart.minRadius = function (radius) {\n        if (!arguments.length) {\n            return _chart.MIN_RADIUS;\n        }\n        _chart.MIN_RADIUS = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimum radius for label rendering. If a bubble's radius is less than this value\n     * then no label will be rendered.\n     * @method minRadiusWithLabel\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [radius=10]\n     * @returns {Number|dc.bubbleMixin}\n     */\n\n    _chart.minRadiusWithLabel = function (radius) {\n        if (!arguments.length) {\n            return _minRadiusWithLabel;\n        }\n        _minRadiusWithLabel = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the maximum relative size of a bubble to the length of x axis. This value is useful\n     * when the difference in radius between bubbles is too great.\n     * @method maxBubbleRelativeSize\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [relativeSize=0.3]\n     * @returns {Number|dc.bubbleMixin}\n     */\n    _chart.maxBubbleRelativeSize = function (relativeSize) {\n        if (!arguments.length) {\n            return _maxBubbleRelativeSize;\n        }\n        _maxBubbleRelativeSize = relativeSize;\n        return _chart;\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function (d) {\n                if (_chart.isSelectedNode(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n    };\n\n    _chart.onClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    return _chart;\n};\n\n/**\n * The pie chart implementation is usually used to visualize a small categorical distribution.  The pie\n * chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each\n * slice relative to the sum of all values. Slices are ordered by {@link dc.baseMixin#ordering ordering}\n * which defaults to sorting by key.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class pieChart\n * @memberof dc\n * @mixes dc.capMixin\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a pie chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.pieChart('#chart-container1');\n * // create a pie chart under #chart-container2 element using chart group A\n * var chart2 = dc.pieChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.pieChart}\n */\ndc.pieChart = function (parent, chartGroup) {\n    var DEFAULT_MIN_ANGLE_FOR_LABEL = 0.5;\n\n    var _sliceCssClass = 'pie-slice';\n    var _labelCssClass = 'pie-label';\n    var _sliceGroupCssClass = 'pie-slice-group';\n    var _labelGroupCssClass = 'pie-label-group';\n    var _emptyCssClass = 'empty-chart';\n    var _emptyTitle = 'empty';\n\n    var _radius,\n        _givenRadius, // specified radius, if any\n        _innerRadius = 0,\n        _externalRadiusPadding = 0;\n\n    var _g;\n    var _cx;\n    var _cy;\n    var _minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL;\n    var _externalLabelRadius;\n    var _drawPaths = false;\n    var _chart = dc.capMixin(dc.colorMixin(dc.baseMixin({})));\n\n    _chart.colorAccessor(_chart.cappedKeyAccessor);\n\n    _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n    });\n\n    /**\n     * Get or set the maximum number of slices the pie chart will generate. The top slices are determined by\n     * value from high to low. Other slices exeeding the cap will be rolled up into one single *Others* slice.\n     * @method slicesCap\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cap]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.slicesCap = _chart.cap;\n\n    _chart.label(_chart.cappedKeyAccessor);\n    _chart.renderLabel(true);\n\n    _chart.transitionDuration(350);\n    _chart.transitionDelay(0);\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg()\n            .append('g')\n            .attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n\n        _g.append('g').attr('class', _sliceGroupCssClass);\n        _g.append('g').attr('class', _labelGroupCssClass);\n\n        drawChart();\n\n        return _chart;\n    };\n\n    function drawChart () {\n        // set radius from chart size if none given, or if given radius is too large\n        var maxRadius =  d3.min([_chart.width(), _chart.height()]) / 2;\n        _radius = _givenRadius && _givenRadius < maxRadius ? _givenRadius : maxRadius;\n\n        var arc = buildArcs();\n\n        var pie = pieLayout();\n        var pieData;\n        // if we have data...\n        if (d3.sum(_chart.data(), _chart.valueAccessor())) {\n            pieData = pie(_chart.data());\n            _g.classed(_emptyCssClass, false);\n        } else {\n            // otherwise we'd be getting NaNs, so override\n            // note: abuse others for its ignoring the value accessor\n            pieData = pie([{key: _emptyTitle, value: 1, others: [_emptyTitle]}]);\n            _g.classed(_emptyCssClass, true);\n        }\n\n        if (_g) {\n            var slices = _g.select('g.' + _sliceGroupCssClass)\n                .selectAll('g.' + _sliceCssClass)\n                .data(pieData);\n\n            var labels = _g.select('g.' + _labelGroupCssClass)\n                .selectAll('text.' + _labelCssClass)\n                .data(pieData);\n\n            createElements(slices, labels, arc, pieData);\n\n            updateElements(pieData, arc);\n\n            removeElements(slices, labels);\n\n            highlightFilter();\n\n            dc.transition(_g, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n        }\n    }\n\n    function createElements (slices, labels, arc, pieData) {\n        var slicesEnter = createSliceNodes(slices);\n\n        createSlicePath(slicesEnter, arc);\n\n        createTitles(slicesEnter);\n\n        createLabels(labels, pieData, arc);\n    }\n\n    function createSliceNodes (slices) {\n        var slicesEnter = slices\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return _sliceCssClass + ' _' + i;\n            });\n        return slicesEnter;\n    }\n\n    function createSlicePath (slicesEnter, arc) {\n        var slicePath = slicesEnter.append('path')\n            .attr('fill', fill)\n            .on('click', onClick)\n            .attr('d', function (d, i) {\n                return safeArc(d, i, arc);\n            });\n\n        var transition = dc.transition(slicePath, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenPie);\n        }\n    }\n\n    function createTitles (slicesEnter) {\n        if (_chart.renderTitle()) {\n            slicesEnter.append('title').text(function (d) {\n                return _chart.title()(d.data);\n            });\n        }\n    }\n\n    _chart._applyLabelText = function (labels) {\n        labels\n            .text(function (d) {\n                var data = d.data;\n                if ((sliceHasNoData(data) || sliceTooSmall(d)) && !isSelectedSlice(d)) {\n                    return '';\n                }\n                return _chart.label()(d.data);\n            });\n    };\n\n    function positionLabels (labels, arc) {\n        _chart._applyLabelText(labels);\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', function (d) {\n                return labelPosition(d, arc);\n            })\n            .attr('text-anchor', 'middle');\n    }\n\n    function highlightSlice (i, whether) {\n        _chart.select('g.pie-slice._' + i)\n            .classed('highlight', whether);\n    }\n\n    function createLabels (labels, pieData, arc) {\n        if (_chart.renderLabel()) {\n            var labelsEnter = labels\n                .enter()\n                .append('text')\n                .attr('class', function (d, i) {\n                    var classes = _sliceCssClass + ' ' + _labelCssClass + ' _' + i;\n                    if (_externalLabelRadius) {\n                        classes += ' external';\n                    }\n                    return classes;\n                })\n                .on('click', onClick)\n                .on('mouseover', function (d, i) {\n                    highlightSlice(i, true);\n                })\n                .on('mouseout', function (d, i) {\n                    highlightSlice(i, false);\n                });\n            positionLabels(labelsEnter, arc);\n            if (_externalLabelRadius && _drawPaths) {\n                updateLabelPaths(pieData, arc);\n            }\n        }\n    }\n\n    function updateLabelPaths (pieData, arc) {\n        var polyline = _g.selectAll('polyline.' + _sliceCssClass)\n                .data(pieData);\n\n        polyline\n                .enter()\n                .append('polyline')\n                .attr('class', function (d, i) {\n                    return 'pie-path _' + i + ' ' + _sliceCssClass;\n                })\n                .on('click', onClick)\n                .on('mouseover', function (d, i) {\n                    highlightSlice(i, true);\n                })\n                .on('mouseout', function (d, i) {\n                    highlightSlice(i, false);\n                });\n\n        polyline.exit().remove();\n        var arc2 = d3.svg.arc()\n                .outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .innerRadius(_radius - _externalRadiusPadding);\n        var transition = dc.transition(polyline, _chart.transitionDuration(), _chart.transitionDelay());\n        // this is one rare case where d3.selection differs from d3.transition\n        if (transition.attrTween) {\n            transition\n                .attrTween('points', function (d) {\n                    var current = this._current || d;\n                    current = {startAngle: current.startAngle, endAngle: current.endAngle};\n                    var interpolate = d3.interpolate(current, d);\n                    this._current = interpolate(0);\n                    return function (t) {\n                        var d2 = interpolate(t);\n                        return [arc.centroid(d2), arc2.centroid(d2)];\n                    };\n                });\n        } else {\n            transition.attr('points', function (d) {\n                return [arc.centroid(d), arc2.centroid(d)];\n            });\n        }\n        transition.style('visibility', function (d) {\n            return d.endAngle - d.startAngle < 0.0001 ? 'hidden' : 'visible';\n        });\n\n    }\n\n    function updateElements (pieData, arc) {\n        updateSlicePaths(pieData, arc);\n        updateLabels(pieData, arc);\n        updateTitles(pieData);\n    }\n\n    function updateSlicePaths (pieData, arc) {\n        var slicePaths = _g.selectAll('g.' + _sliceCssClass)\n            .data(pieData)\n            .select('path')\n            .attr('d', function (d, i) {\n                return safeArc(d, i, arc);\n            });\n        var transition = dc.transition(slicePaths, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenPie);\n        }\n        transition.attr('fill', fill);\n    }\n\n    function updateLabels (pieData, arc) {\n        if (_chart.renderLabel()) {\n            var labels = _g.selectAll('text.' + _labelCssClass)\n                .data(pieData);\n            positionLabels(labels, arc);\n            if (_externalLabelRadius && _drawPaths) {\n                updateLabelPaths(pieData, arc);\n            }\n        }\n    }\n\n    function updateTitles (pieData) {\n        if (_chart.renderTitle()) {\n            _g.selectAll('g.' + _sliceCssClass)\n                .data(pieData)\n                .select('title')\n                .text(function (d) {\n                    return _chart.title()(d.data);\n                });\n        }\n    }\n\n    function removeElements (slices, labels) {\n        slices.exit().remove();\n        labels.exit().remove();\n    }\n\n    function highlightFilter () {\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.' + _sliceCssClass).each(function (d) {\n                if (isSelectedSlice(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.' + _sliceCssClass).each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    }\n\n    /**\n     * Get or set the external radius padding of the pie chart. This will force the radius of the\n     * pie chart to become smaller or larger depending on the value.\n     * @method externalRadiusPadding\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [externalRadiusPadding=0]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.externalRadiusPadding = function (externalRadiusPadding) {\n        if (!arguments.length) {\n            return _externalRadiusPadding;\n        }\n        _externalRadiusPadding = externalRadiusPadding;\n        return _chart;\n    };\n\n    /**\n     * Get or set the inner radius of the pie chart. If the inner radius is greater than 0px then the\n     * pie chart will be rendered as a doughnut chart.\n     * @method innerRadius\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [innerRadius=0]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.innerRadius = function (innerRadius) {\n        if (!arguments.length) {\n            return _innerRadius;\n        }\n        _innerRadius = innerRadius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the outer radius. If the radius is not set, it will be half of the minimum of the\n     * chart width and height.\n     * @method radius\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [radius]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.radius = function (radius) {\n        if (!arguments.length) {\n            return _givenRadius;\n        }\n        _givenRadius = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set center x coordinate position. Default is center of svg.\n     * @method cx\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cx]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.cx = function (cx) {\n        if (!arguments.length) {\n            return (_cx ||  _chart.width() / 2);\n        }\n        _cx = cx;\n        return _chart;\n    };\n\n    /**\n     * Get or set center y coordinate position. Default is center of svg.\n     * @method cy\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cy]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.cy = function (cy) {\n        if (!arguments.length) {\n            return (_cy ||  _chart.height() / 2);\n        }\n        _cy = cy;\n        return _chart;\n    };\n\n    function buildArcs () {\n        return d3.svg.arc()\n            .outerRadius(_radius - _externalRadiusPadding)\n            .innerRadius(_innerRadius);\n    }\n\n    function isSelectedSlice (d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d.data));\n    }\n\n    _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not\n     * display a slice label.\n     * @method minAngleForLabel\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [minAngleForLabel=0.5]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.minAngleForLabel = function (minAngleForLabel) {\n        if (!arguments.length) {\n            return _minAngleForLabel;\n        }\n        _minAngleForLabel = minAngleForLabel;\n        return _chart;\n    };\n\n    function pieLayout () {\n        return d3.layout.pie().sort(null).value(_chart.cappedValueAccessor);\n    }\n\n    function sliceTooSmall (d) {\n        var angle = (d.endAngle - d.startAngle);\n        return isNaN(angle) || angle < _minAngleForLabel;\n    }\n\n    function sliceHasNoData (d) {\n        return _chart.cappedValueAccessor(d) === 0;\n    }\n\n    function tweenPie (b) {\n        b.innerRadius = _innerRadius;\n        var current = this._current;\n        if (isOffCanvas(current)) {\n            current = {startAngle: 0, endAngle: 0};\n        } else {\n            // only interpolate startAngle & endAngle, not the whole data object\n            current = {startAngle: current.startAngle, endAngle: current.endAngle};\n        }\n        var i = d3.interpolate(current, b);\n        this._current = i(0);\n        return function (t) {\n            return safeArc(i(t), 0, buildArcs());\n        };\n    }\n\n    function isOffCanvas (current) {\n        return !current || isNaN(current.startAngle) || isNaN(current.endAngle);\n    }\n\n    function fill (d, i) {\n        return _chart.getColor(d.data, i);\n    }\n\n    function onClick (d, i) {\n        if (_g.attr('class') !== _emptyCssClass) {\n            _chart.onClick(d.data, i);\n        }\n    }\n\n    function safeArc (d, i, arc) {\n        var path = arc(d, i);\n        if (path.indexOf('NaN') >= 0) {\n            path = 'M0,0';\n        }\n        return path;\n    }\n\n    /**\n     * Title to use for the only slice when there is no data.\n     * @method emptyTitle\n     * @memberof dc.pieChart\n     * @instance\n     * @param {String} [title]\n     * @returns {String|dc.pieChart}\n     */\n    _chart.emptyTitle = function (title) {\n        if (arguments.length === 0) {\n            return _emptyTitle;\n        }\n        _emptyTitle = title;\n        return _chart;\n    };\n\n    /**\n     * Position slice labels offset from the outer edge of the chart.\n     *\n     * The argument specifies the extra radius to be added for slice labels.\n     * @method externalLabels\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [externalLabelRadius]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.externalLabels = function (externalLabelRadius) {\n        if (arguments.length === 0) {\n            return _externalLabelRadius;\n        } else if (externalLabelRadius) {\n            _externalLabelRadius = externalLabelRadius;\n        } else {\n            _externalLabelRadius = undefined;\n        }\n\n        return _chart;\n    };\n\n    /**\n     * Get or set whether to draw lines from pie slices to their labels.\n     *\n     * @method drawPaths\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Boolean} [drawPaths]\n     * @returns {Boolean|dc.pieChart}\n     */\n    _chart.drawPaths = function (drawPaths) {\n        if (arguments.length === 0) {\n            return _drawPaths;\n        }\n        _drawPaths = drawPaths;\n        return _chart;\n    };\n\n    function labelPosition (d, arc) {\n        var centroid;\n        if (_externalLabelRadius) {\n            centroid = d3.svg.arc()\n                .outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .innerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .centroid(d);\n        } else {\n            centroid = arc.centroid(d);\n        }\n        if (isNaN(centroid[0]) || isNaN(centroid[1])) {\n            return 'translate(0,0)';\n        } else {\n            return 'translate(' + centroid + ')';\n        }\n    }\n\n    _chart.legendables = function () {\n        return _chart.data().map(function (d, i) {\n            var legendable = {name: d.key, data: d.value, others: d.others, chart: _chart};\n            legendable.color = _chart.getColor(d, i);\n            return legendable;\n        });\n    };\n\n    _chart.legendHighlight = function (d) {\n        highlightSliceFromLegendable(d, true);\n    };\n\n    _chart.legendReset = function (d) {\n        highlightSliceFromLegendable(d, false);\n    };\n\n    _chart.legendToggle = function (d) {\n        _chart.onClick({key: d.name, others: d.others});\n    };\n\n    function highlightSliceFromLegendable (legendable, highlighted) {\n        _chart.selectAll('g.pie-slice').each(function (d) {\n            if (legendable.name === d.data.key) {\n                d3.select(this).classed('highlight', highlighted);\n            }\n        });\n    }\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Concrete bar chart/histogram implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class barChart\n * @memberof dc\n * @mixes dc.stackMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a bar chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.barChart('#chart-container1');\n * // create a bar chart under #chart-container2 element using chart group A\n * var chart2 = dc.barChart('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.barChart(compositeChart);\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n * specifying a dom block element such as a div; or a dom element or d3 selection.  If the bar\n * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n * composite chart instance instead.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.barChart}\n */\ndc.barChart = function (parent, chartGroup) {\n    var MIN_BAR_WIDTH = 1;\n    var DEFAULT_GAP_BETWEEN_BARS = 2;\n    var LABEL_PADDING = 3;\n\n    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n\n    var _gap = DEFAULT_GAP_BETWEEN_BARS;\n    var _centerBar = false;\n    var _alwaysUseRounding = false;\n\n    var _barWidth;\n\n    dc.override(_chart, 'rescale', function () {\n        _chart._rescale();\n        _barWidth = undefined;\n        return _chart;\n    });\n\n    dc.override(_chart, 'render', function () {\n        if (_chart.round() && _centerBar && !_alwaysUseRounding) {\n            dc.logger.warn('By default, brush rounding is disabled if bars are centered. ' +\n                         'See dc.js bar chart API documentation for details.');\n        }\n\n        return _chart._render();\n    });\n\n    _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n    }, false);\n\n    _chart.plotData = function () {\n        var layers = _chart.chartBodyG().selectAll('g.stack')\n            .data(_chart.data());\n\n        calculateBarWidth();\n\n        layers\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return 'stack ' + '_' + i;\n            });\n\n        var last = layers.size() - 1;\n        layers.each(function (d, i) {\n            var layer = d3.select(this);\n\n            renderBars(layer, i, d);\n\n            if (_chart.renderLabel() && last === i) {\n                renderLabels(layer, i, d);\n            }\n        });\n    };\n\n    function barHeight (d) {\n        return dc.utils.safeNumber(Math.abs(_chart.y()(d.y + d.y0) - _chart.y()(d.y0)));\n    }\n\n    function renderLabels (layer, layerIndex, d) {\n        var labels = layer.selectAll('text.barLabel')\n            .data(d.values, dc.pluck('x'));\n\n        labels.enter()\n            .append('text')\n            .attr('class', 'barLabel')\n            .attr('text-anchor', 'middle');\n\n        if (_chart.isOrdinal()) {\n            labels.on('click', _chart.onClick);\n            labels.attr('cursor', 'pointer');\n        }\n\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) {\n                var x = _chart.x()(d.x);\n                if (!_centerBar) {\n                    x += _barWidth / 2;\n                }\n                return dc.utils.safeNumber(x);\n            })\n            .attr('y', function (d) {\n                var y = _chart.y()(d.y + d.y0);\n\n                if (d.y < 0) {\n                    y -= barHeight(d);\n                }\n\n                return dc.utils.safeNumber(y - LABEL_PADDING);\n            })\n            .text(function (d) {\n                return _chart.label()(d);\n            });\n\n        dc.transition(labels.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('height', 0)\n            .remove();\n    }\n\n    function renderBars (layer, layerIndex, d) {\n        var bars = layer.selectAll('rect.bar')\n            .data(d.values, dc.pluck('x'));\n\n        var enter = bars.enter()\n            .append('rect')\n            .attr('class', 'bar')\n            .attr('fill', dc.pluck('data', _chart.getColor))\n            .attr('y', _chart.yAxisHeight())\n            .attr('height', 0);\n\n        if (_chart.renderTitle()) {\n            enter.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n\n        if (_chart.isOrdinal()) {\n            bars.on('click', _chart.onClick);\n        }\n\n        dc.transition(bars, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) {\n                var x = _chart.x()(d.x);\n                if (_centerBar) {\n                    x -= _barWidth / 2;\n                }\n                if (_chart.isOrdinal() && _gap !== undefined) {\n                    x += _gap / 2;\n                }\n                return dc.utils.safeNumber(x);\n            })\n            .attr('y', function (d) {\n                var y = _chart.y()(d.y + d.y0);\n\n                if (d.y < 0) {\n                    y -= barHeight(d);\n                }\n\n                return dc.utils.safeNumber(y);\n            })\n            .attr('width', _barWidth)\n            .attr('height', function (d) {\n                return barHeight(d);\n            })\n            .attr('fill', dc.pluck('data', _chart.getColor))\n            .select('title').text(dc.pluck('data', _chart.title(d.name)));\n\n        dc.transition(bars.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) { return _chart.x()(d.x); })\n            .attr('width', _barWidth * 0.9)\n            .remove();\n    }\n\n    function calculateBarWidth () {\n        if (_barWidth === undefined) {\n            var numberOfBars = _chart.xUnitCount();\n\n            // please can't we always use rangeBands for bar charts?\n            if (_chart.isOrdinal() && _gap === undefined) {\n                _barWidth = Math.floor(_chart.x().rangeBand());\n            } else if (_gap) {\n                _barWidth = Math.floor((_chart.xAxisLength() - (numberOfBars - 1) * _gap) / numberOfBars);\n            } else {\n                _barWidth = Math.floor(_chart.xAxisLength() / (1 + _chart.barPadding()) / numberOfBars);\n            }\n\n            if (_barWidth === Infinity || isNaN(_barWidth) || _barWidth < MIN_BAR_WIDTH) {\n                _barWidth = MIN_BAR_WIDTH;\n            }\n        }\n    }\n\n    _chart.fadeDeselectedArea = function () {\n        var bars = _chart.chartBodyG().selectAll('rect.bar');\n        var extent = _chart.brush().extent();\n\n        if (_chart.isOrdinal()) {\n            if (_chart.hasFilter()) {\n                bars.classed(dc.constants.SELECTED_CLASS, function (d) {\n                    return _chart.hasFilter(d.x);\n                });\n                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n                    return !_chart.hasFilter(d.x);\n                });\n            } else {\n                bars.classed(dc.constants.SELECTED_CLASS, false);\n                bars.classed(dc.constants.DESELECTED_CLASS, false);\n            }\n        } else {\n            if (!_chart.brushIsEmpty(extent)) {\n                var start = extent[0];\n                var end = extent[1];\n\n                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n                    return d.x < start || d.x >= end;\n                });\n            } else {\n                bars.classed(dc.constants.DESELECTED_CLASS, false);\n            }\n        }\n    };\n\n    /**\n     * Whether the bar chart will render each bar centered around the data position on the x-axis.\n     * @method centerBar\n     * @memberof dc.barChart\n     * @instance\n     * @param {Boolean} [centerBar=false]\n     * @returns {Boolean|dc.barChart}\n     */\n    _chart.centerBar = function (centerBar) {\n        if (!arguments.length) {\n            return _centerBar;\n        }\n        _centerBar = centerBar;\n        return _chart;\n    };\n\n    dc.override(_chart, 'onClick', function (d) {\n        _chart._onClick(d.data);\n    });\n\n    /**\n     * Get or set the spacing between bars as a fraction of bar size. Valid values are between 0-1.\n     * Setting this value will also remove any previously set {@link dc.barChart#gap gap}. See the\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n     * for a visual description of how the padding is applied.\n     * @method barPadding\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [barPadding=0]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.barPadding = function (barPadding) {\n        if (!arguments.length) {\n            return _chart._rangeBandPadding();\n        }\n        _chart._rangeBandPadding(barPadding);\n        _gap = undefined;\n        return _chart;\n    };\n\n    _chart._useOuterPadding = function () {\n        return _gap === undefined;\n    };\n\n    /**\n     * Get or set the outer padding on an ordinal bar chart. This setting has no effect on non-ordinal charts.\n     * Will pad the width by `padding * barWidth` on each side of the chart.\n     * @method outerPadding\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [padding=0.5]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.outerPadding = _chart._outerRangeBandPadding;\n\n    /**\n     * Manually set fixed gap (in px) between bars instead of relying on the default auto-generated\n     * gap.  By default the bar chart implementation will calculate and set the gap automatically\n     * based on the number of data points and the length of the x axis.\n     * @method gap\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [gap=2]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _chart;\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n        if (_chart.round() && (!_centerBar || _alwaysUseRounding)) {\n            extent[0] = extent.map(_chart.round())[0];\n            extent[1] = extent.map(_chart.round())[1];\n\n            _chart.chartBodyG().select('.brush')\n                .call(_chart.brush().extent(extent));\n        }\n\n        return extent;\n    };\n\n    /**\n     * Set or get whether rounding is enabled when bars are centered. If false, using\n     * rounding with centered bars will result in a warning and rounding will be ignored.  This flag\n     * has no effect if bars are not {@link dc.barChart#centerBar centered}.\n     * When using standard d3.js rounding methods, the brush often doesn't align correctly with\n     * centered bars since the bars are offset.  The rounding function must add an offset to\n     * compensate, such as in the following example.\n     * @method alwaysUseRounding\n     * @memberof dc.barChart\n     * @instance\n     * @example\n     * chart.round(function(n) { return Math.floor(n) + 0.5; });\n     * @param {Boolean} [alwaysUseRounding=false]\n     * @returns {Boolean|dc.barChart}\n     */\n    _chart.alwaysUseRounding = function (alwaysUseRounding) {\n        if (!arguments.length) {\n            return _alwaysUseRounding;\n        }\n        _alwaysUseRounding = alwaysUseRounding;\n        return _chart;\n    };\n\n    function colorFilter (color, inv) {\n        return function () {\n            var item = d3.select(this);\n            var match = item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n    }\n\n    _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n            _chart.g().selectAll('rect.bar')\n                .classed('highlight', colorFilter(d.color))\n                .classed('fadeout', colorFilter(d.color, true));\n        }\n    };\n\n    _chart.legendReset = function () {\n        _chart.g().selectAll('rect.bar')\n            .classed('highlight', false)\n            .classed('fadeout', false);\n    };\n\n    dc.override(_chart, 'xAxisMax', function () {\n        var max = this._xAxisMax();\n        if ('resolution' in _chart.xUnits()) {\n            var res = _chart.xUnits().resolution;\n            max += res;\n        }\n        return max;\n    });\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Concrete line/area chart implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class lineChart\n * @memberof dc\n * @mixes dc.stackMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a line chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.lineChart('#chart-container1');\n * // create a line chart under #chart-container2 element using chart group A\n * var chart2 = dc.lineChart('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.lineChart(compositeChart);\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n * specifying a dom block element such as a div; or a dom element or d3 selection.  If the line\n * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n * composite chart instance instead.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.lineChart}\n */\ndc.lineChart = function (parent, chartGroup) {\n    var DEFAULT_DOT_RADIUS = 5;\n    var TOOLTIP_G_CLASS = 'dc-tooltip';\n    var DOT_CIRCLE_CLASS = 'dot';\n    var Y_AXIS_REF_LINE_CLASS = 'yRef';\n    var X_AXIS_REF_LINE_CLASS = 'xRef';\n    var DEFAULT_DOT_OPACITY = 1e-6;\n    var LABEL_PADDING = 3;\n\n    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n    var _renderArea = false;\n    var _dotRadius = DEFAULT_DOT_RADIUS;\n    var _dataPointRadius = null;\n    var _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n    var _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n    var _interpolate = 'linear';\n    var _tension = 0.7;\n    var _defined;\n    var _dashStyle;\n    var _xyTipsOn = true;\n\n    _chart.transitionDuration(500);\n    _chart.transitionDelay(0);\n    _chart._rangeBandPadding(1);\n\n    _chart.plotData = function () {\n        var chartBody = _chart.chartBodyG();\n        var layersList = chartBody.select('g.stack-list');\n\n        if (layersList.empty()) {\n            layersList = chartBody.append('g').attr('class', 'stack-list');\n        }\n\n        var layers = layersList.selectAll('g.stack').data(_chart.data());\n\n        var layersEnter = layers\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return 'stack ' + '_' + i;\n            });\n\n        drawLine(layersEnter, layers);\n\n        drawArea(layersEnter, layers);\n\n        drawDots(chartBody, layers);\n\n        if (_chart.renderLabel()) {\n            drawLabels(layers);\n        }\n    };\n\n    /**\n     * Gets or sets the interpolator to use for lines drawn, by string name, allowing e.g. step\n     * functions, splines, and cubic interpolation.  This is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate} and\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate},\n     * where you can find a complete list of valid arguments.\n     * @method interpolate\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n     * @param  {String} [interpolate='linear']\n     * @returns {String|dc.lineChart}\n     */\n    _chart.interpolate = function (interpolate) {\n        if (!arguments.length) {\n            return _interpolate;\n        }\n        _interpolate = interpolate;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the tension to use for lines drawn, in the range 0 to 1.\n     * This parameter further customizes the interpolation behavior.  It is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_tension d3.svg.line.tension} and\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_tension d3.svg.area.tension}.\n     * @method tension\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n     * @param  {Number} [tension=0.7]\n     * @returns {Number|dc.lineChart}\n     */\n    _chart.tension = function (tension) {\n        if (!arguments.length) {\n            return _tension;\n        }\n        _tension = tension;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets a function that will determine discontinuities in the line which should be\n     * skipped: the path will be broken into separate subpaths if some points are undefined.\n     * This function is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n     *\n     * Note: crossfilter will sometimes coerce nulls to 0, so you may need to carefully write\n     * custom reduce functions to get this to work, depending on your data. See\n     * {@link https://github.com/dc-js/dc.js/issues/615#issuecomment-49089248 this GitHub comment}\n     * for more details and an example.\n     * @method defined\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n     * @param  {Function} [defined]\n     * @returns {Function|dc.lineChart}\n     */\n    _chart.defined = function (defined) {\n        if (!arguments.length) {\n            return _defined;\n        }\n        _defined = defined;\n        return _chart;\n    };\n\n    /**\n     * Set the line's d3 dashstyle. This value becomes the 'stroke-dasharray' of line. Defaults to empty\n     * array (solid line).\n     * @method dashStyle\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray stroke-dasharray}\n     * @example\n     * // create a Dash Dot Dot Dot\n     * chart.dashStyle([3,1,1,1]);\n     * @param  {Array<Number>} [dashStyle=[]]\n     * @returns {Array<Number>|dc.lineChart}\n     */\n    _chart.dashStyle = function (dashStyle) {\n        if (!arguments.length) {\n            return _dashStyle;\n        }\n        _dashStyle = dashStyle;\n        return _chart;\n    };\n\n    /**\n     * Get or set render area flag. If the flag is set to true then the chart will render the area\n     * beneath each line and the line chart effectively becomes an area chart.\n     * @method renderArea\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Boolean} [renderArea=false]\n     * @returns {Boolean|dc.lineChart}\n     */\n    _chart.renderArea = function (renderArea) {\n        if (!arguments.length) {\n            return _renderArea;\n        }\n        _renderArea = renderArea;\n        return _chart;\n    };\n\n    function colors (d, i) {\n        return _chart.getColor.call(d, d.values, i);\n    }\n\n    function drawLine (layersEnter, layers) {\n        var line = d3.svg.line()\n            .x(function (d) {\n                return _chart.x()(d.x);\n            })\n            .y(function (d) {\n                return _chart.y()(d.y + d.y0);\n            })\n            .interpolate(_interpolate)\n            .tension(_tension);\n        if (_defined) {\n            line.defined(_defined);\n        }\n\n        var path = layersEnter.append('path')\n            .attr('class', 'line')\n            .attr('stroke', colors);\n        if (_dashStyle) {\n            path.attr('stroke-dasharray', _dashStyle);\n        }\n\n        dc.transition(layers.select('path.line'), _chart.transitionDuration(), _chart.transitionDelay())\n            //.ease('linear')\n            .attr('stroke', colors)\n            .attr('d', function (d) {\n                return safeD(line(d.values));\n            });\n    }\n\n    function drawArea (layersEnter, layers) {\n        if (_renderArea) {\n            var area = d3.svg.area()\n                .x(function (d) {\n                    return _chart.x()(d.x);\n                })\n                .y(function (d) {\n                    return _chart.y()(d.y + d.y0);\n                })\n                .y0(function (d) {\n                    return _chart.y()(d.y0);\n                })\n                .interpolate(_interpolate)\n                .tension(_tension);\n            if (_defined) {\n                area.defined(_defined);\n            }\n\n            layersEnter.append('path')\n                .attr('class', 'area')\n                .attr('fill', colors)\n                .attr('d', function (d) {\n                    return safeD(area(d.values));\n                });\n\n            dc.transition(layers.select('path.area'), _chart.transitionDuration(), _chart.transitionDelay())\n                //.ease('linear')\n                .attr('fill', colors)\n                .attr('d', function (d) {\n                    return safeD(area(d.values));\n                });\n        }\n    }\n\n    function safeD (d) {\n        return (!d || d.indexOf('NaN') >= 0) ? 'M0,0' : d;\n    }\n\n    function drawDots (chartBody, layers) {\n        if (_chart.xyTipsOn() === 'always' || (!_chart.brushOn() && _chart.xyTipsOn())) {\n            var tooltipListClass = TOOLTIP_G_CLASS + '-list';\n            var tooltips = chartBody.select('g.' + tooltipListClass);\n\n            if (tooltips.empty()) {\n                tooltips = chartBody.append('g').attr('class', tooltipListClass);\n            }\n\n            layers.each(function (d, layerIndex) {\n                var points = d.values;\n                if (_defined) {\n                    points = points.filter(_defined);\n                }\n\n                var g = tooltips.select('g.' + TOOLTIP_G_CLASS + '._' + layerIndex);\n                if (g.empty()) {\n                    g = tooltips.append('g').attr('class', TOOLTIP_G_CLASS + ' _' + layerIndex);\n                }\n\n                createRefLines(g);\n\n                var dots = g.selectAll('circle.' + DOT_CIRCLE_CLASS)\n                    .data(points, dc.pluck('x'));\n\n                dots.enter()\n                    .append('circle')\n                    .attr('class', DOT_CIRCLE_CLASS)\n                    .attr('r', getDotRadius())\n                    .style('fill-opacity', _dataPointFillOpacity)\n                    .style('stroke-opacity', _dataPointStrokeOpacity)\n                    .attr('fill', _chart.getColor)\n                    .on('mousemove', function () {\n                        var dot = d3.select(this);\n                        showDot(dot);\n                        showRefLines(dot, g);\n                    })\n                    .on('mouseout', function () {\n                        var dot = d3.select(this);\n                        hideDot(dot);\n                        hideRefLines(g);\n                    });\n\n                dots.call(renderTitle, d);\n\n                dc.transition(dots, _chart.transitionDuration())\n                    .attr('cx', function (d) {\n                        return dc.utils.safeNumber(_chart.x()(d.x));\n                    })\n                    .attr('cy', function (d) {\n                        return dc.utils.safeNumber(_chart.y()(d.y + d.y0));\n                    })\n                    .attr('fill', _chart.getColor);\n\n                dots.exit().remove();\n            });\n        }\n    }\n\n    _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n    }, false);\n\n    function drawLabels (layers) {\n        layers.each(function (d, layerIndex) {\n            var layer = d3.select(this);\n            var labels = layer.selectAll('text.lineLabel')\n                .data(d.values, dc.pluck('x'));\n\n            labels.enter()\n                .append('text')\n                .attr('class', 'lineLabel')\n                .attr('text-anchor', 'middle');\n\n            dc.transition(labels, _chart.transitionDuration())\n                .attr('x', function (d) {\n                    return dc.utils.safeNumber(_chart.x()(d.x));\n                })\n                .attr('y', function (d) {\n                    var y = _chart.y()(d.y + d.y0) - LABEL_PADDING;\n                    return dc.utils.safeNumber(y);\n                })\n                .text(function (d) {\n                    return _chart.label()(d);\n                });\n\n            dc.transition(labels.exit(), _chart.transitionDuration())\n                .attr('height', 0)\n                .remove();\n        });\n    }\n\n    function createRefLines (g) {\n        var yRefLine = g.select('path.' + Y_AXIS_REF_LINE_CLASS).empty() ?\n            g.append('path').attr('class', Y_AXIS_REF_LINE_CLASS) : g.select('path.' + Y_AXIS_REF_LINE_CLASS);\n        yRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n\n        var xRefLine = g.select('path.' + X_AXIS_REF_LINE_CLASS).empty() ?\n            g.append('path').attr('class', X_AXIS_REF_LINE_CLASS) : g.select('path.' + X_AXIS_REF_LINE_CLASS);\n        xRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n    }\n\n    function showDot (dot) {\n        dot.style('fill-opacity', 0.8);\n        dot.style('stroke-opacity', 0.8);\n        dot.attr('r', _dotRadius);\n        return dot;\n    }\n\n    function showRefLines (dot, g) {\n        var x = dot.attr('cx');\n        var y = dot.attr('cy');\n        var yAxisX = (_chart._yAxisX() - _chart.margins().left);\n        var yAxisRefPathD = 'M' + yAxisX + ' ' + y + 'L' + (x) + ' ' + (y);\n        var xAxisRefPathD = 'M' + x + ' ' + _chart.yAxisHeight() + 'L' + x + ' ' + y;\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', '').attr('d', yAxisRefPathD);\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', '').attr('d', xAxisRefPathD);\n    }\n\n    function getDotRadius () {\n        return _dataPointRadius || _dotRadius;\n    }\n\n    function hideDot (dot) {\n        dot.style('fill-opacity', _dataPointFillOpacity)\n            .style('stroke-opacity', _dataPointStrokeOpacity)\n            .attr('r', getDotRadius());\n    }\n\n    function hideRefLines (g) {\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', 'none');\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', 'none');\n    }\n\n    function renderTitle (dot, d) {\n        if (_chart.renderTitle()) {\n            dot.select('title').remove();\n            dot.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n    }\n\n    /**\n     * Turn on/off the mouseover behavior of an individual data point which renders a circle and x/y axis\n     * dashed lines back to each respective axis.  This is ignored if the chart\n     * {@link dc.coordinateGridMixin#brushOn brush} is on\n     * @method xyTipsOn\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Boolean} [xyTipsOn=false]\n     * @returns {Boolean|dc.lineChart}\n     */\n    _chart.xyTipsOn = function (xyTipsOn) {\n        if (!arguments.length) {\n            return _xyTipsOn;\n        }\n        _xyTipsOn = xyTipsOn;\n        return _chart;\n    };\n\n    /**\n     * Get or set the radius (in px) for dots displayed on the data points.\n     * @method dotRadius\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Number} [dotRadius=5]\n     * @returns {Number|dc.lineChart}\n     */\n    _chart.dotRadius = function (dotRadius) {\n        if (!arguments.length) {\n            return _dotRadius;\n        }\n        _dotRadius = dotRadius;\n        return _chart;\n    };\n\n    /**\n     * Always show individual dots for each datapoint.\n     *\n     * If `options` is falsy, it disables data point rendering. If no `options` are provided, the\n     * current `options` values are instead returned.\n     * @method renderDataPoints\n     * @memberof dc.lineChart\n     * @instance\n     * @example\n     * chart.renderDataPoints({radius: 2, fillOpacity: 0.8, strokeOpacity: 0.8})\n     * @param  {{fillOpacity: Number, strokeOpacity: Number, radius: Number}} [options={fillOpacity: 0.8, strokeOpacity: 0.8, radius: 2}]\n     * @returns {{fillOpacity: Number, strokeOpacity: Number, radius: Number}|dc.lineChart}\n     */\n    _chart.renderDataPoints = function (options) {\n        if (!arguments.length) {\n            return {\n                fillOpacity: _dataPointFillOpacity,\n                strokeOpacity: _dataPointStrokeOpacity,\n                radius: _dataPointRadius\n            };\n        } else if (!options) {\n            _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n            _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n            _dataPointRadius = null;\n        } else {\n            _dataPointFillOpacity = options.fillOpacity || 0.8;\n            _dataPointStrokeOpacity = options.strokeOpacity || 0.8;\n            _dataPointRadius = options.radius || 2;\n        }\n        return _chart;\n    };\n\n    function colorFilter (color, dashstyle, inv) {\n        return function () {\n            var item = d3.select(this);\n            var match = (item.attr('stroke') === color &&\n                item.attr('stroke-dasharray') === ((dashstyle instanceof Array) ?\n                    dashstyle.join(',') : null)) || item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n    }\n\n    _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n            _chart.g().selectAll('path.line, path.area')\n                .classed('highlight', colorFilter(d.color, d.dashstyle))\n                .classed('fadeout', colorFilter(d.color, d.dashstyle, true));\n        }\n    };\n\n    _chart.legendReset = function () {\n        _chart.g().selectAll('path.line, path.area')\n            .classed('highlight', false)\n            .classed('fadeout', false);\n    };\n\n    dc.override(_chart, 'legendables', function () {\n        var legendables = _chart._legendables();\n        if (!_dashStyle) {\n            return legendables;\n        }\n        return legendables.map(function (l) {\n            l.dashstyle = _dashStyle;\n            return l;\n        });\n    });\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The data count widget is a simple widget designed to display the number of records selected by the\n * current filters out of the total number of records in the data set. Once created the data count widget\n * will automatically update the text content of child elements with the following classes:\n *\n * * `.total-count` - total number of records\n * * `.filter-count` - number of records matched by the current filters\n *\n * Note: this widget works best for the specific case of showing the number of records out of a\n * total. If you want a more general-purpose numeric display, please use the\n * {@link dc.numberDisplay} widget instead.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class dataCount\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * var ndx = crossfilter(data);\n * var all = ndx.groupAll();\n *\n * dc.dataCount('.dc-data-count')\n *     .dimension(ndx)\n *     .group(all);\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataCount}\n */\ndc.dataCount = function (parent, chartGroup) {\n    var _formatNumber = d3.format(',d');\n    var _chart = dc.baseMixin({});\n    var _html = {some: '', all: ''};\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending how many items are\n     * selected. The text `%total-count` will replaced with the total number of records, and the text\n     * `%filter-count` will be replaced with the number of selected records.\n     * - all: HTML template to use if all items are selected\n     * - some: HTML template to use if not all items are selected\n     * @method html\n     * @memberof dc.dataCount\n     * @instance\n     * @example\n     * counter.html({\n     *      some: '%filter-count out of %total-count records selected',\n     *      all: 'All records selected. Click on charts to apply filters'\n     * })\n     * @param {{some:String, all: String}} [options]\n     * @returns {{some:String, all: String}|dc.dataCount}\n     */\n    _chart.html = function (options) {\n        if (!arguments.length) {\n            return _html;\n        }\n        if (options.all) {\n            _html.all = options.all;\n        }\n        if (options.some) {\n            _html.some = options.some;\n        }\n        return _chart;\n    };\n\n    /**\n     * Gets or sets an optional function to format the filter count and total count.\n     * @method formatNumber\n     * @memberof dc.dataCount\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n     * @example\n     * counter.formatNumber(d3.format('.2g'))\n     * @param {Function} [formatter=d3.format('.2g')]\n     * @returns {Function|dc.dataCount}\n     */\n    _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n            return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        var tot = _chart.dimension().size(),\n            val = _chart.group().value();\n        var all = _formatNumber(tot);\n        var selected = _formatNumber(val);\n\n        if ((tot === val) && (_html.all !== '')) {\n            _chart.root().html(_html.all.replace('%total-count', all).replace('%filter-count', selected));\n        } else if (_html.some !== '') {\n            _chart.root().html(_html.some.replace('%total-count', all).replace('%filter-count', selected));\n        } else {\n            _chart.selectAll('.total-count').text(all);\n            _chart.selectAll('.filter-count').text(selected);\n        }\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The data table is a simple widget designed to list crossfilter focused data set (rows being\n * filtered) in a good old tabular fashion.\n *\n * Note: Unlike other charts, the data table (and data grid chart) use the {@link dc.dataTable#group group} attribute as a\n * keying function for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data\n * together in groups.  Do not pass in a crossfilter group as this will not work.\n *\n * Another interesting feature of the data table is that you can pass a crossfilter group to the `dimension`, as\n * long as you specify the {@link dc.dataTable#order order} as `d3.descending`, since the data\n * table will use `dimension.top()` to fetch the data in that case, and the method is equally\n * supported on the crossfilter group as the crossfilter dimension.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.io/dc.js/examples/table-on-aggregated-data.html dataTable on a crossfilter group}\n * ({@link https://github.com/dc-js/dc.js/blob/develop/web/examples/table-on-aggregated-data.html source})\n * @class dataTable\n * @memberof dc\n * @mixes dc.baseMixin\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataTable}\n */\ndc.dataTable = function (parent, chartGroup) {\n    var LABEL_CSS_CLASS = 'dc-table-label';\n    var ROW_CSS_CLASS = 'dc-table-row';\n    var COLUMN_CSS_CLASS = 'dc-table-column';\n    var GROUP_CSS_CLASS = 'dc-table-group';\n    var HEAD_CSS_CLASS = 'dc-table-head';\n\n    var _chart = dc.baseMixin({});\n\n    var _size = 25;\n    var _columns = [];\n    var _sortBy = function (d) {\n        return d;\n    };\n    var _order = d3.ascending;\n    var _beginSlice = 0;\n    var _endSlice;\n    var _showGroups = true;\n\n    _chart._doRender = function () {\n        _chart.selectAll('tbody').remove();\n\n        renderRows(renderGroups());\n\n        return _chart;\n    };\n\n    _chart._doColumnValueFormat = function (v, d) {\n        return ((typeof v === 'function') ?\n                v(d) :                          // v as function\n                ((typeof v === 'string') ?\n                 d[v] :                         // v is field name string\n                 v.format(d)                        // v is Object, use fn (element 2)\n                )\n               );\n    };\n\n    _chart._doColumnHeaderFormat = function (d) {\n        // if 'function', convert to string representation\n        // show a string capitalized\n        // if an object then display its label string as-is.\n        return (typeof d === 'function') ?\n                _chart._doColumnHeaderFnToString(d) :\n                ((typeof d === 'string') ?\n                 _chart._doColumnHeaderCapitalize(d) : String(d.label));\n    };\n\n    _chart._doColumnHeaderCapitalize = function (s) {\n        // capitalize\n        return s.charAt(0).toUpperCase() + s.slice(1);\n    };\n\n    _chart._doColumnHeaderFnToString = function (f) {\n        // columnString(f) {\n        var s = String(f);\n        var i1 = s.indexOf('return ');\n        if (i1 >= 0) {\n            var i2 = s.lastIndexOf(';');\n            if (i2 >= 0) {\n                s = s.substring(i1 + 7, i2);\n                var i3 = s.indexOf('numberFormat');\n                if (i3 >= 0) {\n                    s = s.replace('numberFormat', '');\n                }\n            }\n        }\n        return s;\n    };\n\n    function renderGroups () {\n        // The 'original' example uses all 'functions'.\n        // If all 'functions' are used, then don't remove/add a header, and leave\n        // the html alone. This preserves the functionality of earlier releases.\n        // A 2nd option is a string representing a field in the data.\n        // A third option is to supply an Object such as an array of 'information', and\n        // supply your own _doColumnHeaderFormat and _doColumnValueFormat functions to\n        // create what you need.\n        var bAllFunctions = true;\n        _columns.forEach(function (f) {\n            bAllFunctions = bAllFunctions & (typeof f === 'function');\n        });\n\n        if (!bAllFunctions) {\n            // ensure one thead\n            var thead = _chart.selectAll('thead').data([0]);\n            thead.enter().append('thead');\n            thead.exit().remove();\n\n            // with one tr\n            var headrow = thead.selectAll('tr').data([0]);\n            headrow.enter().append('tr');\n            headrow.exit().remove();\n\n            // with a th for each column\n            var headcols = headrow.selectAll('th')\n                .data(_columns);\n            headcols.enter().append('th');\n            headcols.exit().remove();\n\n            headcols\n                .attr('class', HEAD_CSS_CLASS)\n                    .html(function (d) {\n                        return (_chart._doColumnHeaderFormat(d));\n\n                    });\n        }\n\n        var groups = _chart.root().selectAll('tbody')\n            .data(nestEntries(), function (d) {\n                return _chart.keyAccessor()(d);\n            });\n\n        var rowGroup = groups\n            .enter()\n            .append('tbody');\n\n        if (_showGroups === true) {\n            rowGroup\n                .append('tr')\n                .attr('class', GROUP_CSS_CLASS)\n                    .append('td')\n                    .attr('class', LABEL_CSS_CLASS)\n                    .attr('colspan', _columns.length)\n                    .html(function (d) {\n                        return _chart.keyAccessor()(d);\n                    });\n        }\n\n        groups.exit().remove();\n\n        return rowGroup;\n    }\n\n    function nestEntries () {\n        var entries;\n        if (_order === d3.ascending) {\n            entries = _chart.dimension().bottom(_size);\n        } else {\n            entries = _chart.dimension().top(_size);\n        }\n\n        return d3.nest()\n            .key(_chart.group())\n            .sortKeys(_order)\n            .entries(entries.sort(function (a, b) {\n                return _order(_sortBy(a), _sortBy(b));\n            }).slice(_beginSlice, _endSlice));\n    }\n\n    function renderRows (groups) {\n        var rows = groups.order()\n            .selectAll('tr.' + ROW_CSS_CLASS)\n            .data(function (d) {\n                return d.values;\n            });\n\n        var rowEnter = rows.enter()\n            .append('tr')\n            .attr('class', ROW_CSS_CLASS);\n\n        _columns.forEach(function (v, i) {\n            rowEnter.append('td')\n                .attr('class', COLUMN_CSS_CLASS + ' _' + i)\n                .html(function (d) {\n                    return _chart._doColumnValueFormat(v, d);\n                });\n        });\n\n        rows.exit().remove();\n\n        return rows;\n    }\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set the group function for the data table. The group function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n     * to split rows into groups.\n     *\n     * Do not pass in a crossfilter group as this will not work.\n     * @method group\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * // group rows by the value of their field\n     * chart\n     *     .group(function(d) { return d.field; })\n     * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n     * @returns {Function|dc.dataTable}\n     */\n\n    /**\n     * Get or set the table size which determines the number of rows displayed by the widget.\n     * @method size\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number} [size=25]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.size = function (size) {\n        if (!arguments.length) {\n            return _size;\n        }\n        _size = size;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed\n     * by the widget. Useful when implementing pagination.\n     *\n     * Note: the sortBy function will determine how the rows are ordered for pagination purposes.\n\n     * See the {@link http://dc-js.github.io/dc.js/examples/table-pagination.html table pagination example}\n     * to see how to implement the pagination user interface using `beginSlice` and `endSlice`.\n     * @method beginSlice\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n            return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the\n     * widget. Useful when implementing pagination. See {@link dc.dataTable#beginSlice `beginSlice`} for more information.\n     * @method endSlice\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number|undefined} [endSlice=undefined]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n            return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set column functions. The data table widget supports several methods of specifying the\n     * columns to display.\n     *\n     * The original method uses an array of functions to generate dynamic columns. Column functions\n     * are simple javascript functions with only one input argument `d` which represents a row in\n     * the data set. The return value of these functions will be used to generate the content for\n     * each cell. However, this method requires the HTML for the table to have a fixed set of column\n     * headers.\n     *\n     * <pre><code>chart.columns([\n     *     function(d) { return d.date; },\n     *     function(d) { return d.open; },\n     *     function(d) { return d.close; },\n     *     function(d) { return numberFormat(d.close - d.open); },\n     *     function(d) { return d.volume; }\n     * ]);\n     * </code></pre>\n     *\n     * In the second method, you can list the columns to read from the data without specifying it as\n     * a function, except where necessary (ie, computed columns).  Note the data element name is\n     * capitalized when displayed in the table header. You can also mix in functions as necessary,\n     * using the third `{label, format}` form, as shown below.\n     *\n     * <pre><code>chart.columns([\n     *     \"date\",    // d[\"date\"], ie, a field accessor; capitalized automatically\n     *     \"open\",    // ...\n     *     \"close\",   // ...\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) {\n     *             return numberFormat(d.close - d.open);\n     *         }\n     *     },\n     *     \"volume\"   // d[\"volume\"], ie, a field accessor; capitalized automatically\n     * ]);\n     * </code></pre>\n     *\n     * In the third example, we specify all fields using the `{label, format}` method:\n     * <pre><code>chart.columns([\n     *     {\n     *         label: \"Date\",\n     *         format: function (d) { return d.date; }\n     *     },\n     *     {\n     *         label: \"Open\",\n     *         format: function (d) { return numberFormat(d.open); }\n     *     },\n     *     {\n     *         label: \"Close\",\n     *         format: function (d) { return numberFormat(d.close); }\n     *     },\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) { return numberFormat(d.close - d.open); }\n     *     },\n     *     {\n     *         label: \"Volume\",\n     *         format: function (d) { return d.volume; }\n     *     }\n     * ]);\n     * </code></pre>\n     *\n     * You may wish to override the dataTable functions `_doColumnHeaderCapitalize` and\n     * `_doColumnHeaderFnToString`, which are used internally to translate the column information or\n     * function into a displayed header. The first one is used on the \"string\" column specifier; the\n     * second is used to transform a stringified function into something displayable. For the Stock\n     * example, the function for Change becomes the table header **d.close - d.open**.\n     *\n     * Finally, you can even specify a completely different form of column definition. To do this,\n     * override `_chart._doColumnHeaderFormat` and `_chart._doColumnValueFormat` Be aware that\n     * fields without numberFormat specification will be displayed just as they are stored in the\n     * data, unformatted.\n     * @method columns\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Array<Function>} [columns=[]]\n     * @returns {Array<Function>}|dc.dataTable}\n     */\n    _chart.columns = function (columns) {\n        if (!arguments.length) {\n            return _columns;\n        }\n        _columns = columns;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at row level and returns a\n     * particular field to be sorted by.\n     * @method sortBy\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortBy=identity function]\n     * @returns {Function|dc.dataTable}\n     */\n    _chart.sortBy = function (sortBy) {\n        if (!arguments.length) {\n            return _sortBy;\n        }\n        _sortBy = sortBy;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort order. If the order is `d3.ascending`, the data table will use\n     * `dimension().bottom()` to fetch the data; otherwise it will use `dimension().top()`\n     * @method order\n     * @memberof dc.dataTable\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|dc.dataTable}\n     */\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    /**\n     * Get or set if group rows will be shown. The dataTable {@link dc.dataTable#group group}\n     * function must be specified even if groups are not shown.\n     * @method showGroups\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * chart\n     *     .group([value], [name])\n     *     .showGroups(true|false);\n     * @param {Boolean} [showGroups=true]\n     * @returns {Boolean|dc.dataTable}\n     */\n    _chart.showGroups = function (showGroups) {\n        if (!arguments.length) {\n            return _showGroups;\n        }\n        _showGroups = showGroups;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Data grid is a simple widget designed to list the filtered records, providing\n * a simple way to define how the items are displayed.\n *\n * Note: Unlike other charts, the data grid chart (and data table) use the {@link dc.dataGrid#group group} attribute as a keying function\n * for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data together in groups.\n * Do not pass in a crossfilter group as this will not work.\n *\n * Examples:\n * - {@link http://europarl.me/dc.js/web/ep/index.html List of members of the european parliament}\n * @class dataGrid\n * @memberof dc\n * @mixes dc.baseMixin\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataGrid}\n */\ndc.dataGrid = function (parent, chartGroup) {\n    var LABEL_CSS_CLASS = 'dc-grid-label';\n    var ITEM_CSS_CLASS = 'dc-grid-item';\n    var GROUP_CSS_CLASS = 'dc-grid-group';\n    var GRID_CSS_CLASS = 'dc-grid-top';\n\n    var _chart = dc.baseMixin({});\n\n    var _size = 999; // shouldn't be needed, but you might\n    var _html = function (d) { return 'you need to provide an html() handling param:  ' + JSON.stringify(d); };\n    var _sortBy = function (d) {\n        return d;\n    };\n    var _order = d3.ascending;\n    var _beginSlice = 0, _endSlice;\n\n    var _htmlGroup = function (d) {\n        return '<div class=\\'' + GROUP_CSS_CLASS + '\\'><h1 class=\\'' + LABEL_CSS_CLASS + '\\'>' +\n            _chart.keyAccessor()(d) + '</h1></div>';\n    };\n\n    _chart._doRender = function () {\n        _chart.selectAll('div.' + GRID_CSS_CLASS).remove();\n\n        renderItems(renderGroups());\n\n        return _chart;\n    };\n\n    function renderGroups () {\n        var groups = _chart.root().selectAll('div.' + GRID_CSS_CLASS)\n                .data(nestEntries(), function (d) {\n                    return _chart.keyAccessor()(d);\n                });\n\n        var itemGroup = groups\n                .enter()\n                .append('div')\n                .attr('class', GRID_CSS_CLASS);\n\n        if (_htmlGroup) {\n            itemGroup\n                .html(function (d) {\n                    return _htmlGroup(d);\n                });\n        }\n\n        groups.exit().remove();\n        return itemGroup;\n    }\n\n    function nestEntries () {\n        var entries = _chart.dimension().top(_size);\n\n        return d3.nest()\n            .key(_chart.group())\n            .sortKeys(_order)\n            .entries(entries.sort(function (a, b) {\n                return _order(_sortBy(a), _sortBy(b));\n            }).slice(_beginSlice, _endSlice));\n    }\n\n    function renderItems (groups) {\n        var items = groups.order()\n                .selectAll('div.' + ITEM_CSS_CLASS)\n                .data(function (d) {\n                    return d.values;\n                });\n\n        items.enter()\n            .append('div')\n            .attr('class', ITEM_CSS_CLASS)\n            .html(function (d) {\n                return _html(d);\n            });\n\n        items.exit().remove();\n\n        return items;\n    }\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set the group function for the data grid. The group function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n     * to split rows into groups.\n     *\n     * Do not pass in a crossfilter group as this will not work.\n     * @method group\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * // group rows by the value of their field\n     * chart\n     *     .group(function(d) { return d.field; })\n     * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n     * @returns {Function|dc.dataTable}\n     */\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @method beginSlice\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n            return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @method endSlice\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [endSlice]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n            return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the grid size which determines the number of items displayed by the widget.\n     * @method size\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [size=999]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.size = function (size) {\n        if (!arguments.length) {\n            return _size;\n        }\n        _size = size;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that formats an item. The data grid widget uses a\n     * function to generate dynamic html. Use your favourite templating engine or\n     * generate the string directly.\n     * @method html\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.html(function (d) { return '<div class='item '+data.exampleCategory+''>'+data.exampleString+'</div>';});\n     * @param {Function} [html]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.html = function (html) {\n        if (!arguments.length) {\n            return _html;\n        }\n        _html = html;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that formats a group label.\n     * @method htmlGroup\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.htmlGroup (function (d) { return '<h2>'.d.key . 'with ' . d.values.length .' items</h2>'});\n     * @param {Function} [htmlGroup]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.htmlGroup = function (htmlGroup) {\n        if (!arguments.length) {\n            return _htmlGroup;\n        }\n        _htmlGroup = htmlGroup;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at the item\n     * level and returns a particular field to be sorted.\n     * @method sortBy\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortByFunction]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.sortBy = function (sortByFunction) {\n        if (!arguments.length) {\n            return _sortBy;\n        }\n        _sortBy = sortByFunction;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort the order function.\n     * @method order\n     * @memberof dc.dataGrid\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A concrete implementation of a general purpose bubble chart that allows data visualization using the\n * following dimensions:\n * - x axis position\n * - y axis position\n * - bubble radius\n * - color\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n * @class bubbleChart\n * @memberof dc\n * @mixes dc.bubbleMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a bubble chart under #chart-container1 element using the default global chart group\n * var bubbleChart1 = dc.bubbleChart('#chart-container1');\n * // create a bubble chart under #chart-container2 element using chart group A\n * var bubbleChart2 = dc.bubbleChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.bubbleChart}\n */\ndc.bubbleChart = function (parent, chartGroup) {\n    var _chart = dc.bubbleMixin(dc.coordinateGridMixin({}));\n\n    _chart.transitionDuration(750);\n\n    _chart.transitionDelay(0);\n\n    var bubbleLocator = function (d) {\n        return 'translate(' + (bubbleX(d)) + ',' + (bubbleY(d)) + ')';\n    };\n\n    _chart.plotData = function () {\n        _chart.calculateRadiusDomain();\n        _chart.r().range([_chart.MIN_RADIUS, _chart.xAxisLength() * _chart.maxBubbleRelativeSize()]);\n\n        var data = _chart.data();\n        var bubbleG = _chart.chartBodyG().selectAll('g.' + _chart.BUBBLE_NODE_CLASS)\n                .data(data, function (d) { return d.key; });\n        if (_chart.sortBubbleSize()) {\n            // update dom order based on sort\n            bubbleG.order();\n        }\n\n        renderNodes(bubbleG);\n\n        updateNodes(bubbleG);\n\n        removeNodes(bubbleG);\n\n        _chart.fadeDeselectedArea();\n    };\n\n    function renderNodes (bubbleG) {\n        var bubbleGEnter = bubbleG.enter().append('g');\n\n        bubbleGEnter\n            .attr('class', _chart.BUBBLE_NODE_CLASS)\n            .attr('transform', bubbleLocator)\n            .append('circle').attr('class', function (d, i) {\n                return _chart.BUBBLE_CLASS + ' _' + i;\n            })\n            .on('click', _chart.onClick)\n            .attr('fill', _chart.getColor)\n            .attr('r', 0);\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay())\n            .select('circle.' + _chart.BUBBLE_CLASS)\n            .attr('r', function (d) {\n                return _chart.bubbleR(d);\n            })\n            .attr('opacity', function (d) {\n                return (_chart.bubbleR(d) > 0) ? 1 : 0;\n            });\n\n        _chart._doRenderLabel(bubbleGEnter);\n\n        _chart._doRenderTitles(bubbleGEnter);\n    }\n\n    function updateNodes (bubbleG) {\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', bubbleLocator)\n            .select('circle.' + _chart.BUBBLE_CLASS)\n            .attr('fill', _chart.getColor)\n            .attr('r', function (d) {\n                return _chart.bubbleR(d);\n            })\n            .attr('opacity', function (d) {\n                return (_chart.bubbleR(d) > 0) ? 1 : 0;\n            });\n\n        _chart.doUpdateLabels(bubbleG);\n        _chart.doUpdateTitles(bubbleG);\n    }\n\n    function removeNodes (bubbleG) {\n        bubbleG.exit().remove();\n    }\n\n    function bubbleX (d) {\n        var x = _chart.x()(_chart.keyAccessor()(d));\n        if (isNaN(x)) {\n            x = 0;\n        }\n        return x;\n    }\n\n    function bubbleY (d) {\n        var y = _chart.y()(_chart.valueAccessor()(d));\n        if (isNaN(y)) {\n            y = 0;\n        }\n        return y;\n    }\n\n    _chart.renderBrush = function () {\n        // override default x axis brush from parent chart\n    };\n\n    _chart.redrawBrush = function () {\n        // override default x axis brush from parent chart\n        _chart.fadeDeselectedArea();\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Composite charts are a special kind of chart that render multiple charts on the same Coordinate\n * Grid. You can overlay (compose) different bar/line/area charts in a single composite chart to\n * achieve some quite flexible charting effects.\n * @class compositeChart\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a composite chart under #chart-container1 element using the default global chart group\n * var compositeChart1 = dc.compositeChart('#chart-container1');\n * // create a composite chart under #chart-container2 element using chart group A\n * var compositeChart2 = dc.compositeChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.compositeChart}\n */\ndc.compositeChart = function (parent, chartGroup) {\n\n    var SUB_CHART_CLASS = 'sub';\n    var DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING = 12;\n\n    var _chart = dc.coordinateGridMixin({});\n    var _children = [];\n\n    var _childOptions = {};\n\n    var _shareColors = false,\n        _shareTitle = true,\n        _alignYAxes = false;\n\n    var _rightYAxis = d3.svg.axis(),\n        _rightYAxisLabel = 0,\n        _rightYAxisLabelPadding = DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING,\n        _rightY,\n        _rightAxisGridLines = false;\n\n    _chart._mandatoryAttributes([]);\n    _chart.transitionDuration(500);\n    _chart.transitionDelay(0);\n\n    dc.override(_chart, '_generateG', function () {\n        var g = this.__generateG();\n\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n\n            generateChildG(child, i);\n\n            if (!child.dimension()) {\n                child.dimension(_chart.dimension());\n            }\n            if (!child.group()) {\n                child.group(_chart.group());\n            }\n\n            child.chartGroup(_chart.chartGroup());\n            child.svg(_chart.svg());\n            child.xUnits(_chart.xUnits());\n            child.transitionDuration(_chart.transitionDuration(), _chart.transitionDelay());\n            child.brushOn(_chart.brushOn());\n            child.renderTitle(_chart.renderTitle());\n            child.elasticX(_chart.elasticX());\n        }\n\n        return g;\n    });\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n        var brushIsEmpty = _chart.brushIsEmpty(extent);\n\n        for (var i = 0; i < _children.length; ++i) {\n            _children[i].replaceFilter(brushIsEmpty ? null : extent);\n        }\n    };\n\n    _chart._prepareYAxis = function () {\n        var left = (leftYAxisChildren().length !== 0);\n        var right = (rightYAxisChildren().length !== 0);\n        var ranges = calculateYAxisRanges(left, right);\n\n        if (left) { prepareLeftYAxis(ranges); }\n        if (right) { prepareRightYAxis(ranges); }\n\n        if (leftYAxisChildren().length > 0 && !_rightAxisGridLines) {\n            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _chart.y(), _chart.yAxis());\n        } else if (rightYAxisChildren().length > 0) {\n            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _rightY, _rightYAxis);\n        }\n    };\n\n    _chart.renderYAxis = function () {\n        if (leftYAxisChildren().length !== 0) {\n            _chart.renderYAxisAt('y', _chart.yAxis(), _chart.margins().left);\n            _chart.renderYAxisLabel('y', _chart.yAxisLabel(), -90);\n        }\n\n        if (rightYAxisChildren().length !== 0) {\n            _chart.renderYAxisAt('yr', _chart.rightYAxis(), _chart.width() - _chart.margins().right);\n            _chart.renderYAxisLabel('yr', _chart.rightYAxisLabel(), 90, _chart.width() - _rightYAxisLabelPadding);\n        }\n    };\n\n    function calculateYAxisRanges (left, right) {\n        var lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax;\n        var ranges;\n\n        if (left) {\n            lyAxisMin = yAxisMin();\n            lyAxisMax = yAxisMax();\n        }\n\n        if (right) {\n            ryAxisMin = rightYAxisMin();\n            ryAxisMax = rightYAxisMax();\n        }\n\n        if (_chart.alignYAxes() && left && right) {\n            ranges = alignYAxisRanges(lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax);\n        }\n\n        return ranges || {\n            lyAxisMin: lyAxisMin,\n            lyAxisMax: lyAxisMax,\n            ryAxisMin: ryAxisMin,\n            ryAxisMax: ryAxisMax\n        };\n    }\n\n    function alignYAxisRanges (lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax) {\n        // since the two series will share a zero, each Y is just a multiple\n        // of the other. and the ratio should be the ratio of the ranges of the\n        // input data, so that they come out the same height. so we just min/max\n\n        // note: both ranges already include zero due to the stack mixin (#667)\n        // if #667 changes, we can reconsider whether we want data height or\n        // height from zero to be equal. and it will be possible for the axes\n        // to be aligned but not visible.\n        var extentRatio = (ryAxisMax - ryAxisMin) / (lyAxisMax - lyAxisMin);\n\n        return {\n            lyAxisMin: Math.min(lyAxisMin, ryAxisMin / extentRatio),\n            lyAxisMax: Math.max(lyAxisMax, ryAxisMax / extentRatio),\n            ryAxisMin: Math.min(ryAxisMin, lyAxisMin * extentRatio),\n            ryAxisMax: Math.max(ryAxisMax, lyAxisMax * extentRatio)\n        };\n    }\n\n    function prepareRightYAxis (ranges) {\n        var needDomain = _chart.rightY() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n        if (_chart.rightY() === undefined) {\n            _chart.rightY(d3.scale.linear());\n        }\n        if (needDomain) {\n            _chart.rightY().domain([ranges.ryAxisMin, ranges.ryAxisMax]);\n        }\n        if (needRange) {\n            _chart.rightY().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.rightY().range([_chart.yAxisHeight(), 0]);\n        _chart.rightYAxis(_chart.rightYAxis().scale(_chart.rightY()));\n\n        _chart.rightYAxis().orient('right');\n    }\n\n    function prepareLeftYAxis (ranges) {\n        var needDomain = _chart.y() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n        if (_chart.y() === undefined) {\n            _chart.y(d3.scale.linear());\n        }\n        if (needDomain) {\n            _chart.y().domain([ranges.lyAxisMin, ranges.lyAxisMax]);\n        }\n        if (needRange) {\n            _chart.y().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.y().range([_chart.yAxisHeight(), 0]);\n        _chart.yAxis(_chart.yAxis().scale(_chart.y()));\n\n        _chart.yAxis().orient('left');\n    }\n\n    function generateChildG (child, i) {\n        child._generateG(_chart.g());\n        child.g().attr('class', SUB_CHART_CLASS + ' _' + i);\n    }\n\n    _chart.plotData = function () {\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n\n            if (!child.g()) {\n                generateChildG(child, i);\n            }\n\n            if (_shareColors) {\n                child.colors(_chart.colors());\n            }\n\n            child.x(_chart.x());\n\n            child.xAxis(_chart.xAxis());\n\n            if (child.useRightYAxis()) {\n                child.y(_chart.rightY());\n                child.yAxis(_chart.rightYAxis());\n            } else {\n                child.y(_chart.y());\n                child.yAxis(_chart.yAxis());\n            }\n\n            child.plotData();\n\n            child._activateRenderlets();\n        }\n    };\n\n    /**\n     * Get or set whether to draw gridlines from the right y axis.  Drawing from the left y axis is the\n     * default behavior. This option is only respected when subcharts with both left and right y-axes\n     * are present.\n     * @method useRightAxisGridLines\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [useRightAxisGridLines=false]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.useRightAxisGridLines = function (useRightAxisGridLines) {\n        if (!arguments) {\n            return _rightAxisGridLines;\n        }\n\n        _rightAxisGridLines = useRightAxisGridLines;\n        return _chart;\n    };\n\n    /**\n     * Get or set chart-specific options for all child charts. This is equivalent to calling\n     * {@link dc.baseMixin#options .options} on each child chart.\n     * @method childOptions\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Object} [childOptions]\n     * @returns {Object|dc.compositeChart}\n     */\n    _chart.childOptions = function (childOptions) {\n        if (!arguments.length) {\n            return _childOptions;\n        }\n        _childOptions = childOptions;\n        _children.forEach(function (child) {\n            child.options(_childOptions);\n        });\n        return _chart;\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n            child.brush(_chart.brush());\n            child.fadeDeselectedArea();\n        }\n    };\n\n    /**\n     * Set or get the right y axis label.\n     * @method rightYAxisLabel\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {String} [rightYAxisLabel]\n     * @param {Number} [padding]\n     * @returns {String|dc.compositeChart}\n     */\n    _chart.rightYAxisLabel = function (rightYAxisLabel, padding) {\n        if (!arguments.length) {\n            return _rightYAxisLabel;\n        }\n        _rightYAxisLabel = rightYAxisLabel;\n        _chart.margins().right -= _rightYAxisLabelPadding;\n        _rightYAxisLabelPadding = (padding === undefined) ? DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING : padding;\n        _chart.margins().right += _rightYAxisLabelPadding;\n        return _chart;\n    };\n\n    /**\n     * Combine the given charts into one single composite coordinate grid chart.\n     * @method compose\n     * @memberof dc.compositeChart\n     * @instance\n     * @example\n     * moveChart.compose([\n     *     // when creating sub-chart you need to pass in the parent chart\n     *     dc.lineChart(moveChart)\n     *         .group(indexAvgByMonthGroup) // if group is missing then parent's group will be used\n     *         .valueAccessor(function (d){return d.value.avg;})\n     *         // most of the normal functions will continue to work in a composed chart\n     *         .renderArea(true)\n     *         .stack(monthlyMoveGroup, function (d){return d.value;})\n     *         .title(function (d){\n     *             var value = d.value.avg?d.value.avg:d.value;\n     *             if(isNaN(value)) value = 0;\n     *             return dateFormat(d.key) + '\\n' + numberFormat(value);\n     *         }),\n     *     dc.barChart(moveChart)\n     *         .group(volumeByMonthGroup)\n     *         .centerBar(true)\n     * ]);\n     * @param {Array<Chart>} [subChartArray]\n     * @returns {dc.compositeChart}\n     */\n    _chart.compose = function (subChartArray) {\n        _children = subChartArray;\n        _children.forEach(function (child) {\n            child.height(_chart.height());\n            child.width(_chart.width());\n            child.margins(_chart.margins());\n\n            if (_shareTitle) {\n                child.title(_chart.title());\n            }\n\n            child.options(_childOptions);\n        });\n        return _chart;\n    };\n\n    /**\n     * Returns the child charts which are composed into the composite chart.\n     * @method children\n     * @memberof dc.compositeChart\n     * @instance\n     * @returns {Array<dc.baseMixin>}\n     */\n    _chart.children = function () {\n        return _children;\n    };\n\n    /**\n     * Get or set color sharing for the chart. If set, the {@link dc.colorMixin#colors .colors()} value from this chart\n     * will be shared with composed children. Additionally if the child chart implements\n     * Stackable and has not set a custom .colorAccessor, then it will generate a color\n     * specific to its order in the composition.\n     * @method shareColors\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [shareColors=false]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.shareColors = function (shareColors) {\n        if (!arguments.length) {\n            return _shareColors;\n        }\n        _shareColors = shareColors;\n        return _chart;\n    };\n\n    /**\n     * Get or set title sharing for the chart. If set, the {@link dc.baseMixin#title .title()} value from\n     * this chart will be shared with composed children.\n     * @method shareTitle\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [shareTitle=true]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.shareTitle = function (shareTitle) {\n        if (!arguments.length) {\n            return _shareTitle;\n        }\n        _shareTitle = shareTitle;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y scale for the right axis. The right y scale is typically automatically\n     * generated by the chart implementation.\n     * @method rightY\n     * @memberof dc.compositeChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|dc.compositeChart}\n     */\n    _chart.rightY = function (yScale) {\n        if (!arguments.length) {\n            return _rightY;\n        }\n        _rightY = yScale;\n        _chart.rescale();\n        return _chart;\n    };\n\n    /**\n     * Get or set alignment between left and right y axes. A line connecting '0' on both y axis\n     * will be parallel to x axis. This only has effect when {@link #dc.coordinateGridMixin+elasticY elasticY} is true.\n     * @method alignYAxes\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [alignYAxes=false]\n     * @returns {Chart}\n     */\n    _chart.alignYAxes = function (alignYAxes) {\n        if (!arguments.length) {\n            return _alignYAxes;\n        }\n        _alignYAxes = alignYAxes;\n        _chart.rescale();\n        return _chart;\n    };\n\n    function leftYAxisChildren () {\n        return _children.filter(function (child) {\n            return !child.useRightYAxis();\n        });\n    }\n\n    function rightYAxisChildren () {\n        return _children.filter(function (child) {\n            return child.useRightYAxis();\n        });\n    }\n\n    function getYAxisMin (charts) {\n        return charts.map(function (c) {\n            return c.yAxisMin();\n        });\n    }\n\n    delete _chart.yAxisMin;\n    function yAxisMin () {\n        return d3.min(getYAxisMin(leftYAxisChildren()));\n    }\n\n    function rightYAxisMin () {\n        return d3.min(getYAxisMin(rightYAxisChildren()));\n    }\n\n    function getYAxisMax (charts) {\n        return charts.map(function (c) {\n            return c.yAxisMax();\n        });\n    }\n\n    delete _chart.yAxisMax;\n    function yAxisMax () {\n        return dc.utils.add(d3.max(getYAxisMax(leftYAxisChildren())), _chart.yAxisPadding());\n    }\n\n    function rightYAxisMax () {\n        return dc.utils.add(d3.max(getYAxisMax(rightYAxisChildren())), _chart.yAxisPadding());\n    }\n\n    function getAllXAxisMinFromChildCharts () {\n        return _children.map(function (c) {\n            return c.xAxisMin();\n        });\n    }\n\n    dc.override(_chart, 'xAxisMin', function () {\n        return dc.utils.subtract(d3.min(getAllXAxisMinFromChildCharts()), _chart.xAxisPadding());\n    });\n\n    function getAllXAxisMaxFromChildCharts () {\n        return _children.map(function (c) {\n            return c.xAxisMax();\n        });\n    }\n\n    dc.override(_chart, 'xAxisMax', function () {\n        return dc.utils.add(d3.max(getAllXAxisMaxFromChildCharts()), _chart.xAxisPadding());\n    });\n\n    _chart.legendables = function () {\n        return _children.reduce(function (items, child) {\n            if (_shareColors) {\n                child.colors(_chart.colors());\n            }\n            items.push.apply(items, child.legendables());\n            return items;\n        }, []);\n    };\n\n    _chart.legendHighlight = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n            var child = _children[j];\n            child.legendHighlight(d);\n        }\n    };\n\n    _chart.legendReset = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n            var child = _children[j];\n            child.legendReset(d);\n        }\n    };\n\n    _chart.legendToggle = function () {\n        console.log('composite should not be getting legendToggle itself');\n    };\n\n    /**\n     * Set or get the right y axis used by the composite chart. This function is most useful when y\n     * axis customization is required. The y axis in dc.js is an instance of a [d3 axis\n     * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis) therefore it supports any valid\n     * d3 axis manipulation.\n     *\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.\n     * @method rightYAxis\n     * @memberof dc.compositeChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize y axis tick format\n     * chart.rightYAxis().tickFormat(function (v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.rightYAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [rightYAxis]\n     * @returns {d3.svg.axis|dc.compositeChart}\n     */\n    _chart.rightYAxis = function (rightYAxis) {\n        if (!arguments.length) {\n            return _rightYAxis;\n        }\n        _rightYAxis = rightYAxis;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A series chart is a chart that shows multiple series of data overlaid on one chart, where the\n * series is specified in the data. It is a specialization of Composite Chart and inherits all\n * composite features other than recomposing the chart.\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/series.html Series Chart}\n * @class seriesChart\n * @memberof dc\n * @mixes dc.compositeChart\n * @example\n * // create a series chart under #chart-container1 element using the default global chart group\n * var seriesChart1 = dc.seriesChart(\"#chart-container1\");\n * // create a series chart under #chart-container2 element using chart group A\n * var seriesChart2 = dc.seriesChart(\"#chart-container2\", \"chartGroupA\");\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.seriesChart}\n */\ndc.seriesChart = function (parent, chartGroup) {\n    var _chart = dc.compositeChart(parent, chartGroup);\n\n    function keySort (a, b) {\n        return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n    }\n\n    var _charts = {};\n    var _chartFunction = dc.lineChart;\n    var _seriesAccessor;\n    var _seriesSort = d3.ascending;\n    var _valueSort = keySort;\n\n    _chart._mandatoryAttributes().push('seriesAccessor', 'chart');\n    _chart.shareColors(true);\n\n    _chart._preprocessData = function () {\n        var keep = [];\n        var childrenChanged;\n        var nester = d3.nest().key(_seriesAccessor);\n        if (_seriesSort) {\n            nester.sortKeys(_seriesSort);\n        }\n        if (_valueSort) {\n            nester.sortValues(_valueSort);\n        }\n        var nesting = nester.entries(_chart.data());\n        var children =\n            nesting.map(function (sub, i) {\n                var subChart = _charts[sub.key] || _chartFunction.call(_chart, _chart, chartGroup, sub.key, i);\n                if (!_charts[sub.key]) {\n                    childrenChanged = true;\n                }\n                _charts[sub.key] = subChart;\n                keep.push(sub.key);\n                return subChart\n                    .dimension(_chart.dimension())\n                    .group({all: d3.functor(sub.values)}, sub.key)\n                    .keyAccessor(_chart.keyAccessor())\n                    .valueAccessor(_chart.valueAccessor())\n                    .brushOn(_chart.brushOn());\n            });\n        // this works around the fact compositeChart doesn't really\n        // have a removal interface\n        Object.keys(_charts)\n            .filter(function (c) {return keep.indexOf(c) === -1;})\n            .forEach(function (c) {\n                clearChart(c);\n                childrenChanged = true;\n            });\n        _chart._compose(children);\n        if (childrenChanged && _chart.legend()) {\n            _chart.legend().render();\n        }\n    };\n\n    function clearChart (c) {\n        if (_charts[c].g()) {\n            _charts[c].g().remove();\n        }\n        delete _charts[c];\n    }\n\n    function resetChildren () {\n        Object.keys(_charts).map(clearChart);\n        _charts = {};\n    }\n\n    /**\n     * Get or set the chart function, which generates the child charts.\n     * @method chart\n     * @memberof dc.seriesChart\n     * @instance\n     * @example\n     * // put interpolation on the line charts used for the series\n     * chart.chart(function(c) { return dc.lineChart(c).interpolate('basis'); })\n     * // do a scatter series chart\n     * chart.chart(dc.scatterPlot)\n     * @param {Function} [chartFunction=dc.lineChart]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.chart = function (chartFunction) {\n        if (!arguments.length) {\n            return _chartFunction;\n        }\n        _chartFunction = chartFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Get or set accessor function for the displayed series. Given a datum, this function\n     * should return the series that datum belongs to.\n     * @method seriesAccessor\n     * @memberof dc.seriesChart\n     * @instance\n     * @example\n     * // simple series accessor\n     * chart.seriesAccessor(function(d) { return \"Expt: \" + d.key[0]; })\n     * @param {Function} [accessor]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.seriesAccessor = function (accessor) {\n        if (!arguments.length) {\n            return _seriesAccessor;\n        }\n        _seriesAccessor = accessor;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * Get or set a function to sort the list of series by, given series values.\n     * @method seriesSort\n     * @memberof dc.seriesChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.seriesSort(d3.descending);\n     * @param {Function} [sortFunction=d3.ascending]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.seriesSort = function (sortFunction) {\n        if (!arguments.length) {\n            return _seriesSort;\n        }\n        _seriesSort = sortFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * Get or set a function to sort each series values by. By default this is the key accessor which,\n     * for example, will ensure a lineChart series connects its points in increasing key/x order,\n     * rather than haphazardly.\n     * @method valueSort\n     * @memberof dc.seriesChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * // Default value sort\n     * _chart.valueSort(function keySort (a, b) {\n     *     return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n     * });\n     * @param {Function} [sortFunction]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.valueSort = function (sortFunction) {\n        if (!arguments.length) {\n            return _valueSort;\n        }\n        _valueSort = sortFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    // make compose private\n    _chart._compose = _chart.compose;\n    delete _chart.compose;\n\n    return _chart;\n};\n\n/**\n * The geo choropleth chart is designed as an easy way to create a crossfilter driven choropleth map\n * from GeoJson data. This chart implementation was inspired by\n * {@link http://bl.ocks.org/4060606 the great d3 choropleth example}.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n * @class geoChoroplethChart\n * @memberof dc\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a choropleth chart under '#us-chart' element using the default global chart group\n * var chart1 = dc.geoChoroplethChart('#us-chart');\n * // create a choropleth chart under '#us-chart2' element using chart group A\n * var chart2 = dc.compositeChart('#us-chart2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.geoChoroplethChart}\n */\ndc.geoChoroplethChart = function (parent, chartGroup) {\n    var _chart = dc.colorMixin(dc.baseMixin({}));\n\n    _chart.colorAccessor(function (d) {\n        return d || 0;\n    });\n\n    var _geoPath = d3.geo.path();\n    var _projectionFlag;\n\n    var _geoJsons = [];\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n            var states = _chart.svg().append('g')\n                .attr('class', 'layer' + layerIndex);\n\n            var regionG = states.selectAll('g.' + geoJson(layerIndex).name)\n                .data(geoJson(layerIndex).data)\n                .enter()\n                .append('g')\n                .attr('class', geoJson(layerIndex).name);\n\n            regionG\n                .append('path')\n                .attr('fill', 'white')\n                .attr('d', _geoPath);\n\n            regionG.append('title');\n\n            plotData(layerIndex);\n        }\n        _projectionFlag = false;\n    };\n\n    function plotData (layerIndex) {\n        var data = generateLayeredData();\n\n        if (isDataLayer(layerIndex)) {\n            var regionG = renderRegionG(layerIndex);\n\n            renderPaths(regionG, layerIndex, data);\n\n            renderTitle(regionG, layerIndex, data);\n        }\n    }\n\n    function generateLayeredData () {\n        var data = {};\n        var groupAll = _chart.data();\n        for (var i = 0; i < groupAll.length; ++i) {\n            data[_chart.keyAccessor()(groupAll[i])] = _chart.valueAccessor()(groupAll[i]);\n        }\n        return data;\n    }\n\n    function isDataLayer (layerIndex) {\n        return geoJson(layerIndex).keyAccessor;\n    }\n\n    function renderRegionG (layerIndex) {\n        var regionG = _chart.svg()\n            .selectAll(layerSelector(layerIndex))\n            .classed('selected', function (d) {\n                return isSelected(layerIndex, d);\n            })\n            .classed('deselected', function (d) {\n                return isDeselected(layerIndex, d);\n            })\n            .attr('class', function (d) {\n                var layerNameClass = geoJson(layerIndex).name;\n                var regionClass = dc.utils.nameToId(geoJson(layerIndex).keyAccessor(d));\n                var baseClasses = layerNameClass + ' ' + regionClass;\n                if (isSelected(layerIndex, d)) {\n                    baseClasses += ' selected';\n                }\n                if (isDeselected(layerIndex, d)) {\n                    baseClasses += ' deselected';\n                }\n                return baseClasses;\n            });\n        return regionG;\n    }\n\n    function layerSelector (layerIndex) {\n        return 'g.layer' + layerIndex + ' g.' + geoJson(layerIndex).name;\n    }\n\n    function isSelected (layerIndex, d) {\n        return _chart.hasFilter() && _chart.hasFilter(getKey(layerIndex, d));\n    }\n\n    function isDeselected (layerIndex, d) {\n        return _chart.hasFilter() && !_chart.hasFilter(getKey(layerIndex, d));\n    }\n\n    function getKey (layerIndex, d) {\n        return geoJson(layerIndex).keyAccessor(d);\n    }\n\n    function geoJson (index) {\n        return _geoJsons[index];\n    }\n\n    function renderPaths (regionG, layerIndex, data) {\n        var paths = regionG\n            .select('path')\n            .attr('fill', function () {\n                var currentFill = d3.select(this).attr('fill');\n                if (currentFill) {\n                    return currentFill;\n                }\n                return 'none';\n            })\n            .on('click', function (d) {\n                return _chart.onClick(d, layerIndex);\n            });\n\n        dc.transition(paths, _chart.transitionDuration(), _chart.transitionDelay()).attr('fill', function (d, i) {\n            return _chart.getColor(data[geoJson(layerIndex).keyAccessor(d)], i);\n        });\n    }\n\n    _chart.onClick = function (d, layerIndex) {\n        var selectedRegion = geoJson(layerIndex).keyAccessor(d);\n        dc.events.trigger(function () {\n            _chart.filter(selectedRegion);\n            _chart.redrawGroup();\n        });\n    };\n\n    function renderTitle (regionG, layerIndex, data) {\n        if (_chart.renderTitle()) {\n            regionG.selectAll('title').text(function (d) {\n                var key = getKey(layerIndex, d);\n                var value = data[key];\n                return _chart.title()({key: key, value: value});\n            });\n        }\n    }\n\n    _chart._doRedraw = function () {\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n            plotData(layerIndex);\n            if (_projectionFlag) {\n                _chart.svg().selectAll('g.' + geoJson(layerIndex).name + ' path').attr('d', _geoPath);\n            }\n        }\n        _projectionFlag = false;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Use this function to insert a new GeoJson map layer. This function can be invoked multiple times\n     * if you have multiple GeoJson data layers to render on top of each other. If you overlay multiple\n     * layers with the same name the new overlay will override the existing one.\n     * @method overlayGeoJson\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link http://geojson.org/ GeoJSON}\n     * @see {@link https://github.com/topojson/topojson/wiki TopoJSON}\n     * @see {@link https://github.com/topojson/topojson-1.x-api-reference/blob/master/API-Reference.md#wiki-feature topojson.feature}\n     * @example\n     * // insert a layer for rendering US states\n     * chart.overlayGeoJson(statesJson.features, 'state', function(d) {\n     *      return d.properties.name;\n     * });\n     * @param {geoJson} json - a geojson feed\n     * @param {String} name - name of the layer\n     * @param {Function} keyAccessor - accessor function used to extract 'key' from the GeoJson data. The key extracted by\n     * this function should match the keys returned by the crossfilter groups.\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.overlayGeoJson = function (json, name, keyAccessor) {\n        for (var i = 0; i < _geoJsons.length; ++i) {\n            if (_geoJsons[i].name === name) {\n                _geoJsons[i].data = json;\n                _geoJsons[i].keyAccessor = keyAccessor;\n                return _chart;\n            }\n        }\n        _geoJsons.push({name: name, data: json, keyAccessor: keyAccessor});\n        return _chart;\n    };\n\n    /**\n     * Set custom geo projection function. See the available\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3 geo projection functions}.\n     * @method projection\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3.geo.projection}\n     * @see {@link https://github.com/d3/d3-geo-projection Extended d3.geo.projection}\n     * @param {d3.projection} [projection=d3.geo.albersUsa()]\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.projection = function (projection) {\n        _geoPath.projection(projection);\n        _projectionFlag = true;\n        return _chart;\n    };\n\n    /**\n     * Returns all GeoJson layers currently registered with this chart. The returned array is a\n     * reference to this chart's internal data structure, so any modification to this array will also\n     * modify this chart's internal registration.\n     * @method geoJsons\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @returns {Array<{name:String, data: Object, accessor: Function}>}\n     */\n    _chart.geoJsons = function () {\n        return _geoJsons;\n    };\n\n    /**\n     * Returns the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path} object used to\n     * render the projection and features.  Can be useful for figuring out the bounding box of the\n     * feature set and thus a way to calculate scale and translation for the projection.\n     * @method geoPath\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path}\n     * @returns {d3.geo.path}\n     */\n    _chart.geoPath = function () {\n        return _geoPath;\n    };\n\n    /**\n     * Remove a GeoJson layer from this chart by name\n     * @method removeGeoJson\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @param {String} name\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.removeGeoJson = function (name) {\n        var geoJsons = [];\n\n        for (var i = 0; i < _geoJsons.length; ++i) {\n            var layer = _geoJsons[i];\n            if (layer.name !== name) {\n                geoJsons.push(layer);\n            }\n        }\n\n        _geoJsons = geoJsons;\n\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The bubble overlay chart is quite different from the typical bubble chart. With the bubble overlay\n * chart you can arbitrarily place bubbles on an existing svg or bitmap image, thus changing the\n * typical x and y positioning while retaining the capability to visualize data using bubble radius\n * and coloring.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class bubbleOverlay\n * @memberof dc\n * @mixes dc.bubbleMixin\n * @mixes dc.baseMixin\n * @example\n * // create a bubble overlay chart on top of the '#chart-container1 svg' element using the default global chart group\n * var bubbleChart1 = dc.bubbleOverlayChart('#chart-container1').svg(d3.select('#chart-container1 svg'));\n * // create a bubble overlay chart on top of the '#chart-container2 svg' element using chart group A\n * var bubbleChart2 = dc.compositeChart('#chart-container2', 'chartGroupA').svg(d3.select('#chart-container2 svg'));\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.bubbleOverlay}\n */\ndc.bubbleOverlay = function (parent, chartGroup) {\n    var BUBBLE_OVERLAY_CLASS = 'bubble-overlay';\n    var BUBBLE_NODE_CLASS = 'node';\n    var BUBBLE_CLASS = 'bubble';\n\n    /**\n     * **mandatory**\n     *\n     * Set the underlying svg image element. Unlike other dc charts this chart will not generate a svg\n     * element; therefore the bubble overlay chart will not work if this function is not invoked. If the\n     * underlying image is a bitmap, then an empty svg will need to be created on top of the image.\n     * @method svg\n     * @memberof dc.bubbleOverlay\n     * @instance\n     * @example\n     * // set up underlying svg element\n     * chart.svg(d3.select('#chart svg'));\n     * @param {SVGElement|d3.selection} [imageElement]\n     * @returns {dc.bubbleOverlay}\n     */\n    var _chart = dc.bubbleMixin(dc.baseMixin({}));\n    var _g;\n    var _points = [];\n\n    _chart.transitionDuration(750);\n\n    _chart.transitionDelay(0);\n\n    _chart.radiusValueAccessor(function (d) {\n        return d.value;\n    });\n\n    /**\n     * **mandatory**\n     *\n     * Set up a data point on the overlay. The name of a data point should match a specific 'key' among\n     * data groups generated using keyAccessor.  If a match is found (point name <-> data group key)\n     * then a bubble will be generated at the position specified by the function. x and y\n     * value specified here are relative to the underlying svg.\n     * @method point\n     * @memberof dc.bubbleOverlay\n     * @instance\n     * @param {String} name\n     * @param {Number} x\n     * @param {Number} y\n     * @returns {dc.bubbleOverlay}\n     */\n    _chart.point = function (name, x, y) {\n        _points.push({name: name, x: x, y: y});\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        _g = initOverlayG();\n\n        _chart.r().range([_chart.MIN_RADIUS, _chart.width() * _chart.maxBubbleRelativeSize()]);\n\n        initializeBubbles();\n\n        _chart.fadeDeselectedArea();\n\n        return _chart;\n    };\n\n    function initOverlayG () {\n        _g = _chart.select('g.' + BUBBLE_OVERLAY_CLASS);\n        if (_g.empty()) {\n            _g = _chart.svg().append('g').attr('class', BUBBLE_OVERLAY_CLASS);\n        }\n        return _g;\n    }\n\n    function initializeBubbles () {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n            var nodeG = getNodeG(point, data);\n\n            var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n\n            if (circle.empty()) {\n                circle = nodeG.append('circle')\n                    .attr('class', BUBBLE_CLASS)\n                    .attr('r', 0)\n                    .attr('fill', _chart.getColor)\n                    .on('click', _chart.onClick);\n            }\n\n            dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('r', function (d) {\n                    return _chart.bubbleR(d);\n                });\n\n            _chart._doRenderLabel(nodeG);\n\n            _chart._doRenderTitles(nodeG);\n        });\n    }\n\n    function mapData () {\n        var data = {};\n        _chart.data().forEach(function (datum) {\n            data[_chart.keyAccessor()(datum)] = datum;\n        });\n        return data;\n    }\n\n    function getNodeG (point, data) {\n        var bubbleNodeClass = BUBBLE_NODE_CLASS + ' ' + dc.utils.nameToId(point.name);\n\n        var nodeG = _g.select('g.' + dc.utils.nameToId(point.name));\n\n        if (nodeG.empty()) {\n            nodeG = _g.append('g')\n                .attr('class', bubbleNodeClass)\n                .attr('transform', 'translate(' + point.x + ',' + point.y + ')');\n        }\n\n        nodeG.datum(data[point.name]);\n\n        return nodeG;\n    }\n\n    _chart._doRedraw = function () {\n        updateBubbles();\n\n        _chart.fadeDeselectedArea();\n\n        return _chart;\n    };\n\n    function updateBubbles () {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n            var nodeG = getNodeG(point, data);\n\n            var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n\n            dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('r', function (d) {\n                    return _chart.bubbleR(d);\n                })\n                .attr('fill', _chart.getColor);\n\n            _chart.doUpdateLabels(nodeG);\n\n            _chart.doUpdateTitles(nodeG);\n        });\n    }\n\n    _chart.debug = function (flag) {\n        if (flag) {\n            var debugG = _chart.select('g.' + dc.constants.DEBUG_GROUP_CLASS);\n\n            if (debugG.empty()) {\n                debugG = _chart.svg()\n                    .append('g')\n                    .attr('class', dc.constants.DEBUG_GROUP_CLASS);\n            }\n\n            var debugText = debugG.append('text')\n                .attr('x', 10)\n                .attr('y', 20);\n\n            debugG\n                .append('rect')\n                .attr('width', _chart.width())\n                .attr('height', _chart.height())\n                .on('mousemove', function () {\n                    var position = d3.mouse(debugG.node());\n                    var msg = position[0] + ', ' + position[1];\n                    debugText.text(msg);\n                });\n        } else {\n            _chart.selectAll('.debug').remove();\n        }\n\n        return _chart;\n    };\n\n    _chart.anchor(parent, chartGroup);\n\n    return _chart;\n};\n\n/**\n * Concrete row chart implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class rowChart\n * @memberof dc\n * @mixes dc.capMixin\n * @mixes dc.marginMixin\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a row chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.rowChart('#chart-container1');\n * // create a row chart under #chart-container2 element using chart group A\n * var chart2 = dc.rowChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.rowChart}\n */\ndc.rowChart = function (parent, chartGroup) {\n\n    var _g;\n\n    var _labelOffsetX = 10;\n    var _labelOffsetY = 15;\n    var _hasLabelOffsetY = false;\n    var _dyOffset = '0.35em';  // this helps center labels https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#svg_text\n    var _titleLabelOffsetX = 2;\n\n    var _gap = 5;\n\n    var _fixedBarHeight = false;\n    var _rowCssClass = 'row';\n    var _titleRowCssClass = 'titlerow';\n    var _renderTitleLabel = false;\n\n    var _chart = dc.capMixin(dc.marginMixin(dc.colorMixin(dc.baseMixin({}))));\n\n    var _x;\n\n    var _elasticX;\n\n    var _xAxis = d3.svg.axis().orient('bottom');\n\n    var _rowData;\n\n    _chart.rowsCap = _chart.cap;\n\n    function calculateAxisScale () {\n        if (!_x || _elasticX) {\n            var extent = d3.extent(_rowData, _chart.cappedValueAccessor);\n            if (extent[0] > 0) {\n                extent[0] = 0;\n            }\n            if (extent[1] < 0) {\n                extent[1] = 0;\n            }\n            _x = d3.scale.linear().domain(extent)\n                .range([0, _chart.effectiveWidth()]);\n        }\n        _xAxis.scale(_x);\n    }\n\n    function drawAxis () {\n        var axisG = _g.select('g.axis');\n\n        calculateAxisScale();\n\n        if (axisG.empty()) {\n            axisG = _g.append('g').attr('class', 'axis');\n        }\n        axisG.attr('transform', 'translate(0, ' + _chart.effectiveHeight() + ')');\n\n        dc.transition(axisG, _chart.transitionDuration(), _chart.transitionDelay())\n            .call(_xAxis);\n    }\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg()\n            .append('g')\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n\n        drawChart();\n\n        return _chart;\n    };\n\n    _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n    });\n\n    _chart.label(_chart.cappedKeyAccessor);\n\n    /**\n     * Gets or sets the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}.\n     * @method x\n     * @memberof dc.rowChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}\n     * @param {d3.scale} [scale]\n     * @returns {d3.scale|dc.rowChart}\n     */\n    _chart.x = function (scale) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = scale;\n        return _chart;\n    };\n\n    function drawGridLines () {\n        _g.selectAll('g.tick')\n            .select('line.grid-line')\n            .remove();\n\n        _g.selectAll('g.tick')\n            .append('line')\n            .attr('class', 'grid-line')\n            .attr('x1', 0)\n            .attr('y1', 0)\n            .attr('x2', 0)\n            .attr('y2', function () {\n                return -_chart.effectiveHeight();\n            });\n    }\n\n    function drawChart () {\n        _rowData = _chart.data();\n\n        drawAxis();\n        drawGridLines();\n\n        var rows = _g.selectAll('g.' + _rowCssClass)\n            .data(_rowData);\n\n        createElements(rows);\n        removeElements(rows);\n        updateElements(rows);\n    }\n\n    function createElements (rows) {\n        var rowEnter = rows.enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return _rowCssClass + ' _' + i;\n            });\n\n        rowEnter.append('rect').attr('width', 0);\n\n        createLabels(rowEnter);\n    }\n\n    function removeElements (rows) {\n        rows.exit().remove();\n    }\n\n    function rootValue () {\n        var root = _x(0);\n        return (root === -Infinity || root !== root) ? _x(1) : root;\n    }\n\n    function updateElements (rows) {\n        var n = _rowData.length;\n\n        var height;\n        if (!_fixedBarHeight) {\n            height = (_chart.effectiveHeight() - (n + 1) * _gap) / n;\n        } else {\n            height = _fixedBarHeight;\n        }\n\n        // vertically align label in center unless they override the value via property setter\n        if (!_hasLabelOffsetY) {\n            _labelOffsetY = height / 2;\n        }\n\n        var rect = rows.attr('transform', function (d, i) {\n                return 'translate(0,' + ((i + 1) * _gap + i * height) + ')';\n            }).select('rect')\n            .attr('height', height)\n            .attr('fill', _chart.getColor)\n            .on('click', onClick)\n            .classed('deselected', function (d) {\n                return (_chart.hasFilter()) ? !isSelectedRow(d) : false;\n            })\n            .classed('selected', function (d) {\n                return (_chart.hasFilter()) ? isSelectedRow(d) : false;\n            });\n\n        dc.transition(rect, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('width', function (d) {\n                return Math.abs(rootValue() - _x(_chart.valueAccessor()(d)));\n            })\n            .attr('transform', translateX);\n\n        createTitles(rows);\n        updateLabels(rows);\n    }\n\n    function createTitles (rows) {\n        if (_chart.renderTitle()) {\n            rows.select('title').remove();\n            rows.append('title').text(_chart.title());\n        }\n    }\n\n    function createLabels (rowEnter) {\n        if (_chart.renderLabel()) {\n            rowEnter.append('text')\n                .on('click', onClick);\n        }\n        if (_chart.renderTitleLabel()) {\n            rowEnter.append('text')\n                .attr('class', _titleRowCssClass)\n                .on('click', onClick);\n        }\n    }\n\n    function updateLabels (rows) {\n        if (_chart.renderLabel()) {\n            var lab = rows.select('text')\n                .attr('x', _labelOffsetX)\n                .attr('y', _labelOffsetY)\n                .attr('dy', _dyOffset)\n                .on('click', onClick)\n                .attr('class', function (d, i) {\n                    return _rowCssClass + ' _' + i;\n                })\n                .text(function (d) {\n                    return _chart.label()(d);\n                });\n            dc.transition(lab, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', translateX);\n        }\n        if (_chart.renderTitleLabel()) {\n            var titlelab = rows.select('.' + _titleRowCssClass)\n                    .attr('x', _chart.effectiveWidth() - _titleLabelOffsetX)\n                    .attr('y', _labelOffsetY)\n                    .attr('dy', _dyOffset)\n                    .attr('text-anchor', 'end')\n                    .on('click', onClick)\n                    .attr('class', function (d, i) {\n                        return _titleRowCssClass + ' _' + i ;\n                    })\n                    .text(function (d) {\n                        return _chart.title()(d);\n                    });\n            dc.transition(titlelab, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', translateX);\n        }\n    }\n\n    /**\n     * Turn on/off Title label rendering (values) using SVG style of text-anchor 'end'.\n     * @method renderTitleLabel\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Boolean} [renderTitleLabel=false]\n     * @returns {Boolean|dc.rowChart}\n     */\n    _chart.renderTitleLabel = function (renderTitleLabel) {\n        if (!arguments.length) {\n            return _renderTitleLabel;\n        }\n        _renderTitleLabel = renderTitleLabel;\n        return _chart;\n    };\n\n    function onClick (d) {\n        _chart.onClick(d);\n    }\n\n    function translateX (d) {\n        var x = _x(_chart.cappedValueAccessor(d)),\n            x0 = rootValue(),\n            s = x > x0 ? x0 : x;\n        return 'translate(' + s + ',0)';\n    }\n\n    _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n    };\n\n    /**\n     * Get the x axis for the row chart instance.  Note: not settable for row charts.\n     * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object}\n     * documention for more information.\n     * @method xAxis\n     * @memberof dc.rowChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function (v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * @returns {d3.svg.axis}\n     */\n    _chart.xAxis = function () {\n        return _xAxis;\n    };\n\n    /**\n     * Get or set the fixed bar height. Default is [false] which will auto-scale bars.\n     * For example, if you want to fix the height for a specific number of bars (useful in TopN charts)\n     * you could fix height as follows (where count = total number of bars in your TopN and gap is\n     * your vertical gap space).\n     * @method fixedBarHeight\n     * @memberof dc.rowChart\n     * @instance\n     * @example\n     * chart.fixedBarHeight( chartheight - (count + 1) * gap / count);\n     * @param {Boolean|Number} [fixedBarHeight=false]\n     * @returns {Boolean|Number|dc.rowChart}\n     */\n    _chart.fixedBarHeight = function (fixedBarHeight) {\n        if (!arguments.length) {\n            return _fixedBarHeight;\n        }\n        _fixedBarHeight = fixedBarHeight;\n        return _chart;\n    };\n\n    /**\n     * Get or set the vertical gap space between rows on a particular row chart instance.\n     * @method gap\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [gap=5]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _chart;\n    };\n\n    /**\n     * Get or set the elasticity on x axis. If this attribute is set to true, then the x axis will rescle to auto-fit the\n     * data range when filtered.\n     * @method elasticX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Boolean} [elasticX]\n     * @returns {Boolean|dc.rowChart}\n     */\n    _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n            return _elasticX;\n        }\n        _elasticX = elasticX;\n        return _chart;\n    };\n\n    /**\n     * Get or set the x offset (horizontal space to the top left corner of a row) for labels on a particular row chart.\n     * @method labelOffsetX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [labelOffsetX=10]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.labelOffsetX = function (labelOffsetX) {\n        if (!arguments.length) {\n            return _labelOffsetX;\n        }\n        _labelOffsetX = labelOffsetX;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y offset (vertical space to the top left corner of a row) for labels on a particular row chart.\n     * @method labelOffsetY\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [labelOffsety=15]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.labelOffsetY = function (labelOffsety) {\n        if (!arguments.length) {\n            return _labelOffsetY;\n        }\n        _labelOffsetY = labelOffsety;\n        _hasLabelOffsetY = true;\n        return _chart;\n    };\n\n    /**\n     * Get of set the x offset (horizontal space between right edge of row and right edge or text.\n     * @method titleLabelOffsetX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [titleLabelOffsetX=2]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.titleLabelOffsetX = function (titleLabelOffsetX) {\n        if (!arguments.length) {\n            return _titleLabelOffsetX;\n        }\n        _titleLabelOffsetX = titleLabelOffsetX;\n        return _chart;\n    };\n\n    function isSelectedRow (d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d));\n    }\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Legend is a attachable widget that can be added to other dc charts to render horizontal legend\n * labels.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class legend\n * @memberof dc\n * @example\n * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n * @returns {dc.legend}\n */\ndc.legend = function () {\n    var LABEL_GAP = 2;\n\n    var _legend = {},\n        _parent,\n        _x = 0,\n        _y = 0,\n        _itemHeight = 12,\n        _gap = 5,\n        _horizontal = false,\n        _legendWidth = 560,\n        _itemWidth = 70,\n        _autoItemWidth = false,\n        _legendText = dc.pluck('name'),\n        _maxItems;\n\n    var _g;\n\n    _legend.parent = function (p) {\n        if (!arguments.length) {\n            return _parent;\n        }\n        _parent = p;\n        return _legend;\n    };\n\n    _legend.render = function () {\n        _parent.svg().select('g.dc-legend').remove();\n        _g = _parent.svg().append('g')\n            .attr('class', 'dc-legend')\n            .attr('transform', 'translate(' + _x + ',' + _y + ')');\n        var legendables = _parent.legendables();\n\n        if (_maxItems !== undefined) {\n            legendables = legendables.slice(0, _maxItems);\n        }\n\n        var itemEnter = _g.selectAll('g.dc-legend-item')\n            .data(legendables)\n            .enter()\n            .append('g')\n            .attr('class', 'dc-legend-item')\n            .on('mouseover', function (d) {\n                _parent.legendHighlight(d);\n            })\n            .on('mouseout', function (d) {\n                _parent.legendReset(d);\n            })\n            .on('click', function (d) {\n                d.chart.legendToggle(d);\n            });\n\n        _g.selectAll('g.dc-legend-item')\n            .classed('fadeout', function (d) {\n                return d.chart.isLegendableHidden(d);\n            });\n\n        if (legendables.some(dc.pluck('dashstyle'))) {\n            itemEnter\n                .append('line')\n                .attr('x1', 0)\n                .attr('y1', _itemHeight / 2)\n                .attr('x2', _itemHeight)\n                .attr('y2', _itemHeight / 2)\n                .attr('stroke-width', 2)\n                .attr('stroke-dasharray', dc.pluck('dashstyle'))\n                .attr('stroke', dc.pluck('color'));\n        } else {\n            itemEnter\n                .append('rect')\n                .attr('width', _itemHeight)\n                .attr('height', _itemHeight)\n                .attr('fill', function (d) {return d ? d.color : 'blue';});\n        }\n\n        itemEnter.append('text')\n                .text(_legendText)\n                .attr('x', _itemHeight + LABEL_GAP)\n                .attr('y', function () {\n                    return _itemHeight / 2 + (this.clientHeight ? this.clientHeight : 13) / 2 - 2;\n                });\n\n        var _cumulativeLegendTextWidth = 0;\n        var row = 0;\n        itemEnter.attr('transform', function (d, i) {\n            if (_horizontal) {\n                var itemWidth   = _autoItemWidth === true ? this.getBBox().width + _gap : _itemWidth;\n                if ((_cumulativeLegendTextWidth + itemWidth) > _legendWidth && _cumulativeLegendTextWidth > 0) {\n                    ++row;\n                    _cumulativeLegendTextWidth = 0;\n                }\n                var translateBy = 'translate(' + _cumulativeLegendTextWidth + ',' + row * legendItemHeight() + ')';\n                _cumulativeLegendTextWidth += itemWidth;\n                return translateBy;\n            } else {\n                return 'translate(0,' + i * legendItemHeight() + ')';\n            }\n        });\n    };\n\n    function legendItemHeight () {\n        return _gap + _itemHeight;\n    }\n\n    /**\n     * Set or get x coordinate for legend widget.\n     * @method x\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [x=0]\n     * @returns {Number|dc.legend}\n     */\n    _legend.x = function (x) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = x;\n        return _legend;\n    };\n\n    /**\n     * Set or get y coordinate for legend widget.\n     * @method y\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [y=0]\n     * @returns {Number|dc.legend}\n     */\n    _legend.y = function (y) {\n        if (!arguments.length) {\n            return _y;\n        }\n        _y = y;\n        return _legend;\n    };\n\n    /**\n     * Set or get gap between legend items.\n     * @method gap\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [gap=5]\n     * @returns {Number|dc.legend}\n     */\n    _legend.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _legend;\n    };\n\n    /**\n     * Set or get legend item height.\n     * @method itemHeight\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [itemHeight=12]\n     * @returns {Number|dc.legend}\n     */\n    _legend.itemHeight = function (itemHeight) {\n        if (!arguments.length) {\n            return _itemHeight;\n        }\n        _itemHeight = itemHeight;\n        return _legend;\n    };\n\n    /**\n     * Position legend horizontally instead of vertically.\n     * @method horizontal\n     * @memberof dc.legend\n     * @instance\n     * @param  {Boolean} [horizontal=false]\n     * @returns {Boolean|dc.legend}\n     */\n    _legend.horizontal = function (horizontal) {\n        if (!arguments.length) {\n            return _horizontal;\n        }\n        _horizontal = horizontal;\n        return _legend;\n    };\n\n    /**\n     * Maximum width for horizontal legend.\n     * @method legendWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [legendWidth=500]\n     * @returns {Number|dc.legend}\n     */\n    _legend.legendWidth = function (legendWidth) {\n        if (!arguments.length) {\n            return _legendWidth;\n        }\n        _legendWidth = legendWidth;\n        return _legend;\n    };\n\n    /**\n     * Legend item width for horizontal legend.\n     * @method itemWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [itemWidth=70]\n     * @returns {Number|dc.legend}\n     */\n    _legend.itemWidth = function (itemWidth) {\n        if (!arguments.length) {\n            return _itemWidth;\n        }\n        _itemWidth = itemWidth;\n        return _legend;\n    };\n\n    /**\n     * Turn automatic width for legend items on or off. If true, {@link dc.legend#itemWidth itemWidth} is ignored.\n     * This setting takes into account the {@link dc.legend#gap gap}.\n     * @method autoItemWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Boolean} [autoItemWidth=false]\n     * @returns {Boolean|dc.legend}\n     */\n    _legend.autoItemWidth = function (autoItemWidth) {\n        if (!arguments.length) {\n            return _autoItemWidth;\n        }\n        _autoItemWidth = autoItemWidth;\n        return _legend;\n    };\n\n    /**\n     * Set or get the legend text function. The legend widget uses this function to render the legend\n     * text for each item. If no function is specified the legend widget will display the names\n     * associated with each group.\n     * @method legendText\n     * @memberof dc.legend\n     * @instance\n     * @param  {Function} [legendText]\n     * @returns {Function|dc.legend}\n     * @example\n     * // default legendText\n     * legend.legendText(dc.pluck('name'))\n     *\n     * // create numbered legend items\n     * chart.legend(dc.legend().legendText(function(d, i) { return i + '. ' + d.name; }))\n     *\n     * // create legend displaying group counts\n     * chart.legend(dc.legend().legendText(function(d) { return d.name + ': ' d.data; }))\n     **/\n    _legend.legendText = function (legendText) {\n        if (!arguments.length) {\n            return _legendText;\n        }\n        _legendText = legendText;\n        return _legend;\n    };\n\n    /**\n     * Maximum number of legend items to display\n     * @method maxItems\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [maxItems]\n     * @return {dc.legend}\n     */\n    _legend.maxItems = function (maxItems) {\n        if (!arguments.length) {\n            return _maxItems;\n        }\n        _maxItems = dc.utils.isNumber(maxItems) ? maxItems : undefined;\n        return _legend;\n    };\n\n    return _legend;\n};\n\n/**\n * A scatter plot chart\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/scatter.html Scatter Chart}\n * - {@link http://dc-js.github.io/dc.js/examples/multi-scatter.html Multi-Scatter Chart}\n * @class scatterPlot\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a scatter plot under #chart-container1 element using the default global chart group\n * var chart1 = dc.scatterPlot('#chart-container1');\n * // create a scatter plot under #chart-container2 element using chart group A\n * var chart2 = dc.scatterPlot('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.scatterPlot(compositeChart);\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.scatterPlot}\n */\ndc.scatterPlot = function (parent, chartGroup) {\n    var _chart = dc.coordinateGridMixin({});\n    var _symbol = d3.svg.symbol();\n\n    var _existenceAccessor = function (d) { return d.value; };\n\n    var originalKeyAccessor = _chart.keyAccessor();\n    _chart.keyAccessor(function (d) { return originalKeyAccessor(d)[0]; });\n    _chart.valueAccessor(function (d) { return originalKeyAccessor(d)[1]; });\n    _chart.colorAccessor(function () { return _chart._groupName; });\n\n    _chart.title(function (d) {\n        // this basically just counteracts the setting of its own key/value accessors\n        // see https://github.com/dc-js/dc.js/issues/702\n        return _chart.keyAccessor()(d) + ',' + _chart.valueAccessor()(d) + ': ' +\n            _chart.existenceAccessor()(d);\n    });\n\n    var _locator = function (d) {\n        return 'translate(' + _chart.x()(_chart.keyAccessor()(d)) + ',' +\n                              _chart.y()(_chart.valueAccessor()(d)) + ')';\n    };\n\n    var _highlightedSize = 7;\n    var _symbolSize = 5;\n    var _excludedSize = 3;\n    var _excludedColor = null;\n    var _excludedOpacity = 1.0;\n    var _emptySize = 0;\n    var _emptyOpacity = 0;\n    var _nonemptyOpacity = 1;\n    var _emptyColor = null;\n    var _filtered = [];\n\n    function elementSize (d, i) {\n        if (!_existenceAccessor(d)) {\n            return Math.pow(_emptySize, 2);\n        } else if (_filtered[i]) {\n            return Math.pow(_symbolSize, 2);\n        } else {\n            return Math.pow(_excludedSize, 2);\n        }\n    }\n    _symbol.size(elementSize);\n\n    dc.override(_chart, '_filter', function (filter) {\n        if (!arguments.length) {\n            return _chart.__filter();\n        }\n\n        return _chart.__filter(dc.filters.RangedTwoDimensionalFilter(filter));\n    });\n\n    _chart.plotData = function () {\n        var symbols = _chart.chartBodyG().selectAll('path.symbol')\n            .data(_chart.data());\n\n        symbols\n            .enter()\n        .append('path')\n            .attr('class', 'symbol')\n            .attr('opacity', 0)\n            .attr('fill', _chart.getColor)\n            .attr('transform', _locator);\n\n        symbols.call(renderTitles, _chart.data());\n\n        symbols.each(function (d, i) {\n            _filtered[i] = !_chart.filter() || _chart.filter().isFiltered([d.key[0], d.key[1]]);\n        });\n\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('opacity', function (d, i) {\n                if (!_existenceAccessor(d)) {\n                    return _emptyOpacity;\n                } else if (_filtered[i]) {\n                    return _nonemptyOpacity;\n                } else {\n                    return _chart.excludedOpacity();\n                }\n            })\n            .attr('fill', function (d, i) {\n                if (_emptyColor && !_existenceAccessor(d)) {\n                    return _emptyColor;\n                } else if (_chart.excludedColor() && !_filtered[i]) {\n                    return _chart.excludedColor();\n                } else {\n                    return _chart.getColor(d);\n                }\n            })\n            .attr('transform', _locator)\n            .attr('d', _symbol);\n\n        dc.transition(symbols.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('opacity', 0).remove();\n    };\n\n    function renderTitles (symbol, d) {\n        if (_chart.renderTitle()) {\n            symbol.selectAll('title').remove();\n            symbol.append('title').text(function (d) {\n                return _chart.title()(d);\n            });\n        }\n    }\n\n    /**\n     * Get or set the existence accessor.  If a point exists, it is drawn with\n     * {@link dc.scatterPlot#symbolSize symbolSize} radius and\n     * opacity 1; if it does not exist, it is drawn with\n     * {@link dc.scatterPlot#emptySize emptySize} radius and opacity 0. By default,\n     * the existence accessor checks if the reduced value is truthy.\n     * @method existenceAccessor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link dc.scatterPlot#symbolSize symbolSize}\n     * @see {@link dc.scatterPlot#emptySize emptySize}\n     * @example\n     * // default accessor\n     * chart.existenceAccessor(function (d) { return d.value; });\n     * @param {Function} [accessor]\n     * @returns {Function|dc.scatterPlot}\n     */\n    _chart.existenceAccessor = function (accessor) {\n        if (!arguments.length) {\n            return _existenceAccessor;\n        }\n        _existenceAccessor = accessor;\n        return this;\n    };\n\n    /**\n     * Get or set the symbol type used for each point. By default the symbol is a circle.\n     * Type can be a constant or an accessor.\n     * @method symbol\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_type d3.svg.symbol.type}\n     * @example\n     * // Circle type\n     * chart.symbol('circle');\n     * // Square type\n     * chart.symbol('square');\n     * @param {String|Function} [type='circle']\n     * @returns {String|Function|dc.scatterPlot}\n     */\n    _chart.symbol = function (type) {\n        if (!arguments.length) {\n            return _symbol.type();\n        }\n        _symbol.type(type);\n        return _chart;\n    };\n\n    /**\n     * Get or set the symbol generator. By default `dc.scatterPlot` will use\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol()}\n     * to generate symbols. `dc.scatterPlot` will set the\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size size accessor}\n     * on the symbol generator.\n     * @method customSymbol\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol}\n     * @see {@link https://stackoverflow.com/questions/25332120/create-additional-d3-js-symbols Create additional D3.js symbols}\n     * @param {String|Function} [customSymbol=d3.svg.symbol()]\n     * @returns {String|Function|dc.scatterPlot}\n     */\n    _chart.customSymbol = function (customSymbol) {\n        if (!arguments.length) {\n            return _symbol;\n        }\n        _symbol = customSymbol;\n        _symbol.size(elementSize);\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for symbols.\n     * @method symbolSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [symbolSize=3]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.symbolSize = function (symbolSize) {\n        if (!arguments.length) {\n            return _symbolSize;\n        }\n        _symbolSize = symbolSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for highlighted symbols.\n     * @method highlightedSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [highlightedSize=5]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.highlightedSize = function (highlightedSize) {\n        if (!arguments.length) {\n            return _highlightedSize;\n        }\n        _highlightedSize = highlightedSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get size for symbols excluded from this chart's filter. If null, no\n     * special size is applied for symbols based on their filter status.\n     * @method excludedSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [excludedSize=null]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedSize = function (excludedSize) {\n        if (!arguments.length) {\n            return _excludedSize;\n        }\n        _excludedSize = excludedSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get color for symbols excluded from this chart's filter. If null, no\n     * special color is applied for symbols based on their filter status.\n     * @method excludedColor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [excludedColor=null]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedColor = function (excludedColor) {\n        if (!arguments.length) {\n            return _excludedColor;\n        }\n        _excludedColor = excludedColor;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols excluded from this chart's filter.\n     * @method excludedOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [excludedOpacity=1.0]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedOpacity = function (excludedOpacity) {\n        if (!arguments.length) {\n            return _excludedOpacity;\n        }\n        _excludedOpacity = excludedOpacity;\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for symbols when the group is empty.\n     * @method emptySize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [emptySize=0]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.hiddenSize = _chart.emptySize = function (emptySize) {\n        if (!arguments.length) {\n            return _emptySize;\n        }\n        _emptySize = emptySize;\n        return _chart;\n    };\n\n    /**\n     * Set or get color for symbols when the group is empty. If null, just use the\n     * {@link dc.colorMixin#colors colorMixin.colors} color scale zero value.\n     * @name emptyColor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {String} [emptyColor=null]\n     * @return {String}\n     * @return {dc.scatterPlot}/\n     */\n    _chart.emptyColor = function (emptyColor) {\n        if (!arguments.length) {\n            return _emptyColor;\n        }\n        _emptyColor = emptyColor;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols when the group is empty.\n     * @name emptyOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [emptyOpacity=0]\n     * @return {Number}\n     * @return {dc.scatterPlot}\n     */\n    _chart.emptyOpacity = function (emptyOpacity) {\n        if (!arguments.length) {\n            return _emptyOpacity;\n        }\n        _emptyOpacity = emptyOpacity;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols when the group is not empty.\n     * @name nonemptyOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [nonemptyOpacity=1]\n     * @return {Number}\n     * @return {dc.scatterPlot}\n     */\n    _chart.nonemptyOpacity = function (nonemptyOpacity) {\n        if (!arguments.length) {\n            return _emptyOpacity;\n        }\n        _nonemptyOpacity = nonemptyOpacity;\n        return _chart;\n    };\n\n    _chart.legendables = function () {\n        return [{chart: _chart, name: _chart._groupName, color: _chart.getColor()}];\n    };\n\n    _chart.legendHighlight = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n            return symbol.attr('fill') === d.color;\n        }, _highlightedSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', true);\n    };\n\n    _chart.legendReset = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n            return symbol.attr('fill') === d.color;\n        }, _symbolSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', false);\n    };\n\n    function resizeSymbolsWhere (condition, size) {\n        var symbols = _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return condition(d3.select(this));\n        });\n        var oldSize = _symbol.size();\n        _symbol.size(Math.pow(size, 2));\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay()).attr('d', _symbol);\n        _symbol.size(oldSize);\n    }\n\n    _chart.setHandlePaths = function () {\n        // no handle paths for poly-brushes\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n        if (_chart.round()) {\n            extent[0] = extent[0].map(_chart.round());\n            extent[1] = extent[1].map(_chart.round());\n\n            _chart.g().select('.brush')\n                .call(_chart.brush().extent(extent));\n        }\n        return extent;\n    };\n\n    _chart.brushIsEmpty = function (extent) {\n        return _chart.brush().empty() || !extent || extent[0][0] >= extent[1][0] || extent[0][1] >= extent[1][1];\n    };\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n\n        _chart.redrawBrush(_chart.g());\n\n        if (_chart.brushIsEmpty(extent)) {\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.redrawGroup();\n            });\n\n        } else {\n            var ranged2DFilter = dc.filters.RangedTwoDimensionalFilter(extent);\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.filter(ranged2DFilter);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n\n        }\n    };\n\n    _chart.setBrushY = function (gBrush) {\n        gBrush.call(_chart.brush().y(_chart.y()));\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A display of a single numeric value.\n * Unlike other charts, you do not need to set a dimension. Instead a group object must be provided and\n * a valueAccessor that returns a single value.\n * @class numberDisplay\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * // create a number display under #chart-container1 element using the default global chart group\n * var display1 = dc.numberDisplay('#chart-container1');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.numberDisplay}\n */\ndc.numberDisplay = function (parent, chartGroup) {\n    var SPAN_CLASS = 'number-display';\n    var _formatNumber = d3.format('.2s');\n    var _chart = dc.baseMixin({});\n    var _html = {one: '', some: '', none: ''};\n    var _lastValue;\n\n    // dimension not required\n    _chart._mandatoryAttributes(['group']);\n\n    // default to ordering by value, to emulate old group.top(1) behavior when multiple groups\n    _chart.ordering(function (kv) { return kv.value; });\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending on the number\n     * displayed.  The text `%number` will be replaced with the current value.\n     * - one: HTML template to use if the number is 1\n     * - zero: HTML template to use if the number is 0\n     * - some: HTML template to use otherwise\n     * @method html\n     * @memberof dc.numberDisplay\n     * @instance\n     * @example\n     * numberWidget.html({\n     *      one:'%number record',\n     *      some:'%number records',\n     *      none:'no records'})\n     * @param {{one:String, some:String, none:String}} [html={one: '', some: '', none: ''}]\n     * @returns {{one:String, some:String, none:String}|dc.numberDisplay}\n     */\n    _chart.html = function (html) {\n        if (!arguments.length) {\n            return _html;\n        }\n        if (html.none) {\n            _html.none = html.none;//if none available\n        } else if (html.one) {\n            _html.none = html.one;//if none not available use one\n        } else if (html.some) {\n            _html.none = html.some;//if none and one not available use some\n        }\n        if (html.one) {\n            _html.one = html.one;//if one available\n        } else if (html.some) {\n            _html.one = html.some;//if one not available use some\n        }\n        if (html.some) {\n            _html.some = html.some;//if some available\n        } else if (html.one) {\n            _html.some = html.one;//if some not available use one\n        }\n        return _chart;\n    };\n\n    /**\n     * Calculate and return the underlying value of the display.\n     * @method value\n     * @memberof dc.numberDisplay\n     * @instance\n     * @returns {Number}\n     */\n    _chart.value = function () {\n        return _chart.data();\n    };\n\n    function maxBin (all) {\n        if (!all.length) {\n            return null;\n        }\n        var sorted = _chart._computeOrderedGroups(all);\n        return sorted[sorted.length - 1];\n    }\n    _chart.data(function (group) {\n        var valObj = group.value ? group.value() : maxBin(group.all());\n        return _chart.valueAccessor()(valObj);\n    });\n\n    _chart.transitionDuration(250); // good default\n    _chart.transitionDelay(0);\n\n    _chart._doRender = function () {\n        var newValue = _chart.value(),\n            span = _chart.selectAll('.' + SPAN_CLASS);\n\n        if (span.empty()) {\n            span = span.data([0])\n                .enter()\n                .append('span')\n                .attr('class', SPAN_CLASS);\n        }\n\n        span.transition()\n            .duration(_chart.transitionDuration())\n            .delay(_chart.transitionDelay())\n            .ease('quad-out-in')\n            .tween('text', function () {\n                // [XA] don't try and interpolate from Infinity, else this breaks.\n                var interpStart = isFinite(_lastValue) ? _lastValue : 0;\n                var interp = d3.interpolateNumber(interpStart || 0, newValue);\n                _lastValue = newValue;\n                return function (t) {\n                    var html = null, num = _chart.formatNumber()(interp(t));\n                    if (newValue === 0 && (_html.none !== '')) {\n                        html = _html.none;\n                    } else if (newValue === 1 && (_html.one !== '')) {\n                        html = _html.one;\n                    } else if (_html.some !== '') {\n                        html = _html.some;\n                    }\n                    this.innerHTML = html ? html.replace('%number', num) : num;\n                };\n            });\n    };\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set a function to format the value for the display.\n     * @method formatNumber\n     * @memberof dc.numberDisplay\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n     * @param {Function} [formatter=d3.format('.2s')]\n     * @returns {Function|dc.numberDisplay}\n     */\n    _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n            return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A heat map is matrix that represents the values of two dimensions of data using colors.\n * @class heatMap\n * @memberof dc\n * @mixes dc.colorMixin\n * @mixes dc.marginMixin\n * @mixes dc.baseMixin\n * @example\n * // create a heat map under #chart-container1 element using the default global chart group\n * var heatMap1 = dc.heatMap('#chart-container1');\n * // create a heat map under #chart-container2 element using chart group A\n * var heatMap2 = dc.heatMap('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.heatMap}\n */\ndc.heatMap = function (parent, chartGroup) {\n\n    var DEFAULT_BORDER_RADIUS = 6.75;\n\n    var _chartBody;\n\n    var _cols;\n    var _rows;\n    var _colOrdering = d3.ascending;\n    var _rowOrdering = d3.ascending;\n    var _colScale = d3.scale.ordinal();\n    var _rowScale = d3.scale.ordinal();\n\n    var _xBorderRadius = DEFAULT_BORDER_RADIUS;\n    var _yBorderRadius = DEFAULT_BORDER_RADIUS;\n\n    var _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin({})));\n    _chart._mandatoryAttributes(['group']);\n    _chart.title(_chart.colorAccessor());\n\n    var _colsLabel = function (d) {\n        return d;\n    };\n    var _rowsLabel = function (d) {\n        return d;\n    };\n\n    /**\n     * Set or get the column label function. The chart class uses this function to render\n     * column labels on the X axis. It is passed the column name.\n     * @method colsLabel\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // the default label function just returns the name\n     * chart.colsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.colsLabel = function (labelFunction) {\n        if (!arguments.length) {\n            return _colsLabel;\n        }\n        _colsLabel = labelFunction;\n        return _chart;\n    };\n\n    /**\n     * Set or get the row label function. The chart class uses this function to render\n     * row labels on the Y axis. It is passed the row name.\n     * @method rowsLabel\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // the default label function just returns the name\n     * chart.rowsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.rowsLabel = function (labelFunction) {\n        if (!arguments.length) {\n            return _rowsLabel;\n        }\n        _rowsLabel = labelFunction;\n        return _chart;\n    };\n\n    var _xAxisOnClick = function (d) { filterAxis(0, d); };\n    var _yAxisOnClick = function (d) { filterAxis(1, d); };\n    var _boxOnClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    function filterAxis (axis, value) {\n        var cellsOnAxis = _chart.selectAll('.box-group').filter(function (d) {\n            return d.key[axis] === value;\n        });\n        var unfilteredCellsOnAxis = cellsOnAxis.filter(function (d) {\n            return !_chart.hasFilter(d.key);\n        });\n        dc.events.trigger(function () {\n            var selection = unfilteredCellsOnAxis.empty() ? cellsOnAxis : unfilteredCellsOnAxis;\n            var filters = selection.data().map(function (kv) {\n                return dc.filters.TwoDimensionalFilter(kv.key);\n            });\n            _chart._filter([filters]);\n            _chart.redrawGroup();\n        });\n    }\n\n    dc.override(_chart, 'filter', function (filter) {\n        if (!arguments.length) {\n            return _chart._filter();\n        }\n\n        return _chart._filter(dc.filters.TwoDimensionalFilter(filter));\n    });\n\n    /**\n     * Gets or sets the values used to create the rows of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the value accessor.\n     * @method rows\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Array<String|Number>} [rows]\n     * @returns {Array<String|Number>|dc.heatMap}\n     */\n\n    _chart.rows = function (rows) {\n        if (!arguments.length) {\n            return _rows;\n        }\n        _rows = rows;\n        return _chart;\n    };\n\n    /**\n     #### .rowOrdering([orderFunction])\n     Get or set an accessor to order the rows.  Default is d3.ascending.\n     */\n    _chart.rowOrdering = function (_) {\n        if (!arguments.length) {\n            return _rowOrdering;\n        }\n        _rowOrdering = _;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the keys used to create the columns of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the key accessor.\n     * @method cols\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Array<String|Number>} [cols]\n     * @returns {Array<String|Number>|dc.heatMap}\n     */\n    _chart.cols = function (cols) {\n        if (!arguments.length) {\n            return _cols;\n        }\n        _cols = cols;\n        return _chart;\n    };\n\n    /**\n     #### .colOrdering([orderFunction])\n     Get or set an accessor to order the cols.  Default is ascending.\n     */\n    _chart.colOrdering = function (_) {\n        if (!arguments.length) {\n            return _colOrdering;\n        }\n        _colOrdering = _;\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chartBody = _chart.svg()\n            .append('g')\n            .attr('class', 'heatmap')\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n\n        return _chart._doRedraw();\n    };\n\n    _chart._doRedraw = function () {\n        var data = _chart.data(),\n            rows = _chart.rows() || data.map(_chart.valueAccessor()),\n            cols = _chart.cols() || data.map(_chart.keyAccessor());\n        if (_rowOrdering) {\n            rows = rows.sort(_rowOrdering);\n        }\n        if (_colOrdering) {\n            cols = cols.sort(_colOrdering);\n        }\n        rows = _rowScale.domain(rows);\n        cols = _colScale.domain(cols);\n\n        var rowCount = rows.domain().length,\n            colCount = cols.domain().length,\n            boxWidth = Math.floor(_chart.effectiveWidth() / colCount),\n            boxHeight = Math.floor(_chart.effectiveHeight() / rowCount);\n\n        cols.rangeRoundBands([0, _chart.effectiveWidth()]);\n        rows.rangeRoundBands([_chart.effectiveHeight(), 0]);\n\n        var boxes = _chartBody.selectAll('g.box-group').data(_chart.data(), function (d, i) {\n            return _chart.keyAccessor()(d, i) + '\\0' + _chart.valueAccessor()(d, i);\n        });\n        var gEnter = boxes.enter().append('g')\n            .attr('class', 'box-group');\n\n        gEnter.append('rect')\n            .attr('class', 'heat-box')\n            .attr('fill', 'white')\n            .on('click', _chart.boxOnClick());\n\n        if (_chart.renderTitle()) {\n            gEnter.append('title');\n            boxes.select('title').text(_chart.title());\n        }\n\n        dc.transition(boxes.select('rect'), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d, i) { return cols(_chart.keyAccessor()(d, i)); })\n            .attr('y', function (d, i) { return rows(_chart.valueAccessor()(d, i)); })\n            .attr('rx', _xBorderRadius)\n            .attr('ry', _yBorderRadius)\n            .attr('fill', _chart.getColor)\n            .attr('width', boxWidth)\n            .attr('height', boxHeight);\n\n        boxes.exit().remove();\n\n        var gCols = _chartBody.select('g.cols');\n        if (gCols.empty()) {\n            gCols = _chartBody.append('g').attr('class', 'cols axis');\n        }\n        var gColsText = gCols.selectAll('text').data(cols.domain());\n        gColsText.enter().append('text')\n              .attr('x', function (d) { return cols(d) + boxWidth / 2; })\n              .style('text-anchor', 'middle')\n              .attr('y', _chart.effectiveHeight())\n              .attr('dy', 12)\n              .on('click', _chart.xAxisOnClick())\n              .text(_chart.colsLabel());\n        dc.transition(gColsText, _chart.transitionDuration(), _chart.transitionDelay())\n               .text(_chart.colsLabel())\n               .attr('x', function (d) { return cols(d) + boxWidth / 2; })\n               .attr('y', _chart.effectiveHeight());\n        gColsText.exit().remove();\n        var gRows = _chartBody.select('g.rows');\n        if (gRows.empty()) {\n            gRows = _chartBody.append('g').attr('class', 'rows axis');\n        }\n        var gRowsText = gRows.selectAll('text').data(rows.domain());\n        gRowsText.enter().append('text')\n              .attr('dy', 6)\n              .style('text-anchor', 'end')\n              .attr('x', 0)\n              .attr('dx', -2)\n              .on('click', _chart.yAxisOnClick())\n              .text(_chart.rowsLabel());\n        dc.transition(gRowsText, _chart.transitionDuration(), _chart.transitionDelay())\n              .text(_chart.rowsLabel())\n              .attr('y', function (d) { return rows(d) + boxHeight / 2; });\n        gRowsText.exit().remove();\n\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.box-group').each(function (d) {\n                if (_chart.isSelectedNode(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.box-group').each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when an individual cell is clicked in the heatmap.\n     * By default, filtering of the cell will be toggled.\n     * @method boxOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // default box on click handler\n     * chart.boxOnClick(function (d) {\n     *     var filter = d.key;\n     *     dc.events.trigger(function () {\n     *         _chart.filter(filter);\n     *         _chart.redrawGroup();\n     *     });\n     * });\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.boxOnClick = function (handler) {\n        if (!arguments.length) {\n            return _boxOnClick;\n        }\n        _boxOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when a column tick is clicked in the x axis.\n     * By default, if any cells in the column are unselected, the whole column will be selected,\n     * otherwise the whole column will be unselected.\n     * @method xAxisOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.xAxisOnClick = function (handler) {\n        if (!arguments.length) {\n            return _xAxisOnClick;\n        }\n        _xAxisOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when a row tick is clicked in the y axis.\n     * By default, if any cells in the row are unselected, the whole row will be selected,\n     * otherwise the whole row will be unselected.\n     * @method yAxisOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.yAxisOnClick = function (handler) {\n        if (!arguments.length) {\n            return _yAxisOnClick;\n        }\n        _yAxisOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the X border radius.  Set to 0 to get full rectangles.\n     * @method xBorderRadius\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Number} [xBorderRadius=6.75]\n     * @returns {Number|dc.heatMap}\n     */\n    _chart.xBorderRadius = function (xBorderRadius) {\n        if (!arguments.length) {\n            return _xBorderRadius;\n        }\n        _xBorderRadius = xBorderRadius;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the Y border radius.  Set to 0 to get full rectangles.\n     * @method yBorderRadius\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Number} [yBorderRadius=6.75]\n     * @returns {Number|dc.heatMap}\n     */\n    _chart.yBorderRadius = function (yBorderRadius) {\n        if (!arguments.length) {\n            return _yBorderRadius;\n        }\n        _yBorderRadius = yBorderRadius;\n        return _chart;\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n// https://github.com/d3/d3-plugins/blob/master/box/box.js\n(function () {\n\n    // Inspired by http://informationandvisualization.de/blog/box-plot\n    d3.box = function () {\n        var width = 1,\n            height = 1,\n            duration = 0,\n            delay = 0,\n            domain = null,\n            value = Number,\n            whiskers = boxWhiskers,\n            quartiles = boxQuartiles,\n            tickFormat = null;\n\n        // For each small multiple…\n        function box (g) {\n            g.each(function (d, i) {\n                d = d.map(value).sort(d3.ascending);\n                var g = d3.select(this),\n                    n = d.length,\n                    min = d[0],\n                    max = d[n - 1];\n\n                // Compute quartiles. Must return exactly 3 elements.\n                var quartileData = d.quartiles = quartiles(d);\n\n                // Compute whiskers. Must return exactly 2 elements, or null.\n                var whiskerIndices = whiskers && whiskers.call(this, d, i),\n                    whiskerData = whiskerIndices && whiskerIndices.map(function (i) { return d[i]; });\n\n                // Compute outliers. If no whiskers are specified, all data are 'outliers'.\n                // We compute the outliers as indices, so that we can join across transitions!\n                var outlierIndices = whiskerIndices ?\n                    d3.range(0, whiskerIndices[0]).concat(d3.range(whiskerIndices[1] + 1, n)) : d3.range(n);\n\n                // Compute the new x-scale.\n                var x1 = d3.scale.linear()\n                    .domain(domain && domain.call(this, d, i) || [min, max])\n                    .range([height, 0]);\n\n                // Retrieve the old x-scale, if this is an update.\n                var x0 = this.__chart__ || d3.scale.linear()\n                    .domain([0, Infinity])\n                    .range(x1.range());\n\n                // Stash the new scale.\n                this.__chart__ = x1;\n\n                // Note: the box, median, and box tick elements are fixed in number,\n                // so we only have to handle enter and update. In contrast, the outliers\n                // and other elements are variable, so we need to exit them! Variable\n                // elements also fade in and out.\n\n                // Update center line: the vertical line spanning the whiskers.\n                var center = g.selectAll('line.center')\n                    .data(whiskerData ? [whiskerData] : []);\n\n                center.enter().insert('line', 'rect')\n                    .attr('class', 'center')\n                    .attr('x1', width / 2)\n                    .attr('y1', function (d) { return x0(d[0]); })\n                    .attr('x2', width / 2)\n                    .attr('y2', function (d) { return x0(d[1]); })\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); });\n\n                center.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1)\n                    .attr('x1', width / 2)\n                    .attr('x2', width / 2)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); });\n\n                center.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1e-6)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); })\n                    .remove();\n\n                // Update innerquartile box.\n                var box = g.selectAll('rect.box')\n                    .data([quartileData]);\n\n                box.enter().append('rect')\n                    .attr('class', 'box')\n                    .attr('x', 0)\n                    .attr('y', function (d) { return x0(d[2]); })\n                    .attr('width', width)\n                    .attr('height', function (d) { return x0(d[0]) - x0(d[2]); })\n                  .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', function (d) { return x1(d[2]); })\n                    .attr('height', function (d) { return x1(d[0]) - x1(d[2]); });\n\n                box.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('width', width)\n                    .attr('y', function (d) { return x1(d[2]); })\n                    .attr('height', function (d) { return x1(d[0]) - x1(d[2]); });\n\n                // Update median line.\n                var medianLine = g.selectAll('line.median')\n                    .data([quartileData[1]]);\n\n                medianLine.enter().append('line')\n                    .attr('class', 'median')\n                    .attr('x1', 0)\n                    .attr('y1', x0)\n                    .attr('x2', width)\n                    .attr('y2', x0)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1);\n\n                medianLine.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('x1', 0)\n                    .attr('x2', width)\n                    .attr('y1', x1)\n                    .attr('y2', x1);\n\n                // Update whiskers.\n                var whisker = g.selectAll('line.whisker')\n                    .data(whiskerData || []);\n\n                whisker.enter().insert('line', 'circle, text')\n                    .attr('class', 'whisker')\n                    .attr('x1', 0)\n                    .attr('y1', x0)\n                    .attr('x2', width)\n                    .attr('y2', x0)\n                    .style('opacity', 1e-6)\n                  .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1);\n\n                whisker.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('x1', 0)\n                    .attr('x2', width)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1);\n\n                whisker.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1e-6)\n                    .remove();\n\n                // Update outliers.\n                var outlier = g.selectAll('circle.outlier')\n                    .data(outlierIndices, Number);\n\n                outlier.enter().insert('circle', 'text')\n                    .attr('class', 'outlier')\n                    .attr('r', 5)\n                    .attr('cx', width / 2)\n                    .attr('cy', function (i) { return x0(d[i]); })\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1);\n\n                outlier.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cx', width / 2)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1);\n\n                outlier.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1e-6)\n                    .remove();\n\n                // Compute the tick format.\n                var format = tickFormat || x1.tickFormat(8);\n\n                // Update box ticks.\n                var boxTick = g.selectAll('text.box')\n                    .data(quartileData);\n\n                boxTick.enter().append('text')\n                    .attr('class', 'box')\n                    .attr('dy', '.3em')\n                    .attr('dx', function (d, i) { return i & 1 ? 6 : -6; })\n                    .attr('x', function (d, i) { return i & 1 ? width : 0; })\n                    .attr('y', x0)\n                    .attr('text-anchor', function (d, i) { return i & 1 ? 'start' : 'end'; })\n                    .text(format)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1);\n\n                boxTick.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .text(format)\n                    .attr('x', function (d, i) { return i & 1 ? width : 0; })\n                    .attr('y', x1);\n\n                // Update whisker ticks. These are handled separately from the box\n                // ticks because they may or may not exist, and we want don't want\n                // to join box ticks pre-transition with whisker ticks post-.\n                var whiskerTick = g.selectAll('text.whisker')\n                    .data(whiskerData || []);\n\n                whiskerTick.enter().append('text')\n                    .attr('class', 'whisker')\n                    .attr('dy', '.3em')\n                    .attr('dx', 6)\n                    .attr('x', width)\n                    .attr('y', x0)\n                    .text(format)\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1)\n                    .style('opacity', 1);\n\n                whiskerTick.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .text(format)\n                    .attr('x', width)\n                    .attr('y', x1)\n                    .style('opacity', 1);\n\n                whiskerTick.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1)\n                    .style('opacity', 1e-6)\n                    .remove();\n            });\n            d3.timer.flush();\n        }\n\n        box.width = function (x) {\n            if (!arguments.length) {\n                return width;\n            }\n            width = x;\n            return box;\n        };\n\n        box.height = function (x) {\n            if (!arguments.length) {\n                return height;\n            }\n            height = x;\n            return box;\n        };\n\n        box.tickFormat = function (x) {\n            if (!arguments.length) {\n                return tickFormat;\n            }\n            tickFormat = x;\n            return box;\n        };\n\n        box.duration = function (x) {\n            if (!arguments.length) {\n                return duration;\n            }\n            duration = x;\n            return box;\n        };\n\n        box.domain = function (x) {\n            if (!arguments.length) {\n                return domain;\n            }\n            domain = x === null ? x : d3.functor(x);\n            return box;\n        };\n\n        box.value = function (x) {\n            if (!arguments.length) {\n                return value;\n            }\n            value = x;\n            return box;\n        };\n\n        box.whiskers = function (x) {\n            if (!arguments.length) {\n                return whiskers;\n            }\n            whiskers = x;\n            return box;\n        };\n\n        box.quartiles = function (x) {\n            if (!arguments.length) {\n                return quartiles;\n            }\n            quartiles = x;\n            return box;\n        };\n\n        return box;\n    };\n\n    function boxWhiskers (d) {\n        return [0, d.length - 1];\n    }\n\n    function boxQuartiles (d) {\n        return [\n            d3.quantile(d, 0.25),\n            d3.quantile(d, 0.5),\n            d3.quantile(d, 0.75)\n        ];\n    }\n\n})();\n\n\n/**\n * A box plot is a chart that depicts numerical data via their quartile ranges.\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/box-plot-time.html Box plot time example}\n * - {@link http://dc-js.github.io/dc.js/examples/box-plot.html Box plot example}\n * @class boxPlot\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a box plot under #chart-container1 element using the default global chart group\n * var boxPlot1 = dc.boxPlot('#chart-container1');\n * // create a box plot under #chart-container2 element using chart group A\n * var boxPlot2 = dc.boxPlot('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.boxPlot}\n */\ndc.boxPlot = function (parent, chartGroup) {\n    var _chart = dc.coordinateGridMixin({});\n\n    // Returns a function to compute the interquartile range.\n    function DEFAULT_WHISKERS_IQR (k) {\n        return function (d) {\n            var q1 = d.quartiles[0],\n                q3 = d.quartiles[2],\n                iqr = (q3 - q1) * k,\n                i = -1,\n                j = d.length;\n            do { ++i; } while (d[i] < q1 - iqr);\n            do { --j; } while (d[j] > q3 + iqr);\n            return [i, j];\n        };\n    }\n\n    var _whiskerIqrFactor = 1.5;\n    var _whiskersIqr = DEFAULT_WHISKERS_IQR;\n    var _whiskers = _whiskersIqr(_whiskerIqrFactor);\n\n    var _box = d3.box();\n    var _tickFormat = null;\n\n    var _boxWidth = function (innerChartWidth, xUnits) {\n        if (_chart.isOrdinal()) {\n            return _chart.x().rangeBand();\n        } else {\n            return innerChartWidth / (1 + _chart.boxPadding()) / xUnits;\n        }\n    };\n\n    // default padding to handle min/max whisker text\n    _chart.yAxisPadding(12);\n\n    // default to ordinal\n    _chart.x(d3.scale.ordinal());\n    _chart.xUnits(dc.units.ordinal);\n\n    // valueAccessor should return an array of values that can be coerced into numbers\n    // or if data is overloaded for a static array of arrays, it should be `Number`.\n    // Empty arrays are not included.\n    _chart.data(function (group) {\n        return group.all().map(function (d) {\n            d.map = function (accessor) { return accessor.call(d, d); };\n            return d;\n        }).filter(function (d) {\n            var values = _chart.valueAccessor()(d);\n            return values.length !== 0;\n        });\n    });\n\n    /**\n     * Get or set the spacing between boxes as a fraction of box size. Valid values are within 0-1.\n     * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n     * for a visual description of how the padding is applied.\n     * @method boxPadding\n     * @memberof dc.boxPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3.scale.ordinal.rangeBands}\n     * @param {Number} [padding=0.8]\n     * @returns {Number|dc.boxPlot}\n     */\n    _chart.boxPadding = _chart._rangeBandPadding;\n    _chart.boxPadding(0.8);\n\n    /**\n     * Get or set the outer padding on an ordinal box chart. This setting has no effect on non-ordinal charts\n     * or on charts with a custom {@link dc.boxPlot#boxWidth .boxWidth}. Will pad the width by\n     * `padding * barWidth` on each side of the chart.\n     * @method outerPadding\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Number} [padding=0.5]\n     * @returns {Number|dc.boxPlot}\n     */\n    _chart.outerPadding = _chart._outerRangeBandPadding;\n    _chart.outerPadding(0.5);\n\n    /**\n     * Get or set the numerical width of the boxplot box. The width may also be a function taking as\n     * parameters the chart width excluding the right and left margins, as well as the number of x\n     * units.\n     * @example\n     * // Using numerical parameter\n     * chart.boxWidth(10);\n     * // Using function\n     * chart.boxWidth((innerChartWidth, xUnits) { ... });\n     * @method boxWidth\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Number|Function} [boxWidth=0.5]\n     * @returns {Number|Function|dc.boxPlot}\n     */\n    _chart.boxWidth = function (boxWidth) {\n        if (!arguments.length) {\n            return _boxWidth;\n        }\n        _boxWidth = d3.functor(boxWidth);\n        return _chart;\n    };\n\n    var boxTransform = function (d, i) {\n        var xOffset = _chart.x()(_chart.keyAccessor()(d, i));\n        return 'translate(' + xOffset + ', 0)';\n    };\n\n    _chart._preprocessData = function () {\n        if (_chart.elasticX()) {\n            _chart.x().domain([]);\n        }\n    };\n\n    _chart.plotData = function () {\n        var _calculatedBoxWidth = _boxWidth(_chart.effectiveWidth(), _chart.xUnitCount());\n\n        _box.whiskers(_whiskers)\n            .width(_calculatedBoxWidth)\n            .height(_chart.effectiveHeight())\n            .value(_chart.valueAccessor())\n            .domain(_chart.y().domain())\n            .duration(_chart.transitionDuration())\n            .tickFormat(_tickFormat);\n\n        var boxesG = _chart.chartBodyG().selectAll('g.box').data(_chart.data(), _chart.keyAccessor());\n\n        renderBoxes(boxesG);\n        updateBoxes(boxesG);\n        removeBoxes(boxesG);\n\n        _chart.fadeDeselectedArea();\n    };\n\n    function renderBoxes (boxesG) {\n        var boxesGEnter = boxesG.enter().append('g');\n\n        boxesGEnter\n            .attr('class', 'box')\n            .attr('transform', boxTransform)\n            .call(_box)\n            .on('click', function (d) {\n                _chart.filter(_chart.keyAccessor()(d));\n                _chart.redrawGroup();\n            });\n    }\n\n    function updateBoxes (boxesG) {\n        dc.transition(boxesG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', boxTransform)\n            .call(_box)\n            .each(function () {\n                d3.select(this).select('rect.box').attr('fill', _chart.getColor);\n            });\n    }\n\n    function removeBoxes (boxesG) {\n        boxesG.exit().remove().call(_box);\n    }\n\n    _chart.fadeDeselectedArea = function () {\n        if (_chart.hasFilter()) {\n            if (_chart.isOrdinal()) {\n                _chart.g().selectAll('g.box').each(function (d) {\n                    if (_chart.isSelectedNode(d)) {\n                        _chart.highlightSelected(this);\n                    } else {\n                        _chart.fadeDeselected(this);\n                    }\n                });\n            } else {\n                var extent = _chart.brush().extent();\n                var start = extent[0];\n                var end = extent[1];\n                var keyAccessor = _chart.keyAccessor();\n                _chart.g().selectAll('g.box').each(function (d) {\n                    var key = keyAccessor(d);\n                    if (key < start || key >= end) {\n                        _chart.fadeDeselected(this);\n                    } else {\n                        _chart.highlightSelected(this);\n                    }\n                });\n            }\n        } else {\n            _chart.g().selectAll('g.box').each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(_chart.keyAccessor()(d));\n    };\n\n    _chart.yAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return d3.min(_chart.valueAccessor()(e));\n        });\n        return dc.utils.subtract(min, _chart.yAxisPadding());\n    };\n\n    _chart.yAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return d3.max(_chart.valueAccessor()(e));\n        });\n        return dc.utils.add(max, _chart.yAxisPadding());\n    };\n\n    /**\n     * Set the numerical format of the boxplot median, whiskers and quartile labels. Defaults to\n     * integer formatting.\n     * @example\n     * // format ticks to 2 decimal places\n     * chart.tickFormat(d3.format('.2f'));\n     * @method tickFormat\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Function} [tickFormat]\n     * @returns {Number|Function|dc.boxPlot}\n     */\n    _chart.tickFormat = function (tickFormat) {\n        if (!arguments.length) {\n            return _tickFormat;\n        }\n        _tickFormat = tickFormat;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The select menu is a simple widget designed to filter a dimension by selecting an option from\n * an HTML `<select/>` menu. The menu can be optionally turned into a multiselect.\n * @class selectMenu\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * // create a select menu under #select-container using the default global chart group\n * var select = dc.selectMenu('#select-container')\n *                .dimension(states)\n *                .group(stateGroup);\n * // the option text can be set via the title() function\n * // by default the option text is '`key`: `value`'\n * select.title(function (d){\n *     return 'STATE: ' + d.key;\n * })\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this widget should be placed in.\n * Interaction with the widget will only trigger events and redraws within its group.\n * @returns {selectMenu}\n **/\ndc.selectMenu = function (parent, chartGroup) {\n    var SELECT_CSS_CLASS = 'dc-select-menu';\n    var OPTION_CSS_CLASS = 'dc-select-option';\n\n    var _chart = dc.baseMixin({});\n\n    var _select;\n    var _promptText = 'Select all';\n    var _multiple = false;\n    var _promptValue = null;\n    var _numberVisible = null;\n    var _order = function (a, b) {\n        return _chart.keyAccessor()(a) > _chart.keyAccessor()(b) ?\n             1 : _chart.keyAccessor()(b) > _chart.keyAccessor()(a) ?\n            -1 : 0;\n    };\n\n    var _filterDisplayed = function (d) {\n        return _chart.valueAccessor()(d) > 0;\n    };\n\n    _chart.data(function (group) {\n        return group.all().filter(_filterDisplayed);\n    });\n\n    _chart._doRender = function () {\n        _chart.select('select').remove();\n        _select = _chart.root().append('select')\n                        .classed(SELECT_CSS_CLASS, true);\n        _select.append('option').text(_promptText).attr('value', '');\n\n        _chart._doRedraw();\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        setAttributes();\n        renderOptions();\n        // select the option(s) corresponding to current filter(s)\n        if (_chart.hasFilter() && _multiple) {\n            _select.selectAll('option')\n                .property('selected', function (d) {\n                    return d && _chart.filters().indexOf(String(_chart.keyAccessor()(d))) >= 0;\n                });\n        } else if (_chart.hasFilter()) {\n            _select.property('value', _chart.filter());\n        } else {\n            _select.property('value', '');\n        }\n        return _chart;\n    };\n\n    function renderOptions () {\n        var options = _select.selectAll('option.' + OPTION_CSS_CLASS)\n          .data(_chart.data(), function (d) { return _chart.keyAccessor()(d); });\n\n        options.enter()\n              .append('option')\n              .classed(OPTION_CSS_CLASS, true)\n              .attr('value', function (d) { return _chart.keyAccessor()(d); });\n\n        options.text(_chart.title());\n        options.exit().remove();\n        _select.selectAll('option.' + OPTION_CSS_CLASS).sort(_order);\n\n        _select.on('change', onChange);\n        return options;\n    }\n\n    function onChange (d, i) {\n        var values;\n        var target = d3.event.target;\n        if (target.selectedOptions) {\n            var selectedOptions = Array.prototype.slice.call(target.selectedOptions);\n            values = selectedOptions.map(function (d) {\n                return d.value;\n            });\n        } else { // IE and other browsers do not support selectedOptions\n            // adapted from this polyfill: https://gist.github.com/brettz9/4212217\n            var options = [].slice.call(d3.event.target.options);\n            values = options.filter(function (option) {\n                return option.selected;\n            }).map(function (option) {\n                return option.value;\n            });\n        }\n        // console.log(values);\n        // check if only prompt option is selected\n        if (values.length === 1 && values[0] === '') {\n            values = _promptValue || null;\n        } else if (!_multiple && values.length === 1) {\n            values = values[0];\n        }\n        _chart.onChange(values);\n    }\n\n    _chart.onChange = function (val) {\n        if (val && _multiple) {\n            _chart.replaceFilter([val]);\n        } else if (val) {\n            _chart.replaceFilter(val);\n        } else {\n            _chart.filterAll();\n        }\n        dc.events.trigger(function () {\n            _chart.redrawGroup();\n        });\n    };\n\n    function setAttributes () {\n        if (_multiple) {\n            _select.attr('multiple', true);\n        } else {\n            _select.attr('multiple', null);\n        }\n        if (_numberVisible !== null) {\n            _select.attr('size', _numberVisible);\n        } else {\n            _select.attr('size', null);\n        }\n    }\n\n    /**\n     * Get or set the function that controls the ordering of option tags in the\n     * select menu. By default options are ordered by the group key in ascending\n     * order.\n     * @name order\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {Function} [order]\n     * @example\n     * // order by the group's value\n     * chart.order(function (a,b) {\n     *     return a.value > b.value ? 1 : b.value > a.value ? -1 : 0;\n     * });\n     **/\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    /**\n     * Get or set the text displayed in the options used to prompt selection.\n     * @name promptText\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {String} [promptText='Select all']\n     * @example\n     * chart.promptText('All states');\n     **/\n    _chart.promptText = function (_) {\n        if (!arguments.length) {\n            return _promptText;\n        }\n        _promptText = _;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that filters option tags prior to display. By default options\n     * with a value of < 1 are not displayed.\n     * @name filterDisplayed\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {function} [filterDisplayed]\n     * @example\n     * // display all options override the `filterDisplayed` function:\n     * chart.filterDisplayed(function () {\n     *     return true;\n     * });\n     **/\n    _chart.filterDisplayed = function (filterDisplayed) {\n        if (!arguments.length) {\n            return _filterDisplayed;\n        }\n        _filterDisplayed = filterDisplayed;\n        return _chart;\n    };\n\n    /**\n     * Controls the type of select menu. Setting it to true converts the underlying\n     * HTML tag into a multiple select.\n     * @name multiple\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {boolean} [multiple=false]\n     * @example\n     * chart.multiple(true);\n     **/\n    _chart.multiple = function (multiple) {\n        if (!arguments.length) {\n            return _multiple;\n        }\n        _multiple = multiple;\n\n        return _chart;\n    };\n\n    /**\n     * Controls the default value to be used for\n     * [dimension.filter](https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter)\n     * when only the prompt value is selected. If `null` (the default), no filtering will occur when\n     * just the prompt is selected.\n     * @name promptValue\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {?*} [promptValue=null]\n     **/\n    _chart.promptValue = function (promptValue) {\n        if (!arguments.length) {\n            return _promptValue;\n        }\n        _promptValue = promptValue;\n\n        return _chart;\n    };\n\n    /**\n     * Controls the number of items to show in the select menu, when `.multiple()` is true. This\n     * controls the [`size` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#Attributes) of\n     * the `select` element. If `null` (the default), uses the browser's default height.\n     * @name numberItems\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {?number} [numberVisible=null]\n     * @example\n     * chart.numberVisible(10);\n     **/\n    _chart.numberVisible = function (numberVisible) {\n        if (!arguments.length) {\n            return _numberVisible;\n        }\n        _numberVisible = numberVisible;\n\n        return _chart;\n    };\n\n    _chart.size = dc.logger.deprecate(_chart.numberVisible, 'selectMenu.size is ambiguous - use numberVisible instead');\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n// Renamed functions\n\ndc.abstractBubbleChart = dc.bubbleMixin;\ndc.baseChart = dc.baseMixin;\ndc.capped = dc.capMixin;\ndc.colorChart = dc.colorMixin;\ndc.coordinateGridChart = dc.coordinateGridMixin;\ndc.marginable = dc.marginMixin;\ndc.stackableChart = dc.stackMixin;\n\n// Expose d3 and crossfilter, so that clients in browserify\n// case can obtain them if they need them.\ndc.d3 = d3;\ndc.crossfilter = crossfilter;\n\nreturn dc;}\n    if(true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(291), __webpack_require__(292)], __WEBPACK_AMD_DEFINE_FACTORY__ = (_dc),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if(typeof module === \"object\" && module.exports) {\n        var _d3 = require('d3');\n        var _crossfilter = require('crossfilter2');\n        // When using npm + browserify, 'crossfilter' is a function,\n        // since package.json specifies index.js as main function, and it\n        // does special handling. When using bower + browserify,\n        // there's no main in bower.json (in fact, there's no bower.json),\n        // so we need to fix it.\n        if (typeof _crossfilter !== \"function\") {\n            _crossfilter = _crossfilter.crossfilter;\n        }\n        module.exports = _dc(_d3, _crossfilter);\n    } else {\n        this.dc = _dc(d3, crossfilter);\n    }\n}\n)();\n\n//# sourceMappingURL=dc.js.map\n\n/***/ }),\n\n/***/ 291:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {\n  var d3 = {\n    version: \"3.5.17\"\n  };\n  var d3_arraySlice = [].slice, d3_array = function(list) {\n    return d3_arraySlice.call(list);\n  };\n  var d3_document = this.document;\n  function d3_documentElement(node) {\n    return node && (node.ownerDocument || node.document || node).documentElement;\n  }\n  function d3_window(node) {\n    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n  }\n  if (d3_document) {\n    try {\n      d3_array(d3_document.documentElement.childNodes)[0].nodeType;\n    } catch (e) {\n      d3_array = function(list) {\n        var i = list.length, array = new Array(i);\n        while (i--) array[i] = list[i];\n        return array;\n      };\n    }\n  }\n  if (!Date.now) Date.now = function() {\n    return +new Date();\n  };\n  if (d3_document) {\n    try {\n      d3_document.createElement(\"DIV\").style.setProperty(\"opacity\", 0, \"\");\n    } catch (error) {\n      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n      d3_element_prototype.setAttribute = function(name, value) {\n        d3_element_setAttribute.call(this, name, value + \"\");\n      };\n      d3_element_prototype.setAttributeNS = function(space, local, value) {\n        d3_element_setAttributeNS.call(this, space, local, value + \"\");\n      };\n      d3_style_prototype.setProperty = function(name, value, priority) {\n        d3_style_setProperty.call(this, name, value + \"\", priority);\n      };\n    }\n  }\n  d3.ascending = d3_ascending;\n  function d3_ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n  d3.descending = function(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  };\n  d3.min = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;\n    }\n    return a;\n  };\n  d3.max = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;\n    }\n    return a;\n  };\n  d3.extent = function(array, f) {\n    var i = -1, n = array.length, a, b, c;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n    return [ a, c ];\n  };\n  function d3_number(x) {\n    return x === null ? NaN : +x;\n  }\n  function d3_numeric(x) {\n    return !isNaN(x);\n  }\n  d3.sum = function(array, f) {\n    var s = 0, n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = +array[i])) s += a;\n    } else {\n      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n    }\n    return s;\n  };\n  d3.mean = function(array, f) {\n    var s = 0, n = array.length, a, i = -1, j = n;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;\n    }\n    if (j) return s / j;\n  };\n  d3.quantile = function(values, p) {\n    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;\n    return e ? v + e * (values[h] - v) : v;\n  };\n  d3.median = function(array, f) {\n    var numbers = [], n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n    }\n    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n  };\n  d3.variance = function(array, f) {\n    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    } else {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n    if (j > 1) return s / (j - 1);\n  };\n  d3.deviation = function() {\n    var v = d3.variance.apply(this, arguments);\n    return v ? Math.sqrt(v) : v;\n  };\n  function d3_bisector(compare) {\n    return {\n      left: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n  var d3_bisect = d3_bisector(d3_ascending);\n  d3.bisectLeft = d3_bisect.left;\n  d3.bisect = d3.bisectRight = d3_bisect.right;\n  d3.bisector = function(f) {\n    return d3_bisector(f.length === 1 ? function(d, x) {\n      return d3_ascending(f(d), x);\n    } : f);\n  };\n  d3.shuffle = function(array, i0, i1) {\n    if ((m = arguments.length) < 3) {\n      i1 = array.length;\n      if (m < 2) i0 = 0;\n    }\n    var m = i1 - i0, t, i;\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n    }\n    return array;\n  };\n  d3.permute = function(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  };\n  d3.pairs = function(array) {\n    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];\n    return pairs;\n  };\n  d3.transpose = function(matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  };\n  function d3_transposeLength(d) {\n    return d.length;\n  }\n  d3.zip = function() {\n    return d3.transpose(arguments);\n  };\n  d3.keys = function(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  };\n  d3.values = function(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  };\n  d3.entries = function(map) {\n    var entries = [];\n    for (var key in map) entries.push({\n      key: key,\n      value: map[key]\n    });\n    return entries;\n  };\n  d3.merge = function(arrays) {\n    var n = arrays.length, m, i = -1, j = 0, merged, array;\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n    return merged;\n  };\n  var abs = Math.abs;\n  d3.range = function(start, stop, step) {\n    if (arguments.length < 3) {\n      step = 1;\n      if (arguments.length < 2) {\n        stop = start;\n        start = 0;\n      }\n    }\n    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n    start *= k, stop *= k, step *= k;\n    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n    return range;\n  };\n  function d3_range_integerScale(x) {\n    var k = 1;\n    while (x * k % 1) k *= 10;\n    return k;\n  }\n  function d3_class(ctor, properties) {\n    for (var key in properties) {\n      Object.defineProperty(ctor.prototype, key, {\n        value: properties[key],\n        enumerable: false\n      });\n    }\n  }\n  d3.map = function(object, f) {\n    var map = new d3_Map();\n    if (object instanceof d3_Map) {\n      object.forEach(function(key, value) {\n        map.set(key, value);\n      });\n    } else if (Array.isArray(object)) {\n      var i = -1, n = object.length, o;\n      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);\n    } else {\n      for (var key in object) map.set(key, object[key]);\n    }\n    return map;\n  };\n  function d3_Map() {\n    this._ = Object.create(null);\n  }\n  var d3_map_proto = \"__proto__\", d3_map_zero = \"\\x00\";\n  d3_class(d3_Map, {\n    has: d3_map_has,\n    get: function(key) {\n      return this._[d3_map_escape(key)];\n    },\n    set: function(key, value) {\n      return this._[d3_map_escape(key)] = value;\n    },\n    remove: d3_map_remove,\n    keys: d3_map_keys,\n    values: function() {\n      var values = [];\n      for (var key in this._) values.push(this._[key]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var key in this._) entries.push({\n        key: d3_map_unescape(key),\n        value: this._[key]\n      });\n      return entries;\n    },\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);\n    }\n  });\n  function d3_map_escape(key) {\n    return (key += \"\") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n  }\n  function d3_map_unescape(key) {\n    return (key += \"\")[0] === d3_map_zero ? key.slice(1) : key;\n  }\n  function d3_map_has(key) {\n    return d3_map_escape(key) in this._;\n  }\n  function d3_map_remove(key) {\n    return (key = d3_map_escape(key)) in this._ && delete this._[key];\n  }\n  function d3_map_keys() {\n    var keys = [];\n    for (var key in this._) keys.push(d3_map_unescape(key));\n    return keys;\n  }\n  function d3_map_size() {\n    var size = 0;\n    for (var key in this._) ++size;\n    return size;\n  }\n  function d3_map_empty() {\n    for (var key in this._) return false;\n    return true;\n  }\n  d3.nest = function() {\n    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;\n    function map(mapType, array, depth) {\n      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n          values.push(object);\n        } else {\n          valuesByKey.set(keyValue, [ object ]);\n        }\n      }\n      if (mapType) {\n        object = mapType();\n        setter = function(keyValue, values) {\n          object.set(keyValue, map(mapType, values, depth));\n        };\n      } else {\n        object = {};\n        setter = function(keyValue, values) {\n          object[keyValue] = map(mapType, values, depth);\n        };\n      }\n      valuesByKey.forEach(setter);\n      return object;\n    }\n    function entries(map, depth) {\n      if (depth >= keys.length) return map;\n      var array = [], sortKey = sortKeys[depth++];\n      map.forEach(function(key, keyMap) {\n        array.push({\n          key: key,\n          values: entries(keyMap, depth)\n        });\n      });\n      return sortKey ? array.sort(function(a, b) {\n        return sortKey(a.key, b.key);\n      }) : array;\n    }\n    nest.map = function(array, mapType) {\n      return map(mapType, array, 0);\n    };\n    nest.entries = function(array) {\n      return entries(map(d3.map, array, 0), 0);\n    };\n    nest.key = function(d) {\n      keys.push(d);\n      return nest;\n    };\n    nest.sortKeys = function(order) {\n      sortKeys[keys.length - 1] = order;\n      return nest;\n    };\n    nest.sortValues = function(order) {\n      sortValues = order;\n      return nest;\n    };\n    nest.rollup = function(f) {\n      rollup = f;\n      return nest;\n    };\n    return nest;\n  };\n  d3.set = function(array) {\n    var set = new d3_Set();\n    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);\n    return set;\n  };\n  function d3_Set() {\n    this._ = Object.create(null);\n  }\n  d3_class(d3_Set, {\n    has: d3_map_has,\n    add: function(key) {\n      this._[d3_map_escape(key += \"\")] = true;\n      return key;\n    },\n    remove: d3_map_remove,\n    values: d3_map_keys,\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key));\n    }\n  });\n  d3.behavior = {};\n  function d3_identity(d) {\n    return d;\n  }\n  d3.rebind = function(target, source) {\n    var i = 1, n = arguments.length, method;\n    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n    return target;\n  };\n  function d3_rebind(target, source, method) {\n    return function() {\n      var value = method.apply(source, arguments);\n      return value === source ? target : value;\n    };\n  }\n  function d3_vendorSymbol(object, name) {\n    if (name in object) return name;\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {\n      var prefixName = d3_vendorPrefixes[i] + name;\n      if (prefixName in object) return prefixName;\n    }\n  }\n  var d3_vendorPrefixes = [ \"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\" ];\n  function d3_noop() {}\n  d3.dispatch = function() {\n    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    return dispatch;\n  };\n  function d3_dispatch() {}\n  d3_dispatch.prototype.on = function(type, listener) {\n    var i = type.indexOf(\".\"), name = \"\";\n    if (i >= 0) {\n      name = type.slice(i + 1);\n      type = type.slice(0, i);\n    }\n    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);\n    if (arguments.length === 2) {\n      if (listener == null) for (type in this) {\n        if (this.hasOwnProperty(type)) this[type].on(name, null);\n      }\n      return this;\n    }\n  };\n  function d3_dispatch_event(dispatch) {\n    var listeners = [], listenerByName = new d3_Map();\n    function event() {\n      var z = listeners, i = -1, n = z.length, l;\n      while (++i < n) if (l = z[i].on) l.apply(this, arguments);\n      return dispatch;\n    }\n    event.on = function(name, listener) {\n      var l = listenerByName.get(name), i;\n      if (arguments.length < 2) return l && l.on;\n      if (l) {\n        l.on = null;\n        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n        listenerByName.remove(name);\n      }\n      if (listener) listeners.push(listenerByName.set(name, {\n        on: listener\n      }));\n      return dispatch;\n    };\n    return event;\n  }\n  d3.event = null;\n  function d3_eventPreventDefault() {\n    d3.event.preventDefault();\n  }\n  function d3_eventSource() {\n    var e = d3.event, s;\n    while (s = e.sourceEvent) e = s;\n    return e;\n  }\n  function d3_eventDispatch(target) {\n    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    dispatch.of = function(thiz, argumentz) {\n      return function(e1) {\n        try {\n          var e0 = e1.sourceEvent = d3.event;\n          e1.target = target;\n          d3.event = e1;\n          dispatch[e1.type].apply(thiz, argumentz);\n        } finally {\n          d3.event = e0;\n        }\n      };\n    };\n    return dispatch;\n  }\n  d3.requote = function(s) {\n    return s.replace(d3_requote_re, \"\\\\$&\");\n  };\n  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  var d3_subclass = {}.__proto__ ? function(object, prototype) {\n    object.__proto__ = prototype;\n  } : function(object, prototype) {\n    for (var property in prototype) object[property] = prototype[property];\n  };\n  function d3_selection(groups) {\n    d3_subclass(groups, d3_selectionPrototype);\n    return groups;\n  }\n  var d3_select = function(s, n) {\n    return n.querySelector(s);\n  }, d3_selectAll = function(s, n) {\n    return n.querySelectorAll(s);\n  }, d3_selectMatches = function(n, s) {\n    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, \"matchesSelector\")];\n    d3_selectMatches = function(n, s) {\n      return d3_selectMatcher.call(n, s);\n    };\n    return d3_selectMatches(n, s);\n  };\n  if (typeof Sizzle === \"function\") {\n    d3_select = function(s, n) {\n      return Sizzle(s, n)[0] || null;\n    };\n    d3_selectAll = Sizzle;\n    d3_selectMatches = Sizzle.matchesSelector;\n  }\n  d3.selection = function() {\n    return d3.select(d3_document.documentElement);\n  };\n  var d3_selectionPrototype = d3.selection.prototype = [];\n  d3_selectionPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, group, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selector(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_select(selector, this);\n    };\n  }\n  d3_selectionPrototype.selectAll = function(selector) {\n    var subgroups = [], subgroup, node;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n          subgroup.parentNode = node;\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selectorAll(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_selectAll(selector, this);\n    };\n  }\n  var d3_nsXhtml = \"http://www.w3.org/1999/xhtml\";\n  var d3_nsPrefix = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: d3_nsXhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n  d3.ns = {\n    prefix: d3_nsPrefix,\n    qualify: function(name) {\n      var i = name.indexOf(\":\"), prefix = name;\n      if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n        space: d3_nsPrefix[prefix],\n        local: name\n      } : name;\n    }\n  };\n  d3_selectionPrototype.attr = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node();\n        name = d3.ns.qualify(name);\n        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n      }\n      for (value in name) this.each(d3_selection_attr(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_attr(name, value));\n  };\n  function d3_selection_attr(name, value) {\n    name = d3.ns.qualify(name);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrConstant() {\n      this.setAttribute(name, value);\n    }\n    function attrConstantNS() {\n      this.setAttributeNS(name.space, name.local, value);\n    }\n    function attrFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);\n    }\n    function attrFunctionNS() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n    }\n    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n  }\n  function d3_collapse(s) {\n    return s.trim().replace(/\\s+/g, \" \");\n  }\n  d3_selectionPrototype.classed = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;\n        if (value = node.classList) {\n          while (++i < n) if (!value.contains(name[i])) return false;\n        } else {\n          value = node.getAttribute(\"class\");\n          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;\n        }\n        return true;\n      }\n      for (value in name) this.each(d3_selection_classed(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_classed(name, value));\n  };\n  function d3_selection_classedRe(name) {\n    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");\n  }\n  function d3_selection_classes(name) {\n    return (name + \"\").trim().split(/^|\\s+/);\n  }\n  function d3_selection_classed(name, value) {\n    name = d3_selection_classes(name).map(d3_selection_classedName);\n    var n = name.length;\n    function classedConstant() {\n      var i = -1;\n      while (++i < n) name[i](this, value);\n    }\n    function classedFunction() {\n      var i = -1, x = value.apply(this, arguments);\n      while (++i < n) name[i](this, x);\n    }\n    return typeof value === \"function\" ? classedFunction : classedConstant;\n  }\n  function d3_selection_classedName(name) {\n    var re = d3_selection_classedRe(name);\n    return function(node, value) {\n      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n      var c = node.getAttribute(\"class\") || \"\";\n      if (value) {\n        re.lastIndex = 0;\n        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));\n      } else {\n        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));\n      }\n    };\n  }\n  d3_selectionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));\n        return this;\n      }\n      if (n < 2) {\n        var node = this.node();\n        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);\n      }\n      priority = \"\";\n    }\n    return this.each(d3_selection_style(name, value, priority));\n  };\n  function d3_selection_style(name, value, priority) {\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleConstant() {\n      this.style.setProperty(name, value, priority);\n    }\n    function styleFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);\n    }\n    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;\n  }\n  d3_selectionPrototype.property = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") return this.node()[name];\n      for (value in name) this.each(d3_selection_property(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_property(name, value));\n  };\n  function d3_selection_property(name, value) {\n    function propertyNull() {\n      delete this[name];\n    }\n    function propertyConstant() {\n      this[name] = value;\n    }\n    function propertyFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) delete this[name]; else this[name] = x;\n    }\n    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;\n  }\n  d3_selectionPrototype.text = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.textContent = \"\";\n    } : function() {\n      this.textContent = value;\n    }) : this.node().textContent;\n  };\n  d3_selectionPrototype.html = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.innerHTML = \"\";\n    } : function() {\n      this.innerHTML = value;\n    }) : this.node().innerHTML;\n  };\n  d3_selectionPrototype.append = function(name) {\n    name = d3_selection_creator(name);\n    return this.select(function() {\n      return this.appendChild(name.apply(this, arguments));\n    });\n  };\n  function d3_selection_creator(name) {\n    function create() {\n      var document = this.ownerDocument, namespace = this.namespaceURI;\n      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);\n    }\n    function createNS() {\n      return this.ownerDocument.createElementNS(name.space, name.local);\n    }\n    return typeof name === \"function\" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;\n  }\n  d3_selectionPrototype.insert = function(name, before) {\n    name = d3_selection_creator(name);\n    before = d3_selection_selector(before);\n    return this.select(function() {\n      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n    });\n  };\n  d3_selectionPrototype.remove = function() {\n    return this.each(d3_selectionRemove);\n  };\n  function d3_selectionRemove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n  d3_selectionPrototype.data = function(value, key) {\n    var i = -1, n = this.length, group, node;\n    if (!arguments.length) {\n      value = new Array(n = (group = this[0]).length);\n      while (++i < n) {\n        if (node = group[i]) {\n          value[i] = node.__data__;\n        }\n      }\n      return value;\n    }\n    function bind(group, groupData) {\n      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n      if (key) {\n        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;\n        for (i = -1; ++i < n; ) {\n          if (node = group[i]) {\n            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {\n              exitNodes[i] = node;\n            } else {\n              nodeByKeyValue.set(keyValue, node);\n            }\n            keyValues[i] = keyValue;\n          }\n        }\n        for (i = -1; ++i < m; ) {\n          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          } else if (node !== true) {\n            updateNodes[i] = node;\n            node.__data__ = nodeData;\n          }\n          nodeByKeyValue.set(keyValue, true);\n        }\n        for (i = -1; ++i < n; ) {\n          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {\n            exitNodes[i] = group[i];\n          }\n        }\n      } else {\n        for (i = -1; ++i < n0; ) {\n          node = group[i];\n          nodeData = groupData[i];\n          if (node) {\n            node.__data__ = nodeData;\n            updateNodes[i] = node;\n          } else {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          }\n        }\n        for (;i < m; ++i) {\n          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n        }\n        for (;i < n; ++i) {\n          exitNodes[i] = group[i];\n        }\n      }\n      enterNodes.update = updateNodes;\n      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n      enter.push(enterNodes);\n      update.push(updateNodes);\n      exit.push(exitNodes);\n    }\n    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);\n    if (typeof value === \"function\") {\n      while (++i < n) {\n        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n      }\n    } else {\n      while (++i < n) {\n        bind(group = this[i], value);\n      }\n    }\n    update.enter = function() {\n      return enter;\n    };\n    update.exit = function() {\n      return exit;\n    };\n    return update;\n  };\n  function d3_selection_dataNode(data) {\n    return {\n      __data__: data\n    };\n  }\n  d3_selectionPrototype.datum = function(value) {\n    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");\n  };\n  d3_selectionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_filter(selector) {\n    return function() {\n      return d3_selectMatches(this, selector);\n    };\n  }\n  d3_selectionPrototype.order = function() {\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n    return this;\n  };\n  d3_selectionPrototype.sort = function(comparator) {\n    comparator = d3_selection_sortComparator.apply(this, arguments);\n    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);\n    return this.order();\n  };\n  function d3_selection_sortComparator(comparator) {\n    if (!arguments.length) comparator = d3_ascending;\n    return function(a, b) {\n      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;\n    };\n  }\n  d3_selectionPrototype.each = function(callback) {\n    return d3_selection_each(this, function(node, i, j) {\n      callback.call(node, node.__data__, i, j);\n    });\n  };\n  function d3_selection_each(groups, callback) {\n    for (var j = 0, m = groups.length; j < m; j++) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {\n        if (node = group[i]) callback(node, i, j);\n      }\n    }\n    return groups;\n  }\n  d3_selectionPrototype.call = function(callback) {\n    var args = d3_array(arguments);\n    callback.apply(args[0] = this, args);\n    return this;\n  };\n  d3_selectionPrototype.empty = function() {\n    return !this.node();\n  };\n  d3_selectionPrototype.node = function() {\n    for (var j = 0, m = this.length; j < m; j++) {\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n    return null;\n  };\n  d3_selectionPrototype.size = function() {\n    var n = 0;\n    d3_selection_each(this, function() {\n      ++n;\n    });\n    return n;\n  };\n  function d3_selection_enter(selection) {\n    d3_subclass(selection, d3_selection_enterPrototype);\n    return selection;\n  }\n  var d3_selection_enterPrototype = [];\n  d3.selection.enter = d3_selection_enter;\n  d3.selection.enter.prototype = d3_selection_enterPrototype;\n  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n  d3_selection_enterPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, upgroup, group, node;\n    for (var j = -1, m = this.length; ++j < m; ) {\n      upgroup = (group = this[j]).update;\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = group.parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n          subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  d3_selection_enterPrototype.insert = function(name, before) {\n    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);\n    return d3_selectionPrototype.insert.call(this, name, before);\n  };\n  function d3_selection_enterInsertBefore(enter) {\n    var i0, j0;\n    return function(d, i, j) {\n      var group = enter[j].update, n = group.length, node;\n      if (j != j0) j0 = j, i0 = 0;\n      if (i >= i0) i0 = i + 1;\n      while (!(node = group[i0]) && ++i0 < n) ;\n      return node;\n    };\n  }\n  d3.select = function(node) {\n    var group;\n    if (typeof node === \"string\") {\n      group = [ d3_select(node, d3_document) ];\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = [ node ];\n      group.parentNode = d3_documentElement(node);\n    }\n    return d3_selection([ group ]);\n  };\n  d3.selectAll = function(nodes) {\n    var group;\n    if (typeof nodes === \"string\") {\n      group = d3_array(d3_selectAll(nodes, d3_document));\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = d3_array(nodes);\n      group.parentNode = null;\n    }\n    return d3_selection([ group ]);\n  };\n  d3_selectionPrototype.on = function(type, listener, capture) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof type !== \"string\") {\n        if (n < 2) listener = false;\n        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));\n        return this;\n      }\n      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;\n      capture = false;\n    }\n    return this.each(d3_selection_on(type, listener, capture));\n  };\n  function d3_selection_on(type, listener, capture) {\n    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;\n    if (i > 0) type = type.slice(0, i);\n    var filter = d3_selection_onFilters.get(type);\n    if (filter) type = filter, wrap = d3_selection_onFilter;\n    function onRemove() {\n      var l = this[name];\n      if (l) {\n        this.removeEventListener(type, l, l.$);\n        delete this[name];\n      }\n    }\n    function onAdd() {\n      var l = wrap(listener, d3_array(arguments));\n      onRemove.call(this);\n      this.addEventListener(type, this[name] = l, l.$ = capture);\n      l._ = listener;\n    }\n    function removeAll() {\n      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;\n      for (var name in this) {\n        if (match = name.match(re)) {\n          var l = this[name];\n          this.removeEventListener(match[1], l, l.$);\n          delete this[name];\n        }\n      }\n    }\n    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n  }\n  var d3_selection_onFilters = d3.map({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n  });\n  if (d3_document) {\n    d3_selection_onFilters.forEach(function(k) {\n      if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);\n    });\n  }\n  function d3_selection_onListener(listener, argumentz) {\n    return function(e) {\n      var o = d3.event;\n      d3.event = e;\n      argumentz[0] = this.__data__;\n      try {\n        listener.apply(this, argumentz);\n      } finally {\n        d3.event = o;\n      }\n    };\n  }\n  function d3_selection_onFilter(listener, argumentz) {\n    var l = d3_selection_onListener(listener, argumentz);\n    return function(e) {\n      var target = this, related = e.relatedTarget;\n      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {\n        l.call(target, e);\n      }\n    };\n  }\n  var d3_event_dragSelect, d3_event_dragId = 0;\n  function d3_event_dragSuppress(node) {\n    var name = \".dragsuppress-\" + ++d3_event_dragId, click = \"click\" + name, w = d3.select(d3_window(node)).on(\"touchmove\" + name, d3_eventPreventDefault).on(\"dragstart\" + name, d3_eventPreventDefault).on(\"selectstart\" + name, d3_eventPreventDefault);\n    if (d3_event_dragSelect == null) {\n      d3_event_dragSelect = \"onselectstart\" in node ? false : d3_vendorSymbol(node.style, \"userSelect\");\n    }\n    if (d3_event_dragSelect) {\n      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];\n      style[d3_event_dragSelect] = \"none\";\n    }\n    return function(suppressClick) {\n      w.on(name, null);\n      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n      if (suppressClick) {\n        var off = function() {\n          w.on(click, null);\n        };\n        w.on(click, function() {\n          d3_eventPreventDefault();\n          off();\n        }, true);\n        setTimeout(off, 0);\n      }\n    };\n  }\n  d3.mouse = function(container) {\n    return d3_mousePoint(container, d3_eventSource());\n  };\n  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;\n  function d3_mousePoint(container, e) {\n    if (e.changedTouches) e = e.changedTouches[0];\n    var svg = container.ownerSVGElement || container;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      if (d3_mouse_bug44083 < 0) {\n        var window = d3_window(container);\n        if (window.scrollX || window.scrollY) {\n          svg = d3.select(\"body\").append(\"svg\").style({\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            margin: 0,\n            padding: 0,\n            border: \"none\"\n          }, \"important\");\n          var ctm = svg[0][0].getScreenCTM();\n          d3_mouse_bug44083 = !(ctm.f || ctm.e);\n          svg.remove();\n        }\n      }\n      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, \n      point.y = e.clientY;\n      point = point.matrixTransform(container.getScreenCTM().inverse());\n      return [ point.x, point.y ];\n    }\n    var rect = container.getBoundingClientRect();\n    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];\n  }\n  d3.touch = function(container, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;\n    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return d3_mousePoint(container, touch);\n      }\n    }\n  };\n  d3.behavior.drag = function() {\n    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, \"mousemove\", \"mouseup\"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, \"touchmove\", \"touchend\");\n    function drag() {\n      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", touchstart);\n    }\n    function dragstart(id, position, subject, move, end) {\n      return function() {\n        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \".drag\" + (dragId == null ? \"\" : \"-\" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);\n        if (origin) {\n          dragOffset = origin.apply(that, arguments);\n          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];\n        } else {\n          dragOffset = [ 0, 0 ];\n        }\n        dispatch({\n          type: \"dragstart\"\n        });\n        function moved() {\n          var position1 = position(parent, dragId), dx, dy;\n          if (!position1) return;\n          dx = position1[0] - position0[0];\n          dy = position1[1] - position0[1];\n          dragged |= dx | dy;\n          position0 = position1;\n          dispatch({\n            type: \"drag\",\n            x: position1[0] + dragOffset[0],\n            y: position1[1] + dragOffset[1],\n            dx: dx,\n            dy: dy\n          });\n        }\n        function ended() {\n          if (!position(parent, dragId)) return;\n          dragSubject.on(move + dragName, null).on(end + dragName, null);\n          dragRestore(dragged);\n          dispatch({\n            type: \"dragend\"\n          });\n        }\n      };\n    }\n    drag.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return drag;\n    };\n    return d3.rebind(drag, event, \"on\");\n  };\n  function d3_behavior_dragTouchId() {\n    return d3.event.changedTouches[0].identifier;\n  }\n  d3.touches = function(container, touches) {\n    if (arguments.length < 2) touches = d3_eventSource().touches;\n    return touches ? d3_array(touches).map(function(touch) {\n      var point = d3_mousePoint(container, touch);\n      point.identifier = touch.identifier;\n      return point;\n    }) : [];\n  };\n  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n  function d3_sgn(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  }\n  function d3_cross2d(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n  function d3_acos(x) {\n    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);\n  }\n  function d3_asin(x) {\n    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);\n  }\n  function d3_sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n  function d3_cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n  function d3_tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n  function d3_haversin(x) {\n    return (x = Math.sin(x / 2)) * x;\n  }\n  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;\n  d3.interpolateZoom = function(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;\n    if (d2 < ε2) {\n      S = Math.log(w1 / w0) / ρ;\n      i = function(t) {\n        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];\n      };\n    } else {\n      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / ρ;\n      i = function(t) {\n        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];\n      };\n    }\n    i.duration = S * 1e3;\n    return i;\n  };\n  d3.behavior.zoom = function() {\n    var view = {\n      x: 0,\n      y: 0,\n      k: 1\n    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \"mousedown.zoom\", mousemove = \"mousemove.zoom\", mouseup = \"mouseup.zoom\", mousewheelTimer, touchstart = \"touchstart.zoom\", touchtime, event = d3_eventDispatch(zoom, \"zoomstart\", \"zoom\", \"zoomend\"), x0, x1, y0, y1;\n    if (!d3_behavior_zoomWheel) {\n      d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n      }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return d3.event.wheelDelta;\n      }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {\n        return -d3.event.detail;\n      }, \"MozMousePixelScroll\");\n    }\n    function zoom(g) {\n      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \".zoom\", mousewheeled).on(\"dblclick.zoom\", dblclicked).on(touchstart, touchstarted);\n    }\n    zoom.event = function(g) {\n      g.each(function() {\n        var dispatch = event.of(this, arguments), view1 = view;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.zoom\", function() {\n            view = this.__chart__ || {\n              x: 0,\n              y: 0,\n              k: 1\n            };\n            zoomstarted(dispatch);\n          }).tween(\"zoom:zoom\", function() {\n            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n            return function(t) {\n              var l = i(t), k = dx / l[2];\n              this.__chart__ = view = {\n                x: cx - l[0] * k,\n                y: cy - l[1] * k,\n                k: k\n              };\n              zoomed(dispatch);\n            };\n          }).each(\"interrupt.zoom\", function() {\n            zoomended(dispatch);\n          }).each(\"end.zoom\", function() {\n            zoomended(dispatch);\n          });\n        } else {\n          this.__chart__ = view;\n          zoomstarted(dispatch);\n          zoomed(dispatch);\n          zoomended(dispatch);\n        }\n      });\n    };\n    zoom.translate = function(_) {\n      if (!arguments.length) return [ view.x, view.y ];\n      view = {\n        x: +_[0],\n        y: +_[1],\n        k: view.k\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scale = function(_) {\n      if (!arguments.length) return view.k;\n      view = {\n        x: view.x,\n        y: view.y,\n        k: null\n      };\n      scaleTo(+_);\n      rescale();\n      return zoom;\n    };\n    zoom.scaleExtent = function(_) {\n      if (!arguments.length) return scaleExtent;\n      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.center = function(_) {\n      if (!arguments.length) return center;\n      center = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.size = function(_) {\n      if (!arguments.length) return size;\n      size = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.duration = function(_) {\n      if (!arguments.length) return duration;\n      duration = +_;\n      return zoom;\n    };\n    zoom.x = function(z) {\n      if (!arguments.length) return x1;\n      x1 = z;\n      x0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    zoom.y = function(z) {\n      if (!arguments.length) return y1;\n      y1 = z;\n      y0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    function location(p) {\n      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];\n    }\n    function point(l) {\n      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];\n    }\n    function scaleTo(s) {\n      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n    }\n    function translateTo(p, l) {\n      l = point(l);\n      view.x += p[0] - l[0];\n      view.y += p[1] - l[1];\n    }\n    function zoomTo(that, p, l, k) {\n      that.__chart__ = {\n        x: view.x,\n        y: view.y,\n        k: view.k\n      };\n      scaleTo(Math.pow(2, k));\n      translateTo(center0 = p, l);\n      that = d3.select(that);\n      if (duration > 0) that = that.transition().duration(duration);\n      that.call(zoom.event);\n    }\n    function rescale() {\n      if (x1) x1.domain(x0.range().map(function(x) {\n        return (x - view.x) / view.k;\n      }).map(x0.invert));\n      if (y1) y1.domain(y0.range().map(function(y) {\n        return (y - view.y) / view.k;\n      }).map(y0.invert));\n    }\n    function zoomstarted(dispatch) {\n      if (!zooming++) dispatch({\n        type: \"zoomstart\"\n      });\n    }\n    function zoomed(dispatch) {\n      rescale();\n      dispatch({\n        type: \"zoom\",\n        scale: view.k,\n        translate: [ view.x, view.y ]\n      });\n    }\n    function zoomended(dispatch) {\n      if (!--zooming) dispatch({\n        type: \"zoomend\"\n      }), center0 = null;\n    }\n    function mousedowned() {\n      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);\n      d3_selection_interrupt.call(that);\n      zoomstarted(dispatch);\n      function moved() {\n        dragged = 1;\n        translateTo(d3.mouse(that), location0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        subject.on(mousemove, null).on(mouseup, null);\n        dragRestore(dragged);\n        zoomended(dispatch);\n      }\n    }\n    function touchstarted() {\n      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \".zoom-\" + d3.event.changedTouches[0].identifier, touchmove = \"touchmove\" + zoomName, touchend = \"touchend\" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);\n      started();\n      zoomstarted(dispatch);\n      subject.on(mousedown, null).on(touchstart, started);\n      function relocate() {\n        var touches = d3.touches(that);\n        scale0 = view.k;\n        touches.forEach(function(t) {\n          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n        });\n        return touches;\n      }\n      function started() {\n        var target = d3.event.target;\n        d3.select(target).on(touchmove, moved).on(touchend, ended);\n        targets.push(target);\n        var changed = d3.event.changedTouches;\n        for (var i = 0, n = changed.length; i < n; ++i) {\n          locations0[changed[i].identifier] = null;\n        }\n        var touches = relocate(), now = Date.now();\n        if (touches.length === 1) {\n          if (now - touchtime < 500) {\n            var p = touches[0];\n            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n            d3_eventPreventDefault();\n          }\n          touchtime = now;\n        } else if (touches.length > 1) {\n          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];\n          distance0 = dx * dx + dy * dy;\n        }\n      }\n      function moved() {\n        var touches = d3.touches(that), p0, l0, p1, l1;\n        d3_selection_interrupt.call(that);\n        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {\n          p1 = touches[i];\n          if (l1 = locations0[p1.identifier]) {\n            if (l0) break;\n            p0 = p1, l0 = l1;\n          }\n        }\n        if (l1) {\n          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);\n          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];\n          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];\n          scaleTo(scale1 * scale0);\n        }\n        touchtime = null;\n        translateTo(p0, l0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        if (d3.event.touches.length) {\n          var changed = d3.event.changedTouches;\n          for (var i = 0, n = changed.length; i < n; ++i) {\n            delete locations0[changed[i].identifier];\n          }\n          for (var identifier in locations0) {\n            return void relocate();\n          }\n        }\n        d3.selectAll(targets).on(zoomName, null);\n        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n        dragRestore();\n        zoomended(dispatch);\n      }\n    }\n    function mousewheeled() {\n      var dispatch = event.of(this, arguments);\n      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), \n      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);\n      mousewheelTimer = setTimeout(function() {\n        mousewheelTimer = null;\n        zoomended(dispatch);\n      }, 50);\n      d3_eventPreventDefault();\n      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n      translateTo(center0, translate0);\n      zoomed(dispatch);\n    }\n    function dblclicked() {\n      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;\n      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n    }\n    return d3.rebind(zoom, event, \"on\");\n  };\n  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;\n  d3.color = d3_color;\n  function d3_color() {}\n  d3_color.prototype.toString = function() {\n    return this.rgb() + \"\";\n  };\n  d3.hsl = d3_hsl;\n  function d3_hsl(h, s, l) {\n    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n  }\n  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n  d3_hslPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, this.l / k);\n  };\n  d3_hslPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, k * this.l);\n  };\n  d3_hslPrototype.rgb = function() {\n    return d3_hsl_rgb(this.h, this.s, this.l);\n  };\n  function d3_hsl_rgb(h, s, l) {\n    var m1, m2;\n    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;\n    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;\n    l = l < 0 ? 0 : l > 1 ? 1 : l;\n    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;\n    m1 = 2 * l - m2;\n    function v(h) {\n      if (h > 360) h -= 360; else if (h < 0) h += 360;\n      if (h < 60) return m1 + (m2 - m1) * h / 60;\n      if (h < 180) return m2;\n      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;\n      return m1;\n    }\n    function vv(h) {\n      return Math.round(v(h) * 255);\n    }\n    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n  }\n  d3.hcl = d3_hcl;\n  function d3_hcl(h, c, l) {\n    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n  }\n  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n  d3_hclPrototype.brighter = function(k) {\n    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.darker = function(k) {\n    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.rgb = function() {\n    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n  };\n  function d3_hcl_lab(h, c, l) {\n    if (isNaN(h)) h = 0;\n    if (isNaN(c)) c = 0;\n    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n  }\n  d3.lab = d3_lab;\n  function d3_lab(l, a, b) {\n    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n  }\n  var d3_lab_K = 18;\n  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;\n  var d3_labPrototype = d3_lab.prototype = new d3_color();\n  d3_labPrototype.brighter = function(k) {\n    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.darker = function(k) {\n    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.rgb = function() {\n    return d3_lab_rgb(this.l, this.a, this.b);\n  };\n  function d3_lab_rgb(l, a, b) {\n    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;\n    x = d3_lab_xyz(x) * d3_lab_X;\n    y = d3_lab_xyz(y) * d3_lab_Y;\n    z = d3_lab_xyz(z) * d3_lab_Z;\n    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n  }\n  function d3_lab_hcl(l, a, b) {\n    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n  }\n  function d3_lab_xyz(x) {\n    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n  }\n  function d3_xyz_lab(x) {\n    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n  }\n  function d3_xyz_rgb(r) {\n    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n  }\n  d3.rgb = d3_rgb;\n  function d3_rgb(r, g, b) {\n    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n  }\n  function d3_rgbNumber(value) {\n    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);\n  }\n  function d3_rgbString(value) {\n    return d3_rgbNumber(value) + \"\";\n  }\n  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n  d3_rgbPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    var r = this.r, g = this.g, b = this.b, i = 30;\n    if (!r && !g && !b) return new d3_rgb(i, i, i);\n    if (r && r < i) r = i;\n    if (g && g < i) g = i;\n    if (b && b < i) b = i;\n    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n  };\n  d3_rgbPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n  };\n  d3_rgbPrototype.hsl = function() {\n    return d3_rgb_hsl(this.r, this.g, this.b);\n  };\n  d3_rgbPrototype.toString = function() {\n    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n  };\n  function d3_rgb_hex(v) {\n    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n  }\n  function d3_rgb_parse(format, rgb, hsl) {\n    var r = 0, g = 0, b = 0, m1, m2, color;\n    m1 = /([a-z]+)\\((.*)\\)/.exec(format = format.toLowerCase());\n    if (m1) {\n      m2 = m1[2].split(\",\");\n      switch (m1[1]) {\n       case \"hsl\":\n        {\n          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n        }\n\n       case \"rgb\":\n        {\n          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n        }\n      }\n    }\n    if (color = d3_rgb_names.get(format)) {\n      return rgb(color.r, color.g, color.b);\n    }\n    if (format != null && format.charAt(0) === \"#\" && !isNaN(color = parseInt(format.slice(1), 16))) {\n      if (format.length === 4) {\n        r = (color & 3840) >> 4;\n        r = r >> 4 | r;\n        g = color & 240;\n        g = g >> 4 | g;\n        b = color & 15;\n        b = b << 4 | b;\n      } else if (format.length === 7) {\n        r = (color & 16711680) >> 16;\n        g = (color & 65280) >> 8;\n        b = color & 255;\n      }\n    }\n    return rgb(r, g, b);\n  }\n  function d3_rgb_hsl(r, g, b) {\n    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n    if (d) {\n      s = l < .5 ? d / (max + min) : d / (2 - max - min);\n      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n      h *= 60;\n    } else {\n      h = NaN;\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new d3_hsl(h, s, l);\n  }\n  function d3_rgb_lab(r, g, b) {\n    r = d3_rgb_xyz(r);\n    g = d3_rgb_xyz(g);\n    b = d3_rgb_xyz(b);\n    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n  }\n  function d3_rgb_xyz(r) {\n    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n  }\n  function d3_rgb_parseNumber(c) {\n    var f = parseFloat(c);\n    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;\n  }\n  var d3_rgb_names = d3.map({\n    aliceblue: 15792383,\n    antiquewhite: 16444375,\n    aqua: 65535,\n    aquamarine: 8388564,\n    azure: 15794175,\n    beige: 16119260,\n    bisque: 16770244,\n    black: 0,\n    blanchedalmond: 16772045,\n    blue: 255,\n    blueviolet: 9055202,\n    brown: 10824234,\n    burlywood: 14596231,\n    cadetblue: 6266528,\n    chartreuse: 8388352,\n    chocolate: 13789470,\n    coral: 16744272,\n    cornflowerblue: 6591981,\n    cornsilk: 16775388,\n    crimson: 14423100,\n    cyan: 65535,\n    darkblue: 139,\n    darkcyan: 35723,\n    darkgoldenrod: 12092939,\n    darkgray: 11119017,\n    darkgreen: 25600,\n    darkgrey: 11119017,\n    darkkhaki: 12433259,\n    darkmagenta: 9109643,\n    darkolivegreen: 5597999,\n    darkorange: 16747520,\n    darkorchid: 10040012,\n    darkred: 9109504,\n    darksalmon: 15308410,\n    darkseagreen: 9419919,\n    darkslateblue: 4734347,\n    darkslategray: 3100495,\n    darkslategrey: 3100495,\n    darkturquoise: 52945,\n    darkviolet: 9699539,\n    deeppink: 16716947,\n    deepskyblue: 49151,\n    dimgray: 6908265,\n    dimgrey: 6908265,\n    dodgerblue: 2003199,\n    firebrick: 11674146,\n    floralwhite: 16775920,\n    forestgreen: 2263842,\n    fuchsia: 16711935,\n    gainsboro: 14474460,\n    ghostwhite: 16316671,\n    gold: 16766720,\n    goldenrod: 14329120,\n    gray: 8421504,\n    green: 32768,\n    greenyellow: 11403055,\n    grey: 8421504,\n    honeydew: 15794160,\n    hotpink: 16738740,\n    indianred: 13458524,\n    indigo: 4915330,\n    ivory: 16777200,\n    khaki: 15787660,\n    lavender: 15132410,\n    lavenderblush: 16773365,\n    lawngreen: 8190976,\n    lemonchiffon: 16775885,\n    lightblue: 11393254,\n    lightcoral: 15761536,\n    lightcyan: 14745599,\n    lightgoldenrodyellow: 16448210,\n    lightgray: 13882323,\n    lightgreen: 9498256,\n    lightgrey: 13882323,\n    lightpink: 16758465,\n    lightsalmon: 16752762,\n    lightseagreen: 2142890,\n    lightskyblue: 8900346,\n    lightslategray: 7833753,\n    lightslategrey: 7833753,\n    lightsteelblue: 11584734,\n    lightyellow: 16777184,\n    lime: 65280,\n    limegreen: 3329330,\n    linen: 16445670,\n    magenta: 16711935,\n    maroon: 8388608,\n    mediumaquamarine: 6737322,\n    mediumblue: 205,\n    mediumorchid: 12211667,\n    mediumpurple: 9662683,\n    mediumseagreen: 3978097,\n    mediumslateblue: 8087790,\n    mediumspringgreen: 64154,\n    mediumturquoise: 4772300,\n    mediumvioletred: 13047173,\n    midnightblue: 1644912,\n    mintcream: 16121850,\n    mistyrose: 16770273,\n    moccasin: 16770229,\n    navajowhite: 16768685,\n    navy: 128,\n    oldlace: 16643558,\n    olive: 8421376,\n    olivedrab: 7048739,\n    orange: 16753920,\n    orangered: 16729344,\n    orchid: 14315734,\n    palegoldenrod: 15657130,\n    palegreen: 10025880,\n    paleturquoise: 11529966,\n    palevioletred: 14381203,\n    papayawhip: 16773077,\n    peachpuff: 16767673,\n    peru: 13468991,\n    pink: 16761035,\n    plum: 14524637,\n    powderblue: 11591910,\n    purple: 8388736,\n    rebeccapurple: 6697881,\n    red: 16711680,\n    rosybrown: 12357519,\n    royalblue: 4286945,\n    saddlebrown: 9127187,\n    salmon: 16416882,\n    sandybrown: 16032864,\n    seagreen: 3050327,\n    seashell: 16774638,\n    sienna: 10506797,\n    silver: 12632256,\n    skyblue: 8900331,\n    slateblue: 6970061,\n    slategray: 7372944,\n    slategrey: 7372944,\n    snow: 16775930,\n    springgreen: 65407,\n    steelblue: 4620980,\n    tan: 13808780,\n    teal: 32896,\n    thistle: 14204888,\n    tomato: 16737095,\n    turquoise: 4251856,\n    violet: 15631086,\n    wheat: 16113331,\n    white: 16777215,\n    whitesmoke: 16119285,\n    yellow: 16776960,\n    yellowgreen: 10145074\n  });\n  d3_rgb_names.forEach(function(key, value) {\n    d3_rgb_names.set(key, d3_rgbNumber(value));\n  });\n  function d3_functor(v) {\n    return typeof v === \"function\" ? v : function() {\n      return v;\n    };\n  }\n  d3.functor = d3_functor;\n  d3.xhr = d3_xhrType(d3_identity);\n  function d3_xhrType(response) {\n    return function(url, mimeType, callback) {\n      if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType, \n      mimeType = null;\n      return d3_xhr(url, mimeType, response, callback);\n    };\n  }\n  function d3_xhr(url, mimeType, response, callback) {\n    var xhr = {}, dispatch = d3.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"), headers = {}, request = new XMLHttpRequest(), responseType = null;\n    if (this.XDomainRequest && !(\"withCredentials\" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {\n      request.readyState > 3 && respond();\n    };\n    function respond() {\n      var status = request.status, result;\n      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {\n        try {\n          result = response.call(xhr, request);\n        } catch (e) {\n          dispatch.error.call(xhr, e);\n          return;\n        }\n        dispatch.load.call(xhr, result);\n      } else {\n        dispatch.error.call(xhr, request);\n      }\n    }\n    request.onprogress = function(event) {\n      var o = d3.event;\n      d3.event = event;\n      try {\n        dispatch.progress.call(xhr, request);\n      } finally {\n        d3.event = o;\n      }\n    };\n    xhr.header = function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers[name];\n      if (value == null) delete headers[name]; else headers[name] = value + \"\";\n      return xhr;\n    };\n    xhr.mimeType = function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return xhr;\n    };\n    xhr.responseType = function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return xhr;\n    };\n    xhr.response = function(value) {\n      response = value;\n      return xhr;\n    };\n    [ \"get\", \"post\" ].forEach(function(method) {\n      xhr[method] = function() {\n        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));\n      };\n    });\n    xhr.send = function(method, data, callback) {\n      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;\n      request.open(method, url, true);\n      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";\n      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);\n      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);\n      if (responseType != null) request.responseType = responseType;\n      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {\n        callback(null, request);\n      });\n      dispatch.beforesend.call(xhr, request);\n      request.send(data == null ? null : data);\n      return xhr;\n    };\n    xhr.abort = function() {\n      request.abort();\n      return xhr;\n    };\n    d3.rebind(xhr, dispatch, \"on\");\n    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n  }\n  function d3_xhr_fixCallback(callback) {\n    return callback.length === 1 ? function(error, request) {\n      callback(error == null ? request : null);\n    } : callback;\n  }\n  function d3_xhrHasResponse(request) {\n    var type = request.responseType;\n    return type && type !== \"text\" ? request.response : request.responseText;\n  }\n  d3.dsv = function(delimiter, mimeType) {\n    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);\n    function dsv(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n      xhr.row = function(_) {\n        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n      };\n      return xhr;\n    }\n    function response(request) {\n      return dsv.parse(request.responseText);\n    }\n    function typedResponse(f) {\n      return function(request) {\n        return dsv.parse(request.responseText, f);\n      };\n    }\n    dsv.parse = function(text, f) {\n      var o;\n      return dsv.parseRows(text, function(row, i) {\n        if (o) return o(row, i - 1);\n        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {\n          return JSON.stringify(name) + \": d[\" + i + \"]\";\n        }).join(\",\") + \"}\");\n        o = f ? function(row, i) {\n          return f(a(row), i);\n        } : a;\n      });\n    };\n    dsv.parseRows = function(text, f) {\n      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n      function token() {\n        if (I >= N) return EOF;\n        if (eol) return eol = false, EOL;\n        var j = I;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          var c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, '\"');\n        }\n        while (I < N) {\n          var c = text.charCodeAt(I++), k = 1;\n          if (c === 10) eol = true; else if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(I) === 10) ++I, ++k;\n          } else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n        return text.slice(j);\n      }\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n      return rows;\n    };\n    dsv.format = function(rows) {\n      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n      var fieldSet = new d3_Set(), fields = [];\n      rows.forEach(function(row) {\n        for (var field in row) {\n          if (!fieldSet.has(field)) {\n            fields.push(fieldSet.add(field));\n          }\n        }\n      });\n      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {\n        return fields.map(function(field) {\n          return formatValue(row[field]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    };\n    dsv.formatRows = function(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    };\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n    function formatValue(text) {\n      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;\n    }\n    return dsv;\n  };\n  d3.csv = d3.dsv(\",\", \"text/csv\");\n  d3.tsv = d3.dsv(\"\t\", \"text/tab-separated-values\");\n  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, \"requestAnimationFrame\")] || function(callback) {\n    setTimeout(callback, 17);\n  };\n  d3.timer = function() {\n    d3_timer.apply(this, arguments);\n  };\n  function d3_timer(callback, delay, then) {\n    var n = arguments.length;\n    if (n < 2) delay = 0;\n    if (n < 3) then = Date.now();\n    var time = then + delay, timer = {\n      c: callback,\n      t: time,\n      n: null\n    };\n    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;\n    d3_timer_queueTail = timer;\n    if (!d3_timer_interval) {\n      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n    return timer;\n  }\n  function d3_timer_step() {\n    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;\n    if (delay > 24) {\n      if (isFinite(delay)) {\n        clearTimeout(d3_timer_timeout);\n        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n      }\n      d3_timer_interval = 0;\n    } else {\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  }\n  d3.timer.flush = function() {\n    d3_timer_mark();\n    d3_timer_sweep();\n  };\n  function d3_timer_mark() {\n    var now = Date.now(), timer = d3_timer_queueHead;\n    while (timer) {\n      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;\n      timer = timer.n;\n    }\n    return now;\n  }\n  function d3_timer_sweep() {\n    var t0, t1 = d3_timer_queueHead, time = Infinity;\n    while (t1) {\n      if (t1.c) {\n        if (t1.t < time) time = t1.t;\n        t1 = (t0 = t1).n;\n      } else {\n        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n      }\n    }\n    d3_timer_queueTail = t0;\n    return time;\n  }\n  function d3_format_precision(x, p) {\n    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n  }\n  d3.round = function(x, n) {\n    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n  };\n  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n  d3.formatPrefix = function(value, precision) {\n    var i = 0;\n    if (value = +value) {\n      if (value < 0) value *= -1;\n      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n    }\n    return d3_formatPrefixes[8 + i / 3];\n  };\n  function d3_formatPrefix(d, i) {\n    var k = Math.pow(10, abs(8 - i) * 3);\n    return {\n      scale: i > 8 ? function(d) {\n        return d / k;\n      } : function(d) {\n        return d * k;\n      },\n      symbol: d\n    };\n  }\n  function d3_locale_numberFormat(locale) {\n    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {\n      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n      }\n      return t.reverse().join(locale_thousands);\n    } : d3_identity;\n    return function(specifier) {\n      var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"-\", symbol = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \"\", suffix = \"\", integer = false, exponent = true;\n      if (precision) precision = +precision.substring(1);\n      if (zfill || fill === \"0\" && align === \"=\") {\n        zfill = fill = \"0\";\n        align = \"=\";\n      }\n      switch (type) {\n       case \"n\":\n        comma = true;\n        type = \"g\";\n        break;\n\n       case \"%\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"f\";\n        break;\n\n       case \"p\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"r\";\n        break;\n\n       case \"b\":\n       case \"o\":\n       case \"x\":\n       case \"X\":\n        if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();\n\n       case \"c\":\n        exponent = false;\n\n       case \"d\":\n        integer = true;\n        precision = 0;\n        break;\n\n       case \"s\":\n        scale = -1;\n        type = \"r\";\n        break;\n      }\n      if (symbol === \"$\") prefix = locale_currency[0], suffix = locale_currency[1];\n      if (type == \"r\" && !precision) type = \"g\";\n      if (precision != null) {\n        if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n      }\n      type = d3_format_types.get(type) || d3_format_typeDefault;\n      var zcomma = zfill && comma;\n      return function(value) {\n        var fullSuffix = suffix;\n        if (integer && value % 1) return \"\";\n        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign === \"-\" ? \"\" : sign;\n        if (scale < 0) {\n          var unit = d3.formatPrefix(value, precision);\n          value = unit.scale(value);\n          fullSuffix = unit.symbol + suffix;\n        } else {\n          value *= scale;\n        }\n        value = type(value, precision);\n        var i = value.lastIndexOf(\".\"), before, after;\n        if (i < 0) {\n          var j = exponent ? value.lastIndexOf(\"e\") : -1;\n          if (j < 0) before = value, after = \"\"; else before = value.substring(0, j), after = value.substring(j);\n        } else {\n          before = value.substring(0, i);\n          after = locale_decimal + value.substring(i + 1);\n        }\n        if (!zfill && comma) before = formatGroup(before, Infinity);\n        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n        negative += prefix;\n        value = before + after;\n        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n      };\n    };\n  }\n  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n  var d3_format_types = d3.map({\n    b: function(x) {\n      return x.toString(2);\n    },\n    c: function(x) {\n      return String.fromCharCode(x);\n    },\n    o: function(x) {\n      return x.toString(8);\n    },\n    x: function(x) {\n      return x.toString(16);\n    },\n    X: function(x) {\n      return x.toString(16).toUpperCase();\n    },\n    g: function(x, p) {\n      return x.toPrecision(p);\n    },\n    e: function(x, p) {\n      return x.toExponential(p);\n    },\n    f: function(x, p) {\n      return x.toFixed(p);\n    },\n    r: function(x, p) {\n      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n    }\n  });\n  function d3_format_typeDefault(x) {\n    return x + \"\";\n  }\n  var d3_time = d3.time = {}, d3_date = Date;\n  function d3_date_utc() {\n    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n  }\n  d3_date_utc.prototype = {\n    getDate: function() {\n      return this._.getUTCDate();\n    },\n    getDay: function() {\n      return this._.getUTCDay();\n    },\n    getFullYear: function() {\n      return this._.getUTCFullYear();\n    },\n    getHours: function() {\n      return this._.getUTCHours();\n    },\n    getMilliseconds: function() {\n      return this._.getUTCMilliseconds();\n    },\n    getMinutes: function() {\n      return this._.getUTCMinutes();\n    },\n    getMonth: function() {\n      return this._.getUTCMonth();\n    },\n    getSeconds: function() {\n      return this._.getUTCSeconds();\n    },\n    getTime: function() {\n      return this._.getTime();\n    },\n    getTimezoneOffset: function() {\n      return 0;\n    },\n    valueOf: function() {\n      return this._.valueOf();\n    },\n    setDate: function() {\n      d3_time_prototype.setUTCDate.apply(this._, arguments);\n    },\n    setDay: function() {\n      d3_time_prototype.setUTCDay.apply(this._, arguments);\n    },\n    setFullYear: function() {\n      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n    },\n    setHours: function() {\n      d3_time_prototype.setUTCHours.apply(this._, arguments);\n    },\n    setMilliseconds: function() {\n      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n    },\n    setMinutes: function() {\n      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n    },\n    setMonth: function() {\n      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n    },\n    setSeconds: function() {\n      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n    },\n    setTime: function() {\n      d3_time_prototype.setTime.apply(this._, arguments);\n    }\n  };\n  var d3_time_prototype = Date.prototype;\n  function d3_time_interval(local, step, number) {\n    function round(date) {\n      var d0 = local(date), d1 = offset(d0, 1);\n      return date - d0 < d1 - date ? d0 : d1;\n    }\n    function ceil(date) {\n      step(date = local(new d3_date(date - 1)), 1);\n      return date;\n    }\n    function offset(date, k) {\n      step(date = new d3_date(+date), k);\n      return date;\n    }\n    function range(t0, t1, dt) {\n      var time = ceil(t0), times = [];\n      if (dt > 1) {\n        while (time < t1) {\n          if (!(number(time) % dt)) times.push(new Date(+time));\n          step(time, 1);\n        }\n      } else {\n        while (time < t1) times.push(new Date(+time)), step(time, 1);\n      }\n      return times;\n    }\n    function range_utc(t0, t1, dt) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = t0;\n        return range(utc, t1, dt);\n      } finally {\n        d3_date = Date;\n      }\n    }\n    local.floor = local;\n    local.round = round;\n    local.ceil = ceil;\n    local.offset = offset;\n    local.range = range;\n    var utc = local.utc = d3_time_interval_utc(local);\n    utc.floor = utc;\n    utc.round = d3_time_interval_utc(round);\n    utc.ceil = d3_time_interval_utc(ceil);\n    utc.offset = d3_time_interval_utc(offset);\n    utc.range = range_utc;\n    return local;\n  }\n  function d3_time_interval_utc(method) {\n    return function(date, k) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = date;\n        return method(utc, k)._;\n      } finally {\n        d3_date = Date;\n      }\n    };\n  }\n  d3_time.year = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setMonth(0, 1);\n    return date;\n  }, function(date, offset) {\n    date.setFullYear(date.getFullYear() + offset);\n  }, function(date) {\n    return date.getFullYear();\n  });\n  d3_time.years = d3_time.year.range;\n  d3_time.years.utc = d3_time.year.utc.range;\n  d3_time.day = d3_time_interval(function(date) {\n    var day = new d3_date(2e3, 0);\n    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    return day;\n  }, function(date, offset) {\n    date.setDate(date.getDate() + offset);\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n  d3_time.days = d3_time.day.range;\n  d3_time.days.utc = d3_time.day.utc.range;\n  d3_time.dayOfYear = function(date) {\n    var year = d3_time.year(date);\n    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n  };\n  [ \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\" ].forEach(function(day, i) {\n    i = 7 - i;\n    var interval = d3_time[day] = d3_time_interval(function(date) {\n      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n      return date;\n    }, function(date, offset) {\n      date.setDate(date.getDate() + Math.floor(offset) * 7);\n    }, function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n    });\n    d3_time[day + \"s\"] = interval.range;\n    d3_time[day + \"s\"].utc = interval.utc.range;\n    d3_time[day + \"OfYear\"] = function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n    };\n  });\n  d3_time.week = d3_time.sunday;\n  d3_time.weeks = d3_time.sunday.range;\n  d3_time.weeks.utc = d3_time.sunday.utc.range;\n  d3_time.weekOfYear = d3_time.sundayOfYear;\n  function d3_locale_timeFormat(locale) {\n    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n    function d3_time_format(template) {\n      var n = template.length;\n      function format(date) {\n        var string = [], i = -1, j = 0, c, p, f;\n        while (++i < n) {\n          if (template.charCodeAt(i) === 37) {\n            string.push(template.slice(j, i));\n            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n        string.push(template.slice(j, i));\n        return string.join(\"\");\n      }\n      format.parse = function(string) {\n        var d = {\n          y: 1900,\n          m: 0,\n          d: 1,\n          H: 0,\n          M: 0,\n          S: 0,\n          L: 0,\n          Z: null\n        }, i = d3_time_parse(d, template, string, 0);\n        if (i != string.length) return null;\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();\n        if (\"j\" in d) date.setFullYear(d.y, 0, d.j); else if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n          date.setFullYear(d.y, 0, 1);\n          date.setFullYear(d.y, 0, \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n        } else date.setFullYear(d.y, d.m, d.d);\n        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n        return localZ ? date._ : date;\n      };\n      format.toString = function() {\n        return template;\n      };\n      return format;\n    }\n    function d3_time_parse(date, template, string, j) {\n      var c, p, t, i = 0, n = template.length, m = string.length;\n      while (i < n) {\n        if (j >= m) return -1;\n        c = template.charCodeAt(i++);\n        if (c === 37) {\n          t = template.charAt(i++);\n          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n          if (!p || (j = p(date, string, j)) < 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n      return j;\n    }\n    d3_time_format.utc = function(template) {\n      var local = d3_time_format(template);\n      function format(date) {\n        try {\n          d3_date = d3_date_utc;\n          var utc = new d3_date();\n          utc._ = date;\n          return local(utc);\n        } finally {\n          d3_date = Date;\n        }\n      }\n      format.parse = function(string) {\n        try {\n          d3_date = d3_date_utc;\n          var date = local.parse(string);\n          return date && date._;\n        } finally {\n          d3_date = Date;\n        }\n      };\n      format.toString = local.toString;\n      return format;\n    };\n    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n    locale_periods.forEach(function(p, i) {\n      d3_time_periodLookup.set(p.toLowerCase(), i);\n    });\n    var d3_time_formats = {\n      a: function(d) {\n        return locale_shortDays[d.getDay()];\n      },\n      A: function(d) {\n        return locale_days[d.getDay()];\n      },\n      b: function(d) {\n        return locale_shortMonths[d.getMonth()];\n      },\n      B: function(d) {\n        return locale_months[d.getMonth()];\n      },\n      c: d3_time_format(locale_dateTime),\n      d: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      e: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      H: function(d, p) {\n        return d3_time_formatPad(d.getHours(), p, 2);\n      },\n      I: function(d, p) {\n        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n      },\n      j: function(d, p) {\n        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n      },\n      L: function(d, p) {\n        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n      },\n      m: function(d, p) {\n        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n      },\n      M: function(d, p) {\n        return d3_time_formatPad(d.getMinutes(), p, 2);\n      },\n      p: function(d) {\n        return locale_periods[+(d.getHours() >= 12)];\n      },\n      S: function(d, p) {\n        return d3_time_formatPad(d.getSeconds(), p, 2);\n      },\n      U: function(d, p) {\n        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n      },\n      w: function(d) {\n        return d.getDay();\n      },\n      W: function(d, p) {\n        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n      },\n      x: d3_time_format(locale_date),\n      X: d3_time_format(locale_time),\n      y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n      },\n      Y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n      },\n      Z: d3_time_zone,\n      \"%\": function() {\n        return \"%\";\n      }\n    };\n    var d3_time_parsers = {\n      a: d3_time_parseWeekdayAbbrev,\n      A: d3_time_parseWeekday,\n      b: d3_time_parseMonthAbbrev,\n      B: d3_time_parseMonth,\n      c: d3_time_parseLocaleFull,\n      d: d3_time_parseDay,\n      e: d3_time_parseDay,\n      H: d3_time_parseHour24,\n      I: d3_time_parseHour24,\n      j: d3_time_parseDayOfYear,\n      L: d3_time_parseMilliseconds,\n      m: d3_time_parseMonthNumber,\n      M: d3_time_parseMinutes,\n      p: d3_time_parseAmPm,\n      S: d3_time_parseSeconds,\n      U: d3_time_parseWeekNumberSunday,\n      w: d3_time_parseWeekdayNumber,\n      W: d3_time_parseWeekNumberMonday,\n      x: d3_time_parseLocaleDate,\n      X: d3_time_parseLocaleTime,\n      y: d3_time_parseYear,\n      Y: d3_time_parseFullYear,\n      Z: d3_time_parseZone,\n      \"%\": d3_time_parseLiteralPercent\n    };\n    function d3_time_parseWeekdayAbbrev(date, string, i) {\n      d3_time_dayAbbrevRe.lastIndex = 0;\n      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseWeekday(date, string, i) {\n      d3_time_dayRe.lastIndex = 0;\n      var n = d3_time_dayRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonthAbbrev(date, string, i) {\n      d3_time_monthAbbrevRe.lastIndex = 0;\n      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonth(date, string, i) {\n      d3_time_monthRe.lastIndex = 0;\n      var n = d3_time_monthRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseLocaleFull(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n    }\n    function d3_time_parseLocaleDate(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n    }\n    function d3_time_parseLocaleTime(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n    }\n    function d3_time_parseAmPm(date, string, i) {\n      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n      return n == null ? -1 : (date.p = n, i);\n    }\n    return d3_time_format;\n  }\n  var d3_time_formatPads = {\n    \"-\": \"\",\n    _: \" \",\n    \"0\": \"0\"\n  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;\n  function d3_time_formatPad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\", string = (sign ? -value : value) + \"\", length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n  function d3_time_formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");\n  }\n  function d3_time_formatLookup(names) {\n    var map = new d3_Map(), i = -1, n = names.length;\n    while (++i < n) map.set(names[i].toLowerCase(), i);\n    return map;\n  }\n  function d3_time_parseWeekdayNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n    return n ? (date.w = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberSunday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.U = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberMonday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.W = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseFullYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n    return n ? (date.y = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n  }\n  function d3_time_parseZone(date, string, i) {\n    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, \n    i + 5) : -1;\n  }\n  function d3_time_expandYear(d) {\n    return d + (d > 68 ? 1900 : 2e3);\n  }\n  function d3_time_parseMonthNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n  }\n  function d3_time_parseDay(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.d = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseDayOfYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.j = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseHour24(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.H = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMinutes(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.M = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseSeconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.S = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMilliseconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.L = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_zone(d) {\n    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = abs(z) / 60 | 0, zm = abs(z) % 60;\n    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);\n  }\n  function d3_time_parseLiteralPercent(date, string, i) {\n    d3_time_percentRe.lastIndex = 0;\n    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n  function d3_time_formatMulti(formats) {\n    var n = formats.length, i = -1;\n    while (++i < n) formats[i][0] = this(formats[i][0]);\n    return function(date) {\n      var i = 0, f = formats[i];\n      while (!f[1](date)) f = formats[++i];\n      return f[0](date);\n    };\n  }\n  d3.locale = function(locale) {\n    return {\n      numberFormat: d3_locale_numberFormat(locale),\n      timeFormat: d3_locale_timeFormat(locale)\n    };\n  };\n  var d3_locale_enUS = d3.locale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [ 3 ],\n    currency: [ \"$\", \"\" ],\n    dateTime: \"%a %b %e %X %Y\",\n    date: \"%m/%d/%Y\",\n    time: \"%H:%M:%S\",\n    periods: [ \"AM\", \"PM\" ],\n    days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],\n    shortDays: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],\n    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n    shortMonths: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\n  });\n  d3.format = d3_locale_enUS.numberFormat;\n  d3.geo = {};\n  function d3_adder() {}\n  d3_adder.prototype = {\n    s: 0,\n    t: 0,\n    add: function(y) {\n      d3_adderSum(y, this.t, d3_adderTemp);\n      d3_adderSum(d3_adderTemp.s, this.s, this);\n      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;\n    },\n    reset: function() {\n      this.s = this.t = 0;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n  var d3_adderTemp = new d3_adder();\n  function d3_adderSum(a, b, o) {\n    var x = o.s = a + b, bv = x - a, av = x - bv;\n    o.t = a - av + (b - bv);\n  }\n  d3.geo.stream = function(object, listener) {\n    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n      d3_geo_streamObjectType[object.type](object, listener);\n    } else {\n      d3_geo_streamGeometry(object, listener);\n    }\n  };\n  function d3_geo_streamGeometry(geometry, listener) {\n    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n    }\n  }\n  var d3_geo_streamObjectType = {\n    Feature: function(feature, listener) {\n      d3_geo_streamGeometry(feature.geometry, listener);\n    },\n    FeatureCollection: function(object, listener) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);\n    }\n  };\n  var d3_geo_streamGeometryType = {\n    Sphere: function(object, listener) {\n      listener.sphere();\n    },\n    Point: function(object, listener) {\n      object = object.coordinates;\n      listener.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, listener) {\n      d3_geo_streamLine(object.coordinates, listener, 0);\n    },\n    MultiLineString: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);\n    },\n    Polygon: function(object, listener) {\n      d3_geo_streamPolygon(object.coordinates, listener);\n    },\n    MultiPolygon: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);\n    },\n    GeometryCollection: function(object, listener) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);\n    }\n  };\n  function d3_geo_streamLine(coordinates, listener, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    listener.lineStart();\n    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n    listener.lineEnd();\n  }\n  function d3_geo_streamPolygon(coordinates, listener) {\n    var i = -1, n = coordinates.length;\n    listener.polygonStart();\n    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);\n    listener.polygonEnd();\n  }\n  d3.geo.area = function(object) {\n    d3_geo_areaSum = 0;\n    d3.geo.stream(object, d3_geo_area);\n    return d3_geo_areaSum;\n  };\n  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();\n  var d3_geo_area = {\n    sphere: function() {\n      d3_geo_areaSum += 4 * π;\n    },\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_areaRingSum.reset();\n      d3_geo_area.lineStart = d3_geo_areaRingStart;\n    },\n    polygonEnd: function() {\n      var area = 2 * d3_geo_areaRingSum;\n      d3_geo_areaSum += area < 0 ? 4 * π + area : area;\n      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n    }\n  };\n  function d3_geo_areaRingStart() {\n    var λ00, φ00, λ0, cosφ0, sinφ0;\n    d3_geo_area.point = function(λ, φ) {\n      d3_geo_area.point = nextPoint;\n      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), \n      sinφ0 = Math.sin(φ);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      φ = φ * d3_radians / 2 + π / 4;\n      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n      d3_geo_areaRingSum.add(Math.atan2(v, u));\n      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n    }\n    d3_geo_area.lineEnd = function() {\n      nextPoint(λ00, φ00);\n    };\n  }\n  function d3_geo_cartesian(spherical) {\n    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);\n    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];\n  }\n  function d3_geo_cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n  function d3_geo_cartesianCross(a, b) {\n    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];\n  }\n  function d3_geo_cartesianAdd(a, b) {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n  }\n  function d3_geo_cartesianScale(vector, k) {\n    return [ vector[0] * k, vector[1] * k, vector[2] * k ];\n  }\n  function d3_geo_cartesianNormalize(d) {\n    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l;\n    d[1] /= l;\n    d[2] /= l;\n  }\n  function d3_geo_spherical(cartesian) {\n    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];\n  }\n  function d3_geo_sphericalEqual(a, b) {\n    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;\n  }\n  d3.geo.bounds = function() {\n    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n    var bound = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        bound.point = ringPoint;\n        bound.lineStart = ringStart;\n        bound.lineEnd = ringEnd;\n        dλSum = 0;\n        d3_geo_area.polygonStart();\n      },\n      polygonEnd: function() {\n        d3_geo_area.polygonEnd();\n        bound.point = point;\n        bound.lineStart = lineStart;\n        bound.lineEnd = lineEnd;\n        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;\n        range[0] = λ0, range[1] = λ1;\n      }\n    };\n    function point(λ, φ) {\n      ranges.push(range = [ λ0 = λ, λ1 = λ ]);\n      if (φ < φ0) φ0 = φ;\n      if (φ > φ1) φ1 = φ;\n    }\n    function linePoint(λ, φ) {\n      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);\n      if (p0) {\n        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n        d3_geo_cartesianNormalize(inflection);\n        inflection = d3_geo_spherical(inflection);\n        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;\n        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = inflection[1] * d3_degrees;\n          if (φi > φ1) φ1 = φi;\n        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = -inflection[1] * d3_degrees;\n          if (φi < φ0) φ0 = φi;\n        } else {\n          if (φ < φ0) φ0 = φ;\n          if (φ > φ1) φ1 = φ;\n        }\n        if (antimeridian) {\n          if (λ < λ_) {\n            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n          } else {\n            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n          }\n        } else {\n          if (λ1 >= λ0) {\n            if (λ < λ0) λ0 = λ;\n            if (λ > λ1) λ1 = λ;\n          } else {\n            if (λ > λ_) {\n              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n            } else {\n              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n            }\n          }\n        }\n      } else {\n        point(λ, φ);\n      }\n      p0 = p, λ_ = λ;\n    }\n    function lineStart() {\n      bound.point = linePoint;\n    }\n    function lineEnd() {\n      range[0] = λ0, range[1] = λ1;\n      bound.point = point;\n      p0 = null;\n    }\n    function ringPoint(λ, φ) {\n      if (p0) {\n        var dλ = λ - λ_;\n        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;\n      } else λ__ = λ, φ__ = φ;\n      d3_geo_area.point(λ, φ);\n      linePoint(λ, φ);\n    }\n    function ringStart() {\n      d3_geo_area.lineStart();\n    }\n    function ringEnd() {\n      ringPoint(λ__, φ__);\n      d3_geo_area.lineEnd();\n      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);\n      range[0] = λ0, range[1] = λ1;\n      p0 = null;\n    }\n    function angle(λ0, λ1) {\n      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;\n    }\n    function compareRanges(a, b) {\n      return a[0] - b[0];\n    }\n    function withinRange(x, range) {\n      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n    }\n    return function(feature) {\n      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n      ranges = [];\n      d3.geo.stream(feature, bound);\n      var n = ranges.length;\n      if (n) {\n        ranges.sort(compareRanges);\n        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {\n          b = ranges[i];\n          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n          } else {\n            merged.push(a = b);\n          }\n        }\n        var best = -Infinity, dλ;\n        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {\n          b = merged[i];\n          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];\n        }\n      }\n      ranges = range = null;\n      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];\n    };\n  }();\n  d3.geo.centroid = function(object) {\n    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n    d3.geo.stream(object, d3_geo_centroid);\n    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;\n    if (m < ε2) {\n      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n      m = x * x + y * y + z * z;\n      if (m < ε2) return [ NaN, NaN ];\n    }\n    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];\n  };\n  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n  var d3_geo_centroid = {\n    sphere: d3_noop,\n    point: d3_geo_centroidPoint,\n    lineStart: d3_geo_centroidLineStart,\n    lineEnd: d3_geo_centroidLineEnd,\n    polygonStart: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n    }\n  };\n  function d3_geo_centroidPoint(λ, φ) {\n    λ *= d3_radians;\n    var cosφ = Math.cos(φ *= d3_radians);\n    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n  }\n  function d3_geo_centroidPointXYZ(x, y, z) {\n    ++d3_geo_centroidW0;\n    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n  }\n  function d3_geo_centroidLineStart() {\n    var x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroid.point = nextPoint;\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_centroidLineEnd() {\n    d3_geo_centroid.point = d3_geo_centroidPoint;\n  }\n  function d3_geo_centroidRingStart() {\n    var λ00, φ00, x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ00 = λ, φ00 = φ;\n      d3_geo_centroid.point = nextPoint;\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    d3_geo_centroid.lineEnd = function() {\n      nextPoint(λ00, φ00);\n      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n      d3_geo_centroid.point = d3_geo_centroidPoint;\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);\n      d3_geo_centroidX2 += v * cx;\n      d3_geo_centroidY2 += v * cy;\n      d3_geo_centroidZ2 += v * cz;\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_compose(a, b) {\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n    return compose;\n  }\n  function d3_true() {\n    return true;\n  }\n  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n    var subject = [], clip = [];\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n];\n      if (d3_geo_sphericalEqual(p0, p1)) {\n        listener.lineStart();\n        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);\n        listener.lineEnd();\n        return;\n      }\n      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n    });\n    clip.sort(compare);\n    d3_geo_clipPolygonLinkCircular(subject);\n    d3_geo_clipPolygonLinkCircular(clip);\n    if (!subject.length) return;\n    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {\n      clip[i].e = entry = !entry;\n    }\n    var start = subject[0], points, point;\n    while (1) {\n      var current = start, isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      listener.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, listener);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, listener);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      listener.lineEnd();\n    }\n  }\n  function d3_geo_clipPolygonLinkCircular(array) {\n    if (!(n = array.length)) return;\n    var n, i = 0, a = array[0], b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other;\n    this.e = entry;\n    this.v = false;\n    this.n = this.p = null;\n  }\n  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n    return function(rotate, listener) {\n      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = d3.merge(segments);\n          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n          if (segments.length) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n          } else if (clipStartInside) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            interpolate(null, null, 1, listener);\n            listener.lineEnd();\n          }\n          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          listener.polygonStart();\n          listener.lineStart();\n          interpolate(null, null, 1, listener);\n          listener.lineEnd();\n          listener.polygonEnd();\n        }\n      };\n      function point(λ, φ) {\n        var point = rotate(λ, φ);\n        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n      }\n      function pointLine(λ, φ) {\n        var point = rotate(λ, φ);\n        line.point(point[0], point[1]);\n      }\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n      var segments;\n      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n      function pointRing(λ, φ) {\n        ring.push([ λ, φ ]);\n        var point = rotate(λ, φ);\n        ringListener.point(point[0], point[1]);\n      }\n      function ringStart() {\n        ringListener.lineStart();\n        ring = [];\n      }\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringListener.lineEnd();\n        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n        if (!n) return;\n        if (clean & 1) {\n          segment = ringSegments[0];\n          var n = segment.length - 1, i = -1, point;\n          if (n > 0) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            while (++i < n) listener.point((point = segment[i])[0], point[1]);\n            listener.lineEnd();\n          }\n          return;\n        }\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n      }\n      return clip;\n    };\n  }\n  function d3_geo_clipSegmentLength1(segment) {\n    return segment.length > 1;\n  }\n  function d3_geo_clipBufferListener() {\n    var lines = [], line;\n    return {\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      point: function(λ, φ) {\n        line.push([ λ, φ ]);\n      },\n      lineEnd: d3_noop,\n      buffer: function() {\n        var buffer = lines;\n        lines = [];\n        line = null;\n        return buffer;\n      },\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      }\n    };\n  }\n  function d3_geo_clipSort(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n  }\n  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n  function d3_geo_clipAntimeridianLine(listener) {\n    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;\n    return {\n      lineStart: function() {\n        listener.lineStart();\n        clean = 1;\n      },\n      point: function(λ1, φ1) {\n        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);\n        if (abs(dλ - π) < ε) {\n          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          listener.point(λ1, φ0);\n          clean = 0;\n        } else if (sλ0 !== sλ1 && dλ >= π) {\n          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;\n          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;\n          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          clean = 0;\n        }\n        listener.point(λ0 = λ1, φ0 = φ1);\n        sλ0 = sλ1;\n      },\n      lineEnd: function() {\n        listener.lineEnd();\n        λ0 = φ0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean;\n      }\n    };\n  }\n  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);\n    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n  }\n  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n    var φ;\n    if (from == null) {\n      φ = direction * halfπ;\n      listener.point(-π, φ);\n      listener.point(0, φ);\n      listener.point(π, φ);\n      listener.point(π, 0);\n      listener.point(π, -φ);\n      listener.point(0, -φ);\n      listener.point(-π, -φ);\n      listener.point(-π, 0);\n      listener.point(-π, φ);\n    } else if (abs(from[0] - to[0]) > ε) {\n      var s = from[0] < to[0] ? π : -π;\n      φ = direction * s / 2;\n      listener.point(-s, φ);\n      listener.point(0, φ);\n      listener.point(s, φ);\n    } else {\n      listener.point(to[0], to[1]);\n    }\n  }\n  function d3_geo_pointInPolygon(point, polygon) {\n    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n    d3_geo_areaRingSum.reset();\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      var ring = polygon[i], m = ring.length;\n      if (!m) continue;\n      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n      while (true) {\n        if (j === m) j = 0;\n        point = ring[j];\n        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;\n        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {\n          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n          d3_geo_cartesianNormalize(arc);\n          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n          d3_geo_cartesianNormalize(intersection);\n          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);\n          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ dλ >= 0 ? 1 : -1;\n          }\n        }\n        if (!j++) break;\n        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n      }\n    }\n    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;\n  }\n  function d3_geo_clipCircle(radius) {\n    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);\n    function visible(λ, φ) {\n      return Math.cos(λ) * Math.cos(φ) > cr;\n    }\n    function clipLine(listener) {\n      var point0, c0, v0, v00, clean;\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(λ, φ) {\n          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n          if (!point0 && (v00 = v0 = v)) listener.lineStart();\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n              point1[0] += ε;\n              point1[1] += ε;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              listener.lineStart();\n              point2 = intersect(point1, point0);\n              listener.point(point2[0], point2[1]);\n            } else {\n              point2 = intersect(point0, point1);\n              listener.point(point2[0], point2[1]);\n              listener.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n              } else {\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n            listener.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) listener.lineEnd();\n          point0 = null;\n        },\n        clean: function() {\n          return clean | (v00 && v0) << 1;\n        }\n      };\n    }\n    function intersect(a, b, two) {\n      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);\n      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n      if (!determinant) return !two && a;\n      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n      d3_geo_cartesianAdd(A, B);\n      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n      if (t2 < 0) return;\n      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);\n      d3_geo_cartesianAdd(q, A);\n      q = d3_geo_spherical(q);\n      if (!two) return q;\n      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;\n      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;\n      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;\n      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;\n      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n        d3_geo_cartesianAdd(q1, A);\n        return [ q, d3_geo_spherical(q1) ];\n      }\n    }\n    function code(λ, φ) {\n      var r = smallRadius ? radius : π - radius, code = 0;\n      if (λ < -r) code |= 1; else if (λ > r) code |= 2;\n      if (φ < -r) code |= 4; else if (φ > r) code |= 8;\n      return code;\n    }\n  }\n  function d3_geom_clipLine(x0, y0, x1, y1) {\n    return function(line) {\n      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n      r = x0 - ax;\n      if (!dx && r > 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dx > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = x1 - ax;\n      if (!dx && r < 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dx > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      r = y0 - ay;\n      if (!dy && r > 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dy > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = y1 - ay;\n      if (!dy && r < 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dy > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      if (t0 > 0) line.a = {\n        x: ax + t0 * dx,\n        y: ay + t0 * dy\n      };\n      if (t1 < 1) line.b = {\n        x: ax + t1 * dx,\n        y: ay + t1 * dy\n      };\n      return line;\n    };\n  }\n  var d3_geo_clipExtentMAX = 1e9;\n  d3.geo.clipExtent = function() {\n    var x0, y0, x1, y1, stream, clip, clipExtent = {\n      stream: function(output) {\n        if (stream) stream.valid = false;\n        stream = clip(output);\n        stream.valid = true;\n        return stream;\n      },\n      extent: function(_) {\n        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n        if (stream) stream.valid = false, stream = null;\n        return clipExtent;\n      }\n    };\n    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);\n  };\n  function d3_geo_clipExtent(x0, y0, x1, y1) {\n    return function(listener) {\n      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          listener = bufferListener;\n          segments = [];\n          polygon = [];\n          clean = true;\n        },\n        polygonEnd: function() {\n          listener = listener_;\n          segments = d3.merge(segments);\n          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;\n          if (inside || visible) {\n            listener.polygonStart();\n            if (inside) {\n              listener.lineStart();\n              interpolate(null, null, 1, listener);\n              listener.lineEnd();\n            }\n            if (visible) {\n              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n            }\n            listener.polygonEnd();\n          }\n          segments = polygon = ring = null;\n        }\n      };\n      function insidePolygon(p) {\n        var wn = 0, n = polygon.length, y = p[1];\n        for (var i = 0; i < n; ++i) {\n          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {\n            b = v[j];\n            if (a[1] <= y) {\n              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;\n            } else {\n              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;\n            }\n            a = b;\n          }\n        }\n        return wn !== 0;\n      }\n      function interpolate(from, to, direction, listener) {\n        var a = 0, a1 = 0;\n        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n          do {\n            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n          } while ((a = (a + direction + 4) % 4) !== a1);\n        } else {\n          listener.point(to[0], to[1]);\n        }\n      }\n      function pointVisible(x, y) {\n        return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n      }\n      function point(x, y) {\n        if (pointVisible(x, y)) listener.point(x, y);\n      }\n      var x__, y__, v__, x_, y_, v_, first, clean;\n      function lineStart() {\n        clip.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferListener.rejoin();\n          segments.push(bufferListener.buffer());\n        }\n        clip.point = point;\n        if (v_) listener.lineEnd();\n      }\n      function linePoint(x, y) {\n        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n        var v = pointVisible(x, y);\n        if (polygon) ring.push([ x, y ]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            listener.lineStart();\n            listener.point(x, y);\n          }\n        } else {\n          if (v && v_) listener.point(x, y); else {\n            var l = {\n              a: {\n                x: x_,\n                y: y_\n              },\n              b: {\n                x: x,\n                y: y\n              }\n            };\n            if (clipLine(l)) {\n              if (!v_) {\n                listener.lineStart();\n                listener.point(l.a.x, l.a.y);\n              }\n              listener.point(l.b.x, l.b.y);\n              if (!v) listener.lineEnd();\n              clean = false;\n            } else if (v) {\n              listener.lineStart();\n              listener.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n      return clip;\n    };\n    function corner(p, direction) {\n      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n    }\n    function compare(a, b) {\n      return comparePoints(a.x, b.x);\n    }\n    function comparePoints(a, b) {\n      var ca = corner(a, 1), cb = corner(b, 1);\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }\n  }\n  function d3_geo_conic(projectAt) {\n    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);\n    p.parallels = function(_) {\n      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];\n      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n    };\n    return p;\n  }\n  function d3_geo_conicEqualArea(φ0, φ1) {\n    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;\n    function forward(λ, φ) {\n      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = ρ0 - y;\n      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEqualArea = function() {\n    return d3_geo_conic(d3_geo_conicEqualArea);\n  }).raw = d3_geo_conicEqualArea;\n  d3.geo.albers = function() {\n    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);\n  };\n  d3.geo.albersUsa = function() {\n    var lower48 = d3.geo.albers();\n    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);\n    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);\n    var point, pointStream = {\n      point: function(x, y) {\n        point = [ x, y ];\n      }\n    }, lower48Point, alaskaPoint, hawaiiPoint;\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      point = null;\n      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);\n      return point;\n    }\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n    };\n    albersUsa.stream = function(stream) {\n      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n      return {\n        point: function(x, y) {\n          lower48Stream.point(x, y);\n          alaskaStream.point(x, y);\n          hawaiiStream.point(x, y);\n        },\n        sphere: function() {\n          lower48Stream.sphere();\n          alaskaStream.sphere();\n          hawaiiStream.sphere();\n        },\n        lineStart: function() {\n          lower48Stream.lineStart();\n          alaskaStream.lineStart();\n          hawaiiStream.lineStart();\n        },\n        lineEnd: function() {\n          lower48Stream.lineEnd();\n          alaskaStream.lineEnd();\n          hawaiiStream.lineEnd();\n        },\n        polygonStart: function() {\n          lower48Stream.polygonStart();\n          alaskaStream.polygonStart();\n          hawaiiStream.polygonStart();\n        },\n        polygonEnd: function() {\n          lower48Stream.polygonEnd();\n          alaskaStream.polygonEnd();\n          hawaiiStream.polygonEnd();\n        }\n      };\n    };\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_);\n      alaska.precision(_);\n      hawaii.precision(_);\n      return albersUsa;\n    };\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_);\n      alaska.scale(_ * .35);\n      hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      return albersUsa;\n    };\n    return albersUsa.scale(1070);\n  };\n  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_pathAreaPolygon = 0;\n      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n    }\n  };\n  function d3_geo_pathAreaRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathArea.point = function(x, y) {\n      d3_geo_pathArea.point = nextPoint;\n      x00 = x0 = x, y00 = y0 = y;\n    };\n    function nextPoint(x, y) {\n      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n      x0 = x, y0 = y;\n    }\n    d3_geo_pathArea.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n  var d3_geo_pathBounds = {\n    point: d3_geo_pathBoundsPoint,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_pathBoundsPoint(x, y) {\n    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n  }\n  function d3_geo_pathBuffer() {\n    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = d3_geo_pathBufferCircle(_);\n        return stream;\n      },\n      result: function() {\n        if (buffer.length) {\n          var result = buffer.join(\"\");\n          buffer = [];\n          return result;\n        }\n      }\n    };\n    function point(x, y) {\n      buffer.push(\"M\", x, \",\", y, pointCircle);\n    }\n    function pointLineStart(x, y) {\n      buffer.push(\"M\", x, \",\", y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      buffer.push(\"L\", x, \",\", y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      buffer.push(\"Z\");\n    }\n    return stream;\n  }\n  function d3_geo_pathBufferCircle(radius) {\n    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n  }\n  var d3_geo_pathCentroid = {\n    point: d3_geo_pathCentroidPoint,\n    lineStart: d3_geo_pathCentroidLineStart,\n    lineEnd: d3_geo_pathCentroidLineEnd,\n    polygonStart: function() {\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n    }\n  };\n  function d3_geo_pathCentroidPoint(x, y) {\n    d3_geo_centroidX0 += x;\n    d3_geo_centroidY0 += y;\n    ++d3_geo_centroidZ0;\n  }\n  function d3_geo_pathCentroidLineStart() {\n    var x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n  }\n  function d3_geo_pathCentroidLineEnd() {\n    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n  }\n  function d3_geo_pathCentroidRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      z = y0 * x - x0 * y;\n      d3_geo_centroidX2 += z * (x0 + x);\n      d3_geo_centroidY2 += z * (y0 + y);\n      d3_geo_centroidZ2 += z * 3;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n    d3_geo_pathCentroid.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  function d3_geo_pathContext(context) {\n    var pointRadius = 4.5;\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n      result: d3_noop\n    };\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, τ);\n    }\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      context.closePath();\n    }\n    return stream;\n  }\n  function d3_geo_resample(project) {\n    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;\n    function resample(stream) {\n      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n    }\n    function resampleNone(stream) {\n      return d3_geo_transformPoint(stream, function(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      });\n    }\n    function resampleRecursive(stream) {\n      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n      var resample = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          stream.polygonStart();\n          resample.lineStart = ringStart;\n        },\n        polygonEnd: function() {\n          stream.polygonEnd();\n          resample.lineStart = lineStart;\n        }\n      };\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n      function lineStart() {\n        x0 = NaN;\n        resample.point = linePoint;\n        stream.lineStart();\n      }\n      function linePoint(λ, φ) {\n        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n      function lineEnd() {\n        resample.point = point;\n        stream.lineEnd();\n      }\n      function ringStart() {\n        lineStart();\n        resample.point = ringPoint;\n        resample.lineEnd = ringEnd;\n      }\n      function ringPoint(λ, φ) {\n        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resample.point = linePoint;\n      }\n      function ringEnd() {\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n        resample.lineEnd = lineEnd;\n        lineEnd();\n      }\n      return resample;\n    }\n    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n      if (d2 > 4 * δ2 && depth--) {\n        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    resample.precision = function(_) {\n      if (!arguments.length) return Math.sqrt(δ2);\n      maxDepth = (δ2 = _ * _) > 0 && 16;\n      return resample;\n    };\n    return resample;\n  }\n  d3.geo.path = function() {\n    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n        d3.geo.stream(object, cacheStream);\n      }\n      return contextStream.result();\n    }\n    path.area = function(object) {\n      d3_geo_pathAreaSum = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n      return d3_geo_pathAreaSum;\n    };\n    path.centroid = function(object) {\n      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n    };\n    path.bounds = function(object) {\n      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];\n    };\n    path.projection = function(_) {\n      if (!arguments.length) return projection;\n      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n      return reset();\n    };\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return reset();\n    };\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n    function reset() {\n      cacheStream = null;\n      return path;\n    }\n    return path.projection(d3.geo.albersUsa()).context(null);\n  };\n  function d3_geo_pathProjectStream(project) {\n    var resample = d3_geo_resample(function(x, y) {\n      return project([ x * d3_degrees, y * d3_degrees ]);\n    });\n    return function(stream) {\n      return d3_geo_projectionRadians(resample(stream));\n    };\n  }\n  d3.geo.transform = function(methods) {\n    return {\n      stream: function(stream) {\n        var transform = new d3_geo_transform(stream);\n        for (var k in methods) transform[k] = methods[k];\n        return transform;\n      }\n    };\n  };\n  function d3_geo_transform(stream) {\n    this.stream = stream;\n  }\n  d3_geo_transform.prototype = {\n    point: function(x, y) {\n      this.stream.point(x, y);\n    },\n    sphere: function() {\n      this.stream.sphere();\n    },\n    lineStart: function() {\n      this.stream.lineStart();\n    },\n    lineEnd: function() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function() {\n      this.stream.polygonEnd();\n    }\n  };\n  function d3_geo_transformPoint(stream, point) {\n    return {\n      point: point,\n      sphere: function() {\n        stream.sphere();\n      },\n      lineStart: function() {\n        stream.lineStart();\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n      },\n      polygonStart: function() {\n        stream.polygonStart();\n      },\n      polygonEnd: function() {\n        stream.polygonEnd();\n      }\n    };\n  }\n  d3.geo.projection = d3_geo_projection;\n  d3.geo.projectionMutator = d3_geo_projectionMutator;\n  function d3_geo_projection(project) {\n    return d3_geo_projectionMutator(function() {\n      return project;\n    })();\n  }\n  function d3_geo_projectionMutator(projectAt) {\n    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {\n      x = project(x, y);\n      return [ x[0] * k + δx, δy - x[1] * k ];\n    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n    function projection(point) {\n      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n      return [ point[0] * k + δx, δy - point[1] * k ];\n    }\n    function invert(point) {\n      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];\n    }\n    projection.stream = function(output) {\n      if (stream) stream.valid = false;\n      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n      stream.valid = true;\n      return stream;\n    };\n    projection.clipAngle = function(_) {\n      if (!arguments.length) return clipAngle;\n      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n      return invalidate();\n    };\n    projection.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent;\n      clipExtent = _;\n      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n      return invalidate();\n    };\n    projection.scale = function(_) {\n      if (!arguments.length) return k;\n      k = +_;\n      return reset();\n    };\n    projection.translate = function(_) {\n      if (!arguments.length) return [ x, y ];\n      x = +_[0];\n      y = +_[1];\n      return reset();\n    };\n    projection.center = function(_) {\n      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];\n      λ = _[0] % 360 * d3_radians;\n      φ = _[1] % 360 * d3_radians;\n      return reset();\n    };\n    projection.rotate = function(_) {\n      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];\n      δλ = _[0] % 360 * d3_radians;\n      δφ = _[1] % 360 * d3_radians;\n      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;\n      return reset();\n    };\n    d3.rebind(projection, projectResample, \"precision\");\n    function reset() {\n      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n      var center = project(λ, φ);\n      δx = x - center[0] * k;\n      δy = y + center[1] * k;\n      return invalidate();\n    }\n    function invalidate() {\n      if (stream) stream.valid = false, stream = null;\n      return projection;\n    }\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return reset();\n    };\n  }\n  function d3_geo_projectionRadians(stream) {\n    return d3_geo_transformPoint(stream, function(x, y) {\n      stream.point(x * d3_radians, y * d3_radians);\n    });\n  }\n  function d3_geo_equirectangular(λ, φ) {\n    return [ λ, φ ];\n  }\n  (d3.geo.equirectangular = function() {\n    return d3_geo_projection(d3_geo_equirectangular);\n  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n  d3.geo.rotation = function(rotate) {\n    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    }\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    };\n    return forward;\n  };\n  function d3_geo_identityRotation(λ, φ) {\n    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n  }\n  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n  function d3_geo_rotation(δλ, δφ, δγ) {\n    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n  }\n  function d3_geo_forwardRotationλ(δλ) {\n    return function(λ, φ) {\n      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n    };\n  }\n  function d3_geo_rotationλ(δλ) {\n    var rotation = d3_geo_forwardRotationλ(δλ);\n    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n    return rotation;\n  }\n  function d3_geo_rotationφγ(δφ, δγ) {\n    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);\n    function rotation(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];\n    }\n    rotation.invert = function(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];\n    };\n    return rotation;\n  }\n  d3.geo.circle = function() {\n    var origin = [ 0, 0 ], angle, precision = 6, interpolate;\n    function circle() {\n      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n      interpolate(null, null, 1, {\n        point: function(x, y) {\n          ring.push(x = rotate(x, y));\n          x[0] *= d3_degrees, x[1] *= d3_degrees;\n        }\n      });\n      return {\n        type: \"Polygon\",\n        coordinates: [ ring ]\n      };\n    }\n    circle.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return circle;\n    };\n    circle.angle = function(x) {\n      if (!arguments.length) return angle;\n      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n      return circle;\n    };\n    circle.precision = function(_) {\n      if (!arguments.length) return precision;\n      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n      return circle;\n    };\n    return circle.angle(90);\n  };\n  function d3_geo_circleInterpolate(radius, precision) {\n    var cr = Math.cos(radius), sr = Math.sin(radius);\n    return function(from, to, direction, listener) {\n      var step = direction * precision;\n      if (from != null) {\n        from = d3_geo_circleAngle(cr, from);\n        to = d3_geo_circleAngle(cr, to);\n        if (direction > 0 ? from < to : from > to) from += direction * τ;\n      } else {\n        from = radius + direction * τ;\n        to = radius - .5 * step;\n      }\n      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {\n        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);\n      }\n    };\n  }\n  function d3_geo_circleAngle(cr, point) {\n    var a = d3_geo_cartesian(point);\n    a[0] -= cr;\n    d3_geo_cartesianNormalize(a);\n    var angle = d3_acos(-a[1]);\n    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n  }\n  d3.geo.distance = function(a, b) {\n    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n  };\n  d3.geo.graticule = function() {\n    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;\n    function graticule() {\n      return {\n        type: \"MultiLineString\",\n        coordinates: lines()\n      };\n    }\n    function lines() {\n      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n        return abs(x % DX) > ε;\n      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {\n        return abs(y % DY) > ε;\n      }).map(y));\n    }\n    graticule.lines = function() {\n      return lines().map(function(coordinates) {\n        return {\n          type: \"LineString\",\n          coordinates: coordinates\n        };\n      });\n    };\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]\n      };\n    };\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.minorExtent();\n      return graticule.majorExtent(_).minorExtent(_);\n    };\n    graticule.majorExtent = function(_) {\n      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.minorExtent = function(_) {\n      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.minorStep();\n      return graticule.majorStep(_).minorStep(_);\n    };\n    graticule.majorStep = function(_) {\n      if (!arguments.length) return [ DX, DY ];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n    graticule.minorStep = function(_) {\n      if (!arguments.length) return [ dx, dy ];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = d3_geo_graticuleX(y0, y1, 90);\n      y = d3_geo_graticuleY(x0, x1, precision);\n      X = d3_geo_graticuleX(Y0, Y1, 90);\n      Y = d3_geo_graticuleY(X0, X1, precision);\n      return graticule;\n    };\n    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n  };\n  function d3_geo_graticuleX(y0, y1, dy) {\n    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n    return function(x) {\n      return y.map(function(y) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_geo_graticuleY(x0, x1, dx) {\n    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n    return function(y) {\n      return x.map(function(x) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_source(d) {\n    return d.source;\n  }\n  function d3_target(d) {\n    return d.target;\n  }\n  d3.geo.greatArc = function() {\n    var source = d3_source, source_, target = d3_target, target_;\n    function greatArc() {\n      return {\n        type: \"LineString\",\n        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]\n      };\n    }\n    greatArc.distance = function() {\n      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n    };\n    greatArc.source = function(_) {\n      if (!arguments.length) return source;\n      source = _, source_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.target = function(_) {\n      if (!arguments.length) return target;\n      target = _, target_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.precision = function() {\n      return arguments.length ? greatArc : 0;\n    };\n    return greatArc;\n  };\n  d3.geo.interpolate = function(source, target) {\n    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n  };\n  function d3_geo_interpolate(x0, y0, x1, y1) {\n    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n    var interpolate = d ? function(t) {\n      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];\n    } : function() {\n      return [ x0 * d3_degrees, y0 * d3_degrees ];\n    };\n    interpolate.distance = d;\n    return interpolate;\n  }\n  d3.geo.length = function(object) {\n    d3_geo_lengthSum = 0;\n    d3.geo.stream(object, d3_geo_length);\n    return d3_geo_lengthSum;\n  };\n  var d3_geo_lengthSum;\n  var d3_geo_length = {\n    sphere: d3_noop,\n    point: d3_noop,\n    lineStart: d3_geo_lengthLineStart,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_lengthLineStart() {\n    var λ0, sinφ0, cosφ0;\n    d3_geo_length.point = function(λ, φ) {\n      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n      d3_geo_length.point = nextPoint;\n    };\n    d3_geo_length.lineEnd = function() {\n      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n    };\n    function nextPoint(λ, φ) {\n      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n    }\n  }\n  function d3_geo_azimuthal(scale, angle) {\n    function azimuthal(λ, φ) {\n      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);\n      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];\n    }\n    azimuthal.invert = function(x, y) {\n      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);\n      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];\n    };\n    return azimuthal;\n  }\n  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {\n    return Math.sqrt(2 / (1 + cosλcosφ));\n  }, function(ρ) {\n    return 2 * Math.asin(ρ / 2);\n  });\n  (d3.geo.azimuthalEqualArea = function() {\n    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n  }).raw = d3_geo_azimuthalEqualArea;\n  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {\n    var c = Math.acos(cosλcosφ);\n    return c && c / Math.sin(c);\n  }, d3_identity);\n  (d3.geo.azimuthalEquidistant = function() {\n    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n  }).raw = d3_geo_azimuthalEquidistant;\n  function d3_geo_conicConformal(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), t = function(φ) {\n      return Math.tan(π / 4 + φ / 2);\n    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n    if (!n) return d3_geo_mercator;\n    function forward(λ, φ) {\n      if (F > 0) {\n        if (φ < -halfπ + ε) φ = -halfπ + ε;\n      } else {\n        if (φ > halfπ - ε) φ = halfπ - ε;\n      }\n      var ρ = F / Math.pow(t(φ), n);\n      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];\n    };\n    return forward;\n  }\n  (d3.geo.conicConformal = function() {\n    return d3_geo_conic(d3_geo_conicConformal);\n  }).raw = d3_geo_conicConformal;\n  function d3_geo_conicEquidistant(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;\n    if (abs(n) < ε) return d3_geo_equirectangular;\n    function forward(λ, φ) {\n      var ρ = G - φ;\n      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = G - y;\n      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEquidistant = function() {\n    return d3_geo_conic(d3_geo_conicEquidistant);\n  }).raw = d3_geo_conicEquidistant;\n  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / cosλcosφ;\n  }, Math.atan);\n  (d3.geo.gnomonic = function() {\n    return d3_geo_projection(d3_geo_gnomonic);\n  }).raw = d3_geo_gnomonic;\n  function d3_geo_mercator(λ, φ) {\n    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];\n  }\n  d3_geo_mercator.invert = function(x, y) {\n    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];\n  };\n  function d3_geo_mercatorProjection(project) {\n    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;\n    m.scale = function() {\n      var v = scale.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.translate = function() {\n      var v = translate.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.clipExtent = function(_) {\n      var v = clipExtent.apply(m, arguments);\n      if (v === m) {\n        if (clipAuto = _ == null) {\n          var k = π * scale(), t = translate();\n          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);\n        }\n      } else if (clipAuto) {\n        v = null;\n      }\n      return v;\n    };\n    return m.clipExtent(null);\n  }\n  (d3.geo.mercator = function() {\n    return d3_geo_mercatorProjection(d3_geo_mercator);\n  }).raw = d3_geo_mercator;\n  var d3_geo_orthographic = d3_geo_azimuthal(function() {\n    return 1;\n  }, Math.asin);\n  (d3.geo.orthographic = function() {\n    return d3_geo_projection(d3_geo_orthographic);\n  }).raw = d3_geo_orthographic;\n  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / (1 + cosλcosφ);\n  }, function(ρ) {\n    return 2 * Math.atan(ρ);\n  });\n  (d3.geo.stereographic = function() {\n    return d3_geo_projection(d3_geo_stereographic);\n  }).raw = d3_geo_stereographic;\n  function d3_geo_transverseMercator(λ, φ) {\n    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];\n  }\n  d3_geo_transverseMercator.invert = function(x, y) {\n    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];\n  };\n  (d3.geo.transverseMercator = function() {\n    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n    projection.center = function(_) {\n      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);\n    };\n    projection.rotate = function(_) {\n      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), \n      [ _[0], _[1], _[2] - 90 ]);\n    };\n    return rotate([ 0, 0, 90 ]);\n  }).raw = d3_geo_transverseMercator;\n  d3.geom = {};\n  function d3_geom_pointX(d) {\n    return d[0];\n  }\n  function d3_geom_pointY(d) {\n    return d[1];\n  }\n  d3.geom.hull = function(vertices) {\n    var x = d3_geom_pointX, y = d3_geom_pointY;\n    if (arguments.length) return hull(vertices);\n    function hull(data) {\n      if (data.length < 3) return [];\n      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];\n      for (i = 0; i < n; i++) {\n        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);\n      }\n      points.sort(d3_geom_hullOrder);\n      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);\n      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);\n      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);\n      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);\n      return polygon;\n    }\n    hull.x = function(_) {\n      return arguments.length ? (x = _, hull) : x;\n    };\n    hull.y = function(_) {\n      return arguments.length ? (y = _, hull) : y;\n    };\n    return hull;\n  };\n  function d3_geom_hullUpper(points) {\n    var n = points.length, hull = [ 0, 1 ], hs = 2;\n    for (var i = 2; i < n; i++) {\n      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;\n      hull[hs++] = i;\n    }\n    return hull.slice(0, hs);\n  }\n  function d3_geom_hullOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n  d3.geom.polygon = function(coordinates) {\n    d3_subclass(coordinates, d3_geom_polygonPrototype);\n    return coordinates;\n  };\n  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n  d3_geom_polygonPrototype.area = function() {\n    var i = -1, n = this.length, a, b = this[n - 1], area = 0;\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n    return area * .5;\n  };\n  d3_geom_polygonPrototype.centroid = function(k) {\n    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;\n    if (!arguments.length) k = -1 / (6 * this.area());\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n    return [ x * k, y * k ];\n  };\n  d3_geom_polygonPrototype.clip = function(subject) {\n    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n    while (++i < n) {\n      input = subject.slice();\n      subject.length = 0;\n      b = this[i];\n      c = input[(m = input.length - closed) - 1];\n      j = -1;\n      while (++j < m) {\n        d = input[j];\n        if (d3_geom_polygonInside(d, a, b)) {\n          if (!d3_geom_polygonInside(c, a, b)) {\n            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n          }\n          subject.push(d);\n        } else if (d3_geom_polygonInside(c, a, b)) {\n          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n        }\n        c = d;\n      }\n      if (closed) subject.push(subject[0]);\n      a = b;\n    }\n    return subject;\n  };\n  function d3_geom_polygonInside(p, a, b) {\n    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);\n  }\n  function d3_geom_polygonIntersect(c, d, a, b) {\n    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n    return [ x1 + ua * x21, y1 + ua * y21 ];\n  }\n  function d3_geom_polygonClosed(coordinates) {\n    var a = coordinates[0], b = coordinates[coordinates.length - 1];\n    return !(a[0] - b[0] || a[1] - b[1]);\n  }\n  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n  function d3_geom_voronoiBeach() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.edge = this.site = this.circle = null;\n  }\n  function d3_geom_voronoiCreateBeach(site) {\n    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n    beach.site = site;\n    return beach;\n  }\n  function d3_geom_voronoiDetachBeach(beach) {\n    d3_geom_voronoiDetachCircle(beach);\n    d3_geom_voronoiBeaches.remove(beach);\n    d3_geom_voronoiBeachPool.push(beach);\n    d3_geom_voronoiRedBlackNode(beach);\n  }\n  function d3_geom_voronoiRemoveBeach(beach) {\n    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {\n      x: x,\n      y: y\n    }, previous = beach.P, next = beach.N, disappearing = [ beach ];\n    d3_geom_voronoiDetachBeach(beach);\n    var lArc = previous;\n    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      d3_geom_voronoiDetachBeach(lArc);\n      lArc = previous;\n    }\n    disappearing.unshift(lArc);\n    d3_geom_voronoiDetachCircle(lArc);\n    var rArc = next;\n    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      d3_geom_voronoiDetachBeach(rArc);\n      rArc = next;\n    }\n    disappearing.push(rArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var nArcs = disappearing.length, iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiAddBeach(site) {\n    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;\n    while (node) {\n      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n      if (dxl > ε) node = node.L; else {\n        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n        if (dxr > ε) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -ε) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -ε) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n    var newArc = d3_geom_voronoiCreateBeach(site);\n    d3_geom_voronoiBeaches.insert(lArc, newArc);\n    if (!lArc && !rArc) return;\n    if (lArc === rArc) {\n      d3_geom_voronoiDetachCircle(lArc);\n      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n      d3_geom_voronoiBeaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      d3_geom_voronoiAttachCircle(lArc);\n      d3_geom_voronoiAttachCircle(rArc);\n      return;\n    }\n    if (!rArc) {\n      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      return;\n    }\n    d3_geom_voronoiDetachCircle(lArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n      x: (cy * hb - by * hc) / d + ax,\n      y: (bx * hc - cx * hb) / d + ay\n    };\n    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;\n    if (!pby2) return rfocx;\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n    site = lArc.site;\n    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;\n    if (!plby2) return lfocx;\n    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n    return (rfocx + lfocx) / 2;\n  }\n  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site.y === directrix ? site.x : Infinity;\n  }\n  function d3_geom_voronoiCell(site) {\n    this.site = site;\n    this.edges = [];\n  }\n  d3_geom_voronoiCell.prototype.prepare = function() {\n    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;\n    while (iHalfEdge--) {\n      edge = halfEdges[iHalfEdge].edge;\n      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n    }\n    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n    return halfEdges.length;\n  };\n  function d3_geom_voronoiCloseCells(extent) {\n    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n    while (iCell--) {\n      cell = cells[iCell];\n      if (!cell || !cell.prepare()) continue;\n      halfEdges = cell.edges;\n      nHalfEdges = halfEdges.length;\n      iHalfEdge = 0;\n      while (iHalfEdge < nHalfEdges) {\n        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {\n          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n            x: x0,\n            y: abs(x2 - x0) < ε ? y2 : y1\n          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {\n            x: abs(y2 - y1) < ε ? x2 : x1,\n            y: y1\n          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {\n            x: x1,\n            y: abs(x2 - x1) < ε ? y2 : y0\n          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {\n            x: abs(y2 - y0) < ε ? x2 : x0,\n            y: y0\n          } : null), cell.site, null));\n          ++nHalfEdges;\n        }\n      }\n    }\n  }\n  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n    return b.angle - a.angle;\n  }\n  function d3_geom_voronoiCircle() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.x = this.y = this.arc = this.site = this.cy = null;\n  }\n  function d3_geom_voronoiAttachCircle(arc) {\n    var lArc = arc.P, rArc = arc.N;\n    if (!lArc || !rArc) return;\n    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\n    if (lSite === rSite) return;\n    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -ε2) return;\n    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = cy + Math.sqrt(x * x + y * y);\n    circle.cy = cy;\n    arc.circle = circle;\n    var before = null, node = d3_geom_voronoiCircles._;\n    while (node) {\n      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n        if (node.L) node = node.L; else {\n          before = node.P;\n          break;\n        }\n      } else {\n        if (node.R) node = node.R; else {\n          before = node;\n          break;\n        }\n      }\n    }\n    d3_geom_voronoiCircles.insert(before, circle);\n    if (!before) d3_geom_voronoiFirstCircle = circle;\n  }\n  function d3_geom_voronoiDetachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n      d3_geom_voronoiCircles.remove(circle);\n      d3_geom_voronoiCirclePool.push(circle);\n      d3_geom_voronoiRedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n  function d3_geom_voronoiClipEdges(extent) {\n    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n    while (i--) {\n      e = edges[i];\n      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {\n        e.a = e.b = null;\n        edges.splice(i, 1);\n      }\n    }\n  }\n  function d3_geom_voronoiConnectEdge(edge, extent) {\n    var vb = edge.b;\n    if (vb) return true;\n    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!va) va = {\n          x: fx,\n          y: y0\n        }; else if (va.y >= y1) return;\n        vb = {\n          x: fx,\n          y: y1\n        };\n      } else {\n        if (!va) va = {\n          x: fx,\n          y: y1\n        }; else if (va.y < y0) return;\n        vb = {\n          x: fx,\n          y: y0\n        };\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!va) va = {\n            x: (y0 - fb) / fm,\n            y: y0\n          }; else if (va.y >= y1) return;\n          vb = {\n            x: (y1 - fb) / fm,\n            y: y1\n          };\n        } else {\n          if (!va) va = {\n            x: (y1 - fb) / fm,\n            y: y1\n          }; else if (va.y < y0) return;\n          vb = {\n            x: (y0 - fb) / fm,\n            y: y0\n          };\n        }\n      } else {\n        if (ly < ry) {\n          if (!va) va = {\n            x: x0,\n            y: fm * x0 + fb\n          }; else if (va.x >= x1) return;\n          vb = {\n            x: x1,\n            y: fm * x1 + fb\n          };\n        } else {\n          if (!va) va = {\n            x: x1,\n            y: fm * x1 + fb\n          }; else if (va.x < x0) return;\n          vb = {\n            x: x0,\n            y: fm * x0 + fb\n          };\n        }\n      }\n    }\n    edge.a = va;\n    edge.b = vb;\n    return true;\n  }\n  function d3_geom_voronoiEdge(lSite, rSite) {\n    this.l = lSite;\n    this.r = rSite;\n    this.a = this.b = null;\n  }\n  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n    d3_geom_voronoiEdges.push(edge);\n    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n    return edge;\n  }\n  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, null);\n    edge.a = va;\n    edge.b = vb;\n    d3_geom_voronoiEdges.push(edge);\n    return edge;\n  }\n  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n    if (!edge.a && !edge.b) {\n      edge.a = vertex;\n      edge.l = lSite;\n      edge.r = rSite;\n    } else if (edge.l === rSite) {\n      edge.b = vertex;\n    } else {\n      edge.a = vertex;\n    }\n  }\n  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n    var va = edge.a, vb = edge.b;\n    this.edge = edge;\n    this.site = lSite;\n    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n  }\n  d3_geom_voronoiHalfEdge.prototype = {\n    start: function() {\n      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n    },\n    end: function() {\n      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n    }\n  };\n  function d3_geom_voronoiRedBlackTree() {\n    this._ = null;\n  }\n  function d3_geom_voronoiRedBlackNode(node) {\n    node.U = node.C = node.L = node.R = node.P = node.N = null;\n  }\n  d3_geom_voronoiRedBlackTree.prototype = {\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = d3_geom_voronoiRedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              d3_geom_voronoiRedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n      var parent = node.U, sibling, left = node.L, right = node.R, next, red;\n      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);\n      if (parent) {\n        if (parent.L === node) parent.L = next; else parent.R = next;\n      } else {\n        this._ = next;\n      }\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) {\n        node.C = false;\n        return;\n      }\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n      if (node) node.C = false;\n    }\n  };\n  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n    var p = node, q = node.R, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n    var p = node, q = node.L, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n  function d3_geom_voronoiRedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n  function d3_geom_voronoi(sites, bbox) {\n    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;\n    d3_geom_voronoiEdges = [];\n    d3_geom_voronoiCells = new Array(sites.length);\n    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n    while (true) {\n      circle = d3_geom_voronoiFirstCircle;\n      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {\n        if (site.x !== x0 || site.y !== y0) {\n          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n          d3_geom_voronoiAddBeach(site);\n          x0 = site.x, y0 = site.y;\n        }\n        site = sites.pop();\n      } else if (circle) {\n        d3_geom_voronoiRemoveBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n    var diagram = {\n      cells: d3_geom_voronoiCells,\n      edges: d3_geom_voronoiEdges\n    };\n    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n    return diagram;\n  }\n  function d3_geom_voronoiVertexOrder(a, b) {\n    return b.y - a.y || b.x - a.x;\n  }\n  d3.geom.voronoi = function(points) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;\n    if (points) return voronoi(points);\n    function voronoi(data) {\n      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {\n        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {\n          var s = e.start();\n          return [ s.x, s.y ];\n        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n        polygon.point = data[i];\n      });\n      return polygons;\n    }\n    function sites(data) {\n      return data.map(function(d, i) {\n        return {\n          x: Math.round(fx(d, i) / ε) * ε,\n          y: Math.round(fy(d, i) / ε) * ε,\n          i: i\n        };\n      });\n    }\n    voronoi.links = function(data) {\n      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {\n        return edge.l && edge.r;\n      }).map(function(edge) {\n        return {\n          source: data[edge.l.i],\n          target: data[edge.r.i]\n        };\n      });\n    };\n    voronoi.triangles = function(data) {\n      var triangles = [];\n      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {\n        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n        while (++j < m) {\n          e0 = e1;\n          s0 = s1;\n          e1 = edges[j].edge;\n          s1 = e1.l === site ? e1.r : e1.l;\n          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {\n            triangles.push([ data[i], data[s0.i], data[s1.i] ]);\n          }\n        }\n      });\n      return triangles;\n    };\n    voronoi.x = function(_) {\n      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n    };\n    voronoi.y = function(_) {\n      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n    };\n    voronoi.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n      return voronoi;\n    };\n    voronoi.size = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];\n      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);\n    };\n    return voronoi;\n  };\n  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];\n  function d3_geom_voronoiTriangleArea(a, b, c) {\n    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n  }\n  d3.geom.delaunay = function(vertices) {\n    return d3.geom.voronoi().triangles(vertices);\n  };\n  d3.geom.quadtree = function(points, x1, y1, x2, y2) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, compat;\n    if (compat = arguments.length) {\n      x = d3_geom_quadtreeCompatX;\n      y = d3_geom_quadtreeCompatY;\n      if (compat === 3) {\n        y2 = y1;\n        x2 = x1;\n        y1 = x1 = 0;\n      }\n      return quadtree(points);\n    }\n    function quadtree(data) {\n      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;\n      if (x1 != null) {\n        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n      } else {\n        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n        xs = [], ys = [];\n        n = data.length;\n        if (compat) for (i = 0; i < n; ++i) {\n          d = data[i];\n          if (d.x < x1_) x1_ = d.x;\n          if (d.y < y1_) y1_ = d.y;\n          if (d.x > x2_) x2_ = d.x;\n          if (d.y > y2_) y2_ = d.y;\n          xs.push(d.x);\n          ys.push(d.y);\n        } else for (i = 0; i < n; ++i) {\n          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);\n          if (x_ < x1_) x1_ = x_;\n          if (y_ < y1_) y1_ = y_;\n          if (x_ > x2_) x2_ = x_;\n          if (y_ > y2_) y2_ = y_;\n          xs.push(x_);\n          ys.push(y_);\n        }\n      }\n      var dx = x2_ - x1_, dy = y2_ - y1_;\n      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;\n      function insert(n, d, x, y, x1, y1, x2, y2) {\n        if (isNaN(x) || isNaN(y)) return;\n        if (n.leaf) {\n          var nx = n.x, ny = n.y;\n          if (nx != null) {\n            if (abs(nx - x) + abs(ny - y) < .01) {\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            } else {\n              var nPoint = n.point;\n              n.x = n.y = n.point = null;\n              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            }\n          } else {\n            n.x = x, n.y = y, n.point = d;\n          }\n        } else {\n          insertChild(n, d, x, y, x1, y1, x2, y2);\n        }\n      }\n      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;\n        n.leaf = false;\n        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n        if (right) x1 = xm; else x2 = xm;\n        if (below) y1 = ym; else y2 = ym;\n        insert(n, d, x, y, x1, y1, x2, y2);\n      }\n      var root = d3_geom_quadtreeNode();\n      root.add = function(d) {\n        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n      };\n      root.visit = function(f) {\n        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n      };\n      root.find = function(point) {\n        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n      };\n      i = -1;\n      if (x1 == null) {\n        while (++i < n) {\n          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n        }\n        --i;\n      } else data.forEach(root.add);\n      xs = ys = data = d = null;\n      return root;\n    }\n    quadtree.x = function(_) {\n      return arguments.length ? (x = _, quadtree) : x;\n    };\n    quadtree.y = function(_) {\n      return arguments.length ? (y = _, quadtree) : y;\n    };\n    quadtree.extent = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], \n      y2 = +_[1][1];\n      return quadtree;\n    };\n    quadtree.size = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n      return quadtree;\n    };\n    return quadtree;\n  };\n  function d3_geom_quadtreeCompatX(d) {\n    return d.x;\n  }\n  function d3_geom_quadtreeCompatY(d) {\n    return d.y;\n  }\n  function d3_geom_quadtreeNode() {\n    return {\n      leaf: true,\n      nodes: [],\n      point: null,\n      x: null,\n      y: null\n    };\n  }\n  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n    if (!f(node, x1, y1, x2, y2)) {\n      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;\n      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n    }\n  }\n  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n    var minDistance2 = Infinity, closestPoint;\n    (function find(node, x1, y1, x2, y2) {\n      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\n      if (point = node.point) {\n        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;\n        if (distance2 < minDistance2) {\n          var distance = Math.sqrt(minDistance2 = distance2);\n          x0 = x - distance, y0 = y - distance;\n          x3 = x + distance, y3 = y + distance;\n          closestPoint = point;\n        }\n      }\n      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;\n      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {\n        if (node = children[i & 3]) switch (i & 3) {\n         case 0:\n          find(node, x1, y1, xm, ym);\n          break;\n\n         case 1:\n          find(node, xm, y1, x2, ym);\n          break;\n\n         case 2:\n          find(node, x1, ym, xm, y2);\n          break;\n\n         case 3:\n          find(node, xm, ym, x2, y2);\n          break;\n        }\n      }\n    })(root, x0, y0, x3, y3);\n    return closestPoint;\n  }\n  d3.interpolateRgb = d3_interpolateRgb;\n  function d3_interpolateRgb(a, b) {\n    a = d3.rgb(a);\n    b = d3.rgb(b);\n    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;\n    return function(t) {\n      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n    };\n  }\n  d3.interpolateObject = d3_interpolateObject;\n  function d3_interpolateObject(a, b) {\n    var i = {}, c = {}, k;\n    for (k in a) {\n      if (k in b) {\n        i[k] = d3_interpolate(a[k], b[k]);\n      } else {\n        c[k] = a[k];\n      }\n    }\n    for (k in b) {\n      if (!(k in a)) {\n        c[k] = b[k];\n      }\n    }\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n  d3.interpolateNumber = d3_interpolateNumber;\n  function d3_interpolateNumber(a, b) {\n    a = +a, b = +b;\n    return function(t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n  d3.interpolateString = d3_interpolateString;\n  function d3_interpolateString(a, b) {\n    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n    a = a + \"\", b = b + \"\";\n    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) {\n        if (s[i]) s[i] += bm; else s[++i] = bm;\n      } else {\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: d3_interpolateNumber(am, bm)\n        });\n      }\n      bi = d3_interpolate_numberB.lastIndex;\n    }\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; else s[++i] = bs;\n    }\n    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {\n      return b(t) + \"\";\n    }) : function() {\n      return b;\n    } : (b = q.length, function(t) {\n      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    });\n  }\n  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \"g\");\n  d3.interpolate = d3_interpolate;\n  function d3_interpolate(a, b) {\n    var i = d3.interpolators.length, f;\n    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;\n    return f;\n  }\n  d3.interpolators = [ function(a, b) {\n    var t = typeof b;\n    return (t === \"string\" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\\(|hsl\\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \"object\" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n  } ];\n  d3.interpolateArray = d3_interpolateArray;\n  function d3_interpolateArray(a, b) {\n    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;\n    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));\n    for (;i < na; ++i) c[i] = a[i];\n    for (;i < nb; ++i) c[i] = b[i];\n    return function(t) {\n      for (i = 0; i < n0; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n  var d3_ease_default = function() {\n    return d3_identity;\n  };\n  var d3_ease = d3.map({\n    linear: d3_ease_default,\n    poly: d3_ease_poly,\n    quad: function() {\n      return d3_ease_quad;\n    },\n    cubic: function() {\n      return d3_ease_cubic;\n    },\n    sin: function() {\n      return d3_ease_sin;\n    },\n    exp: function() {\n      return d3_ease_exp;\n    },\n    circle: function() {\n      return d3_ease_circle;\n    },\n    elastic: d3_ease_elastic,\n    back: d3_ease_back,\n    bounce: function() {\n      return d3_ease_bounce;\n    }\n  });\n  var d3_ease_mode = d3.map({\n    \"in\": d3_identity,\n    out: d3_ease_reverse,\n    \"in-out\": d3_ease_reflect,\n    \"out-in\": function(f) {\n      return d3_ease_reflect(d3_ease_reverse(f));\n    }\n  });\n  d3.ease = function(name) {\n    var i = name.indexOf(\"-\"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : \"in\";\n    t = d3_ease.get(t) || d3_ease_default;\n    m = d3_ease_mode.get(m) || d3_identity;\n    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n  };\n  function d3_ease_clamp(f) {\n    return function(t) {\n      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);\n    };\n  }\n  function d3_ease_reverse(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n  function d3_ease_reflect(f) {\n    return function(t) {\n      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n    };\n  }\n  function d3_ease_quad(t) {\n    return t * t;\n  }\n  function d3_ease_cubic(t) {\n    return t * t * t;\n  }\n  function d3_ease_cubicInOut(t) {\n    if (t <= 0) return 0;\n    if (t >= 1) return 1;\n    var t2 = t * t, t3 = t2 * t;\n    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n  }\n  function d3_ease_poly(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n  function d3_ease_sin(t) {\n    return 1 - Math.cos(t * halfπ);\n  }\n  function d3_ease_exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  function d3_ease_circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  function d3_ease_elastic(a, p) {\n    var s;\n    if (arguments.length < 2) p = .45;\n    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n    };\n  }\n  function d3_ease_back(s) {\n    if (!s) s = 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n  function d3_ease_bounce(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }\n  d3.interpolateHcl = d3_interpolateHcl;\n  function d3_interpolateHcl(a, b) {\n    a = d3.hcl(a);\n    b = d3.hcl(b);\n    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;\n    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateHsl = d3_interpolateHsl;\n  function d3_interpolateHsl(a, b) {\n    a = d3.hsl(a);\n    b = d3.hsl(b);\n    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;\n    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateLab = d3_interpolateLab;\n  function d3_interpolateLab(a, b) {\n    a = d3.lab(a);\n    b = d3.lab(b);\n    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;\n    return function(t) {\n      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";\n    };\n  }\n  d3.interpolateRound = d3_interpolateRound;\n  function d3_interpolateRound(a, b) {\n    b -= a;\n    return function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n  d3.transform = function(string) {\n    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");\n    return (d3.transform = function(string) {\n      if (string != null) {\n        g.setAttribute(\"transform\", string);\n        var t = g.transform.baseVal.consolidate();\n      }\n      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n    })(string);\n  };\n  function d3_transform(m) {\n    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n    if (r0[0] * r1[1] < r1[0] * r0[1]) {\n      r0[0] *= -1;\n      r0[1] *= -1;\n      kx *= -1;\n      kz *= -1;\n    }\n    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n    this.translate = [ m.e, m.f ];\n    this.scale = [ kx, ky ];\n    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n  }\n  d3_transform.prototype.toString = function() {\n    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n  };\n  function d3_transformDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n  function d3_transformNormalize(a) {\n    var k = Math.sqrt(d3_transformDot(a, a));\n    if (k) {\n      a[0] /= k;\n      a[1] /= k;\n    }\n    return k;\n  }\n  function d3_transformCombine(a, b, k) {\n    a[0] += k * b[0];\n    a[1] += k * b[1];\n    return a;\n  }\n  var d3_transformIdentity = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0\n  };\n  d3.interpolateTransform = d3_interpolateTransform;\n  function d3_interpolateTransformPop(s) {\n    return s.length ? s.pop() + \",\" : \"\";\n  }\n  function d3_interpolateTranslate(ta, tb, s, q) {\n    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {\n      var i = s.push(\"translate(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ta[0], tb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ta[1], tb[1])\n      });\n    } else if (tb[0] || tb[1]) {\n      s.push(\"translate(\" + tb + \")\");\n    }\n  }\n  function d3_interpolateRotate(ra, rb, s, q) {\n    if (ra !== rb) {\n      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"rotate(\", null, \")\") - 2,\n        x: d3_interpolateNumber(ra, rb)\n      });\n    } else if (rb) {\n      s.push(d3_interpolateTransformPop(s) + \"rotate(\" + rb + \")\");\n    }\n  }\n  function d3_interpolateSkew(wa, wb, s, q) {\n    if (wa !== wb) {\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"skewX(\", null, \")\") - 2,\n        x: d3_interpolateNumber(wa, wb)\n      });\n    } else if (wb) {\n      s.push(d3_interpolateTransformPop(s) + \"skewX(\" + wb + \")\");\n    }\n  }\n  function d3_interpolateScale(ka, kb, s, q) {\n    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {\n      var i = s.push(d3_interpolateTransformPop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ka[0], kb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ka[1], kb[1])\n      });\n    } else if (kb[0] !== 1 || kb[1] !== 1) {\n      s.push(d3_interpolateTransformPop(s) + \"scale(\" + kb + \")\");\n    }\n  }\n  function d3_interpolateTransform(a, b) {\n    var s = [], q = [];\n    a = d3.transform(a), b = d3.transform(b);\n    d3_interpolateTranslate(a.translate, b.translate, s, q);\n    d3_interpolateRotate(a.rotate, b.rotate, s, q);\n    d3_interpolateSkew(a.skew, b.skew, s, q);\n    d3_interpolateScale(a.scale, b.scale, s, q);\n    a = b = null;\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  }\n  function d3_uninterpolateNumber(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return (x - a) / b;\n    };\n  }\n  function d3_uninterpolateClamp(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return Math.max(0, Math.min(1, (x - a) / b));\n    };\n  }\n  d3.layout = {};\n  d3.layout.bundle = function() {\n    return function(links) {\n      var paths = [], i = -1, n = links.length;\n      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));\n      return paths;\n    };\n  };\n  function d3_layout_bundlePath(link) {\n    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n    while (start !== lca) {\n      start = start.parent;\n      points.push(start);\n    }\n    var k = points.length;\n    while (end !== lca) {\n      points.splice(k, 0, end);\n      end = end.parent;\n    }\n    return points;\n  }\n  function d3_layout_bundleAncestors(node) {\n    var ancestors = [], parent = node.parent;\n    while (parent != null) {\n      ancestors.push(node);\n      node = parent;\n      parent = parent.parent;\n    }\n    ancestors.push(node);\n    return ancestors;\n  }\n  function d3_layout_bundleLeastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n    while (aNode === bNode) {\n      sharedNode = aNode;\n      aNode = aNodes.pop();\n      bNode = bNodes.pop();\n    }\n    return sharedNode;\n  }\n  d3.layout.chord = function() {\n    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n    function relayout() {\n      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n      chords = [];\n      groups = [];\n      k = 0, i = -1;\n      while (++i < n) {\n        x = 0, j = -1;\n        while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(d3.range(n));\n        k += x;\n      }\n      if (sortGroups) {\n        groupIndex.sort(function(a, b) {\n          return sortGroups(groupSums[a], groupSums[b]);\n        });\n      }\n      if (sortSubgroups) {\n        subgroupIndex.forEach(function(d, i) {\n          d.sort(function(a, b) {\n            return sortSubgroups(matrix[i][a], matrix[i][b]);\n          });\n        });\n      }\n      k = (τ - padding * n) / k;\n      x = 0, i = -1;\n      while (++i < n) {\n        x0 = x, j = -1;\n        while (++j < n) {\n          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;\n          subgroups[di + \"-\" + dj] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: groupSums[di]\n        };\n        x += padding;\n      }\n      i = -1;\n      while (++i < n) {\n        j = i - 1;\n        while (++j < n) {\n          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value ? {\n              source: target,\n              target: source\n            } : {\n              source: source,\n              target: target\n            });\n          }\n        }\n      }\n      if (sortChords) resort();\n    }\n    function resort() {\n      chords.sort(function(a, b) {\n        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n      });\n    }\n    chord.matrix = function(x) {\n      if (!arguments.length) return matrix;\n      n = (matrix = x) && matrix.length;\n      chords = groups = null;\n      return chord;\n    };\n    chord.padding = function(x) {\n      if (!arguments.length) return padding;\n      padding = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortGroups = function(x) {\n      if (!arguments.length) return sortGroups;\n      sortGroups = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortSubgroups = function(x) {\n      if (!arguments.length) return sortSubgroups;\n      sortSubgroups = x;\n      chords = null;\n      return chord;\n    };\n    chord.sortChords = function(x) {\n      if (!arguments.length) return sortChords;\n      sortChords = x;\n      if (chords) resort();\n      return chord;\n    };\n    chord.chords = function() {\n      if (!chords) relayout();\n      return chords;\n    };\n    chord.groups = function() {\n      if (!groups) relayout();\n      return groups;\n    };\n    return chord;\n  };\n  d3.layout.force = function() {\n    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n    function repulse(node) {\n      return function(quad, x1, _, x2) {\n        if (quad.point !== node) {\n          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;\n          if (dw * dw / theta2 < dn) {\n            if (dn < chargeDistance2) {\n              var k = quad.charge / dn;\n              node.px -= dx * k;\n              node.py -= dy * k;\n            }\n            return true;\n          }\n          if (quad.point && dn && dn < chargeDistance2) {\n            var k = quad.pointCharge / dn;\n            node.px -= dx * k;\n            node.py -= dy * k;\n          }\n        }\n        return !quad.charge;\n      };\n    }\n    force.tick = function() {\n      if ((alpha *= .99) < .005) {\n        timer = null;\n        event.end({\n          type: \"end\",\n          alpha: alpha = 0\n        });\n        return true;\n      }\n      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        s = o.source;\n        t = o.target;\n        x = t.x - s.x;\n        y = t.y - s.y;\n        if (l = x * x + y * y) {\n          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n          x *= l;\n          y *= l;\n          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);\n          t.y -= y * k;\n          s.x += x * (k = 1 - k);\n          s.y += y * k;\n        }\n      }\n      if (k = alpha * gravity) {\n        x = size[0] / 2;\n        y = size[1] / 2;\n        i = -1;\n        if (k) while (++i < n) {\n          o = nodes[i];\n          o.x += (x - o.x) * k;\n          o.y += (y - o.y) * k;\n        }\n      }\n      if (charge) {\n        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n        i = -1;\n        while (++i < n) {\n          if (!(o = nodes[i]).fixed) {\n            q.visit(repulse(o));\n          }\n        }\n      }\n      i = -1;\n      while (++i < n) {\n        o = nodes[i];\n        if (o.fixed) {\n          o.x = o.px;\n          o.y = o.py;\n        } else {\n          o.x -= (o.px - (o.px = o.x)) * friction;\n          o.y -= (o.py - (o.py = o.y)) * friction;\n        }\n      }\n      event.tick({\n        type: \"tick\",\n        alpha: alpha\n      });\n    };\n    force.nodes = function(x) {\n      if (!arguments.length) return nodes;\n      nodes = x;\n      return force;\n    };\n    force.links = function(x) {\n      if (!arguments.length) return links;\n      links = x;\n      return force;\n    };\n    force.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return force;\n    };\n    force.linkDistance = function(x) {\n      if (!arguments.length) return linkDistance;\n      linkDistance = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.distance = force.linkDistance;\n    force.linkStrength = function(x) {\n      if (!arguments.length) return linkStrength;\n      linkStrength = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.friction = function(x) {\n      if (!arguments.length) return friction;\n      friction = +x;\n      return force;\n    };\n    force.charge = function(x) {\n      if (!arguments.length) return charge;\n      charge = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.chargeDistance = function(x) {\n      if (!arguments.length) return Math.sqrt(chargeDistance2);\n      chargeDistance2 = x * x;\n      return force;\n    };\n    force.gravity = function(x) {\n      if (!arguments.length) return gravity;\n      gravity = +x;\n      return force;\n    };\n    force.theta = function(x) {\n      if (!arguments.length) return Math.sqrt(theta2);\n      theta2 = x * x;\n      return force;\n    };\n    force.alpha = function(x) {\n      if (!arguments.length) return alpha;\n      x = +x;\n      if (alpha) {\n        if (x > 0) {\n          alpha = x;\n        } else {\n          timer.c = null, timer.t = NaN, timer = null;\n          event.end({\n            type: \"end\",\n            alpha: alpha = 0\n          });\n        }\n      } else if (x > 0) {\n        event.start({\n          type: \"start\",\n          alpha: alpha = x\n        });\n        timer = d3_timer(force.tick);\n      }\n      return force;\n    };\n    force.start = function() {\n      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;\n      for (i = 0; i < n; ++i) {\n        (o = nodes[i]).index = i;\n        o.weight = 0;\n      }\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        if (typeof o.source == \"number\") o.source = nodes[o.source];\n        if (typeof o.target == \"number\") o.target = nodes[o.target];\n        ++o.source.weight;\n        ++o.target.weight;\n      }\n      for (i = 0; i < n; ++i) {\n        o = nodes[i];\n        if (isNaN(o.x)) o.x = position(\"x\", w);\n        if (isNaN(o.y)) o.y = position(\"y\", h);\n        if (isNaN(o.px)) o.px = o.x;\n        if (isNaN(o.py)) o.py = o.y;\n      }\n      distances = [];\n      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n      strengths = [];\n      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n      charges = [];\n      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n      function position(dimension, size) {\n        if (!neighbors) {\n          neighbors = new Array(n);\n          for (j = 0; j < n; ++j) {\n            neighbors[j] = [];\n          }\n          for (j = 0; j < m; ++j) {\n            var o = links[j];\n            neighbors[o.source.index].push(o.target);\n            neighbors[o.target.index].push(o.source);\n          }\n        }\n        var candidates = neighbors[i], j = -1, l = candidates.length, x;\n        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;\n        return Math.random() * size;\n      }\n      return force.resume();\n    };\n    force.resume = function() {\n      return force.alpha(.1);\n    };\n    force.stop = function() {\n      return force.alpha(0);\n    };\n    force.drag = function() {\n      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n      if (!arguments.length) return drag;\n      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);\n    };\n    function dragmove(d) {\n      d.px = d3.event.x, d.py = d3.event.y;\n      force.resume();\n    }\n    return d3.rebind(force, event, \"on\");\n  };\n  function d3_layout_forceDragstart(d) {\n    d.fixed |= 2;\n  }\n  function d3_layout_forceDragend(d) {\n    d.fixed &= ~6;\n  }\n  function d3_layout_forceMouseover(d) {\n    d.fixed |= 4;\n    d.px = d.x, d.py = d.y;\n  }\n  function d3_layout_forceMouseout(d) {\n    d.fixed &= ~4;\n  }\n  function d3_layout_forceAccumulate(quad, alpha, charges) {\n    var cx = 0, cy = 0;\n    quad.charge = 0;\n    if (!quad.leaf) {\n      var nodes = quad.nodes, n = nodes.length, i = -1, c;\n      while (++i < n) {\n        c = nodes[i];\n        if (c == null) continue;\n        d3_layout_forceAccumulate(c, alpha, charges);\n        quad.charge += c.charge;\n        cx += c.charge * c.cx;\n        cy += c.charge * c.cy;\n      }\n    }\n    if (quad.point) {\n      if (!quad.leaf) {\n        quad.point.x += Math.random() - .5;\n        quad.point.y += Math.random() - .5;\n      }\n      var k = alpha * charges[quad.point.index];\n      quad.charge += quad.pointCharge = k;\n      cx += k * quad.point.x;\n      cy += k * quad.point.y;\n    }\n    quad.cx = cx / quad.charge;\n    quad.cy = cy / quad.charge;\n  }\n  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;\n  d3.layout.hierarchy = function() {\n    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;\n    function hierarchy(root) {\n      var stack = [ root ], nodes = [], node;\n      root.depth = 0;\n      while ((node = stack.pop()) != null) {\n        nodes.push(node);\n        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {\n          var n, childs, child;\n          while (--n >= 0) {\n            stack.push(child = childs[n]);\n            child.parent = node;\n            child.depth = node.depth + 1;\n          }\n          if (value) node.value = 0;\n          node.children = childs;\n        } else {\n          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          delete node.children;\n        }\n      }\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var childs, parent;\n        if (sort && (childs = node.children)) childs.sort(sort);\n        if (value && (parent = node.parent)) parent.value += node.value;\n      });\n      return nodes;\n    }\n    hierarchy.sort = function(x) {\n      if (!arguments.length) return sort;\n      sort = x;\n      return hierarchy;\n    };\n    hierarchy.children = function(x) {\n      if (!arguments.length) return children;\n      children = x;\n      return hierarchy;\n    };\n    hierarchy.value = function(x) {\n      if (!arguments.length) return value;\n      value = x;\n      return hierarchy;\n    };\n    hierarchy.revalue = function(root) {\n      if (value) {\n        d3_layout_hierarchyVisitBefore(root, function(node) {\n          if (node.children) node.value = 0;\n        });\n        d3_layout_hierarchyVisitAfter(root, function(node) {\n          var parent;\n          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          if (parent = node.parent) parent.value += node.value;\n        });\n      }\n      return root;\n    };\n    return hierarchy;\n  };\n  function d3_layout_hierarchyRebind(object, hierarchy) {\n    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");\n    object.nodes = object;\n    object.links = d3_layout_hierarchyLinks;\n    return object;\n  }\n  function d3_layout_hierarchyVisitBefore(node, callback) {\n    var nodes = [ node ];\n    while ((node = nodes.pop()) != null) {\n      callback(node);\n      if ((children = node.children) && (n = children.length)) {\n        var n, children;\n        while (--n >= 0) nodes.push(children[n]);\n      }\n    }\n  }\n  function d3_layout_hierarchyVisitAfter(node, callback) {\n    var nodes = [ node ], nodes2 = [];\n    while ((node = nodes.pop()) != null) {\n      nodes2.push(node);\n      if ((children = node.children) && (n = children.length)) {\n        var i = -1, n, children;\n        while (++i < n) nodes.push(children[i]);\n      }\n    }\n    while ((node = nodes2.pop()) != null) {\n      callback(node);\n    }\n  }\n  function d3_layout_hierarchyChildren(d) {\n    return d.children;\n  }\n  function d3_layout_hierarchyValue(d) {\n    return d.value;\n  }\n  function d3_layout_hierarchySort(a, b) {\n    return b.value - a.value;\n  }\n  function d3_layout_hierarchyLinks(nodes) {\n    return d3.merge(nodes.map(function(parent) {\n      return (parent.children || []).map(function(child) {\n        return {\n          source: parent,\n          target: child\n        };\n      });\n    }));\n  }\n  d3.layout.partition = function() {\n    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];\n    function position(node, x, dx, dy) {\n      var children = node.children;\n      node.x = x;\n      node.y = node.depth * dy;\n      node.dx = dx;\n      node.dy = dy;\n      if (children && (n = children.length)) {\n        var i = -1, n, c, d;\n        dx = node.value ? dx / node.value : 0;\n        while (++i < n) {\n          position(c = children[i], x, d = c.value * dx, dy);\n          x += d;\n        }\n      }\n    }\n    function depth(node) {\n      var children = node.children, d = 0;\n      if (children && (n = children.length)) {\n        var i = -1, n;\n        while (++i < n) d = Math.max(d, depth(children[i]));\n      }\n      return 1 + d;\n    }\n    function partition(d, i) {\n      var nodes = hierarchy.call(this, d, i);\n      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n      return nodes;\n    }\n    partition.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return partition;\n    };\n    return d3_layout_hierarchyRebind(partition, hierarchy);\n  };\n  d3.layout.pie = function() {\n    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;\n    function pie(data) {\n      var n = data.length, values = data.map(function(d, i) {\n        return +value.call(pie, d, i);\n      }), a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \"function\" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;\n      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {\n        return values[j] - values[i];\n      } : function(i, j) {\n        return sort(data[i], data[j]);\n      });\n      index.forEach(function(i) {\n        arcs[i] = {\n          data: data[i],\n          value: v = values[i],\n          startAngle: a,\n          endAngle: a += v * k + pa,\n          padAngle: p\n        };\n      });\n      return arcs;\n    }\n    pie.value = function(_) {\n      if (!arguments.length) return value;\n      value = _;\n      return pie;\n    };\n    pie.sort = function(_) {\n      if (!arguments.length) return sort;\n      sort = _;\n      return pie;\n    };\n    pie.startAngle = function(_) {\n      if (!arguments.length) return startAngle;\n      startAngle = _;\n      return pie;\n    };\n    pie.endAngle = function(_) {\n      if (!arguments.length) return endAngle;\n      endAngle = _;\n      return pie;\n    };\n    pie.padAngle = function(_) {\n      if (!arguments.length) return padAngle;\n      padAngle = _;\n      return pie;\n    };\n    return pie;\n  };\n  var d3_layout_pieSortByValue = {};\n  d3.layout.stack = function() {\n    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n    function stack(data, index) {\n      if (!(n = data.length)) return data;\n      var series = data.map(function(d, i) {\n        return values.call(stack, d, i);\n      });\n      var points = series.map(function(d) {\n        return d.map(function(v, i) {\n          return [ x.call(stack, v, i), y.call(stack, v, i) ];\n        });\n      });\n      var orders = order.call(stack, points, index);\n      series = d3.permute(series, orders);\n      points = d3.permute(points, orders);\n      var offsets = offset.call(stack, points, index);\n      var m = series[0].length, n, i, j, o;\n      for (j = 0; j < m; ++j) {\n        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n        for (i = 1; i < n; ++i) {\n          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n        }\n      }\n      return data;\n    }\n    stack.values = function(x) {\n      if (!arguments.length) return values;\n      values = x;\n      return stack;\n    };\n    stack.order = function(x) {\n      if (!arguments.length) return order;\n      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n      return stack;\n    };\n    stack.offset = function(x) {\n      if (!arguments.length) return offset;\n      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n      return stack;\n    };\n    stack.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      return stack;\n    };\n    stack.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      return stack;\n    };\n    stack.out = function(z) {\n      if (!arguments.length) return out;\n      out = z;\n      return stack;\n    };\n    return stack;\n  };\n  function d3_layout_stackX(d) {\n    return d.x;\n  }\n  function d3_layout_stackY(d) {\n    return d.y;\n  }\n  function d3_layout_stackOut(d, y0, y) {\n    d.y0 = y0;\n    d.y = y;\n  }\n  var d3_layout_stackOrders = d3.map({\n    \"inside-out\": function(data) {\n      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n        return max[a] - max[b];\n      }), top = 0, bottom = 0, tops = [], bottoms = [];\n      for (i = 0; i < n; ++i) {\n        j = index[i];\n        if (top < bottom) {\n          top += sums[j];\n          tops.push(j);\n        } else {\n          bottom += sums[j];\n          bottoms.push(j);\n        }\n      }\n      return bottoms.reverse().concat(tops);\n    },\n    reverse: function(data) {\n      return d3.range(data.length).reverse();\n    },\n    \"default\": d3_layout_stackOrderDefault\n  });\n  var d3_layout_stackOffsets = d3.map({\n    silhouette: function(data) {\n      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o > max) max = o;\n        sums.push(o);\n      }\n      for (j = 0; j < m; ++j) {\n        y0[j] = (max - sums[j]) / 2;\n      }\n      return y0;\n    },\n    wiggle: function(data) {\n      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];\n      y0[0] = o = o0 = 0;\n      for (j = 1; j < m; ++j) {\n        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];\n        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {\n          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {\n            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n          }\n          s2 += s3 * data[i][j][1];\n        }\n        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n        if (o < o0) o0 = o;\n      }\n      for (j = 0; j < m; ++j) y0[j] -= o0;\n      return y0;\n    },\n    expand: function(data) {\n      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;\n      }\n      for (j = 0; j < m; ++j) y0[j] = 0;\n      return y0;\n    },\n    zero: d3_layout_stackOffsetZero\n  });\n  function d3_layout_stackOrderDefault(data) {\n    return d3.range(data.length);\n  }\n  function d3_layout_stackOffsetZero(data) {\n    var j = -1, m = data[0].length, y0 = [];\n    while (++j < m) y0[j] = 0;\n    return y0;\n  }\n  function d3_layout_stackMaxIndex(array) {\n    var i = 1, j = 0, v = array[0][1], k, n = array.length;\n    for (;i < n; ++i) {\n      if ((k = array[i][1]) > v) {\n        j = i;\n        v = k;\n      }\n    }\n    return j;\n  }\n  function d3_layout_stackReduceSum(d) {\n    return d.reduce(d3_layout_stackSum, 0);\n  }\n  function d3_layout_stackSum(p, d) {\n    return p + d[1];\n  }\n  d3.layout.histogram = function() {\n    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;\n    function histogram(data, i) {\n      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n      while (++i < m) {\n        bin = bins[i] = [];\n        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n        bin.y = 0;\n      }\n      if (m > 0) {\n        i = -1;\n        while (++i < n) {\n          x = values[i];\n          if (x >= range[0] && x <= range[1]) {\n            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n            bin.y += k;\n            bin.push(data[i]);\n          }\n        }\n      }\n      return bins;\n    }\n    histogram.value = function(x) {\n      if (!arguments.length) return valuer;\n      valuer = x;\n      return histogram;\n    };\n    histogram.range = function(x) {\n      if (!arguments.length) return ranger;\n      ranger = d3_functor(x);\n      return histogram;\n    };\n    histogram.bins = function(x) {\n      if (!arguments.length) return binner;\n      binner = typeof x === \"number\" ? function(range) {\n        return d3_layout_histogramBinFixed(range, x);\n      } : d3_functor(x);\n      return histogram;\n    };\n    histogram.frequency = function(x) {\n      if (!arguments.length) return frequency;\n      frequency = !!x;\n      return histogram;\n    };\n    return histogram;\n  };\n  function d3_layout_histogramBinSturges(range, values) {\n    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n  }\n  function d3_layout_histogramBinFixed(range, n) {\n    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];\n    while (++x <= n) f[x] = m * x + b;\n    return f;\n  }\n  function d3_layout_histogramRange(values) {\n    return [ d3.min(values), d3.max(values) ];\n  }\n  d3.layout.pack = function() {\n    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;\n    function pack(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \"function\" ? radius : function() {\n        return radius;\n      };\n      root.x = root.y = 0;\n      d3_layout_hierarchyVisitAfter(root, function(d) {\n        d.r = +r(d.value);\n      });\n      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n      if (padding) {\n        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r += dr;\n        });\n        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r -= dr;\n        });\n      }\n      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n      return nodes;\n    }\n    pack.size = function(_) {\n      if (!arguments.length) return size;\n      size = _;\n      return pack;\n    };\n    pack.radius = function(_) {\n      if (!arguments.length) return radius;\n      radius = _ == null || typeof _ === \"function\" ? _ : +_;\n      return pack;\n    };\n    pack.padding = function(_) {\n      if (!arguments.length) return padding;\n      padding = +_;\n      return pack;\n    };\n    return d3_layout_hierarchyRebind(pack, hierarchy);\n  };\n  function d3_layout_packSort(a, b) {\n    return a.value - b.value;\n  }\n  function d3_layout_packInsert(a, b) {\n    var c = a._pack_next;\n    a._pack_next = b;\n    b._pack_prev = a;\n    b._pack_next = c;\n    c._pack_prev = b;\n  }\n  function d3_layout_packSplice(a, b) {\n    a._pack_next = b;\n    b._pack_prev = a;\n  }\n  function d3_layout_packIntersects(a, b) {\n    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;\n    return .999 * dr * dr > dx * dx + dy * dy;\n  }\n  function d3_layout_packSiblings(node) {\n    if (!(nodes = node.children) || !(n = nodes.length)) return;\n    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;\n    function bound(node) {\n      xMin = Math.min(node.x - node.r, xMin);\n      xMax = Math.max(node.x + node.r, xMax);\n      yMin = Math.min(node.y - node.r, yMin);\n      yMax = Math.max(node.y + node.r, yMax);\n    }\n    nodes.forEach(d3_layout_packLink);\n    a = nodes[0];\n    a.x = -a.r;\n    a.y = 0;\n    bound(a);\n    if (n > 1) {\n      b = nodes[1];\n      b.x = b.r;\n      b.y = 0;\n      bound(b);\n      if (n > 2) {\n        c = nodes[2];\n        d3_layout_packPlace(a, b, c);\n        bound(c);\n        d3_layout_packInsert(a, c);\n        a._pack_prev = c;\n        d3_layout_packInsert(c, b);\n        b = a._pack_next;\n        for (i = 3; i < n; i++) {\n          d3_layout_packPlace(a, b, c = nodes[i]);\n          var isect = 0, s1 = 1, s2 = 1;\n          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n            if (d3_layout_packIntersects(j, c)) {\n              isect = 1;\n              break;\n            }\n          }\n          if (isect == 1) {\n            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n              if (d3_layout_packIntersects(k, c)) {\n                break;\n              }\n            }\n          }\n          if (isect) {\n            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);\n            i--;\n          } else {\n            d3_layout_packInsert(a, c);\n            b = c;\n            bound(c);\n          }\n        }\n      }\n    }\n    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;\n    for (i = 0; i < n; i++) {\n      c = nodes[i];\n      c.x -= cx;\n      c.y -= cy;\n      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n    }\n    node.r = cr;\n    nodes.forEach(d3_layout_packUnlink);\n  }\n  function d3_layout_packLink(node) {\n    node._pack_next = node._pack_prev = node;\n  }\n  function d3_layout_packUnlink(node) {\n    delete node._pack_next;\n    delete node._pack_prev;\n  }\n  function d3_layout_packTransform(node, x, y, k) {\n    var children = node.children;\n    node.x = x += k * node.x;\n    node.y = y += k * node.y;\n    node.r *= k;\n    if (children) {\n      var i = -1, n = children.length;\n      while (++i < n) d3_layout_packTransform(children[i], x, y, k);\n    }\n  }\n  function d3_layout_packPlace(a, b, c) {\n    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;\n    if (db && (dx || dy)) {\n      var da = b.r + c.r, dc = dx * dx + dy * dy;\n      da *= da;\n      db *= db;\n      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = a.x + x * dx + y * dy;\n      c.y = a.y + x * dy - y * dx;\n    } else {\n      c.x = a.x + db;\n      c.y = a.y;\n    }\n  }\n  d3.layout.tree = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n    function tree(d, i) {\n      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);\n      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {\n        var left = root0, right = root0, bottom = root0;\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n      return nodes;\n    }\n    function wrapTree(root0) {\n      var root1 = {\n        A: null,\n        children: [ root0 ]\n      }, queue = [ root1 ], node1;\n      while ((node1 = queue.pop()) != null) {\n        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {\n          queue.push((children[i] = child = {\n            _: children[i],\n            parent: node1,\n            children: (child = children[i].children) && child.slice() || [],\n            A: null,\n            a: null,\n            z: 0,\n            m: 0,\n            c: 0,\n            s: 0,\n            t: null,\n            i: i\n          }).a = child);\n        }\n      }\n      return root1.children[0];\n    }\n    function firstWalk(v) {\n      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;\n      if (children.length) {\n        d3_layout_treeShift(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {\n          vom = d3_layout_treeLeft(vom);\n          vop = d3_layout_treeRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !d3_layout_treeRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !d3_layout_treeLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n    function sizeNode(node) {\n      node.x *= size[0];\n      node.y = node.depth * size[1];\n    }\n    tree.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return tree;\n    };\n    tree.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null ? sizeNode : null;\n      return tree;\n    };\n    tree.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) == null ? null : sizeNode;\n      return tree;\n    };\n    return d3_layout_hierarchyRebind(tree, hierarchy);\n  };\n  function d3_layout_treeSeparation(a, b) {\n    return a.parent == b.parent ? 1 : 2;\n  }\n  function d3_layout_treeLeft(v) {\n    var children = v.children;\n    return children.length ? children[0] : v.t;\n  }\n  function d3_layout_treeRight(v) {\n    var children = v.children, n;\n    return (n = children.length) ? children[n - 1] : v.t;\n  }\n  function d3_layout_treeMove(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n  function d3_layout_treeShift(v) {\n    var shift = 0, change = 0, children = v.children, i = children.length, w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n  function d3_layout_treeAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n  d3.layout.cluster = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n    function cluster(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var children = node.children;\n        if (children && children.length) {\n          node.x = d3_layout_clusterX(children);\n          node.y = d3_layout_clusterY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {\n        node.x = (node.x - root.x) * size[0];\n        node.y = (root.y - node.y) * size[1];\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * size[0];\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n      });\n      return nodes;\n    }\n    cluster.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return cluster;\n    };\n    cluster.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null;\n      return cluster;\n    };\n    cluster.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) != null;\n      return cluster;\n    };\n    return d3_layout_hierarchyRebind(cluster, hierarchy);\n  };\n  function d3_layout_clusterY(children) {\n    return 1 + d3.max(children, function(child) {\n      return child.y;\n    });\n  }\n  function d3_layout_clusterX(children) {\n    return children.reduce(function(x, child) {\n      return x + child.x;\n    }, 0) / children.length;\n  }\n  function d3_layout_clusterLeft(node) {\n    var children = node.children;\n    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;\n  }\n  function d3_layout_clusterRight(node) {\n    var children = node.children, n;\n    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n  }\n  d3.layout.treemap = function() {\n    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n    function scale(children, k) {\n      var i = -1, n = children.length, child, area;\n      while (++i < n) {\n        area = (child = children[i]).value * (k < 0 ? 0 : k);\n        child.area = isNaN(area) || area <= 0 ? 0 : area;\n      }\n    }\n    function squarify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while ((n = remaining.length) > 0) {\n          row.push(child = remaining[n - 1]);\n          row.area += child.area;\n          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {\n            remaining.pop();\n            best = score;\n          } else {\n            row.area -= row.pop().area;\n            position(row, u, rect, false);\n            u = Math.min(rect.dx, rect.dy);\n            row.length = row.area = 0;\n            best = Infinity;\n          }\n        }\n        if (row.length) {\n          position(row, u, rect, true);\n          row.length = row.area = 0;\n        }\n        children.forEach(squarify);\n      }\n    }\n    function stickify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), remaining = children.slice(), child, row = [];\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while (child = remaining.pop()) {\n          row.push(child);\n          row.area += child.area;\n          if (child.z != null) {\n            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n            row.length = row.area = 0;\n          }\n        }\n        children.forEach(stickify);\n      }\n    }\n    function worst(row, u) {\n      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;\n      while (++i < n) {\n        if (!(r = row[i].area)) continue;\n        if (r < rmin) rmin = r;\n        if (r > rmax) rmax = r;\n      }\n      s *= s;\n      u *= u;\n      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n    }\n    function position(row, u, rect, flush) {\n      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;\n      if (u == rect.dx) {\n        if (flush || v > rect.dy) v = rect.dy;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dy = v;\n          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n        }\n        o.z = true;\n        o.dx += rect.x + rect.dx - x;\n        rect.y += v;\n        rect.dy -= v;\n      } else {\n        if (flush || v > rect.dx) v = rect.dx;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dx = v;\n          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n        }\n        o.z = false;\n        o.dy += rect.y + rect.dy - y;\n        rect.x += v;\n        rect.dx -= v;\n      }\n    }\n    function treemap(d) {\n      var nodes = stickies || hierarchy(d), root = nodes[0];\n      root.x = root.y = 0;\n      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;\n      if (stickies) hierarchy.revalue(root);\n      scale([ root ], root.dx * root.dy / root.value);\n      (stickies ? stickify : squarify)(root);\n      if (sticky) stickies = nodes;\n      return nodes;\n    }\n    treemap.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return treemap;\n    };\n    treemap.padding = function(x) {\n      if (!arguments.length) return padding;\n      function padFunction(node) {\n        var p = x.call(treemap, node, node.depth);\n        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n      }\n      function padConstant(node) {\n        return d3_layout_treemapPad(node, x);\n      }\n      var type;\n      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ], \n      padConstant) : padConstant;\n      return treemap;\n    };\n    treemap.round = function(x) {\n      if (!arguments.length) return round != Number;\n      round = x ? Math.round : Number;\n      return treemap;\n    };\n    treemap.sticky = function(x) {\n      if (!arguments.length) return sticky;\n      sticky = x;\n      stickies = null;\n      return treemap;\n    };\n    treemap.ratio = function(x) {\n      if (!arguments.length) return ratio;\n      ratio = x;\n      return treemap;\n    };\n    treemap.mode = function(x) {\n      if (!arguments.length) return mode;\n      mode = x + \"\";\n      return treemap;\n    };\n    return d3_layout_hierarchyRebind(treemap, hierarchy);\n  };\n  function d3_layout_treemapPadNull(node) {\n    return {\n      x: node.x,\n      y: node.y,\n      dx: node.dx,\n      dy: node.dy\n    };\n  }\n  function d3_layout_treemapPad(node, padding) {\n    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n    if (dx < 0) {\n      x += dx / 2;\n      dx = 0;\n    }\n    if (dy < 0) {\n      y += dy / 2;\n      dy = 0;\n    }\n    return {\n      x: x,\n      y: y,\n      dx: dx,\n      dy: dy\n    };\n  }\n  d3.random = {\n    normal: function(µ, σ) {\n      var n = arguments.length;\n      if (n < 2) σ = 1;\n      if (n < 1) µ = 0;\n      return function() {\n        var x, y, r;\n        do {\n          x = Math.random() * 2 - 1;\n          y = Math.random() * 2 - 1;\n          r = x * x + y * y;\n        } while (!r || r > 1);\n        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n      };\n    },\n    logNormal: function() {\n      var random = d3.random.normal.apply(d3, arguments);\n      return function() {\n        return Math.exp(random());\n      };\n    },\n    bates: function(m) {\n      var random = d3.random.irwinHall(m);\n      return function() {\n        return random() / m;\n      };\n    },\n    irwinHall: function(m) {\n      return function() {\n        for (var s = 0, j = 0; j < m; j++) s += Math.random();\n        return s;\n      };\n    }\n  };\n  d3.scale = {};\n  function d3_scaleExtent(domain) {\n    var start = domain[0], stop = domain[domain.length - 1];\n    return start < stop ? [ start, stop ] : [ stop, start ];\n  }\n  function d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n  }\n  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);\n    return function(x) {\n      return i(u(x));\n    };\n  }\n  function d3_scale_nice(domain, nice) {\n    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;\n    if (x1 < x0) {\n      dx = i0, i0 = i1, i1 = dx;\n      dx = x0, x0 = x1, x1 = dx;\n    }\n    domain[i0] = nice.floor(x0);\n    domain[i1] = nice.ceil(x1);\n    return domain;\n  }\n  function d3_scale_niceStep(step) {\n    return step ? {\n      floor: function(x) {\n        return Math.floor(x / step) * step;\n      },\n      ceil: function(x) {\n        return Math.ceil(x / step) * step;\n      }\n    } : d3_scale_niceIdentity;\n  }\n  var d3_scale_niceIdentity = {\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;\n    if (domain[k] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n    while (++j <= k) {\n      u.push(uninterpolate(domain[j - 1], domain[j]));\n      i.push(interpolate(range[j - 1], range[j]));\n    }\n    return function(x) {\n      var j = d3.bisect(domain, x, 1, k) - 1;\n      return i[j](u[j](x));\n    };\n  }\n  d3.scale.linear = function() {\n    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);\n  };\n  function d3_scale_linear(domain, range, interpolate, clamp) {\n    var output, input;\n    function rescale() {\n      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n      output = linear(domain, range, uninterpolate, interpolate);\n      input = linear(range, domain, uninterpolate, d3_interpolate);\n      return scale;\n    }\n    function scale(x) {\n      return output(x);\n    }\n    scale.invert = function(y) {\n      return input(y);\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(Number);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.rangeRound = function(x) {\n      return scale.range(x).interpolate(d3_interpolateRound);\n    };\n    scale.clamp = function(x) {\n      if (!arguments.length) return clamp;\n      clamp = x;\n      return rescale();\n    };\n    scale.interpolate = function(x) {\n      if (!arguments.length) return interpolate;\n      interpolate = x;\n      return rescale();\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      d3_scale_linearNice(domain, m);\n      return rescale();\n    };\n    scale.copy = function() {\n      return d3_scale_linear(domain, range, interpolate, clamp);\n    };\n    return rescale();\n  }\n  function d3_scale_linearRebind(scale, linear) {\n    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");\n  }\n  function d3_scale_linearNice(domain, m) {\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    return domain;\n  }\n  function d3_scale_linearTickRange(domain, m) {\n    if (m == null) m = 10;\n    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;\n    extent[0] = Math.ceil(extent[0] / step) * step;\n    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n    extent[2] = step;\n    return extent;\n  }\n  function d3_scale_linearTicks(domain, m) {\n    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n  }\n  function d3_scale_linearTickFormat(domain, m, format) {\n    var range = d3_scale_linearTickRange(domain, m);\n    if (format) {\n      var match = d3_format_re.exec(format);\n      match.shift();\n      if (match[8] === \"s\") {\n        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n        if (!match[7]) match[7] = \".\" + d3_scale_linearPrecision(prefix.scale(range[2]));\n        match[8] = \"f\";\n        format = d3.format(match.join(\"\"));\n        return function(d) {\n          return format(prefix.scale(d)) + prefix.symbol;\n        };\n      }\n      if (!match[7]) match[7] = \".\" + d3_scale_linearFormatPrecision(match[8], range);\n      format = match.join(\"\");\n    } else {\n      format = \",.\" + d3_scale_linearPrecision(range[2]) + \"f\";\n    }\n    return d3.format(format);\n  }\n  var d3_scale_linearFormatSignificant = {\n    s: 1,\n    g: 1,\n    p: 1,\n    r: 1,\n    e: 1\n  };\n  function d3_scale_linearPrecision(value) {\n    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n  }\n  function d3_scale_linearFormatPrecision(type, range) {\n    var p = d3_scale_linearPrecision(range[2]);\n    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \"e\") : p - (type === \"%\") * 2;\n  }\n  d3.scale.log = function() {\n    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);\n  };\n  function d3_scale_log(linear, base, positive, domain) {\n    function log(x) {\n      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);\n    }\n    function pow(x) {\n      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n    }\n    function scale(x) {\n      return linear(log(x));\n    }\n    scale.invert = function(x) {\n      return pow(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      positive = x[0] >= 0;\n      linear.domain((domain = x.map(Number)).map(log));\n      return scale;\n    };\n    scale.base = function(_) {\n      if (!arguments.length) return base;\n      base = +_;\n      linear.domain(domain.map(log));\n      return scale;\n    };\n    scale.nice = function() {\n      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n      linear.domain(niced);\n      domain = niced.map(pow);\n      return scale;\n    };\n    scale.ticks = function() {\n      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n      if (isFinite(j - i)) {\n        if (positive) {\n          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);\n          ticks.push(pow(i));\n        } else {\n          ticks.push(pow(i));\n          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);\n        }\n        for (i = 0; ticks[i] < u; i++) {}\n        for (j = ticks.length; ticks[j - 1] > v; j--) {}\n        ticks = ticks.slice(i, j);\n      }\n      return ticks;\n    };\n    scale.tickFormat = function(n, format) {\n      if (!arguments.length) return d3_scale_logFormat;\n      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== \"function\") format = d3.format(format);\n      var k = Math.max(1, base * n / scale.ticks().length);\n      return function(d) {\n        var i = d / pow(Math.round(log(d)));\n        if (i * base < base - .5) i *= base;\n        return i <= k ? format(d) : \"\";\n      };\n    };\n    scale.copy = function() {\n      return d3_scale_log(linear.copy(), base, positive, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  var d3_scale_logFormat = d3.format(\".0e\"), d3_scale_logNiceNegative = {\n    floor: function(x) {\n      return -Math.ceil(-x);\n    },\n    ceil: function(x) {\n      return -Math.floor(-x);\n    }\n  };\n  d3.scale.pow = function() {\n    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);\n  };\n  function d3_scale_pow(linear, exponent, domain) {\n    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);\n    function scale(x) {\n      return linear(powp(x));\n    }\n    scale.invert = function(x) {\n      return powb(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      linear.domain((domain = x.map(Number)).map(powp));\n      return scale;\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      return scale.domain(d3_scale_linearNice(domain, m));\n    };\n    scale.exponent = function(x) {\n      if (!arguments.length) return exponent;\n      powp = d3_scale_powPow(exponent = x);\n      powb = d3_scale_powPow(1 / exponent);\n      linear.domain(domain.map(powp));\n      return scale;\n    };\n    scale.copy = function() {\n      return d3_scale_pow(linear.copy(), exponent, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_scale_powPow(e) {\n    return function(x) {\n      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n    };\n  }\n  d3.scale.sqrt = function() {\n    return d3.scale.pow().exponent(.5);\n  };\n  d3.scale.ordinal = function() {\n    return d3_scale_ordinal([], {\n      t: \"range\",\n      a: [ [] ]\n    });\n  };\n  function d3_scale_ordinal(domain, ranger) {\n    var index, range, rangeBand;\n    function scale(x) {\n      return range[((index.get(x) || (ranger.t === \"range\" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n    }\n    function steps(start, step) {\n      return d3.range(domain.length).map(function(i) {\n        return start + step * i;\n      });\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = [];\n      index = new d3_Map();\n      var i = -1, n = x.length, xi;\n      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n      return scale[ranger.t].apply(scale, ranger.a);\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      rangeBand = 0;\n      ranger = {\n        t: \"range\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangePoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, \n      0) : (stop - start) / (domain.length - 1 + padding);\n      range = steps(start + step * padding / 2, step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangePoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundPoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), \n      0) : (stop - start) / (domain.length - 1 + padding) | 0;\n      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangeRoundPoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n      range = steps(start + step * outerPadding, step);\n      if (reverse) range.reverse();\n      rangeBand = step * (1 - padding);\n      ranger = {\n        t: \"rangeBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n      if (reverse) range.reverse();\n      rangeBand = Math.round(step * (1 - padding));\n      ranger = {\n        t: \"rangeRoundBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBand = function() {\n      return rangeBand;\n    };\n    scale.rangeExtent = function() {\n      return d3_scaleExtent(ranger.a[0]);\n    };\n    scale.copy = function() {\n      return d3_scale_ordinal(domain, ranger);\n    };\n    return scale.domain(domain);\n  }\n  d3.scale.category10 = function() {\n    return d3.scale.ordinal().range(d3_category10);\n  };\n  d3.scale.category20 = function() {\n    return d3.scale.ordinal().range(d3_category20);\n  };\n  d3.scale.category20b = function() {\n    return d3.scale.ordinal().range(d3_category20b);\n  };\n  d3.scale.category20c = function() {\n    return d3.scale.ordinal().range(d3_category20c);\n  };\n  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n  d3.scale.quantile = function() {\n    return d3_scale_quantile([], []);\n  };\n  function d3_scale_quantile(domain, range) {\n    var thresholds;\n    function rescale() {\n      var k = 0, q = range.length;\n      thresholds = [];\n      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);\n      return scale;\n    }\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.quantiles = function() {\n      return thresholds;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantile(domain, range);\n    };\n    return rescale();\n  }\n  d3.scale.quantize = function() {\n    return d3_scale_quantize(0, 1, [ 0, 1 ]);\n  };\n  function d3_scale_quantize(x0, x1, range) {\n    var kx, i;\n    function scale(x) {\n      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n    }\n    function rescale() {\n      kx = range.length / (x1 - x0);\n      i = range.length - 1;\n      return scale;\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return [ x0, x1 ];\n      x0 = +x[0];\n      x1 = +x[x.length - 1];\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      y = y < 0 ? NaN : y / kx + x0;\n      return [ y, y + 1 / kx ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantize(x0, x1, range);\n    };\n    return rescale();\n  }\n  d3.scale.threshold = function() {\n    return d3_scale_threshold([ .5 ], [ 0, 1 ]);\n  };\n  function d3_scale_threshold(domain, range) {\n    function scale(x) {\n      if (x <= x) return range[d3.bisect(domain, x)];\n    }\n    scale.domain = function(_) {\n      if (!arguments.length) return domain;\n      domain = _;\n      return scale;\n    };\n    scale.range = function(_) {\n      if (!arguments.length) return range;\n      range = _;\n      return scale;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return [ domain[y - 1], domain[y] ];\n    };\n    scale.copy = function() {\n      return d3_scale_threshold(domain, range);\n    };\n    return scale;\n  }\n  d3.scale.identity = function() {\n    return d3_scale_identity([ 0, 1 ]);\n  };\n  function d3_scale_identity(domain) {\n    function identity(x) {\n      return +x;\n    }\n    identity.invert = identity;\n    identity.domain = identity.range = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(identity);\n      return identity;\n    };\n    identity.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    identity.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    identity.copy = function() {\n      return d3_scale_identity(domain);\n    };\n    return identity;\n  }\n  d3.svg = {};\n  function d3_zero() {\n    return 0;\n  }\n  d3.svg.arc = function() {\n    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n    function arc() {\n      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;\n      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;\n      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \"\") + \"Z\";\n      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];\n      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n        if (!cw) p1 *= -1;\n        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n      }\n      if (r1) {\n        x0 = r1 * Math.cos(a0 + p1);\n        y0 = r1 * Math.sin(a0 + p1);\n        x1 = r1 * Math.cos(a1 - p1);\n        y1 = r1 * Math.sin(a1 - p1);\n        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;\n        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n          var h1 = (a0 + a1) / 2;\n          x0 = r1 * Math.cos(h1);\n          y0 = r1 * Math.sin(h1);\n          x1 = y1 = null;\n        }\n      } else {\n        x0 = y0 = 0;\n      }\n      if (r0) {\n        x2 = r0 * Math.cos(a1 - p0);\n        y2 = r0 * Math.sin(a1 - p0);\n        x3 = r0 * Math.cos(a0 + p0);\n        y3 = r0 * Math.sin(a0 + p0);\n        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;\n        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n          var h0 = (a0 + a1) / 2;\n          x2 = r0 * Math.cos(h0);\n          y2 = r0 * Math.sin(h0);\n          x3 = y3 = null;\n        }\n      } else {\n        x2 = y2 = 0;\n      }\n      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {\n        cr = r0 < r1 ^ cw ? 0 : 1;\n        var rc1 = rc, rc0 = rc;\n        if (da < π) {\n          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n        }\n        if (x1 != null) {\n          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n          if (rc === rc1) {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t30[1], \"A\", r1, \",\", r1, \" 0 \", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \",\", cw, \" \", t12[1], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t12[0]);\n          } else {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 1,\", cr, \" \", t12[0]);\n          }\n        } else {\n          path.push(\"M\", x0, \",\", y0);\n        }\n        if (x3 != null) {\n          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n          if (rc === rc0) {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t21[1], \"A\", r0, \",\", r0, \" 0 \", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \",\", 1 - cw, \" \", t03[1], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          } else {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          }\n        } else {\n          path.push(\"L\", x2, \",\", y2);\n        }\n      } else {\n        path.push(\"M\", x0, \",\", y0);\n        if (x1 != null) path.push(\"A\", r1, \",\", r1, \" 0 \", l1, \",\", cw, \" \", x1, \",\", y1);\n        path.push(\"L\", x2, \",\", y2);\n        if (x3 != null) path.push(\"A\", r0, \",\", r0, \" 0 \", l0, \",\", 1 - cw, \" \", x3, \",\", y3);\n      }\n      path.push(\"Z\");\n      return path.join(\"\");\n    }\n    function circleSegment(r1, cw) {\n      return \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + r1;\n    }\n    arc.innerRadius = function(v) {\n      if (!arguments.length) return innerRadius;\n      innerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.outerRadius = function(v) {\n      if (!arguments.length) return outerRadius;\n      outerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.cornerRadius = function(v) {\n      if (!arguments.length) return cornerRadius;\n      cornerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.padRadius = function(v) {\n      if (!arguments.length) return padRadius;\n      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n      return arc;\n    };\n    arc.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return arc;\n    };\n    arc.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return arc;\n    };\n    arc.padAngle = function(v) {\n      if (!arguments.length) return padAngle;\n      padAngle = d3_functor(v);\n      return arc;\n    };\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n      return [ Math.cos(a) * r, Math.sin(a) * r ];\n    };\n    return arc;\n  };\n  var d3_svg_arcAuto = \"auto\";\n  function d3_svg_arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n  function d3_svg_arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n  function d3_svg_arcStartAngle(d) {\n    return d.startAngle;\n  }\n  function d3_svg_arcEndAngle(d) {\n    return d.endAngle;\n  }\n  function d3_svg_arcPadAngle(d) {\n    return d && d.padAngle;\n  }\n  function d3_svg_arcSweep(x0, y0, x1, y1) {\n    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;\n  }\n  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];\n  }\n  function d3_svg_line(projection) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n    function line(data) {\n      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points), tension));\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);\n        } else if (points.length) {\n          segment();\n          points = [];\n        }\n      }\n      if (points.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    line.x = function(_) {\n      if (!arguments.length) return x;\n      x = _;\n      return line;\n    };\n    line.y = function(_) {\n      if (!arguments.length) return y;\n      y = _;\n      return line;\n    };\n    line.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return line;\n    };\n    line.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      return line;\n    };\n    line.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return line;\n    };\n    return line;\n  }\n  d3.svg.line = function() {\n    return d3_svg_line(d3_identity);\n  };\n  var d3_svg_lineInterpolators = d3.map({\n    linear: d3_svg_lineLinear,\n    \"linear-closed\": d3_svg_lineLinearClosed,\n    step: d3_svg_lineStep,\n    \"step-before\": d3_svg_lineStepBefore,\n    \"step-after\": d3_svg_lineStepAfter,\n    basis: d3_svg_lineBasis,\n    \"basis-open\": d3_svg_lineBasisOpen,\n    \"basis-closed\": d3_svg_lineBasisClosed,\n    bundle: d3_svg_lineBundle,\n    cardinal: d3_svg_lineCardinal,\n    \"cardinal-open\": d3_svg_lineCardinalOpen,\n    \"cardinal-closed\": d3_svg_lineCardinalClosed,\n    monotone: d3_svg_lineMonotone\n  });\n  d3_svg_lineInterpolators.forEach(function(key, value) {\n    value.key = key;\n    value.closed = /-closed$/.test(key);\n  });\n  function d3_svg_lineLinear(points) {\n    return points.length > 1 ? points.join(\"L\") : points + \"Z\";\n  }\n  function d3_svg_lineLinearClosed(points) {\n    return points.join(\"L\") + \"Z\";\n  }\n  function d3_svg_lineStep(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p[0] + (p = points[i])[0]) / 2, \"V\", p[1]);\n    if (n > 1) path.push(\"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepBefore(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepAfter(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineCardinalOpen(points, tension) {\n    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineCardinalClosed(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));\n  }\n  function d3_svg_lineCardinal(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineHermite(points, tangents) {\n    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {\n      return d3_svg_lineLinear(points);\n    }\n    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n    if (quad) {\n      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];\n      p0 = points[1];\n      pi = 2;\n    }\n    if (tangents.length > 1) {\n      t = tangents[1];\n      p = points[pi];\n      pi++;\n      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      for (var i = 2; i < tangents.length; i++, pi++) {\n        p = points[pi];\n        t = tangents[i];\n        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      }\n    }\n    if (quad) {\n      var lp = points[pi];\n      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];\n    }\n    return path;\n  }\n  function d3_svg_lineCardinalTangents(points, tension) {\n    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;\n    while (++i < n) {\n      p0 = p1;\n      p1 = p2;\n      p2 = points[i];\n      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineBasis(points) {\n    if (points.length < 3) return d3_svg_lineLinear(points);\n    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0, \"L\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    points.push(points[n - 1]);\n    while (++i <= n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    points.pop();\n    path.push(\"L\", pi);\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisOpen(points) {\n    if (points.length < 4) return d3_svg_lineLinear(points);\n    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];\n    while (++i < 3) {\n      pi = points[i];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n    --i;\n    while (++i < n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisClosed(points) {\n    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];\n    while (++i < 4) {\n      pi = points[i % n];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    --i;\n    while (++i < m) {\n      pi = points[i % n];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBundle(points, tension) {\n    var n = points.length - 1;\n    if (n) {\n      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;\n      while (++i <= n) {\n        p = points[i];\n        t = i / n;\n        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n      }\n    }\n    return d3_svg_lineBasis(points);\n  }\n  function d3_svg_lineDot4(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n  function d3_svg_lineBasisBezier(path, x, y) {\n    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n  }\n  function d3_svg_lineSlope(p0, p1) {\n    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n  }\n  function d3_svg_lineFiniteDifferences(points) {\n    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);\n    while (++i < j) {\n      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n    }\n    m[i] = d;\n    return m;\n  }\n  function d3_svg_lineMonotoneTangents(points) {\n    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;\n    while (++i < j) {\n      d = d3_svg_lineSlope(points[i], points[i + 1]);\n      if (abs(d) < ε) {\n        m[i] = m[i + 1] = 0;\n      } else {\n        a = m[i] / d;\n        b = m[i + 1] / d;\n        s = a * a + b * b;\n        if (s > 9) {\n          s = d * 3 / Math.sqrt(s);\n          m[i] = s * a;\n          m[i + 1] = s * b;\n        }\n      }\n    }\n    i = -1;\n    while (++i <= j) {\n      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n      tangents.push([ s || 0, m[i] * s || 0 ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineMonotone(points) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n  }\n  d3.svg.line.radial = function() {\n    var line = d3_svg_line(d3_svg_lineRadial);\n    line.radius = line.x, delete line.x;\n    line.angle = line.y, delete line.y;\n    return line;\n  };\n  function d3_svg_lineRadial(points) {\n    var point, i = -1, n = points.length, r, a;\n    while (++i < n) {\n      point = points[i];\n      r = point[0];\n      a = point[1] - halfπ;\n      point[0] = r * Math.cos(a);\n      point[1] = r * Math.sin(a);\n    }\n    return points;\n  }\n  function d3_svg_area(projection) {\n    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n    function area(data) {\n      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n        return x;\n      } : d3_functor(x1), fy1 = y0 === y1 ? function() {\n        return y;\n      } : d3_functor(y1), x, y;\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);\n          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);\n        } else if (points0.length) {\n          segment();\n          points0 = [];\n          points1 = [];\n        }\n      }\n      if (points0.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    area.x = function(_) {\n      if (!arguments.length) return x1;\n      x0 = x1 = _;\n      return area;\n    };\n    area.x0 = function(_) {\n      if (!arguments.length) return x0;\n      x0 = _;\n      return area;\n    };\n    area.x1 = function(_) {\n      if (!arguments.length) return x1;\n      x1 = _;\n      return area;\n    };\n    area.y = function(_) {\n      if (!arguments.length) return y1;\n      y0 = y1 = _;\n      return area;\n    };\n    area.y0 = function(_) {\n      if (!arguments.length) return y0;\n      y0 = _;\n      return area;\n    };\n    area.y1 = function(_) {\n      if (!arguments.length) return y1;\n      y1 = _;\n      return area;\n    };\n    area.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return area;\n    };\n    area.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      interpolateReverse = interpolate.reverse || interpolate;\n      L = interpolate.closed ? \"M\" : \"L\";\n      return area;\n    };\n    area.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return area;\n    };\n    return area;\n  }\n  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n  d3.svg.area = function() {\n    return d3_svg_area(d3_identity);\n  };\n  d3.svg.area.radial = function() {\n    var area = d3_svg_area(d3_svg_lineRadial);\n    area.radius = area.x, delete area.x;\n    area.innerRadius = area.x0, delete area.x0;\n    area.outerRadius = area.x1, delete area.x1;\n    area.angle = area.y, delete area.y;\n    area.startAngle = area.y0, delete area.y0;\n    area.endAngle = area.y1, delete area.y1;\n    return area;\n  };\n  d3.svg.chord = function() {\n    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n    function chord(d, i) {\n      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);\n      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n    }\n    function subgroup(self, f, d, i) {\n      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n      return {\n        r: r,\n        a0: a0,\n        a1: a1,\n        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],\n        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]\n      };\n    }\n    function equals(a, b) {\n      return a.a0 == b.a0 && a.a1 == b.a1;\n    }\n    function arc(r, p, a) {\n      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;\n    }\n    function curve(r0, p0, r1, p1) {\n      return \"Q 0,0 \" + p1;\n    }\n    chord.radius = function(v) {\n      if (!arguments.length) return radius;\n      radius = d3_functor(v);\n      return chord;\n    };\n    chord.source = function(v) {\n      if (!arguments.length) return source;\n      source = d3_functor(v);\n      return chord;\n    };\n    chord.target = function(v) {\n      if (!arguments.length) return target;\n      target = d3_functor(v);\n      return chord;\n    };\n    chord.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return chord;\n    };\n    chord.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return chord;\n    };\n    return chord;\n  };\n  function d3_svg_chordRadius(d) {\n    return d.radius;\n  }\n  d3.svg.diagonal = function() {\n    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;\n    function diagonal(d, i) {\n      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {\n        x: p0.x,\n        y: m\n      }, {\n        x: p3.x,\n        y: m\n      }, p3 ];\n      p = p.map(projection);\n      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];\n    }\n    diagonal.source = function(x) {\n      if (!arguments.length) return source;\n      source = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.target = function(x) {\n      if (!arguments.length) return target;\n      target = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.projection = function(x) {\n      if (!arguments.length) return projection;\n      projection = x;\n      return diagonal;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalProjection(d) {\n    return [ d.x, d.y ];\n  }\n  d3.svg.diagonal.radial = function() {\n    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;\n    diagonal.projection = function(x) {\n      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalRadialProjection(projection) {\n    return function() {\n      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;\n      return [ r * Math.cos(a), r * Math.sin(a) ];\n    };\n  }\n  d3.svg.symbol = function() {\n    var type = d3_svg_symbolType, size = d3_svg_symbolSize;\n    function symbol(d, i) {\n      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n    }\n    symbol.type = function(x) {\n      if (!arguments.length) return type;\n      type = d3_functor(x);\n      return symbol;\n    };\n    symbol.size = function(x) {\n      if (!arguments.length) return size;\n      size = d3_functor(x);\n      return symbol;\n    };\n    return symbol;\n  };\n  function d3_svg_symbolSize() {\n    return 64;\n  }\n  function d3_svg_symbolType() {\n    return \"circle\";\n  }\n  function d3_svg_symbolCircle(size) {\n    var r = Math.sqrt(size / π);\n    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";\n  }\n  var d3_svg_symbols = d3.map({\n    circle: d3_svg_symbolCircle,\n    cross: function(size) {\n      var r = Math.sqrt(size / 5) / 2;\n      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n    },\n    diamond: function(size) {\n      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;\n      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";\n    },\n    square: function(size) {\n      var r = Math.sqrt(size) / 2;\n      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";\n    },\n    \"triangle-down\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";\n    },\n    \"triangle-up\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";\n    }\n  });\n  d3.svg.symbolTypes = d3_svg_symbols.keys();\n  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n  d3_selectionPrototype.transition = function(name) {\n    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n      time: Date.now(),\n      ease: d3_ease_cubicInOut,\n      delay: 0,\n      duration: 250\n    };\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_selectionPrototype.interrupt = function(name) {\n    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));\n  };\n  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());\n  function d3_selection_interruptNS(ns) {\n    return function() {\n      var lock, activeId, active;\n      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        if (--lock.count) delete lock[activeId]; else delete this[ns];\n        lock.active += .5;\n        active.event && active.event.interrupt.call(this, this.__data__, active.index);\n      }\n    };\n  }\n  function d3_transition(groups, ns, id) {\n    d3_subclass(groups, d3_transitionPrototype);\n    groups.namespace = ns;\n    groups.id = id;\n    return groups;\n  }\n  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;\n  d3_transitionPrototype.call = d3_selectionPrototype.call;\n  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n  d3_transitionPrototype.node = d3_selectionPrototype.node;\n  d3_transitionPrototype.size = d3_selectionPrototype.size;\n  d3.transition = function(selection, name) {\n    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);\n  };\n  d3.transition.prototype = d3_transitionPrototype;\n  d3_transitionPrototype.select = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n          subgroup.push(subnode);\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.selectAll = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          transition = node[ns][id];\n          subnodes = selector.call(node, node.__data__, i, j);\n          subgroups.push(subgroup = []);\n          for (var k = -1, o = subnodes.length; ++k < o; ) {\n            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n            subgroup.push(subnode);\n          }\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_transition(subgroups, this.namespace, this.id);\n  };\n  d3_transitionPrototype.tween = function(name, tween) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);\n    return d3_selection_each(this, tween == null ? function(node) {\n      node[ns][id].tween.remove(name);\n    } : function(node) {\n      node[ns][id].tween.set(name, tween);\n    });\n  };\n  function d3_transition_tween(groups, name, value, tween) {\n    var id = groups.id, ns = groups.namespace;\n    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n    } : (value = tween(value), function(node) {\n      node[ns][id].tween.set(name, value);\n    }));\n  }\n  d3_transitionPrototype.attr = function(nameNS, value) {\n    if (arguments.length < 2) {\n      for (value in nameNS) this.attr(value, nameNS[value]);\n      return this;\n    }\n    var interpolate = nameNS == \"transform\" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrTween(b) {\n      return b == null ? attrNull : (b += \"\", function() {\n        var a = this.getAttribute(name), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttribute(name, i(t));\n        });\n      });\n    }\n    function attrTweenNS(b) {\n      return b == null ? attrNullNS : (b += \"\", function() {\n        var a = this.getAttributeNS(name.space, name.local), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttributeNS(name.space, name.local, i(t));\n        });\n      });\n    }\n    return d3_transition_tween(this, \"attr.\" + nameNS, value, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.attrTween = function(nameNS, tween) {\n    var name = d3.ns.qualify(nameNS);\n    function attrTween(d, i) {\n      var f = tween.call(this, d, i, this.getAttribute(name));\n      return f && function(t) {\n        this.setAttribute(name, f(t));\n      };\n    }\n    function attrTweenNS(d, i) {\n      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n      return f && function(t) {\n        this.setAttributeNS(name.space, name.local, f(t));\n      };\n    }\n    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.style(priority, name[priority], value);\n        return this;\n      }\n      priority = \"\";\n    }\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleString(b) {\n      return b == null ? styleNull : (b += \"\", function() {\n        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;\n        return a !== b && (i = d3_interpolate(a, b), function(t) {\n          this.style.setProperty(name, i(t), priority);\n        });\n      });\n    }\n    return d3_transition_tween(this, \"style.\" + name, value, styleString);\n  };\n  d3_transitionPrototype.styleTween = function(name, tween, priority) {\n    if (arguments.length < 3) priority = \"\";\n    function styleTween(d, i) {\n      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));\n      return f && function(t) {\n        this.style.setProperty(name, f(t), priority);\n      };\n    }\n    return this.tween(\"style.\" + name, styleTween);\n  };\n  d3_transitionPrototype.text = function(value) {\n    return d3_transition_tween(this, \"text\", value, d3_transition_text);\n  };\n  function d3_transition_text(b) {\n    if (b == null) b = \"\";\n    return function() {\n      this.textContent = b;\n    };\n  }\n  d3_transitionPrototype.remove = function() {\n    var ns = this.namespace;\n    return this.each(\"end.transition\", function() {\n      var p;\n      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);\n    });\n  };\n  d3_transitionPrototype.ease = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].ease;\n    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);\n    return d3_selection_each(this, function(node) {\n      node[ns][id].ease = value;\n    });\n  };\n  d3_transitionPrototype.delay = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].delay;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n    } : (value = +value, function(node) {\n      node[ns][id].delay = value;\n    }));\n  };\n  d3_transitionPrototype.duration = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].duration;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n    } : (value = Math.max(1, value), function(node) {\n      node[ns][id].duration = value;\n    }));\n  };\n  d3_transitionPrototype.each = function(type, listener) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) {\n      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;\n      try {\n        d3_transitionInheritId = id;\n        d3_selection_each(this, function(node, i, j) {\n          d3_transitionInherit = node[ns][id];\n          type.call(node, node.__data__, i, j);\n        });\n      } finally {\n        d3_transitionInherit = inherit;\n        d3_transitionInheritId = inheritId;\n      }\n    } else {\n      d3_selection_each(this, function(node) {\n        var transition = node[ns][id];\n        (transition.event || (transition.event = d3.dispatch(\"start\", \"end\", \"interrupt\"))).on(type, listener);\n      });\n    }\n    return this;\n  };\n  d3_transitionPrototype.transition = function() {\n    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if (node = group[i]) {\n          transition = node[ns][id0];\n          d3_transitionNode(node, i, ns, id1, {\n            time: transition.time,\n            ease: transition.ease,\n            delay: transition.delay + transition.duration,\n            duration: transition.duration\n          });\n        }\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id1);\n  };\n  function d3_transitionNamespace(name) {\n    return name == null ? \"__transition__\" : \"__transition_\" + name + \"__\";\n  }\n  function d3_transitionNode(node, i, ns, id, inherit) {\n    var lock = node[ns] || (node[ns] = {\n      active: 0,\n      count: 0\n    }), transition = lock[id], time, timer, duration, ease, tweens;\n    function schedule(elapsed) {\n      var delay = transition.delay;\n      timer.t = delay + time;\n      if (delay <= elapsed) return start(elapsed - delay);\n      timer.c = start;\n    }\n    function start(elapsed) {\n      var activeId = lock.active, active = lock[activeId];\n      if (active) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        --lock.count;\n        delete lock[activeId];\n        active.event && active.event.interrupt.call(node, node.__data__, active.index);\n      }\n      for (var cancelId in lock) {\n        if (+cancelId < id) {\n          var cancel = lock[cancelId];\n          cancel.timer.c = null;\n          cancel.timer.t = NaN;\n          --lock.count;\n          delete lock[cancelId];\n        }\n      }\n      timer.c = tick;\n      d3_timer(function() {\n        if (timer.c && tick(elapsed || 1)) {\n          timer.c = null;\n          timer.t = NaN;\n        }\n        return 1;\n      }, 0, time);\n      lock.active = id;\n      transition.event && transition.event.start.call(node, node.__data__, i);\n      tweens = [];\n      transition.tween.forEach(function(key, value) {\n        if (value = value.call(node, node.__data__, i)) {\n          tweens.push(value);\n        }\n      });\n      ease = transition.ease;\n      duration = transition.duration;\n    }\n    function tick(elapsed) {\n      var t = elapsed / duration, e = ease(t), n = tweens.length;\n      while (n > 0) {\n        tweens[--n].call(node, e);\n      }\n      if (t >= 1) {\n        transition.event && transition.event.end.call(node, node.__data__, i);\n        if (--lock.count) delete lock[id]; else delete node[ns];\n        return 1;\n      }\n    }\n    if (!transition) {\n      time = inherit.time;\n      timer = d3_timer(schedule, 0, time);\n      transition = lock[id] = {\n        tween: new d3_Map(),\n        time: time,\n        timer: timer,\n        delay: inherit.delay,\n        duration: inherit.duration,\n        ease: inherit.ease,\n        index: i\n      };\n      inherit = null;\n      ++lock.count;\n    }\n  }\n  d3.svg.axis = function() {\n    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n    function axis(g) {\n      g.each(function() {\n        var g = d3.select(this);\n        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();\n        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\".tick\").data(ticks, scale1), tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", ε), tickExit = d3.transition(tick.exit()).style(\"opacity\", ε).remove(), tickUpdate = d3.transition(tick.order()).style(\"opacity\", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n        var range = d3_scaleRange(scale1), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), \n        d3.transition(path));\n        tickEnter.append(\"line\");\n        tickEnter.append(\"text\");\n        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\"), sign = orient === \"top\" || orient === \"left\" ? -1 : 1, x1, x2, y1, y2;\n        if (orient === \"bottom\" || orient === \"top\") {\n          tickTransform = d3_svg_axisX, x1 = \"x\", y1 = \"y\", x2 = \"x2\", y2 = \"y2\";\n          text.attr(\"dy\", sign < 0 ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\");\n          pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + sign * outerTickSize + \"V0H\" + range[1] + \"V\" + sign * outerTickSize);\n        } else {\n          tickTransform = d3_svg_axisY, x1 = \"y\", y1 = \"x\", x2 = \"y2\", y2 = \"x2\";\n          text.attr(\"dy\", \".32em\").style(\"text-anchor\", sign < 0 ? \"end\" : \"start\");\n          pathUpdate.attr(\"d\", \"M\" + sign * outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * outerTickSize);\n        }\n        lineEnter.attr(y2, sign * innerTickSize);\n        textEnter.attr(y1, sign * tickSpacing);\n        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n        if (scale1.rangeBand) {\n          var x = scale1, dx = x.rangeBand() / 2;\n          scale0 = scale1 = function(d) {\n            return x(d) + dx;\n          };\n        } else if (scale0.rangeBand) {\n          scale0 = scale1;\n        } else {\n          tickExit.call(tickTransform, scale1, scale0);\n        }\n        tickEnter.call(tickTransform, scale0, scale1);\n        tickUpdate.call(tickTransform, scale1, scale1);\n      });\n    }\n    axis.scale = function(x) {\n      if (!arguments.length) return scale;\n      scale = x;\n      return axis;\n    };\n    axis.orient = function(x) {\n      if (!arguments.length) return orient;\n      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;\n      return axis;\n    };\n    axis.ticks = function() {\n      if (!arguments.length) return tickArguments_;\n      tickArguments_ = d3_array(arguments);\n      return axis;\n    };\n    axis.tickValues = function(x) {\n      if (!arguments.length) return tickValues;\n      tickValues = x;\n      return axis;\n    };\n    axis.tickFormat = function(x) {\n      if (!arguments.length) return tickFormat_;\n      tickFormat_ = x;\n      return axis;\n    };\n    axis.tickSize = function(x) {\n      var n = arguments.length;\n      if (!n) return innerTickSize;\n      innerTickSize = +x;\n      outerTickSize = +arguments[n - 1];\n      return axis;\n    };\n    axis.innerTickSize = function(x) {\n      if (!arguments.length) return innerTickSize;\n      innerTickSize = +x;\n      return axis;\n    };\n    axis.outerTickSize = function(x) {\n      if (!arguments.length) return outerTickSize;\n      outerTickSize = +x;\n      return axis;\n    };\n    axis.tickPadding = function(x) {\n      if (!arguments.length) return tickPadding;\n      tickPadding = +x;\n      return axis;\n    };\n    axis.tickSubdivide = function() {\n      return arguments.length && axis;\n    };\n    return axis;\n  };\n  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  };\n  function d3_svg_axisX(selection, x0, x1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = x0(d);\n      return \"translate(\" + (isFinite(v0) ? v0 : x1(d)) + \",0)\";\n    });\n  }\n  function d3_svg_axisY(selection, y0, y1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = y0(d);\n      return \"translate(0,\" + (isFinite(v0) ? v0 : y1(d)) + \")\";\n    });\n  }\n  d3.svg.brush = function() {\n    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n    function brush(g) {\n      g.each(function() {\n        var g = d3.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);\n        var background = g.selectAll(\".background\").data([ 0 ]);\n        background.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n        g.selectAll(\".extent\").data([ 0 ]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");\n        var resize = g.selectAll(\".resize\").data(resizes, d3_identity);\n        resize.exit().remove();\n        resize.enter().append(\"g\").attr(\"class\", function(d) {\n          return \"resize \" + d;\n        }).style(\"cursor\", function(d) {\n          return d3_svg_brushCursor[d];\n        }).append(\"rect\").attr(\"x\", function(d) {\n          return /[ew]$/.test(d) ? -3 : null;\n        }).attr(\"y\", function(d) {\n          return /^[ns]/.test(d) ? -3 : null;\n        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");\n        resize.style(\"display\", brush.empty() ? \"none\" : null);\n        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;\n        if (x) {\n          range = d3_scaleRange(x);\n          backgroundUpdate.attr(\"x\", range[0]).attr(\"width\", range[1] - range[0]);\n          redrawX(gUpdate);\n        }\n        if (y) {\n          range = d3_scaleRange(y);\n          backgroundUpdate.attr(\"y\", range[0]).attr(\"height\", range[1] - range[0]);\n          redrawY(gUpdate);\n        }\n        redraw(gUpdate);\n      });\n    }\n    brush.event = function(g) {\n      g.each(function() {\n        var event_ = event.of(this, arguments), extent1 = {\n          x: xExtent,\n          y: yExtent,\n          i: xExtentDomain,\n          j: yExtentDomain\n        }, extent0 = this.__chart__ || extent1;\n        this.__chart__ = extent1;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.brush\", function() {\n            xExtentDomain = extent0.i;\n            yExtentDomain = extent0.j;\n            xExtent = extent0.x;\n            yExtent = extent0.y;\n            event_({\n              type: \"brushstart\"\n            });\n          }).tween(\"brush:brush\", function() {\n            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);\n            xExtentDomain = yExtentDomain = null;\n            return function(t) {\n              xExtent = extent1.x = xi(t);\n              yExtent = extent1.y = yi(t);\n              event_({\n                type: \"brush\",\n                mode: \"resize\"\n              });\n            };\n          }).each(\"end.brush\", function() {\n            xExtentDomain = extent1.i;\n            yExtentDomain = extent1.j;\n            event_({\n              type: \"brush\",\n              mode: \"resize\"\n            });\n            event_({\n              type: \"brushend\"\n            });\n          });\n        } else {\n          event_({\n            type: \"brushstart\"\n          });\n          event_({\n            type: \"brush\",\n            mode: \"resize\"\n          });\n          event_({\n            type: \"brushend\"\n          });\n        }\n      });\n    };\n    function redraw(g) {\n      g.selectAll(\".resize\").attr(\"transform\", function(d) {\n        return \"translate(\" + xExtent[+/e$/.test(d)] + \",\" + yExtent[+/^s/.test(d)] + \")\";\n      });\n    }\n    function redrawX(g) {\n      g.select(\".extent\").attr(\"x\", xExtent[0]);\n      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", xExtent[1] - xExtent[0]);\n    }\n    function redrawY(g) {\n      g.select(\".extent\").attr(\"y\", yExtent[0]);\n      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", yExtent[1] - yExtent[0]);\n    }\n    function brushstart() {\n      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;\n      var w = d3.select(d3_window(target)).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);\n      if (d3.event.changedTouches) {\n        w.on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend);\n      } else {\n        w.on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend);\n      }\n      g.interrupt().selectAll(\"*\").interrupt();\n      if (dragging) {\n        origin[0] = xExtent[0] - origin[0];\n        origin[1] = yExtent[0] - origin[1];\n      } else if (resizing) {\n        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);\n        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];\n        origin[0] = xExtent[ex];\n        origin[1] = yExtent[ey];\n      } else if (d3.event.altKey) center = origin.slice();\n      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);\n      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));\n      event_({\n        type: \"brushstart\"\n      });\n      brushmove();\n      function keydown() {\n        if (d3.event.keyCode == 32) {\n          if (!dragging) {\n            center = null;\n            origin[0] -= xExtent[1];\n            origin[1] -= yExtent[1];\n            dragging = 2;\n          }\n          d3_eventPreventDefault();\n        }\n      }\n      function keyup() {\n        if (d3.event.keyCode == 32 && dragging == 2) {\n          origin[0] += xExtent[1];\n          origin[1] += yExtent[1];\n          dragging = 0;\n          d3_eventPreventDefault();\n        }\n      }\n      function brushmove() {\n        var point = d3.mouse(target), moved = false;\n        if (offset) {\n          point[0] += offset[0];\n          point[1] += offset[1];\n        }\n        if (!dragging) {\n          if (d3.event.altKey) {\n            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];\n            origin[0] = xExtent[+(point[0] < center[0])];\n            origin[1] = yExtent[+(point[1] < center[1])];\n          } else center = null;\n        }\n        if (resizingX && move1(point, x, 0)) {\n          redrawX(g);\n          moved = true;\n        }\n        if (resizingY && move1(point, y, 1)) {\n          redrawY(g);\n          moved = true;\n        }\n        if (moved) {\n          redraw(g);\n          event_({\n            type: \"brush\",\n            mode: dragging ? \"move\" : \"resize\"\n          });\n        }\n      }\n      function move1(point, scale, i) {\n        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n        if (dragging) {\n          r0 -= position;\n          r1 -= size + position;\n        }\n        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n        if (dragging) {\n          max = (min += position) + size;\n        } else {\n          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n          if (position < min) {\n            max = min;\n            min = position;\n          } else {\n            max = position;\n          }\n        }\n        if (extent[0] != min || extent[1] != max) {\n          if (i) yExtentDomain = null; else xExtentDomain = null;\n          extent[0] = min;\n          extent[1] = max;\n          return true;\n        }\n      }\n      function brushend() {\n        brushmove();\n        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);\n        d3.select(\"body\").style(\"cursor\", null);\n        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n        dragRestore();\n        event_({\n          type: \"brushend\"\n        });\n      }\n    }\n    brush.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.clamp = function(z) {\n      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;\n      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;\n      return brush;\n    };\n    brush.extent = function(z) {\n      var x0, x1, y0, y1, t;\n      if (!arguments.length) {\n        if (x) {\n          if (xExtentDomain) {\n            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n          } else {\n            x0 = xExtent[0], x1 = xExtent[1];\n            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n          }\n        }\n        if (y) {\n          if (yExtentDomain) {\n            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n          } else {\n            y0 = yExtent[0], y1 = yExtent[1];\n            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n          }\n        }\n        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];\n      }\n      if (x) {\n        x0 = z[0], x1 = z[1];\n        if (y) x0 = x0[0], x1 = x1[0];\n        xExtentDomain = [ x0, x1 ];\n        if (x.invert) x0 = x(x0), x1 = x(x1);\n        if (x1 < x0) t = x0, x0 = x1, x1 = t;\n        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];\n      }\n      if (y) {\n        y0 = z[0], y1 = z[1];\n        if (x) y0 = y0[1], y1 = y1[1];\n        yExtentDomain = [ y0, y1 ];\n        if (y.invert) y0 = y(y0), y1 = y(y1);\n        if (y1 < y0) t = y0, y0 = y1, y1 = t;\n        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];\n      }\n      return brush;\n    };\n    brush.clear = function() {\n      if (!brush.empty()) {\n        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];\n        xExtentDomain = yExtentDomain = null;\n      }\n      return brush;\n    };\n    brush.empty = function() {\n      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];\n    };\n    return d3.rebind(brush, event, \"on\");\n  };\n  var d3_svg_brushCursor = {\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];\n  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n  var d3_time_formatUtc = d3_time_format.utc;\n  var d3_time_formatIso = d3_time_formatUtc(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n  d3_time_format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n  function d3_time_formatIsoNative(date) {\n    return date.toISOString();\n  }\n  d3_time_formatIsoNative.parse = function(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  };\n  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n  d3_time.second = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 1e3) * 1e3);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n  }, function(date) {\n    return date.getSeconds();\n  });\n  d3_time.seconds = d3_time.second.range;\n  d3_time.seconds.utc = d3_time.second.utc.range;\n  d3_time.minute = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 6e4) * 6e4);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n  }, function(date) {\n    return date.getMinutes();\n  });\n  d3_time.minutes = d3_time.minute.range;\n  d3_time.minutes.utc = d3_time.minute.utc.range;\n  d3_time.hour = d3_time_interval(function(date) {\n    var timezone = date.getTimezoneOffset() / 60;\n    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n  }, function(date) {\n    return date.getHours();\n  });\n  d3_time.hours = d3_time.hour.range;\n  d3_time.hours.utc = d3_time.hour.utc.range;\n  d3_time.month = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setDate(1);\n    return date;\n  }, function(date, offset) {\n    date.setMonth(date.getMonth() + offset);\n  }, function(date) {\n    return date.getMonth();\n  });\n  d3_time.months = d3_time.month.range;\n  d3_time.months.utc = d3_time.month.utc.range;\n  function d3_time_scale(linear, methods, format) {\n    function scale(x) {\n      return linear(x);\n    }\n    scale.invert = function(x) {\n      return d3_time_scaleDate(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n      linear.domain(x);\n      return scale;\n    };\n    function tickMethod(extent, count) {\n      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);\n      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {\n        return d / 31536e6;\n      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n    }\n    scale.nice = function(interval, skip) {\n      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" && tickMethod(extent, interval);\n      if (method) interval = method[0], skip = method[1];\n      function skipped(date) {\n        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n      }\n      return scale.domain(d3_scale_nice(domain, skip > 1 ? {\n        floor: function(date) {\n          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);\n          return date;\n        },\n        ceil: function(date) {\n          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);\n          return date;\n        }\n      } : interval));\n    };\n    scale.ticks = function(interval, skip) {\n      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" ? tickMethod(extent, interval) : !interval.range && [ {\n        range: interval\n      }, skip ];\n      if (method) interval = method[0], skip = method[1];\n      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);\n    };\n    scale.tickFormat = function() {\n      return format;\n    };\n    scale.copy = function() {\n      return d3_time_scale(linear.copy(), methods, format);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_time_scaleDate(t) {\n    return new Date(t);\n  }\n  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \".%L\", function(d) {\n    return d.getMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getDay() && d.getDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  var d3_time_scaleMilliseconds = {\n    range: function(start, stop, step) {\n      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n    },\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  d3_time_scaleLocalMethods.year = d3_time.year;\n  d3_time.scale = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n  };\n  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {\n    return [ m[0].utc, m[1] ];\n  });\n  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \".%L\", function(d) {\n    return d.getUTCMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getUTCSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getUTCMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getUTCHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getUTCDay() && d.getUTCDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getUTCDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getUTCMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n  d3_time.scale.utc = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n  };\n  d3.text = d3_xhrType(function(request) {\n    return request.responseText;\n  });\n  d3.json = function(url, callback) {\n    return d3_xhr(url, \"application/json\", d3_json, callback);\n  };\n  function d3_json(request) {\n    return JSON.parse(request.responseText);\n  }\n  d3.html = function(url, callback) {\n    return d3_xhr(url, \"text/html\", d3_html, callback);\n  };\n  function d3_html(request) {\n    var range = d3_document.createRange();\n    range.selectNode(d3_document.body);\n    return range.createContextualFragment(request.responseText);\n  }\n  d3.xml = d3_xhrType(function(request) {\n    return request.responseXML;\n  });\n  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === \"object\" && module.exports) module.exports = d3; else this.d3 = d3;\n}();\n\n/***/ }),\n\n/***/ 292:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(293).crossfilter;\n\n\n/***/ }),\n\n/***/ 293:\n/***/ (function(module, exports) {\n\n(function(exports){\ncrossfilter.version = \"1.3.14\";\nfunction crossfilter_identity(d) {\n  return d;\n}\ncrossfilter.permute = permute;\n\nfunction permute(array, index) {\n  for (var i = 0, n = index.length, copy = new Array(n); i < n; ++i) {\n    copy[i] = array[index[i]];\n  }\n  return copy;\n}\nvar bisect = crossfilter.bisect = bisect_by(crossfilter_identity);\n\nbisect.by = bisect_by;\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\nvar heap = crossfilter.heap = heap_by(crossfilter_identity);\n\nheap.by = heap_by;\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\nvar heapselect = crossfilter.heapselect = heapselect_by(crossfilter_identity);\n\nheapselect.by = heapselect_by;\n\nfunction heapselect_by(f) {\n  var heap = heap_by(f);\n\n  // Returns a new array containing the top k elements in the array a[lo:hi].\n  // The returned array is not sorted, but maintains the heap property. If k is\n  // greater than hi - lo, then fewer than k elements will be returned. The\n  // order of elements in a is unchanged by this operation.\n  function heapselect(a, lo, hi, k) {\n    var queue = new Array(k = Math.min(hi - lo, k)),\n        min,\n        i,\n        x,\n        d;\n\n    for (i = 0; i < k; ++i) queue[i] = a[lo++];\n    heap(queue, 0, k);\n\n    if (lo < hi) {\n      min = f(queue[0]);\n      do {\n        if (x = f(d = a[lo]) > min) {\n          queue[0] = d;\n          min = f(heap(queue, 0, k)[0]);\n        }\n      } while (++lo < hi);\n    }\n\n    return queue;\n  }\n\n  return heapselect;\n}\nvar insertionsort = crossfilter.insertionsort = insertionsort_by(crossfilter_identity);\n\ninsertionsort.by = insertionsort_by;\n\nfunction insertionsort_by(f) {\n\n  function insertionsort(a, lo, hi) {\n    for (var i = lo + 1; i < hi; ++i) {\n      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n        a[j] = a[j - 1];\n      }\n      a[j] = t;\n    }\n    return a;\n  }\n\n  return insertionsort;\n}\n// Algorithm designed by Vladimir Yaroslavskiy.\n// Implementation based on the Dart project; see lib/dart/LICENSE for details.\n\nvar quicksort = crossfilter.quicksort = quicksort_by(crossfilter_identity);\n\nquicksort.by = quicksort_by;\n\nfunction quicksort_by(f) {\n  var insertionsort = insertionsort_by(f);\n\n  function sort(a, lo, hi) {\n    return (hi - lo < quicksort_sizeThreshold\n        ? insertionsort\n        : quicksort)(a, lo, hi);\n  }\n\n  function quicksort(a, lo, hi) {\n    // Compute the two pivots by looking at 5 elements.\n    var sixth = (hi - lo) / 6 | 0,\n        i1 = lo + sixth,\n        i5 = hi - 1 - sixth,\n        i3 = lo + hi - 1 >> 1,  // The midpoint.\n        i2 = i3 - sixth,\n        i4 = i3 + sixth;\n\n    var e1 = a[i1], x1 = f(e1),\n        e2 = a[i2], x2 = f(e2),\n        e3 = a[i3], x3 = f(e3),\n        e4 = a[i4], x4 = f(e4),\n        e5 = a[i5], x5 = f(e5);\n\n    var t;\n\n    // Sort the selected 5 elements using a sorting network.\n    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n    var pivot1 = e2, pivotValue1 = x2,\n        pivot2 = e4, pivotValue2 = x4;\n\n    // e2 and e4 have been saved in the pivot variables. They will be written\n    // back, once the partitioning is finished.\n    a[i1] = e1;\n    a[i2] = a[lo];\n    a[i3] = e3;\n    a[i4] = a[hi - 1];\n    a[i5] = e5;\n\n    var less = lo + 1,   // First element in the middle partition.\n        great = hi - 2;  // Last element in the middle partition.\n\n    // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n    // Object.prototype.valueOf; == and === do not, so in order to be consistent\n    // with natural order (such as for Date objects), we must do two compares.\n    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n    if (pivotsEqual) {\n\n      // Degenerated case where the partitioning becomes a dutch national flag\n      // problem.\n      //\n      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n      //  ^             ^          ^             ^            ^\n      // left         less         k           great         right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1) for x in ]left, less[ : x < pivot.\n      //   2) for x in [less, k[ : x == pivot.\n      //   3) for x in ]great, right[ : x > pivot.\n      for (var k = less; k <= great; ++k) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else if (xk > pivotValue1) {\n\n          // Find the first element <= pivot in the range [k - 1, great] and\n          // put [:ek:] there. We know that such an element must exist:\n          // When k == less, then el3 (which is equal to pivot) lies in the\n          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n          // Note that in the latter case invariant 2 will be violated for a\n          // short amount of time. The invariant will be restored when the\n          // pivots are put into their final positions.\n          while (true) {\n            var greatValue = f(a[great]);\n            if (greatValue > pivotValue1) {\n              great--;\n              // This is the only location in the while-loop where a new\n              // iteration is started.\n              continue;\n            } else if (greatValue < pivotValue1) {\n              // Triple exchange.\n              a[k] = a[less];\n              a[less++] = a[great];\n              a[great--] = ek;\n              break;\n            } else {\n              a[k] = a[great];\n              a[great--] = ek;\n              // Note: if great < k then we will exit the outer loop and fix\n              // invariant 2 (which we just violated).\n              break;\n            }\n          }\n        }\n      }\n    } else {\n\n      // We partition the list into three parts:\n      //  1. < pivot1\n      //  2. >= pivot1 && <= pivot2\n      //  3. > pivot2\n      //\n      // During the loop we have:\n      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n      //  ^            ^                        ^              ^             ^\n      // left         less                     k              great        right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1. for x in ]left, less[ : x < pivot1\n      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n      //   3. for x in ]great, right[ : x > pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else {\n          if (xk > pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] <= pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] >= pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Move pivots into their final positions.\n    // We shrunk the list from both sides (a[left] and a[right] have\n    // meaningless values in them) and now we move elements from the first\n    // and third partition into these locations so that we can store the\n    // pivots.\n    a[lo] = a[less - 1];\n    a[less - 1] = pivot1;\n    a[hi - 1] = a[great + 1];\n    a[great + 1] = pivot2;\n\n    // The list is now partitioned into three partitions:\n    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n    //  ^            ^                        ^             ^\n    // left         less                     great        right\n\n    // Recursive descent. (Don't include the pivot values.)\n    sort(a, lo, less - 1);\n    sort(a, great + 2, hi);\n\n    if (pivotsEqual) {\n      // All elements in the second partition are equal to the pivot. No\n      // need to sort them.\n      return a;\n    }\n\n    // In theory it should be enough to call _doSort recursively on the second\n    // partition.\n    // The Android source however removes the pivot elements from the recursive\n    // call if the second partition is too large (more than 2/3 of the list).\n    if (less < i1 && great > i5) {\n      var lessValue, greatValue;\n      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\n      while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\n\n      // Copy paste of the previous 3-way partitioning with adaptions.\n      //\n      // We partition the list into three parts:\n      //  1. == pivot1\n      //  2. > pivot1 && < pivot2\n      //  3. == pivot2\n      //\n      // During the loop we have:\n      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n      //              ^                      ^              ^\n      //            less                     k              great\n      //\n      // Invariants:\n      //   1. for x in [ *, less[ : x == pivot1\n      //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n      //   3. for x in ]great, * ] : x == pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk <= pivotValue1 && xk >= pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          less++;\n        } else {\n          if (xk <= pivotValue2 && xk >= pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] < pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] == pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // The second partition has now been cleared of pivot elements and looks\n    // as follows:\n    // [  *  |  > pivot1 && < pivot2  | * ]\n    //        ^                      ^\n    //       less                  great\n    // Sort the second partition using recursive descent.\n\n    // The second partition looks as follows:\n    // [  *  |  >= pivot1 && <= pivot2  | * ]\n    //        ^                        ^\n    //       less                    great\n    // Simply sort it by recursive descent.\n\n    return sort(a, less, great + 1);\n  }\n\n  return sort;\n}\n\nvar quicksort_sizeThreshold = 32;\nvar crossfilter_array8 = crossfilter_arrayUntyped,\n    crossfilter_array16 = crossfilter_arrayUntyped,\n    crossfilter_array32 = crossfilter_arrayUntyped,\n    crossfilter_arrayLengthen = crossfilter_arrayLengthenUntyped,\n    crossfilter_arrayWiden = crossfilter_arrayWidenUntyped;\n\nif (typeof Uint8Array !== \"undefined\") {\n  crossfilter_array8 = function(n) { return new Uint8Array(n); };\n  crossfilter_array16 = function(n) { return new Uint16Array(n); };\n  crossfilter_array32 = function(n) { return new Uint32Array(n); };\n\n  crossfilter_arrayLengthen = function(array, length) {\n    if (array.length >= length) return array;\n    var copy = new array.constructor(length);\n    copy.set(array);\n    return copy;\n  };\n\n  crossfilter_arrayWiden = function(array, width) {\n    var copy;\n    switch (width) {\n      case 16: copy = crossfilter_array16(array.length); break;\n      case 32: copy = crossfilter_array32(array.length); break;\n      default: throw new Error(\"invalid array width!\");\n    }\n    copy.set(array);\n    return copy;\n  };\n}\n\nfunction crossfilter_arrayUntyped(n) {\n  var array = new Array(n), i = -1;\n  while (++i < n) array[i] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayLengthenUntyped(array, length) {\n  var n = array.length;\n  while (n < length) array[n++] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayWidenUntyped(array, width) {\n  if (width > 32) throw new Error(\"invalid array width!\");\n  return array;\n}\nfunction crossfilter_filterExact(bisect, value) {\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n  };\n}\n\nfunction crossfilter_filterRange(bisect, range) {\n  var min = range[0],\n      max = range[1];\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n  };\n}\n\nfunction crossfilter_filterAll(values) {\n  return [0, values.length];\n}\nfunction crossfilter_null() {\n  return null;\n}\nfunction crossfilter_zero() {\n  return 0;\n}\nfunction crossfilter_reduceIncrement(p) {\n  return p + 1;\n}\n\nfunction crossfilter_reduceDecrement(p) {\n  return p - 1;\n}\n\nfunction crossfilter_reduceAdd(f) {\n  return function(p, v) {\n    return p + +f(v);\n  };\n}\n\nfunction crossfilter_reduceSubtract(f) {\n  return function(p, v) {\n    return p - f(v);\n  };\n}\nexports.crossfilter = crossfilter;\n\nfunction crossfilter() {\n  var crossfilter = {\n    add: add,\n    remove: removeData,\n    dimension: dimension,\n    groupAll: groupAll,\n    size: size\n  };\n\n  var data = [], // the records\n      n = 0, // the number of records; data.length\n      m = 0, // a bit mask representing which dimensions are in use\n      M = 8, // number of dimensions that can fit in `filters`\n      filters = crossfilter_array8(0), // M bits per record; 1 is filtered out\n      filterListeners = [], // when the filters change\n      dataListeners = [], // when data is added\n      removeDataListeners = []; // when data is removed\n\n  // Adds the specified new records to this crossfilter.\n  function add(newData) {\n    var n0 = n,\n        n1 = newData.length;\n\n    // If there's actually new data to add…\n    // Merge the new data into the existing data.\n    // Lengthen the filter bitset to handle the new records.\n    // Notify listeners (dimensions and groups) that new data is available.\n    if (n1) {\n      data = data.concat(newData);\n      filters = crossfilter_arrayLengthen(filters, n += n1);\n      dataListeners.forEach(function(l) { l(newData, n0, n1); });\n    }\n\n    return crossfilter;\n  }\n\n  // Removes all records that match the current filters.\n  function removeData() {\n    var newIndex = crossfilter_index(n, n),\n        removed = [];\n    for (var i = 0, j = 0; i < n; ++i) {\n      if (filters[i]) newIndex[i] = j++;\n      else removed.push(i);\n    }\n\n    // Remove all matching records from groups.\n    filterListeners.forEach(function(l) { l(0, [], removed); });\n\n    // Update indexes.\n    removeDataListeners.forEach(function(l) { l(newIndex); });\n\n    // Remove old filters and data by overwriting.\n    for (var i = 0, j = 0, k; i < n; ++i) {\n      if (k = filters[i]) {\n        if (i !== j) filters[j] = k, data[j] = data[i];\n        ++j;\n      }\n    }\n    data.length = j;\n    while (n > j) filters[--n] = 0;\n  }\n\n  // Adds a new dimension with the specified value accessor function.\n  function dimension(value) {\n    var dimension = {\n      filter: filter,\n      filterExact: filterExact,\n      filterRange: filterRange,\n      filterFunction: filterFunction,\n      filterAll: filterAll,\n      top: top,\n      bottom: bottom,\n      group: group,\n      groupAll: groupAll,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var one = ~m & -~m, // lowest unset bit as mask, e.g., 00001000\n        zero = ~one, // inverted one, e.g., 11110111\n        values, // sorted, cached array\n        index, // value rank ↦ object id\n        newValues, // temporary array storing newly-added values\n        newIndex, // temporary array storing newly-added index\n        sort = quicksort_by(function(i) { return newValues[i]; }),\n        refilter = crossfilter_filterAll, // for recomputing filter\n        refilterFunction, // the custom filter function in use\n        indexListeners = [], // when data is added\n        dimensionGroups = [],\n        lo0 = 0,\n        hi0 = 0;\n\n    // Updating a dimension is a two-stage process. First, we must update the\n    // associated filters for the newly-added records. Once all dimensions have\n    // updated their filters, the groups are notified to update.\n    dataListeners.unshift(preAdd);\n    dataListeners.push(postAdd);\n\n    removeDataListeners.push(removeData);\n\n    // Incorporate any existing data into this dimension, and make sure that the\n    // filter bitset is wide enough to handle the new dimension.\n    m |= one;\n    if (M >= 32 ? !one : m & -(1 << M)) {\n      filters = crossfilter_arrayWiden(filters, M <<= 1);\n    }\n    preAdd(data, 0, n);\n    postAdd(data, 0, n);\n\n    // Incorporates the specified new records into this dimension.\n    // This function is responsible for updating filters, values, and index.\n    function preAdd(newData, n0, n1) {\n\n      // Permute new values into natural order using a sorted index.\n      newValues = newData.map(value);\n      newIndex = sort(crossfilter_range(n1), 0, n1);\n      newValues = permute(newValues, newIndex);\n\n      // Bisect newValues to determine which new records are selected.\n      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1], i;\n      if (refilterFunction) {\n        for (i = 0; i < n1; ++i) {\n          if (!refilterFunction(newValues[i], i)) filters[newIndex[i] + n0] |= one;\n        }\n      } else {\n        for (i = 0; i < lo1; ++i) filters[newIndex[i] + n0] |= one;\n        for (i = hi1; i < n1; ++i) filters[newIndex[i] + n0] |= one;\n      }\n\n      // If this dimension previously had no data, then we don't need to do the\n      // more expensive merge operation; use the new values and index as-is.\n      if (!n0) {\n        values = newValues;\n        index = newIndex;\n        lo0 = lo1;\n        hi0 = hi1;\n        return;\n      }\n\n      var oldValues = values,\n          oldIndex = index,\n          i0 = 0,\n          i1 = 0;\n\n      // Otherwise, create new arrays into which to merge new and old.\n      values = new Array(n);\n      index = crossfilter_index(n, n);\n\n      // Merge the old and new sorted values, and old and new index.\n      for (i = 0; i0 < n0 && i1 < n1; ++i) {\n        if (oldValues[i0] < newValues[i1]) {\n          values[i] = oldValues[i0];\n          index[i] = oldIndex[i0++];\n        } else {\n          values[i] = newValues[i1];\n          index[i] = newIndex[i1++] + n0;\n        }\n      }\n\n      // Add any remaining old values.\n      for (; i0 < n0; ++i0, ++i) {\n        values[i] = oldValues[i0];\n        index[i] = oldIndex[i0];\n      }\n\n      // Add any remaining new values.\n      for (; i1 < n1; ++i1, ++i) {\n        values[i] = newValues[i1];\n        index[i] = newIndex[i1] + n0;\n      }\n\n      // Bisect again to recompute lo0 and hi0.\n      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // When all filters have updated, notify index listeners of the new values.\n    function postAdd(newData, n0, n1) {\n      indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\n      newValues = newIndex = null;\n    }\n\n    function removeData(reIndex) {\n      for (var i = 0, j = 0, k; i < n; ++i) {\n        if (filters[k = index[i]]) {\n          if (i !== j) values[j] = values[i];\n          index[j] = reIndex[k];\n          ++j;\n        }\n      }\n      values.length = j;\n      while (j < n) index[j++] = 0;\n\n      // Bisect again to recompute lo0 and hi0.\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // Updates the selected values based on the specified bounds [lo, hi].\n    // This implementation is used by all the public filter methods.\n    function filterIndexBounds(bounds) {\n      var lo1 = bounds[0],\n          hi1 = bounds[1];\n\n      if (refilterFunction) {\n        refilterFunction = null;\n        filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; });\n        lo0 = lo1;\n        hi0 = hi1;\n        return dimension;\n      }\n\n      var i,\n          j,\n          k,\n          added = [],\n          removed = [];\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      lo0 = lo1;\n      hi0 = hi1;\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n      return dimension;\n    }\n\n    // Filters this dimension using the specified range, value, or null.\n    // If the range is null, this is equivalent to filterAll.\n    // If the range is an array, this is equivalent to filterRange.\n    // Otherwise, this is equivalent to filterExact.\n    function filter(range) {\n      return range == null\n          ? filterAll() : Array.isArray(range)\n          ? filterRange(range) : typeof range === \"function\"\n          ? filterFunction(range)\n          : filterExact(range);\n    }\n\n    // Filters this dimension to select the exact value.\n    function filterExact(value) {\n      return filterIndexBounds((refilter = crossfilter_filterExact(bisect, value))(values));\n    }\n\n    // Filters this dimension to select the specified range [lo, hi].\n    // The lower bound is inclusive, and the upper bound is exclusive.\n    function filterRange(range) {\n      return filterIndexBounds((refilter = crossfilter_filterRange(bisect, range))(values));\n    }\n\n    // Clears any filters on this dimension.\n    function filterAll() {\n      return filterIndexBounds((refilter = crossfilter_filterAll)(values));\n    }\n\n    // Filters this dimension using an arbitrary function.\n    function filterFunction(f) {\n      refilter = crossfilter_filterAll;\n\n      filterIndexFunction(refilterFunction = f);\n\n      lo0 = 0;\n      hi0 = n;\n\n      return dimension;\n    }\n\n    function filterIndexFunction(f) {\n      var i,\n          k,\n          x,\n          added = [],\n          removed = [];\n\n      for (i = 0; i < n; ++i) {\n        if (!(filters[k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n          if (x) filters[k] &= zero, added.push(k);\n          else filters[k] |= one, removed.push(k);\n        }\n      }\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n    }\n\n    // Returns the top K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function top(k) {\n      var array = [],\n          i = hi0,\n          j;\n\n      while (--i >= lo0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n      }\n\n      return array;\n    }\n\n    // Returns the bottom K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function bottom(k) {\n      var array = [],\n          i = lo0,\n          j;\n\n      while (i < hi0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n        i++;\n      }\n\n      return array;\n    }\n\n    // Adds a new group to this dimension, using the specified key function.\n    function group(key) {\n      var group = {\n        top: top,\n        all: all,\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        order: order,\n        orderNatural: orderNatural,\n        size: size,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      // Ensure that this group will be removed when the dimension is removed.\n      dimensionGroups.push(group);\n\n      var groups, // array of {key, value}\n          groupIndex, // object id ↦ group id\n          groupWidth = 8,\n          groupCapacity = crossfilter_capacity(groupWidth),\n          k = 0, // cardinality\n          select,\n          heap,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          update = crossfilter_null,\n          reset = crossfilter_null,\n          resetNeeded = true,\n          groupAll = key === crossfilter_null;\n\n      if (arguments.length < 1) key = crossfilter_identity;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the associated reduce values. It must also listen to\n      // the parent dimension for when data is added, and compute new keys.\n      filterListeners.push(update);\n      indexListeners.push(add);\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into the grouping.\n      add(values, index, 0, n);\n\n      // Incorporates the specified new values into this group.\n      // This function is responsible for updating groups and groupIndex.\n      function add(newValues, newIndex, n0, n1) {\n        var oldGroups = groups,\n            reIndex = crossfilter_index(k, groupCapacity),\n            add = reduceAdd,\n            initial = reduceInitial,\n            k0 = k, // old cardinality\n            i0 = 0, // index of old group\n            i1 = 0, // index of new record\n            j, // object id\n            g0, // old group\n            x0, // old key\n            x1, // new key\n            g, // group to add\n            x; // key of group to add\n\n        // If a reset is needed, we don't need to update the reduce values.\n        if (resetNeeded) add = initial = crossfilter_null;\n\n        // Reset the new groups (k is a lower bound).\n        // Also, make sure that groupIndex exists and is long enough.\n        groups = new Array(k), k = 0;\n        groupIndex = k0 > 1 ? crossfilter_arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n\n        // Get the first old key (x0 of g0), if it exists.\n        if (k0) x0 = (g0 = oldGroups[0]).key;\n\n        // Find the first new key (x1), skipping NaN keys.\n        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\n\n        // While new keys remain…\n        while (i1 < n1) {\n\n          // Determine the lesser of the two current keys; new and old.\n          // If there are no old keys remaining, then always add the new key.\n          if (g0 && x0 <= x1) {\n            g = g0, x = x0;\n\n            // Record the new index of the old group.\n            reIndex[i0] = k;\n\n            // Retrieve the next old key.\n            if (g0 = oldGroups[++i0]) x0 = g0.key;\n          } else {\n            g = {key: x1, value: initial()}, x = x1;\n          }\n\n          // Add the lesser group.\n          groups[k] = g;\n\n          // Add any selected records belonging to the added group, while\n          // advancing the new key and populating the associated group index.\n          while (!(x1 > x)) {\n            groupIndex[j = newIndex[i1] + n0] = k;\n            if (!(filters[j] & zero)) g.value = add(g.value, data[j]);\n            if (++i1 >= n1) break;\n            x1 = key(newValues[i1]);\n          }\n\n          groupIncrement();\n        }\n\n        // Add any remaining old groups that were greater than all new keys.\n        // No incremental reduce is needed; these groups have no new records.\n        // Also record the new index of the old group.\n        while (i0 < k0) {\n          groups[reIndex[i0] = k] = oldGroups[i0++];\n          groupIncrement();\n        }\n\n        // If we added any new groups before any old groups,\n        // update the group index of all the old records.\n        if (k > i0) for (i0 = 0; i0 < n0; ++i0) {\n          groupIndex[i0] = reIndex[groupIndex[i0]];\n        }\n\n        // Modify the update and reset behavior based on the cardinality.\n        // If the cardinality is less than or equal to one, then the groupIndex\n        // is not needed. If the cardinality is zero, then there are no records\n        // and therefore no groups to update or reset. Note that we also must\n        // change the registered listener to point to the new method.\n        j = filterListeners.indexOf(update);\n        if (k > 1) {\n          update = updateMany;\n          reset = resetMany;\n        } else {\n          if (!k && groupAll) {\n            k = 1;\n            groups = [{key: null, value: initial()}];\n          }\n          if (k === 1) {\n            update = updateOne;\n            reset = resetOne;\n          } else {\n            update = crossfilter_null;\n            reset = crossfilter_null;\n          }\n          groupIndex = null;\n        }\n        filterListeners[j] = update;\n\n        // Count the number of added groups,\n        // and widen the group index as needed.\n        function groupIncrement() {\n          if (++k === groupCapacity) {\n            reIndex = crossfilter_arrayWiden(reIndex, groupWidth <<= 1);\n            groupIndex = crossfilter_arrayWiden(groupIndex, groupWidth);\n            groupCapacity = crossfilter_capacity(groupWidth);\n          }\n        }\n      }\n\n      function removeData() {\n        if (k > 1) {\n          var oldK = k,\n              oldGroups = groups,\n              seenGroups = crossfilter_index(oldK, oldK);\n\n          // Filter out non-matches by copying matching group index entries to\n          // the beginning of the array.\n          for (var i = 0, j = 0; i < n; ++i) {\n            if (filters[i]) {\n              seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n              ++j;\n            }\n          }\n\n          // Reassemble groups including only those groups that were referred\n          // to by matching group index entries.  Note the new group index in\n          // seenGroups.\n          groups = [], k = 0;\n          for (i = 0; i < oldK; ++i) {\n            if (seenGroups[i]) {\n              seenGroups[i] = k++;\n              groups.push(oldGroups[i]);\n            }\n          }\n\n          if (k > 1) {\n            // Reindex the group index using seenGroups to find the new index.\n            for (var i = 0; i < j; ++i) groupIndex[i] = seenGroups[groupIndex[i]];\n          } else {\n            groupIndex = null;\n          }\n          filterListeners[filterListeners.indexOf(update)] = k > 1\n              ? (reset = resetMany, update = updateMany)\n              : k === 1 ? (reset = resetOne, update = updateOne)\n              : reset = update = crossfilter_null;\n        } else if (k === 1) {\n          if (groupAll) return;\n          for (var i = 0; i < n; ++i) if (filters[i]) return;\n          groups = [], k = 0;\n          filterListeners[filterListeners.indexOf(update)] =\n          update = reset = crossfilter_null;\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is greater than 1.\n      function updateMany(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g;\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g = groups[groupIndex[k]];\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is 1.\n      function updateOne(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g = groups[0];\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is greater than 1.\n      function resetMany() {\n        var i,\n            g;\n\n        // Reset all group values.\n        for (i = 0; i < k; ++i) {\n          groups[i].value = reduceInitial();\n        }\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g = groups[groupIndex[i]];\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is 1.\n      function resetOne() {\n        var i,\n            g = groups[0];\n\n        // Reset the singleton group values.\n        g.value = reduceInitial();\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Returns the array of group values, in the dimension's natural order.\n      function all() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return groups;\n      }\n\n      // Returns a new array containing the top K group values, in reduce order.\n      function top(k) {\n        var top = select(all(), 0, groups.length, k);\n        return heap.sort(top, 0, top.length);\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce values, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Sets the reduce order, using the specified accessor.\n      function order(value) {\n        select = heapselect_by(valueOf);\n        heap = heap_by(valueOf);\n        function valueOf(d) { return value(d.value); }\n        return group;\n      }\n\n      // A convenience method for natural ordering by reduce value.\n      function orderNatural() {\n        return order(crossfilter_identity);\n      }\n\n      // Returns the cardinality of this group, irrespective of any filters.\n      function size() {\n        return k;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i, 1);\n        i = indexListeners.indexOf(add);\n        if (i >= 0) indexListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        return group;\n      }\n\n      return reduceCount().orderNatural();\n    }\n\n    // A convenience function for generating a singleton group.\n    function groupAll() {\n      var g = group(crossfilter_null), all = g.all;\n      delete g.all;\n      delete g.top;\n      delete g.order;\n      delete g.orderNatural;\n      delete g.size;\n      g.value = function() { return all()[0].value; };\n      return g;\n    }\n\n    // Removes this dimension and associated groups and event listeners.\n    function dispose() {\n      dimensionGroups.forEach(function(group) { group.dispose(); });\n      var i = dataListeners.indexOf(preAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = dataListeners.indexOf(postAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = removeDataListeners.indexOf(removeData);\n      if (i >= 0) removeDataListeners.splice(i, 1);\n      m &= zero;\n      return filterAll();\n    }\n\n    return dimension;\n  }\n\n  // A convenience method for groupAll on a dummy dimension.\n  // This implementation can be optimized since it always has cardinality 1.\n  function groupAll() {\n    var group = {\n      reduce: reduce,\n      reduceCount: reduceCount,\n      reduceSum: reduceSum,\n      value: value,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var reduceValue,\n        reduceAdd,\n        reduceRemove,\n        reduceInitial,\n        resetNeeded = true;\n\n    // The group listens to the crossfilter for when any dimension changes, so\n    // that it can update the reduce value. It must also listen to the parent\n    // dimension for when data is added.\n    filterListeners.push(update);\n    dataListeners.push(add);\n\n    // For consistency; actually a no-op since resetNeeded is true.\n    add(data, 0, n);\n\n    // Incorporates the specified new values into this group.\n    function add(newData, n0) {\n      var i;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = n0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Reduces the specified selected or deselected records.\n    function update(filterOne, added, removed) {\n      var i,\n          k,\n          n;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = 0, n = added.length; i < n; ++i) {\n        if (!filters[k = added[i]]) {\n          reduceValue = reduceAdd(reduceValue, data[k]);\n        }\n      }\n\n      // Remove the removed values.\n      for (i = 0, n = removed.length; i < n; ++i) {\n        if (filters[k = removed[i]] === filterOne) {\n          reduceValue = reduceRemove(reduceValue, data[k]);\n        }\n      }\n    }\n\n    // Recomputes the group reduce value from scratch.\n    function reset() {\n      var i;\n\n      reduceValue = reduceInitial();\n\n      for (i = 0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Sets the reduce behavior for this group to use the specified functions.\n    // This method lazily recomputes the reduce value, waiting until needed.\n    function reduce(add, remove, initial) {\n      reduceAdd = add;\n      reduceRemove = remove;\n      reduceInitial = initial;\n      resetNeeded = true;\n      return group;\n    }\n\n    // A convenience method for reducing by count.\n    function reduceCount() {\n      return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n    }\n\n    // A convenience method for reducing by sum(value).\n    function reduceSum(value) {\n      return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n    }\n\n    // Returns the computed reduce value.\n    function value() {\n      if (resetNeeded) reset(), resetNeeded = false;\n      return reduceValue;\n    }\n\n    // Removes this group and associated event listeners.\n    function dispose() {\n      var i = filterListeners.indexOf(update);\n      if (i >= 0) filterListeners.splice(i);\n      i = dataListeners.indexOf(add);\n      if (i >= 0) dataListeners.splice(i);\n      return group;\n    }\n\n    return reduceCount();\n  }\n\n  // Returns the number of records in this crossfilter, irrespective of any filters.\n  function size() {\n    return n;\n  }\n\n  return arguments.length\n      ? add(arguments[0])\n      : crossfilter;\n}\n\n// Returns an array of size n, big enough to store ids up to m.\nfunction crossfilter_index(n, m) {\n  return (m < 0x101\n      ? crossfilter_array8 : m < 0x10001\n      ? crossfilter_array16\n      : crossfilter_array32)(n);\n}\n\n// Constructs a new array of size n, with sequential values from 0 to n - 1.\nfunction crossfilter_range(n) {\n  var range = crossfilter_index(n, n);\n  for (var i = -1; ++i < n;) range[i] = i;\n  return range;\n}\n\nfunction crossfilter_capacity(w) {\n  return w === 8\n      ? 0x100 : w === 16\n      ? 0x10000\n      : 0x100000000;\n}\n})(typeof exports !== 'undefined' && exports || this);\n\n\n/***/ }),\n\n/***/ 294:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(295);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = __webpack_require__(264)(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../css-loader/index.js??ref--1-oneOf-2-2!../postcss-loader/lib/index.js??postcss!./dc.css\", function() {\n\t\t\tvar newContent = require(\"!!../css-loader/index.js??ref--1-oneOf-2-2!../postcss-loader/lib/index.js??postcss!./dc.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n/***/ }),\n\n/***/ 295:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(263)(true);\n// imports\n\n\n// module\nexports.push([module.i, \".dc-chart path.dc-symbol,.dc-legend g.dc-legend-item.fadeout{fill-opacity:.5;stroke-opacity:.5}div.dc-chart{float:left}.dc-chart rect.bar{stroke:none;cursor:pointer}.dc-chart rect.bar:hover{fill-opacity:.5}.dc-chart rect.deselected{stroke:none;fill:#ccc}.dc-chart .pie-slice{fill:#fff;font-size:12px;cursor:pointer}.dc-chart .pie-slice.external{fill:#000}.dc-chart .pie-slice.highlight,.dc-chart .pie-slice :hover{fill-opacity:.8}.dc-chart .pie-path{fill:none;stroke-width:2px;stroke:#000;opacity:.4}.dc-chart .selected circle,.dc-chart .selected path{stroke-width:3;stroke:#ccc;fill-opacity:1}.dc-chart .deselected circle,.dc-chart .deselected path{stroke:none;fill-opacity:.5;fill:#ccc}.dc-chart .axis line,.dc-chart .axis path{fill:none;stroke:#000;shape-rendering:crispEdges}.dc-chart .axis text{font:10px sans-serif}.dc-chart .axis .grid-line,.dc-chart .axis .grid-line line,.dc-chart .grid-line,.dc-chart .grid-line line{fill:none;stroke:#ccc;opacity:.5;shape-rendering:crispEdges}.dc-chart .brush rect.background{z-index:-999}.dc-chart .brush rect.extent{fill:#4682b4;fill-opacity:.125}.dc-chart .brush .resize path{fill:#eee;stroke:#666}.dc-chart path.line{fill:none;stroke-width:1.5px}.dc-chart path.area{fill-opacity:.3;stroke:none}.dc-chart path.highlight{stroke-width:3;fill-opacity:1;stroke-opacity:1}.dc-chart g.state{cursor:pointer}.dc-chart g.state :hover{fill-opacity:.8}.dc-chart g.state path{stroke:#fff}.dc-chart g.deselected path{fill:gray}.dc-chart g.deselected text{display:none}.dc-chart g.row rect{fill-opacity:.8;cursor:pointer}.dc-chart g.row rect:hover{fill-opacity:.6}.dc-chart g.row text{fill:#fff;font-size:12px;cursor:pointer}.dc-chart g.dc-tooltip path{fill:none;stroke:gray;stroke-opacity:.8}.dc-chart g.county path{stroke:#fff;fill:none}.dc-chart g.debug rect{fill:#00f;fill-opacity:.2}.dc-chart g.axis text{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none}.dc-chart .node{font-size:.7em;cursor:pointer}.dc-chart .node :hover{fill-opacity:.8}.dc-chart .bubble{stroke:none;fill-opacity:.6}.dc-chart .highlight{fill-opacity:1;stroke-opacity:1}.dc-chart .fadeout{fill-opacity:.2;stroke-opacity:.2}.dc-chart .box text{font:10px sans-serif;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none}.dc-chart .box circle,.dc-chart .box line{fill:#fff}.dc-chart .box circle,.dc-chart .box line,.dc-chart .box rect{stroke:#000;stroke-width:1.5px}.dc-chart .box .center{stroke-dasharray:3,3}.dc-chart .box .outlier{fill:none;stroke:#ccc}.dc-chart .box.deselected{opacity:.5}.dc-chart .box.deselected .box{fill:#ccc}.dc-chart .symbol{stroke:none}.dc-chart .heatmap .box-group.deselected rect{stroke:none;fill-opacity:.5;fill:#ccc}.dc-chart .heatmap g.axis text{pointer-events:all;cursor:pointer}.dc-chart .empty-chart .pie-slice{cursor:default}.dc-chart .empty-chart .pie-slice path{fill:#fee;cursor:default}.dc-chart circle.dot{stroke:none}.dc-data-count{float:right;margin-top:15px;margin-right:15px}.dc-data-count .filter-count,.dc-data-count .total-count{color:#3182bd;font-weight:700}.dc-legend{font-size:11px}.dc-legend .dc-legend-item{cursor:pointer}.dc-hard .number-display{float:none}\", \"\", {\"version\":3,\"sources\":[\"D:/projects/personal-blog/node_modules/dc/dc.css\"],\"names\":[],\"mappings\":\"AAAA,6DACE,gBAAkB,AAClB,iBAAoB,CAAE,AAExB,aACE,UAAY,CAAE,AAEhB,mBACE,YAAa,AACb,cAAgB,CAAE,AAClB,yBACE,eAAiB,CAAE,AAEvB,0BACE,YAAa,AACb,SAAW,CAAE,AAEf,qBACE,UAAW,AACX,eAAgB,AAChB,cAAgB,CAAE,AAClB,8BACE,SAAW,CAAE,AACf,2DACE,eAAiB,CAAE,AAEvB,oBACE,UAAW,AACX,iBAAkB,AAClB,YAAa,AACb,UAAa,CAAE,AAEjB,oDACE,eAAgB,AAChB,YAAa,AACb,cAAgB,CAAE,AAEpB,wDACE,YAAa,AACb,gBAAiB,AACjB,SAAW,CAAE,AAEf,0CACE,UAAW,AACX,YAAa,AACb,0BAA4B,CAAE,AAEhC,qBACE,oBAAsB,CAAE,AAE1B,0GACE,UAAW,AACX,YAAa,AACb,WAAY,AACZ,0BAA4B,CAAE,AAEhC,iCACE,YAAc,CAAE,AAElB,6BACE,aAAc,AACd,iBAAmB,CAAE,AAEvB,8BACE,UAAW,AACX,WAAa,CAAE,AAEjB,oBACE,UAAW,AACX,kBAAoB,CAAE,AAExB,oBACE,gBAAiB,AACjB,WAAa,CAAE,AAEjB,yBACE,eAAgB,AAChB,eAAgB,AAChB,gBAAkB,CAAE,AAEtB,kBACE,cAAgB,CAAE,AAClB,yBACE,eAAiB,CAAE,AACrB,uBACE,WAAa,CAAE,AAEnB,4BACE,SAAc,CAAE,AAElB,4BACE,YAAc,CAAE,AAElB,qBACE,gBAAkB,AAClB,cAAgB,CAAE,AAClB,2BACE,eAAkB,CAAE,AAExB,qBACE,UAAW,AACX,eAAgB,AAChB,cAAgB,CAAE,AAEpB,4BACE,UAAW,AACX,YAAgB,AAChB,iBAAmB,CAAE,AAEvB,wBACE,YAAa,AACb,SAAW,CAAE,AAEf,uBACE,UAAW,AACX,eAAiB,CAAE,AAErB,sBACE,2BAA4B,AAC5B,yBAA0B,AAC1B,sBAAuB,AACvB,qBAAsB,AACtB,iBAAkB,AAClB,mBAAqB,CAAE,AAEzB,gBACE,eAAiB,AACjB,cAAgB,CAAE,AAClB,uBACE,eAAiB,CAAE,AAEvB,kBACE,YAAa,AACb,eAAkB,CAAE,AAEtB,qBACE,eAAgB,AAChB,gBAAkB,CAAE,AAEtB,mBACE,gBAAkB,AAClB,iBAAoB,CAAE,AAExB,oBACE,qBAAsB,AACtB,2BAA4B,AAC5B,yBAA0B,AAC1B,sBAAuB,AACvB,qBAAsB,AACtB,iBAAkB,AAClB,mBAAqB,CAAE,AAEzB,0CACE,SAAW,CAAE,AAEf,8DACE,YAAa,AACb,kBAAoB,CAAE,AAExB,uBACE,oBAAuB,CAAE,AAE3B,wBACE,UAAW,AACX,WAAa,CAAE,AAEjB,0BACE,UAAa,CAAE,AACf,+BACE,SAAW,CAAE,AAEjB,kBACE,WAAa,CAAE,AAEjB,8CACE,YAAa,AACb,gBAAkB,AAClB,SAAW,CAAE,AAEf,+BACE,mBAAoB,AACpB,cAAgB,CAAE,AAEpB,kCACE,cAAgB,CAAE,AAClB,uCACE,UAAW,AACX,cAAgB,CAAE,AAEtB,qBACE,WAAa,CAAE,AAEjB,eACE,YAAa,AACb,gBAAiB,AACjB,iBAAmB,CAAE,AACrB,yDACE,cAAe,AACf,eAAkB,CAAE,AAExB,WACE,cAAgB,CAAE,AAClB,2BACE,cAAgB,CAAE,AAEtB,yBACE,UAAY,CAAE\",\"file\":\"dc.css\",\"sourcesContent\":[\".dc-chart path.dc-symbol, .dc-legend g.dc-legend-item.fadeout {\\n  fill-opacity: 0.5;\\n  stroke-opacity: 0.5; }\\n\\ndiv.dc-chart {\\n  float: left; }\\n\\n.dc-chart rect.bar {\\n  stroke: none;\\n  cursor: pointer; }\\n  .dc-chart rect.bar:hover {\\n    fill-opacity: .5; }\\n\\n.dc-chart rect.deselected {\\n  stroke: none;\\n  fill: #ccc; }\\n\\n.dc-chart .pie-slice {\\n  fill: #fff;\\n  font-size: 12px;\\n  cursor: pointer; }\\n  .dc-chart .pie-slice.external {\\n    fill: #000; }\\n  .dc-chart .pie-slice :hover, .dc-chart .pie-slice.highlight {\\n    fill-opacity: .8; }\\n\\n.dc-chart .pie-path {\\n  fill: none;\\n  stroke-width: 2px;\\n  stroke: #000;\\n  opacity: 0.4; }\\n\\n.dc-chart .selected path, .dc-chart .selected circle {\\n  stroke-width: 3;\\n  stroke: #ccc;\\n  fill-opacity: 1; }\\n\\n.dc-chart .deselected path, .dc-chart .deselected circle {\\n  stroke: none;\\n  fill-opacity: .5;\\n  fill: #ccc; }\\n\\n.dc-chart .axis path, .dc-chart .axis line {\\n  fill: none;\\n  stroke: #000;\\n  shape-rendering: crispEdges; }\\n\\n.dc-chart .axis text {\\n  font: 10px sans-serif; }\\n\\n.dc-chart .grid-line, .dc-chart .axis .grid-line, .dc-chart .grid-line line, .dc-chart .axis .grid-line line {\\n  fill: none;\\n  stroke: #ccc;\\n  opacity: .5;\\n  shape-rendering: crispEdges; }\\n\\n.dc-chart .brush rect.background {\\n  z-index: -999; }\\n\\n.dc-chart .brush rect.extent {\\n  fill: #4682b4;\\n  fill-opacity: .125; }\\n\\n.dc-chart .brush .resize path {\\n  fill: #eee;\\n  stroke: #666; }\\n\\n.dc-chart path.line {\\n  fill: none;\\n  stroke-width: 1.5px; }\\n\\n.dc-chart path.area {\\n  fill-opacity: .3;\\n  stroke: none; }\\n\\n.dc-chart path.highlight {\\n  stroke-width: 3;\\n  fill-opacity: 1;\\n  stroke-opacity: 1; }\\n\\n.dc-chart g.state {\\n  cursor: pointer; }\\n  .dc-chart g.state :hover {\\n    fill-opacity: .8; }\\n  .dc-chart g.state path {\\n    stroke: #fff; }\\n\\n.dc-chart g.deselected path {\\n  fill: #808080; }\\n\\n.dc-chart g.deselected text {\\n  display: none; }\\n\\n.dc-chart g.row rect {\\n  fill-opacity: 0.8;\\n  cursor: pointer; }\\n  .dc-chart g.row rect:hover {\\n    fill-opacity: 0.6; }\\n\\n.dc-chart g.row text {\\n  fill: #fff;\\n  font-size: 12px;\\n  cursor: pointer; }\\n\\n.dc-chart g.dc-tooltip path {\\n  fill: none;\\n  stroke: #808080;\\n  stroke-opacity: .8; }\\n\\n.dc-chart g.county path {\\n  stroke: #fff;\\n  fill: none; }\\n\\n.dc-chart g.debug rect {\\n  fill: #00f;\\n  fill-opacity: .2; }\\n\\n.dc-chart g.axis text {\\n  -webkit-touch-callout: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n  pointer-events: none; }\\n\\n.dc-chart .node {\\n  font-size: 0.7em;\\n  cursor: pointer; }\\n  .dc-chart .node :hover {\\n    fill-opacity: .8; }\\n\\n.dc-chart .bubble {\\n  stroke: none;\\n  fill-opacity: 0.6; }\\n\\n.dc-chart .highlight {\\n  fill-opacity: 1;\\n  stroke-opacity: 1; }\\n\\n.dc-chart .fadeout {\\n  fill-opacity: 0.2;\\n  stroke-opacity: 0.2; }\\n\\n.dc-chart .box text {\\n  font: 10px sans-serif;\\n  -webkit-touch-callout: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n  pointer-events: none; }\\n\\n.dc-chart .box line, .dc-chart .box circle {\\n  fill: #fff; }\\n\\n.dc-chart .box rect, .dc-chart .box line, .dc-chart .box circle {\\n  stroke: #000;\\n  stroke-width: 1.5px; }\\n\\n.dc-chart .box .center {\\n  stroke-dasharray: 3, 3; }\\n\\n.dc-chart .box .outlier {\\n  fill: none;\\n  stroke: #ccc; }\\n\\n.dc-chart .box.deselected {\\n  opacity: 0.5; }\\n  .dc-chart .box.deselected .box {\\n    fill: #ccc; }\\n\\n.dc-chart .symbol {\\n  stroke: none; }\\n\\n.dc-chart .heatmap .box-group.deselected rect {\\n  stroke: none;\\n  fill-opacity: 0.5;\\n  fill: #ccc; }\\n\\n.dc-chart .heatmap g.axis text {\\n  pointer-events: all;\\n  cursor: pointer; }\\n\\n.dc-chart .empty-chart .pie-slice {\\n  cursor: default; }\\n  .dc-chart .empty-chart .pie-slice path {\\n    fill: #fee;\\n    cursor: default; }\\n\\n.dc-chart circle.dot {\\n  stroke: none; }\\n\\n.dc-data-count {\\n  float: right;\\n  margin-top: 15px;\\n  margin-right: 15px; }\\n  .dc-data-count .filter-count, .dc-data-count .total-count {\\n    color: #3182bd;\\n    font-weight: bold; }\\n\\n.dc-legend {\\n  font-size: 11px; }\\n  .dc-legend .dc-legend-item {\\n    cursor: pointer; }\\n\\n.dc-hard .number-display {\\n  float: none; }\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 296:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(297);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = __webpack_require__(264)(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js??ref--1-oneOf-2-2!../../node_modules/postcss-loader/lib/index.js??postcss!./chart.css\", function() {\n\t\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js??ref--1-oneOf-2-2!../../node_modules/postcss-loader/lib/index.js??postcss!./chart.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n/***/ }),\n\n/***/ 297:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(263)(true);\n// imports\n\n\n// module\nexports.push([module.i, \"div.dc-chart{float:none;background-color:#b5bdc5}.dc-chart .pie-slice,.dc-chart g.row text{fill:#000}button.reset.btn.btn-sm{font-size:.5em;padding:0 .5em;border-radius:1em;cursor:pointer}.dc-chart legend{position:relative;padding:0 1rem;border-bottom:1px solid #4e5d6c;color:#2b3e50}.dc-chart legend .reset{position:absolute;right:1rem;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%)}\", \"\", {\"version\":3,\"sources\":[\"D:/projects/personal-blog/src/components/chart.css\"],\"names\":[],\"mappings\":\"AAAA,aACE,WAAY,AACZ,wBAA0B,CAC3B,AAED,0CAEE,SAAY,CACb,AAED,wBACE,eAAiB,AACjB,eAAiB,AACjB,kBAAmB,AACnB,cAAgB,CACjB,AAED,iBACE,kBAAmB,AACnB,eAAgB,AAChB,gCAAiC,AACjC,aAAe,CAChB,AAED,wBACE,kBAAmB,AACnB,WAAY,AACZ,QAAS,AACT,mCAAoC,AAChC,+BAAgC,AAC5B,0BAA4B,CACrC\",\"file\":\"chart.css\",\"sourcesContent\":[\"div.dc-chart {\\r\\n  float: none;\\r\\n  background-color: #b5bdc5;\\r\\n}\\r\\n\\r\\n.dc-chart g.row text,\\r\\n.dc-chart .pie-slice {\\r\\n  fill: black;\\r\\n}\\r\\n\\r\\nbutton.reset.btn.btn-sm {\\r\\n  font-size: 0.5em;\\r\\n  padding: 0 0.5em;\\r\\n  border-radius: 1em;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.dc-chart legend {\\r\\n  position: relative;\\r\\n  padding: 0 1rem;\\r\\n  border-bottom: 1px solid #4e5d6c;\\r\\n  color: #2b3e50;\\r\\n}\\r\\n\\r\\n.dc-chart legend .reset {\\r\\n  position: absolute;\\r\\n  right: 1rem;\\r\\n  top: 50%;\\r\\n  -webkit-transform: translateY(-50%);\\r\\n      -ms-transform: translateY(-50%);\\r\\n          transform: translateY(-50%);\\r\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/visualisation.77d1739e.chunk.js","/* eslint class-methods-use-this: off */\r\n/* eslint react/no-did-mount-set-state: off */\r\n\r\nimport React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport crossfilter from 'crossfilter2';\r\nimport dc from 'expose-loader?dc!dc'; // eslint-disable-line\r\nimport Loading from 'react-loading-animation';\r\n\r\nimport 'dc/dc.css';\r\nimport './chart.css';\r\n\r\nconst Vis = (data, Charts) =>\r\n  class Visualisation extends PureComponent {\r\n    static childContextTypes = {\r\n      ndx: PropTypes.object.isRequired,\r\n    };\r\n    constructor() {\r\n      super();\r\n\r\n      this.state = { loading: true };\r\n      this.ndx = {};\r\n    }\r\n\r\n    getChildContext() {\r\n      return { ndx: this.ndx };\r\n    }\r\n\r\n    componentDidMount() {\r\n      console.time('ndx');\r\n      this.ndx = crossfilter(data);\r\n      console.timeEnd('ndx');\r\n      this.setState({ loading: false });\r\n      window.addEventListener('resize', this.resize);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      window.removeEventListener('resize', this.resize);\r\n      dc.chartRegistry.clear();\r\n    }\r\n\r\n    resize() {\r\n      // TODO: maybe throttle this\r\n      dc.disableTransitions = true;\r\n      dc.renderAll();\r\n      dc.disableTransitions = false;\r\n    }\r\n\r\n    render() {\r\n      if (this.state.loading) {\r\n        return <Loading width=\"300px\" height=\"300px\" />;\r\n      }\r\n      return <Charts />;\r\n    }\r\n  };\r\n\r\nexport default Vis;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Visualisation.jsx","'use strict';\n\nfunction crossfilter_identity(d) {\n  return d;\n}\n\nmodule.exports = crossfilter_identity;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/identity.js\n// module id = 273\n// module chunks = 0","'use strict';\n\nvar crossfilter_identity = require('./identity');\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\n\nmodule.exports = heap_by(crossfilter_identity);\nmodule.exports.by = heap_by;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/heap.js\n// module id = 274\n// module chunks = 0","'use strict';\n\nvar crossfilter_identity = require('./identity');\n\nfunction insertionsort_by(f) {\n\n  function insertionsort(a, lo, hi) {\n    for (var i = lo + 1; i < hi; ++i) {\n      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n        a[j] = a[j - 1];\n      }\n      a[j] = t;\n    }\n    return a;\n  }\n\n  return insertionsort;\n}\n\nmodule.exports = insertionsort_by(crossfilter_identity);\nmodule.exports.by = insertionsort_by;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/insertionsort.js\n// module id = 275\n// module chunks = 0","module.exports = require(\"./src/crossfilter\").crossfilter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/index.js\n// module id = 276\n// module chunks = 0","'use strict';\n\nvar xfilterArray = require('./array');\nvar xfilterFilter = require('./filter');\nvar crossfilter_identity = require('./identity');\nvar crossfilter_null = require('./null');\nvar crossfilter_zero = require('./zero');\nvar xfilterHeapselect = require('./heapselect');\nvar xfilterHeap = require('./heap');\nvar bisect = require('./bisect');\nvar insertionsort = require('./insertionsort');\nvar permute = require('./permute');\nvar quicksort = require('./quicksort');\nvar xfilterReduce = require('./reduce');\nvar packageJson = require('./../package.json'); // require own package.json for the version field\nvar result = require('lodash.result');\n// expose API exports\nexports.crossfilter = crossfilter;\nexports.crossfilter.heap = xfilterHeap;\nexports.crossfilter.heapselect = xfilterHeapselect;\nexports.crossfilter.bisect = bisect;\nexports.crossfilter.insertionsort = insertionsort;\nexports.crossfilter.permute = permute;\nexports.crossfilter.quicksort = quicksort;\nexports.crossfilter.version = packageJson.version; // please note use of \"package-json-versionify\" transform\n\nfunction crossfilter() {\n  var crossfilter = {\n    add: add,\n    remove: removeData,\n    dimension: dimension,\n    groupAll: groupAll,\n    size: size,\n    all: all,\n    allFiltered: allFiltered,\n    onChange: onChange,\n    isElementFiltered: isElementFiltered\n  };\n\n  var data = [], // the records\n      n = 0, // the number of records; data.length\n      filters, // 1 is filtered out\n      filterListeners = [], // when the filters change\n      dataListeners = [], // when data is added\n      removeDataListeners = [], // when data is removed\n      callbacks = [];\n\n  filters = new xfilterArray.bitarray(0);\n\n  // Adds the specified new records to this crossfilter.\n  function add(newData) {\n    var n0 = n,\n        n1 = newData.length;\n\n    // If there's actually new data to add…\n    // Merge the new data into the existing data.\n    // Lengthen the filter bitset to handle the new records.\n    // Notify listeners (dimensions and groups) that new data is available.\n    if (n1) {\n      data = data.concat(newData);\n      filters.lengthen(n += n1);\n      dataListeners.forEach(function(l) { l(newData, n0, n1); });\n      triggerOnChange('dataAdded');\n    }\n\n    return crossfilter;\n  }\n\n  // Removes all records that match the current filters.\n  function removeData() {\n    var newIndex = crossfilter_index(n, n),\n        removed = [];\n\n    for (var index1 = 0, index2 = 0; index1 < n; ++index1) {\n      if (!filters.zero(index1)) newIndex[index1] = index2++;\n      else removed.push(index1);\n    }\n\n    // Remove all matching records from groups.\n    filterListeners.forEach(function(l) { l(-1, -1, [], removed, true); });\n\n    // Update indexes.\n    removeDataListeners.forEach(function(l) { l(newIndex); });\n\n    // Remove old filters and data by overwriting.\n    for (var index3 = 0, index4 = 0; index3 < n; ++index3) {\n      if (!filters.zero(index3)) {\n        if (index3 !== index4) filters.copy(index4, index3), data[index4] = data[index3];\n        ++index4;\n      }\n    }\n\n    data.length = n = index4;\n    filters.truncate(index4);\n    triggerOnChange('dataRemoved');\n  }\n\n  // Return true if the data element at index i is filtered IN.\n  // Optionally, ignore the filters of any dimensions in the ignore_dimensions list.\n  function isElementFiltered(i, ignore_dimensions) {\n    var n,\n        d,\n        id,\n        len,\n        mask = Array(filters.subarrays);\n    for (n = 0; n < filters.subarrays; n++) { mask[n] = ~0; }\n    if (ignore_dimensions) {\n      for (d = 0, len = ignore_dimensions.length; d < len; d++) {\n        // The top bits of the ID are the subarray offset and the lower bits are the bit\n        // offset of the \"one\" mask.\n        id = ignore_dimensions[d].id();\n        mask[id >> 7] &= ~(0x1 << (id & 0x3f));\n      }\n    }\n    return filters.zeroExceptMask(i,mask);\n  }\n\n  // Adds a new dimension with the specified value accessor function.\n  function dimension(value, iterable) {\n\n    if (typeof value === 'string') {\n      var accessorPath = value;\n      value = function(d) { return result(d, accessorPath); };\n    }\n\n    var dimension = {\n      filter: filter,\n      filterExact: filterExact,\n      filterRange: filterRange,\n      filterFunction: filterFunction,\n      filterAll: filterAll,\n      top: top,\n      bottom: bottom,\n      group: group,\n      groupAll: groupAll,\n      dispose: dispose,\n      remove: dispose, // for backwards-compatibility\n      accessor: value,\n      id: function() { return id; }\n    };\n\n    var one, // lowest unset bit as mask, e.g., 00001000\n        zero, // inverted one, e.g., 11110111\n        offset, // offset into the filters arrays\n        id, // unique ID for this dimension (reused when dimensions are disposed)\n        values, // sorted, cached array\n        index, // value rank ↦ object id\n        newValues, // temporary array storing newly-added values\n        newIndex, // temporary array storing newly-added index\n        iterablesIndexCount,\n        newIterablesIndexCount,\n        iterablesIndexFilterStatus,\n        newIterablesIndexFilterStatus,\n        iterablesEmptyRows = [],\n        sort = quicksort.by(function(i) { return newValues[i]; }),\n        refilter = xfilterFilter.filterAll, // for recomputing filter\n        refilterFunction, // the custom filter function in use\n        indexListeners = [], // when data is added\n        dimensionGroups = [],\n        lo0 = 0,\n        hi0 = 0,\n        t = 0,\n        k;\n\n    // Updating a dimension is a two-stage process. First, we must update the\n    // associated filters for the newly-added records. Once all dimensions have\n    // updated their filters, the groups are notified to update.\n    dataListeners.unshift(preAdd);\n    dataListeners.push(postAdd);\n\n    removeDataListeners.push(removeData);\n\n    // Add a new dimension in the filter bitmap and store the offset and bitmask.\n    var tmp = filters.add();\n    offset = tmp.offset;\n    one = tmp.one;\n    zero = ~one;\n\n    // Create a unique ID for the dimension\n    // IDs will be re-used if dimensions are disposed.\n    // For internal use the ID is the subarray offset shifted left 7 bits or'd with the\n    // bit offset of the set bit in the dimension's \"one\" mask.\n    id = (offset << 7) | (Math.log(one) / Math.log(2));\n\n    preAdd(data, 0, n);\n    postAdd(data, 0, n);\n\n    // Incorporates the specified new records into this dimension.\n    // This function is responsible for updating filters, values, and index.\n    function preAdd(newData, n0, n1) {\n\n      if (iterable){\n        // Count all the values\n        t = 0;\n        j = 0;\n        k = [];\n\n        for (var i0 = 0; i0 < newData.length; i0++) {\n          for(j = 0, k = value(newData[i0]); j < k.length; j++) {\n            t++;\n          }\n        }\n\n        newValues = [];\n        newIterablesIndexCount = crossfilter_range(newData.length);\n        newIterablesIndexFilterStatus = crossfilter_index(t,1);\n        var unsortedIndex = crossfilter_range(t);\n\n        for (var l = 0, index1 = 0; index1 < newData.length; index1++) {\n          k = value(newData[index1])\n          //\n          if(!k.length){\n            newIterablesIndexCount[index1] = 0;\n            iterablesEmptyRows.push(index1 + n0);\n            continue;\n          }\n          newIterablesIndexCount[index1] = k.length\n          for (j = 0; j < k.length; j++) {\n            newValues.push(k[j]);\n            unsortedIndex[l] = index1;\n            l++;\n          }\n        }\n\n        // Create the Sort map used to sort both the values and the valueToData indices\n        var sortMap = sort(crossfilter_range(t), 0, t);\n\n        // Use the sortMap to sort the newValues\n        newValues = permute(newValues, sortMap);\n\n\n        // Use the sortMap to sort the unsortedIndex map\n        // newIndex should be a map of sortedValue -> crossfilterData\n        newIndex = permute(unsortedIndex, sortMap)\n\n      } else{\n        // Permute new values into natural order using a standard sorted index.\n        newValues = newData.map(value);\n        newIndex = sort(crossfilter_range(n1), 0, n1);\n        newValues = permute(newValues, newIndex);\n      }\n\n      if(iterable) {\n        n1 = t;\n      }\n\n      // Bisect newValues to determine which new records are selected.\n      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1];\n      if (refilterFunction) {\n        for (var index2 = 0; index2 < n1; ++index2) {\n          if (!refilterFunction(newValues[index2], index2)) {\n            filters[offset][newIndex[index2] + n0] |= one;\n            if(iterable) newIterablesIndexFilterStatus[index2] = 1;\n          }\n        }\n      } else {\n        for (var index3 = 0; index3 < lo1; ++index3) {\n          filters[offset][newIndex[index3] + n0] |= one;\n          if(iterable) newIterablesIndexFilterStatus[index3] = 1;\n        }\n        for (var index4 = hi1; index4 < n1; ++index4) {\n          filters[offset][newIndex[index4] + n0] |= one;\n          if(iterable) newIterablesIndexFilterStatus[index4] = 1;\n        }\n      }\n\n      // If this dimension previously had no data, then we don't need to do the\n      // more expensive merge operation; use the new values and index as-is.\n      if (!n0) {\n        values = newValues;\n        index = newIndex;\n        iterablesIndexCount = newIterablesIndexCount;\n        iterablesIndexFilterStatus = newIterablesIndexFilterStatus;\n        lo0 = lo1;\n        hi0 = hi1;\n        return;\n      }\n\n\n\n      var oldValues = values,\n        oldIndex = index,\n        oldIterablesIndexFilterStatus = iterablesIndexFilterStatus,\n        old_n0,\n        i1 = 0;\n\n      i0 = 0;\n\n      if(iterable){\n        old_n0 = n0\n        n0 = oldValues.length;\n        n1 = t\n      }\n\n      // Otherwise, create new arrays into which to merge new and old.\n      values = iterable ? new Array(n0 + n1) : new Array(n);\n      index = iterable ? new Array(n0 + n1) : crossfilter_index(n, n);\n      if(iterable) iterablesIndexFilterStatus = crossfilter_index(n0 + n1, 1);\n\n      // Concatenate the newIterablesIndexCount onto the old one.\n      if(iterable) {\n        var oldiiclength = iterablesIndexCount.length;\n        iterablesIndexCount = xfilterArray.arrayLengthen(iterablesIndexCount, n);\n        for(var j=0; j+oldiiclength < n; j++) {\n          iterablesIndexCount[j+oldiiclength] = newIterablesIndexCount[j];\n        }\n      }\n\n      // Merge the old and new sorted values, and old and new index.\n      var index5 = 0;\n      for (; i0 < n0 && i1 < n1; ++index5) {\n        if (oldValues[i0] < newValues[i1]) {\n          values[index5] = oldValues[i0];\n          if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];\n          index[index5] = oldIndex[i0++];\n        } else {\n          values[index5] = newValues[i1];\n          if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];\n          index[index5] = newIndex[i1++] + (iterable ? old_n0 : n0);\n        }\n      }\n\n      // Add any remaining old values.\n      for (; i0 < n0; ++i0, ++index5) {\n        values[index5] = oldValues[i0];\n        if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];\n        index[index5] = oldIndex[i0];\n      }\n\n      // Add any remaining new values.\n      for (; i1 < n1; ++i1, ++index5) {\n        values[index5] = newValues[i1];\n        if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];\n        index[index5] = newIndex[i1] + (iterable ? old_n0 : n0);\n      }\n\n      // Bisect again to recompute lo0 and hi0.\n      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // When all filters have updated, notify index listeners of the new values.\n    function postAdd(newData, n0, n1) {\n      indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\n      newValues = newIndex = null;\n    }\n\n    function removeData(reIndex) {\n      for (var i = 0, j = 0, k; i < n; ++i) {\n        if (!filters.zero(k = index[i])) {\n          if (i !== j) values[j] = values[i];\n          index[j] = reIndex[k];\n          ++j;\n        }\n      }\n      values.length = j;\n      while (j < n) index[j++] = 0;\n\n      // Bisect again to recompute lo0 and hi0.\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // Updates the selected values based on the specified bounds [lo, hi].\n    // This implementation is used by all the public filter methods.\n    function filterIndexBounds(bounds) {\n\n      var lo1 = bounds[0],\n          hi1 = bounds[1];\n\n      if (refilterFunction) {\n        refilterFunction = null;\n        filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; }, bounds[0] === 0 && bounds[1] === index.length);\n        lo0 = lo1;\n        hi0 = hi1;\n        return dimension;\n      }\n\n      var i,\n          j,\n          k,\n          added = [],\n          removed = [],\n          valueIndexAdded = [],\n          valueIndexRemoved = [];\n\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          added.push(index[i]);\n          valueIndexAdded.push(i);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          removed.push(index[i]);\n          valueIndexRemoved.push(i);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          added.push(index[i]);\n          valueIndexAdded.push(i);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          removed.push(index[i]);\n          valueIndexRemoved.push(i);\n        }\n      }\n\n      if(!iterable) {\n        // Flip filters normally.\n\n        for(i=0; i<added.length; i++) {\n          filters[offset][added[i]] ^= one;\n        }\n\n        for(i=0; i<removed.length; i++) {\n          filters[offset][removed[i]] ^= one;\n        }\n\n      } else {\n        // For iterables, we need to figure out if the row has been completely removed vs partially included\n        // Only count a row as added if it is not already being aggregated. Only count a row\n        // as removed if the last element being aggregated is removed.\n\n        var newAdded = [];\n        var newRemoved = [];\n        for (i = 0; i < added.length; i++) {\n          iterablesIndexCount[added[i]]++\n          iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;\n          if(iterablesIndexCount[added[i]] === 1) {\n            filters[offset][added[i]] ^= one;\n            newAdded.push(added[i]);\n          }\n        }\n        for (i = 0; i < removed.length; i++) {\n          iterablesIndexCount[removed[i]]--\n          iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;\n          if(iterablesIndexCount[removed[i]] === 0) {\n            filters[offset][removed[i]] ^= one;\n            newRemoved.push(removed[i]);\n          }\n        }\n\n        added = newAdded;\n        removed = newRemoved;\n\n        // Now handle empty rows.\n        if(bounds[0] === 0 && bounds[1] === index.length) {\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if((filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was not in the filter, so set the filter and add\n              filters[offset][k] ^= one;\n              added.push(k);\n            }\n          }\n        } else {\n          // filter in place - remove empty rows if necessary\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was in the filter, so set the filter and remove\n              filters[offset][k] ^= one;\n              removed.push(k);\n            }\n          }\n        }\n      }\n\n      lo0 = lo1;\n      hi0 = hi1;\n      filterListeners.forEach(function(l) { l(one, offset, added, removed); });\n      triggerOnChange('filtered');\n      return dimension;\n    }\n\n    // Filters this dimension using the specified range, value, or null.\n    // If the range is null, this is equivalent to filterAll.\n    // If the range is an array, this is equivalent to filterRange.\n    // Otherwise, this is equivalent to filterExact.\n    function filter(range) {\n      return range == null\n          ? filterAll() : Array.isArray(range)\n          ? filterRange(range) : typeof range === \"function\"\n          ? filterFunction(range)\n          : filterExact(range);\n    }\n\n    // Filters this dimension to select the exact value.\n    function filterExact(value) {\n      return filterIndexBounds((refilter = xfilterFilter.filterExact(bisect, value))(values));\n    }\n\n    // Filters this dimension to select the specified range [lo, hi].\n    // The lower bound is inclusive, and the upper bound is exclusive.\n    function filterRange(range) {\n      return filterIndexBounds((refilter = xfilterFilter.filterRange(bisect, range))(values));\n    }\n\n    // Clears any filters on this dimension.\n    function filterAll() {\n      return filterIndexBounds((refilter = xfilterFilter.filterAll)(values));\n    }\n\n    // Filters this dimension using an arbitrary function.\n    function filterFunction(f) {\n      refilterFunction = f;\n      refilter = xfilterFilter.filterAll;\n\n      filterIndexFunction(f, false);\n\n      lo0 = 0;\n      hi0 = n;\n\n      return dimension;\n    }\n\n    function filterIndexFunction(f, filterAll) {\n      var i,\n          k,\n          x,\n          added = [],\n          removed = [],\n          valueIndexAdded = [],\n          valueIndexRemoved = [],\n          indexLength = index.length;\n\n      if(!iterable) {\n        for (i = 0; i < indexLength; ++i) {\n          if (!(filters[offset][k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n            if (x) added.push(k);\n            else removed.push(k);\n          }\n        }\n      }\n\n      if(iterable) {\n        for(i=0; i < indexLength; ++i) {\n          if(f(values[i], i)) {\n            added.push(index[i]);\n            valueIndexAdded.push(i);\n          } else {\n            removed.push(index[i]);\n            valueIndexRemoved.push(i);\n          }\n        }\n      }\n\n      if(!iterable) {\n        for(i=0; i<added.length; i++) {\n          if(filters[offset][added[i]] & one) filters[offset][added[i]] &= zero;\n        }\n\n        for(i=0; i<removed.length; i++) {\n          if(!(filters[offset][removed[i]] & one)) filters[offset][removed[i]] |= one;\n        }\n      } else {\n\n        var newAdded = [];\n        var newRemoved = [];\n        for (i = 0; i < added.length; i++) {\n          // First check this particular value needs to be added\n          if(iterablesIndexFilterStatus[valueIndexAdded[i]] === 1) {\n            iterablesIndexCount[added[i]]++\n            iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;\n            if(iterablesIndexCount[added[i]] === 1) {\n              filters[offset][added[i]] ^= one;\n              newAdded.push(added[i]);\n            }\n          }\n        }\n        for (i = 0; i < removed.length; i++) {\n          // First check this particular value needs to be removed\n          if(iterablesIndexFilterStatus[valueIndexRemoved[i]] === 0) {\n            iterablesIndexCount[removed[i]]--\n            iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;\n            if(iterablesIndexCount[removed[i]] === 0) {\n              filters[offset][removed[i]] ^= one;\n              newRemoved.push(removed[i]);\n            }\n          }\n        }\n\n        added = newAdded;\n        removed = newRemoved;\n\n        // Now handle empty rows.\n        if(filterAll) {\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if((filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was not in the filter, so set the filter and add\n              filters[offset][k] ^= one;\n              added.push(k);\n            }\n          }\n        } else {\n          // filter in place - remove empty rows if necessary\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was in the filter, so set the filter and remove\n              filters[offset][k] ^= one;\n              removed.push(k);\n            }\n          }\n        }\n      }\n\n      filterListeners.forEach(function(l) { l(one, offset, added, removed); });\n      triggerOnChange('filtered');\n    }\n\n    // Returns the top K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function top(k, top_offset) {\n      var array = [],\n          i = hi0,\n          j,\n          toSkip = 0;\n\n      if(top_offset && top_offset > 0) toSkip = top_offset;\n\n      while (--i >= lo0 && k > 0) {\n        if (filters.zero(j = index[i])) {\n          if(toSkip > 0) {\n            //skip matching row\n            --toSkip;\n          } else {\n            array.push(data[j]);\n            --k;\n          }\n        }\n      }\n\n      if(iterable){\n        for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {\n          // Add row with empty iterable column at the end\n          if(filters.zero(j = iterablesEmptyRows[i])) {\n            if(toSkip > 0) {\n              //skip matching row\n              --toSkip;\n            } else {\n              array.push(data[j]);\n              --k;\n            }\n          }\n        }\n      }\n\n      return array;\n    }\n\n    // Returns the bottom K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function bottom(k, bottom_offset) {\n      var array = [],\n          i,\n          j,\n          toSkip = 0;\n\n      if(bottom_offset && bottom_offset > 0) toSkip = bottom_offset;\n\n      if(iterable) {\n        // Add row with empty iterable column at the top\n        for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {\n          if(filters.zero(j = iterablesEmptyRows[i])) {\n            if(toSkip > 0) {\n              //skip matching row\n              --toSkip;\n            } else {\n              array.push(data[j]);\n              --k;\n            }\n          }\n        }\n      }\n\n      i = lo0;\n\n      while (i < hi0 && k > 0) {\n        if (filters.zero(j = index[i])) {\n          if(toSkip > 0) {\n            //skip matching row\n            --toSkip;\n          } else {\n            array.push(data[j]);\n            --k;\n          }\n        }\n        i++;\n      }\n\n      return array;\n    }\n\n    // Adds a new group to this dimension, using the specified key function.\n    function group(key) {\n      var group = {\n        top: top,\n        all: all,\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        order: order,\n        orderNatural: orderNatural,\n        size: size,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      // Ensure that this group will be removed when the dimension is removed.\n      dimensionGroups.push(group);\n\n      var groups, // array of {key, value}\n          groupIndex, // object id ↦ group id\n          groupWidth = 8,\n          groupCapacity = crossfilter_capacity(groupWidth),\n          k = 0, // cardinality\n          select,\n          heap,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          update = crossfilter_null,\n          reset = crossfilter_null,\n          resetNeeded = true,\n          groupAll = key === crossfilter_null,\n          n0old;\n\n      if (arguments.length < 1) key = crossfilter_identity;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the associated reduce values. It must also listen to\n      // the parent dimension for when data is added, and compute new keys.\n      filterListeners.push(update);\n      indexListeners.push(add);\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into the grouping.\n      add(values, index, 0, n);\n\n      // Incorporates the specified new values into this group.\n      // This function is responsible for updating groups and groupIndex.\n      function add(newValues, newIndex, n0, n1) {\n\n        if(iterable) {\n          n0old = n0\n          n0 = values.length - newValues.length\n          n1 = newValues.length;\n        }\n\n        var oldGroups = groups,\n            reIndex = iterable ? [] : crossfilter_index(k, groupCapacity),\n            add = reduceAdd,\n            remove = reduceRemove,\n            initial = reduceInitial,\n            k0 = k, // old cardinality\n            i0 = 0, // index of old group\n            i1 = 0, // index of new record\n            j, // object id\n            g0, // old group\n            x0, // old key\n            x1, // new key\n            g, // group to add\n            x; // key of group to add\n\n        // If a reset is needed, we don't need to update the reduce values.\n        if (resetNeeded) add = initial = crossfilter_null;\n        if (resetNeeded) remove = initial = crossfilter_null;\n\n        // Reset the new groups (k is a lower bound).\n        // Also, make sure that groupIndex exists and is long enough.\n        groups = new Array(k), k = 0;\n        if(iterable){\n          groupIndex = k0 > 1 ? groupIndex : [];\n        }\n        else{\n          groupIndex = k0 > 1 ? xfilterArray.arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n        }\n\n\n        // Get the first old key (x0 of g0), if it exists.\n        if (k0) x0 = (g0 = oldGroups[0]).key;\n\n        // Find the first new key (x1), skipping NaN keys.\n        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\n\n        // While new keys remain…\n        while (i1 < n1) {\n\n          // Determine the lesser of the two current keys; new and old.\n          // If there are no old keys remaining, then always add the new key.\n          if (g0 && x0 <= x1) {\n            g = g0, x = x0;\n\n            // Record the new index of the old group.\n            reIndex[i0] = k;\n\n            // Retrieve the next old key.\n            g0 = oldGroups[++i0];\n            if (g0) x0 = g0.key;\n          } else {\n            g = {key: x1, value: initial()}, x = x1;\n          }\n\n          // Add the lesser group.\n          groups[k] = g;\n\n          // Add any selected records belonging to the added group, while\n          // advancing the new key and populating the associated group index.\n\n          while (x1 <= x) {\n            j = newIndex[i1] + (iterable ? n0old : n0)\n\n\n            if(iterable){\n              if(groupIndex[j]){\n                groupIndex[j].push(k)\n              }\n              else{\n                groupIndex[j] = [k]\n              }\n            }\n            else{\n              groupIndex[j] = k;\n            }\n\n            // Always add new values to groups. Only remove when not in filter.\n            // This gives groups full information on data life-cycle.\n            g.value = add(g.value, data[j], true);\n            if (!filters.zeroExcept(j, offset, zero)) g.value = remove(g.value, data[j], false);\n            if (++i1 >= n1) break;\n            x1 = key(newValues[i1]);\n          }\n\n          groupIncrement();\n        }\n\n        // Add any remaining old groups that were greater th1an all new keys.\n        // No incremental reduce is needed; these groups have no new records.\n        // Also record the new index of the old group.\n        while (i0 < k0) {\n          groups[reIndex[i0] = k] = oldGroups[i0++];\n          groupIncrement();\n        }\n\n\n        // Fill in gaps with empty arrays where there may have been rows with empty iterables\n        if(iterable){\n          for (var index1 = 0; index1 < n; index1++) {\n            if(!groupIndex[index1]){\n              groupIndex[index1] = [];\n            }\n          }\n        }\n\n        // If we added any new groups before any old groups,\n        // update the group index of all the old records.\n        if(k > i0){\n          if(iterable){\n            groupIndex = permute(groupIndex, reIndex, true)\n          }\n          else{\n            for (i0 = 0; i0 < n0; ++i0) {\n              groupIndex[i0] = reIndex[groupIndex[i0]];\n            }\n          }\n        }\n\n        // Modify the update and reset behavior based on the cardinality.\n        // If the cardinality is less than or equal to one, then the groupIndex\n        // is not needed. If the cardinality is zero, then there are no records\n        // and therefore no groups to update or reset. Note that we also must\n        // change the registered listener to point to the new method.\n        j = filterListeners.indexOf(update);\n        if (k > 1) {\n          update = updateMany;\n          reset = resetMany;\n        } else {\n          if (!k && groupAll) {\n            k = 1;\n            groups = [{key: null, value: initial()}];\n          }\n          if (k === 1) {\n            update = updateOne;\n            reset = resetOne;\n          } else {\n            update = crossfilter_null;\n            reset = crossfilter_null;\n          }\n          groupIndex = null;\n        }\n        filterListeners[j] = update;\n\n        // Count the number of added groups,\n        // and widen the group index as needed.\n        function groupIncrement() {\n          if(iterable){\n            k++\n            return\n          }\n          if (++k === groupCapacity) {\n            reIndex = xfilterArray.arrayWiden(reIndex, groupWidth <<= 1);\n            groupIndex = xfilterArray.arrayWiden(groupIndex, groupWidth);\n            groupCapacity = crossfilter_capacity(groupWidth);\n          }\n        }\n      }\n\n      function removeData() {\n        if (k > 1) {\n          var oldK = k,\n              oldGroups = groups,\n              seenGroups = crossfilter_index(oldK, oldK);\n\n          // Filter out non-matches by copying matching group index entries to\n          // the beginning of the array.\n          for (var i = 0, j = 0; i < n; ++i) {\n            if (!filters.zero(i)) {\n              seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n              ++j;\n            }\n          }\n\n          // Reassemble groups including only those groups that were referred\n          // to by matching group index entries.  Note the new group index in\n          // seenGroups.\n          groups = [], k = 0;\n          for (i = 0; i < oldK; ++i) {\n            if (seenGroups[i]) {\n              seenGroups[i] = k++;\n              groups.push(oldGroups[i]);\n            }\n          }\n\n          if (k > 1) {\n            // Reindex the group index using seenGroups to find the new index.\n            for (var index2 = 0; index2 < j; ++index2) groupIndex[index2] = seenGroups[groupIndex[index2]];\n          } else {\n            groupIndex = null;\n          }\n          filterListeners[filterListeners.indexOf(update)] = k > 1\n              ? (reset = resetMany, update = updateMany)\n              : k === 1 ? (reset = resetOne, update = updateOne)\n              : reset = update = crossfilter_null;\n        } else if (k === 1) {\n          if (groupAll) return;\n          for (var index3 = 0; index3 < n; ++index3) if (!filters.zero(index3)) return;\n          groups = [], k = 0;\n          filterListeners[filterListeners.indexOf(update)] =\n          update = reset = crossfilter_null;\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is greater than 1.\n      // notFilter indicates a crossfilter.add/remove operation.\n      function updateMany(filterOne, filterOffset, added, removed, notFilter) {\n\n        if ((filterOne === one && filterOffset === offset) || resetNeeded) return;\n\n        var i,\n            j,\n            k,\n            n,\n            g;\n\n        if(iterable){\n          // Add the added values.\n          for (i = 0, n = added.length; i < n; ++i) {\n            if (filters.zeroExcept(k = added[i], offset, zero)) {\n              for (j = 0; j < groupIndex[k].length; j++) {\n                g = groups[groupIndex[k][j]];\n                g.value = reduceAdd(g.value, data[k], false, j);\n              }\n            }\n          }\n\n          // Remove the removed values.\n          for (i = 0, n = removed.length; i < n; ++i) {\n            if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n              for (j = 0; j < groupIndex[k].length; j++) {\n                g = groups[groupIndex[k][j]];\n                g.value = reduceRemove(g.value, data[k], notFilter, j);\n              }\n            }\n          }\n          return;\n        }\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (filters.zeroExcept(k = added[i], offset, zero)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceAdd(g.value, data[k], false);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceRemove(g.value, data[k], notFilter);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is 1.\n      // notFilter indicates a crossfilter.add/remove operation.\n      function updateOne(filterOne, filterOffset, added, removed, notFilter) {\n        if ((filterOne === one && filterOffset === offset) || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g = groups[0];\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (filters.zeroExcept(k = added[i], offset, zero)) {\n            g.value = reduceAdd(g.value, data[k], false);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n            g.value = reduceRemove(g.value, data[k], notFilter);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is greater than 1.\n      function resetMany() {\n        var i,\n            j,\n            g;\n\n        // Reset all group values.\n        for (i = 0; i < k; ++i) {\n          groups[i].value = reduceInitial();\n        }\n\n        // We add all records and then remove filtered records so that reducers\n        // can build an 'unfiltered' view even if there are already filters in\n        // place on other dimensions.\n        if(iterable){\n          for (i = 0; i < n; ++i) {\n            for (j = 0; j < groupIndex[i].length; j++) {\n              g = groups[groupIndex[i][j]];\n              g.value = reduceAdd(g.value, data[i], true, j);\n            }\n          }\n          for (i = 0; i < n; ++i) {\n            if (!filters.zeroExcept(i, offset, zero)) {\n              for (j = 0; j < groupIndex[i].length; j++) {\n                g = groups[groupIndex[i][j]];\n                g.value = reduceRemove(g.value, data[i], false, j);\n              }\n            }\n          }\n          return;\n        }\n\n        for (i = 0; i < n; ++i) {\n          g = groups[groupIndex[i]];\n          g.value = reduceAdd(g.value, data[i], true);\n        }\n        for (i = 0; i < n; ++i) {\n          if (!filters.zeroExcept(i, offset, zero)) {\n            g = groups[groupIndex[i]];\n            g.value = reduceRemove(g.value, data[i], false);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is 1.\n      function resetOne() {\n        var i,\n            g = groups[0];\n\n        // Reset the singleton group values.\n        g.value = reduceInitial();\n\n        // We add all records and then remove filtered records so that reducers\n        // can build an 'unfiltered' view even if there are already filters in\n        // place on other dimensions.\n        for (i = 0; i < n; ++i) {\n          g.value = reduceAdd(g.value, data[i], true);\n        }\n\n        for (i = 0; i < n; ++i) {\n          if (!filters.zeroExcept(i, offset, zero)) {\n            g.value = reduceRemove(g.value, data[i], false);\n          }\n        }\n      }\n\n      // Returns the array of group values, in the dimension's natural order.\n      function all() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return groups;\n      }\n\n      // Returns a new array containing the top K group values, in reduce order.\n      function top(k) {\n        var top = select(all(), 0, groups.length, k);\n        return heap.sort(top, 0, top.length);\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce values, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Sets the reduce order, using the specified accessor.\n      function order(value) {\n        select = xfilterHeapselect.by(valueOf);\n        heap = xfilterHeap.by(valueOf);\n        function valueOf(d) { return value(d.value); }\n        return group;\n      }\n\n      // A convenience method for natural ordering by reduce value.\n      function orderNatural() {\n        return order(crossfilter_identity);\n      }\n\n      // Returns the cardinality of this group, irrespective of any filters.\n      function size() {\n        return k;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i, 1);\n        i = indexListeners.indexOf(add);\n        if (i >= 0) indexListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        return group;\n      }\n\n      return reduceCount().orderNatural();\n    }\n\n    // A convenience function for generating a singleton group.\n    function groupAll() {\n      var g = group(crossfilter_null), all = g.all;\n      delete g.all;\n      delete g.top;\n      delete g.order;\n      delete g.orderNatural;\n      delete g.size;\n      g.value = function() { return all()[0].value; };\n      return g;\n    }\n\n    // Removes this dimension and associated groups and event listeners.\n    function dispose() {\n      dimensionGroups.forEach(function(group) { group.dispose(); });\n      var i = dataListeners.indexOf(preAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = dataListeners.indexOf(postAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = removeDataListeners.indexOf(removeData);\n      if (i >= 0) removeDataListeners.splice(i, 1);\n      filters.masks[offset] &= zero;\n      return filterAll();\n    }\n\n    return dimension;\n  }\n\n  // A convenience method for groupAll on a dummy dimension.\n  // This implementation can be optimized since it always has cardinality 1.\n  function groupAll() {\n    var group = {\n      reduce: reduce,\n      reduceCount: reduceCount,\n      reduceSum: reduceSum,\n      value: value,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var reduceValue,\n        reduceAdd,\n        reduceRemove,\n        reduceInitial,\n        resetNeeded = true;\n\n    // The group listens to the crossfilter for when any dimension changes, so\n    // that it can update the reduce value. It must also listen to the parent\n    // dimension for when data is added.\n    filterListeners.push(update);\n    dataListeners.push(add);\n\n    // For consistency; actually a no-op since resetNeeded is true.\n    add(data, 0, n);\n\n    // Incorporates the specified new values into this group.\n    function add(newData, n0) {\n      var i;\n\n      if (resetNeeded) return;\n\n      // Cycle through all the values.\n      for (i = n0; i < n; ++i) {\n\n        // Add all values all the time.\n        reduceValue = reduceAdd(reduceValue, data[i], true);\n\n        // Remove the value if filtered.\n        if (!filters.zero(i)) {\n          reduceValue = reduceRemove(reduceValue, data[i], false);\n        }\n      }\n    }\n\n    // Reduces the specified selected or deselected records.\n    function update(filterOne, filterOffset, added, removed, notFilter) {\n      var i,\n          k,\n          n;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = 0, n = added.length; i < n; ++i) {\n        if (filters.zero(k = added[i])) {\n          reduceValue = reduceAdd(reduceValue, data[k], notFilter);\n        }\n      }\n\n      // Remove the removed values.\n      for (i = 0, n = removed.length; i < n; ++i) {\n        if (filters.only(k = removed[i], filterOffset, filterOne)) {\n          reduceValue = reduceRemove(reduceValue, data[k], notFilter);\n        }\n      }\n    }\n\n    // Recomputes the group reduce value from scratch.\n    function reset() {\n      var i;\n\n      reduceValue = reduceInitial();\n\n      // Cycle through all the values.\n      for (i = 0; i < n; ++i) {\n\n        // Add all values all the time.\n        reduceValue = reduceAdd(reduceValue, data[i], true);\n\n        // Remove the value if it is filtered.\n        if (!filters.zero(i)) {\n          reduceValue = reduceRemove(reduceValue, data[i], false);\n        }\n      }\n    }\n\n    // Sets the reduce behavior for this group to use the specified functions.\n    // This method lazily recomputes the reduce value, waiting until needed.\n    function reduce(add, remove, initial) {\n      reduceAdd = add;\n      reduceRemove = remove;\n      reduceInitial = initial;\n      resetNeeded = true;\n      return group;\n    }\n\n    // A convenience method for reducing by count.\n    function reduceCount() {\n      return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, crossfilter_zero);\n    }\n\n    // A convenience method for reducing by sum(value).\n    function reduceSum(value) {\n      return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), crossfilter_zero);\n    }\n\n    // Returns the computed reduce value.\n    function value() {\n      if (resetNeeded) reset(), resetNeeded = false;\n      return reduceValue;\n    }\n\n    // Removes this group and associated event listeners.\n    function dispose() {\n      var i = filterListeners.indexOf(update);\n      if (i >= 0) filterListeners.splice(i);\n      i = dataListeners.indexOf(add);\n      if (i >= 0) dataListeners.splice(i);\n      return group;\n    }\n\n    return reduceCount();\n  }\n\n  // Returns the number of records in this crossfilter, irrespective of any filters.\n  function size() {\n    return n;\n  }\n\n  // Returns the raw row data contained in this crossfilter\n  function all(){\n    return data;\n  }\n\n  // Returns row data with all dimension filters applied\n  function allFiltered() {\n    var array = [],\n        i = 0;\n\n      for (i = 0; i < n; i++) {\n        if (filters.zero(i)) {\n          array.push(data[i]);\n        }\n      }\n\n      return array;\n  }\n\n  function onChange(cb){\n    if(typeof cb !== 'function'){\n      /* eslint no-console: 0 */\n      console.warn('onChange callback parameter must be a function!');\n      return;\n    }\n    callbacks.push(cb);\n    return function(){\n      callbacks.splice(callbacks.indexOf(cb), 1);\n    };\n  }\n\n  function triggerOnChange(eventName){\n    for (var i = 0; i < callbacks.length; i++) {\n      callbacks[i](eventName);\n    }\n  }\n\n  return arguments.length\n      ? add(arguments[0])\n      : crossfilter;\n}\n\n// Returns an array of size n, big enough to store ids up to m.\nfunction crossfilter_index(n, m) {\n  return (m < 0x101\n      ? xfilterArray.array8 : m < 0x10001\n      ? xfilterArray.array16\n      : xfilterArray.array32)(n);\n}\n\n// Constructs a new array of size n, with sequential values from 0 to n - 1.\nfunction crossfilter_range(n) {\n  var range = crossfilter_index(n, n);\n  for (var i = -1; ++i < n;) range[i] = i;\n  return range;\n}\n\nfunction crossfilter_capacity(w) {\n  return w === 8\n      ? 0x100 : w === 16\n      ? 0x10000\n      : 0x100000000;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/crossfilter.js\n// module id = 277\n// module chunks = 0","if (typeof Uint8Array !== \"undefined\") {\n  var crossfilter_array8 = function(n) { return new Uint8Array(n); };\n  var crossfilter_array16 = function(n) { return new Uint16Array(n); };\n  var crossfilter_array32 = function(n) { return new Uint32Array(n); };\n\n  var crossfilter_arrayLengthen = function(array, length) {\n    if (array.length >= length) return array;\n    var copy = new array.constructor(length);\n    copy.set(array);\n    return copy;\n  };\n\n  var crossfilter_arrayWiden = function(array, width) {\n    var copy;\n    switch (width) {\n      case 16: copy = crossfilter_array16(array.length); break;\n      case 32: copy = crossfilter_array32(array.length); break;\n      default: throw new Error(\"invalid array width!\");\n    }\n    copy.set(array);\n    return copy;\n  };\n}\n\nfunction crossfilter_arrayUntyped(n) {\n  var array = new Array(n), i = -1;\n  while (++i < n) array[i] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayLengthenUntyped(array, length) {\n  var n = array.length;\n  while (n < length) array[n++] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayWidenUntyped(array, width) {\n  if (width > 32) throw new Error(\"invalid array width!\");\n  return array;\n}\n\n// An arbitrarily-wide array of bitmasks\nfunction crossfilter_bitarray(n) {\n  this.length = n;\n  this.subarrays = 1;\n  this.width = 8;\n  this.masks = {\n    0: 0\n  }\n\n  this[0] = crossfilter_array8(n);\n}\n\ncrossfilter_bitarray.prototype.lengthen = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    this[i] = crossfilter_arrayLengthen(this[i], n);\n  }\n  this.length = n;\n};\n\n// Reserve a new bit index in the array, returns {offset, one}\ncrossfilter_bitarray.prototype.add = function() {\n  var m, w, one, i, len;\n\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    m = this.masks[i];\n    w = this.width - (32 * i);\n    one = ~m & -~m;\n\n    if (w >= 32 && !one) {\n      continue;\n    }\n\n    if (w < 32 && (one & (1 << w))) {\n      // widen this subarray\n      this[i] = crossfilter_arrayWiden(this[i], w <<= 1);\n      this.width = 32 * i + w;\n    }\n\n    this.masks[i] |= one;\n\n    return {\n      offset: i,\n      one: one\n    };\n  }\n\n  // add a new subarray\n  this[this.subarrays] = crossfilter_array8(this.length);\n  this.masks[this.subarrays] = 1;\n  this.width += 8;\n  return {\n    offset: this.subarrays++,\n    one: 1\n  };\n};\n\n// Copy record from index src to index dest\ncrossfilter_bitarray.prototype.copy = function(dest, src) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    this[i][dest] = this[i][src];\n  }\n};\n\n// Truncate the array to the given length\ncrossfilter_bitarray.prototype.truncate = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    for (var j = this.length - 1; j >= n; j--) {\n      this[i][j] = 0;\n    }\n    this[i].length = n;\n  }\n  this.length = n;\n};\n\n// Checks that all bits for the given index are 0\ncrossfilter_bitarray.prototype.zero = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that all bits for the given index are 0 except for possibly one\ncrossfilter_bitarray.prototype.zeroExcept = function(n, offset, zero) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (i === offset ? this[i][n] & zero : this[i][n]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that all bits for the given indez are 0 except for the specified mask.\n// The mask should be an array of the same size as the filter subarrays width.\ncrossfilter_bitarray.prototype.zeroExceptMask = function(n, mask) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n] & mask[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Checks that only the specified bit is set for the given index\ncrossfilter_bitarray.prototype.only = function(n, offset, one) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n] != (i === offset ? one : 0)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that only the specified bit is set for the given index except for possibly one other\ncrossfilter_bitarray.prototype.onlyExcept = function(n, offset, zero, onlyOffset, onlyOne) {\n  var mask;\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    mask = this[i][n];\n    if (i === offset)\n      mask &= zero;\n    if (mask != (i === onlyOffset ? onlyOne : 0)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  array8: crossfilter_arrayUntyped,\n  array16: crossfilter_arrayUntyped,\n  array32: crossfilter_arrayUntyped,\n  arrayLengthen: crossfilter_arrayLengthenUntyped,\n  arrayWiden: crossfilter_arrayWidenUntyped,\n  bitarray: crossfilter_bitarray\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/array.js\n// module id = 278\n// module chunks = 0","'use strict';\n\nfunction crossfilter_filterExact(bisect, value) {\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n  };\n}\n\nfunction crossfilter_filterRange(bisect, range) {\n  var min = range[0],\n      max = range[1];\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n  };\n}\n\nfunction crossfilter_filterAll(values) {\n  return [0, values.length];\n}\n\nmodule.exports = {\n  filterExact: crossfilter_filterExact,\n  filterRange: crossfilter_filterRange,\n  filterAll: crossfilter_filterAll\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/filter.js\n// module id = 279\n// module chunks = 0","'use strict';\n\nfunction crossfilter_null() {\n  return null;\n}\n\nmodule.exports = crossfilter_null;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/null.js\n// module id = 280\n// module chunks = 0","'use strict';\n\nfunction crossfilter_zero() {\n  return 0;\n}\n\nmodule.exports = crossfilter_zero;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/zero.js\n// module id = 281\n// module chunks = 0","'use strict';\n\nvar crossfilter_identity = require('./identity');\nvar xFilterHeap = require('./heap');\n\nfunction heapselect_by(f) {\n  var heap = xFilterHeap.by(f);\n\n  // Returns a new array containing the top k elements in the array a[lo:hi].\n  // The returned array is not sorted, but maintains the heap property. If k is\n  // greater than hi - lo, then fewer than k elements will be returned. The\n  // order of elements in a is unchanged by this operation.\n  function heapselect(a, lo, hi, k) {\n    var queue = new Array(k = Math.min(hi - lo, k)),\n        min,\n        i,\n        d;\n\n    for (i = 0; i < k; ++i) queue[i] = a[lo++];\n    heap(queue, 0, k);\n\n    if (lo < hi) {\n      min = f(queue[0]);\n      do {\n        if (f(d = a[lo]) > min) {\n          queue[0] = d;\n          min = f(heap(queue, 0, k)[0]);\n        }\n      } while (++lo < hi);\n    }\n\n    return queue;\n  }\n\n  return heapselect;\n}\n\nmodule.exports = heapselect_by(crossfilter_identity);\nmodule.exports.by = heapselect_by; // assign the raw function to the export as well\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/heapselect.js\n// module id = 282\n// module chunks = 0","'use strict';\n\nvar crossfilter_identity = require('./identity');\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\n\nmodule.exports = bisect_by(crossfilter_identity);\nmodule.exports.by = bisect_by; // assign the raw function to the export as well\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/bisect.js\n// module id = 283\n// module chunks = 0","'use strict';\n\nfunction permute(array, index, deep) {\n  for (var i = 0, n = index.length, copy = deep ? JSON.parse(JSON.stringify(array)) : new Array(n); i < n; ++i) {\n    copy[i] = array[index[i]];\n  }\n  return copy;\n}\n\nmodule.exports = permute;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/permute.js\n// module id = 284\n// module chunks = 0","var crossfilter_identity = require('./identity');\nvar xFilterInsertionsort = require('./insertionsort');\n\n// Algorithm designed by Vladimir Yaroslavskiy.\n// Implementation based on the Dart project; see NOTICE and AUTHORS for details.\n\nfunction quicksort_by(f) {\n  var insertionsort = xFilterInsertionsort.by(f);\n\n  function sort(a, lo, hi) {\n    return (hi - lo < quicksort_sizeThreshold\n        ? insertionsort\n        : quicksort)(a, lo, hi);\n  }\n\n  function quicksort(a, lo, hi) {\n    // Compute the two pivots by looking at 5 elements.\n    var sixth = (hi - lo) / 6 | 0,\n        i1 = lo + sixth,\n        i5 = hi - 1 - sixth,\n        i3 = lo + hi - 1 >> 1,  // The midpoint.\n        i2 = i3 - sixth,\n        i4 = i3 + sixth;\n\n    var e1 = a[i1], x1 = f(e1),\n        e2 = a[i2], x2 = f(e2),\n        e3 = a[i3], x3 = f(e3),\n        e4 = a[i4], x4 = f(e4),\n        e5 = a[i5], x5 = f(e5);\n\n    var t;\n\n    // Sort the selected 5 elements using a sorting network.\n    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n    var pivot1 = e2, pivotValue1 = x2,\n        pivot2 = e4, pivotValue2 = x4;\n\n    // e2 and e4 have been saved in the pivot variables. They will be written\n    // back, once the partitioning is finished.\n    a[i1] = e1;\n    a[i2] = a[lo];\n    a[i3] = e3;\n    a[i4] = a[hi - 1];\n    a[i5] = e5;\n\n    var less = lo + 1,   // First element in the middle partition.\n        great = hi - 2;  // Last element in the middle partition.\n\n    // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n    // Object.prototype.valueOf; == and === do not, so in order to be consistent\n    // with natural order (such as for Date objects), we must do two compares.\n    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n    if (pivotsEqual) {\n\n      // Degenerated case where the partitioning becomes a dutch national flag\n      // problem.\n      //\n      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n      //  ^             ^          ^             ^            ^\n      // left         less         k           great         right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1) for x in ]left, less[ : x < pivot.\n      //   2) for x in [less, k[ : x == pivot.\n      //   3) for x in ]great, right[ : x > pivot.\n      for (var k = less; k <= great; ++k) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else if (xk > pivotValue1) {\n\n          // Find the first element <= pivot in the range [k - 1, great] and\n          // put [:ek:] there. We know that such an element must exist:\n          // When k == less, then el3 (which is equal to pivot) lies in the\n          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n          // Note that in the latter case invariant 2 will be violated for a\n          // short amount of time. The invariant will be restored when the\n          // pivots are put into their final positions.\n          /* eslint no-constant-condition: 0 */\n          while (true) {\n            var greatValue = f(a[great]);\n            if (greatValue > pivotValue1) {\n              great--;\n              // This is the only location in the while-loop where a new\n              // iteration is started.\n              continue;\n            } else if (greatValue < pivotValue1) {\n              // Triple exchange.\n              a[k] = a[less];\n              a[less++] = a[great];\n              a[great--] = ek;\n              break;\n            } else {\n              a[k] = a[great];\n              a[great--] = ek;\n              // Note: if great < k then we will exit the outer loop and fix\n              // invariant 2 (which we just violated).\n              break;\n            }\n          }\n        }\n      }\n    } else {\n\n      // We partition the list into three parts:\n      //  1. < pivot1\n      //  2. >= pivot1 && <= pivot2\n      //  3. > pivot2\n      //\n      // During the loop we have:\n      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n      //  ^            ^                        ^              ^             ^\n      // left         less                     k              great        right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1. for x in ]left, less[ : x < pivot1\n      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n      //   3. for x in ]great, right[ : x > pivot2\n      (function () { // isolate scope\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else {\n          if (xk > pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] <= pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] >= pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n      })(); // isolate scope\n    }\n\n    // Move pivots into their final positions.\n    // We shrunk the list from both sides (a[left] and a[right] have\n    // meaningless values in them) and now we move elements from the first\n    // and third partition into these locations so that we can store the\n    // pivots.\n    a[lo] = a[less - 1];\n    a[less - 1] = pivot1;\n    a[hi - 1] = a[great + 1];\n    a[great + 1] = pivot2;\n\n    // The list is now partitioned into three partitions:\n    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n    //  ^            ^                        ^             ^\n    // left         less                     great        right\n\n    // Recursive descent. (Don't include the pivot values.)\n    sort(a, lo, less - 1);\n    sort(a, great + 2, hi);\n\n    if (pivotsEqual) {\n      // All elements in the second partition are equal to the pivot. No\n      // need to sort them.\n      return a;\n    }\n\n    // In theory it should be enough to call _doSort recursively on the second\n    // partition.\n    // The Android source however removes the pivot elements from the recursive\n    // call if the second partition is too large (more than 2/3 of the list).\n    if (less < i1 && great > i5) {\n\n      (function () { // isolate scope\n      var lessValue, greatValue;\n      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\n      while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\n\n      // Copy paste of the previous 3-way partitioning with adaptions.\n      //\n      // We partition the list into three parts:\n      //  1. == pivot1\n      //  2. > pivot1 && < pivot2\n      //  3. == pivot2\n      //\n      // During the loop we have:\n      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n      //              ^                      ^              ^\n      //            less                     k              great\n      //\n      // Invariants:\n      //   1. for x in [ *, less[ : x == pivot1\n      //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n      //   3. for x in ]great, * ] : x == pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk <= pivotValue1 && xk >= pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          less++;\n        } else {\n          if (xk <= pivotValue2 && xk >= pivotValue2) {\n            /* eslint no-constant-condition: 0 */\n            while (true) {\n              greatValue = f(a[great]);\n              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] < pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] == pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n      })(); // isolate scope\n\n    }\n\n    // The second partition has now been cleared of pivot elements and looks\n    // as follows:\n    // [  *  |  > pivot1 && < pivot2  | * ]\n    //        ^                      ^\n    //       less                  great\n    // Sort the second partition using recursive descent.\n\n    // The second partition looks as follows:\n    // [  *  |  >= pivot1 && <= pivot2  | * ]\n    //        ^                        ^\n    //       less                    great\n    // Simply sort it by recursive descent.\n\n    return sort(a, less, great + 1);\n  }\n\n  return sort;\n}\n\nvar quicksort_sizeThreshold = 32;\n\nmodule.exports = quicksort_by(crossfilter_identity);\nmodule.exports.by = quicksort_by;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/quicksort.js\n// module id = 285\n// module chunks = 0","'use strict';\n\nfunction crossfilter_reduceIncrement(p) {\n  return p + 1;\n}\n\nfunction crossfilter_reduceDecrement(p) {\n  return p - 1;\n}\n\nfunction crossfilter_reduceAdd(f) {\n  return function(p, v) {\n    return p + +f(v);\n  };\n}\n\nfunction crossfilter_reduceSubtract(f) {\n  return function(p, v) {\n    return p - f(v);\n  };\n}\n\nmodule.exports = {\n  reduceIncrement: crossfilter_reduceIncrement,\n  reduceDecrement: crossfilter_reduceDecrement,\n  reduceAdd: crossfilter_reduceAdd,\n  reduceSubtract: crossfilter_reduceSubtract\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/reduce.js\n// module id = 286\n// module chunks = 0","module.exports = {\"_args\":[[\"crossfilter2@1.4.1\",\"D:\\\\projects\\\\personal-blog\"]],\"_from\":\"crossfilter2@1.4.1\",\"_id\":\"crossfilter2@1.4.1\",\"_inBundle\":false,\"_integrity\":\"sha512-0ykBoUMRMMUUq5aBZk0Dn+pZgD+3a3KuUKRRCi5a/jxlnkwpu9B5FZM4BEaK5j9gUXF8BTDJXr/zIbM4Gi7Wig==\",\"_location\":\"/crossfilter2\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"version\",\"registry\":true,\"raw\":\"crossfilter2@1.4.1\",\"name\":\"crossfilter2\",\"escapedName\":\"crossfilter2\",\"rawSpec\":\"1.4.1\",\"saveSpec\":null,\"fetchSpec\":\"1.4.1\"},\"_requiredBy\":[\"/\"],\"_resolved\":\"https://registry.npmjs.org/crossfilter2/-/crossfilter2-1.4.1.tgz\",\"_spec\":\"1.4.1\",\"_where\":\"D:\\\\projects\\\\personal-blog\",\"author\":{\"name\":\"Mike Bostock\",\"url\":\"http://bost.ocks.org/mike\"},\"bugs\":{\"url\":\"https://github.com/crossfilter/crossfilter/issues\"},\"contributors\":[{\"name\":\"Jason Davies\",\"url\":\"http://www.jasondavies.com/\"}],\"dependencies\":{\"lodash.result\":\"^4.4.0\"},\"description\":\"Fast multidimensional filtering for coordinated views.\",\"devDependencies\":{\"browserify\":\"^13.0.0\",\"d3\":\"3.5\",\"eslint\":\"2.10.2\",\"package-json-versionify\":\"1.0.2\",\"semver\":\"^5.3.0\",\"uglify-js\":\"2.4.0\",\"vows\":\"0.7.0\"},\"eslintConfig\":{\"env\":{\"browser\":true,\"node\":true},\"globals\":{\"Uint8Array\":true,\"Uint16Array\":true,\"Uint32Array\":true},\"extends\":\"eslint:recommended\"},\"files\":[\"src\",\"index.js\",\"crossfilter.js\",\"crossfilter.min.js\"],\"homepage\":\"http://crossfilter.github.com/crossfilter/\",\"keywords\":[\"analytics\",\"visualization\",\"crossfilter\"],\"license\":\"Apache-2.0\",\"main\":\"./index.js\",\"maintainers\":[{\"name\":\"Gordon Woodhull\",\"url\":\"https://github.com/gordonwoodhull\"},{\"name\":\"Tanner Linsley\",\"url\":\"https://github.com/tannerlinsley\"},{\"name\":\"Ethan Jewett\",\"url\":\"https://github.com/esjewett\"}],\"name\":\"crossfilter2\",\"repository\":{\"type\":\"git\",\"url\":\"git+ssh://git@github.com/crossfilter/crossfilter.git\"},\"scripts\":{\"benchmark\":\"node test/benchmark.js\",\"build\":\"browserify index.js -t package-json-versionify --standalone crossfilter -o crossfilter.js && uglifyjs --compress --mangle --screw-ie8 crossfilter.js -o crossfilter.min.js\",\"clean\":\"rm -f crossfilter.js crossfilter.min.js\",\"test\":\"vows --verbose && eslint src/\"},\"version\":\"1.4.1\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/package.json\n// module id = 287\n// module chunks = 0","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * This method is like `_.get` except that if the resolved value is a\n * function it's invoked with the `this` binding of its parent object and\n * its result is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to resolve.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n *\n * _.result(object, 'a[0].b.c1');\n * // => 3\n *\n * _.result(object, 'a[0].b.c2');\n * // => 4\n *\n * _.result(object, 'a[0].b.c3', 'default');\n * // => 'default'\n *\n * _.result(object, 'a[0].b.c3', _.constant('default'));\n * // => 'default'\n */\nfunction result(object, path, defaultValue) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = -1,\n      length = path.length;\n\n  // Ensure the loop is entered when path is empty.\n  if (!length) {\n    object = undefined;\n    length = 1;\n  }\n  while (++index < length) {\n    var value = object == null ? undefined : object[toKey(path[index])];\n    if (value === undefined) {\n      index = length;\n      value = defaultValue;\n    }\n    object = isFunction(value) ? value.call(object) : value;\n  }\n  return object;\n}\n\nmodule.exports = result;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash.result/index.js\n// module id = 288\n// module chunks = 0","module.exports = global[\"dc\"] = require(\"-!.\\\\dc.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/expose-loader?dc!./node_modules/dc/dc.js\n// module id = 289\n// module chunks = 0","/*!\n *  dc 2.1.8\n *  http://dc-js.github.io/dc.js/\n *  Copyright 2012-2016 Nick Zhu & the dc.js Developers\n *  https://github.com/dc-js/dc.js/blob/master/AUTHORS\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n(function() { function _dc(d3, crossfilter) {\n'use strict';\n\n/**\n * The entire dc.js library is scoped under the **dc** name space. It does not introduce\n * anything else into the global name space.\n *\n * Most `dc` functions are designed to allow function chaining, meaning they return the current chart\n * instance whenever it is appropriate.  The getter forms of functions do not participate in function\n * chaining because they return values that are not the chart, although some,\n * such as {@link dc.baseMixin#svg .svg} and {@link dc.coordinateGridMixin#xAxis .xAxis},\n * return values that are themselves chainable d3 objects.\n * @namespace dc\n * @version 2.1.8\n * @example\n * // Example chaining\n * chart.width(300)\n *      .height(300)\n *      .filter('sunday');\n */\n/*jshint -W079*/\nvar dc = {\n    version: '2.1.8',\n    constants: {\n        CHART_CLASS: 'dc-chart',\n        DEBUG_GROUP_CLASS: 'debug',\n        STACK_CLASS: 'stack',\n        DESELECTED_CLASS: 'deselected',\n        SELECTED_CLASS: 'selected',\n        NODE_INDEX_NAME: '__index__',\n        GROUP_INDEX_NAME: '__group_index__',\n        DEFAULT_CHART_GROUP: '__default_chart_group__',\n        EVENT_DELAY: 40,\n        NEGLIGIBLE_NUMBER: 1e-10\n    },\n    _renderlet: null\n};\n/*jshint +W079*/\n\n/**\n * The dc.chartRegistry object maintains sets of all instantiated dc.js charts under named groups\n * and the default group.\n *\n * A chart group often corresponds to a crossfilter instance. It specifies\n * the set of charts which should be updated when a filter changes on one of the charts or when the\n * global functions {@link dc.filterAll dc.filterAll}, {@link dc.refocusAll dc.refocusAll},\n * {@link dc.renderAll dc.renderAll}, {@link dc.redrawAll dc.redrawAll}, or chart functions\n * {@link dc.baseMixin#renderGroup baseMixin.renderGroup},\n * {@link dc.baseMixin#redrawGroup baseMixin.redrawGroup} are called.\n *\n * @namespace chartRegistry\n * @memberof dc\n * @type {{has, register, deregister, clear, list}}\n */\ndc.chartRegistry = (function () {\n    // chartGroup:string => charts:array\n    var _chartMap = {};\n\n    function initializeChartGroup (group) {\n        if (!group) {\n            group = dc.constants.DEFAULT_CHART_GROUP;\n        }\n\n        if (!_chartMap[group]) {\n            _chartMap[group] = [];\n        }\n\n        return group;\n    }\n\n    return {\n        /**\n         * Determine if a given chart instance resides in any group in the registry.\n         * @method has\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @returns {Boolean}\n         */\n        has: function (chart) {\n            for (var e in _chartMap) {\n                if (_chartMap[e].indexOf(chart) >= 0) {\n                    return true;\n                }\n            }\n            return false;\n        },\n\n        /**\n         * Add given chart instance to the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method register\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        register: function (chart, group) {\n            group = initializeChartGroup(group);\n            _chartMap[group].push(chart);\n        },\n\n        /**\n         * Remove given chart instance from the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method deregister\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        deregister: function (chart, group) {\n            group = initializeChartGroup(group);\n            for (var i = 0; i < _chartMap[group].length; i++) {\n                if (_chartMap[group][i].anchorName() === chart.anchorName()) {\n                    _chartMap[group].splice(i, 1);\n                    break;\n                }\n            }\n        },\n\n        /**\n         * Clear given group if one is provided, otherwise clears all groups.\n         * @method clear\n         * @memberof dc.chartRegistry\n         * @param {String} group Group name\n         */\n        clear: function (group) {\n            if (group) {\n                delete _chartMap[group];\n            } else {\n                _chartMap = {};\n            }\n        },\n\n        /**\n         * Get an array of each chart instance in the given group.\n         * If no group is provided, the charts in the default group are returned.\n         * @method list\n         * @memberof dc.chartRegistry\n         * @param {String} [group] Group name\n         * @returns {Array<Object>}\n         */\n        list: function (group) {\n            group = initializeChartGroup(group);\n            return _chartMap[group];\n        }\n    };\n})();\n\n/**\n * Add given chart instance to the given group, creating the group if necessary.\n * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n * @memberof dc\n * @method registerChart\n * @param {Object} chart dc.js chart instance\n * @param {String} [group] Group name\n */\ndc.registerChart = function (chart, group) {\n    dc.chartRegistry.register(chart, group);\n};\n\n/**\n * Remove given chart instance from the given group, creating the group if necessary.\n * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n * @memberof dc\n * @method deregisterChart\n * @param {Object} chart dc.js chart instance\n * @param {String} [group] Group name\n */\ndc.deregisterChart = function (chart, group) {\n    dc.chartRegistry.deregister(chart, group);\n};\n\n/**\n * Determine if a given chart instance resides in any group in the registry.\n * @memberof dc\n * @method hasChart\n * @param {Object} chart dc.js chart instance\n * @returns {Boolean}\n */\ndc.hasChart = function (chart) {\n    return dc.chartRegistry.has(chart);\n};\n\n/**\n * Clear given group if one is provided, otherwise clears all groups.\n * @memberof dc\n * @method deregisterAllCharts\n * @param {String} group Group name\n */\ndc.deregisterAllCharts = function (group) {\n    dc.chartRegistry.clear(group);\n};\n\n/**\n * Clear all filters on all charts within the given chart group. If the chart group is not given then\n * only charts that belong to the default chart group will be reset.\n * @memberof dc\n * @method filterAll\n * @param {String} [group]\n */\ndc.filterAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].filterAll();\n    }\n};\n\n/**\n * Reset zoom level / focus on all charts that belong to the given chart group. If the chart group is\n * not given then only charts that belong to the default chart group will be reset.\n * @memberof dc\n * @method refocusAll\n * @param {String} [group]\n */\ndc.refocusAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        if (charts[i].focus) {\n            charts[i].focus();\n        }\n    }\n};\n\n/**\n * Re-render all charts belong to the given chart group. If the chart group is not given then only\n * charts that belong to the default chart group will be re-rendered.\n * @memberof dc\n * @method renderAll\n * @param {String} [group]\n */\ndc.renderAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].render();\n    }\n\n    if (dc._renderlet !== null) {\n        dc._renderlet(group);\n    }\n};\n\n/**\n * Redraw all charts belong to the given chart group. If the chart group is not given then only charts\n * that belong to the default chart group will be re-drawn. Redraw is different from re-render since\n * when redrawing dc tries to update the graphic incrementally, using transitions, instead of starting\n * from scratch.\n * @memberof dc\n * @method redrawAll\n * @param {String} [group]\n */\ndc.redrawAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].redraw();\n    }\n\n    if (dc._renderlet !== null) {\n        dc._renderlet(group);\n    }\n};\n\n/**\n * If this boolean is set truthy, all transitions will be disabled, and changes to the charts will happen\n * immediately.\n * @memberof dc\n * @member disableTransitions\n * @type {Boolean}\n * @default false\n */\ndc.disableTransitions = false;\n\n/**\n * Start a transition on a selection if transitions are globally enabled\n * ({@link dc.disableTransitions} is false) and the duration is greater than zero; otherwise return\n * the selection. Since most operations are the same on a d3 selection and a d3 transition, this\n * allows a common code path for both cases.\n * @memberof dc\n * @method transition\n * @param {d3.selection} selection - the selection to be transitioned\n * @param {Number|Function} [duration=250] - the duration of the transition in milliseconds, a\n * function returning the duration, or 0 for no transition\n * @param {Number|Function} [delay] - the delay of the transition in milliseconds, or a function\n * returning the delay, or 0 for no delay\n * @param {String} [name] - the name of the transition (if concurrent transitions on the same\n * elements are needed)\n * @returns {d3.transition|d3.selection}\n */\ndc.transition = function (selection, duration, delay, name) {\n    if (dc.disableTransitions || duration <= 0) {\n        return selection;\n    }\n\n    var s = selection.transition(name);\n\n    if (duration >= 0 || duration !== undefined) {\n        s = s.duration(duration);\n    }\n    if (delay >= 0 || delay !== undefined) {\n        s = s.delay(delay);\n    }\n\n    return s;\n};\n\n/* somewhat silly, but to avoid duplicating logic */\ndc.optionalTransition = function (enable, duration, delay, name) {\n    if (enable) {\n        return function (selection) {\n            return dc.transition(selection, duration, delay, name);\n        };\n    } else {\n        return function (selection) {\n            return selection;\n        };\n    }\n};\n\n// See http://stackoverflow.com/a/20773846\ndc.afterTransition = function (transition, callback) {\n    if (transition.empty() || !transition.duration) {\n        callback.call(transition);\n    } else {\n        var n = 0;\n        transition\n            .each(function () { ++n; })\n            .each('end', function () {\n                if (!--n) {\n                    callback.call(transition);\n                }\n            });\n    }\n};\n\n/**\n * @namespace units\n * @memberof dc\n * @type {{}}\n */\ndc.units = {};\n\n/**\n * The default value for {@link dc.coordinateGridMixin#xUnits .xUnits} for the\n * {@link dc.coordinateGridMixin Coordinate Grid Chart} and should\n * be used when the x values are a sequence of integers.\n * It is a function that counts the number of integers in the range supplied in its start and end parameters.\n * @method integers\n * @memberof dc.units\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @example\n * chart.xUnits(dc.units.integers) // already the default\n * @param {Number} start\n * @param {Number} end\n * @returns {Number}\n */\ndc.units.integers = function (start, end) {\n    return Math.abs(end - start);\n};\n\n/**\n * This argument can be passed to the {@link dc.coordinateGridMixin#xUnits .xUnits} function of the to\n * specify ordinal units for the x axis. Usually this parameter is used in combination with passing\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal} to\n * {@link dc.coordinateGridMixin#x .x}.\n * It just returns the domain passed to it, which for ordinal charts is an array of all values.\n * @method ordinal\n * @memberof dc.units\n * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal}\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @see {@link dc.coordinateGridMixin#x coordinateGridMixin.x}\n * @example\n * chart.xUnits(dc.units.ordinal)\n *      .x(d3.scale.ordinal())\n * @param {*} start\n * @param {*} end\n * @param {Array<String>} domain\n * @returns {Array<String>}\n */\ndc.units.ordinal = function (start, end, domain) {\n    return domain;\n};\n\n/**\n * @namespace fp\n * @memberof dc.units\n * @type {{}}\n */\ndc.units.fp = {};\n/**\n * This function generates an argument for the {@link dc.coordinateGridMixin Coordinate Grid Chart}\n * {@link dc.coordinateGridMixin#xUnits .xUnits} function specifying that the x values are floating-point\n * numbers with the given precision.\n * The returned function determines how many values at the given precision will fit into the range\n * supplied in its start and end parameters.\n * @method precision\n * @memberof dc.units.fp\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @example\n * // specify values (and ticks) every 0.1 units\n * chart.xUnits(dc.units.fp.precision(0.1)\n * // there are 500 units between 0.5 and 1 if the precision is 0.001\n * var thousandths = dc.units.fp.precision(0.001);\n * thousandths(0.5, 1.0) // returns 500\n * @param {Number} precision\n * @returns {Function} start-end unit function\n */\ndc.units.fp.precision = function (precision) {\n    var _f = function (s, e) {\n        var d = Math.abs((e - s) / _f.resolution);\n        if (dc.utils.isNegligible(d - Math.floor(d))) {\n            return Math.floor(d);\n        } else {\n            return Math.ceil(d);\n        }\n    };\n    _f.resolution = precision;\n    return _f;\n};\n\ndc.round = {};\ndc.round.floor = function (n) {\n    return Math.floor(n);\n};\ndc.round.ceil = function (n) {\n    return Math.ceil(n);\n};\ndc.round.round = function (n) {\n    return Math.round(n);\n};\n\ndc.override = function (obj, functionName, newFunction) {\n    var existingFunction = obj[functionName];\n    obj['_' + functionName] = existingFunction;\n    obj[functionName] = newFunction;\n};\n\ndc.renderlet = function (_) {\n    if (!arguments.length) {\n        return dc._renderlet;\n    }\n    dc._renderlet = _;\n    return dc;\n};\n\ndc.instanceOfChart = function (o) {\n    return o instanceof Object && o.__dcFlag__ && true;\n};\n\ndc.errors = {};\n\ndc.errors.Exception = function (msg) {\n    var _msg = msg || 'Unexpected internal error';\n\n    this.message = _msg;\n\n    this.toString = function () {\n        return _msg;\n    };\n    this.stack = (new Error()).stack;\n};\ndc.errors.Exception.prototype = Object.create(Error.prototype);\ndc.errors.Exception.prototype.constructor = dc.errors.Exception;\n\ndc.errors.InvalidStateException = function () {\n    dc.errors.Exception.apply(this, arguments);\n};\n\ndc.errors.InvalidStateException.prototype = Object.create(dc.errors.Exception.prototype);\ndc.errors.InvalidStateException.prototype.constructor = dc.errors.InvalidStateException;\n\ndc.errors.BadArgumentException = function () {\n    dc.errors.Exception.apply(this, arguments);\n};\n\ndc.errors.BadArgumentException.prototype = Object.create(dc.errors.Exception.prototype);\ndc.errors.BadArgumentException.prototype.constructor = dc.errors.BadArgumentException;\n\n/**\n * The default date format for dc.js\n * @name dateFormat\n * @memberof dc\n * @type {Function}\n * @default d3.time.format('%m/%d/%Y')\n */\ndc.dateFormat = d3.time.format('%m/%d/%Y');\n\n/**\n * @namespace printers\n * @memberof dc\n * @type {{}}\n */\ndc.printers = {};\n\n/**\n * Converts a list of filters into a readable string.\n * @method filters\n * @memberof dc.printers\n * @param {Array<dc.filters>} filters\n * @returns {String}\n */\ndc.printers.filters = function (filters) {\n    var s = '';\n\n    for (var i = 0; i < filters.length; ++i) {\n        if (i > 0) {\n            s += ', ';\n        }\n        s += dc.printers.filter(filters[i]);\n    }\n\n    return s;\n};\n\n/**\n * Converts a filter into a readable string.\n * @method filter\n * @memberof dc.printers\n * @param {dc.filters|any|Array<any>} filter\n * @returns {String}\n */\ndc.printers.filter = function (filter) {\n    var s = '';\n\n    if (typeof filter !== 'undefined' && filter !== null) {\n        if (filter instanceof Array) {\n            if (filter.length >= 2) {\n                s = '[' + dc.utils.printSingleValue(filter[0]) + ' -> ' + dc.utils.printSingleValue(filter[1]) + ']';\n            } else if (filter.length >= 1) {\n                s = dc.utils.printSingleValue(filter[0]);\n            }\n        } else {\n            s = dc.utils.printSingleValue(filter);\n        }\n    }\n\n    return s;\n};\n\n/**\n * Returns a function that given a string property name, can be used to pluck the property off an object.  A function\n * can be passed as the second argument to also alter the data being returned.\n *\n * This can be a useful shorthand method to create accessor functions.\n * @method pluck\n * @memberof dc\n * @example\n * var xPluck = dc.pluck('x');\n * var objA = {x: 1};\n * xPluck(objA) // 1\n * @example\n * var xPosition = dc.pluck('x', function (x, i) {\n *     // `this` is the original datum,\n *     // `x` is the x property of the datum,\n *     // `i` is the position in the array\n *     return this.radius + x;\n * });\n * dc.selectAll('.circle').data(...).x(xPosition);\n * @param {String} n\n * @param {Function} [f]\n * @returns {Function}\n */\ndc.pluck = function (n, f) {\n    if (!f) {\n        return function (d) { return d[n]; };\n    }\n    return function (d, i) { return f.call(d, d[n], i); };\n};\n\n/**\n * @namespace utils\n * @memberof dc\n * @type {{}}\n */\ndc.utils = {};\n\n/**\n * Print a single value filter.\n * @method printSingleValue\n * @memberof dc.utils\n * @param {any} filter\n * @returns {String}\n */\ndc.utils.printSingleValue = function (filter) {\n    var s = '' + filter;\n\n    if (filter instanceof Date) {\n        s = dc.dateFormat(filter);\n    } else if (typeof(filter) === 'string') {\n        s = filter;\n    } else if (dc.utils.isFloat(filter)) {\n        s = dc.utils.printSingleValue.fformat(filter);\n    } else if (dc.utils.isInteger(filter)) {\n        s = Math.round(filter);\n    }\n\n    return s;\n};\ndc.utils.printSingleValue.fformat = d3.format('.2f');\n\n/**\n * Arbitrary add one value to another.\n * @method add\n * @memberof dc.utils\n * @todo\n * These assume than any string r is a percentage (whether or not it includes %).\n * They also generate strange results if l is a string.\n * @param {String|Date|Number} l the value to modify\n * @param {Number} r the amount by which to modify the value\n * @param {String} [t] if `l` is a `Date`, the\n * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n * the `d3.time` namespace\n * @returns {String|Date|Number}\n */\ndc.utils.add = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() + r);\n        }\n        t = t || 'day';\n        return d3.time[t].offset(l, r);\n    } else if (typeof r === 'string') {\n        var percentage = (+r / 100);\n        return l > 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l + r;\n    }\n};\n\n/**\n * Arbitrary subtract one value from another.\n * @method subtract\n * @memberof dc.utils\n * @todo\n * These assume than any string r is a percentage (whether or not it includes %).\n * They also generate strange results if l is a string.\n * @param {String|Date|Number} l the value to modify\n * @param {Number} r the amount by which to modify the value\n * @param {String} [t] if `l` is a `Date`, the\n * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n * the `d3.time` namespace\n * @returns {String|Date|Number}\n */\ndc.utils.subtract = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() - r);\n        }\n        t = t || 'day';\n        return d3.time[t].offset(l, -r);\n    } else if (typeof r === 'string') {\n        var percentage = (+r / 100);\n        return l < 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l - r;\n    }\n};\n\n/**\n * Is the value a number?\n * @method isNumber\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isNumber = function (n) {\n    return n === +n;\n};\n\n/**\n * Is the value a float?\n * @method isFloat\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isFloat = function (n) {\n    return n === +n && n !== (n | 0);\n};\n\n/**\n * Is the value an integer?\n * @method isInteger\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isInteger = function (n) {\n    return n === +n && n === (n | 0);\n};\n\n/**\n * Is the value very close to zero?\n * @method isNegligible\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isNegligible = function (n) {\n    return !dc.utils.isNumber(n) || (n < dc.constants.NEGLIGIBLE_NUMBER && n > -dc.constants.NEGLIGIBLE_NUMBER);\n};\n\n/**\n * Ensure the value is no greater or less than the min/max values.  If it is return the boundary value.\n * @method clamp\n * @memberof dc.utils\n * @param {any} val\n * @param {any} min\n * @param {any} max\n * @returns {any}\n */\ndc.utils.clamp = function (val, min, max) {\n    return val < min ? min : (val > max ? max : val);\n};\n\n/**\n * Using a simple static counter, provide a unique integer id.\n * @method uniqueId\n * @memberof dc.utils\n * @returns {Number}\n */\nvar _idCounter = 0;\ndc.utils.uniqueId = function () {\n    return ++_idCounter;\n};\n\n/**\n * Convert a name to an ID.\n * @method nameToId\n * @memberof dc.utils\n * @param {String} name\n * @returns {String}\n */\ndc.utils.nameToId = function (name) {\n    return name.toLowerCase().replace(/[\\s]/g, '_').replace(/[\\.']/g, '');\n};\n\n/**\n * Append or select an item on a parent element.\n * @method appendOrSelect\n * @memberof dc.utils\n * @param {d3.selection} parent\n * @param {String} selector\n * @param {String} tag\n * @returns {d3.selection}\n */\ndc.utils.appendOrSelect = function (parent, selector, tag) {\n    tag = tag || selector;\n    var element = parent.select(selector);\n    if (element.empty()) {\n        element = parent.append(tag);\n    }\n    return element;\n};\n\n/**\n * Return the number if the value is a number; else 0.\n * @method safeNumber\n * @memberof dc.utils\n * @param {Number|any} n\n * @returns {Number}\n */\ndc.utils.safeNumber = function (n) { return dc.utils.isNumber(+n) ? +n : 0;};\n\ndc.logger = {};\n\ndc.logger.enableDebugLog = false;\n\ndc.logger.warn = function (msg) {\n    if (console) {\n        if (console.warn) {\n            console.warn(msg);\n        } else if (console.log) {\n            console.log(msg);\n        }\n    }\n\n    return dc.logger;\n};\n\ndc.logger.debug = function (msg) {\n    if (dc.logger.enableDebugLog && console) {\n        if (console.debug) {\n            console.debug(msg);\n        } else if (console.log) {\n            console.log(msg);\n        }\n    }\n\n    return dc.logger;\n};\n\ndc.logger.deprecate = function (fn, msg) {\n    // Allow logging of deprecation\n    var warned = false;\n    function deprecated () {\n        if (!warned) {\n            dc.logger.warn(msg);\n            warned = true;\n        }\n        return fn.apply(this, arguments);\n    }\n    return deprecated;\n};\n\ndc.events = {\n    current: null\n};\n\n/**\n * This function triggers a throttled event function with a specified delay (in milli-seconds).  Events\n * that are triggered repetitively due to user interaction such brush dragging might flood the library\n * and invoke more renders than can be executed in time. Using this function to wrap your event\n * function allows the library to smooth out the rendering by throttling events and only responding to\n * the most recent event.\n * @name events.trigger\n * @memberof dc\n * @example\n * chart.on('renderlet', function(chart) {\n *     // smooth the rendering through event throttling\n *     dc.events.trigger(function(){\n *         // focus some other chart to the range selected by user on this chart\n *         someOtherChart.focus(chart.filter());\n *     });\n * })\n * @param {Function} closure\n * @param {Number} [delay]\n */\ndc.events.trigger = function (closure, delay) {\n    if (!delay) {\n        closure();\n        return;\n    }\n\n    dc.events.current = closure;\n\n    setTimeout(function () {\n        if (closure === dc.events.current) {\n            closure();\n        }\n    }, delay);\n};\n\n/**\n * The dc.js filters are functions which are passed into crossfilter to chose which records will be\n * accumulated to produce values for the charts.  In the crossfilter model, any filters applied on one\n * dimension will affect all the other dimensions but not that one.  dc always applies a filter\n * function to the dimension; the function combines multiple filters and if any of them accept a\n * record, it is filtered in.\n *\n * These filter constructors are used as appropriate by the various charts to implement brushing.  We\n * mention below which chart uses which filter.  In some cases, many instances of a filter will be added.\n *\n * Each of the dc.js filters is an object with the following properties:\n * * `isFiltered` - a function that returns true if a value is within the filter\n * * `filterType` - a string identifying the filter, here the name of the constructor\n *\n * Currently these filter objects are also arrays, but this is not a requirement. Custom filters\n * can be used as long as they have the properties above.\n * @namespace filters\n * @memberof dc\n * @type {{}}\n */\ndc.filters = {};\n\n/**\n * RangedFilter is a filter which accepts keys between `low` and `high`.  It is used to implement X\n * axis brushing for the {@link dc.coordinateGridMixin coordinate grid charts}.\n *\n * Its `filterType` is 'RangedFilter'\n * @name RangedFilter\n * @memberof dc.filters\n * @param {Number} low\n * @param {Number} high\n * @returns {Array<Number>}\n * @constructor\n */\ndc.filters.RangedFilter = function (low, high) {\n    var range = new Array(low, high);\n    range.isFiltered = function (value) {\n        return value >= this[0] && value < this[1];\n    };\n    range.filterType = 'RangedFilter';\n\n    return range;\n};\n\n/**\n * TwoDimensionalFilter is a filter which accepts a single two-dimensional value.  It is used by the\n * {@link dc.heatMap heat map chart} to include particular cells as they are clicked.  (Rows and columns are\n * filtered by filtering all the cells in the row or column.)\n *\n * Its `filterType` is 'TwoDimensionalFilter'\n * @name TwoDimensionalFilter\n * @memberof dc.filters\n * @param {Array<Number>} filter\n * @returns {Array<Number>}\n * @constructor\n */\ndc.filters.TwoDimensionalFilter = function (filter) {\n    if (filter === null) { return null; }\n\n    var f = filter;\n    f.isFiltered = function (value) {\n        return value.length && value.length === f.length &&\n               value[0] === f[0] && value[1] === f[1];\n    };\n    f.filterType = 'TwoDimensionalFilter';\n\n    return f;\n};\n\n/**\n * The RangedTwoDimensionalFilter allows filtering all values which fit within a rectangular\n * region. It is used by the {@link dc.scatterPlot scatter plot} to implement rectangular brushing.\n *\n * It takes two two-dimensional points in the form `[[x1,y1],[x2,y2]]`, and normalizes them so that\n * `x1 <= x2` and `y1 <= y2`. It then returns a filter which accepts any points which are in the\n * rectangular range including the lower values but excluding the higher values.\n *\n * If an array of two values are given to the RangedTwoDimensionalFilter, it interprets the values as\n * two x coordinates `x1` and `x2` and returns a filter which accepts any points for which `x1 <= x <\n * x2`.\n *\n * Its `filterType` is 'RangedTwoDimensionalFilter'\n * @name RangedTwoDimensionalFilter\n * @memberof dc.filters\n * @param {Array<Array<Number>>} filter\n * @returns {Array<Array<Number>>}\n * @constructor\n */\ndc.filters.RangedTwoDimensionalFilter = function (filter) {\n    if (filter === null) { return null; }\n\n    var f = filter;\n    var fromBottomLeft;\n\n    if (f[0] instanceof Array) {\n        fromBottomLeft = [\n            [Math.min(filter[0][0], filter[1][0]), Math.min(filter[0][1], filter[1][1])],\n            [Math.max(filter[0][0], filter[1][0]), Math.max(filter[0][1], filter[1][1])]\n        ];\n    } else {\n        fromBottomLeft = [[filter[0], -Infinity], [filter[1], Infinity]];\n    }\n\n    f.isFiltered = function (value) {\n        var x, y;\n\n        if (value instanceof Array) {\n            x = value[0];\n            y = value[1];\n        } else {\n            x = value;\n            y = fromBottomLeft[0][1];\n        }\n\n        return x >= fromBottomLeft[0][0] && x < fromBottomLeft[1][0] &&\n               y >= fromBottomLeft[0][1] && y < fromBottomLeft[1][1];\n    };\n    f.filterType = 'RangedTwoDimensionalFilter';\n\n    return f;\n};\n\n/**\n * `dc.baseMixin` is an abstract functional object representing a basic `dc` chart object\n * for all chart and widget implementations. Methods from the {@link #dc.baseMixin dc.baseMixin} are inherited\n * and available on all chart implementations in the `dc` library.\n * @name baseMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.baseMixin}\n */\ndc.baseMixin = function (_chart) {\n    _chart.__dcFlag__ = dc.utils.uniqueId();\n\n    var _dimension;\n    var _group;\n\n    var _anchor;\n    var _root;\n    var _svg;\n    var _isChild;\n\n    var _minWidth = 200;\n    var _defaultWidthCalc = function (element) {\n        var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n        return (width && width > _minWidth) ? width : _minWidth;\n    };\n    var _widthCalc = _defaultWidthCalc;\n\n    var _minHeight = 200;\n    var _defaultHeightCalc = function (element) {\n        var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n        return (height && height > _minHeight) ? height : _minHeight;\n    };\n    var _heightCalc = _defaultHeightCalc;\n    var _width, _height;\n    var _useViewBoxResizing = false;\n\n    var _keyAccessor = dc.pluck('key');\n    var _valueAccessor = dc.pluck('value');\n    var _label = dc.pluck('key');\n\n    var _ordering = dc.pluck('key');\n    var _orderSort;\n\n    var _renderLabel = false;\n\n    var _title = function (d) {\n        return _chart.keyAccessor()(d) + ': ' + _chart.valueAccessor()(d);\n    };\n    var _renderTitle = true;\n    var _controlsUseVisibility = false;\n\n    var _transitionDuration = 750;\n\n    var _transitionDelay = 0;\n\n    var _filterPrinter = dc.printers.filters;\n\n    var _mandatoryAttributes = ['dimension', 'group'];\n\n    var _chartGroup = dc.constants.DEFAULT_CHART_GROUP;\n\n    var _listeners = d3.dispatch(\n        'preRender',\n        'postRender',\n        'preRedraw',\n        'postRedraw',\n        'filtered',\n        'zoomed',\n        'renderlet',\n        'pretransition');\n\n    var _legend;\n    var _commitHandler;\n\n    var _filters = [];\n    var _filterHandler = function (dimension, filters) {\n        if (filters.length === 0) {\n            dimension.filter(null);\n        } else if (filters.length === 1 && !filters[0].isFiltered) {\n            // single value and not a function-based filter\n            dimension.filterExact(filters[0]);\n        } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n            // single range-based filter\n            dimension.filterRange(filters[0]);\n        } else {\n            dimension.filterFunction(function (d) {\n                for (var i = 0; i < filters.length; i++) {\n                    var filter = filters[i];\n                    if (filter.isFiltered && filter.isFiltered(d)) {\n                        return true;\n                    } else if (filter <= d && filter >= d) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n        }\n        return filters;\n    };\n\n    var _data = function (group) {\n        return group.all();\n    };\n\n    /**\n     * Set or get the height attribute of a chart. The height is applied to the SVGElement generated by\n     * the chart when rendered (or re-rendered). If a value is given, then it will be used to calculate\n     * the new height and the chart returned for method chaining.  The value can either be a numeric, a\n     * function, or falsy. If no value is specified then the value of the current height attribute will\n     * be returned.\n     *\n     * By default, without an explicit height being given, the chart will select the width of its\n     * anchor element. If that isn't possible it defaults to 200 (provided by the\n     * {@link dc.baseMixin#minHeight minHeight} property). Setting the value falsy will return\n     * the chart to the default behavior.\n     * @method height\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#minHeight minHeight}\n     * @example\n     * // Default height\n     * chart.height(function (element) {\n     *     var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n     *     return (height && height > chart.minHeight()) ? height : chart.minHeight();\n     * });\n     *\n     * chart.height(250); // Set the chart's height to 250px;\n     * chart.height(function(anchor) { return doSomethingWith(anchor); }); // set the chart's height with a function\n     * chart.height(null); // reset the height to the default auto calculation\n     * @param {Number|Function} [height]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.height = function (height) {\n        if (!arguments.length) {\n            if (!dc.utils.isNumber(_height)) {\n                // only calculate once\n                _height = _heightCalc(_root.node());\n            }\n            return _height;\n        }\n        _heightCalc = d3.functor(height || _defaultHeightCalc);\n        _height = undefined;\n        return _chart;\n    };\n\n    /**\n     * Set or get the width attribute of a chart.\n     * @method width\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#height height}\n     * @see {@link dc.baseMixin#minWidth minWidth}\n     * @example\n     * // Default width\n     * chart.width(function (element) {\n     *     var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n     *     return (width && width > chart.minWidth()) ? width : chart.minWidth();\n     * });\n     * @param {Number|Function} [width]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.width = function (width) {\n        if (!arguments.length) {\n            if (!dc.utils.isNumber(_width)) {\n                // only calculate once\n                _width = _widthCalc(_root.node());\n            }\n            return _width;\n        }\n        _widthCalc = d3.functor(width || _defaultWidthCalc);\n        _width = undefined;\n        return _chart;\n    };\n\n    /**\n     * Set or get the minimum width attribute of a chart. This only has effect when used with the default\n     * {@link dc.baseMixin#width width} function.\n     * @method minWidth\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#width width}\n     * @param {Number} [minWidth=200]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.minWidth = function (minWidth) {\n        if (!arguments.length) {\n            return _minWidth;\n        }\n        _minWidth = minWidth;\n        return _chart;\n    };\n\n    /**\n     * Set or get the minimum height attribute of a chart. This only has effect when used with the default\n     * {@link dc.baseMixin#height height} function.\n     * @method minHeight\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#height height}\n     * @param {Number} [minHeight=200]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.minHeight = function (minHeight) {\n        if (!arguments.length) {\n            return _minHeight;\n        }\n        _minHeight = minHeight;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off using the SVG\n     * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox `viewBox` attribute}.\n     * When enabled, `viewBox` will be set on the svg root element instead of `width` and `height`.\n     * Requires that the chart aspect ratio be defined using chart.width(w) and chart.height(h).\n     *\n     * This will maintain the aspect ratio while enabling the chart to resize responsively to the\n     * space given to the chart using CSS. For example, the chart can use `width: 100%; height:\n     * 100%` or absolute positioning to resize to its parent div.\n     *\n     * Since the text will be sized as if the chart is drawn according to the width and height, and\n     * will be resized if the chart is any other size, you need to set the chart width and height so\n     * that the text looks good. In practice, 600x400 seems to work pretty well for most charts.\n     *\n     * You can see examples of this resizing strategy in the [Chart Resizing\n     * Examples](http://dc-js.github.io/dc.js/resizing/); just add `?resize=viewbox` to any of the\n     * one-chart examples to enable `useViewBoxResizing`.\n     * @method useViewBoxResizing\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [useViewBoxResizing=false]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.useViewBoxResizing = function (useViewBoxResizing) {\n        if (!arguments.length) {\n            return _useViewBoxResizing;\n        }\n        _useViewBoxResizing = useViewBoxResizing;\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the dimension attribute of a chart. In `dc`, a dimension can be any valid\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter dimension}\n     *\n     * If a value is given, then it will be used as the new dimension. If no value is specified then\n     * the current dimension will be returned.\n     * @method dimension\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter.dimension}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(dc.pluck('key'));\n     * chart.dimension(dimension);\n     * @param {crossfilter.dimension} [dimension]\n     * @returns {crossfilter.dimension|dc.baseMixin}\n     */\n    _chart.dimension = function (dimension) {\n        if (!arguments.length) {\n            return _dimension;\n        }\n        _dimension = dimension;\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * Set the data callback or retrieve the chart's data set. The data callback is passed the chart's\n     * group and by default will return\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all}.\n     * This behavior may be modified to, for instance, return only the top 5 groups.\n     * @method data\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // Default data function\n     * chart.data(function (group) { return group.all(); });\n     *\n     * chart.data(function (group) { return group.top(5); });\n     * @param {Function} [callback]\n     * @returns {*|dc.baseMixin}\n     */\n    _chart.data = function (callback) {\n        if (!arguments.length) {\n            return _data.call(_chart, _group);\n        }\n        _data = d3.functor(callback);\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the group attribute of a chart. In `dc` a group is a\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter group}.\n     * Usually the group should be created from the particular dimension associated with the same chart. If a value is\n     * given, then it will be used as the new group.\n     *\n     * If no value specified then the current group will be returned.\n     * If `name` is specified then it will be used to generate legend label.\n     * @method group\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(dc.pluck('key'));\n     * chart.dimension(dimension);\n     * chart.group(dimension.group(crossfilter.reduceSum()));\n     * @param {crossfilter.group} [group]\n     * @param {String} [name]\n     * @returns {crossfilter.group|dc.baseMixin}\n     */\n    _chart.group = function (group, name) {\n        if (!arguments.length) {\n            return _group;\n        }\n        _group = group;\n        _chart._groupName = name;\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * Get or set an accessor to order ordinal dimensions.  The chart uses\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n     * to sort elements; this accessor returns the value to order on.\n     * @method ordering\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n     * @example\n     * // Default ordering accessor\n     * _chart.ordering(dc.pluck('key'));\n     * @param {Function} [orderFunction]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.ordering = function (orderFunction) {\n        if (!arguments.length) {\n            return _ordering;\n        }\n        _ordering = orderFunction;\n        _orderSort = crossfilter.quicksort.by(_ordering);\n        _chart.expireCache();\n        return _chart;\n    };\n\n    _chart._computeOrderedGroups = function (data) {\n        var dataCopy = data.slice(0);\n\n        if (dataCopy.length <= 1) {\n            return dataCopy;\n        }\n\n        if (!_orderSort) {\n            _orderSort = crossfilter.quicksort.by(_ordering);\n        }\n\n        return _orderSort(dataCopy, 0, dataCopy.length);\n    };\n\n    /**\n     * Clear all filters associated with this chart. The same effect can be achieved by calling\n     * {@link dc.baseMixin#filter chart.filter(null)}.\n     * @method filterAll\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.filterAll = function () {\n        return _chart.filter(null);\n    };\n\n    /**\n     * Execute d3 single selection in the chart's scope using the given selector and return the d3\n     * selection.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @method select\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_select d3.select}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').select(selector)\n     * chart.select(selector)\n     * @returns {d3.selection}\n     */\n    _chart.select = function (s) {\n        return _root.select(s);\n    };\n\n    /**\n     * Execute in scope d3 selectAll using the given selector and return d3 selection result.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @method selectAll\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_selectAll d3.selectAll}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').selectAll(selector)\n     * chart.selectAll(selector)\n     * @returns {d3.selection}\n     */\n    _chart.selectAll = function (s) {\n        return _root ? _root.selectAll(s) : null;\n    };\n\n    /**\n     * Set the root SVGElement to either be an existing chart's root; or any valid [d3 single\n     * selector](https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements) specifying a dom\n     * block element such as a div; or a dom element or d3 selection. Optionally registers the chart\n     * within the chartGroup. This class is called internally on chart initialization, but be called\n     * again to relocate the chart. However, it will orphan any previously created SVGElements.\n     * @method anchor\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {anchorChart|anchorSelector|anchorNode} [parent]\n     * @param {String} [chartGroup]\n     * @returns {String|node|d3.selection|dc.baseMixin}\n     */\n    _chart.anchor = function (parent, chartGroup) {\n        if (!arguments.length) {\n            return _anchor;\n        }\n        if (dc.instanceOfChart(parent)) {\n            _anchor = parent.anchor();\n            _root = parent.root();\n            _isChild = true;\n        } else if (parent) {\n            if (parent.select && parent.classed) { // detect d3 selection\n                _anchor = parent.node();\n            } else {\n                _anchor = parent;\n            }\n            _root = d3.select(_anchor);\n            _root.classed(dc.constants.CHART_CLASS, true);\n            dc.registerChart(_chart, chartGroup);\n            _isChild = false;\n        } else {\n            throw new dc.errors.BadArgumentException('parent must be defined');\n        }\n        _chartGroup = chartGroup;\n        return _chart;\n    };\n\n    /**\n     * Returns the DOM id for the chart's anchored location.\n     * @method anchorName\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {String}\n     */\n    _chart.anchorName = function () {\n        var a = _chart.anchor();\n        if (a && a.id) {\n            return a.id;\n        }\n        if (a && a.replace) {\n            return a.replace('#', '');\n        }\n        return 'dc-chart' + _chart.chartID();\n    };\n\n    /**\n     * Returns the root element where a chart resides. Usually it will be the parent div element where\n     * the SVGElement was created. You can also pass in a new root element however this is usually handled by\n     * dc internally. Resetting the root element on a chart outside of dc internals may have\n     * unexpected consequences.\n     * @method root\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement HTMLElement}\n     * @param {HTMLElement} [rootElement]\n     * @returns {HTMLElement|dc.baseMixin}\n     */\n    _chart.root = function (rootElement) {\n        if (!arguments.length) {\n            return _root;\n        }\n        _root = rootElement;\n        return _chart;\n    };\n\n    /**\n     * Returns the top SVGElement for this specific chart. You can also pass in a new SVGElement,\n     * however this is usually handled by dc internally. Resetting the SVGElement on a chart outside\n     * of dc internals may have unexpected consequences.\n     * @method svg\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @param {SVGElement|d3.selection} [svgElement]\n     * @returns {SVGElement|d3.selection|dc.baseMixin}\n     */\n    _chart.svg = function (svgElement) {\n        if (!arguments.length) {\n            return _svg;\n        }\n        _svg = svgElement;\n        return _chart;\n    };\n\n    /**\n     * Remove the chart's SVGElements from the dom and recreate the container SVGElement.\n     * @method resetSvg\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @returns {SVGElement}\n     */\n    _chart.resetSvg = function () {\n        _chart.select('svg').remove();\n        return generateSvg();\n    };\n\n    function sizeSvg () {\n        if (_svg) {\n            if (!_useViewBoxResizing) {\n                _svg\n                    .attr('width', _chart.width())\n                    .attr('height', _chart.height());\n            } else if (!_svg.attr('viewBox')) {\n                _svg\n                    .attr('viewBox', '0 0 ' + _chart.width() + ' ' + _chart.height());\n            }\n        }\n    }\n\n    function generateSvg () {\n        _svg = _chart.root().append('svg');\n        sizeSvg();\n        return _svg;\n    }\n\n    /**\n     * Set or get the filter printer function. The filter printer function is used to generate human\n     * friendly text for filter value(s) associated with the chart instance. The text will get shown\n     * in the `.filter element; see {@link dc.baseMixin#turnOnControls turnOnControls}.\n     *\n     * By default dc charts use a default filter printer {@link dc.printers.filters dc.printers.filters}\n     * that provides simple printing support for both single value and ranged filters.\n     * @method filterPrinter\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // for a chart with an ordinal brush, print the filters in upper case\n     * chart.filterPrinter(function(filters) {\n     *   return filters.map(function(f) { return f.toUpperCase(); }).join(', ');\n     * });\n     * // for a chart with a range brush, print the filter as start and extent\n     * chart.filterPrinter(function(filters) {\n     *   return 'start ' + dc.utils.printSingleValue(filters[0][0]) +\n     *     ' extent ' + dc.utils.printSingleValue(filters[0][1] - filters[0][0]);\n     * });\n     * @param {Function} [filterPrinterFunction=dc.printers.filters]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.filterPrinter = function (filterPrinterFunction) {\n        if (!arguments.length) {\n            return _filterPrinter;\n        }\n        _filterPrinter = filterPrinterFunction;\n        return _chart;\n    };\n\n    /**\n     * If set, use the `visibility` attribute instead of the `display` attribute for showing/hiding\n     * chart reset and filter controls, for less disruption to the layout.\n     * @method controlsUseVisibility\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [controlsUseVisibility=false]\n     * @returns {Boolean|dc.baseMixin}\n     **/\n    _chart.controlsUseVisibility = function (useVisibility) {\n        if (!arguments.length) {\n            return _controlsUseVisibility;\n        }\n        _controlsUseVisibility = useVisibility;\n        return _chart;\n    };\n\n    /**\n     * Turn on optional control elements within the root element. dc currently supports the\n     * following html control elements.\n     * * root.selectAll('.reset') - elements are turned on if the chart has an active filter. This type\n     * of control element is usually used to store a reset link to allow user to reset filter on a\n     * certain chart. This element will be turned off automatically if the filter is cleared.\n     * * root.selectAll('.filter') elements are turned on if the chart has an active filter. The text\n     * content of this element is then replaced with the current filter value using the filter printer\n     * function. This type of element will be turned off automatically if the filter is cleared.\n     * @method turnOnControls\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.turnOnControls = function () {\n        if (_root) {\n            var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n            _chart.selectAll('.reset').style(attribute, null);\n            _chart.selectAll('.filter').text(_filterPrinter(_chart.filters())).style(attribute, null);\n        }\n        return _chart;\n    };\n\n    /**\n     * Turn off optional control elements within the root element.\n     * @method turnOffControls\n     * @memberof dc.baseMixin\n     * @see {@link dc.baseMixin#turnOnControls turnOnControls}\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.turnOffControls = function () {\n        if (_root) {\n            var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n            var value = _chart.controlsUseVisibility() ? 'hidden' : 'none';\n            _chart.selectAll('.reset').style(attribute, value);\n            _chart.selectAll('.filter').style(attribute, value).text(_chart.filter());\n        }\n        return _chart;\n    };\n\n    /**\n     * Set or get the animation transition duration (in milliseconds) for this chart instance.\n     * @method transitionDuration\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Number} [duration=750]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.transitionDuration = function (duration) {\n        if (!arguments.length) {\n            return _transitionDuration;\n        }\n        _transitionDuration = duration;\n        return _chart;\n    };\n\n    /**\n     * Set or get the animation transition delay (in milliseconds) for this chart instance.\n     * @method transitionDelay\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Number} [delay=0]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.transitionDelay = function (delay) {\n        if (!arguments.length) {\n            return _transitionDelay;\n        }\n        _transitionDelay = delay;\n        return _chart;\n    };\n\n    _chart._mandatoryAttributes = function (_) {\n        if (!arguments.length) {\n            return _mandatoryAttributes;\n        }\n        _mandatoryAttributes = _;\n        return _chart;\n    };\n\n    function checkForMandatoryAttributes (a) {\n        if (!_chart[a] || !_chart[a]()) {\n            throw new dc.errors.InvalidStateException('Mandatory attribute chart.' + a +\n                ' is missing on chart[#' + _chart.anchorName() + ']');\n        }\n    }\n\n    /**\n     * Invoking this method will force the chart to re-render everything from scratch. Generally it\n     * should only be used to render the chart for the first time on the page or if you want to make\n     * sure everything is redrawn from scratch instead of relying on the default incremental redrawing\n     * behaviour.\n     * @method render\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.render = function () {\n        _height = _width = undefined; // force recalculate\n        _listeners.preRender(_chart);\n\n        if (_mandatoryAttributes) {\n            _mandatoryAttributes.forEach(checkForMandatoryAttributes);\n        }\n\n        var result = _chart._doRender();\n\n        if (_legend) {\n            _legend.render();\n        }\n\n        _chart._activateRenderlets('postRender');\n\n        return result;\n    };\n\n    _chart._activateRenderlets = function (event) {\n        _listeners.pretransition(_chart);\n        if (_chart.transitionDuration() > 0 && _svg) {\n            _svg.transition().duration(_chart.transitionDuration()).delay(_chart.transitionDelay())\n                .each('end', function () {\n                    _listeners.renderlet(_chart);\n                    if (event) {\n                        _listeners[event](_chart);\n                    }\n                });\n        } else {\n            _listeners.renderlet(_chart);\n            if (event) {\n                _listeners[event](_chart);\n            }\n        }\n    };\n\n    /**\n     * Calling redraw will cause the chart to re-render data changes incrementally. If there is no\n     * change in the underlying data dimension then calling this method will have no effect on the\n     * chart. Most chart interaction in dc will automatically trigger this method through internal\n     * events (in particular {@link dc.redrawAll dc.redrawAll}); therefore, you only need to\n     * manually invoke this function if data is manipulated outside of dc's control (for example if\n     * data is loaded in the background using\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}).\n     * @method redraw\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.redraw = function () {\n        sizeSvg();\n        _listeners.preRedraw(_chart);\n\n        var result = _chart._doRedraw();\n\n        if (_legend) {\n            _legend.render();\n        }\n\n        _chart._activateRenderlets('postRedraw');\n\n        return result;\n    };\n\n    /**\n     * Gets/sets the commit handler. If the chart has a commit handler, the handler will be called when\n     * the chart's filters have changed, in order to send the filter data asynchronously to a server.\n     *\n     * Unlike other functions in dc.js, the commit handler is asynchronous. It takes two arguments:\n     * a flag indicating whether this is a render (true) or a redraw (false), and a callback to be\n     * triggered once the commit is filtered. The callback has the standard node.js continuation signature\n     * with error first and result second.\n     * @method commitHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.commitHandler = function (commitHandler) {\n        if (!arguments.length) {\n            return _commitHandler;\n        }\n        _commitHandler = commitHandler;\n        return _chart;\n    };\n\n    /**\n     * Redraws all charts in the same group as this chart, typically in reaction to a filter\n     * change. If the chart has a {@link dc.baseMixin.commitFilter commitHandler}, it will\n     * be executed and waited for.\n     * @method redrawGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.redrawGroup = function () {\n        if (_commitHandler) {\n            _commitHandler(false, function (error, result) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    dc.redrawAll(_chart.chartGroup());\n                }\n            });\n        } else {\n            dc.redrawAll(_chart.chartGroup());\n        }\n        return _chart;\n    };\n\n    /**\n     * Renders all charts in the same group as this chart. If the chart has a\n     * {@link dc.baseMixin.commitFilter commitHandler}, it will be executed and waited for\n     * @method renderGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.renderGroup = function () {\n        if (_commitHandler) {\n            _commitHandler(false, function (error, result) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    dc.renderAll(_chart.chartGroup());\n                }\n            });\n        } else {\n            dc.renderAll(_chart.chartGroup());\n        }\n        return _chart;\n    };\n\n    _chart._invokeFilteredListener = function (f) {\n        if (f !== undefined) {\n            _listeners.filtered(_chart, f);\n        }\n    };\n\n    _chart._invokeZoomedListener = function () {\n        _listeners.zoomed(_chart);\n    };\n\n    var _hasFilterHandler = function (filters, filter) {\n        if (filter === null || typeof(filter) === 'undefined') {\n            return filters.length > 0;\n        }\n        return filters.some(function (f) {\n            return filter <= f && filter >= f;\n        });\n    };\n\n    /**\n     * Set or get the has-filter handler. The has-filter handler is a function that checks to see if\n     * the chart's current filters (first argument) include a specific filter (second argument).  Using a custom has-filter handler allows\n     * you to change the way filters are checked for and replaced.\n     * @method hasFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default has-filter handler\n     * chart.hasFilterHandler(function (filters, filter) {\n     *     if (filter === null || typeof(filter) === 'undefined') {\n     *         return filters.length > 0;\n     *     }\n     *     return filters.some(function (f) {\n     *         return filter <= f && filter >= f;\n     *     });\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.hasFilterHandler(function(filters, filter) {\n     *     return false;\n     * });\n     * @param {Function} [hasFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.hasFilterHandler = function (hasFilterHandler) {\n        if (!arguments.length) {\n            return _hasFilterHandler;\n        }\n        _hasFilterHandler = hasFilterHandler;\n        return _chart;\n    };\n\n    /**\n     * Check whether any active filter or a specific filter is associated with particular chart instance.\n     * This function is **not chainable**.\n     * @method hasFilter\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#hasFilterHandler hasFilterHandler}\n     * @param {*} [filter]\n     * @returns {Boolean}\n     */\n    _chart.hasFilter = function (filter) {\n        return _hasFilterHandler(_filters, filter);\n    };\n\n    var _removeFilterHandler = function (filters, filter) {\n        for (var i = 0; i < filters.length; i++) {\n            if (filters[i] <= filter && filters[i] >= filter) {\n                filters.splice(i, 1);\n                break;\n            }\n        }\n        return filters;\n    };\n\n    /**\n     * Set or get the remove filter handler. The remove filter handler is a function that removes a\n     * filter from the chart's current filters. Using a custom remove filter handler allows you to\n     * change how filters are removed or perform additional work when removing a filter, e.g. when\n     * using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method removeFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default remove filter handler\n     * chart.removeFilterHandler(function (filters, filter) {\n     *     for (var i = 0; i < filters.length; i++) {\n     *         if (filters[i] <= filter && filters[i] >= filter) {\n     *             filters.splice(i, 1);\n     *             break;\n     *         }\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.removeFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [removeFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.removeFilterHandler = function (removeFilterHandler) {\n        if (!arguments.length) {\n            return _removeFilterHandler;\n        }\n        _removeFilterHandler = removeFilterHandler;\n        return _chart;\n    };\n\n    var _addFilterHandler = function (filters, filter) {\n        filters.push(filter);\n        return filters;\n    };\n\n    /**\n     * Set or get the add filter handler. The add filter handler is a function that adds a filter to\n     * the chart's filter list. Using a custom add filter handler allows you to change the way filters\n     * are added or perform additional work when adding a filter, e.g. when using a filter server other\n     * than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method addFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default add filter handler\n     * chart.addFilterHandler(function (filters, filter) {\n     *     filters.push(filter);\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.addFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [addFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.addFilterHandler = function (addFilterHandler) {\n        if (!arguments.length) {\n            return _addFilterHandler;\n        }\n        _addFilterHandler = addFilterHandler;\n        return _chart;\n    };\n\n    var _resetFilterHandler = function (filters) {\n        return [];\n    };\n\n    /**\n     * Set or get the reset filter handler. The reset filter handler is a function that resets the\n     * chart's filter list by returning a new list. Using a custom reset filter handler allows you to\n     * change the way filters are reset, or perform additional work when resetting the filters,\n     * e.g. when using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method resetFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default remove filter handler\n     * function (filters) {\n     *     return [];\n     * }\n     *\n     * // custom filter handler (no-op)\n     * chart.resetFilterHandler(function(filters) {\n     *     return filters;\n     * });\n     * @param {Function} [resetFilterHandler]\n     * @returns {dc.baseMixin}\n     */\n    _chart.resetFilterHandler = function (resetFilterHandler) {\n        if (!arguments.length) {\n            return _resetFilterHandler;\n        }\n        _resetFilterHandler = resetFilterHandler;\n        return _chart;\n    };\n\n    function applyFilters (filters) {\n        if (_chart.dimension() && _chart.dimension().filter) {\n            var fs = _filterHandler(_chart.dimension(), filters);\n            if (fs) {\n                filters = fs;\n            }\n        }\n        return filters;\n    }\n\n    /**\n     * Replace the chart filter. This is equivalent to calling `chart.filter(null).filter(filter)`\n     * but more efficient because the filter is only applied once.\n     *\n     * @method replaceFilter\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {*} [filter]\n     * @returns {dc.baseMixin}\n     **/\n    _chart.replaceFilter = function (filter) {\n        _filters = _resetFilterHandler(_filters);\n        _chart.filter(filter);\n        return _chart;\n    };\n\n    /**\n     * Filter the chart by the given parameter, or return the current filter if no input parameter\n     * is given.\n     *\n     * The filter parameter can take one of these forms:\n     * * A single value: the value will be toggled (added if it is not present in the current\n     * filters, removed if it is present)\n     * * An array containing a single array of values (`[[value,value,value]]`): each value is\n     * toggled\n     * * When appropriate for the chart, a {@link dc.filters dc filter object} such as\n     *   * {@link dc.filters.RangedFilter `dc.filters.RangedFilter`} for the\n     * {@link dc.coordinateGridMixin dc.coordinateGridMixin} charts\n     *   * {@link dc.filters.TwoDimensionalFilter `dc.filters.TwoDimensionalFilter`} for the\n     * {@link dc.heatMap heat map}\n     *   * {@link dc.filters.RangedTwoDimensionalFilter `dc.filters.RangedTwoDimensionalFilter`}\n     * for the {@link dc.scatterPlot scatter plot}\n     * * `null`: the filter will be reset using the\n     * {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n     *\n     * Note that this is always a toggle (even when it doesn't make sense for the filter type). If\n     * you wish to replace the current filter, either call `chart.filter(null)` first - or it's more\n     * efficient to call {@link dc.baseMixin#replaceFilter `chart.replaceFilter(filter)`} instead.\n     *\n     * Each toggle is executed by checking if the value is already present using the\n     * {@link dc.baseMixin#hasFilterHandler hasFilterHandler}; if it is not present, it is added\n     * using the {@link dc.baseMixin#addFilterHandler addFilterHandler}; if it is already present,\n     * it is removed using the {@link dc.baseMixin#removeFilterHandler removeFilterHandler}.\n     *\n     * Once the filters array has been updated, the filters are applied to the\n     * crossfilter dimension, using the {@link dc.baseMixin#filterHandler filterHandler}.\n     *\n     * Once you have set the filters, call {@link dc.baseMixin#redrawGroup `chart.redrawGroup()`}\n     * (or {@link dc.redrawAll `dc.redrawAll()`}) to redraw the chart's group.\n     * @method filter\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#addFilterHandler addFilterHandler}\n     * @see {@link dc.baseMixin#removeFilterHandler removeFilterHandler}\n     * @see {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n     * @see {@link dc.baseMixin#filterHandler filterHandler}\n     * @example\n     * // filter by a single string\n     * chart.filter('Sunday');\n     * // filter by a single age\n     * chart.filter(18);\n     * // filter by a set of states\n     * chart.filter([['MA', 'TX', 'ND', 'WA']]);\n     * // filter by range -- note the use of dc.filters.RangedFilter, which is different\n     * // from the syntax for filtering a crossfilter dimension directly, dimension.filter([15,20])\n     * chart.filter(dc.filters.RangedFilter(15,20));\n     * @param {*} [filter]\n     * @returns {dc.baseMixin}\n     */\n    _chart.filter = function (filter) {\n        if (!arguments.length) {\n            return _filters.length > 0 ? _filters[0] : null;\n        }\n        var filters = _filters;\n        if (filter instanceof Array && filter[0] instanceof Array && !filter.isFiltered) {\n            // toggle each filter\n            filter[0].forEach(function (f) {\n                if (_hasFilterHandler(filters, f)) {\n                    filters = _removeFilterHandler(filters, f);\n                } else {\n                    filters = _addFilterHandler(filters, f);\n                }\n            });\n        } else if (filter === null) {\n            filters = _resetFilterHandler(filters);\n        } else {\n            if (_hasFilterHandler(filters, filter)) {\n                filters = _removeFilterHandler(filters, filter);\n            } else {\n                filters = _addFilterHandler(filters, filter);\n            }\n        }\n        _filters = applyFilters(filters);\n        _chart._invokeFilteredListener(filter);\n\n        if (_root !== null && _chart.hasFilter()) {\n            _chart.turnOnControls();\n        } else {\n            _chart.turnOffControls();\n        }\n\n        return _chart;\n    };\n\n    /**\n     * Returns all current filters. This method does not perform defensive cloning of the internal\n     * filter array before returning, therefore any modification of the returned array will effect the\n     * chart's internal filter storage.\n     * @method filters\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {Array<*>}\n     */\n    _chart.filters = function () {\n        return _filters;\n    };\n\n    _chart.highlightSelected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, true);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n    };\n\n    _chart.fadeDeselected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, true);\n    };\n\n    _chart.resetHighlight = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n    };\n\n    /**\n     * This function is passed to d3 as the onClick handler for each chart. The default behavior is to\n     * filter on the clicked datum (passed to the callback) and redraw the chart group.\n     * @method onClick\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {*} datum\n     */\n    _chart.onClick = function (datum) {\n        var filter = _chart.keyAccessor()(datum);\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    /**\n     * Set or get the filter handler. The filter handler is a function that performs the filter action\n     * on a specific dimension. Using a custom filter handler allows you to perform additional logic\n     * before or after filtering.\n     * @method filterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter crossfilter.dimension.filter}\n     * @example\n     * // the default filter handler handles all possible cases for the charts in dc.js\n     * // you can replace it with something more specialized for your own chart\n     * chart.filterHandler(function (dimension, filters) {\n     *     if (filters.length === 0) {\n     *         // the empty case (no filtering)\n     *         dimension.filter(null);\n     *     } else if (filters.length === 1 && !filters[0].isFiltered) {\n     *         // single value and not a function-based filter\n     *         dimension.filterExact(filters[0]);\n     *     } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n     *         // single range-based filter\n     *         dimension.filterRange(filters[0]);\n     *     } else {\n     *         // an array of values, or an array of filter objects\n     *         dimension.filterFunction(function (d) {\n     *             for (var i = 0; i < filters.length; i++) {\n     *                 var filter = filters[i];\n     *                 if (filter.isFiltered && filter.isFiltered(d)) {\n     *                     return true;\n     *                 } else if (filter <= d && filter >= d) {\n     *                     return true;\n     *                 }\n     *             }\n     *             return false;\n     *         });\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler\n     * chart.filterHandler(function(dimension, filter){\n     *     var newFilter = filter + 10;\n     *     dimension.filter(newFilter);\n     *     return newFilter; // set the actual filter value to the new value\n     * });\n     * @param {Function} [filterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.filterHandler = function (filterHandler) {\n        if (!arguments.length) {\n            return _filterHandler;\n        }\n        _filterHandler = filterHandler;\n        return _chart;\n    };\n\n    // abstract function stub\n    _chart._doRender = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    _chart.legendables = function () {\n        // do nothing in base, should be overridden by sub-function\n        return [];\n    };\n\n    _chart.legendHighlight = function () {\n        // do nothing in base, should be overridden by sub-function\n    };\n\n    _chart.legendReset = function () {\n        // do nothing in base, should be overridden by sub-function\n    };\n\n    _chart.legendToggle = function () {\n        // do nothing in base, should be overriden by sub-function\n    };\n\n    _chart.isLegendableHidden = function () {\n        // do nothing in base, should be overridden by sub-function\n        return false;\n    };\n\n    /**\n     * Set or get the key accessor function. The key accessor function is used to retrieve the key\n     * value from the crossfilter group. Key values are used differently in different charts, for\n     * example keys correspond to slices in a pie chart and x axis positions in a grid coordinate chart.\n     * @method keyAccessor\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default key accessor\n     * chart.keyAccessor(function(d) { return d.key; });\n     * // custom key accessor for a multi-value crossfilter reduction\n     * chart.keyAccessor(function(p) { return p.value.absGain; });\n     * @param {Function} [keyAccessor]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.keyAccessor = function (keyAccessor) {\n        if (!arguments.length) {\n            return _keyAccessor;\n        }\n        _keyAccessor = keyAccessor;\n        return _chart;\n    };\n\n    /**\n     * Set or get the value accessor function. The value accessor function is used to retrieve the\n     * value from the crossfilter group. Group values are used differently in different charts, for\n     * example values correspond to slice sizes in a pie chart and y axis positions in a grid\n     * coordinate chart.\n     * @method valueAccessor\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default value accessor\n     * chart.valueAccessor(function(d) { return d.value; });\n     * // custom value accessor for a multi-value crossfilter reduction\n     * chart.valueAccessor(function(p) { return p.value.percentageGain; });\n     * @param {Function} [valueAccessor]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.valueAccessor = function (valueAccessor) {\n        if (!arguments.length) {\n            return _valueAccessor;\n        }\n        _valueAccessor = valueAccessor;\n        return _chart;\n    };\n\n    /**\n     * Set or get the label function. The chart class will use this function to render labels for each\n     * child element in the chart, e.g. slices in a pie chart or bubbles in a bubble chart. Not every\n     * chart supports the label function, for example line chart does not use this function\n     * at all. By default, enables labels; pass false for the second parameter if this is not desired.\n     * @method label\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default label function just return the key\n     * chart.label(function(d) { return d.key; });\n     * // label function has access to the standard d3 data binding and can get quite complicated\n     * chart.label(function(d) { return d.data.key + '(' + Math.floor(d.data.value / all.value() * 100) + '%)'; });\n     * @param {Function} [labelFunction]\n     * @param {Boolean} [enableLabels=true]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.label = function (labelFunction, enableLabels) {\n        if (!arguments.length) {\n            return _label;\n        }\n        _label = labelFunction;\n        if ((enableLabels === undefined) || enableLabels) {\n            _renderLabel = true;\n        }\n        return _chart;\n    };\n\n    /**\n     * Turn on/off label rendering\n     * @method renderLabel\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [renderLabel=false]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.renderLabel = function (renderLabel) {\n        if (!arguments.length) {\n            return _renderLabel;\n        }\n        _renderLabel = renderLabel;\n        return _chart;\n    };\n\n    /**\n     * Set or get the title function. The chart class will use this function to render the SVGElement title\n     * (usually interpreted by browser as tooltips) for each child element in the chart, e.g. a slice\n     * in a pie chart or a bubble in a bubble chart. Almost every chart supports the title function;\n     * however in grid coordinate charts you need to turn off the brush in order to see titles, because\n     * otherwise the brush layer will block tooltip triggering.\n     * @method title\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default title function shows \"key: value\"\n     * chart.title(function(d) { return d.key + ': ' + d.value; });\n     * // title function has access to the standard d3 data binding and can get quite complicated\n     * chart.title(function(p) {\n     *    return p.key.getFullYear()\n     *        + '\\n'\n     *        + 'Index Gain: ' + numberFormat(p.value.absGain) + '\\n'\n     *        + 'Index Gain in Percentage: ' + numberFormat(p.value.percentageGain) + '%\\n'\n     *        + 'Fluctuation / Index Ratio: ' + numberFormat(p.value.fluctuationPercentage) + '%';\n     * });\n     * @param {Function} [titleFunction]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.title = function (titleFunction) {\n        if (!arguments.length) {\n            return _title;\n        }\n        _title = titleFunction;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off title rendering, or return the state of the render title flag if no arguments are\n     * given.\n     * @method renderTitle\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [renderTitle=true]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.renderTitle = function (renderTitle) {\n        if (!arguments.length) {\n            return _renderTitle;\n        }\n        _renderTitle = renderTitle;\n        return _chart;\n    };\n\n    /**\n     * A renderlet is similar to an event listener on rendering event. Multiple renderlets can be added\n     * to an individual chart.  Each time a chart is rerendered or redrawn the renderlets are invoked\n     * right after the chart finishes its transitions, giving you a way to modify the SVGElements.\n     * Renderlet functions take the chart instance as the only input parameter and you can\n     * use the dc API or use raw d3 to achieve pretty much any effect.\n     *\n     * Use {@link dc.baseMixin#on on} with a 'renderlet' prefix.\n     * Generates a random key for the renderlet, which makes it hard to remove.\n     * @method renderlet\n     * @memberof dc.baseMixin\n     * @instance\n     * @deprecated\n     * @example\n     * // do this instead of .renderlet(function(chart) { ... })\n     * chart.on(\"renderlet\", function(chart){\n     *     // mix of dc API and d3 manipulation\n     *     chart.select('g.y').style('display', 'none');\n     *     // its a closure so you can also access other chart variable available in the closure scope\n     *     moveChart.filter(chart.filter());\n     * });\n     * @param {Function} renderletFunction\n     * @returns {dc.baseMixin}\n     */\n    _chart.renderlet = dc.logger.deprecate(function (renderletFunction) {\n        _chart.on('renderlet.' + dc.utils.uniqueId(), renderletFunction);\n        return _chart;\n    }, 'chart.renderlet has been deprecated.  Please use chart.on(\"renderlet.<renderletKey>\", renderletFunction)');\n\n    /**\n     * Get or set the chart group to which this chart belongs. Chart groups are rendered or redrawn\n     * together since it is expected they share the same underlying crossfilter data set.\n     * @method chartGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {String} [chartGroup]\n     * @returns {String|dc.baseMixin}\n     */\n    _chart.chartGroup = function (chartGroup) {\n        if (!arguments.length) {\n            return _chartGroup;\n        }\n        if (!_isChild) {\n            dc.deregisterChart(_chart, _chartGroup);\n        }\n        _chartGroup = chartGroup;\n        if (!_isChild) {\n            dc.registerChart(_chart, _chartGroup);\n        }\n        return _chart;\n    };\n\n    /**\n     * Expire the internal chart cache. dc charts cache some data internally on a per chart basis to\n     * speed up rendering and avoid unnecessary calculation; however it might be useful to clear the\n     * cache if you have changed state which will affect rendering.  For example, if you invoke\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}\n     * function or reset group or dimension after rendering, it is a good idea to\n     * clear the cache to make sure charts are rendered properly.\n     * @method expireCache\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.expireCache = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    /**\n     * Attach a dc.legend widget to this chart. The legend widget will automatically draw legend labels\n     * based on the color setting and names associated with each group.\n     * @method legend\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n     * @param {dc.legend} [legend]\n     * @returns {dc.legend|dc.baseMixin}\n     */\n    _chart.legend = function (legend) {\n        if (!arguments.length) {\n            return _legend;\n        }\n        _legend = legend;\n        _legend.parent(_chart);\n        return _chart;\n    };\n\n    /**\n     * Returns the internal numeric ID of the chart.\n     * @method chartID\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {String}\n     */\n    _chart.chartID = function () {\n        return _chart.__dcFlag__;\n    };\n\n    /**\n     * Set chart options using a configuration object. Each key in the object will cause the method of\n     * the same name to be called with the value to set that attribute for the chart.\n     * @method options\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * chart.options({dimension: myDimension, group: myGroup});\n     * @param {{}} opts\n     * @returns {dc.baseMixin}\n     */\n    _chart.options = function (opts) {\n        var applyOptions = [\n            'anchor',\n            'group',\n            'xAxisLabel',\n            'yAxisLabel',\n            'stack',\n            'title',\n            'point',\n            'getColor',\n            'overlayGeoJson'\n        ];\n\n        for (var o in opts) {\n            if (typeof(_chart[o]) === 'function') {\n                if (opts[o] instanceof Array && applyOptions.indexOf(o) !== -1) {\n                    _chart[o].apply(_chart, opts[o]);\n                } else {\n                    _chart[o].call(_chart, opts[o]);\n                }\n            } else {\n                dc.logger.debug('Not a valid option setter name: ' + o);\n            }\n        }\n        return _chart;\n    };\n\n    /**\n     * All dc chart instance supports the following listeners.\n     * Supports the following events:\n     * * `renderlet` - This listener function will be invoked after transitions after redraw and render. Replaces the\n     * deprecated {@link dc.baseMixin#renderlet renderlet} method.\n     * * `pretransition` - Like `.on('renderlet', ...)` but the event is fired before transitions start.\n     * * `preRender` - This listener function will be invoked before chart rendering.\n     * * `postRender` - This listener function will be invoked after chart finish rendering including\n     * all renderlets' logic.\n     * * `preRedraw` - This listener function will be invoked before chart redrawing.\n     * * `postRedraw` - This listener function will be invoked after chart finish redrawing\n     * including all renderlets' logic.\n     * * `filtered` - This listener function will be invoked after a filter is applied, added or removed.\n     * * `zoomed` - This listener function will be invoked after a zoom is triggered.\n     * @method on\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Internals.md#dispatch_on d3.dispatch.on}\n     * @example\n     * .on('renderlet', function(chart, filter){...})\n     * .on('pretransition', function(chart, filter){...})\n     * .on('preRender', function(chart){...})\n     * .on('postRender', function(chart){...})\n     * .on('preRedraw', function(chart){...})\n     * .on('postRedraw', function(chart){...})\n     * .on('filtered', function(chart, filter){...})\n     * .on('zoomed', function(chart, filter){...})\n     * @param {String} event\n     * @param {Function} listener\n     * @returns {dc.baseMixin}\n     */\n    _chart.on = function (event, listener) {\n        _listeners.on(event, listener);\n        return _chart;\n    };\n\n    return _chart;\n};\n\n/**\n * Margin is a mixin that provides margin utility functions for both the Row Chart and Coordinate Grid\n * Charts.\n * @name marginMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.marginMixin}\n */\ndc.marginMixin = function (_chart) {\n    var _margin = {top: 10, right: 50, bottom: 30, left: 30};\n\n    /**\n     * Get or set the margins for a particular coordinate grid chart instance. The margins is stored as\n     * an associative Javascript array.\n     * @method margins\n     * @memberof dc.marginMixin\n     * @instance\n     * @example\n     * var leftMargin = chart.margins().left; // 30 by default\n     * chart.margins().left = 50;\n     * leftMargin = chart.margins().left; // now 50\n     * @param {{top: Number, right: Number, left: Number, bottom: Number}} [margins={top: 10, right: 50, bottom: 30, left: 30}]\n     * @returns {{top: Number, right: Number, left: Number, bottom: Number}|dc.marginMixin}\n     */\n    _chart.margins = function (margins) {\n        if (!arguments.length) {\n            return _margin;\n        }\n        _margin = margins;\n        return _chart;\n    };\n\n    _chart.effectiveWidth = function () {\n        return _chart.width() - _chart.margins().left - _chart.margins().right;\n    };\n\n    _chart.effectiveHeight = function () {\n        return _chart.height() - _chart.margins().top - _chart.margins().bottom;\n    };\n\n    return _chart;\n};\n\n/**\n * The Color Mixin is an abstract chart functional class providing universal coloring support\n * as a mix-in for any concrete chart implementation.\n * @name colorMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.colorMixin}\n */\ndc.colorMixin = function (_chart) {\n    var _colors = d3.scale.category20c();\n    var _defaultAccessor = true;\n\n    var _colorAccessor = function (d) { return _chart.keyAccessor()(d); };\n\n    /**\n     * Retrieve current color scale or set a new color scale. This methods accepts any function that\n     * operates like a d3 scale.\n     * @method colors\n     * @memberof dc.colorMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @example\n     * // alternate categorical scale\n     * chart.colors(d3.scale.category20b());\n     * // ordinal scale\n     * chart.colors(d3.scale.ordinal().range(['red','green','blue']));\n     * // convenience method, the same as above\n     * chart.ordinalColors(['red','green','blue']);\n     * // set a linear scale\n     * chart.linearColors([\"#4575b4\", \"#ffffbf\", \"#a50026\"]);\n     * @param {d3.scale} [colorScale=d3.scale.category20c()]\n     * @returns {d3.scale|dc.colorMixin}\n     */\n    _chart.colors = function (colorScale) {\n        if (!arguments.length) {\n            return _colors;\n        }\n        if (colorScale instanceof Array) {\n            _colors = d3.scale.quantize().range(colorScale); // deprecated legacy support, note: this fails for ordinal domains\n        } else {\n            _colors = d3.functor(colorScale);\n        }\n        return _chart;\n    };\n\n    /**\n     * Convenience method to set the color scale to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal d3.scale.ordinal} with\n     * range `r`.\n     * @method ordinalColors\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<String>} r\n     * @returns {dc.colorMixin}\n     */\n    _chart.ordinalColors = function (r) {\n        return _chart.colors(d3.scale.ordinal().range(r));\n    };\n\n    /**\n     * Convenience method to set the color scale to an Hcl interpolated linear scale with range `r`.\n     * @method linearColors\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<Number>} r\n     * @returns {dc.colorMixin}\n     */\n    _chart.linearColors = function (r) {\n        return _chart.colors(d3.scale.linear()\n                             .range(r)\n                             .interpolate(d3.interpolateHcl));\n    };\n\n    /**\n     * Set or the get color accessor function. This function will be used to map a data point in a\n     * crossfilter group to a color value on the color scale. The default function uses the key\n     * accessor.\n     * @method colorAccessor\n     * @memberof dc.colorMixin\n     * @instance\n     * @example\n     * // default index based color accessor\n     * .colorAccessor(function (d, i){return i;})\n     * // color accessor for a multi-value crossfilter reduction\n     * .colorAccessor(function (d){return d.value.absGain;})\n     * @param {Function} [colorAccessor]\n     * @returns {Function|dc.colorMixin}\n     */\n    _chart.colorAccessor = function (colorAccessor) {\n        if (!arguments.length) {\n            return _colorAccessor;\n        }\n        _colorAccessor = colorAccessor;\n        _defaultAccessor = false;\n        return _chart;\n    };\n\n    // what is this?\n    _chart.defaultColorAccessor = function () {\n        return _defaultAccessor;\n    };\n\n    /**\n     * Set or get the current domain for the color mapping function. The domain must be supplied as an\n     * array.\n     *\n     * Note: previously this method accepted a callback function. Instead you may use a custom scale\n     * set by {@link dc.colorMixin#colors .colors}.\n     * @method colorDomain\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<String>} [domain]\n     * @returns {Array<String>|dc.colorMixin}\n     */\n    _chart.colorDomain = function (domain) {\n        if (!arguments.length) {\n            return _colors.domain();\n        }\n        _colors.domain(domain);\n        return _chart;\n    };\n\n    /**\n     * Set the domain by determining the min and max values as retrieved by\n     * {@link dc.colorMixin#colorAccessor .colorAccessor} over the chart's dataset.\n     * @method calculateColorDomain\n     * @memberof dc.colorMixin\n     * @instance\n     * @returns {dc.colorMixin}\n     */\n    _chart.calculateColorDomain = function () {\n        var newDomain = [d3.min(_chart.data(), _chart.colorAccessor()),\n                         d3.max(_chart.data(), _chart.colorAccessor())];\n        _colors.domain(newDomain);\n        return _chart;\n    };\n\n    /**\n     * Get the color for the datum d and counter i. This is used internally by charts to retrieve a color.\n     * @method getColor\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {*} d\n     * @param {Number} [i]\n     * @returns {String}\n     */\n    _chart.getColor = function (d, i) {\n        return _colors(_colorAccessor.call(this, d, i));\n    };\n\n    /**\n     * **Deprecated.** Get/set the color calculator. This actually replaces the\n     * {@link dc.colorMixin#getColor getColor} method!\n     *\n     * This is not recommended, since using a {@link dc.colorMixin#colorAccessor colorAccessor} and\n     * color scale ({@link dc.colorMixin#colors .colors}) is more powerful and idiomatic d3.\n     * @method colorCalculator\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {*} [colorCalculator]\n     * @returns {Function|dc.colorMixin}\n     */\n    _chart.colorCalculator = dc.logger.deprecate(function (colorCalculator) {\n        if (!arguments.length) {\n            return _chart.getColor;\n        }\n        _chart.getColor = colorCalculator;\n        return _chart;\n    }, 'colorMixin.colorCalculator has been deprecated. Please colorMixin.colors and colorMixin.colorAccessor instead');\n\n    return _chart;\n};\n\n/**\n * Coordinate Grid is an abstract base chart designed to support a number of coordinate grid based\n * concrete chart types, e.g. bar chart, line chart, and bubble chart.\n * @name coordinateGridMixin\n * @memberof dc\n * @mixin\n * @mixes dc.colorMixin\n * @mixes dc.marginMixin\n * @mixes dc.baseMixin\n * @param {Object} _chart\n * @returns {dc.coordinateGridMixin}\n */\ndc.coordinateGridMixin = function (_chart) {\n    var GRID_LINE_CLASS = 'grid-line';\n    var HORIZONTAL_CLASS = 'horizontal';\n    var VERTICAL_CLASS = 'vertical';\n    var Y_AXIS_LABEL_CLASS = 'y-axis-label';\n    var X_AXIS_LABEL_CLASS = 'x-axis-label';\n    var DEFAULT_AXIS_LABEL_PADDING = 12;\n\n    _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin(_chart)));\n\n    _chart.colors(d3.scale.category10());\n    _chart._mandatoryAttributes().push('x');\n    var _parent;\n    var _g;\n    var _chartBodyG;\n\n    var _x;\n    var _xOriginalDomain;\n    var _xAxis = d3.svg.axis().orient('bottom');\n    var _xUnits = dc.units.integers;\n    var _xAxisPadding = 0;\n    var _xAxisPaddingUnit = 'day';\n    var _xElasticity = false;\n    var _xAxisLabel;\n    var _xAxisLabelPadding = 0;\n    var _lastXDomain;\n\n    var _y;\n    var _yAxis = d3.svg.axis().orient('left');\n    var _yAxisPadding = 0;\n    var _yElasticity = false;\n    var _yAxisLabel;\n    var _yAxisLabelPadding = 0;\n\n    var _brush = d3.svg.brush();\n    var _brushOn = true;\n    var _round;\n\n    var _renderHorizontalGridLine = false;\n    var _renderVerticalGridLine = false;\n\n    var _refocused = false, _resizing = false;\n    var _unitCount;\n\n    var _zoomScale = [1, Infinity];\n    var _zoomOutRestrict = true;\n\n    var _zoom = d3.behavior.zoom().on('zoom', zoomHandler);\n    var _nullZoom = d3.behavior.zoom().on('zoom', null);\n    var _hasBeenMouseZoomable = false;\n\n    var _rangeChart;\n    var _focusChart;\n\n    var _mouseZoomable = false;\n    var _clipPadding = 0;\n\n    var _outerRangeBandPadding = 0.5;\n    var _rangeBandPadding = 0;\n\n    var _useRightYAxis = false;\n\n    /**\n     * When changing the domain of the x or y scale, it is necessary to tell the chart to recalculate\n     * and redraw the axes. (`.rescale()` is called automatically when the x or y scale is replaced\n     * with {@link dc.coordinateGridMixin+x .x()} or {@link dc.coordinateGridMixin#y .y()}, and has\n     * no effect on elastic scales.)\n     * @method rescale\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {dc.coordinateGridMixin}\n     */\n    _chart.rescale = function () {\n        _unitCount = undefined;\n        _resizing = true;\n        return _chart;\n    };\n\n    _chart.resizing = function () {\n        return _resizing;\n    };\n\n    /**\n     * Get or set the range selection chart associated with this instance. Setting the range selection\n     * chart using this function will automatically update its selection brush when the current chart\n     * zooms in. In return the given range chart will also automatically attach this chart as its focus\n     * chart hence zoom in when range brush updates.\n     *\n     * Usually the range and focus charts will share a dimension. The range chart will set the zoom\n     * boundaries for the focus chart, so its dimension values must be compatible with the domain of\n     * the focus chart.\n     *\n     * See the [Nasdaq 100 Index](http://dc-js.github.com/dc.js/) example for this effect in action.\n     * @method rangeChart\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {dc.coordinateGridMixin} [rangeChart]\n     * @returns {dc.coordinateGridMixin}\n     */\n    _chart.rangeChart = function (rangeChart) {\n        if (!arguments.length) {\n            return _rangeChart;\n        }\n        _rangeChart = rangeChart;\n        _rangeChart.focusChart(_chart);\n        return _chart;\n    };\n\n    /**\n     * Get or set the scale extent for mouse zooms.\n     * @method zoomScale\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Array<Number|Date>} [extent=[1, Infinity]]\n     * @returns {Array<Number|Date>|dc.coordinateGridMixin}\n     */\n    _chart.zoomScale = function (extent) {\n        if (!arguments.length) {\n            return _zoomScale;\n        }\n        _zoomScale = extent;\n        return _chart;\n    };\n\n    /**\n     * Get or set the zoom restriction for the chart. If true limits the zoom to origional domain of the chart.\n     * @method zoomOutRestrict\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [zoomOutRestrict=true]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.zoomOutRestrict = function (zoomOutRestrict) {\n        if (!arguments.length) {\n            return _zoomOutRestrict;\n        }\n        _zoomScale[0] = zoomOutRestrict ? 1 : 0;\n        _zoomOutRestrict = zoomOutRestrict;\n        return _chart;\n    };\n\n    _chart._generateG = function (parent) {\n        if (parent === undefined) {\n            _parent = _chart.svg();\n        } else {\n            _parent = parent;\n        }\n\n        var href = window.location.href.split('#')[0];\n\n        _g = _parent.append('g');\n\n        _chartBodyG = _g.append('g').attr('class', 'chart-body')\n            .attr('transform', 'translate(' + _chart.margins().left + ', ' + _chart.margins().top + ')')\n            .attr('clip-path', 'url(' + href + '#' + getClipPathId() + ')');\n\n        return _g;\n    };\n\n    /**\n     * Get or set the root g element. This method is usually used to retrieve the g element in order to\n     * overlay custom svg drawing programatically. **Caution**: The root g element is usually generated\n     * by dc.js internals, and resetting it might produce unpredictable result.\n     * @method g\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {SVGElement} [gElement]\n     * @returns {SVGElement|dc.coordinateGridMixin}\n     */\n    _chart.g = function (gElement) {\n        if (!arguments.length) {\n            return _g;\n        }\n        _g = gElement;\n        return _chart;\n    };\n\n    /**\n     * Set or get mouse zoom capability flag (default: false). When turned on the chart will be\n     * zoomable using the mouse wheel. If the range selector chart is attached zooming will also update\n     * the range selection brush on the associated range selector chart.\n     * @method mouseZoomable\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [mouseZoomable=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.mouseZoomable = function (mouseZoomable) {\n        if (!arguments.length) {\n            return _mouseZoomable;\n        }\n        _mouseZoomable = mouseZoomable;\n        return _chart;\n    };\n\n    /**\n     * Retrieve the svg group for the chart body.\n     * @method chartBodyG\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {SVGElement} [chartBodyG]\n     * @returns {SVGElement}\n     */\n    _chart.chartBodyG = function (chartBodyG) {\n        if (!arguments.length) {\n            return _chartBodyG;\n        }\n        _chartBodyG = chartBodyG;\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Get or set the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale} or\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md ordinal scale}.\n     * @method x\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @example\n     * // set x to a linear scale\n     * chart.x(d3.scale.linear().domain([-2500, 2500]))\n     * // set x to a time scale to generate histogram\n     * chart.x(d3.time.scale().domain([new Date(1985, 0, 1), new Date(2012, 11, 31)]))\n     * @param {d3.scale} [xScale]\n     * @returns {d3.scale|dc.coordinateGridMixin}\n     */\n    _chart.x = function (xScale) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = xScale;\n        _xOriginalDomain = _x.domain();\n        _chart.rescale();\n        return _chart;\n    };\n\n    _chart.xOriginalDomain = function () {\n        return _xOriginalDomain;\n    };\n\n    /**\n     * Set or get the xUnits function. The coordinate grid chart uses the xUnits function to calculate\n     * the number of data projections on x axis such as the number of bars for a bar chart or the\n     * number of dots for a line chart. This function is expected to return a Javascript array of all\n     * data points on x axis, or the number of points on the axis. [d3 time range functions\n     * d3.time.days, d3.time.months, and\n     * d3.time.years](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#aliases) are all valid xUnits\n     * function. dc.js also provides a few units function, see the {@link dc.units Units Namespace} for\n     * a list of built-in units functions.\n     * @method xUnits\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @todo Add docs for utilities\n     * @example\n     * // set x units to count days\n     * chart.xUnits(d3.time.days);\n     * // set x units to count months\n     * chart.xUnits(d3.time.months);\n     *\n     * // A custom xUnits function can be used as long as it follows the following interface:\n     * // units in integer\n     * function(start, end, xDomain) {\n     *      // simply calculates how many integers in the domain\n     *      return Math.abs(end - start);\n     * };\n     *\n     * // fixed units\n     * function(start, end, xDomain) {\n     *      // be aware using fixed units will disable the focus/zoom ability on the chart\n     *      return 1000;\n     * @param {Function} [xUnits=dc.units.integers]\n     * @returns {Function|dc.coordinateGridMixin}\n     */\n    _chart.xUnits = function (xUnits) {\n        if (!arguments.length) {\n            return _xUnits;\n        }\n        _xUnits = xUnits;\n        return _chart;\n    };\n\n    /**\n     * Set or get the x axis used by a particular coordinate grid chart instance. This function is most\n     * useful when x axis customization is required. The x axis in dc.js is an instance of a\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object};\n     * therefore it supports any valid d3 axis manipulation.\n     *\n     * **Caution**: The x axis is usually generated internally by dc; resetting it may cause\n     * unexpected results. Note also that when used as a getter, this function is not chainable:\n     * it returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n     * so attempting to call chart functions after calling `.xAxis()` will fail}.\n     * @method xAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function(v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [xAxis=d3.svg.axis().orient('bottom')]\n     * @returns {d3.svg.axis|dc.coordinateGridMixin}\n     */\n    _chart.xAxis = function (xAxis) {\n        if (!arguments.length) {\n            return _xAxis;\n        }\n        _xAxis = xAxis;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off elastic x axis behavior. If x axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the x axis range whenever a redraw event is triggered.\n     * @method elasticX\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [elasticX=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n            return _xElasticity;\n        }\n        _xElasticity = elasticX;\n        return _chart;\n    };\n\n    /**\n     * Set or get x axis padding for the elastic x axis. The padding will be added to both end of the x\n     * axis if elasticX is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date x axes.  When padding a date axis, an integer represents number of units being padded\n     * and a percentage string will be treated the same as an integer. The unit will be determined by the\n     * xAxisPaddingUnit variable.\n     * @method xAxisPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number|String} [padding=0]\n     * @returns {Number|String|dc.coordinateGridMixin}\n     */\n    _chart.xAxisPadding = function (padding) {\n        if (!arguments.length) {\n            return _xAxisPadding;\n        }\n        _xAxisPadding = padding;\n        return _chart;\n    };\n\n    /**\n     * Set or get x axis padding unit for the elastic x axis. The padding unit will determine which unit to\n     * use when applying xAxis padding if elasticX is turned on and if x-axis uses a time dimension;\n     * otherwise it is ignored.\n     *\n     * Padding unit is a string that will be used when the padding is calculated. Available parameters are\n     * the available d3 time intervals; see\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval d3.time.interval}.\n     * @method xAxisPaddingUnit\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [unit='days']\n     * @returns {String|dc.coordinateGridMixin}\n     */\n    _chart.xAxisPaddingUnit = function (unit) {\n        if (!arguments.length) {\n            return _xAxisPaddingUnit;\n        }\n        _xAxisPaddingUnit = unit;\n        return _chart;\n    };\n\n    /**\n     * Returns the number of units displayed on the x axis using the unit measure configured by\n     * {@link dc.coordinateGridMixin#xUnits xUnits}.\n     * @method xUnitCount\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {Number}\n     */\n    _chart.xUnitCount = function () {\n        if (_unitCount === undefined) {\n            var units = _chart.xUnits()(_chart.x().domain()[0], _chart.x().domain()[1], _chart.x().domain());\n\n            if (units instanceof Array) {\n                _unitCount = units.length;\n            } else {\n                _unitCount = units;\n            }\n        }\n\n        return _unitCount;\n    };\n\n    /**\n     * Gets or sets whether the chart should be drawn with a right axis instead of a left axis. When\n     * used with a chart in a composite chart, allows both left and right Y axes to be shown on a\n     * chart.\n     * @method useRightYAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [useRightYAxis=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.useRightYAxis = function (useRightYAxis) {\n        if (!arguments.length) {\n            return _useRightYAxis;\n        }\n        _useRightYAxis = useRightYAxis;\n        return _chart;\n    };\n\n    /**\n     * Returns true if the chart is using ordinal xUnits ({@link dc.units.ordinal dc.units.ordinal}, or false\n     * otherwise. Most charts behave differently with ordinal data and use the result of this method to\n     * trigger the appropriate logic.\n     * @method isOrdinal\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {Boolean}\n     */\n    _chart.isOrdinal = function () {\n        return _chart.xUnits() === dc.units.ordinal;\n    };\n\n    _chart._useOuterPadding = function () {\n        return true;\n    };\n\n    _chart._ordinalXDomain = function () {\n        var groups = _chart._computeOrderedGroups(_chart.data());\n        return groups.map(_chart.keyAccessor());\n    };\n\n    function compareDomains (d1, d2) {\n        return !d1 || !d2 || d1.length !== d2.length ||\n            d1.some(function (elem, i) { return (elem && d2[i]) ? elem.toString() !== d2[i].toString() : elem === d2[i]; });\n    }\n\n    function prepareXAxis (g, render) {\n        if (!_chart.isOrdinal()) {\n            if (_chart.elasticX()) {\n                _x.domain([_chart.xAxisMin(), _chart.xAxisMax()]);\n            }\n        } else { // _chart.isOrdinal()\n            if (_chart.elasticX() || _x.domain().length === 0) {\n                _x.domain(_chart._ordinalXDomain());\n            }\n        }\n\n        // has the domain changed?\n        var xdom = _x.domain();\n        if (render || compareDomains(_lastXDomain, xdom)) {\n            _chart.rescale();\n        }\n        _lastXDomain = xdom;\n\n        // please can't we always use rangeBands for bar charts?\n        if (_chart.isOrdinal()) {\n            _x.rangeBands([0, _chart.xAxisLength()], _rangeBandPadding,\n                          _chart._useOuterPadding() ? _outerRangeBandPadding : 0);\n        } else {\n            _x.range([0, _chart.xAxisLength()]);\n        }\n\n        _xAxis = _xAxis.scale(_chart.x());\n\n        renderVerticalGridLines(g);\n    }\n\n    _chart.renderXAxis = function (g) {\n        var axisXG = g.select('g.x');\n\n        if (axisXG.empty()) {\n            axisXG = g.append('g')\n                .attr('class', 'axis x')\n                .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')');\n        }\n\n        var axisXLab = g.select('text.' + X_AXIS_LABEL_CLASS);\n        if (axisXLab.empty() && _chart.xAxisLabel()) {\n            axisXLab = g.append('text')\n                .attr('class', X_AXIS_LABEL_CLASS)\n                .attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' +\n                      (_chart.height() - _xAxisLabelPadding) + ')')\n                .attr('text-anchor', 'middle');\n        }\n        if (_chart.xAxisLabel() && axisXLab.text() !== _chart.xAxisLabel()) {\n            axisXLab.text(_chart.xAxisLabel());\n        }\n\n        dc.transition(axisXG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')')\n            .call(_xAxis);\n        dc.transition(axisXLab, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' +\n                  (_chart.height() - _xAxisLabelPadding) + ')');\n    };\n\n    function renderVerticalGridLines (g) {\n        var gridLineG = g.select('g.' + VERTICAL_CLASS);\n\n        if (_renderVerticalGridLine) {\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child')\n                    .attr('class', GRID_LINE_CLASS + ' ' + VERTICAL_CLASS)\n                    .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n            }\n\n            var ticks = _xAxis.tickValues() ? _xAxis.tickValues() :\n                    (typeof _x.ticks === 'function' ? _x.ticks(_xAxis.ticks()[0]) : _x.domain());\n\n            var lines = gridLineG.selectAll('line')\n                .data(ticks);\n\n            // enter\n            var linesGEnter = lines.enter()\n                .append('line')\n                .attr('x1', function (d) {\n                    return _x(d);\n                })\n                .attr('y1', _chart._xAxisY() - _chart.margins().top)\n                .attr('x2', function (d) {\n                    return _x(d);\n                })\n                .attr('y2', 0)\n                .attr('opacity', 0);\n            dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', 1);\n\n            // update\n            dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('x1', function (d) {\n                    return _x(d);\n                })\n                .attr('y1', _chart._xAxisY() - _chart.margins().top)\n                .attr('x2', function (d) {\n                    return _x(d);\n                })\n                .attr('y2', 0);\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    }\n\n    _chart._xAxisY = function () {\n        return (_chart.height() - _chart.margins().bottom);\n    };\n\n    _chart.xAxisLength = function () {\n        return _chart.effectiveWidth();\n    };\n\n    /**\n     * Set or get the x axis label. If setting the label, you may optionally include additional padding to\n     * the margin to make room for the label. By default the padded is set to 12 to accomodate the text height.\n     * @method xAxisLabel\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String}\n     */\n    _chart.xAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n            return _xAxisLabel;\n        }\n        _xAxisLabel = labelText;\n        _chart.margins().bottom -= _xAxisLabelPadding;\n        _xAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().bottom += _xAxisLabelPadding;\n        return _chart;\n    };\n\n    _chart._prepareYAxis = function (g) {\n        if (_y === undefined || _chart.elasticY()) {\n            if (_y === undefined) {\n                _y = d3.scale.linear();\n            }\n            var min = _chart.yAxisMin() || 0,\n                max = _chart.yAxisMax() || 0;\n            _y.domain([min, max]).rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _y.range([_chart.yAxisHeight(), 0]);\n        _yAxis = _yAxis.scale(_y);\n\n        if (_useRightYAxis) {\n            _yAxis.orient('right');\n        }\n\n        _chart._renderHorizontalGridLinesForAxis(g, _y, _yAxis);\n    };\n\n    _chart.renderYAxisLabel = function (axisClass, text, rotation, labelXPosition) {\n        labelXPosition = labelXPosition || _yAxisLabelPadding;\n\n        var axisYLab = _chart.g().select('text.' + Y_AXIS_LABEL_CLASS + '.' + axisClass + '-label');\n        var labelYPosition = (_chart.margins().top + _chart.yAxisHeight() / 2);\n        if (axisYLab.empty() && text) {\n            axisYLab = _chart.g().append('text')\n                .attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')')\n                .attr('class', Y_AXIS_LABEL_CLASS + ' ' + axisClass + '-label')\n                .attr('text-anchor', 'middle')\n                .text(text);\n        }\n        if (text && axisYLab.text() !== text) {\n            axisYLab.text(text);\n        }\n        dc.transition(axisYLab, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')');\n    };\n\n    _chart.renderYAxisAt = function (axisClass, axis, position) {\n        var axisYG = _chart.g().select('g.' + axisClass);\n        if (axisYG.empty()) {\n            axisYG = _chart.g().append('g')\n                .attr('class', 'axis ' + axisClass)\n                .attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')');\n        }\n\n        dc.transition(axisYG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')')\n            .call(axis);\n    };\n\n    _chart.renderYAxis = function () {\n        var axisPosition = _useRightYAxis ? (_chart.width() - _chart.margins().right) : _chart._yAxisX();\n        _chart.renderYAxisAt('y', _yAxis, axisPosition);\n        var labelPosition = _useRightYAxis ? (_chart.width() - _yAxisLabelPadding) : _yAxisLabelPadding;\n        var rotation = _useRightYAxis ? 90 : -90;\n        _chart.renderYAxisLabel('y', _chart.yAxisLabel(), rotation, labelPosition);\n    };\n\n    _chart._renderHorizontalGridLinesForAxis = function (g, scale, axis) {\n        var gridLineG = g.select('g.' + HORIZONTAL_CLASS);\n\n        if (_renderHorizontalGridLine) {\n            var ticks = axis.tickValues() ? axis.tickValues() : scale.ticks(axis.ticks()[0]);\n\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child')\n                    .attr('class', GRID_LINE_CLASS + ' ' + HORIZONTAL_CLASS)\n                    .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n            }\n\n            var lines = gridLineG.selectAll('line')\n                .data(ticks);\n\n            // enter\n            var linesGEnter = lines.enter()\n                .append('line')\n                .attr('x1', 1)\n                .attr('y1', function (d) {\n                    return scale(d);\n                })\n                .attr('x2', _chart.xAxisLength())\n                .attr('y2', function (d) {\n                    return scale(d);\n                })\n                .attr('opacity', 0);\n            dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', 1);\n\n            // update\n            dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('x1', 1)\n                .attr('y1', function (d) {\n                    return scale(d);\n                })\n                .attr('x2', _chart.xAxisLength())\n                .attr('y2', function (d) {\n                    return scale(d);\n                });\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    };\n\n    _chart._yAxisX = function () {\n        return _chart.useRightYAxis() ? _chart.width() - _chart.margins().right : _chart.margins().left;\n    };\n\n    /**\n     * Set or get the y axis label. If setting the label, you may optionally include additional padding\n     * to the margin to make room for the label. By default the padding is set to 12 to accommodate the\n     * text height.\n     * @method yAxisLabel\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String|dc.coordinateGridMixin}\n     */\n    _chart.yAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n            return _yAxisLabel;\n        }\n        _yAxisLabel = labelText;\n        _chart.margins().left -= _yAxisLabelPadding;\n        _yAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().left += _yAxisLabelPadding;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y scale. The y scale is typically automatically determined by the chart implementation.\n     * @method y\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|dc.coordinateGridMixin}\n     */\n    _chart.y = function (yScale) {\n        if (!arguments.length) {\n            return _y;\n        }\n        _y = yScale;\n        _chart.rescale();\n        return _chart;\n    };\n\n    /**\n     * Set or get the y axis used by the coordinate grid chart instance. This function is most useful\n     * when y axis customization is required. The y axis in dc.js is simply an instance of a [d3 axis\n     * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis); therefore it supports any\n     * valid d3 axis manipulation.\n     *\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.  Note also that when used as a getter, this function is not chainable: it\n     * returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n     * so attempting to call chart functions after calling `.yAxis()` will fail}.\n     * @method yAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize y axis tick format\n     * chart.yAxis().tickFormat(function(v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.yAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [yAxis=d3.svg.axis().orient('left')]\n     * @returns {d3.svg.axis|dc.coordinateGridMixin}\n     */\n    _chart.yAxis = function (yAxis) {\n        if (!arguments.length) {\n            return _yAxis;\n        }\n        _yAxis = yAxis;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off elastic y axis behavior. If y axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the y axis range whenever a redraw event is triggered.\n     * @method elasticY\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [elasticY=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.elasticY = function (elasticY) {\n        if (!arguments.length) {\n            return _yElasticity;\n        }\n        _yElasticity = elasticY;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off horizontal grid lines.\n     * @method renderHorizontalGridLines\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [renderHorizontalGridLines=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.renderHorizontalGridLines = function (renderHorizontalGridLines) {\n        if (!arguments.length) {\n            return _renderHorizontalGridLine;\n        }\n        _renderHorizontalGridLine = renderHorizontalGridLines;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off vertical grid lines.\n     * @method renderVerticalGridLines\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [renderVerticalGridLines=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.renderVerticalGridLines = function (renderVerticalGridLines) {\n        if (!arguments.length) {\n            return _renderVerticalGridLine;\n        }\n        _renderVerticalGridLine = renderVerticalGridLines;\n        return _chart;\n    };\n\n    /**\n     * Calculates the minimum x value to display in the chart. Includes xAxisPadding if set.\n     * @method xAxisMin\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.xAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.keyAccessor()(e);\n        });\n        return dc.utils.subtract(min, _xAxisPadding, _xAxisPaddingUnit);\n    };\n\n    /**\n     * Calculates the maximum x value to display in the chart. Includes xAxisPadding if set.\n     * @method xAxisMax\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.xAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.keyAccessor()(e);\n        });\n        return dc.utils.add(max, _xAxisPadding, _xAxisPaddingUnit);\n    };\n\n    /**\n     * Calculates the minimum y value to display in the chart. Includes yAxisPadding if set.\n     * @method yAxisMin\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.yAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.valueAccessor()(e);\n        });\n        return dc.utils.subtract(min, _yAxisPadding);\n    };\n\n    /**\n     * Calculates the maximum y value to display in the chart. Includes yAxisPadding if set.\n     * @method yAxisMax\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.yAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.valueAccessor()(e);\n        });\n        return dc.utils.add(max, _yAxisPadding);\n    };\n\n    /**\n     * Set or get y axis padding for the elastic y axis. The padding will be added to the top and\n     * bottom of the y axis if elasticY is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date axes. When padding a date axis, an integer represents number of days being padded\n     * and a percentage string will be treated the same as an integer.\n     * @method yAxisPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number|String} [padding=0]\n     * @returns {Number|dc.coordinateGridMixin}\n     */\n    _chart.yAxisPadding = function (padding) {\n        if (!arguments.length) {\n            return _yAxisPadding;\n        }\n        _yAxisPadding = padding;\n        return _chart;\n    };\n\n    _chart.yAxisHeight = function () {\n        return _chart.effectiveHeight();\n    };\n\n    /**\n     * Set or get the rounding function used to quantize the selection when brushing is enabled.\n     * @method round\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @example\n     * // set x unit round to by month, this will make sure range selection brush will\n     * // select whole months\n     * chart.round(d3.time.month.round);\n     * @param {Function} [round]\n     * @returns {Function|dc.coordinateGridMixin}\n     */\n    _chart.round = function (round) {\n        if (!arguments.length) {\n            return _round;\n        }\n        _round = round;\n        return _chart;\n    };\n\n    _chart._rangeBandPadding = function (_) {\n        if (!arguments.length) {\n            return _rangeBandPadding;\n        }\n        _rangeBandPadding = _;\n        return _chart;\n    };\n\n    _chart._outerRangeBandPadding = function (_) {\n        if (!arguments.length) {\n            return _outerRangeBandPadding;\n        }\n        _outerRangeBandPadding = _;\n        return _chart;\n    };\n\n    dc.override(_chart, 'filter', function (_) {\n        if (!arguments.length) {\n            return _chart._filter();\n        }\n\n        _chart._filter(_);\n\n        if (_) {\n            _chart.brush().extent(_);\n        } else {\n            _chart.brush().clear();\n        }\n\n        return _chart;\n    });\n\n    _chart.brush = function (_) {\n        if (!arguments.length) {\n            return _brush;\n        }\n        _brush = _;\n        return _chart;\n    };\n\n    function brushHeight () {\n        return _chart._xAxisY() - _chart.margins().top;\n    }\n\n    _chart.renderBrush = function (g) {\n        if (_brushOn) {\n            _brush.on('brush', _chart._brushing);\n            _brush.on('brushstart', _chart._disableMouseZoom);\n            _brush.on('brushend', configureMouseZoom);\n\n            var gBrush = g.append('g')\n                .attr('class', 'brush')\n                .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')')\n                .call(_brush.x(_chart.x()));\n            _chart.setBrushY(gBrush, false);\n            _chart.setHandlePaths(gBrush);\n\n            if (_chart.hasFilter()) {\n                _chart.redrawBrush(g, false);\n            }\n        }\n    };\n\n    _chart.setHandlePaths = function (gBrush) {\n        gBrush.selectAll('.resize').append('path').attr('d', _chart.resizeHandlePath);\n    };\n\n    _chart.setBrushY = function (gBrush) {\n        gBrush.selectAll('rect')\n            .attr('height', brushHeight());\n        gBrush.selectAll('.resize path')\n            .attr('d', _chart.resizeHandlePath);\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _brush.extent();\n        if (_chart.round()) {\n            extent[0] = extent.map(_chart.round())[0];\n            extent[1] = extent.map(_chart.round())[1];\n\n            _g.select('.brush')\n                .call(_brush.extent(extent));\n        }\n        return extent;\n    };\n\n    _chart.brushIsEmpty = function (extent) {\n        return _brush.empty() || !extent || extent[1] <= extent[0];\n    };\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n\n        _chart.redrawBrush(_g, false);\n\n        if (_chart.brushIsEmpty(extent)) {\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n        } else {\n            var rangedFilter = dc.filters.RangedFilter(extent[0], extent[1]);\n\n            dc.events.trigger(function () {\n                _chart.replaceFilter(rangedFilter);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n        }\n    };\n\n    _chart.redrawBrush = function (g, doTransition) {\n        if (_brushOn) {\n            if (_chart.filter() && _chart.brush().empty()) {\n                _chart.brush().extent(_chart.filter());\n            }\n\n            var gBrush = dc.optionalTransition(doTransition, _chart.transitionDuration(), _chart.transitionDelay())(g.select('g.brush'));\n            _chart.setBrushY(gBrush);\n            gBrush.call(_chart.brush()\n                      .x(_chart.x())\n                      .extent(_chart.brush().extent()));\n        }\n\n        _chart.fadeDeselectedArea();\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        // do nothing, sub-chart should override this function\n    };\n\n    // borrowed from Crossfilter example\n    _chart.resizeHandlePath = function (d) {\n        var e = +(d === 'e'), x = e ? 1 : -1, y = brushHeight() / 3;\n        return 'M' + (0.5 * x) + ',' + y +\n            'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6) +\n            'V' + (2 * y - 6) +\n            'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y) +\n            'Z' +\n            'M' + (2.5 * x) + ',' + (y + 8) +\n            'V' + (2 * y - 8) +\n            'M' + (4.5 * x) + ',' + (y + 8) +\n            'V' + (2 * y - 8);\n    };\n\n    function getClipPathId () {\n        return _chart.anchorName().replace(/[ .#=\\[\\]\"]/g, '-') + '-clip';\n    }\n\n    /**\n     * Get or set the padding in pixels for the clip path. Once set padding will be applied evenly to\n     * the top, left, right, and bottom when the clip path is generated. If set to zero, the clip area\n     * will be exactly the chart body area minus the margins.\n     * @method clipPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number} [padding=5]\n     * @returns {Number|dc.coordinateGridMixin}\n     */\n    _chart.clipPadding = function (padding) {\n        if (!arguments.length) {\n            return _clipPadding;\n        }\n        _clipPadding = padding;\n        return _chart;\n    };\n\n    function generateClipPath () {\n        var defs = dc.utils.appendOrSelect(_parent, 'defs');\n        // cannot select <clippath> elements; bug in WebKit, must select by id\n        // https://groups.google.com/forum/#!topic/d3-js/6EpAzQ2gU9I\n        var id = getClipPathId();\n        var chartBodyClip = dc.utils.appendOrSelect(defs, '#' + id, 'clipPath').attr('id', id);\n\n        var padding = _clipPadding * 2;\n\n        dc.utils.appendOrSelect(chartBodyClip, 'rect')\n            .attr('width', _chart.xAxisLength() + padding)\n            .attr('height', _chart.yAxisHeight() + padding)\n            .attr('transform', 'translate(-' + _clipPadding + ', -' + _clipPadding + ')');\n    }\n\n    _chart._preprocessData = function () {};\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chart._preprocessData();\n\n        _chart._generateG();\n        generateClipPath();\n\n        drawChart(true);\n\n        configureMouseZoom();\n\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        _chart._preprocessData();\n\n        drawChart(false);\n        generateClipPath();\n\n        return _chart;\n    };\n\n    function drawChart (render) {\n        if (_chart.isOrdinal()) {\n            _brushOn = false;\n        }\n\n        prepareXAxis(_chart.g(), render);\n        _chart._prepareYAxis(_chart.g());\n\n        _chart.plotData();\n\n        if (_chart.elasticX() || _resizing || render) {\n            _chart.renderXAxis(_chart.g());\n        }\n\n        if (_chart.elasticY() || _resizing || render) {\n            _chart.renderYAxis(_chart.g());\n        }\n\n        if (render) {\n            _chart.renderBrush(_chart.g(), false);\n        } else {\n            _chart.redrawBrush(_chart.g(), _resizing);\n        }\n        _chart.fadeDeselectedArea();\n        _resizing = false;\n    }\n\n    function configureMouseZoom () {\n        if (_mouseZoomable) {\n            _chart._enableMouseZoom();\n        } else if (_hasBeenMouseZoomable) {\n            _chart._disableMouseZoom();\n        }\n    }\n\n    _chart._enableMouseZoom = function () {\n        _hasBeenMouseZoomable = true;\n        _zoom.x(_chart.x())\n            .scaleExtent(_zoomScale)\n            .size([_chart.width(), _chart.height()])\n            .duration(_chart.transitionDuration());\n        _chart.root().call(_zoom);\n    };\n\n    _chart._disableMouseZoom = function () {\n        _chart.root().call(_nullZoom);\n    };\n\n    function zoomHandler () {\n        _refocused = true;\n        if (_zoomOutRestrict) {\n            var constraint = _xOriginalDomain;\n            if (_rangeChart) {\n                constraint = intersectExtents(constraint, _rangeChart.x().domain());\n            }\n            var constrained = constrainExtent(_chart.x().domain(), constraint);\n            if (constrained) {\n                _chart.x().domain(constrained);\n            }\n        }\n\n        var domain = _chart.x().domain();\n        var domFilter = dc.filters.RangedFilter(domain[0], domain[1]);\n\n        _chart.replaceFilter(domFilter);\n        _chart.rescale();\n        _chart.redraw();\n\n        if (_rangeChart && !rangesEqual(_chart.filter(), _rangeChart.filter())) {\n            dc.events.trigger(function () {\n                _rangeChart.replaceFilter(domFilter);\n                _rangeChart.redraw();\n            });\n        }\n\n        _chart._invokeZoomedListener();\n\n        dc.events.trigger(function () {\n            _chart.redrawGroup();\n        }, dc.constants.EVENT_DELAY);\n\n        _refocused = !rangesEqual(domain, _xOriginalDomain);\n    }\n\n    function intersectExtents (ext1, ext2) {\n        if (ext1[0] > ext2[1] || ext1[1] < ext2[0]) {\n            console.warn('could not intersect extents');\n        }\n        return [Math.max(ext1[0], ext2[0]), Math.min(ext1[1], ext2[1])];\n    }\n\n    function constrainExtent (extent, constraint) {\n        var size = extent[1] - extent[0];\n        if (extent[0] < constraint[0]) {\n            return [constraint[0], Math.min(constraint[1], dc.utils.add(constraint[0], size, 'millis'))];\n        } else if (extent[1] > constraint[1]) {\n            return [Math.max(constraint[0], dc.utils.subtract(constraint[1], size, 'millis')), constraint[1]];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Zoom this chart to focus on the given range. The given range should be an array containing only\n     * 2 elements (`[start, end]`) defining a range in the x domain. If the range is not given or set\n     * to null, then the zoom will be reset. _For focus to work elasticX has to be turned off;\n     * otherwise focus will be ignored.\n     * @method focus\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @example\n     * chart.on('renderlet', function(chart) {\n     *     // smooth the rendering through event throttling\n     *     dc.events.trigger(function(){\n     *          // focus some other chart to the range selected by user on this chart\n     *          someOtherChart.focus(chart.filter());\n     *     });\n     * })\n     * @param {Array<Number>} [range]\n     */\n    _chart.focus = function (range) {\n        if (hasRangeSelected(range)) {\n            _chart.x().domain(range);\n        } else {\n            _chart.x().domain(_xOriginalDomain);\n        }\n\n        _zoom.x(_chart.x());\n        zoomHandler();\n    };\n\n    _chart.refocused = function () {\n        return _refocused;\n    };\n\n    _chart.focusChart = function (c) {\n        if (!arguments.length) {\n            return _focusChart;\n        }\n        _focusChart = c;\n        _chart.on('filtered', function (chart) {\n            if (!chart.filter()) {\n                dc.events.trigger(function () {\n                    _focusChart.x().domain(_focusChart.xOriginalDomain());\n                });\n            } else if (!rangesEqual(chart.filter(), _focusChart.filter())) {\n                dc.events.trigger(function () {\n                    _focusChart.focus(chart.filter());\n                });\n            }\n        });\n        return _chart;\n    };\n\n    function rangesEqual (range1, range2) {\n        if (!range1 && !range2) {\n            return true;\n        } else if (!range1 || !range2) {\n            return false;\n        } else if (range1.length === 0 && range2.length === 0) {\n            return true;\n        } else if (range1[0].valueOf() === range2[0].valueOf() &&\n            range1[1].valueOf() === range2[1].valueOf()) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Turn on/off the brush-based range filter. When brushing is on then user can drag the mouse\n     * across a chart with a quantitative scale to perform range filtering based on the extent of the\n     * brush, or click on the bars of an ordinal bar chart or slices of a pie chart to filter and\n     * un-filter them. However turning on the brush filter will disable other interactive elements on\n     * the chart such as highlighting, tool tips, and reference lines. Zooming will still be possible\n     * if enabled, but only via scrolling (panning will be disabled.)\n     * @method brushOn\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [brushOn=true]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.brushOn = function (brushOn) {\n        if (!arguments.length) {\n            return _brushOn;\n        }\n        _brushOn = brushOn;\n        return _chart;\n    };\n\n    function hasRangeSelected (range) {\n        return range instanceof Array && range.length > 1;\n    }\n\n    return _chart;\n};\n\n/**\n * Stack Mixin is an mixin that provides cross-chart support of stackability using d3.layout.stack.\n * @name stackMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.stackMixin}\n */\ndc.stackMixin = function (_chart) {\n\n    function prepareValues (layer, layerIdx) {\n        var valAccessor = layer.accessor || _chart.valueAccessor();\n        layer.name = String(layer.name || layerIdx);\n        layer.values = layer.group.all().map(function (d, i) {\n            return {\n                x: _chart.keyAccessor()(d, i),\n                y: layer.hidden ? null : valAccessor(d, i),\n                data: d,\n                layer: layer.name,\n                hidden: layer.hidden\n            };\n        });\n\n        layer.values = layer.values.filter(domainFilter());\n        return layer.values;\n    }\n\n    var _stackLayout = d3.layout.stack()\n        .values(prepareValues);\n\n    var _stack = [];\n    var _titles = {};\n\n    var _hidableStacks = false;\n    var _evadeDomainFilter = false;\n\n    function domainFilter () {\n        if (!_chart.x() || _evadeDomainFilter) {\n            return d3.functor(true);\n        }\n        var xDomain = _chart.x().domain();\n        if (_chart.isOrdinal()) {\n            // TODO #416\n            //var domainSet = d3.set(xDomain);\n            return function () {\n                return true; //domainSet.has(p.x);\n            };\n        }\n        if (_chart.elasticX()) {\n            return function () { return true; };\n        }\n        return function (p) {\n            //return true;\n            return p.x >= xDomain[0] && p.x <= xDomain[xDomain.length - 1];\n        };\n    }\n\n    /**\n     * Stack a new crossfilter group onto this chart with an optional custom value accessor. All stacks\n     * in the same chart will share the same key accessor and therefore the same set of keys.\n     *\n     * For example, in a stacked bar chart, the bars of each stack will be positioned using the same set\n     * of keys on the x axis, while stacked vertically. If name is specified then it will be used to\n     * generate the legend label.\n     * @method stack\n     * @memberof dc.stackMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * // stack group using default accessor\n     * chart.stack(valueSumGroup)\n     * // stack group using custom accessor\n     * .stack(avgByDayGroup, function(d){return d.value.avgByDay;});\n     * @param {crossfilter.group} group\n     * @param {String} [name]\n     * @param {Function} [accessor]\n     * @returns {Array<{group: crossfilter.group, name: String, accessor: Function}>|dc.stackMixin}\n     */\n    _chart.stack = function (group, name, accessor) {\n        if (!arguments.length) {\n            return _stack;\n        }\n\n        if (arguments.length <= 2) {\n            accessor = name;\n        }\n\n        var layer = {group: group};\n        if (typeof name === 'string') {\n            layer.name = name;\n        }\n        if (typeof accessor === 'function') {\n            layer.accessor = accessor;\n        }\n        _stack.push(layer);\n\n        return _chart;\n    };\n\n    dc.override(_chart, 'group', function (g, n, f) {\n        if (!arguments.length) {\n            return _chart._group();\n        }\n        _stack = [];\n        _titles = {};\n        _chart.stack(g, n);\n        if (f) {\n            _chart.valueAccessor(f);\n        }\n        return _chart._group(g, n);\n    });\n\n    /**\n     * Allow named stacks to be hidden or shown by clicking on legend items.\n     * This does not affect the behavior of hideStack or showStack.\n     * @method hidableStacks\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {Boolean} [hidableStacks=false]\n     * @returns {Boolean|dc.stackMixin}\n     */\n    _chart.hidableStacks = function (hidableStacks) {\n        if (!arguments.length) {\n            return _hidableStacks;\n        }\n        _hidableStacks = hidableStacks;\n        return _chart;\n    };\n\n    function findLayerByName (n) {\n        var i = _stack.map(dc.pluck('name')).indexOf(n);\n        return _stack[i];\n    }\n\n    /**\n     * Hide all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @method hideStack\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {String} stackName\n     * @returns {dc.stackMixin}\n     */\n    _chart.hideStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = true;\n        }\n        return _chart;\n    };\n\n    /**\n     * Show all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @method showStack\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {String} stackName\n     * @returns {dc.stackMixin}\n     */\n    _chart.showStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = false;\n        }\n        return _chart;\n    };\n\n    _chart.getValueAccessorByIndex = function (index) {\n        return _stack[index].accessor || _chart.valueAccessor();\n    };\n\n    _chart.yAxisMin = function () {\n        var min = d3.min(flattenStack(), function (p) {\n            return (p.y < 0) ? (p.y + p.y0) : p.y0;\n        });\n\n        return dc.utils.subtract(min, _chart.yAxisPadding());\n\n    };\n\n    _chart.yAxisMax = function () {\n        var max = d3.max(flattenStack(), function (p) {\n            return (p.y > 0) ? (p.y + p.y0) : p.y0;\n        });\n\n        return dc.utils.add(max, _chart.yAxisPadding());\n    };\n\n    function flattenStack () {\n        var valueses = _chart.data().map(function (layer) { return layer.values; });\n        return Array.prototype.concat.apply([], valueses);\n    }\n\n    _chart.xAxisMin = function () {\n        var min = d3.min(flattenStack(), dc.pluck('x'));\n        return dc.utils.subtract(min, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    };\n\n    _chart.xAxisMax = function () {\n        var max = d3.max(flattenStack(), dc.pluck('x'));\n        return dc.utils.add(max, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    };\n\n    /**\n     * Set or get the title function. Chart class will use this function to render svg title (usually interpreted by\n     * browser as tooltips) for each child element in the chart, i.e. a slice in a pie chart or a bubble in a bubble chart.\n     * Almost every chart supports title function however in grid coordinate chart you need to turn off brush in order to\n     * use title otherwise the brush layer will block tooltip trigger.\n     *\n     * If the first argument is a stack name, the title function will get or set the title for that stack. If stackName\n     * is not provided, the first stack is implied.\n     * @method title\n     * @memberof dc.stackMixin\n     * @instance\n     * @example\n     * // set a title function on 'first stack'\n     * chart.title('first stack', function(d) { return d.key + ': ' + d.value; });\n     * // get a title function from 'second stack'\n     * var secondTitleFunction = chart.title('second stack');\n     * @param {String} [stackName]\n     * @param {Function} [titleAccessor]\n     * @returns {String|dc.stackMixin}\n     */\n    dc.override(_chart, 'title', function (stackName, titleAccessor) {\n        if (!stackName) {\n            return _chart._title();\n        }\n\n        if (typeof stackName === 'function') {\n            return _chart._title(stackName);\n        }\n        if (stackName === _chart._groupName && typeof titleAccessor === 'function') {\n            return _chart._title(titleAccessor);\n        }\n\n        if (typeof titleAccessor !== 'function') {\n            return _titles[stackName] || _chart._title();\n        }\n\n        _titles[stackName] = titleAccessor;\n\n        return _chart;\n    });\n\n    /**\n     * Gets or sets the stack layout algorithm, which computes a baseline for each stack and\n     * propagates it to the next.\n     * @method stackLayout\n     * @memberof dc.stackMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Stack-Layout.md d3.layout.stack}\n     * @param {Function} [stack=d3.layout.stack]\n     * @returns {Function|dc.stackMixin}\n     */\n    _chart.stackLayout = function (stack) {\n        if (!arguments.length) {\n            return _stackLayout;\n        }\n        _stackLayout = stack;\n        if (_stackLayout.values() === d3.layout.stack().values()) {\n            _stackLayout.values(prepareValues);\n        }\n        return _chart;\n    };\n\n    /**\n     * Since dc.js 2.0, there has been {@link https://github.com/dc-js/dc.js/issues/949 an issue}\n     * where points are filtered to the current domain. While this is a useful optimization, it is\n     * incorrectly implemented: the next point outside the domain is required in order to draw lines\n     * that are clipped to the bounds, as well as bars that are partly clipped.\n     *\n     * A fix will be included in dc.js 2.1.x, but a workaround is needed for dc.js 2.0 and until\n     * that fix is published, so set this flag to skip any filtering of points.\n     *\n     * Once the bug is fixed, this flag will have no effect, and it will be deprecated.\n     * @method evadeDomainFilter\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {Boolean} [evadeDomainFilter=false]\n     * @returns {Boolean|dc.stackMixin}\n     */\n    _chart.evadeDomainFilter = function (evadeDomainFilter) {\n        if (!arguments.length) {\n            return _evadeDomainFilter;\n        }\n        _evadeDomainFilter = evadeDomainFilter;\n        return _chart;\n    };\n\n    function visability (l) {\n        return !l.hidden;\n    }\n\n    _chart.data(function () {\n        var layers = _stack.filter(visability);\n        return layers.length ? _chart.stackLayout()(layers) : [];\n    });\n\n    _chart._ordinalXDomain = function () {\n        var flat = flattenStack().map(dc.pluck('data'));\n        var ordered = _chart._computeOrderedGroups(flat);\n        return ordered.map(_chart.keyAccessor());\n    };\n\n    _chart.colorAccessor(function (d) {\n        var layer = this.layer || this.name || d.name || d.layer;\n        return layer;\n    });\n\n    _chart.legendables = function () {\n        return _stack.map(function (layer, i) {\n            return {\n                chart: _chart,\n                name: layer.name,\n                hidden: layer.hidden || false,\n                color: _chart.getColor.call(layer, layer.values, i)\n            };\n        });\n    };\n\n    _chart.isLegendableHidden = function (d) {\n        var layer = findLayerByName(d.name);\n        return layer ? layer.hidden : false;\n    };\n\n    _chart.legendToggle = function (d) {\n        if (_hidableStacks) {\n            if (_chart.isLegendableHidden(d)) {\n                _chart.showStack(d.name);\n            } else {\n                _chart.hideStack(d.name);\n            }\n            //_chart.redraw();\n            _chart.renderGroup();\n        }\n    };\n\n    return _chart;\n};\n\n/**\n * Cap is a mixin that groups small data elements below a _cap_ into an *others* grouping for both the\n * Row and Pie Charts.\n *\n * The top ordered elements in the group up to the cap amount will be kept in the chart, and the rest\n * will be replaced with an *others* element, with value equal to the sum of the replaced values. The\n * keys of the elements below the cap limit are recorded in order to filter by those keys when the\n * others* element is clicked.\n * @name capMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.capMixin}\n */\ndc.capMixin = function (_chart) {\n    var _cap = Infinity, _takeFront = true;\n    var _othersLabel = 'Others';\n\n    // emulate old group.top(N) ordering\n    _chart.ordering(function (kv) {\n        return -kv.value;\n    });\n\n    var _othersGrouper = function (topItems, restItems) {\n        var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n            restKeys = restItems.map(_chart.keyAccessor());\n        if (restItemsSum > 0) {\n            return topItems.concat([{\n                others: restKeys,\n                key: _chart.othersLabel(),\n                value: restItemsSum\n            }]);\n        }\n        return topItems;\n    };\n\n    _chart.cappedKeyAccessor = function (d, i) {\n        if (d.others) {\n            return d.key;\n        }\n        return _chart.keyAccessor()(d, i);\n    };\n\n    _chart.cappedValueAccessor = function (d, i) {\n        if (d.others) {\n            return d.value;\n        }\n        return _chart.valueAccessor()(d, i);\n    };\n\n    // return N \"top\" groups, where N is the cap, sorted by baseMixin.ordering\n    // whether top means front or back depends on takeFront\n    _chart.data(function (group) {\n        if (_cap === Infinity) {\n            return _chart._computeOrderedGroups(group.all());\n        } else {\n            var items = group.all(), rest;\n            items = _chart._computeOrderedGroups(items); // sort by baseMixin.ordering\n\n            if (_cap) {\n                if (_takeFront) {\n                    rest = items.slice(_cap);\n                    items = items.slice(0, _cap);\n                } else {\n                    var start = Math.max(0, items.length - _cap);\n                    rest = items.slice(0, start);\n                    items = items.slice(start);\n                }\n            }\n\n            if (_othersGrouper) {\n                return _othersGrouper(items, rest);\n            }\n            return items;\n        }\n    });\n\n    /**\n     * Get or set the count of elements to that will be included in the cap. If there is an\n     * {@link dc.capMixin#othersGrouper othersGrouper}, any further elements will be combined in an\n     * extra element with its name determined by {@link dc.capMixin#othersLabel othersLabel}.\n     *\n     * As of dc.js 2.1 and onward, the capped charts use\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all()}\n     * and {@link dc.baseMixin#ordering baseMixin.ordering()} to determine the order of\n     * elements. Then `cap` and {@link dc.capMixin#takeFront takeFront} determine how many elements\n     * to keep, from which end of the resulting array.\n     *\n     * **Migration note:** Up through dc.js 2.0.*, capping used\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_top group.top(N)},\n     * which selects the largest items according to\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_order group.order()}.\n     * The chart then sorted the items according to {@link dc.baseMixin#ordering baseMixin.ordering()}.\n     * So the two values essentially had to agree, but if the `group.order()` was incorrect (it's\n     * easy to forget about), the wrong rows or slices would be displayed, in the correct order.\n     *\n     * If your chart previously relied on `group.order()`, use `chart.ordering()` instead. As of\n     * 2.1.5, the ordering defaults to sorting from greatest to least like `group.top(N)` did.\n     *\n     * If you want to cap by one ordering but sort by another, please\n     * [file an issue](https://github.com/dc-js/dc.js/issues/new) - it's still possible but we'll\n     * need to work up an example.\n     * @method cap\n     * @memberof dc.capMixin\n     * @instance\n     * @param {Number} [count=Infinity]\n     * @returns {Number|dc.capMixin}\n     */\n    _chart.cap = function (count) {\n        if (!arguments.length) {\n            return _cap;\n        }\n        _cap = count;\n        return _chart;\n    };\n\n    /**\n     * Get or set the direction of capping. If set, the chart takes the first\n     * {@link dc.capMixin#cap cap} elements from the sorted array of elements; otherwise\n     * it takes the last `cap` elements.\n     * @method takeFront\n     * @memberof dc.capMixin\n     * @instance\n     * @param {Boolean} [takeFront=true]\n     * @returns {Boolean|dc.capMixin}\n     */\n    _chart.takeFront = function (takeFront) {\n        if (!arguments.length) {\n            return _takeFront;\n        }\n        _takeFront = takeFront;\n        return _chart;\n    };\n\n    /**\n     * Get or set the label for *Others* slice when slices cap is specified.\n     * @method othersLabel\n     * @memberof dc.capMixin\n     * @instance\n     * @param {String} [label=\"Others\"]\n     * @returns {String|dc.capMixin}\n     */\n    _chart.othersLabel = function (label) {\n        if (!arguments.length) {\n            return _othersLabel;\n        }\n        _othersLabel = label;\n        return _chart;\n    };\n\n    /**\n     * Get or set the grouper function that will perform the insertion of data for the *Others* slice\n     * if the slices cap is specified. If set to a falsy value, no others will be added.\n     *\n     * The grouper function takes an array of included (\"top\") items, and an array of the rest of\n     * the items. By default the grouper function computes the sum of the rest.\n     * @method othersGrouper\n     * @memberof dc.capMixin\n     * @instance\n     * @example\n     * // Do not show others\n     * chart.othersGrouper(null);\n     * // Default others grouper\n     * chart.othersGrouper(function (topItems, restItems) {\n     *     var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n     *         restKeys = restItems.map(_chart.keyAccessor());\n     *     if (restItemsSum > 0) {\n     *         return topItems.concat([{\n     *             others: restKeys,\n     *             key: _chart.othersLabel(),\n     *             value: restItemsSum\n     *         }]);\n     *     }\n     *     return topItems;\n     * });\n     * @param {Function} [grouperFunction]\n     * @returns {Function|dc.capMixin}\n     */\n    _chart.othersGrouper = function (grouperFunction) {\n        if (!arguments.length) {\n            return _othersGrouper;\n        }\n        _othersGrouper = grouperFunction;\n        return _chart;\n    };\n\n    dc.override(_chart, 'onClick', function (d) {\n        if (d.others) {\n            _chart.filter([d.others]);\n        }\n        _chart._onClick(d);\n    });\n\n    return _chart;\n};\n\n/**\n * This Mixin provides reusable functionalities for any chart that needs to visualize data using bubbles.\n * @name bubbleMixin\n * @memberof dc\n * @mixin\n * @mixes dc.colorMixin\n * @param {Object} _chart\n * @returns {dc.bubbleMixin}\n */\ndc.bubbleMixin = function (_chart) {\n    var _maxBubbleRelativeSize = 0.3;\n    var _minRadiusWithLabel = 10;\n    var _sortBubbleSize = false;\n    var _elasticRadius = false;\n\n    _chart.BUBBLE_NODE_CLASS = 'node';\n    _chart.BUBBLE_CLASS = 'bubble';\n    _chart.MIN_RADIUS = 10;\n\n    _chart = dc.colorMixin(_chart);\n\n    _chart.renderLabel(true);\n\n    _chart.data(function (group) {\n        var data = group.all();\n        if (_sortBubbleSize) {\n            // sort descending so smaller bubbles are on top\n            var radiusAccessor = _chart.radiusValueAccessor();\n            data.sort(function (a, b) { return d3.descending(radiusAccessor(a), radiusAccessor(b)); });\n        }\n        return data;\n    });\n\n    var _r = d3.scale.linear().domain([0, 100]);\n\n    var _rValueAccessor = function (d) {\n        return d.r;\n    };\n\n    /**\n     * Get or set the bubble radius scale. By default the bubble chart uses\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md#linear d3.scale.linear().domain([0, 100])}\n     * as its radius scale.\n     * @method r\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [bubbleRadiusScale=d3.scale.linear().domain([0, 100])]\n     * @returns {d3.scale|dc.bubbleMixin}\n     */\n    _chart.r = function (bubbleRadiusScale) {\n        if (!arguments.length) {\n            return _r;\n        }\n        _r = bubbleRadiusScale;\n        return _chart;\n    };\n\n    /**\n     * Turn on or off the elastic bubble radius feature, or return the value of the flag. If this\n     * feature is turned on, then bubble radii will be automatically rescaled to fit the chart better.\n     * @method elasticRadius\n     * @memberof dc.bubbleChart\n     * @instance\n     * @param {Boolean} [elasticRadius=false]\n     * @returns {Boolean|dc.bubbleChart}\n     */\n    _chart.elasticRadius = function (elasticRadius) {\n        if (!arguments.length) {\n            return _elasticRadius;\n        }\n        _elasticRadius = elasticRadius;\n        return _chart;\n    };\n\n    _chart.calculateRadiusDomain = function () {\n        if (_elasticRadius) {\n            _chart.r().domain([_chart.rMin(), _chart.rMax()]);\n        }\n    };\n\n    /**\n     * Get or set the radius value accessor function. If set, the radius value accessor function will\n     * be used to retrieve a data value for each bubble. The data retrieved then will be mapped using\n     * the r scale to the actual bubble radius. This allows you to encode a data dimension using bubble\n     * size.\n     * @method radiusValueAccessor\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Function} [radiusValueAccessor]\n     * @returns {Function|dc.bubbleMixin}\n     */\n    _chart.radiusValueAccessor = function (radiusValueAccessor) {\n        if (!arguments.length) {\n            return _rValueAccessor;\n        }\n        _rValueAccessor = radiusValueAccessor;\n        return _chart;\n    };\n\n    _chart.rMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.radiusValueAccessor()(e);\n        });\n        return min;\n    };\n\n    _chart.rMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.radiusValueAccessor()(e);\n        });\n        return max;\n    };\n\n    _chart.bubbleR = function (d) {\n        var value = _chart.radiusValueAccessor()(d);\n        var r = _chart.r()(value);\n        if (isNaN(r) || value <= 0) {\n            r = 0;\n        }\n        return r;\n    };\n\n    var labelFunction = function (d) {\n        return _chart.label()(d);\n    };\n\n    var shouldLabel = function (d) {\n        return (_chart.bubbleR(d) > _minRadiusWithLabel);\n    };\n\n    var labelOpacity = function (d) {\n        return shouldLabel(d) ? 1 : 0;\n    };\n\n    var labelPointerEvent = function (d) {\n        return shouldLabel(d) ? 'all' : 'none';\n    };\n\n    _chart._doRenderLabel = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n            var label = bubbleGEnter.select('text');\n\n            if (label.empty()) {\n                label = bubbleGEnter.append('text')\n                    .attr('text-anchor', 'middle')\n                    .attr('dy', '.3em')\n                    .on('click', _chart.onClick);\n            }\n\n            label\n                .attr('opacity', 0)\n                .attr('pointer-events', labelPointerEvent)\n                .text(labelFunction);\n            dc.transition(label, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', labelOpacity);\n        }\n    };\n\n    _chart.doUpdateLabels = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n            var labels = bubbleGEnter.select('text')\n                .attr('pointer-events', labelPointerEvent)\n                .text(labelFunction);\n            dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', labelOpacity);\n        }\n    };\n\n    var titleFunction = function (d) {\n        return _chart.title()(d);\n    };\n\n    _chart._doRenderTitles = function (g) {\n        if (_chart.renderTitle()) {\n            var title = g.select('title');\n\n            if (title.empty()) {\n                g.append('title').text(titleFunction);\n            }\n        }\n    };\n\n    _chart.doUpdateTitles = function (g) {\n        if (_chart.renderTitle()) {\n            g.select('title').text(titleFunction);\n        }\n    };\n\n    /**\n     * Turn on or off the bubble sorting feature, or return the value of the flag. If enabled,\n     * bubbles will be sorted by their radius, with smaller bubbles in front.\n     * @method sortBubbleSize\n     * @memberof dc.bubbleChart\n     * @instance\n     * @param {Boolean} [sortBubbleSize=false]\n     * @returns {Boolean|dc.bubbleChart}\n     */\n    _chart.sortBubbleSize = function (sortBubbleSize) {\n        if (!arguments.length) {\n            return _sortBubbleSize;\n        }\n        _sortBubbleSize = sortBubbleSize;\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimum radius. This will be used to initialize the radius scale's range.\n     * @method minRadius\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [radius=10]\n     * @returns {Number|dc.bubbleMixin}\n     */\n    _chart.minRadius = function (radius) {\n        if (!arguments.length) {\n            return _chart.MIN_RADIUS;\n        }\n        _chart.MIN_RADIUS = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimum radius for label rendering. If a bubble's radius is less than this value\n     * then no label will be rendered.\n     * @method minRadiusWithLabel\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [radius=10]\n     * @returns {Number|dc.bubbleMixin}\n     */\n\n    _chart.minRadiusWithLabel = function (radius) {\n        if (!arguments.length) {\n            return _minRadiusWithLabel;\n        }\n        _minRadiusWithLabel = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the maximum relative size of a bubble to the length of x axis. This value is useful\n     * when the difference in radius between bubbles is too great.\n     * @method maxBubbleRelativeSize\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [relativeSize=0.3]\n     * @returns {Number|dc.bubbleMixin}\n     */\n    _chart.maxBubbleRelativeSize = function (relativeSize) {\n        if (!arguments.length) {\n            return _maxBubbleRelativeSize;\n        }\n        _maxBubbleRelativeSize = relativeSize;\n        return _chart;\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function (d) {\n                if (_chart.isSelectedNode(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n    };\n\n    _chart.onClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    return _chart;\n};\n\n/**\n * The pie chart implementation is usually used to visualize a small categorical distribution.  The pie\n * chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each\n * slice relative to the sum of all values. Slices are ordered by {@link dc.baseMixin#ordering ordering}\n * which defaults to sorting by key.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class pieChart\n * @memberof dc\n * @mixes dc.capMixin\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a pie chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.pieChart('#chart-container1');\n * // create a pie chart under #chart-container2 element using chart group A\n * var chart2 = dc.pieChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.pieChart}\n */\ndc.pieChart = function (parent, chartGroup) {\n    var DEFAULT_MIN_ANGLE_FOR_LABEL = 0.5;\n\n    var _sliceCssClass = 'pie-slice';\n    var _labelCssClass = 'pie-label';\n    var _sliceGroupCssClass = 'pie-slice-group';\n    var _labelGroupCssClass = 'pie-label-group';\n    var _emptyCssClass = 'empty-chart';\n    var _emptyTitle = 'empty';\n\n    var _radius,\n        _givenRadius, // specified radius, if any\n        _innerRadius = 0,\n        _externalRadiusPadding = 0;\n\n    var _g;\n    var _cx;\n    var _cy;\n    var _minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL;\n    var _externalLabelRadius;\n    var _drawPaths = false;\n    var _chart = dc.capMixin(dc.colorMixin(dc.baseMixin({})));\n\n    _chart.colorAccessor(_chart.cappedKeyAccessor);\n\n    _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n    });\n\n    /**\n     * Get or set the maximum number of slices the pie chart will generate. The top slices are determined by\n     * value from high to low. Other slices exeeding the cap will be rolled up into one single *Others* slice.\n     * @method slicesCap\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cap]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.slicesCap = _chart.cap;\n\n    _chart.label(_chart.cappedKeyAccessor);\n    _chart.renderLabel(true);\n\n    _chart.transitionDuration(350);\n    _chart.transitionDelay(0);\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg()\n            .append('g')\n            .attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n\n        _g.append('g').attr('class', _sliceGroupCssClass);\n        _g.append('g').attr('class', _labelGroupCssClass);\n\n        drawChart();\n\n        return _chart;\n    };\n\n    function drawChart () {\n        // set radius from chart size if none given, or if given radius is too large\n        var maxRadius =  d3.min([_chart.width(), _chart.height()]) / 2;\n        _radius = _givenRadius && _givenRadius < maxRadius ? _givenRadius : maxRadius;\n\n        var arc = buildArcs();\n\n        var pie = pieLayout();\n        var pieData;\n        // if we have data...\n        if (d3.sum(_chart.data(), _chart.valueAccessor())) {\n            pieData = pie(_chart.data());\n            _g.classed(_emptyCssClass, false);\n        } else {\n            // otherwise we'd be getting NaNs, so override\n            // note: abuse others for its ignoring the value accessor\n            pieData = pie([{key: _emptyTitle, value: 1, others: [_emptyTitle]}]);\n            _g.classed(_emptyCssClass, true);\n        }\n\n        if (_g) {\n            var slices = _g.select('g.' + _sliceGroupCssClass)\n                .selectAll('g.' + _sliceCssClass)\n                .data(pieData);\n\n            var labels = _g.select('g.' + _labelGroupCssClass)\n                .selectAll('text.' + _labelCssClass)\n                .data(pieData);\n\n            createElements(slices, labels, arc, pieData);\n\n            updateElements(pieData, arc);\n\n            removeElements(slices, labels);\n\n            highlightFilter();\n\n            dc.transition(_g, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n        }\n    }\n\n    function createElements (slices, labels, arc, pieData) {\n        var slicesEnter = createSliceNodes(slices);\n\n        createSlicePath(slicesEnter, arc);\n\n        createTitles(slicesEnter);\n\n        createLabels(labels, pieData, arc);\n    }\n\n    function createSliceNodes (slices) {\n        var slicesEnter = slices\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return _sliceCssClass + ' _' + i;\n            });\n        return slicesEnter;\n    }\n\n    function createSlicePath (slicesEnter, arc) {\n        var slicePath = slicesEnter.append('path')\n            .attr('fill', fill)\n            .on('click', onClick)\n            .attr('d', function (d, i) {\n                return safeArc(d, i, arc);\n            });\n\n        var transition = dc.transition(slicePath, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenPie);\n        }\n    }\n\n    function createTitles (slicesEnter) {\n        if (_chart.renderTitle()) {\n            slicesEnter.append('title').text(function (d) {\n                return _chart.title()(d.data);\n            });\n        }\n    }\n\n    _chart._applyLabelText = function (labels) {\n        labels\n            .text(function (d) {\n                var data = d.data;\n                if ((sliceHasNoData(data) || sliceTooSmall(d)) && !isSelectedSlice(d)) {\n                    return '';\n                }\n                return _chart.label()(d.data);\n            });\n    };\n\n    function positionLabels (labels, arc) {\n        _chart._applyLabelText(labels);\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', function (d) {\n                return labelPosition(d, arc);\n            })\n            .attr('text-anchor', 'middle');\n    }\n\n    function highlightSlice (i, whether) {\n        _chart.select('g.pie-slice._' + i)\n            .classed('highlight', whether);\n    }\n\n    function createLabels (labels, pieData, arc) {\n        if (_chart.renderLabel()) {\n            var labelsEnter = labels\n                .enter()\n                .append('text')\n                .attr('class', function (d, i) {\n                    var classes = _sliceCssClass + ' ' + _labelCssClass + ' _' + i;\n                    if (_externalLabelRadius) {\n                        classes += ' external';\n                    }\n                    return classes;\n                })\n                .on('click', onClick)\n                .on('mouseover', function (d, i) {\n                    highlightSlice(i, true);\n                })\n                .on('mouseout', function (d, i) {\n                    highlightSlice(i, false);\n                });\n            positionLabels(labelsEnter, arc);\n            if (_externalLabelRadius && _drawPaths) {\n                updateLabelPaths(pieData, arc);\n            }\n        }\n    }\n\n    function updateLabelPaths (pieData, arc) {\n        var polyline = _g.selectAll('polyline.' + _sliceCssClass)\n                .data(pieData);\n\n        polyline\n                .enter()\n                .append('polyline')\n                .attr('class', function (d, i) {\n                    return 'pie-path _' + i + ' ' + _sliceCssClass;\n                })\n                .on('click', onClick)\n                .on('mouseover', function (d, i) {\n                    highlightSlice(i, true);\n                })\n                .on('mouseout', function (d, i) {\n                    highlightSlice(i, false);\n                });\n\n        polyline.exit().remove();\n        var arc2 = d3.svg.arc()\n                .outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .innerRadius(_radius - _externalRadiusPadding);\n        var transition = dc.transition(polyline, _chart.transitionDuration(), _chart.transitionDelay());\n        // this is one rare case where d3.selection differs from d3.transition\n        if (transition.attrTween) {\n            transition\n                .attrTween('points', function (d) {\n                    var current = this._current || d;\n                    current = {startAngle: current.startAngle, endAngle: current.endAngle};\n                    var interpolate = d3.interpolate(current, d);\n                    this._current = interpolate(0);\n                    return function (t) {\n                        var d2 = interpolate(t);\n                        return [arc.centroid(d2), arc2.centroid(d2)];\n                    };\n                });\n        } else {\n            transition.attr('points', function (d) {\n                return [arc.centroid(d), arc2.centroid(d)];\n            });\n        }\n        transition.style('visibility', function (d) {\n            return d.endAngle - d.startAngle < 0.0001 ? 'hidden' : 'visible';\n        });\n\n    }\n\n    function updateElements (pieData, arc) {\n        updateSlicePaths(pieData, arc);\n        updateLabels(pieData, arc);\n        updateTitles(pieData);\n    }\n\n    function updateSlicePaths (pieData, arc) {\n        var slicePaths = _g.selectAll('g.' + _sliceCssClass)\n            .data(pieData)\n            .select('path')\n            .attr('d', function (d, i) {\n                return safeArc(d, i, arc);\n            });\n        var transition = dc.transition(slicePaths, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenPie);\n        }\n        transition.attr('fill', fill);\n    }\n\n    function updateLabels (pieData, arc) {\n        if (_chart.renderLabel()) {\n            var labels = _g.selectAll('text.' + _labelCssClass)\n                .data(pieData);\n            positionLabels(labels, arc);\n            if (_externalLabelRadius && _drawPaths) {\n                updateLabelPaths(pieData, arc);\n            }\n        }\n    }\n\n    function updateTitles (pieData) {\n        if (_chart.renderTitle()) {\n            _g.selectAll('g.' + _sliceCssClass)\n                .data(pieData)\n                .select('title')\n                .text(function (d) {\n                    return _chart.title()(d.data);\n                });\n        }\n    }\n\n    function removeElements (slices, labels) {\n        slices.exit().remove();\n        labels.exit().remove();\n    }\n\n    function highlightFilter () {\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.' + _sliceCssClass).each(function (d) {\n                if (isSelectedSlice(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.' + _sliceCssClass).each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    }\n\n    /**\n     * Get or set the external radius padding of the pie chart. This will force the radius of the\n     * pie chart to become smaller or larger depending on the value.\n     * @method externalRadiusPadding\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [externalRadiusPadding=0]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.externalRadiusPadding = function (externalRadiusPadding) {\n        if (!arguments.length) {\n            return _externalRadiusPadding;\n        }\n        _externalRadiusPadding = externalRadiusPadding;\n        return _chart;\n    };\n\n    /**\n     * Get or set the inner radius of the pie chart. If the inner radius is greater than 0px then the\n     * pie chart will be rendered as a doughnut chart.\n     * @method innerRadius\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [innerRadius=0]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.innerRadius = function (innerRadius) {\n        if (!arguments.length) {\n            return _innerRadius;\n        }\n        _innerRadius = innerRadius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the outer radius. If the radius is not set, it will be half of the minimum of the\n     * chart width and height.\n     * @method radius\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [radius]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.radius = function (radius) {\n        if (!arguments.length) {\n            return _givenRadius;\n        }\n        _givenRadius = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set center x coordinate position. Default is center of svg.\n     * @method cx\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cx]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.cx = function (cx) {\n        if (!arguments.length) {\n            return (_cx ||  _chart.width() / 2);\n        }\n        _cx = cx;\n        return _chart;\n    };\n\n    /**\n     * Get or set center y coordinate position. Default is center of svg.\n     * @method cy\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cy]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.cy = function (cy) {\n        if (!arguments.length) {\n            return (_cy ||  _chart.height() / 2);\n        }\n        _cy = cy;\n        return _chart;\n    };\n\n    function buildArcs () {\n        return d3.svg.arc()\n            .outerRadius(_radius - _externalRadiusPadding)\n            .innerRadius(_innerRadius);\n    }\n\n    function isSelectedSlice (d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d.data));\n    }\n\n    _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not\n     * display a slice label.\n     * @method minAngleForLabel\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [minAngleForLabel=0.5]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.minAngleForLabel = function (minAngleForLabel) {\n        if (!arguments.length) {\n            return _minAngleForLabel;\n        }\n        _minAngleForLabel = minAngleForLabel;\n        return _chart;\n    };\n\n    function pieLayout () {\n        return d3.layout.pie().sort(null).value(_chart.cappedValueAccessor);\n    }\n\n    function sliceTooSmall (d) {\n        var angle = (d.endAngle - d.startAngle);\n        return isNaN(angle) || angle < _minAngleForLabel;\n    }\n\n    function sliceHasNoData (d) {\n        return _chart.cappedValueAccessor(d) === 0;\n    }\n\n    function tweenPie (b) {\n        b.innerRadius = _innerRadius;\n        var current = this._current;\n        if (isOffCanvas(current)) {\n            current = {startAngle: 0, endAngle: 0};\n        } else {\n            // only interpolate startAngle & endAngle, not the whole data object\n            current = {startAngle: current.startAngle, endAngle: current.endAngle};\n        }\n        var i = d3.interpolate(current, b);\n        this._current = i(0);\n        return function (t) {\n            return safeArc(i(t), 0, buildArcs());\n        };\n    }\n\n    function isOffCanvas (current) {\n        return !current || isNaN(current.startAngle) || isNaN(current.endAngle);\n    }\n\n    function fill (d, i) {\n        return _chart.getColor(d.data, i);\n    }\n\n    function onClick (d, i) {\n        if (_g.attr('class') !== _emptyCssClass) {\n            _chart.onClick(d.data, i);\n        }\n    }\n\n    function safeArc (d, i, arc) {\n        var path = arc(d, i);\n        if (path.indexOf('NaN') >= 0) {\n            path = 'M0,0';\n        }\n        return path;\n    }\n\n    /**\n     * Title to use for the only slice when there is no data.\n     * @method emptyTitle\n     * @memberof dc.pieChart\n     * @instance\n     * @param {String} [title]\n     * @returns {String|dc.pieChart}\n     */\n    _chart.emptyTitle = function (title) {\n        if (arguments.length === 0) {\n            return _emptyTitle;\n        }\n        _emptyTitle = title;\n        return _chart;\n    };\n\n    /**\n     * Position slice labels offset from the outer edge of the chart.\n     *\n     * The argument specifies the extra radius to be added for slice labels.\n     * @method externalLabels\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [externalLabelRadius]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.externalLabels = function (externalLabelRadius) {\n        if (arguments.length === 0) {\n            return _externalLabelRadius;\n        } else if (externalLabelRadius) {\n            _externalLabelRadius = externalLabelRadius;\n        } else {\n            _externalLabelRadius = undefined;\n        }\n\n        return _chart;\n    };\n\n    /**\n     * Get or set whether to draw lines from pie slices to their labels.\n     *\n     * @method drawPaths\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Boolean} [drawPaths]\n     * @returns {Boolean|dc.pieChart}\n     */\n    _chart.drawPaths = function (drawPaths) {\n        if (arguments.length === 0) {\n            return _drawPaths;\n        }\n        _drawPaths = drawPaths;\n        return _chart;\n    };\n\n    function labelPosition (d, arc) {\n        var centroid;\n        if (_externalLabelRadius) {\n            centroid = d3.svg.arc()\n                .outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .innerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .centroid(d);\n        } else {\n            centroid = arc.centroid(d);\n        }\n        if (isNaN(centroid[0]) || isNaN(centroid[1])) {\n            return 'translate(0,0)';\n        } else {\n            return 'translate(' + centroid + ')';\n        }\n    }\n\n    _chart.legendables = function () {\n        return _chart.data().map(function (d, i) {\n            var legendable = {name: d.key, data: d.value, others: d.others, chart: _chart};\n            legendable.color = _chart.getColor(d, i);\n            return legendable;\n        });\n    };\n\n    _chart.legendHighlight = function (d) {\n        highlightSliceFromLegendable(d, true);\n    };\n\n    _chart.legendReset = function (d) {\n        highlightSliceFromLegendable(d, false);\n    };\n\n    _chart.legendToggle = function (d) {\n        _chart.onClick({key: d.name, others: d.others});\n    };\n\n    function highlightSliceFromLegendable (legendable, highlighted) {\n        _chart.selectAll('g.pie-slice').each(function (d) {\n            if (legendable.name === d.data.key) {\n                d3.select(this).classed('highlight', highlighted);\n            }\n        });\n    }\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Concrete bar chart/histogram implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class barChart\n * @memberof dc\n * @mixes dc.stackMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a bar chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.barChart('#chart-container1');\n * // create a bar chart under #chart-container2 element using chart group A\n * var chart2 = dc.barChart('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.barChart(compositeChart);\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n * specifying a dom block element such as a div; or a dom element or d3 selection.  If the bar\n * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n * composite chart instance instead.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.barChart}\n */\ndc.barChart = function (parent, chartGroup) {\n    var MIN_BAR_WIDTH = 1;\n    var DEFAULT_GAP_BETWEEN_BARS = 2;\n    var LABEL_PADDING = 3;\n\n    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n\n    var _gap = DEFAULT_GAP_BETWEEN_BARS;\n    var _centerBar = false;\n    var _alwaysUseRounding = false;\n\n    var _barWidth;\n\n    dc.override(_chart, 'rescale', function () {\n        _chart._rescale();\n        _barWidth = undefined;\n        return _chart;\n    });\n\n    dc.override(_chart, 'render', function () {\n        if (_chart.round() && _centerBar && !_alwaysUseRounding) {\n            dc.logger.warn('By default, brush rounding is disabled if bars are centered. ' +\n                         'See dc.js bar chart API documentation for details.');\n        }\n\n        return _chart._render();\n    });\n\n    _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n    }, false);\n\n    _chart.plotData = function () {\n        var layers = _chart.chartBodyG().selectAll('g.stack')\n            .data(_chart.data());\n\n        calculateBarWidth();\n\n        layers\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return 'stack ' + '_' + i;\n            });\n\n        var last = layers.size() - 1;\n        layers.each(function (d, i) {\n            var layer = d3.select(this);\n\n            renderBars(layer, i, d);\n\n            if (_chart.renderLabel() && last === i) {\n                renderLabels(layer, i, d);\n            }\n        });\n    };\n\n    function barHeight (d) {\n        return dc.utils.safeNumber(Math.abs(_chart.y()(d.y + d.y0) - _chart.y()(d.y0)));\n    }\n\n    function renderLabels (layer, layerIndex, d) {\n        var labels = layer.selectAll('text.barLabel')\n            .data(d.values, dc.pluck('x'));\n\n        labels.enter()\n            .append('text')\n            .attr('class', 'barLabel')\n            .attr('text-anchor', 'middle');\n\n        if (_chart.isOrdinal()) {\n            labels.on('click', _chart.onClick);\n            labels.attr('cursor', 'pointer');\n        }\n\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) {\n                var x = _chart.x()(d.x);\n                if (!_centerBar) {\n                    x += _barWidth / 2;\n                }\n                return dc.utils.safeNumber(x);\n            })\n            .attr('y', function (d) {\n                var y = _chart.y()(d.y + d.y0);\n\n                if (d.y < 0) {\n                    y -= barHeight(d);\n                }\n\n                return dc.utils.safeNumber(y - LABEL_PADDING);\n            })\n            .text(function (d) {\n                return _chart.label()(d);\n            });\n\n        dc.transition(labels.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('height', 0)\n            .remove();\n    }\n\n    function renderBars (layer, layerIndex, d) {\n        var bars = layer.selectAll('rect.bar')\n            .data(d.values, dc.pluck('x'));\n\n        var enter = bars.enter()\n            .append('rect')\n            .attr('class', 'bar')\n            .attr('fill', dc.pluck('data', _chart.getColor))\n            .attr('y', _chart.yAxisHeight())\n            .attr('height', 0);\n\n        if (_chart.renderTitle()) {\n            enter.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n\n        if (_chart.isOrdinal()) {\n            bars.on('click', _chart.onClick);\n        }\n\n        dc.transition(bars, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) {\n                var x = _chart.x()(d.x);\n                if (_centerBar) {\n                    x -= _barWidth / 2;\n                }\n                if (_chart.isOrdinal() && _gap !== undefined) {\n                    x += _gap / 2;\n                }\n                return dc.utils.safeNumber(x);\n            })\n            .attr('y', function (d) {\n                var y = _chart.y()(d.y + d.y0);\n\n                if (d.y < 0) {\n                    y -= barHeight(d);\n                }\n\n                return dc.utils.safeNumber(y);\n            })\n            .attr('width', _barWidth)\n            .attr('height', function (d) {\n                return barHeight(d);\n            })\n            .attr('fill', dc.pluck('data', _chart.getColor))\n            .select('title').text(dc.pluck('data', _chart.title(d.name)));\n\n        dc.transition(bars.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) { return _chart.x()(d.x); })\n            .attr('width', _barWidth * 0.9)\n            .remove();\n    }\n\n    function calculateBarWidth () {\n        if (_barWidth === undefined) {\n            var numberOfBars = _chart.xUnitCount();\n\n            // please can't we always use rangeBands for bar charts?\n            if (_chart.isOrdinal() && _gap === undefined) {\n                _barWidth = Math.floor(_chart.x().rangeBand());\n            } else if (_gap) {\n                _barWidth = Math.floor((_chart.xAxisLength() - (numberOfBars - 1) * _gap) / numberOfBars);\n            } else {\n                _barWidth = Math.floor(_chart.xAxisLength() / (1 + _chart.barPadding()) / numberOfBars);\n            }\n\n            if (_barWidth === Infinity || isNaN(_barWidth) || _barWidth < MIN_BAR_WIDTH) {\n                _barWidth = MIN_BAR_WIDTH;\n            }\n        }\n    }\n\n    _chart.fadeDeselectedArea = function () {\n        var bars = _chart.chartBodyG().selectAll('rect.bar');\n        var extent = _chart.brush().extent();\n\n        if (_chart.isOrdinal()) {\n            if (_chart.hasFilter()) {\n                bars.classed(dc.constants.SELECTED_CLASS, function (d) {\n                    return _chart.hasFilter(d.x);\n                });\n                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n                    return !_chart.hasFilter(d.x);\n                });\n            } else {\n                bars.classed(dc.constants.SELECTED_CLASS, false);\n                bars.classed(dc.constants.DESELECTED_CLASS, false);\n            }\n        } else {\n            if (!_chart.brushIsEmpty(extent)) {\n                var start = extent[0];\n                var end = extent[1];\n\n                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n                    return d.x < start || d.x >= end;\n                });\n            } else {\n                bars.classed(dc.constants.DESELECTED_CLASS, false);\n            }\n        }\n    };\n\n    /**\n     * Whether the bar chart will render each bar centered around the data position on the x-axis.\n     * @method centerBar\n     * @memberof dc.barChart\n     * @instance\n     * @param {Boolean} [centerBar=false]\n     * @returns {Boolean|dc.barChart}\n     */\n    _chart.centerBar = function (centerBar) {\n        if (!arguments.length) {\n            return _centerBar;\n        }\n        _centerBar = centerBar;\n        return _chart;\n    };\n\n    dc.override(_chart, 'onClick', function (d) {\n        _chart._onClick(d.data);\n    });\n\n    /**\n     * Get or set the spacing between bars as a fraction of bar size. Valid values are between 0-1.\n     * Setting this value will also remove any previously set {@link dc.barChart#gap gap}. See the\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n     * for a visual description of how the padding is applied.\n     * @method barPadding\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [barPadding=0]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.barPadding = function (barPadding) {\n        if (!arguments.length) {\n            return _chart._rangeBandPadding();\n        }\n        _chart._rangeBandPadding(barPadding);\n        _gap = undefined;\n        return _chart;\n    };\n\n    _chart._useOuterPadding = function () {\n        return _gap === undefined;\n    };\n\n    /**\n     * Get or set the outer padding on an ordinal bar chart. This setting has no effect on non-ordinal charts.\n     * Will pad the width by `padding * barWidth` on each side of the chart.\n     * @method outerPadding\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [padding=0.5]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.outerPadding = _chart._outerRangeBandPadding;\n\n    /**\n     * Manually set fixed gap (in px) between bars instead of relying on the default auto-generated\n     * gap.  By default the bar chart implementation will calculate and set the gap automatically\n     * based on the number of data points and the length of the x axis.\n     * @method gap\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [gap=2]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _chart;\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n        if (_chart.round() && (!_centerBar || _alwaysUseRounding)) {\n            extent[0] = extent.map(_chart.round())[0];\n            extent[1] = extent.map(_chart.round())[1];\n\n            _chart.chartBodyG().select('.brush')\n                .call(_chart.brush().extent(extent));\n        }\n\n        return extent;\n    };\n\n    /**\n     * Set or get whether rounding is enabled when bars are centered. If false, using\n     * rounding with centered bars will result in a warning and rounding will be ignored.  This flag\n     * has no effect if bars are not {@link dc.barChart#centerBar centered}.\n     * When using standard d3.js rounding methods, the brush often doesn't align correctly with\n     * centered bars since the bars are offset.  The rounding function must add an offset to\n     * compensate, such as in the following example.\n     * @method alwaysUseRounding\n     * @memberof dc.barChart\n     * @instance\n     * @example\n     * chart.round(function(n) { return Math.floor(n) + 0.5; });\n     * @param {Boolean} [alwaysUseRounding=false]\n     * @returns {Boolean|dc.barChart}\n     */\n    _chart.alwaysUseRounding = function (alwaysUseRounding) {\n        if (!arguments.length) {\n            return _alwaysUseRounding;\n        }\n        _alwaysUseRounding = alwaysUseRounding;\n        return _chart;\n    };\n\n    function colorFilter (color, inv) {\n        return function () {\n            var item = d3.select(this);\n            var match = item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n    }\n\n    _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n            _chart.g().selectAll('rect.bar')\n                .classed('highlight', colorFilter(d.color))\n                .classed('fadeout', colorFilter(d.color, true));\n        }\n    };\n\n    _chart.legendReset = function () {\n        _chart.g().selectAll('rect.bar')\n            .classed('highlight', false)\n            .classed('fadeout', false);\n    };\n\n    dc.override(_chart, 'xAxisMax', function () {\n        var max = this._xAxisMax();\n        if ('resolution' in _chart.xUnits()) {\n            var res = _chart.xUnits().resolution;\n            max += res;\n        }\n        return max;\n    });\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Concrete line/area chart implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class lineChart\n * @memberof dc\n * @mixes dc.stackMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a line chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.lineChart('#chart-container1');\n * // create a line chart under #chart-container2 element using chart group A\n * var chart2 = dc.lineChart('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.lineChart(compositeChart);\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n * specifying a dom block element such as a div; or a dom element or d3 selection.  If the line\n * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n * composite chart instance instead.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.lineChart}\n */\ndc.lineChart = function (parent, chartGroup) {\n    var DEFAULT_DOT_RADIUS = 5;\n    var TOOLTIP_G_CLASS = 'dc-tooltip';\n    var DOT_CIRCLE_CLASS = 'dot';\n    var Y_AXIS_REF_LINE_CLASS = 'yRef';\n    var X_AXIS_REF_LINE_CLASS = 'xRef';\n    var DEFAULT_DOT_OPACITY = 1e-6;\n    var LABEL_PADDING = 3;\n\n    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n    var _renderArea = false;\n    var _dotRadius = DEFAULT_DOT_RADIUS;\n    var _dataPointRadius = null;\n    var _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n    var _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n    var _interpolate = 'linear';\n    var _tension = 0.7;\n    var _defined;\n    var _dashStyle;\n    var _xyTipsOn = true;\n\n    _chart.transitionDuration(500);\n    _chart.transitionDelay(0);\n    _chart._rangeBandPadding(1);\n\n    _chart.plotData = function () {\n        var chartBody = _chart.chartBodyG();\n        var layersList = chartBody.select('g.stack-list');\n\n        if (layersList.empty()) {\n            layersList = chartBody.append('g').attr('class', 'stack-list');\n        }\n\n        var layers = layersList.selectAll('g.stack').data(_chart.data());\n\n        var layersEnter = layers\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return 'stack ' + '_' + i;\n            });\n\n        drawLine(layersEnter, layers);\n\n        drawArea(layersEnter, layers);\n\n        drawDots(chartBody, layers);\n\n        if (_chart.renderLabel()) {\n            drawLabels(layers);\n        }\n    };\n\n    /**\n     * Gets or sets the interpolator to use for lines drawn, by string name, allowing e.g. step\n     * functions, splines, and cubic interpolation.  This is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate} and\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate},\n     * where you can find a complete list of valid arguments.\n     * @method interpolate\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n     * @param  {String} [interpolate='linear']\n     * @returns {String|dc.lineChart}\n     */\n    _chart.interpolate = function (interpolate) {\n        if (!arguments.length) {\n            return _interpolate;\n        }\n        _interpolate = interpolate;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the tension to use for lines drawn, in the range 0 to 1.\n     * This parameter further customizes the interpolation behavior.  It is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_tension d3.svg.line.tension} and\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_tension d3.svg.area.tension}.\n     * @method tension\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n     * @param  {Number} [tension=0.7]\n     * @returns {Number|dc.lineChart}\n     */\n    _chart.tension = function (tension) {\n        if (!arguments.length) {\n            return _tension;\n        }\n        _tension = tension;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets a function that will determine discontinuities in the line which should be\n     * skipped: the path will be broken into separate subpaths if some points are undefined.\n     * This function is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n     *\n     * Note: crossfilter will sometimes coerce nulls to 0, so you may need to carefully write\n     * custom reduce functions to get this to work, depending on your data. See\n     * {@link https://github.com/dc-js/dc.js/issues/615#issuecomment-49089248 this GitHub comment}\n     * for more details and an example.\n     * @method defined\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n     * @param  {Function} [defined]\n     * @returns {Function|dc.lineChart}\n     */\n    _chart.defined = function (defined) {\n        if (!arguments.length) {\n            return _defined;\n        }\n        _defined = defined;\n        return _chart;\n    };\n\n    /**\n     * Set the line's d3 dashstyle. This value becomes the 'stroke-dasharray' of line. Defaults to empty\n     * array (solid line).\n     * @method dashStyle\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray stroke-dasharray}\n     * @example\n     * // create a Dash Dot Dot Dot\n     * chart.dashStyle([3,1,1,1]);\n     * @param  {Array<Number>} [dashStyle=[]]\n     * @returns {Array<Number>|dc.lineChart}\n     */\n    _chart.dashStyle = function (dashStyle) {\n        if (!arguments.length) {\n            return _dashStyle;\n        }\n        _dashStyle = dashStyle;\n        return _chart;\n    };\n\n    /**\n     * Get or set render area flag. If the flag is set to true then the chart will render the area\n     * beneath each line and the line chart effectively becomes an area chart.\n     * @method renderArea\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Boolean} [renderArea=false]\n     * @returns {Boolean|dc.lineChart}\n     */\n    _chart.renderArea = function (renderArea) {\n        if (!arguments.length) {\n            return _renderArea;\n        }\n        _renderArea = renderArea;\n        return _chart;\n    };\n\n    function colors (d, i) {\n        return _chart.getColor.call(d, d.values, i);\n    }\n\n    function drawLine (layersEnter, layers) {\n        var line = d3.svg.line()\n            .x(function (d) {\n                return _chart.x()(d.x);\n            })\n            .y(function (d) {\n                return _chart.y()(d.y + d.y0);\n            })\n            .interpolate(_interpolate)\n            .tension(_tension);\n        if (_defined) {\n            line.defined(_defined);\n        }\n\n        var path = layersEnter.append('path')\n            .attr('class', 'line')\n            .attr('stroke', colors);\n        if (_dashStyle) {\n            path.attr('stroke-dasharray', _dashStyle);\n        }\n\n        dc.transition(layers.select('path.line'), _chart.transitionDuration(), _chart.transitionDelay())\n            //.ease('linear')\n            .attr('stroke', colors)\n            .attr('d', function (d) {\n                return safeD(line(d.values));\n            });\n    }\n\n    function drawArea (layersEnter, layers) {\n        if (_renderArea) {\n            var area = d3.svg.area()\n                .x(function (d) {\n                    return _chart.x()(d.x);\n                })\n                .y(function (d) {\n                    return _chart.y()(d.y + d.y0);\n                })\n                .y0(function (d) {\n                    return _chart.y()(d.y0);\n                })\n                .interpolate(_interpolate)\n                .tension(_tension);\n            if (_defined) {\n                area.defined(_defined);\n            }\n\n            layersEnter.append('path')\n                .attr('class', 'area')\n                .attr('fill', colors)\n                .attr('d', function (d) {\n                    return safeD(area(d.values));\n                });\n\n            dc.transition(layers.select('path.area'), _chart.transitionDuration(), _chart.transitionDelay())\n                //.ease('linear')\n                .attr('fill', colors)\n                .attr('d', function (d) {\n                    return safeD(area(d.values));\n                });\n        }\n    }\n\n    function safeD (d) {\n        return (!d || d.indexOf('NaN') >= 0) ? 'M0,0' : d;\n    }\n\n    function drawDots (chartBody, layers) {\n        if (_chart.xyTipsOn() === 'always' || (!_chart.brushOn() && _chart.xyTipsOn())) {\n            var tooltipListClass = TOOLTIP_G_CLASS + '-list';\n            var tooltips = chartBody.select('g.' + tooltipListClass);\n\n            if (tooltips.empty()) {\n                tooltips = chartBody.append('g').attr('class', tooltipListClass);\n            }\n\n            layers.each(function (d, layerIndex) {\n                var points = d.values;\n                if (_defined) {\n                    points = points.filter(_defined);\n                }\n\n                var g = tooltips.select('g.' + TOOLTIP_G_CLASS + '._' + layerIndex);\n                if (g.empty()) {\n                    g = tooltips.append('g').attr('class', TOOLTIP_G_CLASS + ' _' + layerIndex);\n                }\n\n                createRefLines(g);\n\n                var dots = g.selectAll('circle.' + DOT_CIRCLE_CLASS)\n                    .data(points, dc.pluck('x'));\n\n                dots.enter()\n                    .append('circle')\n                    .attr('class', DOT_CIRCLE_CLASS)\n                    .attr('r', getDotRadius())\n                    .style('fill-opacity', _dataPointFillOpacity)\n                    .style('stroke-opacity', _dataPointStrokeOpacity)\n                    .attr('fill', _chart.getColor)\n                    .on('mousemove', function () {\n                        var dot = d3.select(this);\n                        showDot(dot);\n                        showRefLines(dot, g);\n                    })\n                    .on('mouseout', function () {\n                        var dot = d3.select(this);\n                        hideDot(dot);\n                        hideRefLines(g);\n                    });\n\n                dots.call(renderTitle, d);\n\n                dc.transition(dots, _chart.transitionDuration())\n                    .attr('cx', function (d) {\n                        return dc.utils.safeNumber(_chart.x()(d.x));\n                    })\n                    .attr('cy', function (d) {\n                        return dc.utils.safeNumber(_chart.y()(d.y + d.y0));\n                    })\n                    .attr('fill', _chart.getColor);\n\n                dots.exit().remove();\n            });\n        }\n    }\n\n    _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n    }, false);\n\n    function drawLabels (layers) {\n        layers.each(function (d, layerIndex) {\n            var layer = d3.select(this);\n            var labels = layer.selectAll('text.lineLabel')\n                .data(d.values, dc.pluck('x'));\n\n            labels.enter()\n                .append('text')\n                .attr('class', 'lineLabel')\n                .attr('text-anchor', 'middle');\n\n            dc.transition(labels, _chart.transitionDuration())\n                .attr('x', function (d) {\n                    return dc.utils.safeNumber(_chart.x()(d.x));\n                })\n                .attr('y', function (d) {\n                    var y = _chart.y()(d.y + d.y0) - LABEL_PADDING;\n                    return dc.utils.safeNumber(y);\n                })\n                .text(function (d) {\n                    return _chart.label()(d);\n                });\n\n            dc.transition(labels.exit(), _chart.transitionDuration())\n                .attr('height', 0)\n                .remove();\n        });\n    }\n\n    function createRefLines (g) {\n        var yRefLine = g.select('path.' + Y_AXIS_REF_LINE_CLASS).empty() ?\n            g.append('path').attr('class', Y_AXIS_REF_LINE_CLASS) : g.select('path.' + Y_AXIS_REF_LINE_CLASS);\n        yRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n\n        var xRefLine = g.select('path.' + X_AXIS_REF_LINE_CLASS).empty() ?\n            g.append('path').attr('class', X_AXIS_REF_LINE_CLASS) : g.select('path.' + X_AXIS_REF_LINE_CLASS);\n        xRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n    }\n\n    function showDot (dot) {\n        dot.style('fill-opacity', 0.8);\n        dot.style('stroke-opacity', 0.8);\n        dot.attr('r', _dotRadius);\n        return dot;\n    }\n\n    function showRefLines (dot, g) {\n        var x = dot.attr('cx');\n        var y = dot.attr('cy');\n        var yAxisX = (_chart._yAxisX() - _chart.margins().left);\n        var yAxisRefPathD = 'M' + yAxisX + ' ' + y + 'L' + (x) + ' ' + (y);\n        var xAxisRefPathD = 'M' + x + ' ' + _chart.yAxisHeight() + 'L' + x + ' ' + y;\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', '').attr('d', yAxisRefPathD);\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', '').attr('d', xAxisRefPathD);\n    }\n\n    function getDotRadius () {\n        return _dataPointRadius || _dotRadius;\n    }\n\n    function hideDot (dot) {\n        dot.style('fill-opacity', _dataPointFillOpacity)\n            .style('stroke-opacity', _dataPointStrokeOpacity)\n            .attr('r', getDotRadius());\n    }\n\n    function hideRefLines (g) {\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', 'none');\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', 'none');\n    }\n\n    function renderTitle (dot, d) {\n        if (_chart.renderTitle()) {\n            dot.select('title').remove();\n            dot.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n    }\n\n    /**\n     * Turn on/off the mouseover behavior of an individual data point which renders a circle and x/y axis\n     * dashed lines back to each respective axis.  This is ignored if the chart\n     * {@link dc.coordinateGridMixin#brushOn brush} is on\n     * @method xyTipsOn\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Boolean} [xyTipsOn=false]\n     * @returns {Boolean|dc.lineChart}\n     */\n    _chart.xyTipsOn = function (xyTipsOn) {\n        if (!arguments.length) {\n            return _xyTipsOn;\n        }\n        _xyTipsOn = xyTipsOn;\n        return _chart;\n    };\n\n    /**\n     * Get or set the radius (in px) for dots displayed on the data points.\n     * @method dotRadius\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Number} [dotRadius=5]\n     * @returns {Number|dc.lineChart}\n     */\n    _chart.dotRadius = function (dotRadius) {\n        if (!arguments.length) {\n            return _dotRadius;\n        }\n        _dotRadius = dotRadius;\n        return _chart;\n    };\n\n    /**\n     * Always show individual dots for each datapoint.\n     *\n     * If `options` is falsy, it disables data point rendering. If no `options` are provided, the\n     * current `options` values are instead returned.\n     * @method renderDataPoints\n     * @memberof dc.lineChart\n     * @instance\n     * @example\n     * chart.renderDataPoints({radius: 2, fillOpacity: 0.8, strokeOpacity: 0.8})\n     * @param  {{fillOpacity: Number, strokeOpacity: Number, radius: Number}} [options={fillOpacity: 0.8, strokeOpacity: 0.8, radius: 2}]\n     * @returns {{fillOpacity: Number, strokeOpacity: Number, radius: Number}|dc.lineChart}\n     */\n    _chart.renderDataPoints = function (options) {\n        if (!arguments.length) {\n            return {\n                fillOpacity: _dataPointFillOpacity,\n                strokeOpacity: _dataPointStrokeOpacity,\n                radius: _dataPointRadius\n            };\n        } else if (!options) {\n            _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n            _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n            _dataPointRadius = null;\n        } else {\n            _dataPointFillOpacity = options.fillOpacity || 0.8;\n            _dataPointStrokeOpacity = options.strokeOpacity || 0.8;\n            _dataPointRadius = options.radius || 2;\n        }\n        return _chart;\n    };\n\n    function colorFilter (color, dashstyle, inv) {\n        return function () {\n            var item = d3.select(this);\n            var match = (item.attr('stroke') === color &&\n                item.attr('stroke-dasharray') === ((dashstyle instanceof Array) ?\n                    dashstyle.join(',') : null)) || item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n    }\n\n    _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n            _chart.g().selectAll('path.line, path.area')\n                .classed('highlight', colorFilter(d.color, d.dashstyle))\n                .classed('fadeout', colorFilter(d.color, d.dashstyle, true));\n        }\n    };\n\n    _chart.legendReset = function () {\n        _chart.g().selectAll('path.line, path.area')\n            .classed('highlight', false)\n            .classed('fadeout', false);\n    };\n\n    dc.override(_chart, 'legendables', function () {\n        var legendables = _chart._legendables();\n        if (!_dashStyle) {\n            return legendables;\n        }\n        return legendables.map(function (l) {\n            l.dashstyle = _dashStyle;\n            return l;\n        });\n    });\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The data count widget is a simple widget designed to display the number of records selected by the\n * current filters out of the total number of records in the data set. Once created the data count widget\n * will automatically update the text content of child elements with the following classes:\n *\n * * `.total-count` - total number of records\n * * `.filter-count` - number of records matched by the current filters\n *\n * Note: this widget works best for the specific case of showing the number of records out of a\n * total. If you want a more general-purpose numeric display, please use the\n * {@link dc.numberDisplay} widget instead.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class dataCount\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * var ndx = crossfilter(data);\n * var all = ndx.groupAll();\n *\n * dc.dataCount('.dc-data-count')\n *     .dimension(ndx)\n *     .group(all);\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataCount}\n */\ndc.dataCount = function (parent, chartGroup) {\n    var _formatNumber = d3.format(',d');\n    var _chart = dc.baseMixin({});\n    var _html = {some: '', all: ''};\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending how many items are\n     * selected. The text `%total-count` will replaced with the total number of records, and the text\n     * `%filter-count` will be replaced with the number of selected records.\n     * - all: HTML template to use if all items are selected\n     * - some: HTML template to use if not all items are selected\n     * @method html\n     * @memberof dc.dataCount\n     * @instance\n     * @example\n     * counter.html({\n     *      some: '%filter-count out of %total-count records selected',\n     *      all: 'All records selected. Click on charts to apply filters'\n     * })\n     * @param {{some:String, all: String}} [options]\n     * @returns {{some:String, all: String}|dc.dataCount}\n     */\n    _chart.html = function (options) {\n        if (!arguments.length) {\n            return _html;\n        }\n        if (options.all) {\n            _html.all = options.all;\n        }\n        if (options.some) {\n            _html.some = options.some;\n        }\n        return _chart;\n    };\n\n    /**\n     * Gets or sets an optional function to format the filter count and total count.\n     * @method formatNumber\n     * @memberof dc.dataCount\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n     * @example\n     * counter.formatNumber(d3.format('.2g'))\n     * @param {Function} [formatter=d3.format('.2g')]\n     * @returns {Function|dc.dataCount}\n     */\n    _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n            return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        var tot = _chart.dimension().size(),\n            val = _chart.group().value();\n        var all = _formatNumber(tot);\n        var selected = _formatNumber(val);\n\n        if ((tot === val) && (_html.all !== '')) {\n            _chart.root().html(_html.all.replace('%total-count', all).replace('%filter-count', selected));\n        } else if (_html.some !== '') {\n            _chart.root().html(_html.some.replace('%total-count', all).replace('%filter-count', selected));\n        } else {\n            _chart.selectAll('.total-count').text(all);\n            _chart.selectAll('.filter-count').text(selected);\n        }\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The data table is a simple widget designed to list crossfilter focused data set (rows being\n * filtered) in a good old tabular fashion.\n *\n * Note: Unlike other charts, the data table (and data grid chart) use the {@link dc.dataTable#group group} attribute as a\n * keying function for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data\n * together in groups.  Do not pass in a crossfilter group as this will not work.\n *\n * Another interesting feature of the data table is that you can pass a crossfilter group to the `dimension`, as\n * long as you specify the {@link dc.dataTable#order order} as `d3.descending`, since the data\n * table will use `dimension.top()` to fetch the data in that case, and the method is equally\n * supported on the crossfilter group as the crossfilter dimension.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.io/dc.js/examples/table-on-aggregated-data.html dataTable on a crossfilter group}\n * ({@link https://github.com/dc-js/dc.js/blob/develop/web/examples/table-on-aggregated-data.html source})\n * @class dataTable\n * @memberof dc\n * @mixes dc.baseMixin\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataTable}\n */\ndc.dataTable = function (parent, chartGroup) {\n    var LABEL_CSS_CLASS = 'dc-table-label';\n    var ROW_CSS_CLASS = 'dc-table-row';\n    var COLUMN_CSS_CLASS = 'dc-table-column';\n    var GROUP_CSS_CLASS = 'dc-table-group';\n    var HEAD_CSS_CLASS = 'dc-table-head';\n\n    var _chart = dc.baseMixin({});\n\n    var _size = 25;\n    var _columns = [];\n    var _sortBy = function (d) {\n        return d;\n    };\n    var _order = d3.ascending;\n    var _beginSlice = 0;\n    var _endSlice;\n    var _showGroups = true;\n\n    _chart._doRender = function () {\n        _chart.selectAll('tbody').remove();\n\n        renderRows(renderGroups());\n\n        return _chart;\n    };\n\n    _chart._doColumnValueFormat = function (v, d) {\n        return ((typeof v === 'function') ?\n                v(d) :                          // v as function\n                ((typeof v === 'string') ?\n                 d[v] :                         // v is field name string\n                 v.format(d)                        // v is Object, use fn (element 2)\n                )\n               );\n    };\n\n    _chart._doColumnHeaderFormat = function (d) {\n        // if 'function', convert to string representation\n        // show a string capitalized\n        // if an object then display its label string as-is.\n        return (typeof d === 'function') ?\n                _chart._doColumnHeaderFnToString(d) :\n                ((typeof d === 'string') ?\n                 _chart._doColumnHeaderCapitalize(d) : String(d.label));\n    };\n\n    _chart._doColumnHeaderCapitalize = function (s) {\n        // capitalize\n        return s.charAt(0).toUpperCase() + s.slice(1);\n    };\n\n    _chart._doColumnHeaderFnToString = function (f) {\n        // columnString(f) {\n        var s = String(f);\n        var i1 = s.indexOf('return ');\n        if (i1 >= 0) {\n            var i2 = s.lastIndexOf(';');\n            if (i2 >= 0) {\n                s = s.substring(i1 + 7, i2);\n                var i3 = s.indexOf('numberFormat');\n                if (i3 >= 0) {\n                    s = s.replace('numberFormat', '');\n                }\n            }\n        }\n        return s;\n    };\n\n    function renderGroups () {\n        // The 'original' example uses all 'functions'.\n        // If all 'functions' are used, then don't remove/add a header, and leave\n        // the html alone. This preserves the functionality of earlier releases.\n        // A 2nd option is a string representing a field in the data.\n        // A third option is to supply an Object such as an array of 'information', and\n        // supply your own _doColumnHeaderFormat and _doColumnValueFormat functions to\n        // create what you need.\n        var bAllFunctions = true;\n        _columns.forEach(function (f) {\n            bAllFunctions = bAllFunctions & (typeof f === 'function');\n        });\n\n        if (!bAllFunctions) {\n            // ensure one thead\n            var thead = _chart.selectAll('thead').data([0]);\n            thead.enter().append('thead');\n            thead.exit().remove();\n\n            // with one tr\n            var headrow = thead.selectAll('tr').data([0]);\n            headrow.enter().append('tr');\n            headrow.exit().remove();\n\n            // with a th for each column\n            var headcols = headrow.selectAll('th')\n                .data(_columns);\n            headcols.enter().append('th');\n            headcols.exit().remove();\n\n            headcols\n                .attr('class', HEAD_CSS_CLASS)\n                    .html(function (d) {\n                        return (_chart._doColumnHeaderFormat(d));\n\n                    });\n        }\n\n        var groups = _chart.root().selectAll('tbody')\n            .data(nestEntries(), function (d) {\n                return _chart.keyAccessor()(d);\n            });\n\n        var rowGroup = groups\n            .enter()\n            .append('tbody');\n\n        if (_showGroups === true) {\n            rowGroup\n                .append('tr')\n                .attr('class', GROUP_CSS_CLASS)\n                    .append('td')\n                    .attr('class', LABEL_CSS_CLASS)\n                    .attr('colspan', _columns.length)\n                    .html(function (d) {\n                        return _chart.keyAccessor()(d);\n                    });\n        }\n\n        groups.exit().remove();\n\n        return rowGroup;\n    }\n\n    function nestEntries () {\n        var entries;\n        if (_order === d3.ascending) {\n            entries = _chart.dimension().bottom(_size);\n        } else {\n            entries = _chart.dimension().top(_size);\n        }\n\n        return d3.nest()\n            .key(_chart.group())\n            .sortKeys(_order)\n            .entries(entries.sort(function (a, b) {\n                return _order(_sortBy(a), _sortBy(b));\n            }).slice(_beginSlice, _endSlice));\n    }\n\n    function renderRows (groups) {\n        var rows = groups.order()\n            .selectAll('tr.' + ROW_CSS_CLASS)\n            .data(function (d) {\n                return d.values;\n            });\n\n        var rowEnter = rows.enter()\n            .append('tr')\n            .attr('class', ROW_CSS_CLASS);\n\n        _columns.forEach(function (v, i) {\n            rowEnter.append('td')\n                .attr('class', COLUMN_CSS_CLASS + ' _' + i)\n                .html(function (d) {\n                    return _chart._doColumnValueFormat(v, d);\n                });\n        });\n\n        rows.exit().remove();\n\n        return rows;\n    }\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set the group function for the data table. The group function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n     * to split rows into groups.\n     *\n     * Do not pass in a crossfilter group as this will not work.\n     * @method group\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * // group rows by the value of their field\n     * chart\n     *     .group(function(d) { return d.field; })\n     * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n     * @returns {Function|dc.dataTable}\n     */\n\n    /**\n     * Get or set the table size which determines the number of rows displayed by the widget.\n     * @method size\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number} [size=25]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.size = function (size) {\n        if (!arguments.length) {\n            return _size;\n        }\n        _size = size;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed\n     * by the widget. Useful when implementing pagination.\n     *\n     * Note: the sortBy function will determine how the rows are ordered for pagination purposes.\n\n     * See the {@link http://dc-js.github.io/dc.js/examples/table-pagination.html table pagination example}\n     * to see how to implement the pagination user interface using `beginSlice` and `endSlice`.\n     * @method beginSlice\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n            return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the\n     * widget. Useful when implementing pagination. See {@link dc.dataTable#beginSlice `beginSlice`} for more information.\n     * @method endSlice\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number|undefined} [endSlice=undefined]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n            return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set column functions. The data table widget supports several methods of specifying the\n     * columns to display.\n     *\n     * The original method uses an array of functions to generate dynamic columns. Column functions\n     * are simple javascript functions with only one input argument `d` which represents a row in\n     * the data set. The return value of these functions will be used to generate the content for\n     * each cell. However, this method requires the HTML for the table to have a fixed set of column\n     * headers.\n     *\n     * <pre><code>chart.columns([\n     *     function(d) { return d.date; },\n     *     function(d) { return d.open; },\n     *     function(d) { return d.close; },\n     *     function(d) { return numberFormat(d.close - d.open); },\n     *     function(d) { return d.volume; }\n     * ]);\n     * </code></pre>\n     *\n     * In the second method, you can list the columns to read from the data without specifying it as\n     * a function, except where necessary (ie, computed columns).  Note the data element name is\n     * capitalized when displayed in the table header. You can also mix in functions as necessary,\n     * using the third `{label, format}` form, as shown below.\n     *\n     * <pre><code>chart.columns([\n     *     \"date\",    // d[\"date\"], ie, a field accessor; capitalized automatically\n     *     \"open\",    // ...\n     *     \"close\",   // ...\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) {\n     *             return numberFormat(d.close - d.open);\n     *         }\n     *     },\n     *     \"volume\"   // d[\"volume\"], ie, a field accessor; capitalized automatically\n     * ]);\n     * </code></pre>\n     *\n     * In the third example, we specify all fields using the `{label, format}` method:\n     * <pre><code>chart.columns([\n     *     {\n     *         label: \"Date\",\n     *         format: function (d) { return d.date; }\n     *     },\n     *     {\n     *         label: \"Open\",\n     *         format: function (d) { return numberFormat(d.open); }\n     *     },\n     *     {\n     *         label: \"Close\",\n     *         format: function (d) { return numberFormat(d.close); }\n     *     },\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) { return numberFormat(d.close - d.open); }\n     *     },\n     *     {\n     *         label: \"Volume\",\n     *         format: function (d) { return d.volume; }\n     *     }\n     * ]);\n     * </code></pre>\n     *\n     * You may wish to override the dataTable functions `_doColumnHeaderCapitalize` and\n     * `_doColumnHeaderFnToString`, which are used internally to translate the column information or\n     * function into a displayed header. The first one is used on the \"string\" column specifier; the\n     * second is used to transform a stringified function into something displayable. For the Stock\n     * example, the function for Change becomes the table header **d.close - d.open**.\n     *\n     * Finally, you can even specify a completely different form of column definition. To do this,\n     * override `_chart._doColumnHeaderFormat` and `_chart._doColumnValueFormat` Be aware that\n     * fields without numberFormat specification will be displayed just as they are stored in the\n     * data, unformatted.\n     * @method columns\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Array<Function>} [columns=[]]\n     * @returns {Array<Function>}|dc.dataTable}\n     */\n    _chart.columns = function (columns) {\n        if (!arguments.length) {\n            return _columns;\n        }\n        _columns = columns;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at row level and returns a\n     * particular field to be sorted by.\n     * @method sortBy\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortBy=identity function]\n     * @returns {Function|dc.dataTable}\n     */\n    _chart.sortBy = function (sortBy) {\n        if (!arguments.length) {\n            return _sortBy;\n        }\n        _sortBy = sortBy;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort order. If the order is `d3.ascending`, the data table will use\n     * `dimension().bottom()` to fetch the data; otherwise it will use `dimension().top()`\n     * @method order\n     * @memberof dc.dataTable\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|dc.dataTable}\n     */\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    /**\n     * Get or set if group rows will be shown. The dataTable {@link dc.dataTable#group group}\n     * function must be specified even if groups are not shown.\n     * @method showGroups\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * chart\n     *     .group([value], [name])\n     *     .showGroups(true|false);\n     * @param {Boolean} [showGroups=true]\n     * @returns {Boolean|dc.dataTable}\n     */\n    _chart.showGroups = function (showGroups) {\n        if (!arguments.length) {\n            return _showGroups;\n        }\n        _showGroups = showGroups;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Data grid is a simple widget designed to list the filtered records, providing\n * a simple way to define how the items are displayed.\n *\n * Note: Unlike other charts, the data grid chart (and data table) use the {@link dc.dataGrid#group group} attribute as a keying function\n * for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data together in groups.\n * Do not pass in a crossfilter group as this will not work.\n *\n * Examples:\n * - {@link http://europarl.me/dc.js/web/ep/index.html List of members of the european parliament}\n * @class dataGrid\n * @memberof dc\n * @mixes dc.baseMixin\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataGrid}\n */\ndc.dataGrid = function (parent, chartGroup) {\n    var LABEL_CSS_CLASS = 'dc-grid-label';\n    var ITEM_CSS_CLASS = 'dc-grid-item';\n    var GROUP_CSS_CLASS = 'dc-grid-group';\n    var GRID_CSS_CLASS = 'dc-grid-top';\n\n    var _chart = dc.baseMixin({});\n\n    var _size = 999; // shouldn't be needed, but you might\n    var _html = function (d) { return 'you need to provide an html() handling param:  ' + JSON.stringify(d); };\n    var _sortBy = function (d) {\n        return d;\n    };\n    var _order = d3.ascending;\n    var _beginSlice = 0, _endSlice;\n\n    var _htmlGroup = function (d) {\n        return '<div class=\\'' + GROUP_CSS_CLASS + '\\'><h1 class=\\'' + LABEL_CSS_CLASS + '\\'>' +\n            _chart.keyAccessor()(d) + '</h1></div>';\n    };\n\n    _chart._doRender = function () {\n        _chart.selectAll('div.' + GRID_CSS_CLASS).remove();\n\n        renderItems(renderGroups());\n\n        return _chart;\n    };\n\n    function renderGroups () {\n        var groups = _chart.root().selectAll('div.' + GRID_CSS_CLASS)\n                .data(nestEntries(), function (d) {\n                    return _chart.keyAccessor()(d);\n                });\n\n        var itemGroup = groups\n                .enter()\n                .append('div')\n                .attr('class', GRID_CSS_CLASS);\n\n        if (_htmlGroup) {\n            itemGroup\n                .html(function (d) {\n                    return _htmlGroup(d);\n                });\n        }\n\n        groups.exit().remove();\n        return itemGroup;\n    }\n\n    function nestEntries () {\n        var entries = _chart.dimension().top(_size);\n\n        return d3.nest()\n            .key(_chart.group())\n            .sortKeys(_order)\n            .entries(entries.sort(function (a, b) {\n                return _order(_sortBy(a), _sortBy(b));\n            }).slice(_beginSlice, _endSlice));\n    }\n\n    function renderItems (groups) {\n        var items = groups.order()\n                .selectAll('div.' + ITEM_CSS_CLASS)\n                .data(function (d) {\n                    return d.values;\n                });\n\n        items.enter()\n            .append('div')\n            .attr('class', ITEM_CSS_CLASS)\n            .html(function (d) {\n                return _html(d);\n            });\n\n        items.exit().remove();\n\n        return items;\n    }\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set the group function for the data grid. The group function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n     * to split rows into groups.\n     *\n     * Do not pass in a crossfilter group as this will not work.\n     * @method group\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * // group rows by the value of their field\n     * chart\n     *     .group(function(d) { return d.field; })\n     * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n     * @returns {Function|dc.dataTable}\n     */\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @method beginSlice\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n            return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @method endSlice\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [endSlice]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n            return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the grid size which determines the number of items displayed by the widget.\n     * @method size\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [size=999]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.size = function (size) {\n        if (!arguments.length) {\n            return _size;\n        }\n        _size = size;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that formats an item. The data grid widget uses a\n     * function to generate dynamic html. Use your favourite templating engine or\n     * generate the string directly.\n     * @method html\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.html(function (d) { return '<div class='item '+data.exampleCategory+''>'+data.exampleString+'</div>';});\n     * @param {Function} [html]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.html = function (html) {\n        if (!arguments.length) {\n            return _html;\n        }\n        _html = html;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that formats a group label.\n     * @method htmlGroup\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.htmlGroup (function (d) { return '<h2>'.d.key . 'with ' . d.values.length .' items</h2>'});\n     * @param {Function} [htmlGroup]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.htmlGroup = function (htmlGroup) {\n        if (!arguments.length) {\n            return _htmlGroup;\n        }\n        _htmlGroup = htmlGroup;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at the item\n     * level and returns a particular field to be sorted.\n     * @method sortBy\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortByFunction]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.sortBy = function (sortByFunction) {\n        if (!arguments.length) {\n            return _sortBy;\n        }\n        _sortBy = sortByFunction;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort the order function.\n     * @method order\n     * @memberof dc.dataGrid\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A concrete implementation of a general purpose bubble chart that allows data visualization using the\n * following dimensions:\n * - x axis position\n * - y axis position\n * - bubble radius\n * - color\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n * @class bubbleChart\n * @memberof dc\n * @mixes dc.bubbleMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a bubble chart under #chart-container1 element using the default global chart group\n * var bubbleChart1 = dc.bubbleChart('#chart-container1');\n * // create a bubble chart under #chart-container2 element using chart group A\n * var bubbleChart2 = dc.bubbleChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.bubbleChart}\n */\ndc.bubbleChart = function (parent, chartGroup) {\n    var _chart = dc.bubbleMixin(dc.coordinateGridMixin({}));\n\n    _chart.transitionDuration(750);\n\n    _chart.transitionDelay(0);\n\n    var bubbleLocator = function (d) {\n        return 'translate(' + (bubbleX(d)) + ',' + (bubbleY(d)) + ')';\n    };\n\n    _chart.plotData = function () {\n        _chart.calculateRadiusDomain();\n        _chart.r().range([_chart.MIN_RADIUS, _chart.xAxisLength() * _chart.maxBubbleRelativeSize()]);\n\n        var data = _chart.data();\n        var bubbleG = _chart.chartBodyG().selectAll('g.' + _chart.BUBBLE_NODE_CLASS)\n                .data(data, function (d) { return d.key; });\n        if (_chart.sortBubbleSize()) {\n            // update dom order based on sort\n            bubbleG.order();\n        }\n\n        renderNodes(bubbleG);\n\n        updateNodes(bubbleG);\n\n        removeNodes(bubbleG);\n\n        _chart.fadeDeselectedArea();\n    };\n\n    function renderNodes (bubbleG) {\n        var bubbleGEnter = bubbleG.enter().append('g');\n\n        bubbleGEnter\n            .attr('class', _chart.BUBBLE_NODE_CLASS)\n            .attr('transform', bubbleLocator)\n            .append('circle').attr('class', function (d, i) {\n                return _chart.BUBBLE_CLASS + ' _' + i;\n            })\n            .on('click', _chart.onClick)\n            .attr('fill', _chart.getColor)\n            .attr('r', 0);\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay())\n            .select('circle.' + _chart.BUBBLE_CLASS)\n            .attr('r', function (d) {\n                return _chart.bubbleR(d);\n            })\n            .attr('opacity', function (d) {\n                return (_chart.bubbleR(d) > 0) ? 1 : 0;\n            });\n\n        _chart._doRenderLabel(bubbleGEnter);\n\n        _chart._doRenderTitles(bubbleGEnter);\n    }\n\n    function updateNodes (bubbleG) {\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', bubbleLocator)\n            .select('circle.' + _chart.BUBBLE_CLASS)\n            .attr('fill', _chart.getColor)\n            .attr('r', function (d) {\n                return _chart.bubbleR(d);\n            })\n            .attr('opacity', function (d) {\n                return (_chart.bubbleR(d) > 0) ? 1 : 0;\n            });\n\n        _chart.doUpdateLabels(bubbleG);\n        _chart.doUpdateTitles(bubbleG);\n    }\n\n    function removeNodes (bubbleG) {\n        bubbleG.exit().remove();\n    }\n\n    function bubbleX (d) {\n        var x = _chart.x()(_chart.keyAccessor()(d));\n        if (isNaN(x)) {\n            x = 0;\n        }\n        return x;\n    }\n\n    function bubbleY (d) {\n        var y = _chart.y()(_chart.valueAccessor()(d));\n        if (isNaN(y)) {\n            y = 0;\n        }\n        return y;\n    }\n\n    _chart.renderBrush = function () {\n        // override default x axis brush from parent chart\n    };\n\n    _chart.redrawBrush = function () {\n        // override default x axis brush from parent chart\n        _chart.fadeDeselectedArea();\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Composite charts are a special kind of chart that render multiple charts on the same Coordinate\n * Grid. You can overlay (compose) different bar/line/area charts in a single composite chart to\n * achieve some quite flexible charting effects.\n * @class compositeChart\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a composite chart under #chart-container1 element using the default global chart group\n * var compositeChart1 = dc.compositeChart('#chart-container1');\n * // create a composite chart under #chart-container2 element using chart group A\n * var compositeChart2 = dc.compositeChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.compositeChart}\n */\ndc.compositeChart = function (parent, chartGroup) {\n\n    var SUB_CHART_CLASS = 'sub';\n    var DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING = 12;\n\n    var _chart = dc.coordinateGridMixin({});\n    var _children = [];\n\n    var _childOptions = {};\n\n    var _shareColors = false,\n        _shareTitle = true,\n        _alignYAxes = false;\n\n    var _rightYAxis = d3.svg.axis(),\n        _rightYAxisLabel = 0,\n        _rightYAxisLabelPadding = DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING,\n        _rightY,\n        _rightAxisGridLines = false;\n\n    _chart._mandatoryAttributes([]);\n    _chart.transitionDuration(500);\n    _chart.transitionDelay(0);\n\n    dc.override(_chart, '_generateG', function () {\n        var g = this.__generateG();\n\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n\n            generateChildG(child, i);\n\n            if (!child.dimension()) {\n                child.dimension(_chart.dimension());\n            }\n            if (!child.group()) {\n                child.group(_chart.group());\n            }\n\n            child.chartGroup(_chart.chartGroup());\n            child.svg(_chart.svg());\n            child.xUnits(_chart.xUnits());\n            child.transitionDuration(_chart.transitionDuration(), _chart.transitionDelay());\n            child.brushOn(_chart.brushOn());\n            child.renderTitle(_chart.renderTitle());\n            child.elasticX(_chart.elasticX());\n        }\n\n        return g;\n    });\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n        var brushIsEmpty = _chart.brushIsEmpty(extent);\n\n        for (var i = 0; i < _children.length; ++i) {\n            _children[i].replaceFilter(brushIsEmpty ? null : extent);\n        }\n    };\n\n    _chart._prepareYAxis = function () {\n        var left = (leftYAxisChildren().length !== 0);\n        var right = (rightYAxisChildren().length !== 0);\n        var ranges = calculateYAxisRanges(left, right);\n\n        if (left) { prepareLeftYAxis(ranges); }\n        if (right) { prepareRightYAxis(ranges); }\n\n        if (leftYAxisChildren().length > 0 && !_rightAxisGridLines) {\n            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _chart.y(), _chart.yAxis());\n        } else if (rightYAxisChildren().length > 0) {\n            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _rightY, _rightYAxis);\n        }\n    };\n\n    _chart.renderYAxis = function () {\n        if (leftYAxisChildren().length !== 0) {\n            _chart.renderYAxisAt('y', _chart.yAxis(), _chart.margins().left);\n            _chart.renderYAxisLabel('y', _chart.yAxisLabel(), -90);\n        }\n\n        if (rightYAxisChildren().length !== 0) {\n            _chart.renderYAxisAt('yr', _chart.rightYAxis(), _chart.width() - _chart.margins().right);\n            _chart.renderYAxisLabel('yr', _chart.rightYAxisLabel(), 90, _chart.width() - _rightYAxisLabelPadding);\n        }\n    };\n\n    function calculateYAxisRanges (left, right) {\n        var lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax;\n        var ranges;\n\n        if (left) {\n            lyAxisMin = yAxisMin();\n            lyAxisMax = yAxisMax();\n        }\n\n        if (right) {\n            ryAxisMin = rightYAxisMin();\n            ryAxisMax = rightYAxisMax();\n        }\n\n        if (_chart.alignYAxes() && left && right) {\n            ranges = alignYAxisRanges(lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax);\n        }\n\n        return ranges || {\n            lyAxisMin: lyAxisMin,\n            lyAxisMax: lyAxisMax,\n            ryAxisMin: ryAxisMin,\n            ryAxisMax: ryAxisMax\n        };\n    }\n\n    function alignYAxisRanges (lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax) {\n        // since the two series will share a zero, each Y is just a multiple\n        // of the other. and the ratio should be the ratio of the ranges of the\n        // input data, so that they come out the same height. so we just min/max\n\n        // note: both ranges already include zero due to the stack mixin (#667)\n        // if #667 changes, we can reconsider whether we want data height or\n        // height from zero to be equal. and it will be possible for the axes\n        // to be aligned but not visible.\n        var extentRatio = (ryAxisMax - ryAxisMin) / (lyAxisMax - lyAxisMin);\n\n        return {\n            lyAxisMin: Math.min(lyAxisMin, ryAxisMin / extentRatio),\n            lyAxisMax: Math.max(lyAxisMax, ryAxisMax / extentRatio),\n            ryAxisMin: Math.min(ryAxisMin, lyAxisMin * extentRatio),\n            ryAxisMax: Math.max(ryAxisMax, lyAxisMax * extentRatio)\n        };\n    }\n\n    function prepareRightYAxis (ranges) {\n        var needDomain = _chart.rightY() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n        if (_chart.rightY() === undefined) {\n            _chart.rightY(d3.scale.linear());\n        }\n        if (needDomain) {\n            _chart.rightY().domain([ranges.ryAxisMin, ranges.ryAxisMax]);\n        }\n        if (needRange) {\n            _chart.rightY().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.rightY().range([_chart.yAxisHeight(), 0]);\n        _chart.rightYAxis(_chart.rightYAxis().scale(_chart.rightY()));\n\n        _chart.rightYAxis().orient('right');\n    }\n\n    function prepareLeftYAxis (ranges) {\n        var needDomain = _chart.y() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n        if (_chart.y() === undefined) {\n            _chart.y(d3.scale.linear());\n        }\n        if (needDomain) {\n            _chart.y().domain([ranges.lyAxisMin, ranges.lyAxisMax]);\n        }\n        if (needRange) {\n            _chart.y().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.y().range([_chart.yAxisHeight(), 0]);\n        _chart.yAxis(_chart.yAxis().scale(_chart.y()));\n\n        _chart.yAxis().orient('left');\n    }\n\n    function generateChildG (child, i) {\n        child._generateG(_chart.g());\n        child.g().attr('class', SUB_CHART_CLASS + ' _' + i);\n    }\n\n    _chart.plotData = function () {\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n\n            if (!child.g()) {\n                generateChildG(child, i);\n            }\n\n            if (_shareColors) {\n                child.colors(_chart.colors());\n            }\n\n            child.x(_chart.x());\n\n            child.xAxis(_chart.xAxis());\n\n            if (child.useRightYAxis()) {\n                child.y(_chart.rightY());\n                child.yAxis(_chart.rightYAxis());\n            } else {\n                child.y(_chart.y());\n                child.yAxis(_chart.yAxis());\n            }\n\n            child.plotData();\n\n            child._activateRenderlets();\n        }\n    };\n\n    /**\n     * Get or set whether to draw gridlines from the right y axis.  Drawing from the left y axis is the\n     * default behavior. This option is only respected when subcharts with both left and right y-axes\n     * are present.\n     * @method useRightAxisGridLines\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [useRightAxisGridLines=false]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.useRightAxisGridLines = function (useRightAxisGridLines) {\n        if (!arguments) {\n            return _rightAxisGridLines;\n        }\n\n        _rightAxisGridLines = useRightAxisGridLines;\n        return _chart;\n    };\n\n    /**\n     * Get or set chart-specific options for all child charts. This is equivalent to calling\n     * {@link dc.baseMixin#options .options} on each child chart.\n     * @method childOptions\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Object} [childOptions]\n     * @returns {Object|dc.compositeChart}\n     */\n    _chart.childOptions = function (childOptions) {\n        if (!arguments.length) {\n            return _childOptions;\n        }\n        _childOptions = childOptions;\n        _children.forEach(function (child) {\n            child.options(_childOptions);\n        });\n        return _chart;\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n            child.brush(_chart.brush());\n            child.fadeDeselectedArea();\n        }\n    };\n\n    /**\n     * Set or get the right y axis label.\n     * @method rightYAxisLabel\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {String} [rightYAxisLabel]\n     * @param {Number} [padding]\n     * @returns {String|dc.compositeChart}\n     */\n    _chart.rightYAxisLabel = function (rightYAxisLabel, padding) {\n        if (!arguments.length) {\n            return _rightYAxisLabel;\n        }\n        _rightYAxisLabel = rightYAxisLabel;\n        _chart.margins().right -= _rightYAxisLabelPadding;\n        _rightYAxisLabelPadding = (padding === undefined) ? DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING : padding;\n        _chart.margins().right += _rightYAxisLabelPadding;\n        return _chart;\n    };\n\n    /**\n     * Combine the given charts into one single composite coordinate grid chart.\n     * @method compose\n     * @memberof dc.compositeChart\n     * @instance\n     * @example\n     * moveChart.compose([\n     *     // when creating sub-chart you need to pass in the parent chart\n     *     dc.lineChart(moveChart)\n     *         .group(indexAvgByMonthGroup) // if group is missing then parent's group will be used\n     *         .valueAccessor(function (d){return d.value.avg;})\n     *         // most of the normal functions will continue to work in a composed chart\n     *         .renderArea(true)\n     *         .stack(monthlyMoveGroup, function (d){return d.value;})\n     *         .title(function (d){\n     *             var value = d.value.avg?d.value.avg:d.value;\n     *             if(isNaN(value)) value = 0;\n     *             return dateFormat(d.key) + '\\n' + numberFormat(value);\n     *         }),\n     *     dc.barChart(moveChart)\n     *         .group(volumeByMonthGroup)\n     *         .centerBar(true)\n     * ]);\n     * @param {Array<Chart>} [subChartArray]\n     * @returns {dc.compositeChart}\n     */\n    _chart.compose = function (subChartArray) {\n        _children = subChartArray;\n        _children.forEach(function (child) {\n            child.height(_chart.height());\n            child.width(_chart.width());\n            child.margins(_chart.margins());\n\n            if (_shareTitle) {\n                child.title(_chart.title());\n            }\n\n            child.options(_childOptions);\n        });\n        return _chart;\n    };\n\n    /**\n     * Returns the child charts which are composed into the composite chart.\n     * @method children\n     * @memberof dc.compositeChart\n     * @instance\n     * @returns {Array<dc.baseMixin>}\n     */\n    _chart.children = function () {\n        return _children;\n    };\n\n    /**\n     * Get or set color sharing for the chart. If set, the {@link dc.colorMixin#colors .colors()} value from this chart\n     * will be shared with composed children. Additionally if the child chart implements\n     * Stackable and has not set a custom .colorAccessor, then it will generate a color\n     * specific to its order in the composition.\n     * @method shareColors\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [shareColors=false]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.shareColors = function (shareColors) {\n        if (!arguments.length) {\n            return _shareColors;\n        }\n        _shareColors = shareColors;\n        return _chart;\n    };\n\n    /**\n     * Get or set title sharing for the chart. If set, the {@link dc.baseMixin#title .title()} value from\n     * this chart will be shared with composed children.\n     * @method shareTitle\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [shareTitle=true]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.shareTitle = function (shareTitle) {\n        if (!arguments.length) {\n            return _shareTitle;\n        }\n        _shareTitle = shareTitle;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y scale for the right axis. The right y scale is typically automatically\n     * generated by the chart implementation.\n     * @method rightY\n     * @memberof dc.compositeChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|dc.compositeChart}\n     */\n    _chart.rightY = function (yScale) {\n        if (!arguments.length) {\n            return _rightY;\n        }\n        _rightY = yScale;\n        _chart.rescale();\n        return _chart;\n    };\n\n    /**\n     * Get or set alignment between left and right y axes. A line connecting '0' on both y axis\n     * will be parallel to x axis. This only has effect when {@link #dc.coordinateGridMixin+elasticY elasticY} is true.\n     * @method alignYAxes\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [alignYAxes=false]\n     * @returns {Chart}\n     */\n    _chart.alignYAxes = function (alignYAxes) {\n        if (!arguments.length) {\n            return _alignYAxes;\n        }\n        _alignYAxes = alignYAxes;\n        _chart.rescale();\n        return _chart;\n    };\n\n    function leftYAxisChildren () {\n        return _children.filter(function (child) {\n            return !child.useRightYAxis();\n        });\n    }\n\n    function rightYAxisChildren () {\n        return _children.filter(function (child) {\n            return child.useRightYAxis();\n        });\n    }\n\n    function getYAxisMin (charts) {\n        return charts.map(function (c) {\n            return c.yAxisMin();\n        });\n    }\n\n    delete _chart.yAxisMin;\n    function yAxisMin () {\n        return d3.min(getYAxisMin(leftYAxisChildren()));\n    }\n\n    function rightYAxisMin () {\n        return d3.min(getYAxisMin(rightYAxisChildren()));\n    }\n\n    function getYAxisMax (charts) {\n        return charts.map(function (c) {\n            return c.yAxisMax();\n        });\n    }\n\n    delete _chart.yAxisMax;\n    function yAxisMax () {\n        return dc.utils.add(d3.max(getYAxisMax(leftYAxisChildren())), _chart.yAxisPadding());\n    }\n\n    function rightYAxisMax () {\n        return dc.utils.add(d3.max(getYAxisMax(rightYAxisChildren())), _chart.yAxisPadding());\n    }\n\n    function getAllXAxisMinFromChildCharts () {\n        return _children.map(function (c) {\n            return c.xAxisMin();\n        });\n    }\n\n    dc.override(_chart, 'xAxisMin', function () {\n        return dc.utils.subtract(d3.min(getAllXAxisMinFromChildCharts()), _chart.xAxisPadding());\n    });\n\n    function getAllXAxisMaxFromChildCharts () {\n        return _children.map(function (c) {\n            return c.xAxisMax();\n        });\n    }\n\n    dc.override(_chart, 'xAxisMax', function () {\n        return dc.utils.add(d3.max(getAllXAxisMaxFromChildCharts()), _chart.xAxisPadding());\n    });\n\n    _chart.legendables = function () {\n        return _children.reduce(function (items, child) {\n            if (_shareColors) {\n                child.colors(_chart.colors());\n            }\n            items.push.apply(items, child.legendables());\n            return items;\n        }, []);\n    };\n\n    _chart.legendHighlight = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n            var child = _children[j];\n            child.legendHighlight(d);\n        }\n    };\n\n    _chart.legendReset = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n            var child = _children[j];\n            child.legendReset(d);\n        }\n    };\n\n    _chart.legendToggle = function () {\n        console.log('composite should not be getting legendToggle itself');\n    };\n\n    /**\n     * Set or get the right y axis used by the composite chart. This function is most useful when y\n     * axis customization is required. The y axis in dc.js is an instance of a [d3 axis\n     * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis) therefore it supports any valid\n     * d3 axis manipulation.\n     *\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.\n     * @method rightYAxis\n     * @memberof dc.compositeChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize y axis tick format\n     * chart.rightYAxis().tickFormat(function (v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.rightYAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [rightYAxis]\n     * @returns {d3.svg.axis|dc.compositeChart}\n     */\n    _chart.rightYAxis = function (rightYAxis) {\n        if (!arguments.length) {\n            return _rightYAxis;\n        }\n        _rightYAxis = rightYAxis;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A series chart is a chart that shows multiple series of data overlaid on one chart, where the\n * series is specified in the data. It is a specialization of Composite Chart and inherits all\n * composite features other than recomposing the chart.\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/series.html Series Chart}\n * @class seriesChart\n * @memberof dc\n * @mixes dc.compositeChart\n * @example\n * // create a series chart under #chart-container1 element using the default global chart group\n * var seriesChart1 = dc.seriesChart(\"#chart-container1\");\n * // create a series chart under #chart-container2 element using chart group A\n * var seriesChart2 = dc.seriesChart(\"#chart-container2\", \"chartGroupA\");\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.seriesChart}\n */\ndc.seriesChart = function (parent, chartGroup) {\n    var _chart = dc.compositeChart(parent, chartGroup);\n\n    function keySort (a, b) {\n        return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n    }\n\n    var _charts = {};\n    var _chartFunction = dc.lineChart;\n    var _seriesAccessor;\n    var _seriesSort = d3.ascending;\n    var _valueSort = keySort;\n\n    _chart._mandatoryAttributes().push('seriesAccessor', 'chart');\n    _chart.shareColors(true);\n\n    _chart._preprocessData = function () {\n        var keep = [];\n        var childrenChanged;\n        var nester = d3.nest().key(_seriesAccessor);\n        if (_seriesSort) {\n            nester.sortKeys(_seriesSort);\n        }\n        if (_valueSort) {\n            nester.sortValues(_valueSort);\n        }\n        var nesting = nester.entries(_chart.data());\n        var children =\n            nesting.map(function (sub, i) {\n                var subChart = _charts[sub.key] || _chartFunction.call(_chart, _chart, chartGroup, sub.key, i);\n                if (!_charts[sub.key]) {\n                    childrenChanged = true;\n                }\n                _charts[sub.key] = subChart;\n                keep.push(sub.key);\n                return subChart\n                    .dimension(_chart.dimension())\n                    .group({all: d3.functor(sub.values)}, sub.key)\n                    .keyAccessor(_chart.keyAccessor())\n                    .valueAccessor(_chart.valueAccessor())\n                    .brushOn(_chart.brushOn());\n            });\n        // this works around the fact compositeChart doesn't really\n        // have a removal interface\n        Object.keys(_charts)\n            .filter(function (c) {return keep.indexOf(c) === -1;})\n            .forEach(function (c) {\n                clearChart(c);\n                childrenChanged = true;\n            });\n        _chart._compose(children);\n        if (childrenChanged && _chart.legend()) {\n            _chart.legend().render();\n        }\n    };\n\n    function clearChart (c) {\n        if (_charts[c].g()) {\n            _charts[c].g().remove();\n        }\n        delete _charts[c];\n    }\n\n    function resetChildren () {\n        Object.keys(_charts).map(clearChart);\n        _charts = {};\n    }\n\n    /**\n     * Get or set the chart function, which generates the child charts.\n     * @method chart\n     * @memberof dc.seriesChart\n     * @instance\n     * @example\n     * // put interpolation on the line charts used for the series\n     * chart.chart(function(c) { return dc.lineChart(c).interpolate('basis'); })\n     * // do a scatter series chart\n     * chart.chart(dc.scatterPlot)\n     * @param {Function} [chartFunction=dc.lineChart]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.chart = function (chartFunction) {\n        if (!arguments.length) {\n            return _chartFunction;\n        }\n        _chartFunction = chartFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Get or set accessor function for the displayed series. Given a datum, this function\n     * should return the series that datum belongs to.\n     * @method seriesAccessor\n     * @memberof dc.seriesChart\n     * @instance\n     * @example\n     * // simple series accessor\n     * chart.seriesAccessor(function(d) { return \"Expt: \" + d.key[0]; })\n     * @param {Function} [accessor]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.seriesAccessor = function (accessor) {\n        if (!arguments.length) {\n            return _seriesAccessor;\n        }\n        _seriesAccessor = accessor;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * Get or set a function to sort the list of series by, given series values.\n     * @method seriesSort\n     * @memberof dc.seriesChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.seriesSort(d3.descending);\n     * @param {Function} [sortFunction=d3.ascending]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.seriesSort = function (sortFunction) {\n        if (!arguments.length) {\n            return _seriesSort;\n        }\n        _seriesSort = sortFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * Get or set a function to sort each series values by. By default this is the key accessor which,\n     * for example, will ensure a lineChart series connects its points in increasing key/x order,\n     * rather than haphazardly.\n     * @method valueSort\n     * @memberof dc.seriesChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * // Default value sort\n     * _chart.valueSort(function keySort (a, b) {\n     *     return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n     * });\n     * @param {Function} [sortFunction]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.valueSort = function (sortFunction) {\n        if (!arguments.length) {\n            return _valueSort;\n        }\n        _valueSort = sortFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    // make compose private\n    _chart._compose = _chart.compose;\n    delete _chart.compose;\n\n    return _chart;\n};\n\n/**\n * The geo choropleth chart is designed as an easy way to create a crossfilter driven choropleth map\n * from GeoJson data. This chart implementation was inspired by\n * {@link http://bl.ocks.org/4060606 the great d3 choropleth example}.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n * @class geoChoroplethChart\n * @memberof dc\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a choropleth chart under '#us-chart' element using the default global chart group\n * var chart1 = dc.geoChoroplethChart('#us-chart');\n * // create a choropleth chart under '#us-chart2' element using chart group A\n * var chart2 = dc.compositeChart('#us-chart2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.geoChoroplethChart}\n */\ndc.geoChoroplethChart = function (parent, chartGroup) {\n    var _chart = dc.colorMixin(dc.baseMixin({}));\n\n    _chart.colorAccessor(function (d) {\n        return d || 0;\n    });\n\n    var _geoPath = d3.geo.path();\n    var _projectionFlag;\n\n    var _geoJsons = [];\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n            var states = _chart.svg().append('g')\n                .attr('class', 'layer' + layerIndex);\n\n            var regionG = states.selectAll('g.' + geoJson(layerIndex).name)\n                .data(geoJson(layerIndex).data)\n                .enter()\n                .append('g')\n                .attr('class', geoJson(layerIndex).name);\n\n            regionG\n                .append('path')\n                .attr('fill', 'white')\n                .attr('d', _geoPath);\n\n            regionG.append('title');\n\n            plotData(layerIndex);\n        }\n        _projectionFlag = false;\n    };\n\n    function plotData (layerIndex) {\n        var data = generateLayeredData();\n\n        if (isDataLayer(layerIndex)) {\n            var regionG = renderRegionG(layerIndex);\n\n            renderPaths(regionG, layerIndex, data);\n\n            renderTitle(regionG, layerIndex, data);\n        }\n    }\n\n    function generateLayeredData () {\n        var data = {};\n        var groupAll = _chart.data();\n        for (var i = 0; i < groupAll.length; ++i) {\n            data[_chart.keyAccessor()(groupAll[i])] = _chart.valueAccessor()(groupAll[i]);\n        }\n        return data;\n    }\n\n    function isDataLayer (layerIndex) {\n        return geoJson(layerIndex).keyAccessor;\n    }\n\n    function renderRegionG (layerIndex) {\n        var regionG = _chart.svg()\n            .selectAll(layerSelector(layerIndex))\n            .classed('selected', function (d) {\n                return isSelected(layerIndex, d);\n            })\n            .classed('deselected', function (d) {\n                return isDeselected(layerIndex, d);\n            })\n            .attr('class', function (d) {\n                var layerNameClass = geoJson(layerIndex).name;\n                var regionClass = dc.utils.nameToId(geoJson(layerIndex).keyAccessor(d));\n                var baseClasses = layerNameClass + ' ' + regionClass;\n                if (isSelected(layerIndex, d)) {\n                    baseClasses += ' selected';\n                }\n                if (isDeselected(layerIndex, d)) {\n                    baseClasses += ' deselected';\n                }\n                return baseClasses;\n            });\n        return regionG;\n    }\n\n    function layerSelector (layerIndex) {\n        return 'g.layer' + layerIndex + ' g.' + geoJson(layerIndex).name;\n    }\n\n    function isSelected (layerIndex, d) {\n        return _chart.hasFilter() && _chart.hasFilter(getKey(layerIndex, d));\n    }\n\n    function isDeselected (layerIndex, d) {\n        return _chart.hasFilter() && !_chart.hasFilter(getKey(layerIndex, d));\n    }\n\n    function getKey (layerIndex, d) {\n        return geoJson(layerIndex).keyAccessor(d);\n    }\n\n    function geoJson (index) {\n        return _geoJsons[index];\n    }\n\n    function renderPaths (regionG, layerIndex, data) {\n        var paths = regionG\n            .select('path')\n            .attr('fill', function () {\n                var currentFill = d3.select(this).attr('fill');\n                if (currentFill) {\n                    return currentFill;\n                }\n                return 'none';\n            })\n            .on('click', function (d) {\n                return _chart.onClick(d, layerIndex);\n            });\n\n        dc.transition(paths, _chart.transitionDuration(), _chart.transitionDelay()).attr('fill', function (d, i) {\n            return _chart.getColor(data[geoJson(layerIndex).keyAccessor(d)], i);\n        });\n    }\n\n    _chart.onClick = function (d, layerIndex) {\n        var selectedRegion = geoJson(layerIndex).keyAccessor(d);\n        dc.events.trigger(function () {\n            _chart.filter(selectedRegion);\n            _chart.redrawGroup();\n        });\n    };\n\n    function renderTitle (regionG, layerIndex, data) {\n        if (_chart.renderTitle()) {\n            regionG.selectAll('title').text(function (d) {\n                var key = getKey(layerIndex, d);\n                var value = data[key];\n                return _chart.title()({key: key, value: value});\n            });\n        }\n    }\n\n    _chart._doRedraw = function () {\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n            plotData(layerIndex);\n            if (_projectionFlag) {\n                _chart.svg().selectAll('g.' + geoJson(layerIndex).name + ' path').attr('d', _geoPath);\n            }\n        }\n        _projectionFlag = false;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Use this function to insert a new GeoJson map layer. This function can be invoked multiple times\n     * if you have multiple GeoJson data layers to render on top of each other. If you overlay multiple\n     * layers with the same name the new overlay will override the existing one.\n     * @method overlayGeoJson\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link http://geojson.org/ GeoJSON}\n     * @see {@link https://github.com/topojson/topojson/wiki TopoJSON}\n     * @see {@link https://github.com/topojson/topojson-1.x-api-reference/blob/master/API-Reference.md#wiki-feature topojson.feature}\n     * @example\n     * // insert a layer for rendering US states\n     * chart.overlayGeoJson(statesJson.features, 'state', function(d) {\n     *      return d.properties.name;\n     * });\n     * @param {geoJson} json - a geojson feed\n     * @param {String} name - name of the layer\n     * @param {Function} keyAccessor - accessor function used to extract 'key' from the GeoJson data. The key extracted by\n     * this function should match the keys returned by the crossfilter groups.\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.overlayGeoJson = function (json, name, keyAccessor) {\n        for (var i = 0; i < _geoJsons.length; ++i) {\n            if (_geoJsons[i].name === name) {\n                _geoJsons[i].data = json;\n                _geoJsons[i].keyAccessor = keyAccessor;\n                return _chart;\n            }\n        }\n        _geoJsons.push({name: name, data: json, keyAccessor: keyAccessor});\n        return _chart;\n    };\n\n    /**\n     * Set custom geo projection function. See the available\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3 geo projection functions}.\n     * @method projection\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3.geo.projection}\n     * @see {@link https://github.com/d3/d3-geo-projection Extended d3.geo.projection}\n     * @param {d3.projection} [projection=d3.geo.albersUsa()]\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.projection = function (projection) {\n        _geoPath.projection(projection);\n        _projectionFlag = true;\n        return _chart;\n    };\n\n    /**\n     * Returns all GeoJson layers currently registered with this chart. The returned array is a\n     * reference to this chart's internal data structure, so any modification to this array will also\n     * modify this chart's internal registration.\n     * @method geoJsons\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @returns {Array<{name:String, data: Object, accessor: Function}>}\n     */\n    _chart.geoJsons = function () {\n        return _geoJsons;\n    };\n\n    /**\n     * Returns the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path} object used to\n     * render the projection and features.  Can be useful for figuring out the bounding box of the\n     * feature set and thus a way to calculate scale and translation for the projection.\n     * @method geoPath\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path}\n     * @returns {d3.geo.path}\n     */\n    _chart.geoPath = function () {\n        return _geoPath;\n    };\n\n    /**\n     * Remove a GeoJson layer from this chart by name\n     * @method removeGeoJson\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @param {String} name\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.removeGeoJson = function (name) {\n        var geoJsons = [];\n\n        for (var i = 0; i < _geoJsons.length; ++i) {\n            var layer = _geoJsons[i];\n            if (layer.name !== name) {\n                geoJsons.push(layer);\n            }\n        }\n\n        _geoJsons = geoJsons;\n\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The bubble overlay chart is quite different from the typical bubble chart. With the bubble overlay\n * chart you can arbitrarily place bubbles on an existing svg or bitmap image, thus changing the\n * typical x and y positioning while retaining the capability to visualize data using bubble radius\n * and coloring.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class bubbleOverlay\n * @memberof dc\n * @mixes dc.bubbleMixin\n * @mixes dc.baseMixin\n * @example\n * // create a bubble overlay chart on top of the '#chart-container1 svg' element using the default global chart group\n * var bubbleChart1 = dc.bubbleOverlayChart('#chart-container1').svg(d3.select('#chart-container1 svg'));\n * // create a bubble overlay chart on top of the '#chart-container2 svg' element using chart group A\n * var bubbleChart2 = dc.compositeChart('#chart-container2', 'chartGroupA').svg(d3.select('#chart-container2 svg'));\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.bubbleOverlay}\n */\ndc.bubbleOverlay = function (parent, chartGroup) {\n    var BUBBLE_OVERLAY_CLASS = 'bubble-overlay';\n    var BUBBLE_NODE_CLASS = 'node';\n    var BUBBLE_CLASS = 'bubble';\n\n    /**\n     * **mandatory**\n     *\n     * Set the underlying svg image element. Unlike other dc charts this chart will not generate a svg\n     * element; therefore the bubble overlay chart will not work if this function is not invoked. If the\n     * underlying image is a bitmap, then an empty svg will need to be created on top of the image.\n     * @method svg\n     * @memberof dc.bubbleOverlay\n     * @instance\n     * @example\n     * // set up underlying svg element\n     * chart.svg(d3.select('#chart svg'));\n     * @param {SVGElement|d3.selection} [imageElement]\n     * @returns {dc.bubbleOverlay}\n     */\n    var _chart = dc.bubbleMixin(dc.baseMixin({}));\n    var _g;\n    var _points = [];\n\n    _chart.transitionDuration(750);\n\n    _chart.transitionDelay(0);\n\n    _chart.radiusValueAccessor(function (d) {\n        return d.value;\n    });\n\n    /**\n     * **mandatory**\n     *\n     * Set up a data point on the overlay. The name of a data point should match a specific 'key' among\n     * data groups generated using keyAccessor.  If a match is found (point name <-> data group key)\n     * then a bubble will be generated at the position specified by the function. x and y\n     * value specified here are relative to the underlying svg.\n     * @method point\n     * @memberof dc.bubbleOverlay\n     * @instance\n     * @param {String} name\n     * @param {Number} x\n     * @param {Number} y\n     * @returns {dc.bubbleOverlay}\n     */\n    _chart.point = function (name, x, y) {\n        _points.push({name: name, x: x, y: y});\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        _g = initOverlayG();\n\n        _chart.r().range([_chart.MIN_RADIUS, _chart.width() * _chart.maxBubbleRelativeSize()]);\n\n        initializeBubbles();\n\n        _chart.fadeDeselectedArea();\n\n        return _chart;\n    };\n\n    function initOverlayG () {\n        _g = _chart.select('g.' + BUBBLE_OVERLAY_CLASS);\n        if (_g.empty()) {\n            _g = _chart.svg().append('g').attr('class', BUBBLE_OVERLAY_CLASS);\n        }\n        return _g;\n    }\n\n    function initializeBubbles () {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n            var nodeG = getNodeG(point, data);\n\n            var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n\n            if (circle.empty()) {\n                circle = nodeG.append('circle')\n                    .attr('class', BUBBLE_CLASS)\n                    .attr('r', 0)\n                    .attr('fill', _chart.getColor)\n                    .on('click', _chart.onClick);\n            }\n\n            dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('r', function (d) {\n                    return _chart.bubbleR(d);\n                });\n\n            _chart._doRenderLabel(nodeG);\n\n            _chart._doRenderTitles(nodeG);\n        });\n    }\n\n    function mapData () {\n        var data = {};\n        _chart.data().forEach(function (datum) {\n            data[_chart.keyAccessor()(datum)] = datum;\n        });\n        return data;\n    }\n\n    function getNodeG (point, data) {\n        var bubbleNodeClass = BUBBLE_NODE_CLASS + ' ' + dc.utils.nameToId(point.name);\n\n        var nodeG = _g.select('g.' + dc.utils.nameToId(point.name));\n\n        if (nodeG.empty()) {\n            nodeG = _g.append('g')\n                .attr('class', bubbleNodeClass)\n                .attr('transform', 'translate(' + point.x + ',' + point.y + ')');\n        }\n\n        nodeG.datum(data[point.name]);\n\n        return nodeG;\n    }\n\n    _chart._doRedraw = function () {\n        updateBubbles();\n\n        _chart.fadeDeselectedArea();\n\n        return _chart;\n    };\n\n    function updateBubbles () {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n            var nodeG = getNodeG(point, data);\n\n            var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n\n            dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('r', function (d) {\n                    return _chart.bubbleR(d);\n                })\n                .attr('fill', _chart.getColor);\n\n            _chart.doUpdateLabels(nodeG);\n\n            _chart.doUpdateTitles(nodeG);\n        });\n    }\n\n    _chart.debug = function (flag) {\n        if (flag) {\n            var debugG = _chart.select('g.' + dc.constants.DEBUG_GROUP_CLASS);\n\n            if (debugG.empty()) {\n                debugG = _chart.svg()\n                    .append('g')\n                    .attr('class', dc.constants.DEBUG_GROUP_CLASS);\n            }\n\n            var debugText = debugG.append('text')\n                .attr('x', 10)\n                .attr('y', 20);\n\n            debugG\n                .append('rect')\n                .attr('width', _chart.width())\n                .attr('height', _chart.height())\n                .on('mousemove', function () {\n                    var position = d3.mouse(debugG.node());\n                    var msg = position[0] + ', ' + position[1];\n                    debugText.text(msg);\n                });\n        } else {\n            _chart.selectAll('.debug').remove();\n        }\n\n        return _chart;\n    };\n\n    _chart.anchor(parent, chartGroup);\n\n    return _chart;\n};\n\n/**\n * Concrete row chart implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class rowChart\n * @memberof dc\n * @mixes dc.capMixin\n * @mixes dc.marginMixin\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a row chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.rowChart('#chart-container1');\n * // create a row chart under #chart-container2 element using chart group A\n * var chart2 = dc.rowChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.rowChart}\n */\ndc.rowChart = function (parent, chartGroup) {\n\n    var _g;\n\n    var _labelOffsetX = 10;\n    var _labelOffsetY = 15;\n    var _hasLabelOffsetY = false;\n    var _dyOffset = '0.35em';  // this helps center labels https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#svg_text\n    var _titleLabelOffsetX = 2;\n\n    var _gap = 5;\n\n    var _fixedBarHeight = false;\n    var _rowCssClass = 'row';\n    var _titleRowCssClass = 'titlerow';\n    var _renderTitleLabel = false;\n\n    var _chart = dc.capMixin(dc.marginMixin(dc.colorMixin(dc.baseMixin({}))));\n\n    var _x;\n\n    var _elasticX;\n\n    var _xAxis = d3.svg.axis().orient('bottom');\n\n    var _rowData;\n\n    _chart.rowsCap = _chart.cap;\n\n    function calculateAxisScale () {\n        if (!_x || _elasticX) {\n            var extent = d3.extent(_rowData, _chart.cappedValueAccessor);\n            if (extent[0] > 0) {\n                extent[0] = 0;\n            }\n            if (extent[1] < 0) {\n                extent[1] = 0;\n            }\n            _x = d3.scale.linear().domain(extent)\n                .range([0, _chart.effectiveWidth()]);\n        }\n        _xAxis.scale(_x);\n    }\n\n    function drawAxis () {\n        var axisG = _g.select('g.axis');\n\n        calculateAxisScale();\n\n        if (axisG.empty()) {\n            axisG = _g.append('g').attr('class', 'axis');\n        }\n        axisG.attr('transform', 'translate(0, ' + _chart.effectiveHeight() + ')');\n\n        dc.transition(axisG, _chart.transitionDuration(), _chart.transitionDelay())\n            .call(_xAxis);\n    }\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg()\n            .append('g')\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n\n        drawChart();\n\n        return _chart;\n    };\n\n    _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n    });\n\n    _chart.label(_chart.cappedKeyAccessor);\n\n    /**\n     * Gets or sets the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}.\n     * @method x\n     * @memberof dc.rowChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}\n     * @param {d3.scale} [scale]\n     * @returns {d3.scale|dc.rowChart}\n     */\n    _chart.x = function (scale) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = scale;\n        return _chart;\n    };\n\n    function drawGridLines () {\n        _g.selectAll('g.tick')\n            .select('line.grid-line')\n            .remove();\n\n        _g.selectAll('g.tick')\n            .append('line')\n            .attr('class', 'grid-line')\n            .attr('x1', 0)\n            .attr('y1', 0)\n            .attr('x2', 0)\n            .attr('y2', function () {\n                return -_chart.effectiveHeight();\n            });\n    }\n\n    function drawChart () {\n        _rowData = _chart.data();\n\n        drawAxis();\n        drawGridLines();\n\n        var rows = _g.selectAll('g.' + _rowCssClass)\n            .data(_rowData);\n\n        createElements(rows);\n        removeElements(rows);\n        updateElements(rows);\n    }\n\n    function createElements (rows) {\n        var rowEnter = rows.enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return _rowCssClass + ' _' + i;\n            });\n\n        rowEnter.append('rect').attr('width', 0);\n\n        createLabels(rowEnter);\n    }\n\n    function removeElements (rows) {\n        rows.exit().remove();\n    }\n\n    function rootValue () {\n        var root = _x(0);\n        return (root === -Infinity || root !== root) ? _x(1) : root;\n    }\n\n    function updateElements (rows) {\n        var n = _rowData.length;\n\n        var height;\n        if (!_fixedBarHeight) {\n            height = (_chart.effectiveHeight() - (n + 1) * _gap) / n;\n        } else {\n            height = _fixedBarHeight;\n        }\n\n        // vertically align label in center unless they override the value via property setter\n        if (!_hasLabelOffsetY) {\n            _labelOffsetY = height / 2;\n        }\n\n        var rect = rows.attr('transform', function (d, i) {\n                return 'translate(0,' + ((i + 1) * _gap + i * height) + ')';\n            }).select('rect')\n            .attr('height', height)\n            .attr('fill', _chart.getColor)\n            .on('click', onClick)\n            .classed('deselected', function (d) {\n                return (_chart.hasFilter()) ? !isSelectedRow(d) : false;\n            })\n            .classed('selected', function (d) {\n                return (_chart.hasFilter()) ? isSelectedRow(d) : false;\n            });\n\n        dc.transition(rect, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('width', function (d) {\n                return Math.abs(rootValue() - _x(_chart.valueAccessor()(d)));\n            })\n            .attr('transform', translateX);\n\n        createTitles(rows);\n        updateLabels(rows);\n    }\n\n    function createTitles (rows) {\n        if (_chart.renderTitle()) {\n            rows.select('title').remove();\n            rows.append('title').text(_chart.title());\n        }\n    }\n\n    function createLabels (rowEnter) {\n        if (_chart.renderLabel()) {\n            rowEnter.append('text')\n                .on('click', onClick);\n        }\n        if (_chart.renderTitleLabel()) {\n            rowEnter.append('text')\n                .attr('class', _titleRowCssClass)\n                .on('click', onClick);\n        }\n    }\n\n    function updateLabels (rows) {\n        if (_chart.renderLabel()) {\n            var lab = rows.select('text')\n                .attr('x', _labelOffsetX)\n                .attr('y', _labelOffsetY)\n                .attr('dy', _dyOffset)\n                .on('click', onClick)\n                .attr('class', function (d, i) {\n                    return _rowCssClass + ' _' + i;\n                })\n                .text(function (d) {\n                    return _chart.label()(d);\n                });\n            dc.transition(lab, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', translateX);\n        }\n        if (_chart.renderTitleLabel()) {\n            var titlelab = rows.select('.' + _titleRowCssClass)\n                    .attr('x', _chart.effectiveWidth() - _titleLabelOffsetX)\n                    .attr('y', _labelOffsetY)\n                    .attr('dy', _dyOffset)\n                    .attr('text-anchor', 'end')\n                    .on('click', onClick)\n                    .attr('class', function (d, i) {\n                        return _titleRowCssClass + ' _' + i ;\n                    })\n                    .text(function (d) {\n                        return _chart.title()(d);\n                    });\n            dc.transition(titlelab, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', translateX);\n        }\n    }\n\n    /**\n     * Turn on/off Title label rendering (values) using SVG style of text-anchor 'end'.\n     * @method renderTitleLabel\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Boolean} [renderTitleLabel=false]\n     * @returns {Boolean|dc.rowChart}\n     */\n    _chart.renderTitleLabel = function (renderTitleLabel) {\n        if (!arguments.length) {\n            return _renderTitleLabel;\n        }\n        _renderTitleLabel = renderTitleLabel;\n        return _chart;\n    };\n\n    function onClick (d) {\n        _chart.onClick(d);\n    }\n\n    function translateX (d) {\n        var x = _x(_chart.cappedValueAccessor(d)),\n            x0 = rootValue(),\n            s = x > x0 ? x0 : x;\n        return 'translate(' + s + ',0)';\n    }\n\n    _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n    };\n\n    /**\n     * Get the x axis for the row chart instance.  Note: not settable for row charts.\n     * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object}\n     * documention for more information.\n     * @method xAxis\n     * @memberof dc.rowChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function (v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * @returns {d3.svg.axis}\n     */\n    _chart.xAxis = function () {\n        return _xAxis;\n    };\n\n    /**\n     * Get or set the fixed bar height. Default is [false] which will auto-scale bars.\n     * For example, if you want to fix the height for a specific number of bars (useful in TopN charts)\n     * you could fix height as follows (where count = total number of bars in your TopN and gap is\n     * your vertical gap space).\n     * @method fixedBarHeight\n     * @memberof dc.rowChart\n     * @instance\n     * @example\n     * chart.fixedBarHeight( chartheight - (count + 1) * gap / count);\n     * @param {Boolean|Number} [fixedBarHeight=false]\n     * @returns {Boolean|Number|dc.rowChart}\n     */\n    _chart.fixedBarHeight = function (fixedBarHeight) {\n        if (!arguments.length) {\n            return _fixedBarHeight;\n        }\n        _fixedBarHeight = fixedBarHeight;\n        return _chart;\n    };\n\n    /**\n     * Get or set the vertical gap space between rows on a particular row chart instance.\n     * @method gap\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [gap=5]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _chart;\n    };\n\n    /**\n     * Get or set the elasticity on x axis. If this attribute is set to true, then the x axis will rescle to auto-fit the\n     * data range when filtered.\n     * @method elasticX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Boolean} [elasticX]\n     * @returns {Boolean|dc.rowChart}\n     */\n    _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n            return _elasticX;\n        }\n        _elasticX = elasticX;\n        return _chart;\n    };\n\n    /**\n     * Get or set the x offset (horizontal space to the top left corner of a row) for labels on a particular row chart.\n     * @method labelOffsetX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [labelOffsetX=10]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.labelOffsetX = function (labelOffsetX) {\n        if (!arguments.length) {\n            return _labelOffsetX;\n        }\n        _labelOffsetX = labelOffsetX;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y offset (vertical space to the top left corner of a row) for labels on a particular row chart.\n     * @method labelOffsetY\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [labelOffsety=15]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.labelOffsetY = function (labelOffsety) {\n        if (!arguments.length) {\n            return _labelOffsetY;\n        }\n        _labelOffsetY = labelOffsety;\n        _hasLabelOffsetY = true;\n        return _chart;\n    };\n\n    /**\n     * Get of set the x offset (horizontal space between right edge of row and right edge or text.\n     * @method titleLabelOffsetX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [titleLabelOffsetX=2]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.titleLabelOffsetX = function (titleLabelOffsetX) {\n        if (!arguments.length) {\n            return _titleLabelOffsetX;\n        }\n        _titleLabelOffsetX = titleLabelOffsetX;\n        return _chart;\n    };\n\n    function isSelectedRow (d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d));\n    }\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Legend is a attachable widget that can be added to other dc charts to render horizontal legend\n * labels.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class legend\n * @memberof dc\n * @example\n * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n * @returns {dc.legend}\n */\ndc.legend = function () {\n    var LABEL_GAP = 2;\n\n    var _legend = {},\n        _parent,\n        _x = 0,\n        _y = 0,\n        _itemHeight = 12,\n        _gap = 5,\n        _horizontal = false,\n        _legendWidth = 560,\n        _itemWidth = 70,\n        _autoItemWidth = false,\n        _legendText = dc.pluck('name'),\n        _maxItems;\n\n    var _g;\n\n    _legend.parent = function (p) {\n        if (!arguments.length) {\n            return _parent;\n        }\n        _parent = p;\n        return _legend;\n    };\n\n    _legend.render = function () {\n        _parent.svg().select('g.dc-legend').remove();\n        _g = _parent.svg().append('g')\n            .attr('class', 'dc-legend')\n            .attr('transform', 'translate(' + _x + ',' + _y + ')');\n        var legendables = _parent.legendables();\n\n        if (_maxItems !== undefined) {\n            legendables = legendables.slice(0, _maxItems);\n        }\n\n        var itemEnter = _g.selectAll('g.dc-legend-item')\n            .data(legendables)\n            .enter()\n            .append('g')\n            .attr('class', 'dc-legend-item')\n            .on('mouseover', function (d) {\n                _parent.legendHighlight(d);\n            })\n            .on('mouseout', function (d) {\n                _parent.legendReset(d);\n            })\n            .on('click', function (d) {\n                d.chart.legendToggle(d);\n            });\n\n        _g.selectAll('g.dc-legend-item')\n            .classed('fadeout', function (d) {\n                return d.chart.isLegendableHidden(d);\n            });\n\n        if (legendables.some(dc.pluck('dashstyle'))) {\n            itemEnter\n                .append('line')\n                .attr('x1', 0)\n                .attr('y1', _itemHeight / 2)\n                .attr('x2', _itemHeight)\n                .attr('y2', _itemHeight / 2)\n                .attr('stroke-width', 2)\n                .attr('stroke-dasharray', dc.pluck('dashstyle'))\n                .attr('stroke', dc.pluck('color'));\n        } else {\n            itemEnter\n                .append('rect')\n                .attr('width', _itemHeight)\n                .attr('height', _itemHeight)\n                .attr('fill', function (d) {return d ? d.color : 'blue';});\n        }\n\n        itemEnter.append('text')\n                .text(_legendText)\n                .attr('x', _itemHeight + LABEL_GAP)\n                .attr('y', function () {\n                    return _itemHeight / 2 + (this.clientHeight ? this.clientHeight : 13) / 2 - 2;\n                });\n\n        var _cumulativeLegendTextWidth = 0;\n        var row = 0;\n        itemEnter.attr('transform', function (d, i) {\n            if (_horizontal) {\n                var itemWidth   = _autoItemWidth === true ? this.getBBox().width + _gap : _itemWidth;\n                if ((_cumulativeLegendTextWidth + itemWidth) > _legendWidth && _cumulativeLegendTextWidth > 0) {\n                    ++row;\n                    _cumulativeLegendTextWidth = 0;\n                }\n                var translateBy = 'translate(' + _cumulativeLegendTextWidth + ',' + row * legendItemHeight() + ')';\n                _cumulativeLegendTextWidth += itemWidth;\n                return translateBy;\n            } else {\n                return 'translate(0,' + i * legendItemHeight() + ')';\n            }\n        });\n    };\n\n    function legendItemHeight () {\n        return _gap + _itemHeight;\n    }\n\n    /**\n     * Set or get x coordinate for legend widget.\n     * @method x\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [x=0]\n     * @returns {Number|dc.legend}\n     */\n    _legend.x = function (x) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = x;\n        return _legend;\n    };\n\n    /**\n     * Set or get y coordinate for legend widget.\n     * @method y\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [y=0]\n     * @returns {Number|dc.legend}\n     */\n    _legend.y = function (y) {\n        if (!arguments.length) {\n            return _y;\n        }\n        _y = y;\n        return _legend;\n    };\n\n    /**\n     * Set or get gap between legend items.\n     * @method gap\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [gap=5]\n     * @returns {Number|dc.legend}\n     */\n    _legend.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _legend;\n    };\n\n    /**\n     * Set or get legend item height.\n     * @method itemHeight\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [itemHeight=12]\n     * @returns {Number|dc.legend}\n     */\n    _legend.itemHeight = function (itemHeight) {\n        if (!arguments.length) {\n            return _itemHeight;\n        }\n        _itemHeight = itemHeight;\n        return _legend;\n    };\n\n    /**\n     * Position legend horizontally instead of vertically.\n     * @method horizontal\n     * @memberof dc.legend\n     * @instance\n     * @param  {Boolean} [horizontal=false]\n     * @returns {Boolean|dc.legend}\n     */\n    _legend.horizontal = function (horizontal) {\n        if (!arguments.length) {\n            return _horizontal;\n        }\n        _horizontal = horizontal;\n        return _legend;\n    };\n\n    /**\n     * Maximum width for horizontal legend.\n     * @method legendWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [legendWidth=500]\n     * @returns {Number|dc.legend}\n     */\n    _legend.legendWidth = function (legendWidth) {\n        if (!arguments.length) {\n            return _legendWidth;\n        }\n        _legendWidth = legendWidth;\n        return _legend;\n    };\n\n    /**\n     * Legend item width for horizontal legend.\n     * @method itemWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [itemWidth=70]\n     * @returns {Number|dc.legend}\n     */\n    _legend.itemWidth = function (itemWidth) {\n        if (!arguments.length) {\n            return _itemWidth;\n        }\n        _itemWidth = itemWidth;\n        return _legend;\n    };\n\n    /**\n     * Turn automatic width for legend items on or off. If true, {@link dc.legend#itemWidth itemWidth} is ignored.\n     * This setting takes into account the {@link dc.legend#gap gap}.\n     * @method autoItemWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Boolean} [autoItemWidth=false]\n     * @returns {Boolean|dc.legend}\n     */\n    _legend.autoItemWidth = function (autoItemWidth) {\n        if (!arguments.length) {\n            return _autoItemWidth;\n        }\n        _autoItemWidth = autoItemWidth;\n        return _legend;\n    };\n\n    /**\n     * Set or get the legend text function. The legend widget uses this function to render the legend\n     * text for each item. If no function is specified the legend widget will display the names\n     * associated with each group.\n     * @method legendText\n     * @memberof dc.legend\n     * @instance\n     * @param  {Function} [legendText]\n     * @returns {Function|dc.legend}\n     * @example\n     * // default legendText\n     * legend.legendText(dc.pluck('name'))\n     *\n     * // create numbered legend items\n     * chart.legend(dc.legend().legendText(function(d, i) { return i + '. ' + d.name; }))\n     *\n     * // create legend displaying group counts\n     * chart.legend(dc.legend().legendText(function(d) { return d.name + ': ' d.data; }))\n     **/\n    _legend.legendText = function (legendText) {\n        if (!arguments.length) {\n            return _legendText;\n        }\n        _legendText = legendText;\n        return _legend;\n    };\n\n    /**\n     * Maximum number of legend items to display\n     * @method maxItems\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [maxItems]\n     * @return {dc.legend}\n     */\n    _legend.maxItems = function (maxItems) {\n        if (!arguments.length) {\n            return _maxItems;\n        }\n        _maxItems = dc.utils.isNumber(maxItems) ? maxItems : undefined;\n        return _legend;\n    };\n\n    return _legend;\n};\n\n/**\n * A scatter plot chart\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/scatter.html Scatter Chart}\n * - {@link http://dc-js.github.io/dc.js/examples/multi-scatter.html Multi-Scatter Chart}\n * @class scatterPlot\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a scatter plot under #chart-container1 element using the default global chart group\n * var chart1 = dc.scatterPlot('#chart-container1');\n * // create a scatter plot under #chart-container2 element using chart group A\n * var chart2 = dc.scatterPlot('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.scatterPlot(compositeChart);\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.scatterPlot}\n */\ndc.scatterPlot = function (parent, chartGroup) {\n    var _chart = dc.coordinateGridMixin({});\n    var _symbol = d3.svg.symbol();\n\n    var _existenceAccessor = function (d) { return d.value; };\n\n    var originalKeyAccessor = _chart.keyAccessor();\n    _chart.keyAccessor(function (d) { return originalKeyAccessor(d)[0]; });\n    _chart.valueAccessor(function (d) { return originalKeyAccessor(d)[1]; });\n    _chart.colorAccessor(function () { return _chart._groupName; });\n\n    _chart.title(function (d) {\n        // this basically just counteracts the setting of its own key/value accessors\n        // see https://github.com/dc-js/dc.js/issues/702\n        return _chart.keyAccessor()(d) + ',' + _chart.valueAccessor()(d) + ': ' +\n            _chart.existenceAccessor()(d);\n    });\n\n    var _locator = function (d) {\n        return 'translate(' + _chart.x()(_chart.keyAccessor()(d)) + ',' +\n                              _chart.y()(_chart.valueAccessor()(d)) + ')';\n    };\n\n    var _highlightedSize = 7;\n    var _symbolSize = 5;\n    var _excludedSize = 3;\n    var _excludedColor = null;\n    var _excludedOpacity = 1.0;\n    var _emptySize = 0;\n    var _emptyOpacity = 0;\n    var _nonemptyOpacity = 1;\n    var _emptyColor = null;\n    var _filtered = [];\n\n    function elementSize (d, i) {\n        if (!_existenceAccessor(d)) {\n            return Math.pow(_emptySize, 2);\n        } else if (_filtered[i]) {\n            return Math.pow(_symbolSize, 2);\n        } else {\n            return Math.pow(_excludedSize, 2);\n        }\n    }\n    _symbol.size(elementSize);\n\n    dc.override(_chart, '_filter', function (filter) {\n        if (!arguments.length) {\n            return _chart.__filter();\n        }\n\n        return _chart.__filter(dc.filters.RangedTwoDimensionalFilter(filter));\n    });\n\n    _chart.plotData = function () {\n        var symbols = _chart.chartBodyG().selectAll('path.symbol')\n            .data(_chart.data());\n\n        symbols\n            .enter()\n        .append('path')\n            .attr('class', 'symbol')\n            .attr('opacity', 0)\n            .attr('fill', _chart.getColor)\n            .attr('transform', _locator);\n\n        symbols.call(renderTitles, _chart.data());\n\n        symbols.each(function (d, i) {\n            _filtered[i] = !_chart.filter() || _chart.filter().isFiltered([d.key[0], d.key[1]]);\n        });\n\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('opacity', function (d, i) {\n                if (!_existenceAccessor(d)) {\n                    return _emptyOpacity;\n                } else if (_filtered[i]) {\n                    return _nonemptyOpacity;\n                } else {\n                    return _chart.excludedOpacity();\n                }\n            })\n            .attr('fill', function (d, i) {\n                if (_emptyColor && !_existenceAccessor(d)) {\n                    return _emptyColor;\n                } else if (_chart.excludedColor() && !_filtered[i]) {\n                    return _chart.excludedColor();\n                } else {\n                    return _chart.getColor(d);\n                }\n            })\n            .attr('transform', _locator)\n            .attr('d', _symbol);\n\n        dc.transition(symbols.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('opacity', 0).remove();\n    };\n\n    function renderTitles (symbol, d) {\n        if (_chart.renderTitle()) {\n            symbol.selectAll('title').remove();\n            symbol.append('title').text(function (d) {\n                return _chart.title()(d);\n            });\n        }\n    }\n\n    /**\n     * Get or set the existence accessor.  If a point exists, it is drawn with\n     * {@link dc.scatterPlot#symbolSize symbolSize} radius and\n     * opacity 1; if it does not exist, it is drawn with\n     * {@link dc.scatterPlot#emptySize emptySize} radius and opacity 0. By default,\n     * the existence accessor checks if the reduced value is truthy.\n     * @method existenceAccessor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link dc.scatterPlot#symbolSize symbolSize}\n     * @see {@link dc.scatterPlot#emptySize emptySize}\n     * @example\n     * // default accessor\n     * chart.existenceAccessor(function (d) { return d.value; });\n     * @param {Function} [accessor]\n     * @returns {Function|dc.scatterPlot}\n     */\n    _chart.existenceAccessor = function (accessor) {\n        if (!arguments.length) {\n            return _existenceAccessor;\n        }\n        _existenceAccessor = accessor;\n        return this;\n    };\n\n    /**\n     * Get or set the symbol type used for each point. By default the symbol is a circle.\n     * Type can be a constant or an accessor.\n     * @method symbol\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_type d3.svg.symbol.type}\n     * @example\n     * // Circle type\n     * chart.symbol('circle');\n     * // Square type\n     * chart.symbol('square');\n     * @param {String|Function} [type='circle']\n     * @returns {String|Function|dc.scatterPlot}\n     */\n    _chart.symbol = function (type) {\n        if (!arguments.length) {\n            return _symbol.type();\n        }\n        _symbol.type(type);\n        return _chart;\n    };\n\n    /**\n     * Get or set the symbol generator. By default `dc.scatterPlot` will use\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol()}\n     * to generate symbols. `dc.scatterPlot` will set the\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size size accessor}\n     * on the symbol generator.\n     * @method customSymbol\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol}\n     * @see {@link https://stackoverflow.com/questions/25332120/create-additional-d3-js-symbols Create additional D3.js symbols}\n     * @param {String|Function} [customSymbol=d3.svg.symbol()]\n     * @returns {String|Function|dc.scatterPlot}\n     */\n    _chart.customSymbol = function (customSymbol) {\n        if (!arguments.length) {\n            return _symbol;\n        }\n        _symbol = customSymbol;\n        _symbol.size(elementSize);\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for symbols.\n     * @method symbolSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [symbolSize=3]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.symbolSize = function (symbolSize) {\n        if (!arguments.length) {\n            return _symbolSize;\n        }\n        _symbolSize = symbolSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for highlighted symbols.\n     * @method highlightedSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [highlightedSize=5]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.highlightedSize = function (highlightedSize) {\n        if (!arguments.length) {\n            return _highlightedSize;\n        }\n        _highlightedSize = highlightedSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get size for symbols excluded from this chart's filter. If null, no\n     * special size is applied for symbols based on their filter status.\n     * @method excludedSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [excludedSize=null]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedSize = function (excludedSize) {\n        if (!arguments.length) {\n            return _excludedSize;\n        }\n        _excludedSize = excludedSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get color for symbols excluded from this chart's filter. If null, no\n     * special color is applied for symbols based on their filter status.\n     * @method excludedColor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [excludedColor=null]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedColor = function (excludedColor) {\n        if (!arguments.length) {\n            return _excludedColor;\n        }\n        _excludedColor = excludedColor;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols excluded from this chart's filter.\n     * @method excludedOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [excludedOpacity=1.0]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedOpacity = function (excludedOpacity) {\n        if (!arguments.length) {\n            return _excludedOpacity;\n        }\n        _excludedOpacity = excludedOpacity;\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for symbols when the group is empty.\n     * @method emptySize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [emptySize=0]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.hiddenSize = _chart.emptySize = function (emptySize) {\n        if (!arguments.length) {\n            return _emptySize;\n        }\n        _emptySize = emptySize;\n        return _chart;\n    };\n\n    /**\n     * Set or get color for symbols when the group is empty. If null, just use the\n     * {@link dc.colorMixin#colors colorMixin.colors} color scale zero value.\n     * @name emptyColor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {String} [emptyColor=null]\n     * @return {String}\n     * @return {dc.scatterPlot}/\n     */\n    _chart.emptyColor = function (emptyColor) {\n        if (!arguments.length) {\n            return _emptyColor;\n        }\n        _emptyColor = emptyColor;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols when the group is empty.\n     * @name emptyOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [emptyOpacity=0]\n     * @return {Number}\n     * @return {dc.scatterPlot}\n     */\n    _chart.emptyOpacity = function (emptyOpacity) {\n        if (!arguments.length) {\n            return _emptyOpacity;\n        }\n        _emptyOpacity = emptyOpacity;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols when the group is not empty.\n     * @name nonemptyOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [nonemptyOpacity=1]\n     * @return {Number}\n     * @return {dc.scatterPlot}\n     */\n    _chart.nonemptyOpacity = function (nonemptyOpacity) {\n        if (!arguments.length) {\n            return _emptyOpacity;\n        }\n        _nonemptyOpacity = nonemptyOpacity;\n        return _chart;\n    };\n\n    _chart.legendables = function () {\n        return [{chart: _chart, name: _chart._groupName, color: _chart.getColor()}];\n    };\n\n    _chart.legendHighlight = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n            return symbol.attr('fill') === d.color;\n        }, _highlightedSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', true);\n    };\n\n    _chart.legendReset = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n            return symbol.attr('fill') === d.color;\n        }, _symbolSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', false);\n    };\n\n    function resizeSymbolsWhere (condition, size) {\n        var symbols = _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return condition(d3.select(this));\n        });\n        var oldSize = _symbol.size();\n        _symbol.size(Math.pow(size, 2));\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay()).attr('d', _symbol);\n        _symbol.size(oldSize);\n    }\n\n    _chart.setHandlePaths = function () {\n        // no handle paths for poly-brushes\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n        if (_chart.round()) {\n            extent[0] = extent[0].map(_chart.round());\n            extent[1] = extent[1].map(_chart.round());\n\n            _chart.g().select('.brush')\n                .call(_chart.brush().extent(extent));\n        }\n        return extent;\n    };\n\n    _chart.brushIsEmpty = function (extent) {\n        return _chart.brush().empty() || !extent || extent[0][0] >= extent[1][0] || extent[0][1] >= extent[1][1];\n    };\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n\n        _chart.redrawBrush(_chart.g());\n\n        if (_chart.brushIsEmpty(extent)) {\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.redrawGroup();\n            });\n\n        } else {\n            var ranged2DFilter = dc.filters.RangedTwoDimensionalFilter(extent);\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.filter(ranged2DFilter);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n\n        }\n    };\n\n    _chart.setBrushY = function (gBrush) {\n        gBrush.call(_chart.brush().y(_chart.y()));\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A display of a single numeric value.\n * Unlike other charts, you do not need to set a dimension. Instead a group object must be provided and\n * a valueAccessor that returns a single value.\n * @class numberDisplay\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * // create a number display under #chart-container1 element using the default global chart group\n * var display1 = dc.numberDisplay('#chart-container1');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.numberDisplay}\n */\ndc.numberDisplay = function (parent, chartGroup) {\n    var SPAN_CLASS = 'number-display';\n    var _formatNumber = d3.format('.2s');\n    var _chart = dc.baseMixin({});\n    var _html = {one: '', some: '', none: ''};\n    var _lastValue;\n\n    // dimension not required\n    _chart._mandatoryAttributes(['group']);\n\n    // default to ordering by value, to emulate old group.top(1) behavior when multiple groups\n    _chart.ordering(function (kv) { return kv.value; });\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending on the number\n     * displayed.  The text `%number` will be replaced with the current value.\n     * - one: HTML template to use if the number is 1\n     * - zero: HTML template to use if the number is 0\n     * - some: HTML template to use otherwise\n     * @method html\n     * @memberof dc.numberDisplay\n     * @instance\n     * @example\n     * numberWidget.html({\n     *      one:'%number record',\n     *      some:'%number records',\n     *      none:'no records'})\n     * @param {{one:String, some:String, none:String}} [html={one: '', some: '', none: ''}]\n     * @returns {{one:String, some:String, none:String}|dc.numberDisplay}\n     */\n    _chart.html = function (html) {\n        if (!arguments.length) {\n            return _html;\n        }\n        if (html.none) {\n            _html.none = html.none;//if none available\n        } else if (html.one) {\n            _html.none = html.one;//if none not available use one\n        } else if (html.some) {\n            _html.none = html.some;//if none and one not available use some\n        }\n        if (html.one) {\n            _html.one = html.one;//if one available\n        } else if (html.some) {\n            _html.one = html.some;//if one not available use some\n        }\n        if (html.some) {\n            _html.some = html.some;//if some available\n        } else if (html.one) {\n            _html.some = html.one;//if some not available use one\n        }\n        return _chart;\n    };\n\n    /**\n     * Calculate and return the underlying value of the display.\n     * @method value\n     * @memberof dc.numberDisplay\n     * @instance\n     * @returns {Number}\n     */\n    _chart.value = function () {\n        return _chart.data();\n    };\n\n    function maxBin (all) {\n        if (!all.length) {\n            return null;\n        }\n        var sorted = _chart._computeOrderedGroups(all);\n        return sorted[sorted.length - 1];\n    }\n    _chart.data(function (group) {\n        var valObj = group.value ? group.value() : maxBin(group.all());\n        return _chart.valueAccessor()(valObj);\n    });\n\n    _chart.transitionDuration(250); // good default\n    _chart.transitionDelay(0);\n\n    _chart._doRender = function () {\n        var newValue = _chart.value(),\n            span = _chart.selectAll('.' + SPAN_CLASS);\n\n        if (span.empty()) {\n            span = span.data([0])\n                .enter()\n                .append('span')\n                .attr('class', SPAN_CLASS);\n        }\n\n        span.transition()\n            .duration(_chart.transitionDuration())\n            .delay(_chart.transitionDelay())\n            .ease('quad-out-in')\n            .tween('text', function () {\n                // [XA] don't try and interpolate from Infinity, else this breaks.\n                var interpStart = isFinite(_lastValue) ? _lastValue : 0;\n                var interp = d3.interpolateNumber(interpStart || 0, newValue);\n                _lastValue = newValue;\n                return function (t) {\n                    var html = null, num = _chart.formatNumber()(interp(t));\n                    if (newValue === 0 && (_html.none !== '')) {\n                        html = _html.none;\n                    } else if (newValue === 1 && (_html.one !== '')) {\n                        html = _html.one;\n                    } else if (_html.some !== '') {\n                        html = _html.some;\n                    }\n                    this.innerHTML = html ? html.replace('%number', num) : num;\n                };\n            });\n    };\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set a function to format the value for the display.\n     * @method formatNumber\n     * @memberof dc.numberDisplay\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n     * @param {Function} [formatter=d3.format('.2s')]\n     * @returns {Function|dc.numberDisplay}\n     */\n    _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n            return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A heat map is matrix that represents the values of two dimensions of data using colors.\n * @class heatMap\n * @memberof dc\n * @mixes dc.colorMixin\n * @mixes dc.marginMixin\n * @mixes dc.baseMixin\n * @example\n * // create a heat map under #chart-container1 element using the default global chart group\n * var heatMap1 = dc.heatMap('#chart-container1');\n * // create a heat map under #chart-container2 element using chart group A\n * var heatMap2 = dc.heatMap('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.heatMap}\n */\ndc.heatMap = function (parent, chartGroup) {\n\n    var DEFAULT_BORDER_RADIUS = 6.75;\n\n    var _chartBody;\n\n    var _cols;\n    var _rows;\n    var _colOrdering = d3.ascending;\n    var _rowOrdering = d3.ascending;\n    var _colScale = d3.scale.ordinal();\n    var _rowScale = d3.scale.ordinal();\n\n    var _xBorderRadius = DEFAULT_BORDER_RADIUS;\n    var _yBorderRadius = DEFAULT_BORDER_RADIUS;\n\n    var _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin({})));\n    _chart._mandatoryAttributes(['group']);\n    _chart.title(_chart.colorAccessor());\n\n    var _colsLabel = function (d) {\n        return d;\n    };\n    var _rowsLabel = function (d) {\n        return d;\n    };\n\n    /**\n     * Set or get the column label function. The chart class uses this function to render\n     * column labels on the X axis. It is passed the column name.\n     * @method colsLabel\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // the default label function just returns the name\n     * chart.colsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.colsLabel = function (labelFunction) {\n        if (!arguments.length) {\n            return _colsLabel;\n        }\n        _colsLabel = labelFunction;\n        return _chart;\n    };\n\n    /**\n     * Set or get the row label function. The chart class uses this function to render\n     * row labels on the Y axis. It is passed the row name.\n     * @method rowsLabel\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // the default label function just returns the name\n     * chart.rowsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.rowsLabel = function (labelFunction) {\n        if (!arguments.length) {\n            return _rowsLabel;\n        }\n        _rowsLabel = labelFunction;\n        return _chart;\n    };\n\n    var _xAxisOnClick = function (d) { filterAxis(0, d); };\n    var _yAxisOnClick = function (d) { filterAxis(1, d); };\n    var _boxOnClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    function filterAxis (axis, value) {\n        var cellsOnAxis = _chart.selectAll('.box-group').filter(function (d) {\n            return d.key[axis] === value;\n        });\n        var unfilteredCellsOnAxis = cellsOnAxis.filter(function (d) {\n            return !_chart.hasFilter(d.key);\n        });\n        dc.events.trigger(function () {\n            var selection = unfilteredCellsOnAxis.empty() ? cellsOnAxis : unfilteredCellsOnAxis;\n            var filters = selection.data().map(function (kv) {\n                return dc.filters.TwoDimensionalFilter(kv.key);\n            });\n            _chart._filter([filters]);\n            _chart.redrawGroup();\n        });\n    }\n\n    dc.override(_chart, 'filter', function (filter) {\n        if (!arguments.length) {\n            return _chart._filter();\n        }\n\n        return _chart._filter(dc.filters.TwoDimensionalFilter(filter));\n    });\n\n    /**\n     * Gets or sets the values used to create the rows of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the value accessor.\n     * @method rows\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Array<String|Number>} [rows]\n     * @returns {Array<String|Number>|dc.heatMap}\n     */\n\n    _chart.rows = function (rows) {\n        if (!arguments.length) {\n            return _rows;\n        }\n        _rows = rows;\n        return _chart;\n    };\n\n    /**\n     #### .rowOrdering([orderFunction])\n     Get or set an accessor to order the rows.  Default is d3.ascending.\n     */\n    _chart.rowOrdering = function (_) {\n        if (!arguments.length) {\n            return _rowOrdering;\n        }\n        _rowOrdering = _;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the keys used to create the columns of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the key accessor.\n     * @method cols\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Array<String|Number>} [cols]\n     * @returns {Array<String|Number>|dc.heatMap}\n     */\n    _chart.cols = function (cols) {\n        if (!arguments.length) {\n            return _cols;\n        }\n        _cols = cols;\n        return _chart;\n    };\n\n    /**\n     #### .colOrdering([orderFunction])\n     Get or set an accessor to order the cols.  Default is ascending.\n     */\n    _chart.colOrdering = function (_) {\n        if (!arguments.length) {\n            return _colOrdering;\n        }\n        _colOrdering = _;\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chartBody = _chart.svg()\n            .append('g')\n            .attr('class', 'heatmap')\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n\n        return _chart._doRedraw();\n    };\n\n    _chart._doRedraw = function () {\n        var data = _chart.data(),\n            rows = _chart.rows() || data.map(_chart.valueAccessor()),\n            cols = _chart.cols() || data.map(_chart.keyAccessor());\n        if (_rowOrdering) {\n            rows = rows.sort(_rowOrdering);\n        }\n        if (_colOrdering) {\n            cols = cols.sort(_colOrdering);\n        }\n        rows = _rowScale.domain(rows);\n        cols = _colScale.domain(cols);\n\n        var rowCount = rows.domain().length,\n            colCount = cols.domain().length,\n            boxWidth = Math.floor(_chart.effectiveWidth() / colCount),\n            boxHeight = Math.floor(_chart.effectiveHeight() / rowCount);\n\n        cols.rangeRoundBands([0, _chart.effectiveWidth()]);\n        rows.rangeRoundBands([_chart.effectiveHeight(), 0]);\n\n        var boxes = _chartBody.selectAll('g.box-group').data(_chart.data(), function (d, i) {\n            return _chart.keyAccessor()(d, i) + '\\0' + _chart.valueAccessor()(d, i);\n        });\n        var gEnter = boxes.enter().append('g')\n            .attr('class', 'box-group');\n\n        gEnter.append('rect')\n            .attr('class', 'heat-box')\n            .attr('fill', 'white')\n            .on('click', _chart.boxOnClick());\n\n        if (_chart.renderTitle()) {\n            gEnter.append('title');\n            boxes.select('title').text(_chart.title());\n        }\n\n        dc.transition(boxes.select('rect'), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d, i) { return cols(_chart.keyAccessor()(d, i)); })\n            .attr('y', function (d, i) { return rows(_chart.valueAccessor()(d, i)); })\n            .attr('rx', _xBorderRadius)\n            .attr('ry', _yBorderRadius)\n            .attr('fill', _chart.getColor)\n            .attr('width', boxWidth)\n            .attr('height', boxHeight);\n\n        boxes.exit().remove();\n\n        var gCols = _chartBody.select('g.cols');\n        if (gCols.empty()) {\n            gCols = _chartBody.append('g').attr('class', 'cols axis');\n        }\n        var gColsText = gCols.selectAll('text').data(cols.domain());\n        gColsText.enter().append('text')\n              .attr('x', function (d) { return cols(d) + boxWidth / 2; })\n              .style('text-anchor', 'middle')\n              .attr('y', _chart.effectiveHeight())\n              .attr('dy', 12)\n              .on('click', _chart.xAxisOnClick())\n              .text(_chart.colsLabel());\n        dc.transition(gColsText, _chart.transitionDuration(), _chart.transitionDelay())\n               .text(_chart.colsLabel())\n               .attr('x', function (d) { return cols(d) + boxWidth / 2; })\n               .attr('y', _chart.effectiveHeight());\n        gColsText.exit().remove();\n        var gRows = _chartBody.select('g.rows');\n        if (gRows.empty()) {\n            gRows = _chartBody.append('g').attr('class', 'rows axis');\n        }\n        var gRowsText = gRows.selectAll('text').data(rows.domain());\n        gRowsText.enter().append('text')\n              .attr('dy', 6)\n              .style('text-anchor', 'end')\n              .attr('x', 0)\n              .attr('dx', -2)\n              .on('click', _chart.yAxisOnClick())\n              .text(_chart.rowsLabel());\n        dc.transition(gRowsText, _chart.transitionDuration(), _chart.transitionDelay())\n              .text(_chart.rowsLabel())\n              .attr('y', function (d) { return rows(d) + boxHeight / 2; });\n        gRowsText.exit().remove();\n\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.box-group').each(function (d) {\n                if (_chart.isSelectedNode(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.box-group').each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when an individual cell is clicked in the heatmap.\n     * By default, filtering of the cell will be toggled.\n     * @method boxOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // default box on click handler\n     * chart.boxOnClick(function (d) {\n     *     var filter = d.key;\n     *     dc.events.trigger(function () {\n     *         _chart.filter(filter);\n     *         _chart.redrawGroup();\n     *     });\n     * });\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.boxOnClick = function (handler) {\n        if (!arguments.length) {\n            return _boxOnClick;\n        }\n        _boxOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when a column tick is clicked in the x axis.\n     * By default, if any cells in the column are unselected, the whole column will be selected,\n     * otherwise the whole column will be unselected.\n     * @method xAxisOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.xAxisOnClick = function (handler) {\n        if (!arguments.length) {\n            return _xAxisOnClick;\n        }\n        _xAxisOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when a row tick is clicked in the y axis.\n     * By default, if any cells in the row are unselected, the whole row will be selected,\n     * otherwise the whole row will be unselected.\n     * @method yAxisOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.yAxisOnClick = function (handler) {\n        if (!arguments.length) {\n            return _yAxisOnClick;\n        }\n        _yAxisOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the X border radius.  Set to 0 to get full rectangles.\n     * @method xBorderRadius\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Number} [xBorderRadius=6.75]\n     * @returns {Number|dc.heatMap}\n     */\n    _chart.xBorderRadius = function (xBorderRadius) {\n        if (!arguments.length) {\n            return _xBorderRadius;\n        }\n        _xBorderRadius = xBorderRadius;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the Y border radius.  Set to 0 to get full rectangles.\n     * @method yBorderRadius\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Number} [yBorderRadius=6.75]\n     * @returns {Number|dc.heatMap}\n     */\n    _chart.yBorderRadius = function (yBorderRadius) {\n        if (!arguments.length) {\n            return _yBorderRadius;\n        }\n        _yBorderRadius = yBorderRadius;\n        return _chart;\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n// https://github.com/d3/d3-plugins/blob/master/box/box.js\n(function () {\n\n    // Inspired by http://informationandvisualization.de/blog/box-plot\n    d3.box = function () {\n        var width = 1,\n            height = 1,\n            duration = 0,\n            delay = 0,\n            domain = null,\n            value = Number,\n            whiskers = boxWhiskers,\n            quartiles = boxQuartiles,\n            tickFormat = null;\n\n        // For each small multiple…\n        function box (g) {\n            g.each(function (d, i) {\n                d = d.map(value).sort(d3.ascending);\n                var g = d3.select(this),\n                    n = d.length,\n                    min = d[0],\n                    max = d[n - 1];\n\n                // Compute quartiles. Must return exactly 3 elements.\n                var quartileData = d.quartiles = quartiles(d);\n\n                // Compute whiskers. Must return exactly 2 elements, or null.\n                var whiskerIndices = whiskers && whiskers.call(this, d, i),\n                    whiskerData = whiskerIndices && whiskerIndices.map(function (i) { return d[i]; });\n\n                // Compute outliers. If no whiskers are specified, all data are 'outliers'.\n                // We compute the outliers as indices, so that we can join across transitions!\n                var outlierIndices = whiskerIndices ?\n                    d3.range(0, whiskerIndices[0]).concat(d3.range(whiskerIndices[1] + 1, n)) : d3.range(n);\n\n                // Compute the new x-scale.\n                var x1 = d3.scale.linear()\n                    .domain(domain && domain.call(this, d, i) || [min, max])\n                    .range([height, 0]);\n\n                // Retrieve the old x-scale, if this is an update.\n                var x0 = this.__chart__ || d3.scale.linear()\n                    .domain([0, Infinity])\n                    .range(x1.range());\n\n                // Stash the new scale.\n                this.__chart__ = x1;\n\n                // Note: the box, median, and box tick elements are fixed in number,\n                // so we only have to handle enter and update. In contrast, the outliers\n                // and other elements are variable, so we need to exit them! Variable\n                // elements also fade in and out.\n\n                // Update center line: the vertical line spanning the whiskers.\n                var center = g.selectAll('line.center')\n                    .data(whiskerData ? [whiskerData] : []);\n\n                center.enter().insert('line', 'rect')\n                    .attr('class', 'center')\n                    .attr('x1', width / 2)\n                    .attr('y1', function (d) { return x0(d[0]); })\n                    .attr('x2', width / 2)\n                    .attr('y2', function (d) { return x0(d[1]); })\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); });\n\n                center.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1)\n                    .attr('x1', width / 2)\n                    .attr('x2', width / 2)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); });\n\n                center.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1e-6)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); })\n                    .remove();\n\n                // Update innerquartile box.\n                var box = g.selectAll('rect.box')\n                    .data([quartileData]);\n\n                box.enter().append('rect')\n                    .attr('class', 'box')\n                    .attr('x', 0)\n                    .attr('y', function (d) { return x0(d[2]); })\n                    .attr('width', width)\n                    .attr('height', function (d) { return x0(d[0]) - x0(d[2]); })\n                  .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', function (d) { return x1(d[2]); })\n                    .attr('height', function (d) { return x1(d[0]) - x1(d[2]); });\n\n                box.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('width', width)\n                    .attr('y', function (d) { return x1(d[2]); })\n                    .attr('height', function (d) { return x1(d[0]) - x1(d[2]); });\n\n                // Update median line.\n                var medianLine = g.selectAll('line.median')\n                    .data([quartileData[1]]);\n\n                medianLine.enter().append('line')\n                    .attr('class', 'median')\n                    .attr('x1', 0)\n                    .attr('y1', x0)\n                    .attr('x2', width)\n                    .attr('y2', x0)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1);\n\n                medianLine.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('x1', 0)\n                    .attr('x2', width)\n                    .attr('y1', x1)\n                    .attr('y2', x1);\n\n                // Update whiskers.\n                var whisker = g.selectAll('line.whisker')\n                    .data(whiskerData || []);\n\n                whisker.enter().insert('line', 'circle, text')\n                    .attr('class', 'whisker')\n                    .attr('x1', 0)\n                    .attr('y1', x0)\n                    .attr('x2', width)\n                    .attr('y2', x0)\n                    .style('opacity', 1e-6)\n                  .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1);\n\n                whisker.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('x1', 0)\n                    .attr('x2', width)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1);\n\n                whisker.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1e-6)\n                    .remove();\n\n                // Update outliers.\n                var outlier = g.selectAll('circle.outlier')\n                    .data(outlierIndices, Number);\n\n                outlier.enter().insert('circle', 'text')\n                    .attr('class', 'outlier')\n                    .attr('r', 5)\n                    .attr('cx', width / 2)\n                    .attr('cy', function (i) { return x0(d[i]); })\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1);\n\n                outlier.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cx', width / 2)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1);\n\n                outlier.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1e-6)\n                    .remove();\n\n                // Compute the tick format.\n                var format = tickFormat || x1.tickFormat(8);\n\n                // Update box ticks.\n                var boxTick = g.selectAll('text.box')\n                    .data(quartileData);\n\n                boxTick.enter().append('text')\n                    .attr('class', 'box')\n                    .attr('dy', '.3em')\n                    .attr('dx', function (d, i) { return i & 1 ? 6 : -6; })\n                    .attr('x', function (d, i) { return i & 1 ? width : 0; })\n                    .attr('y', x0)\n                    .attr('text-anchor', function (d, i) { return i & 1 ? 'start' : 'end'; })\n                    .text(format)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1);\n\n                boxTick.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .text(format)\n                    .attr('x', function (d, i) { return i & 1 ? width : 0; })\n                    .attr('y', x1);\n\n                // Update whisker ticks. These are handled separately from the box\n                // ticks because they may or may not exist, and we want don't want\n                // to join box ticks pre-transition with whisker ticks post-.\n                var whiskerTick = g.selectAll('text.whisker')\n                    .data(whiskerData || []);\n\n                whiskerTick.enter().append('text')\n                    .attr('class', 'whisker')\n                    .attr('dy', '.3em')\n                    .attr('dx', 6)\n                    .attr('x', width)\n                    .attr('y', x0)\n                    .text(format)\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1)\n                    .style('opacity', 1);\n\n                whiskerTick.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .text(format)\n                    .attr('x', width)\n                    .attr('y', x1)\n                    .style('opacity', 1);\n\n                whiskerTick.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1)\n                    .style('opacity', 1e-6)\n                    .remove();\n            });\n            d3.timer.flush();\n        }\n\n        box.width = function (x) {\n            if (!arguments.length) {\n                return width;\n            }\n            width = x;\n            return box;\n        };\n\n        box.height = function (x) {\n            if (!arguments.length) {\n                return height;\n            }\n            height = x;\n            return box;\n        };\n\n        box.tickFormat = function (x) {\n            if (!arguments.length) {\n                return tickFormat;\n            }\n            tickFormat = x;\n            return box;\n        };\n\n        box.duration = function (x) {\n            if (!arguments.length) {\n                return duration;\n            }\n            duration = x;\n            return box;\n        };\n\n        box.domain = function (x) {\n            if (!arguments.length) {\n                return domain;\n            }\n            domain = x === null ? x : d3.functor(x);\n            return box;\n        };\n\n        box.value = function (x) {\n            if (!arguments.length) {\n                return value;\n            }\n            value = x;\n            return box;\n        };\n\n        box.whiskers = function (x) {\n            if (!arguments.length) {\n                return whiskers;\n            }\n            whiskers = x;\n            return box;\n        };\n\n        box.quartiles = function (x) {\n            if (!arguments.length) {\n                return quartiles;\n            }\n            quartiles = x;\n            return box;\n        };\n\n        return box;\n    };\n\n    function boxWhiskers (d) {\n        return [0, d.length - 1];\n    }\n\n    function boxQuartiles (d) {\n        return [\n            d3.quantile(d, 0.25),\n            d3.quantile(d, 0.5),\n            d3.quantile(d, 0.75)\n        ];\n    }\n\n})();\n\n\n/**\n * A box plot is a chart that depicts numerical data via their quartile ranges.\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/box-plot-time.html Box plot time example}\n * - {@link http://dc-js.github.io/dc.js/examples/box-plot.html Box plot example}\n * @class boxPlot\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a box plot under #chart-container1 element using the default global chart group\n * var boxPlot1 = dc.boxPlot('#chart-container1');\n * // create a box plot under #chart-container2 element using chart group A\n * var boxPlot2 = dc.boxPlot('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.boxPlot}\n */\ndc.boxPlot = function (parent, chartGroup) {\n    var _chart = dc.coordinateGridMixin({});\n\n    // Returns a function to compute the interquartile range.\n    function DEFAULT_WHISKERS_IQR (k) {\n        return function (d) {\n            var q1 = d.quartiles[0],\n                q3 = d.quartiles[2],\n                iqr = (q3 - q1) * k,\n                i = -1,\n                j = d.length;\n            do { ++i; } while (d[i] < q1 - iqr);\n            do { --j; } while (d[j] > q3 + iqr);\n            return [i, j];\n        };\n    }\n\n    var _whiskerIqrFactor = 1.5;\n    var _whiskersIqr = DEFAULT_WHISKERS_IQR;\n    var _whiskers = _whiskersIqr(_whiskerIqrFactor);\n\n    var _box = d3.box();\n    var _tickFormat = null;\n\n    var _boxWidth = function (innerChartWidth, xUnits) {\n        if (_chart.isOrdinal()) {\n            return _chart.x().rangeBand();\n        } else {\n            return innerChartWidth / (1 + _chart.boxPadding()) / xUnits;\n        }\n    };\n\n    // default padding to handle min/max whisker text\n    _chart.yAxisPadding(12);\n\n    // default to ordinal\n    _chart.x(d3.scale.ordinal());\n    _chart.xUnits(dc.units.ordinal);\n\n    // valueAccessor should return an array of values that can be coerced into numbers\n    // or if data is overloaded for a static array of arrays, it should be `Number`.\n    // Empty arrays are not included.\n    _chart.data(function (group) {\n        return group.all().map(function (d) {\n            d.map = function (accessor) { return accessor.call(d, d); };\n            return d;\n        }).filter(function (d) {\n            var values = _chart.valueAccessor()(d);\n            return values.length !== 0;\n        });\n    });\n\n    /**\n     * Get or set the spacing between boxes as a fraction of box size. Valid values are within 0-1.\n     * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n     * for a visual description of how the padding is applied.\n     * @method boxPadding\n     * @memberof dc.boxPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3.scale.ordinal.rangeBands}\n     * @param {Number} [padding=0.8]\n     * @returns {Number|dc.boxPlot}\n     */\n    _chart.boxPadding = _chart._rangeBandPadding;\n    _chart.boxPadding(0.8);\n\n    /**\n     * Get or set the outer padding on an ordinal box chart. This setting has no effect on non-ordinal charts\n     * or on charts with a custom {@link dc.boxPlot#boxWidth .boxWidth}. Will pad the width by\n     * `padding * barWidth` on each side of the chart.\n     * @method outerPadding\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Number} [padding=0.5]\n     * @returns {Number|dc.boxPlot}\n     */\n    _chart.outerPadding = _chart._outerRangeBandPadding;\n    _chart.outerPadding(0.5);\n\n    /**\n     * Get or set the numerical width of the boxplot box. The width may also be a function taking as\n     * parameters the chart width excluding the right and left margins, as well as the number of x\n     * units.\n     * @example\n     * // Using numerical parameter\n     * chart.boxWidth(10);\n     * // Using function\n     * chart.boxWidth((innerChartWidth, xUnits) { ... });\n     * @method boxWidth\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Number|Function} [boxWidth=0.5]\n     * @returns {Number|Function|dc.boxPlot}\n     */\n    _chart.boxWidth = function (boxWidth) {\n        if (!arguments.length) {\n            return _boxWidth;\n        }\n        _boxWidth = d3.functor(boxWidth);\n        return _chart;\n    };\n\n    var boxTransform = function (d, i) {\n        var xOffset = _chart.x()(_chart.keyAccessor()(d, i));\n        return 'translate(' + xOffset + ', 0)';\n    };\n\n    _chart._preprocessData = function () {\n        if (_chart.elasticX()) {\n            _chart.x().domain([]);\n        }\n    };\n\n    _chart.plotData = function () {\n        var _calculatedBoxWidth = _boxWidth(_chart.effectiveWidth(), _chart.xUnitCount());\n\n        _box.whiskers(_whiskers)\n            .width(_calculatedBoxWidth)\n            .height(_chart.effectiveHeight())\n            .value(_chart.valueAccessor())\n            .domain(_chart.y().domain())\n            .duration(_chart.transitionDuration())\n            .tickFormat(_tickFormat);\n\n        var boxesG = _chart.chartBodyG().selectAll('g.box').data(_chart.data(), _chart.keyAccessor());\n\n        renderBoxes(boxesG);\n        updateBoxes(boxesG);\n        removeBoxes(boxesG);\n\n        _chart.fadeDeselectedArea();\n    };\n\n    function renderBoxes (boxesG) {\n        var boxesGEnter = boxesG.enter().append('g');\n\n        boxesGEnter\n            .attr('class', 'box')\n            .attr('transform', boxTransform)\n            .call(_box)\n            .on('click', function (d) {\n                _chart.filter(_chart.keyAccessor()(d));\n                _chart.redrawGroup();\n            });\n    }\n\n    function updateBoxes (boxesG) {\n        dc.transition(boxesG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', boxTransform)\n            .call(_box)\n            .each(function () {\n                d3.select(this).select('rect.box').attr('fill', _chart.getColor);\n            });\n    }\n\n    function removeBoxes (boxesG) {\n        boxesG.exit().remove().call(_box);\n    }\n\n    _chart.fadeDeselectedArea = function () {\n        if (_chart.hasFilter()) {\n            if (_chart.isOrdinal()) {\n                _chart.g().selectAll('g.box').each(function (d) {\n                    if (_chart.isSelectedNode(d)) {\n                        _chart.highlightSelected(this);\n                    } else {\n                        _chart.fadeDeselected(this);\n                    }\n                });\n            } else {\n                var extent = _chart.brush().extent();\n                var start = extent[0];\n                var end = extent[1];\n                var keyAccessor = _chart.keyAccessor();\n                _chart.g().selectAll('g.box').each(function (d) {\n                    var key = keyAccessor(d);\n                    if (key < start || key >= end) {\n                        _chart.fadeDeselected(this);\n                    } else {\n                        _chart.highlightSelected(this);\n                    }\n                });\n            }\n        } else {\n            _chart.g().selectAll('g.box').each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(_chart.keyAccessor()(d));\n    };\n\n    _chart.yAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return d3.min(_chart.valueAccessor()(e));\n        });\n        return dc.utils.subtract(min, _chart.yAxisPadding());\n    };\n\n    _chart.yAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return d3.max(_chart.valueAccessor()(e));\n        });\n        return dc.utils.add(max, _chart.yAxisPadding());\n    };\n\n    /**\n     * Set the numerical format of the boxplot median, whiskers and quartile labels. Defaults to\n     * integer formatting.\n     * @example\n     * // format ticks to 2 decimal places\n     * chart.tickFormat(d3.format('.2f'));\n     * @method tickFormat\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Function} [tickFormat]\n     * @returns {Number|Function|dc.boxPlot}\n     */\n    _chart.tickFormat = function (tickFormat) {\n        if (!arguments.length) {\n            return _tickFormat;\n        }\n        _tickFormat = tickFormat;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The select menu is a simple widget designed to filter a dimension by selecting an option from\n * an HTML `<select/>` menu. The menu can be optionally turned into a multiselect.\n * @class selectMenu\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * // create a select menu under #select-container using the default global chart group\n * var select = dc.selectMenu('#select-container')\n *                .dimension(states)\n *                .group(stateGroup);\n * // the option text can be set via the title() function\n * // by default the option text is '`key`: `value`'\n * select.title(function (d){\n *     return 'STATE: ' + d.key;\n * })\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this widget should be placed in.\n * Interaction with the widget will only trigger events and redraws within its group.\n * @returns {selectMenu}\n **/\ndc.selectMenu = function (parent, chartGroup) {\n    var SELECT_CSS_CLASS = 'dc-select-menu';\n    var OPTION_CSS_CLASS = 'dc-select-option';\n\n    var _chart = dc.baseMixin({});\n\n    var _select;\n    var _promptText = 'Select all';\n    var _multiple = false;\n    var _promptValue = null;\n    var _numberVisible = null;\n    var _order = function (a, b) {\n        return _chart.keyAccessor()(a) > _chart.keyAccessor()(b) ?\n             1 : _chart.keyAccessor()(b) > _chart.keyAccessor()(a) ?\n            -1 : 0;\n    };\n\n    var _filterDisplayed = function (d) {\n        return _chart.valueAccessor()(d) > 0;\n    };\n\n    _chart.data(function (group) {\n        return group.all().filter(_filterDisplayed);\n    });\n\n    _chart._doRender = function () {\n        _chart.select('select').remove();\n        _select = _chart.root().append('select')\n                        .classed(SELECT_CSS_CLASS, true);\n        _select.append('option').text(_promptText).attr('value', '');\n\n        _chart._doRedraw();\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        setAttributes();\n        renderOptions();\n        // select the option(s) corresponding to current filter(s)\n        if (_chart.hasFilter() && _multiple) {\n            _select.selectAll('option')\n                .property('selected', function (d) {\n                    return d && _chart.filters().indexOf(String(_chart.keyAccessor()(d))) >= 0;\n                });\n        } else if (_chart.hasFilter()) {\n            _select.property('value', _chart.filter());\n        } else {\n            _select.property('value', '');\n        }\n        return _chart;\n    };\n\n    function renderOptions () {\n        var options = _select.selectAll('option.' + OPTION_CSS_CLASS)\n          .data(_chart.data(), function (d) { return _chart.keyAccessor()(d); });\n\n        options.enter()\n              .append('option')\n              .classed(OPTION_CSS_CLASS, true)\n              .attr('value', function (d) { return _chart.keyAccessor()(d); });\n\n        options.text(_chart.title());\n        options.exit().remove();\n        _select.selectAll('option.' + OPTION_CSS_CLASS).sort(_order);\n\n        _select.on('change', onChange);\n        return options;\n    }\n\n    function onChange (d, i) {\n        var values;\n        var target = d3.event.target;\n        if (target.selectedOptions) {\n            var selectedOptions = Array.prototype.slice.call(target.selectedOptions);\n            values = selectedOptions.map(function (d) {\n                return d.value;\n            });\n        } else { // IE and other browsers do not support selectedOptions\n            // adapted from this polyfill: https://gist.github.com/brettz9/4212217\n            var options = [].slice.call(d3.event.target.options);\n            values = options.filter(function (option) {\n                return option.selected;\n            }).map(function (option) {\n                return option.value;\n            });\n        }\n        // console.log(values);\n        // check if only prompt option is selected\n        if (values.length === 1 && values[0] === '') {\n            values = _promptValue || null;\n        } else if (!_multiple && values.length === 1) {\n            values = values[0];\n        }\n        _chart.onChange(values);\n    }\n\n    _chart.onChange = function (val) {\n        if (val && _multiple) {\n            _chart.replaceFilter([val]);\n        } else if (val) {\n            _chart.replaceFilter(val);\n        } else {\n            _chart.filterAll();\n        }\n        dc.events.trigger(function () {\n            _chart.redrawGroup();\n        });\n    };\n\n    function setAttributes () {\n        if (_multiple) {\n            _select.attr('multiple', true);\n        } else {\n            _select.attr('multiple', null);\n        }\n        if (_numberVisible !== null) {\n            _select.attr('size', _numberVisible);\n        } else {\n            _select.attr('size', null);\n        }\n    }\n\n    /**\n     * Get or set the function that controls the ordering of option tags in the\n     * select menu. By default options are ordered by the group key in ascending\n     * order.\n     * @name order\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {Function} [order]\n     * @example\n     * // order by the group's value\n     * chart.order(function (a,b) {\n     *     return a.value > b.value ? 1 : b.value > a.value ? -1 : 0;\n     * });\n     **/\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    /**\n     * Get or set the text displayed in the options used to prompt selection.\n     * @name promptText\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {String} [promptText='Select all']\n     * @example\n     * chart.promptText('All states');\n     **/\n    _chart.promptText = function (_) {\n        if (!arguments.length) {\n            return _promptText;\n        }\n        _promptText = _;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that filters option tags prior to display. By default options\n     * with a value of < 1 are not displayed.\n     * @name filterDisplayed\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {function} [filterDisplayed]\n     * @example\n     * // display all options override the `filterDisplayed` function:\n     * chart.filterDisplayed(function () {\n     *     return true;\n     * });\n     **/\n    _chart.filterDisplayed = function (filterDisplayed) {\n        if (!arguments.length) {\n            return _filterDisplayed;\n        }\n        _filterDisplayed = filterDisplayed;\n        return _chart;\n    };\n\n    /**\n     * Controls the type of select menu. Setting it to true converts the underlying\n     * HTML tag into a multiple select.\n     * @name multiple\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {boolean} [multiple=false]\n     * @example\n     * chart.multiple(true);\n     **/\n    _chart.multiple = function (multiple) {\n        if (!arguments.length) {\n            return _multiple;\n        }\n        _multiple = multiple;\n\n        return _chart;\n    };\n\n    /**\n     * Controls the default value to be used for\n     * [dimension.filter](https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter)\n     * when only the prompt value is selected. If `null` (the default), no filtering will occur when\n     * just the prompt is selected.\n     * @name promptValue\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {?*} [promptValue=null]\n     **/\n    _chart.promptValue = function (promptValue) {\n        if (!arguments.length) {\n            return _promptValue;\n        }\n        _promptValue = promptValue;\n\n        return _chart;\n    };\n\n    /**\n     * Controls the number of items to show in the select menu, when `.multiple()` is true. This\n     * controls the [`size` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#Attributes) of\n     * the `select` element. If `null` (the default), uses the browser's default height.\n     * @name numberItems\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {?number} [numberVisible=null]\n     * @example\n     * chart.numberVisible(10);\n     **/\n    _chart.numberVisible = function (numberVisible) {\n        if (!arguments.length) {\n            return _numberVisible;\n        }\n        _numberVisible = numberVisible;\n\n        return _chart;\n    };\n\n    _chart.size = dc.logger.deprecate(_chart.numberVisible, 'selectMenu.size is ambiguous - use numberVisible instead');\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n// Renamed functions\n\ndc.abstractBubbleChart = dc.bubbleMixin;\ndc.baseChart = dc.baseMixin;\ndc.capped = dc.capMixin;\ndc.colorChart = dc.colorMixin;\ndc.coordinateGridChart = dc.coordinateGridMixin;\ndc.marginable = dc.marginMixin;\ndc.stackableChart = dc.stackMixin;\n\n// Expose d3 and crossfilter, so that clients in browserify\n// case can obtain them if they need them.\ndc.d3 = d3;\ndc.crossfilter = crossfilter;\n\nreturn dc;}\n    if(typeof define === \"function\" && define.amd) {\n        define([\"d3\", \"crossfilter2\"], _dc);\n    } else if(typeof module === \"object\" && module.exports) {\n        var _d3 = require('d3');\n        var _crossfilter = require('crossfilter2');\n        // When using npm + browserify, 'crossfilter' is a function,\n        // since package.json specifies index.js as main function, and it\n        // does special handling. When using bower + browserify,\n        // there's no main in bower.json (in fact, there's no bower.json),\n        // so we need to fix it.\n        if (typeof _crossfilter !== \"function\") {\n            _crossfilter = _crossfilter.crossfilter;\n        }\n        module.exports = _dc(_d3, _crossfilter);\n    } else {\n        this.dc = _dc(d3, crossfilter);\n    }\n}\n)();\n\n//# sourceMappingURL=dc.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dc/dc.js\n// module id = 290\n// module chunks = 0","!function() {\n  var d3 = {\n    version: \"3.5.17\"\n  };\n  var d3_arraySlice = [].slice, d3_array = function(list) {\n    return d3_arraySlice.call(list);\n  };\n  var d3_document = this.document;\n  function d3_documentElement(node) {\n    return node && (node.ownerDocument || node.document || node).documentElement;\n  }\n  function d3_window(node) {\n    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n  }\n  if (d3_document) {\n    try {\n      d3_array(d3_document.documentElement.childNodes)[0].nodeType;\n    } catch (e) {\n      d3_array = function(list) {\n        var i = list.length, array = new Array(i);\n        while (i--) array[i] = list[i];\n        return array;\n      };\n    }\n  }\n  if (!Date.now) Date.now = function() {\n    return +new Date();\n  };\n  if (d3_document) {\n    try {\n      d3_document.createElement(\"DIV\").style.setProperty(\"opacity\", 0, \"\");\n    } catch (error) {\n      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n      d3_element_prototype.setAttribute = function(name, value) {\n        d3_element_setAttribute.call(this, name, value + \"\");\n      };\n      d3_element_prototype.setAttributeNS = function(space, local, value) {\n        d3_element_setAttributeNS.call(this, space, local, value + \"\");\n      };\n      d3_style_prototype.setProperty = function(name, value, priority) {\n        d3_style_setProperty.call(this, name, value + \"\", priority);\n      };\n    }\n  }\n  d3.ascending = d3_ascending;\n  function d3_ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n  d3.descending = function(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  };\n  d3.min = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;\n    }\n    return a;\n  };\n  d3.max = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;\n    }\n    return a;\n  };\n  d3.extent = function(array, f) {\n    var i = -1, n = array.length, a, b, c;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n    return [ a, c ];\n  };\n  function d3_number(x) {\n    return x === null ? NaN : +x;\n  }\n  function d3_numeric(x) {\n    return !isNaN(x);\n  }\n  d3.sum = function(array, f) {\n    var s = 0, n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = +array[i])) s += a;\n    } else {\n      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n    }\n    return s;\n  };\n  d3.mean = function(array, f) {\n    var s = 0, n = array.length, a, i = -1, j = n;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;\n    }\n    if (j) return s / j;\n  };\n  d3.quantile = function(values, p) {\n    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;\n    return e ? v + e * (values[h] - v) : v;\n  };\n  d3.median = function(array, f) {\n    var numbers = [], n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n    }\n    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n  };\n  d3.variance = function(array, f) {\n    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    } else {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n    if (j > 1) return s / (j - 1);\n  };\n  d3.deviation = function() {\n    var v = d3.variance.apply(this, arguments);\n    return v ? Math.sqrt(v) : v;\n  };\n  function d3_bisector(compare) {\n    return {\n      left: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n  var d3_bisect = d3_bisector(d3_ascending);\n  d3.bisectLeft = d3_bisect.left;\n  d3.bisect = d3.bisectRight = d3_bisect.right;\n  d3.bisector = function(f) {\n    return d3_bisector(f.length === 1 ? function(d, x) {\n      return d3_ascending(f(d), x);\n    } : f);\n  };\n  d3.shuffle = function(array, i0, i1) {\n    if ((m = arguments.length) < 3) {\n      i1 = array.length;\n      if (m < 2) i0 = 0;\n    }\n    var m = i1 - i0, t, i;\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n    }\n    return array;\n  };\n  d3.permute = function(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  };\n  d3.pairs = function(array) {\n    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];\n    return pairs;\n  };\n  d3.transpose = function(matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  };\n  function d3_transposeLength(d) {\n    return d.length;\n  }\n  d3.zip = function() {\n    return d3.transpose(arguments);\n  };\n  d3.keys = function(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  };\n  d3.values = function(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  };\n  d3.entries = function(map) {\n    var entries = [];\n    for (var key in map) entries.push({\n      key: key,\n      value: map[key]\n    });\n    return entries;\n  };\n  d3.merge = function(arrays) {\n    var n = arrays.length, m, i = -1, j = 0, merged, array;\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n    return merged;\n  };\n  var abs = Math.abs;\n  d3.range = function(start, stop, step) {\n    if (arguments.length < 3) {\n      step = 1;\n      if (arguments.length < 2) {\n        stop = start;\n        start = 0;\n      }\n    }\n    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n    start *= k, stop *= k, step *= k;\n    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n    return range;\n  };\n  function d3_range_integerScale(x) {\n    var k = 1;\n    while (x * k % 1) k *= 10;\n    return k;\n  }\n  function d3_class(ctor, properties) {\n    for (var key in properties) {\n      Object.defineProperty(ctor.prototype, key, {\n        value: properties[key],\n        enumerable: false\n      });\n    }\n  }\n  d3.map = function(object, f) {\n    var map = new d3_Map();\n    if (object instanceof d3_Map) {\n      object.forEach(function(key, value) {\n        map.set(key, value);\n      });\n    } else if (Array.isArray(object)) {\n      var i = -1, n = object.length, o;\n      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);\n    } else {\n      for (var key in object) map.set(key, object[key]);\n    }\n    return map;\n  };\n  function d3_Map() {\n    this._ = Object.create(null);\n  }\n  var d3_map_proto = \"__proto__\", d3_map_zero = \"\\x00\";\n  d3_class(d3_Map, {\n    has: d3_map_has,\n    get: function(key) {\n      return this._[d3_map_escape(key)];\n    },\n    set: function(key, value) {\n      return this._[d3_map_escape(key)] = value;\n    },\n    remove: d3_map_remove,\n    keys: d3_map_keys,\n    values: function() {\n      var values = [];\n      for (var key in this._) values.push(this._[key]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var key in this._) entries.push({\n        key: d3_map_unescape(key),\n        value: this._[key]\n      });\n      return entries;\n    },\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);\n    }\n  });\n  function d3_map_escape(key) {\n    return (key += \"\") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n  }\n  function d3_map_unescape(key) {\n    return (key += \"\")[0] === d3_map_zero ? key.slice(1) : key;\n  }\n  function d3_map_has(key) {\n    return d3_map_escape(key) in this._;\n  }\n  function d3_map_remove(key) {\n    return (key = d3_map_escape(key)) in this._ && delete this._[key];\n  }\n  function d3_map_keys() {\n    var keys = [];\n    for (var key in this._) keys.push(d3_map_unescape(key));\n    return keys;\n  }\n  function d3_map_size() {\n    var size = 0;\n    for (var key in this._) ++size;\n    return size;\n  }\n  function d3_map_empty() {\n    for (var key in this._) return false;\n    return true;\n  }\n  d3.nest = function() {\n    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;\n    function map(mapType, array, depth) {\n      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n          values.push(object);\n        } else {\n          valuesByKey.set(keyValue, [ object ]);\n        }\n      }\n      if (mapType) {\n        object = mapType();\n        setter = function(keyValue, values) {\n          object.set(keyValue, map(mapType, values, depth));\n        };\n      } else {\n        object = {};\n        setter = function(keyValue, values) {\n          object[keyValue] = map(mapType, values, depth);\n        };\n      }\n      valuesByKey.forEach(setter);\n      return object;\n    }\n    function entries(map, depth) {\n      if (depth >= keys.length) return map;\n      var array = [], sortKey = sortKeys[depth++];\n      map.forEach(function(key, keyMap) {\n        array.push({\n          key: key,\n          values: entries(keyMap, depth)\n        });\n      });\n      return sortKey ? array.sort(function(a, b) {\n        return sortKey(a.key, b.key);\n      }) : array;\n    }\n    nest.map = function(array, mapType) {\n      return map(mapType, array, 0);\n    };\n    nest.entries = function(array) {\n      return entries(map(d3.map, array, 0), 0);\n    };\n    nest.key = function(d) {\n      keys.push(d);\n      return nest;\n    };\n    nest.sortKeys = function(order) {\n      sortKeys[keys.length - 1] = order;\n      return nest;\n    };\n    nest.sortValues = function(order) {\n      sortValues = order;\n      return nest;\n    };\n    nest.rollup = function(f) {\n      rollup = f;\n      return nest;\n    };\n    return nest;\n  };\n  d3.set = function(array) {\n    var set = new d3_Set();\n    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);\n    return set;\n  };\n  function d3_Set() {\n    this._ = Object.create(null);\n  }\n  d3_class(d3_Set, {\n    has: d3_map_has,\n    add: function(key) {\n      this._[d3_map_escape(key += \"\")] = true;\n      return key;\n    },\n    remove: d3_map_remove,\n    values: d3_map_keys,\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key));\n    }\n  });\n  d3.behavior = {};\n  function d3_identity(d) {\n    return d;\n  }\n  d3.rebind = function(target, source) {\n    var i = 1, n = arguments.length, method;\n    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n    return target;\n  };\n  function d3_rebind(target, source, method) {\n    return function() {\n      var value = method.apply(source, arguments);\n      return value === source ? target : value;\n    };\n  }\n  function d3_vendorSymbol(object, name) {\n    if (name in object) return name;\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {\n      var prefixName = d3_vendorPrefixes[i] + name;\n      if (prefixName in object) return prefixName;\n    }\n  }\n  var d3_vendorPrefixes = [ \"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\" ];\n  function d3_noop() {}\n  d3.dispatch = function() {\n    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    return dispatch;\n  };\n  function d3_dispatch() {}\n  d3_dispatch.prototype.on = function(type, listener) {\n    var i = type.indexOf(\".\"), name = \"\";\n    if (i >= 0) {\n      name = type.slice(i + 1);\n      type = type.slice(0, i);\n    }\n    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);\n    if (arguments.length === 2) {\n      if (listener == null) for (type in this) {\n        if (this.hasOwnProperty(type)) this[type].on(name, null);\n      }\n      return this;\n    }\n  };\n  function d3_dispatch_event(dispatch) {\n    var listeners = [], listenerByName = new d3_Map();\n    function event() {\n      var z = listeners, i = -1, n = z.length, l;\n      while (++i < n) if (l = z[i].on) l.apply(this, arguments);\n      return dispatch;\n    }\n    event.on = function(name, listener) {\n      var l = listenerByName.get(name), i;\n      if (arguments.length < 2) return l && l.on;\n      if (l) {\n        l.on = null;\n        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n        listenerByName.remove(name);\n      }\n      if (listener) listeners.push(listenerByName.set(name, {\n        on: listener\n      }));\n      return dispatch;\n    };\n    return event;\n  }\n  d3.event = null;\n  function d3_eventPreventDefault() {\n    d3.event.preventDefault();\n  }\n  function d3_eventSource() {\n    var e = d3.event, s;\n    while (s = e.sourceEvent) e = s;\n    return e;\n  }\n  function d3_eventDispatch(target) {\n    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    dispatch.of = function(thiz, argumentz) {\n      return function(e1) {\n        try {\n          var e0 = e1.sourceEvent = d3.event;\n          e1.target = target;\n          d3.event = e1;\n          dispatch[e1.type].apply(thiz, argumentz);\n        } finally {\n          d3.event = e0;\n        }\n      };\n    };\n    return dispatch;\n  }\n  d3.requote = function(s) {\n    return s.replace(d3_requote_re, \"\\\\$&\");\n  };\n  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  var d3_subclass = {}.__proto__ ? function(object, prototype) {\n    object.__proto__ = prototype;\n  } : function(object, prototype) {\n    for (var property in prototype) object[property] = prototype[property];\n  };\n  function d3_selection(groups) {\n    d3_subclass(groups, d3_selectionPrototype);\n    return groups;\n  }\n  var d3_select = function(s, n) {\n    return n.querySelector(s);\n  }, d3_selectAll = function(s, n) {\n    return n.querySelectorAll(s);\n  }, d3_selectMatches = function(n, s) {\n    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, \"matchesSelector\")];\n    d3_selectMatches = function(n, s) {\n      return d3_selectMatcher.call(n, s);\n    };\n    return d3_selectMatches(n, s);\n  };\n  if (typeof Sizzle === \"function\") {\n    d3_select = function(s, n) {\n      return Sizzle(s, n)[0] || null;\n    };\n    d3_selectAll = Sizzle;\n    d3_selectMatches = Sizzle.matchesSelector;\n  }\n  d3.selection = function() {\n    return d3.select(d3_document.documentElement);\n  };\n  var d3_selectionPrototype = d3.selection.prototype = [];\n  d3_selectionPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, group, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selector(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_select(selector, this);\n    };\n  }\n  d3_selectionPrototype.selectAll = function(selector) {\n    var subgroups = [], subgroup, node;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n          subgroup.parentNode = node;\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selectorAll(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_selectAll(selector, this);\n    };\n  }\n  var d3_nsXhtml = \"http://www.w3.org/1999/xhtml\";\n  var d3_nsPrefix = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: d3_nsXhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n  d3.ns = {\n    prefix: d3_nsPrefix,\n    qualify: function(name) {\n      var i = name.indexOf(\":\"), prefix = name;\n      if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n        space: d3_nsPrefix[prefix],\n        local: name\n      } : name;\n    }\n  };\n  d3_selectionPrototype.attr = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node();\n        name = d3.ns.qualify(name);\n        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n      }\n      for (value in name) this.each(d3_selection_attr(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_attr(name, value));\n  };\n  function d3_selection_attr(name, value) {\n    name = d3.ns.qualify(name);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrConstant() {\n      this.setAttribute(name, value);\n    }\n    function attrConstantNS() {\n      this.setAttributeNS(name.space, name.local, value);\n    }\n    function attrFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);\n    }\n    function attrFunctionNS() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n    }\n    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n  }\n  function d3_collapse(s) {\n    return s.trim().replace(/\\s+/g, \" \");\n  }\n  d3_selectionPrototype.classed = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;\n        if (value = node.classList) {\n          while (++i < n) if (!value.contains(name[i])) return false;\n        } else {\n          value = node.getAttribute(\"class\");\n          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;\n        }\n        return true;\n      }\n      for (value in name) this.each(d3_selection_classed(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_classed(name, value));\n  };\n  function d3_selection_classedRe(name) {\n    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");\n  }\n  function d3_selection_classes(name) {\n    return (name + \"\").trim().split(/^|\\s+/);\n  }\n  function d3_selection_classed(name, value) {\n    name = d3_selection_classes(name).map(d3_selection_classedName);\n    var n = name.length;\n    function classedConstant() {\n      var i = -1;\n      while (++i < n) name[i](this, value);\n    }\n    function classedFunction() {\n      var i = -1, x = value.apply(this, arguments);\n      while (++i < n) name[i](this, x);\n    }\n    return typeof value === \"function\" ? classedFunction : classedConstant;\n  }\n  function d3_selection_classedName(name) {\n    var re = d3_selection_classedRe(name);\n    return function(node, value) {\n      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n      var c = node.getAttribute(\"class\") || \"\";\n      if (value) {\n        re.lastIndex = 0;\n        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));\n      } else {\n        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));\n      }\n    };\n  }\n  d3_selectionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));\n        return this;\n      }\n      if (n < 2) {\n        var node = this.node();\n        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);\n      }\n      priority = \"\";\n    }\n    return this.each(d3_selection_style(name, value, priority));\n  };\n  function d3_selection_style(name, value, priority) {\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleConstant() {\n      this.style.setProperty(name, value, priority);\n    }\n    function styleFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);\n    }\n    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;\n  }\n  d3_selectionPrototype.property = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") return this.node()[name];\n      for (value in name) this.each(d3_selection_property(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_property(name, value));\n  };\n  function d3_selection_property(name, value) {\n    function propertyNull() {\n      delete this[name];\n    }\n    function propertyConstant() {\n      this[name] = value;\n    }\n    function propertyFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) delete this[name]; else this[name] = x;\n    }\n    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;\n  }\n  d3_selectionPrototype.text = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.textContent = \"\";\n    } : function() {\n      this.textContent = value;\n    }) : this.node().textContent;\n  };\n  d3_selectionPrototype.html = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.innerHTML = \"\";\n    } : function() {\n      this.innerHTML = value;\n    }) : this.node().innerHTML;\n  };\n  d3_selectionPrototype.append = function(name) {\n    name = d3_selection_creator(name);\n    return this.select(function() {\n      return this.appendChild(name.apply(this, arguments));\n    });\n  };\n  function d3_selection_creator(name) {\n    function create() {\n      var document = this.ownerDocument, namespace = this.namespaceURI;\n      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);\n    }\n    function createNS() {\n      return this.ownerDocument.createElementNS(name.space, name.local);\n    }\n    return typeof name === \"function\" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;\n  }\n  d3_selectionPrototype.insert = function(name, before) {\n    name = d3_selection_creator(name);\n    before = d3_selection_selector(before);\n    return this.select(function() {\n      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n    });\n  };\n  d3_selectionPrototype.remove = function() {\n    return this.each(d3_selectionRemove);\n  };\n  function d3_selectionRemove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n  d3_selectionPrototype.data = function(value, key) {\n    var i = -1, n = this.length, group, node;\n    if (!arguments.length) {\n      value = new Array(n = (group = this[0]).length);\n      while (++i < n) {\n        if (node = group[i]) {\n          value[i] = node.__data__;\n        }\n      }\n      return value;\n    }\n    function bind(group, groupData) {\n      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n      if (key) {\n        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;\n        for (i = -1; ++i < n; ) {\n          if (node = group[i]) {\n            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {\n              exitNodes[i] = node;\n            } else {\n              nodeByKeyValue.set(keyValue, node);\n            }\n            keyValues[i] = keyValue;\n          }\n        }\n        for (i = -1; ++i < m; ) {\n          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          } else if (node !== true) {\n            updateNodes[i] = node;\n            node.__data__ = nodeData;\n          }\n          nodeByKeyValue.set(keyValue, true);\n        }\n        for (i = -1; ++i < n; ) {\n          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {\n            exitNodes[i] = group[i];\n          }\n        }\n      } else {\n        for (i = -1; ++i < n0; ) {\n          node = group[i];\n          nodeData = groupData[i];\n          if (node) {\n            node.__data__ = nodeData;\n            updateNodes[i] = node;\n          } else {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          }\n        }\n        for (;i < m; ++i) {\n          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n        }\n        for (;i < n; ++i) {\n          exitNodes[i] = group[i];\n        }\n      }\n      enterNodes.update = updateNodes;\n      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n      enter.push(enterNodes);\n      update.push(updateNodes);\n      exit.push(exitNodes);\n    }\n    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);\n    if (typeof value === \"function\") {\n      while (++i < n) {\n        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n      }\n    } else {\n      while (++i < n) {\n        bind(group = this[i], value);\n      }\n    }\n    update.enter = function() {\n      return enter;\n    };\n    update.exit = function() {\n      return exit;\n    };\n    return update;\n  };\n  function d3_selection_dataNode(data) {\n    return {\n      __data__: data\n    };\n  }\n  d3_selectionPrototype.datum = function(value) {\n    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");\n  };\n  d3_selectionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_filter(selector) {\n    return function() {\n      return d3_selectMatches(this, selector);\n    };\n  }\n  d3_selectionPrototype.order = function() {\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n    return this;\n  };\n  d3_selectionPrototype.sort = function(comparator) {\n    comparator = d3_selection_sortComparator.apply(this, arguments);\n    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);\n    return this.order();\n  };\n  function d3_selection_sortComparator(comparator) {\n    if (!arguments.length) comparator = d3_ascending;\n    return function(a, b) {\n      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;\n    };\n  }\n  d3_selectionPrototype.each = function(callback) {\n    return d3_selection_each(this, function(node, i, j) {\n      callback.call(node, node.__data__, i, j);\n    });\n  };\n  function d3_selection_each(groups, callback) {\n    for (var j = 0, m = groups.length; j < m; j++) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {\n        if (node = group[i]) callback(node, i, j);\n      }\n    }\n    return groups;\n  }\n  d3_selectionPrototype.call = function(callback) {\n    var args = d3_array(arguments);\n    callback.apply(args[0] = this, args);\n    return this;\n  };\n  d3_selectionPrototype.empty = function() {\n    return !this.node();\n  };\n  d3_selectionPrototype.node = function() {\n    for (var j = 0, m = this.length; j < m; j++) {\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n    return null;\n  };\n  d3_selectionPrototype.size = function() {\n    var n = 0;\n    d3_selection_each(this, function() {\n      ++n;\n    });\n    return n;\n  };\n  function d3_selection_enter(selection) {\n    d3_subclass(selection, d3_selection_enterPrototype);\n    return selection;\n  }\n  var d3_selection_enterPrototype = [];\n  d3.selection.enter = d3_selection_enter;\n  d3.selection.enter.prototype = d3_selection_enterPrototype;\n  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n  d3_selection_enterPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, upgroup, group, node;\n    for (var j = -1, m = this.length; ++j < m; ) {\n      upgroup = (group = this[j]).update;\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = group.parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n          subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  d3_selection_enterPrototype.insert = function(name, before) {\n    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);\n    return d3_selectionPrototype.insert.call(this, name, before);\n  };\n  function d3_selection_enterInsertBefore(enter) {\n    var i0, j0;\n    return function(d, i, j) {\n      var group = enter[j].update, n = group.length, node;\n      if (j != j0) j0 = j, i0 = 0;\n      if (i >= i0) i0 = i + 1;\n      while (!(node = group[i0]) && ++i0 < n) ;\n      return node;\n    };\n  }\n  d3.select = function(node) {\n    var group;\n    if (typeof node === \"string\") {\n      group = [ d3_select(node, d3_document) ];\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = [ node ];\n      group.parentNode = d3_documentElement(node);\n    }\n    return d3_selection([ group ]);\n  };\n  d3.selectAll = function(nodes) {\n    var group;\n    if (typeof nodes === \"string\") {\n      group = d3_array(d3_selectAll(nodes, d3_document));\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = d3_array(nodes);\n      group.parentNode = null;\n    }\n    return d3_selection([ group ]);\n  };\n  d3_selectionPrototype.on = function(type, listener, capture) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof type !== \"string\") {\n        if (n < 2) listener = false;\n        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));\n        return this;\n      }\n      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;\n      capture = false;\n    }\n    return this.each(d3_selection_on(type, listener, capture));\n  };\n  function d3_selection_on(type, listener, capture) {\n    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;\n    if (i > 0) type = type.slice(0, i);\n    var filter = d3_selection_onFilters.get(type);\n    if (filter) type = filter, wrap = d3_selection_onFilter;\n    function onRemove() {\n      var l = this[name];\n      if (l) {\n        this.removeEventListener(type, l, l.$);\n        delete this[name];\n      }\n    }\n    function onAdd() {\n      var l = wrap(listener, d3_array(arguments));\n      onRemove.call(this);\n      this.addEventListener(type, this[name] = l, l.$ = capture);\n      l._ = listener;\n    }\n    function removeAll() {\n      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;\n      for (var name in this) {\n        if (match = name.match(re)) {\n          var l = this[name];\n          this.removeEventListener(match[1], l, l.$);\n          delete this[name];\n        }\n      }\n    }\n    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n  }\n  var d3_selection_onFilters = d3.map({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n  });\n  if (d3_document) {\n    d3_selection_onFilters.forEach(function(k) {\n      if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);\n    });\n  }\n  function d3_selection_onListener(listener, argumentz) {\n    return function(e) {\n      var o = d3.event;\n      d3.event = e;\n      argumentz[0] = this.__data__;\n      try {\n        listener.apply(this, argumentz);\n      } finally {\n        d3.event = o;\n      }\n    };\n  }\n  function d3_selection_onFilter(listener, argumentz) {\n    var l = d3_selection_onListener(listener, argumentz);\n    return function(e) {\n      var target = this, related = e.relatedTarget;\n      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {\n        l.call(target, e);\n      }\n    };\n  }\n  var d3_event_dragSelect, d3_event_dragId = 0;\n  function d3_event_dragSuppress(node) {\n    var name = \".dragsuppress-\" + ++d3_event_dragId, click = \"click\" + name, w = d3.select(d3_window(node)).on(\"touchmove\" + name, d3_eventPreventDefault).on(\"dragstart\" + name, d3_eventPreventDefault).on(\"selectstart\" + name, d3_eventPreventDefault);\n    if (d3_event_dragSelect == null) {\n      d3_event_dragSelect = \"onselectstart\" in node ? false : d3_vendorSymbol(node.style, \"userSelect\");\n    }\n    if (d3_event_dragSelect) {\n      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];\n      style[d3_event_dragSelect] = \"none\";\n    }\n    return function(suppressClick) {\n      w.on(name, null);\n      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n      if (suppressClick) {\n        var off = function() {\n          w.on(click, null);\n        };\n        w.on(click, function() {\n          d3_eventPreventDefault();\n          off();\n        }, true);\n        setTimeout(off, 0);\n      }\n    };\n  }\n  d3.mouse = function(container) {\n    return d3_mousePoint(container, d3_eventSource());\n  };\n  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;\n  function d3_mousePoint(container, e) {\n    if (e.changedTouches) e = e.changedTouches[0];\n    var svg = container.ownerSVGElement || container;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      if (d3_mouse_bug44083 < 0) {\n        var window = d3_window(container);\n        if (window.scrollX || window.scrollY) {\n          svg = d3.select(\"body\").append(\"svg\").style({\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            margin: 0,\n            padding: 0,\n            border: \"none\"\n          }, \"important\");\n          var ctm = svg[0][0].getScreenCTM();\n          d3_mouse_bug44083 = !(ctm.f || ctm.e);\n          svg.remove();\n        }\n      }\n      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, \n      point.y = e.clientY;\n      point = point.matrixTransform(container.getScreenCTM().inverse());\n      return [ point.x, point.y ];\n    }\n    var rect = container.getBoundingClientRect();\n    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];\n  }\n  d3.touch = function(container, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;\n    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return d3_mousePoint(container, touch);\n      }\n    }\n  };\n  d3.behavior.drag = function() {\n    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, \"mousemove\", \"mouseup\"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, \"touchmove\", \"touchend\");\n    function drag() {\n      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", touchstart);\n    }\n    function dragstart(id, position, subject, move, end) {\n      return function() {\n        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \".drag\" + (dragId == null ? \"\" : \"-\" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);\n        if (origin) {\n          dragOffset = origin.apply(that, arguments);\n          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];\n        } else {\n          dragOffset = [ 0, 0 ];\n        }\n        dispatch({\n          type: \"dragstart\"\n        });\n        function moved() {\n          var position1 = position(parent, dragId), dx, dy;\n          if (!position1) return;\n          dx = position1[0] - position0[0];\n          dy = position1[1] - position0[1];\n          dragged |= dx | dy;\n          position0 = position1;\n          dispatch({\n            type: \"drag\",\n            x: position1[0] + dragOffset[0],\n            y: position1[1] + dragOffset[1],\n            dx: dx,\n            dy: dy\n          });\n        }\n        function ended() {\n          if (!position(parent, dragId)) return;\n          dragSubject.on(move + dragName, null).on(end + dragName, null);\n          dragRestore(dragged);\n          dispatch({\n            type: \"dragend\"\n          });\n        }\n      };\n    }\n    drag.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return drag;\n    };\n    return d3.rebind(drag, event, \"on\");\n  };\n  function d3_behavior_dragTouchId() {\n    return d3.event.changedTouches[0].identifier;\n  }\n  d3.touches = function(container, touches) {\n    if (arguments.length < 2) touches = d3_eventSource().touches;\n    return touches ? d3_array(touches).map(function(touch) {\n      var point = d3_mousePoint(container, touch);\n      point.identifier = touch.identifier;\n      return point;\n    }) : [];\n  };\n  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n  function d3_sgn(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  }\n  function d3_cross2d(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n  function d3_acos(x) {\n    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);\n  }\n  function d3_asin(x) {\n    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);\n  }\n  function d3_sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n  function d3_cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n  function d3_tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n  function d3_haversin(x) {\n    return (x = Math.sin(x / 2)) * x;\n  }\n  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;\n  d3.interpolateZoom = function(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;\n    if (d2 < ε2) {\n      S = Math.log(w1 / w0) / ρ;\n      i = function(t) {\n        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];\n      };\n    } else {\n      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / ρ;\n      i = function(t) {\n        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];\n      };\n    }\n    i.duration = S * 1e3;\n    return i;\n  };\n  d3.behavior.zoom = function() {\n    var view = {\n      x: 0,\n      y: 0,\n      k: 1\n    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \"mousedown.zoom\", mousemove = \"mousemove.zoom\", mouseup = \"mouseup.zoom\", mousewheelTimer, touchstart = \"touchstart.zoom\", touchtime, event = d3_eventDispatch(zoom, \"zoomstart\", \"zoom\", \"zoomend\"), x0, x1, y0, y1;\n    if (!d3_behavior_zoomWheel) {\n      d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n      }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return d3.event.wheelDelta;\n      }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {\n        return -d3.event.detail;\n      }, \"MozMousePixelScroll\");\n    }\n    function zoom(g) {\n      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \".zoom\", mousewheeled).on(\"dblclick.zoom\", dblclicked).on(touchstart, touchstarted);\n    }\n    zoom.event = function(g) {\n      g.each(function() {\n        var dispatch = event.of(this, arguments), view1 = view;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.zoom\", function() {\n            view = this.__chart__ || {\n              x: 0,\n              y: 0,\n              k: 1\n            };\n            zoomstarted(dispatch);\n          }).tween(\"zoom:zoom\", function() {\n            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n            return function(t) {\n              var l = i(t), k = dx / l[2];\n              this.__chart__ = view = {\n                x: cx - l[0] * k,\n                y: cy - l[1] * k,\n                k: k\n              };\n              zoomed(dispatch);\n            };\n          }).each(\"interrupt.zoom\", function() {\n            zoomended(dispatch);\n          }).each(\"end.zoom\", function() {\n            zoomended(dispatch);\n          });\n        } else {\n          this.__chart__ = view;\n          zoomstarted(dispatch);\n          zoomed(dispatch);\n          zoomended(dispatch);\n        }\n      });\n    };\n    zoom.translate = function(_) {\n      if (!arguments.length) return [ view.x, view.y ];\n      view = {\n        x: +_[0],\n        y: +_[1],\n        k: view.k\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scale = function(_) {\n      if (!arguments.length) return view.k;\n      view = {\n        x: view.x,\n        y: view.y,\n        k: null\n      };\n      scaleTo(+_);\n      rescale();\n      return zoom;\n    };\n    zoom.scaleExtent = function(_) {\n      if (!arguments.length) return scaleExtent;\n      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.center = function(_) {\n      if (!arguments.length) return center;\n      center = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.size = function(_) {\n      if (!arguments.length) return size;\n      size = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.duration = function(_) {\n      if (!arguments.length) return duration;\n      duration = +_;\n      return zoom;\n    };\n    zoom.x = function(z) {\n      if (!arguments.length) return x1;\n      x1 = z;\n      x0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    zoom.y = function(z) {\n      if (!arguments.length) return y1;\n      y1 = z;\n      y0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    function location(p) {\n      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];\n    }\n    function point(l) {\n      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];\n    }\n    function scaleTo(s) {\n      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n    }\n    function translateTo(p, l) {\n      l = point(l);\n      view.x += p[0] - l[0];\n      view.y += p[1] - l[1];\n    }\n    function zoomTo(that, p, l, k) {\n      that.__chart__ = {\n        x: view.x,\n        y: view.y,\n        k: view.k\n      };\n      scaleTo(Math.pow(2, k));\n      translateTo(center0 = p, l);\n      that = d3.select(that);\n      if (duration > 0) that = that.transition().duration(duration);\n      that.call(zoom.event);\n    }\n    function rescale() {\n      if (x1) x1.domain(x0.range().map(function(x) {\n        return (x - view.x) / view.k;\n      }).map(x0.invert));\n      if (y1) y1.domain(y0.range().map(function(y) {\n        return (y - view.y) / view.k;\n      }).map(y0.invert));\n    }\n    function zoomstarted(dispatch) {\n      if (!zooming++) dispatch({\n        type: \"zoomstart\"\n      });\n    }\n    function zoomed(dispatch) {\n      rescale();\n      dispatch({\n        type: \"zoom\",\n        scale: view.k,\n        translate: [ view.x, view.y ]\n      });\n    }\n    function zoomended(dispatch) {\n      if (!--zooming) dispatch({\n        type: \"zoomend\"\n      }), center0 = null;\n    }\n    function mousedowned() {\n      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);\n      d3_selection_interrupt.call(that);\n      zoomstarted(dispatch);\n      function moved() {\n        dragged = 1;\n        translateTo(d3.mouse(that), location0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        subject.on(mousemove, null).on(mouseup, null);\n        dragRestore(dragged);\n        zoomended(dispatch);\n      }\n    }\n    function touchstarted() {\n      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \".zoom-\" + d3.event.changedTouches[0].identifier, touchmove = \"touchmove\" + zoomName, touchend = \"touchend\" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);\n      started();\n      zoomstarted(dispatch);\n      subject.on(mousedown, null).on(touchstart, started);\n      function relocate() {\n        var touches = d3.touches(that);\n        scale0 = view.k;\n        touches.forEach(function(t) {\n          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n        });\n        return touches;\n      }\n      function started() {\n        var target = d3.event.target;\n        d3.select(target).on(touchmove, moved).on(touchend, ended);\n        targets.push(target);\n        var changed = d3.event.changedTouches;\n        for (var i = 0, n = changed.length; i < n; ++i) {\n          locations0[changed[i].identifier] = null;\n        }\n        var touches = relocate(), now = Date.now();\n        if (touches.length === 1) {\n          if (now - touchtime < 500) {\n            var p = touches[0];\n            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n            d3_eventPreventDefault();\n          }\n          touchtime = now;\n        } else if (touches.length > 1) {\n          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];\n          distance0 = dx * dx + dy * dy;\n        }\n      }\n      function moved() {\n        var touches = d3.touches(that), p0, l0, p1, l1;\n        d3_selection_interrupt.call(that);\n        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {\n          p1 = touches[i];\n          if (l1 = locations0[p1.identifier]) {\n            if (l0) break;\n            p0 = p1, l0 = l1;\n          }\n        }\n        if (l1) {\n          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);\n          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];\n          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];\n          scaleTo(scale1 * scale0);\n        }\n        touchtime = null;\n        translateTo(p0, l0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        if (d3.event.touches.length) {\n          var changed = d3.event.changedTouches;\n          for (var i = 0, n = changed.length; i < n; ++i) {\n            delete locations0[changed[i].identifier];\n          }\n          for (var identifier in locations0) {\n            return void relocate();\n          }\n        }\n        d3.selectAll(targets).on(zoomName, null);\n        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n        dragRestore();\n        zoomended(dispatch);\n      }\n    }\n    function mousewheeled() {\n      var dispatch = event.of(this, arguments);\n      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), \n      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);\n      mousewheelTimer = setTimeout(function() {\n        mousewheelTimer = null;\n        zoomended(dispatch);\n      }, 50);\n      d3_eventPreventDefault();\n      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n      translateTo(center0, translate0);\n      zoomed(dispatch);\n    }\n    function dblclicked() {\n      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;\n      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n    }\n    return d3.rebind(zoom, event, \"on\");\n  };\n  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;\n  d3.color = d3_color;\n  function d3_color() {}\n  d3_color.prototype.toString = function() {\n    return this.rgb() + \"\";\n  };\n  d3.hsl = d3_hsl;\n  function d3_hsl(h, s, l) {\n    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n  }\n  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n  d3_hslPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, this.l / k);\n  };\n  d3_hslPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, k * this.l);\n  };\n  d3_hslPrototype.rgb = function() {\n    return d3_hsl_rgb(this.h, this.s, this.l);\n  };\n  function d3_hsl_rgb(h, s, l) {\n    var m1, m2;\n    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;\n    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;\n    l = l < 0 ? 0 : l > 1 ? 1 : l;\n    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;\n    m1 = 2 * l - m2;\n    function v(h) {\n      if (h > 360) h -= 360; else if (h < 0) h += 360;\n      if (h < 60) return m1 + (m2 - m1) * h / 60;\n      if (h < 180) return m2;\n      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;\n      return m1;\n    }\n    function vv(h) {\n      return Math.round(v(h) * 255);\n    }\n    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n  }\n  d3.hcl = d3_hcl;\n  function d3_hcl(h, c, l) {\n    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n  }\n  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n  d3_hclPrototype.brighter = function(k) {\n    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.darker = function(k) {\n    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.rgb = function() {\n    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n  };\n  function d3_hcl_lab(h, c, l) {\n    if (isNaN(h)) h = 0;\n    if (isNaN(c)) c = 0;\n    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n  }\n  d3.lab = d3_lab;\n  function d3_lab(l, a, b) {\n    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n  }\n  var d3_lab_K = 18;\n  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;\n  var d3_labPrototype = d3_lab.prototype = new d3_color();\n  d3_labPrototype.brighter = function(k) {\n    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.darker = function(k) {\n    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.rgb = function() {\n    return d3_lab_rgb(this.l, this.a, this.b);\n  };\n  function d3_lab_rgb(l, a, b) {\n    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;\n    x = d3_lab_xyz(x) * d3_lab_X;\n    y = d3_lab_xyz(y) * d3_lab_Y;\n    z = d3_lab_xyz(z) * d3_lab_Z;\n    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n  }\n  function d3_lab_hcl(l, a, b) {\n    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n  }\n  function d3_lab_xyz(x) {\n    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n  }\n  function d3_xyz_lab(x) {\n    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n  }\n  function d3_xyz_rgb(r) {\n    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n  }\n  d3.rgb = d3_rgb;\n  function d3_rgb(r, g, b) {\n    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n  }\n  function d3_rgbNumber(value) {\n    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);\n  }\n  function d3_rgbString(value) {\n    return d3_rgbNumber(value) + \"\";\n  }\n  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n  d3_rgbPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    var r = this.r, g = this.g, b = this.b, i = 30;\n    if (!r && !g && !b) return new d3_rgb(i, i, i);\n    if (r && r < i) r = i;\n    if (g && g < i) g = i;\n    if (b && b < i) b = i;\n    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n  };\n  d3_rgbPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n  };\n  d3_rgbPrototype.hsl = function() {\n    return d3_rgb_hsl(this.r, this.g, this.b);\n  };\n  d3_rgbPrototype.toString = function() {\n    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n  };\n  function d3_rgb_hex(v) {\n    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n  }\n  function d3_rgb_parse(format, rgb, hsl) {\n    var r = 0, g = 0, b = 0, m1, m2, color;\n    m1 = /([a-z]+)\\((.*)\\)/.exec(format = format.toLowerCase());\n    if (m1) {\n      m2 = m1[2].split(\",\");\n      switch (m1[1]) {\n       case \"hsl\":\n        {\n          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n        }\n\n       case \"rgb\":\n        {\n          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n        }\n      }\n    }\n    if (color = d3_rgb_names.get(format)) {\n      return rgb(color.r, color.g, color.b);\n    }\n    if (format != null && format.charAt(0) === \"#\" && !isNaN(color = parseInt(format.slice(1), 16))) {\n      if (format.length === 4) {\n        r = (color & 3840) >> 4;\n        r = r >> 4 | r;\n        g = color & 240;\n        g = g >> 4 | g;\n        b = color & 15;\n        b = b << 4 | b;\n      } else if (format.length === 7) {\n        r = (color & 16711680) >> 16;\n        g = (color & 65280) >> 8;\n        b = color & 255;\n      }\n    }\n    return rgb(r, g, b);\n  }\n  function d3_rgb_hsl(r, g, b) {\n    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n    if (d) {\n      s = l < .5 ? d / (max + min) : d / (2 - max - min);\n      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n      h *= 60;\n    } else {\n      h = NaN;\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new d3_hsl(h, s, l);\n  }\n  function d3_rgb_lab(r, g, b) {\n    r = d3_rgb_xyz(r);\n    g = d3_rgb_xyz(g);\n    b = d3_rgb_xyz(b);\n    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n  }\n  function d3_rgb_xyz(r) {\n    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n  }\n  function d3_rgb_parseNumber(c) {\n    var f = parseFloat(c);\n    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;\n  }\n  var d3_rgb_names = d3.map({\n    aliceblue: 15792383,\n    antiquewhite: 16444375,\n    aqua: 65535,\n    aquamarine: 8388564,\n    azure: 15794175,\n    beige: 16119260,\n    bisque: 16770244,\n    black: 0,\n    blanchedalmond: 16772045,\n    blue: 255,\n    blueviolet: 9055202,\n    brown: 10824234,\n    burlywood: 14596231,\n    cadetblue: 6266528,\n    chartreuse: 8388352,\n    chocolate: 13789470,\n    coral: 16744272,\n    cornflowerblue: 6591981,\n    cornsilk: 16775388,\n    crimson: 14423100,\n    cyan: 65535,\n    darkblue: 139,\n    darkcyan: 35723,\n    darkgoldenrod: 12092939,\n    darkgray: 11119017,\n    darkgreen: 25600,\n    darkgrey: 11119017,\n    darkkhaki: 12433259,\n    darkmagenta: 9109643,\n    darkolivegreen: 5597999,\n    darkorange: 16747520,\n    darkorchid: 10040012,\n    darkred: 9109504,\n    darksalmon: 15308410,\n    darkseagreen: 9419919,\n    darkslateblue: 4734347,\n    darkslategray: 3100495,\n    darkslategrey: 3100495,\n    darkturquoise: 52945,\n    darkviolet: 9699539,\n    deeppink: 16716947,\n    deepskyblue: 49151,\n    dimgray: 6908265,\n    dimgrey: 6908265,\n    dodgerblue: 2003199,\n    firebrick: 11674146,\n    floralwhite: 16775920,\n    forestgreen: 2263842,\n    fuchsia: 16711935,\n    gainsboro: 14474460,\n    ghostwhite: 16316671,\n    gold: 16766720,\n    goldenrod: 14329120,\n    gray: 8421504,\n    green: 32768,\n    greenyellow: 11403055,\n    grey: 8421504,\n    honeydew: 15794160,\n    hotpink: 16738740,\n    indianred: 13458524,\n    indigo: 4915330,\n    ivory: 16777200,\n    khaki: 15787660,\n    lavender: 15132410,\n    lavenderblush: 16773365,\n    lawngreen: 8190976,\n    lemonchiffon: 16775885,\n    lightblue: 11393254,\n    lightcoral: 15761536,\n    lightcyan: 14745599,\n    lightgoldenrodyellow: 16448210,\n    lightgray: 13882323,\n    lightgreen: 9498256,\n    lightgrey: 13882323,\n    lightpink: 16758465,\n    lightsalmon: 16752762,\n    lightseagreen: 2142890,\n    lightskyblue: 8900346,\n    lightslategray: 7833753,\n    lightslategrey: 7833753,\n    lightsteelblue: 11584734,\n    lightyellow: 16777184,\n    lime: 65280,\n    limegreen: 3329330,\n    linen: 16445670,\n    magenta: 16711935,\n    maroon: 8388608,\n    mediumaquamarine: 6737322,\n    mediumblue: 205,\n    mediumorchid: 12211667,\n    mediumpurple: 9662683,\n    mediumseagreen: 3978097,\n    mediumslateblue: 8087790,\n    mediumspringgreen: 64154,\n    mediumturquoise: 4772300,\n    mediumvioletred: 13047173,\n    midnightblue: 1644912,\n    mintcream: 16121850,\n    mistyrose: 16770273,\n    moccasin: 16770229,\n    navajowhite: 16768685,\n    navy: 128,\n    oldlace: 16643558,\n    olive: 8421376,\n    olivedrab: 7048739,\n    orange: 16753920,\n    orangered: 16729344,\n    orchid: 14315734,\n    palegoldenrod: 15657130,\n    palegreen: 10025880,\n    paleturquoise: 11529966,\n    palevioletred: 14381203,\n    papayawhip: 16773077,\n    peachpuff: 16767673,\n    peru: 13468991,\n    pink: 16761035,\n    plum: 14524637,\n    powderblue: 11591910,\n    purple: 8388736,\n    rebeccapurple: 6697881,\n    red: 16711680,\n    rosybrown: 12357519,\n    royalblue: 4286945,\n    saddlebrown: 9127187,\n    salmon: 16416882,\n    sandybrown: 16032864,\n    seagreen: 3050327,\n    seashell: 16774638,\n    sienna: 10506797,\n    silver: 12632256,\n    skyblue: 8900331,\n    slateblue: 6970061,\n    slategray: 7372944,\n    slategrey: 7372944,\n    snow: 16775930,\n    springgreen: 65407,\n    steelblue: 4620980,\n    tan: 13808780,\n    teal: 32896,\n    thistle: 14204888,\n    tomato: 16737095,\n    turquoise: 4251856,\n    violet: 15631086,\n    wheat: 16113331,\n    white: 16777215,\n    whitesmoke: 16119285,\n    yellow: 16776960,\n    yellowgreen: 10145074\n  });\n  d3_rgb_names.forEach(function(key, value) {\n    d3_rgb_names.set(key, d3_rgbNumber(value));\n  });\n  function d3_functor(v) {\n    return typeof v === \"function\" ? v : function() {\n      return v;\n    };\n  }\n  d3.functor = d3_functor;\n  d3.xhr = d3_xhrType(d3_identity);\n  function d3_xhrType(response) {\n    return function(url, mimeType, callback) {\n      if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType, \n      mimeType = null;\n      return d3_xhr(url, mimeType, response, callback);\n    };\n  }\n  function d3_xhr(url, mimeType, response, callback) {\n    var xhr = {}, dispatch = d3.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"), headers = {}, request = new XMLHttpRequest(), responseType = null;\n    if (this.XDomainRequest && !(\"withCredentials\" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {\n      request.readyState > 3 && respond();\n    };\n    function respond() {\n      var status = request.status, result;\n      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {\n        try {\n          result = response.call(xhr, request);\n        } catch (e) {\n          dispatch.error.call(xhr, e);\n          return;\n        }\n        dispatch.load.call(xhr, result);\n      } else {\n        dispatch.error.call(xhr, request);\n      }\n    }\n    request.onprogress = function(event) {\n      var o = d3.event;\n      d3.event = event;\n      try {\n        dispatch.progress.call(xhr, request);\n      } finally {\n        d3.event = o;\n      }\n    };\n    xhr.header = function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers[name];\n      if (value == null) delete headers[name]; else headers[name] = value + \"\";\n      return xhr;\n    };\n    xhr.mimeType = function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return xhr;\n    };\n    xhr.responseType = function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return xhr;\n    };\n    xhr.response = function(value) {\n      response = value;\n      return xhr;\n    };\n    [ \"get\", \"post\" ].forEach(function(method) {\n      xhr[method] = function() {\n        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));\n      };\n    });\n    xhr.send = function(method, data, callback) {\n      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;\n      request.open(method, url, true);\n      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";\n      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);\n      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);\n      if (responseType != null) request.responseType = responseType;\n      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {\n        callback(null, request);\n      });\n      dispatch.beforesend.call(xhr, request);\n      request.send(data == null ? null : data);\n      return xhr;\n    };\n    xhr.abort = function() {\n      request.abort();\n      return xhr;\n    };\n    d3.rebind(xhr, dispatch, \"on\");\n    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n  }\n  function d3_xhr_fixCallback(callback) {\n    return callback.length === 1 ? function(error, request) {\n      callback(error == null ? request : null);\n    } : callback;\n  }\n  function d3_xhrHasResponse(request) {\n    var type = request.responseType;\n    return type && type !== \"text\" ? request.response : request.responseText;\n  }\n  d3.dsv = function(delimiter, mimeType) {\n    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);\n    function dsv(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n      xhr.row = function(_) {\n        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n      };\n      return xhr;\n    }\n    function response(request) {\n      return dsv.parse(request.responseText);\n    }\n    function typedResponse(f) {\n      return function(request) {\n        return dsv.parse(request.responseText, f);\n      };\n    }\n    dsv.parse = function(text, f) {\n      var o;\n      return dsv.parseRows(text, function(row, i) {\n        if (o) return o(row, i - 1);\n        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {\n          return JSON.stringify(name) + \": d[\" + i + \"]\";\n        }).join(\",\") + \"}\");\n        o = f ? function(row, i) {\n          return f(a(row), i);\n        } : a;\n      });\n    };\n    dsv.parseRows = function(text, f) {\n      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n      function token() {\n        if (I >= N) return EOF;\n        if (eol) return eol = false, EOL;\n        var j = I;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          var c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, '\"');\n        }\n        while (I < N) {\n          var c = text.charCodeAt(I++), k = 1;\n          if (c === 10) eol = true; else if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(I) === 10) ++I, ++k;\n          } else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n        return text.slice(j);\n      }\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n      return rows;\n    };\n    dsv.format = function(rows) {\n      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n      var fieldSet = new d3_Set(), fields = [];\n      rows.forEach(function(row) {\n        for (var field in row) {\n          if (!fieldSet.has(field)) {\n            fields.push(fieldSet.add(field));\n          }\n        }\n      });\n      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {\n        return fields.map(function(field) {\n          return formatValue(row[field]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    };\n    dsv.formatRows = function(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    };\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n    function formatValue(text) {\n      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;\n    }\n    return dsv;\n  };\n  d3.csv = d3.dsv(\",\", \"text/csv\");\n  d3.tsv = d3.dsv(\"\t\", \"text/tab-separated-values\");\n  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, \"requestAnimationFrame\")] || function(callback) {\n    setTimeout(callback, 17);\n  };\n  d3.timer = function() {\n    d3_timer.apply(this, arguments);\n  };\n  function d3_timer(callback, delay, then) {\n    var n = arguments.length;\n    if (n < 2) delay = 0;\n    if (n < 3) then = Date.now();\n    var time = then + delay, timer = {\n      c: callback,\n      t: time,\n      n: null\n    };\n    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;\n    d3_timer_queueTail = timer;\n    if (!d3_timer_interval) {\n      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n    return timer;\n  }\n  function d3_timer_step() {\n    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;\n    if (delay > 24) {\n      if (isFinite(delay)) {\n        clearTimeout(d3_timer_timeout);\n        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n      }\n      d3_timer_interval = 0;\n    } else {\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  }\n  d3.timer.flush = function() {\n    d3_timer_mark();\n    d3_timer_sweep();\n  };\n  function d3_timer_mark() {\n    var now = Date.now(), timer = d3_timer_queueHead;\n    while (timer) {\n      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;\n      timer = timer.n;\n    }\n    return now;\n  }\n  function d3_timer_sweep() {\n    var t0, t1 = d3_timer_queueHead, time = Infinity;\n    while (t1) {\n      if (t1.c) {\n        if (t1.t < time) time = t1.t;\n        t1 = (t0 = t1).n;\n      } else {\n        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n      }\n    }\n    d3_timer_queueTail = t0;\n    return time;\n  }\n  function d3_format_precision(x, p) {\n    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n  }\n  d3.round = function(x, n) {\n    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n  };\n  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n  d3.formatPrefix = function(value, precision) {\n    var i = 0;\n    if (value = +value) {\n      if (value < 0) value *= -1;\n      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n    }\n    return d3_formatPrefixes[8 + i / 3];\n  };\n  function d3_formatPrefix(d, i) {\n    var k = Math.pow(10, abs(8 - i) * 3);\n    return {\n      scale: i > 8 ? function(d) {\n        return d / k;\n      } : function(d) {\n        return d * k;\n      },\n      symbol: d\n    };\n  }\n  function d3_locale_numberFormat(locale) {\n    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {\n      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n      }\n      return t.reverse().join(locale_thousands);\n    } : d3_identity;\n    return function(specifier) {\n      var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"-\", symbol = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \"\", suffix = \"\", integer = false, exponent = true;\n      if (precision) precision = +precision.substring(1);\n      if (zfill || fill === \"0\" && align === \"=\") {\n        zfill = fill = \"0\";\n        align = \"=\";\n      }\n      switch (type) {\n       case \"n\":\n        comma = true;\n        type = \"g\";\n        break;\n\n       case \"%\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"f\";\n        break;\n\n       case \"p\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"r\";\n        break;\n\n       case \"b\":\n       case \"o\":\n       case \"x\":\n       case \"X\":\n        if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();\n\n       case \"c\":\n        exponent = false;\n\n       case \"d\":\n        integer = true;\n        precision = 0;\n        break;\n\n       case \"s\":\n        scale = -1;\n        type = \"r\";\n        break;\n      }\n      if (symbol === \"$\") prefix = locale_currency[0], suffix = locale_currency[1];\n      if (type == \"r\" && !precision) type = \"g\";\n      if (precision != null) {\n        if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n      }\n      type = d3_format_types.get(type) || d3_format_typeDefault;\n      var zcomma = zfill && comma;\n      return function(value) {\n        var fullSuffix = suffix;\n        if (integer && value % 1) return \"\";\n        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign === \"-\" ? \"\" : sign;\n        if (scale < 0) {\n          var unit = d3.formatPrefix(value, precision);\n          value = unit.scale(value);\n          fullSuffix = unit.symbol + suffix;\n        } else {\n          value *= scale;\n        }\n        value = type(value, precision);\n        var i = value.lastIndexOf(\".\"), before, after;\n        if (i < 0) {\n          var j = exponent ? value.lastIndexOf(\"e\") : -1;\n          if (j < 0) before = value, after = \"\"; else before = value.substring(0, j), after = value.substring(j);\n        } else {\n          before = value.substring(0, i);\n          after = locale_decimal + value.substring(i + 1);\n        }\n        if (!zfill && comma) before = formatGroup(before, Infinity);\n        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n        negative += prefix;\n        value = before + after;\n        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n      };\n    };\n  }\n  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n  var d3_format_types = d3.map({\n    b: function(x) {\n      return x.toString(2);\n    },\n    c: function(x) {\n      return String.fromCharCode(x);\n    },\n    o: function(x) {\n      return x.toString(8);\n    },\n    x: function(x) {\n      return x.toString(16);\n    },\n    X: function(x) {\n      return x.toString(16).toUpperCase();\n    },\n    g: function(x, p) {\n      return x.toPrecision(p);\n    },\n    e: function(x, p) {\n      return x.toExponential(p);\n    },\n    f: function(x, p) {\n      return x.toFixed(p);\n    },\n    r: function(x, p) {\n      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n    }\n  });\n  function d3_format_typeDefault(x) {\n    return x + \"\";\n  }\n  var d3_time = d3.time = {}, d3_date = Date;\n  function d3_date_utc() {\n    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n  }\n  d3_date_utc.prototype = {\n    getDate: function() {\n      return this._.getUTCDate();\n    },\n    getDay: function() {\n      return this._.getUTCDay();\n    },\n    getFullYear: function() {\n      return this._.getUTCFullYear();\n    },\n    getHours: function() {\n      return this._.getUTCHours();\n    },\n    getMilliseconds: function() {\n      return this._.getUTCMilliseconds();\n    },\n    getMinutes: function() {\n      return this._.getUTCMinutes();\n    },\n    getMonth: function() {\n      return this._.getUTCMonth();\n    },\n    getSeconds: function() {\n      return this._.getUTCSeconds();\n    },\n    getTime: function() {\n      return this._.getTime();\n    },\n    getTimezoneOffset: function() {\n      return 0;\n    },\n    valueOf: function() {\n      return this._.valueOf();\n    },\n    setDate: function() {\n      d3_time_prototype.setUTCDate.apply(this._, arguments);\n    },\n    setDay: function() {\n      d3_time_prototype.setUTCDay.apply(this._, arguments);\n    },\n    setFullYear: function() {\n      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n    },\n    setHours: function() {\n      d3_time_prototype.setUTCHours.apply(this._, arguments);\n    },\n    setMilliseconds: function() {\n      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n    },\n    setMinutes: function() {\n      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n    },\n    setMonth: function() {\n      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n    },\n    setSeconds: function() {\n      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n    },\n    setTime: function() {\n      d3_time_prototype.setTime.apply(this._, arguments);\n    }\n  };\n  var d3_time_prototype = Date.prototype;\n  function d3_time_interval(local, step, number) {\n    function round(date) {\n      var d0 = local(date), d1 = offset(d0, 1);\n      return date - d0 < d1 - date ? d0 : d1;\n    }\n    function ceil(date) {\n      step(date = local(new d3_date(date - 1)), 1);\n      return date;\n    }\n    function offset(date, k) {\n      step(date = new d3_date(+date), k);\n      return date;\n    }\n    function range(t0, t1, dt) {\n      var time = ceil(t0), times = [];\n      if (dt > 1) {\n        while (time < t1) {\n          if (!(number(time) % dt)) times.push(new Date(+time));\n          step(time, 1);\n        }\n      } else {\n        while (time < t1) times.push(new Date(+time)), step(time, 1);\n      }\n      return times;\n    }\n    function range_utc(t0, t1, dt) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = t0;\n        return range(utc, t1, dt);\n      } finally {\n        d3_date = Date;\n      }\n    }\n    local.floor = local;\n    local.round = round;\n    local.ceil = ceil;\n    local.offset = offset;\n    local.range = range;\n    var utc = local.utc = d3_time_interval_utc(local);\n    utc.floor = utc;\n    utc.round = d3_time_interval_utc(round);\n    utc.ceil = d3_time_interval_utc(ceil);\n    utc.offset = d3_time_interval_utc(offset);\n    utc.range = range_utc;\n    return local;\n  }\n  function d3_time_interval_utc(method) {\n    return function(date, k) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = date;\n        return method(utc, k)._;\n      } finally {\n        d3_date = Date;\n      }\n    };\n  }\n  d3_time.year = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setMonth(0, 1);\n    return date;\n  }, function(date, offset) {\n    date.setFullYear(date.getFullYear() + offset);\n  }, function(date) {\n    return date.getFullYear();\n  });\n  d3_time.years = d3_time.year.range;\n  d3_time.years.utc = d3_time.year.utc.range;\n  d3_time.day = d3_time_interval(function(date) {\n    var day = new d3_date(2e3, 0);\n    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    return day;\n  }, function(date, offset) {\n    date.setDate(date.getDate() + offset);\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n  d3_time.days = d3_time.day.range;\n  d3_time.days.utc = d3_time.day.utc.range;\n  d3_time.dayOfYear = function(date) {\n    var year = d3_time.year(date);\n    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n  };\n  [ \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\" ].forEach(function(day, i) {\n    i = 7 - i;\n    var interval = d3_time[day] = d3_time_interval(function(date) {\n      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n      return date;\n    }, function(date, offset) {\n      date.setDate(date.getDate() + Math.floor(offset) * 7);\n    }, function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n    });\n    d3_time[day + \"s\"] = interval.range;\n    d3_time[day + \"s\"].utc = interval.utc.range;\n    d3_time[day + \"OfYear\"] = function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n    };\n  });\n  d3_time.week = d3_time.sunday;\n  d3_time.weeks = d3_time.sunday.range;\n  d3_time.weeks.utc = d3_time.sunday.utc.range;\n  d3_time.weekOfYear = d3_time.sundayOfYear;\n  function d3_locale_timeFormat(locale) {\n    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n    function d3_time_format(template) {\n      var n = template.length;\n      function format(date) {\n        var string = [], i = -1, j = 0, c, p, f;\n        while (++i < n) {\n          if (template.charCodeAt(i) === 37) {\n            string.push(template.slice(j, i));\n            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n        string.push(template.slice(j, i));\n        return string.join(\"\");\n      }\n      format.parse = function(string) {\n        var d = {\n          y: 1900,\n          m: 0,\n          d: 1,\n          H: 0,\n          M: 0,\n          S: 0,\n          L: 0,\n          Z: null\n        }, i = d3_time_parse(d, template, string, 0);\n        if (i != string.length) return null;\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();\n        if (\"j\" in d) date.setFullYear(d.y, 0, d.j); else if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n          date.setFullYear(d.y, 0, 1);\n          date.setFullYear(d.y, 0, \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n        } else date.setFullYear(d.y, d.m, d.d);\n        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n        return localZ ? date._ : date;\n      };\n      format.toString = function() {\n        return template;\n      };\n      return format;\n    }\n    function d3_time_parse(date, template, string, j) {\n      var c, p, t, i = 0, n = template.length, m = string.length;\n      while (i < n) {\n        if (j >= m) return -1;\n        c = template.charCodeAt(i++);\n        if (c === 37) {\n          t = template.charAt(i++);\n          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n          if (!p || (j = p(date, string, j)) < 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n      return j;\n    }\n    d3_time_format.utc = function(template) {\n      var local = d3_time_format(template);\n      function format(date) {\n        try {\n          d3_date = d3_date_utc;\n          var utc = new d3_date();\n          utc._ = date;\n          return local(utc);\n        } finally {\n          d3_date = Date;\n        }\n      }\n      format.parse = function(string) {\n        try {\n          d3_date = d3_date_utc;\n          var date = local.parse(string);\n          return date && date._;\n        } finally {\n          d3_date = Date;\n        }\n      };\n      format.toString = local.toString;\n      return format;\n    };\n    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n    locale_periods.forEach(function(p, i) {\n      d3_time_periodLookup.set(p.toLowerCase(), i);\n    });\n    var d3_time_formats = {\n      a: function(d) {\n        return locale_shortDays[d.getDay()];\n      },\n      A: function(d) {\n        return locale_days[d.getDay()];\n      },\n      b: function(d) {\n        return locale_shortMonths[d.getMonth()];\n      },\n      B: function(d) {\n        return locale_months[d.getMonth()];\n      },\n      c: d3_time_format(locale_dateTime),\n      d: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      e: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      H: function(d, p) {\n        return d3_time_formatPad(d.getHours(), p, 2);\n      },\n      I: function(d, p) {\n        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n      },\n      j: function(d, p) {\n        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n      },\n      L: function(d, p) {\n        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n      },\n      m: function(d, p) {\n        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n      },\n      M: function(d, p) {\n        return d3_time_formatPad(d.getMinutes(), p, 2);\n      },\n      p: function(d) {\n        return locale_periods[+(d.getHours() >= 12)];\n      },\n      S: function(d, p) {\n        return d3_time_formatPad(d.getSeconds(), p, 2);\n      },\n      U: function(d, p) {\n        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n      },\n      w: function(d) {\n        return d.getDay();\n      },\n      W: function(d, p) {\n        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n      },\n      x: d3_time_format(locale_date),\n      X: d3_time_format(locale_time),\n      y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n      },\n      Y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n      },\n      Z: d3_time_zone,\n      \"%\": function() {\n        return \"%\";\n      }\n    };\n    var d3_time_parsers = {\n      a: d3_time_parseWeekdayAbbrev,\n      A: d3_time_parseWeekday,\n      b: d3_time_parseMonthAbbrev,\n      B: d3_time_parseMonth,\n      c: d3_time_parseLocaleFull,\n      d: d3_time_parseDay,\n      e: d3_time_parseDay,\n      H: d3_time_parseHour24,\n      I: d3_time_parseHour24,\n      j: d3_time_parseDayOfYear,\n      L: d3_time_parseMilliseconds,\n      m: d3_time_parseMonthNumber,\n      M: d3_time_parseMinutes,\n      p: d3_time_parseAmPm,\n      S: d3_time_parseSeconds,\n      U: d3_time_parseWeekNumberSunday,\n      w: d3_time_parseWeekdayNumber,\n      W: d3_time_parseWeekNumberMonday,\n      x: d3_time_parseLocaleDate,\n      X: d3_time_parseLocaleTime,\n      y: d3_time_parseYear,\n      Y: d3_time_parseFullYear,\n      Z: d3_time_parseZone,\n      \"%\": d3_time_parseLiteralPercent\n    };\n    function d3_time_parseWeekdayAbbrev(date, string, i) {\n      d3_time_dayAbbrevRe.lastIndex = 0;\n      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseWeekday(date, string, i) {\n      d3_time_dayRe.lastIndex = 0;\n      var n = d3_time_dayRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonthAbbrev(date, string, i) {\n      d3_time_monthAbbrevRe.lastIndex = 0;\n      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonth(date, string, i) {\n      d3_time_monthRe.lastIndex = 0;\n      var n = d3_time_monthRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseLocaleFull(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n    }\n    function d3_time_parseLocaleDate(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n    }\n    function d3_time_parseLocaleTime(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n    }\n    function d3_time_parseAmPm(date, string, i) {\n      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n      return n == null ? -1 : (date.p = n, i);\n    }\n    return d3_time_format;\n  }\n  var d3_time_formatPads = {\n    \"-\": \"\",\n    _: \" \",\n    \"0\": \"0\"\n  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;\n  function d3_time_formatPad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\", string = (sign ? -value : value) + \"\", length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n  function d3_time_formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");\n  }\n  function d3_time_formatLookup(names) {\n    var map = new d3_Map(), i = -1, n = names.length;\n    while (++i < n) map.set(names[i].toLowerCase(), i);\n    return map;\n  }\n  function d3_time_parseWeekdayNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n    return n ? (date.w = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberSunday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.U = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberMonday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.W = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseFullYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n    return n ? (date.y = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n  }\n  function d3_time_parseZone(date, string, i) {\n    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, \n    i + 5) : -1;\n  }\n  function d3_time_expandYear(d) {\n    return d + (d > 68 ? 1900 : 2e3);\n  }\n  function d3_time_parseMonthNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n  }\n  function d3_time_parseDay(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.d = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseDayOfYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.j = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseHour24(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.H = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMinutes(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.M = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseSeconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.S = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMilliseconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.L = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_zone(d) {\n    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = abs(z) / 60 | 0, zm = abs(z) % 60;\n    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);\n  }\n  function d3_time_parseLiteralPercent(date, string, i) {\n    d3_time_percentRe.lastIndex = 0;\n    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n  function d3_time_formatMulti(formats) {\n    var n = formats.length, i = -1;\n    while (++i < n) formats[i][0] = this(formats[i][0]);\n    return function(date) {\n      var i = 0, f = formats[i];\n      while (!f[1](date)) f = formats[++i];\n      return f[0](date);\n    };\n  }\n  d3.locale = function(locale) {\n    return {\n      numberFormat: d3_locale_numberFormat(locale),\n      timeFormat: d3_locale_timeFormat(locale)\n    };\n  };\n  var d3_locale_enUS = d3.locale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [ 3 ],\n    currency: [ \"$\", \"\" ],\n    dateTime: \"%a %b %e %X %Y\",\n    date: \"%m/%d/%Y\",\n    time: \"%H:%M:%S\",\n    periods: [ \"AM\", \"PM\" ],\n    days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],\n    shortDays: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],\n    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n    shortMonths: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\n  });\n  d3.format = d3_locale_enUS.numberFormat;\n  d3.geo = {};\n  function d3_adder() {}\n  d3_adder.prototype = {\n    s: 0,\n    t: 0,\n    add: function(y) {\n      d3_adderSum(y, this.t, d3_adderTemp);\n      d3_adderSum(d3_adderTemp.s, this.s, this);\n      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;\n    },\n    reset: function() {\n      this.s = this.t = 0;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n  var d3_adderTemp = new d3_adder();\n  function d3_adderSum(a, b, o) {\n    var x = o.s = a + b, bv = x - a, av = x - bv;\n    o.t = a - av + (b - bv);\n  }\n  d3.geo.stream = function(object, listener) {\n    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n      d3_geo_streamObjectType[object.type](object, listener);\n    } else {\n      d3_geo_streamGeometry(object, listener);\n    }\n  };\n  function d3_geo_streamGeometry(geometry, listener) {\n    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n    }\n  }\n  var d3_geo_streamObjectType = {\n    Feature: function(feature, listener) {\n      d3_geo_streamGeometry(feature.geometry, listener);\n    },\n    FeatureCollection: function(object, listener) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);\n    }\n  };\n  var d3_geo_streamGeometryType = {\n    Sphere: function(object, listener) {\n      listener.sphere();\n    },\n    Point: function(object, listener) {\n      object = object.coordinates;\n      listener.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, listener) {\n      d3_geo_streamLine(object.coordinates, listener, 0);\n    },\n    MultiLineString: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);\n    },\n    Polygon: function(object, listener) {\n      d3_geo_streamPolygon(object.coordinates, listener);\n    },\n    MultiPolygon: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);\n    },\n    GeometryCollection: function(object, listener) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);\n    }\n  };\n  function d3_geo_streamLine(coordinates, listener, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    listener.lineStart();\n    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n    listener.lineEnd();\n  }\n  function d3_geo_streamPolygon(coordinates, listener) {\n    var i = -1, n = coordinates.length;\n    listener.polygonStart();\n    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);\n    listener.polygonEnd();\n  }\n  d3.geo.area = function(object) {\n    d3_geo_areaSum = 0;\n    d3.geo.stream(object, d3_geo_area);\n    return d3_geo_areaSum;\n  };\n  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();\n  var d3_geo_area = {\n    sphere: function() {\n      d3_geo_areaSum += 4 * π;\n    },\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_areaRingSum.reset();\n      d3_geo_area.lineStart = d3_geo_areaRingStart;\n    },\n    polygonEnd: function() {\n      var area = 2 * d3_geo_areaRingSum;\n      d3_geo_areaSum += area < 0 ? 4 * π + area : area;\n      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n    }\n  };\n  function d3_geo_areaRingStart() {\n    var λ00, φ00, λ0, cosφ0, sinφ0;\n    d3_geo_area.point = function(λ, φ) {\n      d3_geo_area.point = nextPoint;\n      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), \n      sinφ0 = Math.sin(φ);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      φ = φ * d3_radians / 2 + π / 4;\n      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n      d3_geo_areaRingSum.add(Math.atan2(v, u));\n      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n    }\n    d3_geo_area.lineEnd = function() {\n      nextPoint(λ00, φ00);\n    };\n  }\n  function d3_geo_cartesian(spherical) {\n    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);\n    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];\n  }\n  function d3_geo_cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n  function d3_geo_cartesianCross(a, b) {\n    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];\n  }\n  function d3_geo_cartesianAdd(a, b) {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n  }\n  function d3_geo_cartesianScale(vector, k) {\n    return [ vector[0] * k, vector[1] * k, vector[2] * k ];\n  }\n  function d3_geo_cartesianNormalize(d) {\n    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l;\n    d[1] /= l;\n    d[2] /= l;\n  }\n  function d3_geo_spherical(cartesian) {\n    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];\n  }\n  function d3_geo_sphericalEqual(a, b) {\n    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;\n  }\n  d3.geo.bounds = function() {\n    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n    var bound = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        bound.point = ringPoint;\n        bound.lineStart = ringStart;\n        bound.lineEnd = ringEnd;\n        dλSum = 0;\n        d3_geo_area.polygonStart();\n      },\n      polygonEnd: function() {\n        d3_geo_area.polygonEnd();\n        bound.point = point;\n        bound.lineStart = lineStart;\n        bound.lineEnd = lineEnd;\n        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;\n        range[0] = λ0, range[1] = λ1;\n      }\n    };\n    function point(λ, φ) {\n      ranges.push(range = [ λ0 = λ, λ1 = λ ]);\n      if (φ < φ0) φ0 = φ;\n      if (φ > φ1) φ1 = φ;\n    }\n    function linePoint(λ, φ) {\n      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);\n      if (p0) {\n        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n        d3_geo_cartesianNormalize(inflection);\n        inflection = d3_geo_spherical(inflection);\n        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;\n        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = inflection[1] * d3_degrees;\n          if (φi > φ1) φ1 = φi;\n        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = -inflection[1] * d3_degrees;\n          if (φi < φ0) φ0 = φi;\n        } else {\n          if (φ < φ0) φ0 = φ;\n          if (φ > φ1) φ1 = φ;\n        }\n        if (antimeridian) {\n          if (λ < λ_) {\n            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n          } else {\n            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n          }\n        } else {\n          if (λ1 >= λ0) {\n            if (λ < λ0) λ0 = λ;\n            if (λ > λ1) λ1 = λ;\n          } else {\n            if (λ > λ_) {\n              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n            } else {\n              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n            }\n          }\n        }\n      } else {\n        point(λ, φ);\n      }\n      p0 = p, λ_ = λ;\n    }\n    function lineStart() {\n      bound.point = linePoint;\n    }\n    function lineEnd() {\n      range[0] = λ0, range[1] = λ1;\n      bound.point = point;\n      p0 = null;\n    }\n    function ringPoint(λ, φ) {\n      if (p0) {\n        var dλ = λ - λ_;\n        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;\n      } else λ__ = λ, φ__ = φ;\n      d3_geo_area.point(λ, φ);\n      linePoint(λ, φ);\n    }\n    function ringStart() {\n      d3_geo_area.lineStart();\n    }\n    function ringEnd() {\n      ringPoint(λ__, φ__);\n      d3_geo_area.lineEnd();\n      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);\n      range[0] = λ0, range[1] = λ1;\n      p0 = null;\n    }\n    function angle(λ0, λ1) {\n      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;\n    }\n    function compareRanges(a, b) {\n      return a[0] - b[0];\n    }\n    function withinRange(x, range) {\n      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n    }\n    return function(feature) {\n      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n      ranges = [];\n      d3.geo.stream(feature, bound);\n      var n = ranges.length;\n      if (n) {\n        ranges.sort(compareRanges);\n        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {\n          b = ranges[i];\n          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n          } else {\n            merged.push(a = b);\n          }\n        }\n        var best = -Infinity, dλ;\n        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {\n          b = merged[i];\n          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];\n        }\n      }\n      ranges = range = null;\n      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];\n    };\n  }();\n  d3.geo.centroid = function(object) {\n    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n    d3.geo.stream(object, d3_geo_centroid);\n    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;\n    if (m < ε2) {\n      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n      m = x * x + y * y + z * z;\n      if (m < ε2) return [ NaN, NaN ];\n    }\n    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];\n  };\n  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n  var d3_geo_centroid = {\n    sphere: d3_noop,\n    point: d3_geo_centroidPoint,\n    lineStart: d3_geo_centroidLineStart,\n    lineEnd: d3_geo_centroidLineEnd,\n    polygonStart: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n    }\n  };\n  function d3_geo_centroidPoint(λ, φ) {\n    λ *= d3_radians;\n    var cosφ = Math.cos(φ *= d3_radians);\n    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n  }\n  function d3_geo_centroidPointXYZ(x, y, z) {\n    ++d3_geo_centroidW0;\n    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n  }\n  function d3_geo_centroidLineStart() {\n    var x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroid.point = nextPoint;\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_centroidLineEnd() {\n    d3_geo_centroid.point = d3_geo_centroidPoint;\n  }\n  function d3_geo_centroidRingStart() {\n    var λ00, φ00, x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ00 = λ, φ00 = φ;\n      d3_geo_centroid.point = nextPoint;\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    d3_geo_centroid.lineEnd = function() {\n      nextPoint(λ00, φ00);\n      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n      d3_geo_centroid.point = d3_geo_centroidPoint;\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);\n      d3_geo_centroidX2 += v * cx;\n      d3_geo_centroidY2 += v * cy;\n      d3_geo_centroidZ2 += v * cz;\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_compose(a, b) {\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n    return compose;\n  }\n  function d3_true() {\n    return true;\n  }\n  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n    var subject = [], clip = [];\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n];\n      if (d3_geo_sphericalEqual(p0, p1)) {\n        listener.lineStart();\n        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);\n        listener.lineEnd();\n        return;\n      }\n      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n    });\n    clip.sort(compare);\n    d3_geo_clipPolygonLinkCircular(subject);\n    d3_geo_clipPolygonLinkCircular(clip);\n    if (!subject.length) return;\n    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {\n      clip[i].e = entry = !entry;\n    }\n    var start = subject[0], points, point;\n    while (1) {\n      var current = start, isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      listener.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, listener);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, listener);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      listener.lineEnd();\n    }\n  }\n  function d3_geo_clipPolygonLinkCircular(array) {\n    if (!(n = array.length)) return;\n    var n, i = 0, a = array[0], b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other;\n    this.e = entry;\n    this.v = false;\n    this.n = this.p = null;\n  }\n  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n    return function(rotate, listener) {\n      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = d3.merge(segments);\n          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n          if (segments.length) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n          } else if (clipStartInside) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            interpolate(null, null, 1, listener);\n            listener.lineEnd();\n          }\n          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          listener.polygonStart();\n          listener.lineStart();\n          interpolate(null, null, 1, listener);\n          listener.lineEnd();\n          listener.polygonEnd();\n        }\n      };\n      function point(λ, φ) {\n        var point = rotate(λ, φ);\n        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n      }\n      function pointLine(λ, φ) {\n        var point = rotate(λ, φ);\n        line.point(point[0], point[1]);\n      }\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n      var segments;\n      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n      function pointRing(λ, φ) {\n        ring.push([ λ, φ ]);\n        var point = rotate(λ, φ);\n        ringListener.point(point[0], point[1]);\n      }\n      function ringStart() {\n        ringListener.lineStart();\n        ring = [];\n      }\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringListener.lineEnd();\n        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n        if (!n) return;\n        if (clean & 1) {\n          segment = ringSegments[0];\n          var n = segment.length - 1, i = -1, point;\n          if (n > 0) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            while (++i < n) listener.point((point = segment[i])[0], point[1]);\n            listener.lineEnd();\n          }\n          return;\n        }\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n      }\n      return clip;\n    };\n  }\n  function d3_geo_clipSegmentLength1(segment) {\n    return segment.length > 1;\n  }\n  function d3_geo_clipBufferListener() {\n    var lines = [], line;\n    return {\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      point: function(λ, φ) {\n        line.push([ λ, φ ]);\n      },\n      lineEnd: d3_noop,\n      buffer: function() {\n        var buffer = lines;\n        lines = [];\n        line = null;\n        return buffer;\n      },\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      }\n    };\n  }\n  function d3_geo_clipSort(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n  }\n  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n  function d3_geo_clipAntimeridianLine(listener) {\n    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;\n    return {\n      lineStart: function() {\n        listener.lineStart();\n        clean = 1;\n      },\n      point: function(λ1, φ1) {\n        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);\n        if (abs(dλ - π) < ε) {\n          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          listener.point(λ1, φ0);\n          clean = 0;\n        } else if (sλ0 !== sλ1 && dλ >= π) {\n          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;\n          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;\n          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          clean = 0;\n        }\n        listener.point(λ0 = λ1, φ0 = φ1);\n        sλ0 = sλ1;\n      },\n      lineEnd: function() {\n        listener.lineEnd();\n        λ0 = φ0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean;\n      }\n    };\n  }\n  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);\n    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n  }\n  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n    var φ;\n    if (from == null) {\n      φ = direction * halfπ;\n      listener.point(-π, φ);\n      listener.point(0, φ);\n      listener.point(π, φ);\n      listener.point(π, 0);\n      listener.point(π, -φ);\n      listener.point(0, -φ);\n      listener.point(-π, -φ);\n      listener.point(-π, 0);\n      listener.point(-π, φ);\n    } else if (abs(from[0] - to[0]) > ε) {\n      var s = from[0] < to[0] ? π : -π;\n      φ = direction * s / 2;\n      listener.point(-s, φ);\n      listener.point(0, φ);\n      listener.point(s, φ);\n    } else {\n      listener.point(to[0], to[1]);\n    }\n  }\n  function d3_geo_pointInPolygon(point, polygon) {\n    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n    d3_geo_areaRingSum.reset();\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      var ring = polygon[i], m = ring.length;\n      if (!m) continue;\n      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n      while (true) {\n        if (j === m) j = 0;\n        point = ring[j];\n        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;\n        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {\n          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n          d3_geo_cartesianNormalize(arc);\n          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n          d3_geo_cartesianNormalize(intersection);\n          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);\n          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ dλ >= 0 ? 1 : -1;\n          }\n        }\n        if (!j++) break;\n        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n      }\n    }\n    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;\n  }\n  function d3_geo_clipCircle(radius) {\n    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);\n    function visible(λ, φ) {\n      return Math.cos(λ) * Math.cos(φ) > cr;\n    }\n    function clipLine(listener) {\n      var point0, c0, v0, v00, clean;\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(λ, φ) {\n          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n          if (!point0 && (v00 = v0 = v)) listener.lineStart();\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n              point1[0] += ε;\n              point1[1] += ε;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              listener.lineStart();\n              point2 = intersect(point1, point0);\n              listener.point(point2[0], point2[1]);\n            } else {\n              point2 = intersect(point0, point1);\n              listener.point(point2[0], point2[1]);\n              listener.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n              } else {\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n            listener.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) listener.lineEnd();\n          point0 = null;\n        },\n        clean: function() {\n          return clean | (v00 && v0) << 1;\n        }\n      };\n    }\n    function intersect(a, b, two) {\n      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);\n      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n      if (!determinant) return !two && a;\n      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n      d3_geo_cartesianAdd(A, B);\n      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n      if (t2 < 0) return;\n      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);\n      d3_geo_cartesianAdd(q, A);\n      q = d3_geo_spherical(q);\n      if (!two) return q;\n      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;\n      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;\n      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;\n      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;\n      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n        d3_geo_cartesianAdd(q1, A);\n        return [ q, d3_geo_spherical(q1) ];\n      }\n    }\n    function code(λ, φ) {\n      var r = smallRadius ? radius : π - radius, code = 0;\n      if (λ < -r) code |= 1; else if (λ > r) code |= 2;\n      if (φ < -r) code |= 4; else if (φ > r) code |= 8;\n      return code;\n    }\n  }\n  function d3_geom_clipLine(x0, y0, x1, y1) {\n    return function(line) {\n      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n      r = x0 - ax;\n      if (!dx && r > 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dx > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = x1 - ax;\n      if (!dx && r < 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dx > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      r = y0 - ay;\n      if (!dy && r > 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dy > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = y1 - ay;\n      if (!dy && r < 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dy > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      if (t0 > 0) line.a = {\n        x: ax + t0 * dx,\n        y: ay + t0 * dy\n      };\n      if (t1 < 1) line.b = {\n        x: ax + t1 * dx,\n        y: ay + t1 * dy\n      };\n      return line;\n    };\n  }\n  var d3_geo_clipExtentMAX = 1e9;\n  d3.geo.clipExtent = function() {\n    var x0, y0, x1, y1, stream, clip, clipExtent = {\n      stream: function(output) {\n        if (stream) stream.valid = false;\n        stream = clip(output);\n        stream.valid = true;\n        return stream;\n      },\n      extent: function(_) {\n        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n        if (stream) stream.valid = false, stream = null;\n        return clipExtent;\n      }\n    };\n    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);\n  };\n  function d3_geo_clipExtent(x0, y0, x1, y1) {\n    return function(listener) {\n      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          listener = bufferListener;\n          segments = [];\n          polygon = [];\n          clean = true;\n        },\n        polygonEnd: function() {\n          listener = listener_;\n          segments = d3.merge(segments);\n          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;\n          if (inside || visible) {\n            listener.polygonStart();\n            if (inside) {\n              listener.lineStart();\n              interpolate(null, null, 1, listener);\n              listener.lineEnd();\n            }\n            if (visible) {\n              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n            }\n            listener.polygonEnd();\n          }\n          segments = polygon = ring = null;\n        }\n      };\n      function insidePolygon(p) {\n        var wn = 0, n = polygon.length, y = p[1];\n        for (var i = 0; i < n; ++i) {\n          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {\n            b = v[j];\n            if (a[1] <= y) {\n              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;\n            } else {\n              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;\n            }\n            a = b;\n          }\n        }\n        return wn !== 0;\n      }\n      function interpolate(from, to, direction, listener) {\n        var a = 0, a1 = 0;\n        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n          do {\n            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n          } while ((a = (a + direction + 4) % 4) !== a1);\n        } else {\n          listener.point(to[0], to[1]);\n        }\n      }\n      function pointVisible(x, y) {\n        return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n      }\n      function point(x, y) {\n        if (pointVisible(x, y)) listener.point(x, y);\n      }\n      var x__, y__, v__, x_, y_, v_, first, clean;\n      function lineStart() {\n        clip.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferListener.rejoin();\n          segments.push(bufferListener.buffer());\n        }\n        clip.point = point;\n        if (v_) listener.lineEnd();\n      }\n      function linePoint(x, y) {\n        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n        var v = pointVisible(x, y);\n        if (polygon) ring.push([ x, y ]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            listener.lineStart();\n            listener.point(x, y);\n          }\n        } else {\n          if (v && v_) listener.point(x, y); else {\n            var l = {\n              a: {\n                x: x_,\n                y: y_\n              },\n              b: {\n                x: x,\n                y: y\n              }\n            };\n            if (clipLine(l)) {\n              if (!v_) {\n                listener.lineStart();\n                listener.point(l.a.x, l.a.y);\n              }\n              listener.point(l.b.x, l.b.y);\n              if (!v) listener.lineEnd();\n              clean = false;\n            } else if (v) {\n              listener.lineStart();\n              listener.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n      return clip;\n    };\n    function corner(p, direction) {\n      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n    }\n    function compare(a, b) {\n      return comparePoints(a.x, b.x);\n    }\n    function comparePoints(a, b) {\n      var ca = corner(a, 1), cb = corner(b, 1);\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }\n  }\n  function d3_geo_conic(projectAt) {\n    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);\n    p.parallels = function(_) {\n      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];\n      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n    };\n    return p;\n  }\n  function d3_geo_conicEqualArea(φ0, φ1) {\n    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;\n    function forward(λ, φ) {\n      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = ρ0 - y;\n      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEqualArea = function() {\n    return d3_geo_conic(d3_geo_conicEqualArea);\n  }).raw = d3_geo_conicEqualArea;\n  d3.geo.albers = function() {\n    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);\n  };\n  d3.geo.albersUsa = function() {\n    var lower48 = d3.geo.albers();\n    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);\n    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);\n    var point, pointStream = {\n      point: function(x, y) {\n        point = [ x, y ];\n      }\n    }, lower48Point, alaskaPoint, hawaiiPoint;\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      point = null;\n      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);\n      return point;\n    }\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n    };\n    albersUsa.stream = function(stream) {\n      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n      return {\n        point: function(x, y) {\n          lower48Stream.point(x, y);\n          alaskaStream.point(x, y);\n          hawaiiStream.point(x, y);\n        },\n        sphere: function() {\n          lower48Stream.sphere();\n          alaskaStream.sphere();\n          hawaiiStream.sphere();\n        },\n        lineStart: function() {\n          lower48Stream.lineStart();\n          alaskaStream.lineStart();\n          hawaiiStream.lineStart();\n        },\n        lineEnd: function() {\n          lower48Stream.lineEnd();\n          alaskaStream.lineEnd();\n          hawaiiStream.lineEnd();\n        },\n        polygonStart: function() {\n          lower48Stream.polygonStart();\n          alaskaStream.polygonStart();\n          hawaiiStream.polygonStart();\n        },\n        polygonEnd: function() {\n          lower48Stream.polygonEnd();\n          alaskaStream.polygonEnd();\n          hawaiiStream.polygonEnd();\n        }\n      };\n    };\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_);\n      alaska.precision(_);\n      hawaii.precision(_);\n      return albersUsa;\n    };\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_);\n      alaska.scale(_ * .35);\n      hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      return albersUsa;\n    };\n    return albersUsa.scale(1070);\n  };\n  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_pathAreaPolygon = 0;\n      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n    }\n  };\n  function d3_geo_pathAreaRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathArea.point = function(x, y) {\n      d3_geo_pathArea.point = nextPoint;\n      x00 = x0 = x, y00 = y0 = y;\n    };\n    function nextPoint(x, y) {\n      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n      x0 = x, y0 = y;\n    }\n    d3_geo_pathArea.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n  var d3_geo_pathBounds = {\n    point: d3_geo_pathBoundsPoint,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_pathBoundsPoint(x, y) {\n    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n  }\n  function d3_geo_pathBuffer() {\n    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = d3_geo_pathBufferCircle(_);\n        return stream;\n      },\n      result: function() {\n        if (buffer.length) {\n          var result = buffer.join(\"\");\n          buffer = [];\n          return result;\n        }\n      }\n    };\n    function point(x, y) {\n      buffer.push(\"M\", x, \",\", y, pointCircle);\n    }\n    function pointLineStart(x, y) {\n      buffer.push(\"M\", x, \",\", y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      buffer.push(\"L\", x, \",\", y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      buffer.push(\"Z\");\n    }\n    return stream;\n  }\n  function d3_geo_pathBufferCircle(radius) {\n    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n  }\n  var d3_geo_pathCentroid = {\n    point: d3_geo_pathCentroidPoint,\n    lineStart: d3_geo_pathCentroidLineStart,\n    lineEnd: d3_geo_pathCentroidLineEnd,\n    polygonStart: function() {\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n    }\n  };\n  function d3_geo_pathCentroidPoint(x, y) {\n    d3_geo_centroidX0 += x;\n    d3_geo_centroidY0 += y;\n    ++d3_geo_centroidZ0;\n  }\n  function d3_geo_pathCentroidLineStart() {\n    var x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n  }\n  function d3_geo_pathCentroidLineEnd() {\n    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n  }\n  function d3_geo_pathCentroidRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      z = y0 * x - x0 * y;\n      d3_geo_centroidX2 += z * (x0 + x);\n      d3_geo_centroidY2 += z * (y0 + y);\n      d3_geo_centroidZ2 += z * 3;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n    d3_geo_pathCentroid.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  function d3_geo_pathContext(context) {\n    var pointRadius = 4.5;\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n      result: d3_noop\n    };\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, τ);\n    }\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      context.closePath();\n    }\n    return stream;\n  }\n  function d3_geo_resample(project) {\n    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;\n    function resample(stream) {\n      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n    }\n    function resampleNone(stream) {\n      return d3_geo_transformPoint(stream, function(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      });\n    }\n    function resampleRecursive(stream) {\n      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n      var resample = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          stream.polygonStart();\n          resample.lineStart = ringStart;\n        },\n        polygonEnd: function() {\n          stream.polygonEnd();\n          resample.lineStart = lineStart;\n        }\n      };\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n      function lineStart() {\n        x0 = NaN;\n        resample.point = linePoint;\n        stream.lineStart();\n      }\n      function linePoint(λ, φ) {\n        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n      function lineEnd() {\n        resample.point = point;\n        stream.lineEnd();\n      }\n      function ringStart() {\n        lineStart();\n        resample.point = ringPoint;\n        resample.lineEnd = ringEnd;\n      }\n      function ringPoint(λ, φ) {\n        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resample.point = linePoint;\n      }\n      function ringEnd() {\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n        resample.lineEnd = lineEnd;\n        lineEnd();\n      }\n      return resample;\n    }\n    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n      if (d2 > 4 * δ2 && depth--) {\n        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    resample.precision = function(_) {\n      if (!arguments.length) return Math.sqrt(δ2);\n      maxDepth = (δ2 = _ * _) > 0 && 16;\n      return resample;\n    };\n    return resample;\n  }\n  d3.geo.path = function() {\n    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n        d3.geo.stream(object, cacheStream);\n      }\n      return contextStream.result();\n    }\n    path.area = function(object) {\n      d3_geo_pathAreaSum = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n      return d3_geo_pathAreaSum;\n    };\n    path.centroid = function(object) {\n      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n    };\n    path.bounds = function(object) {\n      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];\n    };\n    path.projection = function(_) {\n      if (!arguments.length) return projection;\n      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n      return reset();\n    };\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return reset();\n    };\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n    function reset() {\n      cacheStream = null;\n      return path;\n    }\n    return path.projection(d3.geo.albersUsa()).context(null);\n  };\n  function d3_geo_pathProjectStream(project) {\n    var resample = d3_geo_resample(function(x, y) {\n      return project([ x * d3_degrees, y * d3_degrees ]);\n    });\n    return function(stream) {\n      return d3_geo_projectionRadians(resample(stream));\n    };\n  }\n  d3.geo.transform = function(methods) {\n    return {\n      stream: function(stream) {\n        var transform = new d3_geo_transform(stream);\n        for (var k in methods) transform[k] = methods[k];\n        return transform;\n      }\n    };\n  };\n  function d3_geo_transform(stream) {\n    this.stream = stream;\n  }\n  d3_geo_transform.prototype = {\n    point: function(x, y) {\n      this.stream.point(x, y);\n    },\n    sphere: function() {\n      this.stream.sphere();\n    },\n    lineStart: function() {\n      this.stream.lineStart();\n    },\n    lineEnd: function() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function() {\n      this.stream.polygonEnd();\n    }\n  };\n  function d3_geo_transformPoint(stream, point) {\n    return {\n      point: point,\n      sphere: function() {\n        stream.sphere();\n      },\n      lineStart: function() {\n        stream.lineStart();\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n      },\n      polygonStart: function() {\n        stream.polygonStart();\n      },\n      polygonEnd: function() {\n        stream.polygonEnd();\n      }\n    };\n  }\n  d3.geo.projection = d3_geo_projection;\n  d3.geo.projectionMutator = d3_geo_projectionMutator;\n  function d3_geo_projection(project) {\n    return d3_geo_projectionMutator(function() {\n      return project;\n    })();\n  }\n  function d3_geo_projectionMutator(projectAt) {\n    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {\n      x = project(x, y);\n      return [ x[0] * k + δx, δy - x[1] * k ];\n    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n    function projection(point) {\n      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n      return [ point[0] * k + δx, δy - point[1] * k ];\n    }\n    function invert(point) {\n      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];\n    }\n    projection.stream = function(output) {\n      if (stream) stream.valid = false;\n      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n      stream.valid = true;\n      return stream;\n    };\n    projection.clipAngle = function(_) {\n      if (!arguments.length) return clipAngle;\n      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n      return invalidate();\n    };\n    projection.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent;\n      clipExtent = _;\n      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n      return invalidate();\n    };\n    projection.scale = function(_) {\n      if (!arguments.length) return k;\n      k = +_;\n      return reset();\n    };\n    projection.translate = function(_) {\n      if (!arguments.length) return [ x, y ];\n      x = +_[0];\n      y = +_[1];\n      return reset();\n    };\n    projection.center = function(_) {\n      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];\n      λ = _[0] % 360 * d3_radians;\n      φ = _[1] % 360 * d3_radians;\n      return reset();\n    };\n    projection.rotate = function(_) {\n      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];\n      δλ = _[0] % 360 * d3_radians;\n      δφ = _[1] % 360 * d3_radians;\n      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;\n      return reset();\n    };\n    d3.rebind(projection, projectResample, \"precision\");\n    function reset() {\n      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n      var center = project(λ, φ);\n      δx = x - center[0] * k;\n      δy = y + center[1] * k;\n      return invalidate();\n    }\n    function invalidate() {\n      if (stream) stream.valid = false, stream = null;\n      return projection;\n    }\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return reset();\n    };\n  }\n  function d3_geo_projectionRadians(stream) {\n    return d3_geo_transformPoint(stream, function(x, y) {\n      stream.point(x * d3_radians, y * d3_radians);\n    });\n  }\n  function d3_geo_equirectangular(λ, φ) {\n    return [ λ, φ ];\n  }\n  (d3.geo.equirectangular = function() {\n    return d3_geo_projection(d3_geo_equirectangular);\n  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n  d3.geo.rotation = function(rotate) {\n    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    }\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    };\n    return forward;\n  };\n  function d3_geo_identityRotation(λ, φ) {\n    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n  }\n  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n  function d3_geo_rotation(δλ, δφ, δγ) {\n    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n  }\n  function d3_geo_forwardRotationλ(δλ) {\n    return function(λ, φ) {\n      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n    };\n  }\n  function d3_geo_rotationλ(δλ) {\n    var rotation = d3_geo_forwardRotationλ(δλ);\n    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n    return rotation;\n  }\n  function d3_geo_rotationφγ(δφ, δγ) {\n    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);\n    function rotation(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];\n    }\n    rotation.invert = function(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];\n    };\n    return rotation;\n  }\n  d3.geo.circle = function() {\n    var origin = [ 0, 0 ], angle, precision = 6, interpolate;\n    function circle() {\n      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n      interpolate(null, null, 1, {\n        point: function(x, y) {\n          ring.push(x = rotate(x, y));\n          x[0] *= d3_degrees, x[1] *= d3_degrees;\n        }\n      });\n      return {\n        type: \"Polygon\",\n        coordinates: [ ring ]\n      };\n    }\n    circle.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return circle;\n    };\n    circle.angle = function(x) {\n      if (!arguments.length) return angle;\n      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n      return circle;\n    };\n    circle.precision = function(_) {\n      if (!arguments.length) return precision;\n      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n      return circle;\n    };\n    return circle.angle(90);\n  };\n  function d3_geo_circleInterpolate(radius, precision) {\n    var cr = Math.cos(radius), sr = Math.sin(radius);\n    return function(from, to, direction, listener) {\n      var step = direction * precision;\n      if (from != null) {\n        from = d3_geo_circleAngle(cr, from);\n        to = d3_geo_circleAngle(cr, to);\n        if (direction > 0 ? from < to : from > to) from += direction * τ;\n      } else {\n        from = radius + direction * τ;\n        to = radius - .5 * step;\n      }\n      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {\n        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);\n      }\n    };\n  }\n  function d3_geo_circleAngle(cr, point) {\n    var a = d3_geo_cartesian(point);\n    a[0] -= cr;\n    d3_geo_cartesianNormalize(a);\n    var angle = d3_acos(-a[1]);\n    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n  }\n  d3.geo.distance = function(a, b) {\n    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n  };\n  d3.geo.graticule = function() {\n    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;\n    function graticule() {\n      return {\n        type: \"MultiLineString\",\n        coordinates: lines()\n      };\n    }\n    function lines() {\n      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n        return abs(x % DX) > ε;\n      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {\n        return abs(y % DY) > ε;\n      }).map(y));\n    }\n    graticule.lines = function() {\n      return lines().map(function(coordinates) {\n        return {\n          type: \"LineString\",\n          coordinates: coordinates\n        };\n      });\n    };\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]\n      };\n    };\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.minorExtent();\n      return graticule.majorExtent(_).minorExtent(_);\n    };\n    graticule.majorExtent = function(_) {\n      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.minorExtent = function(_) {\n      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.minorStep();\n      return graticule.majorStep(_).minorStep(_);\n    };\n    graticule.majorStep = function(_) {\n      if (!arguments.length) return [ DX, DY ];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n    graticule.minorStep = function(_) {\n      if (!arguments.length) return [ dx, dy ];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = d3_geo_graticuleX(y0, y1, 90);\n      y = d3_geo_graticuleY(x0, x1, precision);\n      X = d3_geo_graticuleX(Y0, Y1, 90);\n      Y = d3_geo_graticuleY(X0, X1, precision);\n      return graticule;\n    };\n    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n  };\n  function d3_geo_graticuleX(y0, y1, dy) {\n    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n    return function(x) {\n      return y.map(function(y) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_geo_graticuleY(x0, x1, dx) {\n    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n    return function(y) {\n      return x.map(function(x) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_source(d) {\n    return d.source;\n  }\n  function d3_target(d) {\n    return d.target;\n  }\n  d3.geo.greatArc = function() {\n    var source = d3_source, source_, target = d3_target, target_;\n    function greatArc() {\n      return {\n        type: \"LineString\",\n        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]\n      };\n    }\n    greatArc.distance = function() {\n      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n    };\n    greatArc.source = function(_) {\n      if (!arguments.length) return source;\n      source = _, source_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.target = function(_) {\n      if (!arguments.length) return target;\n      target = _, target_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.precision = function() {\n      return arguments.length ? greatArc : 0;\n    };\n    return greatArc;\n  };\n  d3.geo.interpolate = function(source, target) {\n    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n  };\n  function d3_geo_interpolate(x0, y0, x1, y1) {\n    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n    var interpolate = d ? function(t) {\n      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];\n    } : function() {\n      return [ x0 * d3_degrees, y0 * d3_degrees ];\n    };\n    interpolate.distance = d;\n    return interpolate;\n  }\n  d3.geo.length = function(object) {\n    d3_geo_lengthSum = 0;\n    d3.geo.stream(object, d3_geo_length);\n    return d3_geo_lengthSum;\n  };\n  var d3_geo_lengthSum;\n  var d3_geo_length = {\n    sphere: d3_noop,\n    point: d3_noop,\n    lineStart: d3_geo_lengthLineStart,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_lengthLineStart() {\n    var λ0, sinφ0, cosφ0;\n    d3_geo_length.point = function(λ, φ) {\n      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n      d3_geo_length.point = nextPoint;\n    };\n    d3_geo_length.lineEnd = function() {\n      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n    };\n    function nextPoint(λ, φ) {\n      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n    }\n  }\n  function d3_geo_azimuthal(scale, angle) {\n    function azimuthal(λ, φ) {\n      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);\n      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];\n    }\n    azimuthal.invert = function(x, y) {\n      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);\n      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];\n    };\n    return azimuthal;\n  }\n  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {\n    return Math.sqrt(2 / (1 + cosλcosφ));\n  }, function(ρ) {\n    return 2 * Math.asin(ρ / 2);\n  });\n  (d3.geo.azimuthalEqualArea = function() {\n    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n  }).raw = d3_geo_azimuthalEqualArea;\n  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {\n    var c = Math.acos(cosλcosφ);\n    return c && c / Math.sin(c);\n  }, d3_identity);\n  (d3.geo.azimuthalEquidistant = function() {\n    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n  }).raw = d3_geo_azimuthalEquidistant;\n  function d3_geo_conicConformal(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), t = function(φ) {\n      return Math.tan(π / 4 + φ / 2);\n    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n    if (!n) return d3_geo_mercator;\n    function forward(λ, φ) {\n      if (F > 0) {\n        if (φ < -halfπ + ε) φ = -halfπ + ε;\n      } else {\n        if (φ > halfπ - ε) φ = halfπ - ε;\n      }\n      var ρ = F / Math.pow(t(φ), n);\n      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];\n    };\n    return forward;\n  }\n  (d3.geo.conicConformal = function() {\n    return d3_geo_conic(d3_geo_conicConformal);\n  }).raw = d3_geo_conicConformal;\n  function d3_geo_conicEquidistant(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;\n    if (abs(n) < ε) return d3_geo_equirectangular;\n    function forward(λ, φ) {\n      var ρ = G - φ;\n      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = G - y;\n      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEquidistant = function() {\n    return d3_geo_conic(d3_geo_conicEquidistant);\n  }).raw = d3_geo_conicEquidistant;\n  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / cosλcosφ;\n  }, Math.atan);\n  (d3.geo.gnomonic = function() {\n    return d3_geo_projection(d3_geo_gnomonic);\n  }).raw = d3_geo_gnomonic;\n  function d3_geo_mercator(λ, φ) {\n    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];\n  }\n  d3_geo_mercator.invert = function(x, y) {\n    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];\n  };\n  function d3_geo_mercatorProjection(project) {\n    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;\n    m.scale = function() {\n      var v = scale.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.translate = function() {\n      var v = translate.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.clipExtent = function(_) {\n      var v = clipExtent.apply(m, arguments);\n      if (v === m) {\n        if (clipAuto = _ == null) {\n          var k = π * scale(), t = translate();\n          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);\n        }\n      } else if (clipAuto) {\n        v = null;\n      }\n      return v;\n    };\n    return m.clipExtent(null);\n  }\n  (d3.geo.mercator = function() {\n    return d3_geo_mercatorProjection(d3_geo_mercator);\n  }).raw = d3_geo_mercator;\n  var d3_geo_orthographic = d3_geo_azimuthal(function() {\n    return 1;\n  }, Math.asin);\n  (d3.geo.orthographic = function() {\n    return d3_geo_projection(d3_geo_orthographic);\n  }).raw = d3_geo_orthographic;\n  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / (1 + cosλcosφ);\n  }, function(ρ) {\n    return 2 * Math.atan(ρ);\n  });\n  (d3.geo.stereographic = function() {\n    return d3_geo_projection(d3_geo_stereographic);\n  }).raw = d3_geo_stereographic;\n  function d3_geo_transverseMercator(λ, φ) {\n    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];\n  }\n  d3_geo_transverseMercator.invert = function(x, y) {\n    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];\n  };\n  (d3.geo.transverseMercator = function() {\n    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n    projection.center = function(_) {\n      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);\n    };\n    projection.rotate = function(_) {\n      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), \n      [ _[0], _[1], _[2] - 90 ]);\n    };\n    return rotate([ 0, 0, 90 ]);\n  }).raw = d3_geo_transverseMercator;\n  d3.geom = {};\n  function d3_geom_pointX(d) {\n    return d[0];\n  }\n  function d3_geom_pointY(d) {\n    return d[1];\n  }\n  d3.geom.hull = function(vertices) {\n    var x = d3_geom_pointX, y = d3_geom_pointY;\n    if (arguments.length) return hull(vertices);\n    function hull(data) {\n      if (data.length < 3) return [];\n      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];\n      for (i = 0; i < n; i++) {\n        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);\n      }\n      points.sort(d3_geom_hullOrder);\n      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);\n      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);\n      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);\n      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);\n      return polygon;\n    }\n    hull.x = function(_) {\n      return arguments.length ? (x = _, hull) : x;\n    };\n    hull.y = function(_) {\n      return arguments.length ? (y = _, hull) : y;\n    };\n    return hull;\n  };\n  function d3_geom_hullUpper(points) {\n    var n = points.length, hull = [ 0, 1 ], hs = 2;\n    for (var i = 2; i < n; i++) {\n      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;\n      hull[hs++] = i;\n    }\n    return hull.slice(0, hs);\n  }\n  function d3_geom_hullOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n  d3.geom.polygon = function(coordinates) {\n    d3_subclass(coordinates, d3_geom_polygonPrototype);\n    return coordinates;\n  };\n  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n  d3_geom_polygonPrototype.area = function() {\n    var i = -1, n = this.length, a, b = this[n - 1], area = 0;\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n    return area * .5;\n  };\n  d3_geom_polygonPrototype.centroid = function(k) {\n    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;\n    if (!arguments.length) k = -1 / (6 * this.area());\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n    return [ x * k, y * k ];\n  };\n  d3_geom_polygonPrototype.clip = function(subject) {\n    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n    while (++i < n) {\n      input = subject.slice();\n      subject.length = 0;\n      b = this[i];\n      c = input[(m = input.length - closed) - 1];\n      j = -1;\n      while (++j < m) {\n        d = input[j];\n        if (d3_geom_polygonInside(d, a, b)) {\n          if (!d3_geom_polygonInside(c, a, b)) {\n            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n          }\n          subject.push(d);\n        } else if (d3_geom_polygonInside(c, a, b)) {\n          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n        }\n        c = d;\n      }\n      if (closed) subject.push(subject[0]);\n      a = b;\n    }\n    return subject;\n  };\n  function d3_geom_polygonInside(p, a, b) {\n    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);\n  }\n  function d3_geom_polygonIntersect(c, d, a, b) {\n    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n    return [ x1 + ua * x21, y1 + ua * y21 ];\n  }\n  function d3_geom_polygonClosed(coordinates) {\n    var a = coordinates[0], b = coordinates[coordinates.length - 1];\n    return !(a[0] - b[0] || a[1] - b[1]);\n  }\n  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n  function d3_geom_voronoiBeach() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.edge = this.site = this.circle = null;\n  }\n  function d3_geom_voronoiCreateBeach(site) {\n    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n    beach.site = site;\n    return beach;\n  }\n  function d3_geom_voronoiDetachBeach(beach) {\n    d3_geom_voronoiDetachCircle(beach);\n    d3_geom_voronoiBeaches.remove(beach);\n    d3_geom_voronoiBeachPool.push(beach);\n    d3_geom_voronoiRedBlackNode(beach);\n  }\n  function d3_geom_voronoiRemoveBeach(beach) {\n    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {\n      x: x,\n      y: y\n    }, previous = beach.P, next = beach.N, disappearing = [ beach ];\n    d3_geom_voronoiDetachBeach(beach);\n    var lArc = previous;\n    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      d3_geom_voronoiDetachBeach(lArc);\n      lArc = previous;\n    }\n    disappearing.unshift(lArc);\n    d3_geom_voronoiDetachCircle(lArc);\n    var rArc = next;\n    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      d3_geom_voronoiDetachBeach(rArc);\n      rArc = next;\n    }\n    disappearing.push(rArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var nArcs = disappearing.length, iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiAddBeach(site) {\n    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;\n    while (node) {\n      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n      if (dxl > ε) node = node.L; else {\n        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n        if (dxr > ε) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -ε) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -ε) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n    var newArc = d3_geom_voronoiCreateBeach(site);\n    d3_geom_voronoiBeaches.insert(lArc, newArc);\n    if (!lArc && !rArc) return;\n    if (lArc === rArc) {\n      d3_geom_voronoiDetachCircle(lArc);\n      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n      d3_geom_voronoiBeaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      d3_geom_voronoiAttachCircle(lArc);\n      d3_geom_voronoiAttachCircle(rArc);\n      return;\n    }\n    if (!rArc) {\n      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      return;\n    }\n    d3_geom_voronoiDetachCircle(lArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n      x: (cy * hb - by * hc) / d + ax,\n      y: (bx * hc - cx * hb) / d + ay\n    };\n    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;\n    if (!pby2) return rfocx;\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n    site = lArc.site;\n    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;\n    if (!plby2) return lfocx;\n    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n    return (rfocx + lfocx) / 2;\n  }\n  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site.y === directrix ? site.x : Infinity;\n  }\n  function d3_geom_voronoiCell(site) {\n    this.site = site;\n    this.edges = [];\n  }\n  d3_geom_voronoiCell.prototype.prepare = function() {\n    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;\n    while (iHalfEdge--) {\n      edge = halfEdges[iHalfEdge].edge;\n      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n    }\n    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n    return halfEdges.length;\n  };\n  function d3_geom_voronoiCloseCells(extent) {\n    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n    while (iCell--) {\n      cell = cells[iCell];\n      if (!cell || !cell.prepare()) continue;\n      halfEdges = cell.edges;\n      nHalfEdges = halfEdges.length;\n      iHalfEdge = 0;\n      while (iHalfEdge < nHalfEdges) {\n        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {\n          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n            x: x0,\n            y: abs(x2 - x0) < ε ? y2 : y1\n          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {\n            x: abs(y2 - y1) < ε ? x2 : x1,\n            y: y1\n          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {\n            x: x1,\n            y: abs(x2 - x1) < ε ? y2 : y0\n          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {\n            x: abs(y2 - y0) < ε ? x2 : x0,\n            y: y0\n          } : null), cell.site, null));\n          ++nHalfEdges;\n        }\n      }\n    }\n  }\n  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n    return b.angle - a.angle;\n  }\n  function d3_geom_voronoiCircle() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.x = this.y = this.arc = this.site = this.cy = null;\n  }\n  function d3_geom_voronoiAttachCircle(arc) {\n    var lArc = arc.P, rArc = arc.N;\n    if (!lArc || !rArc) return;\n    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\n    if (lSite === rSite) return;\n    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -ε2) return;\n    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = cy + Math.sqrt(x * x + y * y);\n    circle.cy = cy;\n    arc.circle = circle;\n    var before = null, node = d3_geom_voronoiCircles._;\n    while (node) {\n      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n        if (node.L) node = node.L; else {\n          before = node.P;\n          break;\n        }\n      } else {\n        if (node.R) node = node.R; else {\n          before = node;\n          break;\n        }\n      }\n    }\n    d3_geom_voronoiCircles.insert(before, circle);\n    if (!before) d3_geom_voronoiFirstCircle = circle;\n  }\n  function d3_geom_voronoiDetachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n      d3_geom_voronoiCircles.remove(circle);\n      d3_geom_voronoiCirclePool.push(circle);\n      d3_geom_voronoiRedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n  function d3_geom_voronoiClipEdges(extent) {\n    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n    while (i--) {\n      e = edges[i];\n      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {\n        e.a = e.b = null;\n        edges.splice(i, 1);\n      }\n    }\n  }\n  function d3_geom_voronoiConnectEdge(edge, extent) {\n    var vb = edge.b;\n    if (vb) return true;\n    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!va) va = {\n          x: fx,\n          y: y0\n        }; else if (va.y >= y1) return;\n        vb = {\n          x: fx,\n          y: y1\n        };\n      } else {\n        if (!va) va = {\n          x: fx,\n          y: y1\n        }; else if (va.y < y0) return;\n        vb = {\n          x: fx,\n          y: y0\n        };\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!va) va = {\n            x: (y0 - fb) / fm,\n            y: y0\n          }; else if (va.y >= y1) return;\n          vb = {\n            x: (y1 - fb) / fm,\n            y: y1\n          };\n        } else {\n          if (!va) va = {\n            x: (y1 - fb) / fm,\n            y: y1\n          }; else if (va.y < y0) return;\n          vb = {\n            x: (y0 - fb) / fm,\n            y: y0\n          };\n        }\n      } else {\n        if (ly < ry) {\n          if (!va) va = {\n            x: x0,\n            y: fm * x0 + fb\n          }; else if (va.x >= x1) return;\n          vb = {\n            x: x1,\n            y: fm * x1 + fb\n          };\n        } else {\n          if (!va) va = {\n            x: x1,\n            y: fm * x1 + fb\n          }; else if (va.x < x0) return;\n          vb = {\n            x: x0,\n            y: fm * x0 + fb\n          };\n        }\n      }\n    }\n    edge.a = va;\n    edge.b = vb;\n    return true;\n  }\n  function d3_geom_voronoiEdge(lSite, rSite) {\n    this.l = lSite;\n    this.r = rSite;\n    this.a = this.b = null;\n  }\n  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n    d3_geom_voronoiEdges.push(edge);\n    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n    return edge;\n  }\n  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, null);\n    edge.a = va;\n    edge.b = vb;\n    d3_geom_voronoiEdges.push(edge);\n    return edge;\n  }\n  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n    if (!edge.a && !edge.b) {\n      edge.a = vertex;\n      edge.l = lSite;\n      edge.r = rSite;\n    } else if (edge.l === rSite) {\n      edge.b = vertex;\n    } else {\n      edge.a = vertex;\n    }\n  }\n  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n    var va = edge.a, vb = edge.b;\n    this.edge = edge;\n    this.site = lSite;\n    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n  }\n  d3_geom_voronoiHalfEdge.prototype = {\n    start: function() {\n      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n    },\n    end: function() {\n      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n    }\n  };\n  function d3_geom_voronoiRedBlackTree() {\n    this._ = null;\n  }\n  function d3_geom_voronoiRedBlackNode(node) {\n    node.U = node.C = node.L = node.R = node.P = node.N = null;\n  }\n  d3_geom_voronoiRedBlackTree.prototype = {\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = d3_geom_voronoiRedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              d3_geom_voronoiRedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n      var parent = node.U, sibling, left = node.L, right = node.R, next, red;\n      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);\n      if (parent) {\n        if (parent.L === node) parent.L = next; else parent.R = next;\n      } else {\n        this._ = next;\n      }\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) {\n        node.C = false;\n        return;\n      }\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n      if (node) node.C = false;\n    }\n  };\n  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n    var p = node, q = node.R, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n    var p = node, q = node.L, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n  function d3_geom_voronoiRedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n  function d3_geom_voronoi(sites, bbox) {\n    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;\n    d3_geom_voronoiEdges = [];\n    d3_geom_voronoiCells = new Array(sites.length);\n    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n    while (true) {\n      circle = d3_geom_voronoiFirstCircle;\n      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {\n        if (site.x !== x0 || site.y !== y0) {\n          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n          d3_geom_voronoiAddBeach(site);\n          x0 = site.x, y0 = site.y;\n        }\n        site = sites.pop();\n      } else if (circle) {\n        d3_geom_voronoiRemoveBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n    var diagram = {\n      cells: d3_geom_voronoiCells,\n      edges: d3_geom_voronoiEdges\n    };\n    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n    return diagram;\n  }\n  function d3_geom_voronoiVertexOrder(a, b) {\n    return b.y - a.y || b.x - a.x;\n  }\n  d3.geom.voronoi = function(points) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;\n    if (points) return voronoi(points);\n    function voronoi(data) {\n      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {\n        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {\n          var s = e.start();\n          return [ s.x, s.y ];\n        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n        polygon.point = data[i];\n      });\n      return polygons;\n    }\n    function sites(data) {\n      return data.map(function(d, i) {\n        return {\n          x: Math.round(fx(d, i) / ε) * ε,\n          y: Math.round(fy(d, i) / ε) * ε,\n          i: i\n        };\n      });\n    }\n    voronoi.links = function(data) {\n      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {\n        return edge.l && edge.r;\n      }).map(function(edge) {\n        return {\n          source: data[edge.l.i],\n          target: data[edge.r.i]\n        };\n      });\n    };\n    voronoi.triangles = function(data) {\n      var triangles = [];\n      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {\n        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n        while (++j < m) {\n          e0 = e1;\n          s0 = s1;\n          e1 = edges[j].edge;\n          s1 = e1.l === site ? e1.r : e1.l;\n          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {\n            triangles.push([ data[i], data[s0.i], data[s1.i] ]);\n          }\n        }\n      });\n      return triangles;\n    };\n    voronoi.x = function(_) {\n      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n    };\n    voronoi.y = function(_) {\n      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n    };\n    voronoi.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n      return voronoi;\n    };\n    voronoi.size = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];\n      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);\n    };\n    return voronoi;\n  };\n  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];\n  function d3_geom_voronoiTriangleArea(a, b, c) {\n    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n  }\n  d3.geom.delaunay = function(vertices) {\n    return d3.geom.voronoi().triangles(vertices);\n  };\n  d3.geom.quadtree = function(points, x1, y1, x2, y2) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, compat;\n    if (compat = arguments.length) {\n      x = d3_geom_quadtreeCompatX;\n      y = d3_geom_quadtreeCompatY;\n      if (compat === 3) {\n        y2 = y1;\n        x2 = x1;\n        y1 = x1 = 0;\n      }\n      return quadtree(points);\n    }\n    function quadtree(data) {\n      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;\n      if (x1 != null) {\n        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n      } else {\n        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n        xs = [], ys = [];\n        n = data.length;\n        if (compat) for (i = 0; i < n; ++i) {\n          d = data[i];\n          if (d.x < x1_) x1_ = d.x;\n          if (d.y < y1_) y1_ = d.y;\n          if (d.x > x2_) x2_ = d.x;\n          if (d.y > y2_) y2_ = d.y;\n          xs.push(d.x);\n          ys.push(d.y);\n        } else for (i = 0; i < n; ++i) {\n          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);\n          if (x_ < x1_) x1_ = x_;\n          if (y_ < y1_) y1_ = y_;\n          if (x_ > x2_) x2_ = x_;\n          if (y_ > y2_) y2_ = y_;\n          xs.push(x_);\n          ys.push(y_);\n        }\n      }\n      var dx = x2_ - x1_, dy = y2_ - y1_;\n      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;\n      function insert(n, d, x, y, x1, y1, x2, y2) {\n        if (isNaN(x) || isNaN(y)) return;\n        if (n.leaf) {\n          var nx = n.x, ny = n.y;\n          if (nx != null) {\n            if (abs(nx - x) + abs(ny - y) < .01) {\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            } else {\n              var nPoint = n.point;\n              n.x = n.y = n.point = null;\n              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            }\n          } else {\n            n.x = x, n.y = y, n.point = d;\n          }\n        } else {\n          insertChild(n, d, x, y, x1, y1, x2, y2);\n        }\n      }\n      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;\n        n.leaf = false;\n        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n        if (right) x1 = xm; else x2 = xm;\n        if (below) y1 = ym; else y2 = ym;\n        insert(n, d, x, y, x1, y1, x2, y2);\n      }\n      var root = d3_geom_quadtreeNode();\n      root.add = function(d) {\n        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n      };\n      root.visit = function(f) {\n        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n      };\n      root.find = function(point) {\n        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n      };\n      i = -1;\n      if (x1 == null) {\n        while (++i < n) {\n          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n        }\n        --i;\n      } else data.forEach(root.add);\n      xs = ys = data = d = null;\n      return root;\n    }\n    quadtree.x = function(_) {\n      return arguments.length ? (x = _, quadtree) : x;\n    };\n    quadtree.y = function(_) {\n      return arguments.length ? (y = _, quadtree) : y;\n    };\n    quadtree.extent = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], \n      y2 = +_[1][1];\n      return quadtree;\n    };\n    quadtree.size = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n      return quadtree;\n    };\n    return quadtree;\n  };\n  function d3_geom_quadtreeCompatX(d) {\n    return d.x;\n  }\n  function d3_geom_quadtreeCompatY(d) {\n    return d.y;\n  }\n  function d3_geom_quadtreeNode() {\n    return {\n      leaf: true,\n      nodes: [],\n      point: null,\n      x: null,\n      y: null\n    };\n  }\n  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n    if (!f(node, x1, y1, x2, y2)) {\n      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;\n      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n    }\n  }\n  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n    var minDistance2 = Infinity, closestPoint;\n    (function find(node, x1, y1, x2, y2) {\n      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\n      if (point = node.point) {\n        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;\n        if (distance2 < minDistance2) {\n          var distance = Math.sqrt(minDistance2 = distance2);\n          x0 = x - distance, y0 = y - distance;\n          x3 = x + distance, y3 = y + distance;\n          closestPoint = point;\n        }\n      }\n      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;\n      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {\n        if (node = children[i & 3]) switch (i & 3) {\n         case 0:\n          find(node, x1, y1, xm, ym);\n          break;\n\n         case 1:\n          find(node, xm, y1, x2, ym);\n          break;\n\n         case 2:\n          find(node, x1, ym, xm, y2);\n          break;\n\n         case 3:\n          find(node, xm, ym, x2, y2);\n          break;\n        }\n      }\n    })(root, x0, y0, x3, y3);\n    return closestPoint;\n  }\n  d3.interpolateRgb = d3_interpolateRgb;\n  function d3_interpolateRgb(a, b) {\n    a = d3.rgb(a);\n    b = d3.rgb(b);\n    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;\n    return function(t) {\n      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n    };\n  }\n  d3.interpolateObject = d3_interpolateObject;\n  function d3_interpolateObject(a, b) {\n    var i = {}, c = {}, k;\n    for (k in a) {\n      if (k in b) {\n        i[k] = d3_interpolate(a[k], b[k]);\n      } else {\n        c[k] = a[k];\n      }\n    }\n    for (k in b) {\n      if (!(k in a)) {\n        c[k] = b[k];\n      }\n    }\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n  d3.interpolateNumber = d3_interpolateNumber;\n  function d3_interpolateNumber(a, b) {\n    a = +a, b = +b;\n    return function(t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n  d3.interpolateString = d3_interpolateString;\n  function d3_interpolateString(a, b) {\n    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n    a = a + \"\", b = b + \"\";\n    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) {\n        if (s[i]) s[i] += bm; else s[++i] = bm;\n      } else {\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: d3_interpolateNumber(am, bm)\n        });\n      }\n      bi = d3_interpolate_numberB.lastIndex;\n    }\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; else s[++i] = bs;\n    }\n    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {\n      return b(t) + \"\";\n    }) : function() {\n      return b;\n    } : (b = q.length, function(t) {\n      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    });\n  }\n  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \"g\");\n  d3.interpolate = d3_interpolate;\n  function d3_interpolate(a, b) {\n    var i = d3.interpolators.length, f;\n    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;\n    return f;\n  }\n  d3.interpolators = [ function(a, b) {\n    var t = typeof b;\n    return (t === \"string\" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\\(|hsl\\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \"object\" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n  } ];\n  d3.interpolateArray = d3_interpolateArray;\n  function d3_interpolateArray(a, b) {\n    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;\n    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));\n    for (;i < na; ++i) c[i] = a[i];\n    for (;i < nb; ++i) c[i] = b[i];\n    return function(t) {\n      for (i = 0; i < n0; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n  var d3_ease_default = function() {\n    return d3_identity;\n  };\n  var d3_ease = d3.map({\n    linear: d3_ease_default,\n    poly: d3_ease_poly,\n    quad: function() {\n      return d3_ease_quad;\n    },\n    cubic: function() {\n      return d3_ease_cubic;\n    },\n    sin: function() {\n      return d3_ease_sin;\n    },\n    exp: function() {\n      return d3_ease_exp;\n    },\n    circle: function() {\n      return d3_ease_circle;\n    },\n    elastic: d3_ease_elastic,\n    back: d3_ease_back,\n    bounce: function() {\n      return d3_ease_bounce;\n    }\n  });\n  var d3_ease_mode = d3.map({\n    \"in\": d3_identity,\n    out: d3_ease_reverse,\n    \"in-out\": d3_ease_reflect,\n    \"out-in\": function(f) {\n      return d3_ease_reflect(d3_ease_reverse(f));\n    }\n  });\n  d3.ease = function(name) {\n    var i = name.indexOf(\"-\"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : \"in\";\n    t = d3_ease.get(t) || d3_ease_default;\n    m = d3_ease_mode.get(m) || d3_identity;\n    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n  };\n  function d3_ease_clamp(f) {\n    return function(t) {\n      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);\n    };\n  }\n  function d3_ease_reverse(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n  function d3_ease_reflect(f) {\n    return function(t) {\n      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n    };\n  }\n  function d3_ease_quad(t) {\n    return t * t;\n  }\n  function d3_ease_cubic(t) {\n    return t * t * t;\n  }\n  function d3_ease_cubicInOut(t) {\n    if (t <= 0) return 0;\n    if (t >= 1) return 1;\n    var t2 = t * t, t3 = t2 * t;\n    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n  }\n  function d3_ease_poly(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n  function d3_ease_sin(t) {\n    return 1 - Math.cos(t * halfπ);\n  }\n  function d3_ease_exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  function d3_ease_circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  function d3_ease_elastic(a, p) {\n    var s;\n    if (arguments.length < 2) p = .45;\n    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n    };\n  }\n  function d3_ease_back(s) {\n    if (!s) s = 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n  function d3_ease_bounce(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }\n  d3.interpolateHcl = d3_interpolateHcl;\n  function d3_interpolateHcl(a, b) {\n    a = d3.hcl(a);\n    b = d3.hcl(b);\n    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;\n    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateHsl = d3_interpolateHsl;\n  function d3_interpolateHsl(a, b) {\n    a = d3.hsl(a);\n    b = d3.hsl(b);\n    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;\n    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateLab = d3_interpolateLab;\n  function d3_interpolateLab(a, b) {\n    a = d3.lab(a);\n    b = d3.lab(b);\n    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;\n    return function(t) {\n      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";\n    };\n  }\n  d3.interpolateRound = d3_interpolateRound;\n  function d3_interpolateRound(a, b) {\n    b -= a;\n    return function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n  d3.transform = function(string) {\n    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");\n    return (d3.transform = function(string) {\n      if (string != null) {\n        g.setAttribute(\"transform\", string);\n        var t = g.transform.baseVal.consolidate();\n      }\n      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n    })(string);\n  };\n  function d3_transform(m) {\n    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n    if (r0[0] * r1[1] < r1[0] * r0[1]) {\n      r0[0] *= -1;\n      r0[1] *= -1;\n      kx *= -1;\n      kz *= -1;\n    }\n    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n    this.translate = [ m.e, m.f ];\n    this.scale = [ kx, ky ];\n    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n  }\n  d3_transform.prototype.toString = function() {\n    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n  };\n  function d3_transformDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n  function d3_transformNormalize(a) {\n    var k = Math.sqrt(d3_transformDot(a, a));\n    if (k) {\n      a[0] /= k;\n      a[1] /= k;\n    }\n    return k;\n  }\n  function d3_transformCombine(a, b, k) {\n    a[0] += k * b[0];\n    a[1] += k * b[1];\n    return a;\n  }\n  var d3_transformIdentity = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0\n  };\n  d3.interpolateTransform = d3_interpolateTransform;\n  function d3_interpolateTransformPop(s) {\n    return s.length ? s.pop() + \",\" : \"\";\n  }\n  function d3_interpolateTranslate(ta, tb, s, q) {\n    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {\n      var i = s.push(\"translate(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ta[0], tb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ta[1], tb[1])\n      });\n    } else if (tb[0] || tb[1]) {\n      s.push(\"translate(\" + tb + \")\");\n    }\n  }\n  function d3_interpolateRotate(ra, rb, s, q) {\n    if (ra !== rb) {\n      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"rotate(\", null, \")\") - 2,\n        x: d3_interpolateNumber(ra, rb)\n      });\n    } else if (rb) {\n      s.push(d3_interpolateTransformPop(s) + \"rotate(\" + rb + \")\");\n    }\n  }\n  function d3_interpolateSkew(wa, wb, s, q) {\n    if (wa !== wb) {\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"skewX(\", null, \")\") - 2,\n        x: d3_interpolateNumber(wa, wb)\n      });\n    } else if (wb) {\n      s.push(d3_interpolateTransformPop(s) + \"skewX(\" + wb + \")\");\n    }\n  }\n  function d3_interpolateScale(ka, kb, s, q) {\n    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {\n      var i = s.push(d3_interpolateTransformPop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ka[0], kb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ka[1], kb[1])\n      });\n    } else if (kb[0] !== 1 || kb[1] !== 1) {\n      s.push(d3_interpolateTransformPop(s) + \"scale(\" + kb + \")\");\n    }\n  }\n  function d3_interpolateTransform(a, b) {\n    var s = [], q = [];\n    a = d3.transform(a), b = d3.transform(b);\n    d3_interpolateTranslate(a.translate, b.translate, s, q);\n    d3_interpolateRotate(a.rotate, b.rotate, s, q);\n    d3_interpolateSkew(a.skew, b.skew, s, q);\n    d3_interpolateScale(a.scale, b.scale, s, q);\n    a = b = null;\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  }\n  function d3_uninterpolateNumber(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return (x - a) / b;\n    };\n  }\n  function d3_uninterpolateClamp(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return Math.max(0, Math.min(1, (x - a) / b));\n    };\n  }\n  d3.layout = {};\n  d3.layout.bundle = function() {\n    return function(links) {\n      var paths = [], i = -1, n = links.length;\n      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));\n      return paths;\n    };\n  };\n  function d3_layout_bundlePath(link) {\n    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n    while (start !== lca) {\n      start = start.parent;\n      points.push(start);\n    }\n    var k = points.length;\n    while (end !== lca) {\n      points.splice(k, 0, end);\n      end = end.parent;\n    }\n    return points;\n  }\n  function d3_layout_bundleAncestors(node) {\n    var ancestors = [], parent = node.parent;\n    while (parent != null) {\n      ancestors.push(node);\n      node = parent;\n      parent = parent.parent;\n    }\n    ancestors.push(node);\n    return ancestors;\n  }\n  function d3_layout_bundleLeastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n    while (aNode === bNode) {\n      sharedNode = aNode;\n      aNode = aNodes.pop();\n      bNode = bNodes.pop();\n    }\n    return sharedNode;\n  }\n  d3.layout.chord = function() {\n    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n    function relayout() {\n      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n      chords = [];\n      groups = [];\n      k = 0, i = -1;\n      while (++i < n) {\n        x = 0, j = -1;\n        while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(d3.range(n));\n        k += x;\n      }\n      if (sortGroups) {\n        groupIndex.sort(function(a, b) {\n          return sortGroups(groupSums[a], groupSums[b]);\n        });\n      }\n      if (sortSubgroups) {\n        subgroupIndex.forEach(function(d, i) {\n          d.sort(function(a, b) {\n            return sortSubgroups(matrix[i][a], matrix[i][b]);\n          });\n        });\n      }\n      k = (τ - padding * n) / k;\n      x = 0, i = -1;\n      while (++i < n) {\n        x0 = x, j = -1;\n        while (++j < n) {\n          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;\n          subgroups[di + \"-\" + dj] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: groupSums[di]\n        };\n        x += padding;\n      }\n      i = -1;\n      while (++i < n) {\n        j = i - 1;\n        while (++j < n) {\n          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value ? {\n              source: target,\n              target: source\n            } : {\n              source: source,\n              target: target\n            });\n          }\n        }\n      }\n      if (sortChords) resort();\n    }\n    function resort() {\n      chords.sort(function(a, b) {\n        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n      });\n    }\n    chord.matrix = function(x) {\n      if (!arguments.length) return matrix;\n      n = (matrix = x) && matrix.length;\n      chords = groups = null;\n      return chord;\n    };\n    chord.padding = function(x) {\n      if (!arguments.length) return padding;\n      padding = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortGroups = function(x) {\n      if (!arguments.length) return sortGroups;\n      sortGroups = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortSubgroups = function(x) {\n      if (!arguments.length) return sortSubgroups;\n      sortSubgroups = x;\n      chords = null;\n      return chord;\n    };\n    chord.sortChords = function(x) {\n      if (!arguments.length) return sortChords;\n      sortChords = x;\n      if (chords) resort();\n      return chord;\n    };\n    chord.chords = function() {\n      if (!chords) relayout();\n      return chords;\n    };\n    chord.groups = function() {\n      if (!groups) relayout();\n      return groups;\n    };\n    return chord;\n  };\n  d3.layout.force = function() {\n    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n    function repulse(node) {\n      return function(quad, x1, _, x2) {\n        if (quad.point !== node) {\n          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;\n          if (dw * dw / theta2 < dn) {\n            if (dn < chargeDistance2) {\n              var k = quad.charge / dn;\n              node.px -= dx * k;\n              node.py -= dy * k;\n            }\n            return true;\n          }\n          if (quad.point && dn && dn < chargeDistance2) {\n            var k = quad.pointCharge / dn;\n            node.px -= dx * k;\n            node.py -= dy * k;\n          }\n        }\n        return !quad.charge;\n      };\n    }\n    force.tick = function() {\n      if ((alpha *= .99) < .005) {\n        timer = null;\n        event.end({\n          type: \"end\",\n          alpha: alpha = 0\n        });\n        return true;\n      }\n      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        s = o.source;\n        t = o.target;\n        x = t.x - s.x;\n        y = t.y - s.y;\n        if (l = x * x + y * y) {\n          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n          x *= l;\n          y *= l;\n          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);\n          t.y -= y * k;\n          s.x += x * (k = 1 - k);\n          s.y += y * k;\n        }\n      }\n      if (k = alpha * gravity) {\n        x = size[0] / 2;\n        y = size[1] / 2;\n        i = -1;\n        if (k) while (++i < n) {\n          o = nodes[i];\n          o.x += (x - o.x) * k;\n          o.y += (y - o.y) * k;\n        }\n      }\n      if (charge) {\n        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n        i = -1;\n        while (++i < n) {\n          if (!(o = nodes[i]).fixed) {\n            q.visit(repulse(o));\n          }\n        }\n      }\n      i = -1;\n      while (++i < n) {\n        o = nodes[i];\n        if (o.fixed) {\n          o.x = o.px;\n          o.y = o.py;\n        } else {\n          o.x -= (o.px - (o.px = o.x)) * friction;\n          o.y -= (o.py - (o.py = o.y)) * friction;\n        }\n      }\n      event.tick({\n        type: \"tick\",\n        alpha: alpha\n      });\n    };\n    force.nodes = function(x) {\n      if (!arguments.length) return nodes;\n      nodes = x;\n      return force;\n    };\n    force.links = function(x) {\n      if (!arguments.length) return links;\n      links = x;\n      return force;\n    };\n    force.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return force;\n    };\n    force.linkDistance = function(x) {\n      if (!arguments.length) return linkDistance;\n      linkDistance = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.distance = force.linkDistance;\n    force.linkStrength = function(x) {\n      if (!arguments.length) return linkStrength;\n      linkStrength = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.friction = function(x) {\n      if (!arguments.length) return friction;\n      friction = +x;\n      return force;\n    };\n    force.charge = function(x) {\n      if (!arguments.length) return charge;\n      charge = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.chargeDistance = function(x) {\n      if (!arguments.length) return Math.sqrt(chargeDistance2);\n      chargeDistance2 = x * x;\n      return force;\n    };\n    force.gravity = function(x) {\n      if (!arguments.length) return gravity;\n      gravity = +x;\n      return force;\n    };\n    force.theta = function(x) {\n      if (!arguments.length) return Math.sqrt(theta2);\n      theta2 = x * x;\n      return force;\n    };\n    force.alpha = function(x) {\n      if (!arguments.length) return alpha;\n      x = +x;\n      if (alpha) {\n        if (x > 0) {\n          alpha = x;\n        } else {\n          timer.c = null, timer.t = NaN, timer = null;\n          event.end({\n            type: \"end\",\n            alpha: alpha = 0\n          });\n        }\n      } else if (x > 0) {\n        event.start({\n          type: \"start\",\n          alpha: alpha = x\n        });\n        timer = d3_timer(force.tick);\n      }\n      return force;\n    };\n    force.start = function() {\n      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;\n      for (i = 0; i < n; ++i) {\n        (o = nodes[i]).index = i;\n        o.weight = 0;\n      }\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        if (typeof o.source == \"number\") o.source = nodes[o.source];\n        if (typeof o.target == \"number\") o.target = nodes[o.target];\n        ++o.source.weight;\n        ++o.target.weight;\n      }\n      for (i = 0; i < n; ++i) {\n        o = nodes[i];\n        if (isNaN(o.x)) o.x = position(\"x\", w);\n        if (isNaN(o.y)) o.y = position(\"y\", h);\n        if (isNaN(o.px)) o.px = o.x;\n        if (isNaN(o.py)) o.py = o.y;\n      }\n      distances = [];\n      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n      strengths = [];\n      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n      charges = [];\n      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n      function position(dimension, size) {\n        if (!neighbors) {\n          neighbors = new Array(n);\n          for (j = 0; j < n; ++j) {\n            neighbors[j] = [];\n          }\n          for (j = 0; j < m; ++j) {\n            var o = links[j];\n            neighbors[o.source.index].push(o.target);\n            neighbors[o.target.index].push(o.source);\n          }\n        }\n        var candidates = neighbors[i], j = -1, l = candidates.length, x;\n        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;\n        return Math.random() * size;\n      }\n      return force.resume();\n    };\n    force.resume = function() {\n      return force.alpha(.1);\n    };\n    force.stop = function() {\n      return force.alpha(0);\n    };\n    force.drag = function() {\n      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n      if (!arguments.length) return drag;\n      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);\n    };\n    function dragmove(d) {\n      d.px = d3.event.x, d.py = d3.event.y;\n      force.resume();\n    }\n    return d3.rebind(force, event, \"on\");\n  };\n  function d3_layout_forceDragstart(d) {\n    d.fixed |= 2;\n  }\n  function d3_layout_forceDragend(d) {\n    d.fixed &= ~6;\n  }\n  function d3_layout_forceMouseover(d) {\n    d.fixed |= 4;\n    d.px = d.x, d.py = d.y;\n  }\n  function d3_layout_forceMouseout(d) {\n    d.fixed &= ~4;\n  }\n  function d3_layout_forceAccumulate(quad, alpha, charges) {\n    var cx = 0, cy = 0;\n    quad.charge = 0;\n    if (!quad.leaf) {\n      var nodes = quad.nodes, n = nodes.length, i = -1, c;\n      while (++i < n) {\n        c = nodes[i];\n        if (c == null) continue;\n        d3_layout_forceAccumulate(c, alpha, charges);\n        quad.charge += c.charge;\n        cx += c.charge * c.cx;\n        cy += c.charge * c.cy;\n      }\n    }\n    if (quad.point) {\n      if (!quad.leaf) {\n        quad.point.x += Math.random() - .5;\n        quad.point.y += Math.random() - .5;\n      }\n      var k = alpha * charges[quad.point.index];\n      quad.charge += quad.pointCharge = k;\n      cx += k * quad.point.x;\n      cy += k * quad.point.y;\n    }\n    quad.cx = cx / quad.charge;\n    quad.cy = cy / quad.charge;\n  }\n  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;\n  d3.layout.hierarchy = function() {\n    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;\n    function hierarchy(root) {\n      var stack = [ root ], nodes = [], node;\n      root.depth = 0;\n      while ((node = stack.pop()) != null) {\n        nodes.push(node);\n        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {\n          var n, childs, child;\n          while (--n >= 0) {\n            stack.push(child = childs[n]);\n            child.parent = node;\n            child.depth = node.depth + 1;\n          }\n          if (value) node.value = 0;\n          node.children = childs;\n        } else {\n          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          delete node.children;\n        }\n      }\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var childs, parent;\n        if (sort && (childs = node.children)) childs.sort(sort);\n        if (value && (parent = node.parent)) parent.value += node.value;\n      });\n      return nodes;\n    }\n    hierarchy.sort = function(x) {\n      if (!arguments.length) return sort;\n      sort = x;\n      return hierarchy;\n    };\n    hierarchy.children = function(x) {\n      if (!arguments.length) return children;\n      children = x;\n      return hierarchy;\n    };\n    hierarchy.value = function(x) {\n      if (!arguments.length) return value;\n      value = x;\n      return hierarchy;\n    };\n    hierarchy.revalue = function(root) {\n      if (value) {\n        d3_layout_hierarchyVisitBefore(root, function(node) {\n          if (node.children) node.value = 0;\n        });\n        d3_layout_hierarchyVisitAfter(root, function(node) {\n          var parent;\n          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          if (parent = node.parent) parent.value += node.value;\n        });\n      }\n      return root;\n    };\n    return hierarchy;\n  };\n  function d3_layout_hierarchyRebind(object, hierarchy) {\n    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");\n    object.nodes = object;\n    object.links = d3_layout_hierarchyLinks;\n    return object;\n  }\n  function d3_layout_hierarchyVisitBefore(node, callback) {\n    var nodes = [ node ];\n    while ((node = nodes.pop()) != null) {\n      callback(node);\n      if ((children = node.children) && (n = children.length)) {\n        var n, children;\n        while (--n >= 0) nodes.push(children[n]);\n      }\n    }\n  }\n  function d3_layout_hierarchyVisitAfter(node, callback) {\n    var nodes = [ node ], nodes2 = [];\n    while ((node = nodes.pop()) != null) {\n      nodes2.push(node);\n      if ((children = node.children) && (n = children.length)) {\n        var i = -1, n, children;\n        while (++i < n) nodes.push(children[i]);\n      }\n    }\n    while ((node = nodes2.pop()) != null) {\n      callback(node);\n    }\n  }\n  function d3_layout_hierarchyChildren(d) {\n    return d.children;\n  }\n  function d3_layout_hierarchyValue(d) {\n    return d.value;\n  }\n  function d3_layout_hierarchySort(a, b) {\n    return b.value - a.value;\n  }\n  function d3_layout_hierarchyLinks(nodes) {\n    return d3.merge(nodes.map(function(parent) {\n      return (parent.children || []).map(function(child) {\n        return {\n          source: parent,\n          target: child\n        };\n      });\n    }));\n  }\n  d3.layout.partition = function() {\n    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];\n    function position(node, x, dx, dy) {\n      var children = node.children;\n      node.x = x;\n      node.y = node.depth * dy;\n      node.dx = dx;\n      node.dy = dy;\n      if (children && (n = children.length)) {\n        var i = -1, n, c, d;\n        dx = node.value ? dx / node.value : 0;\n        while (++i < n) {\n          position(c = children[i], x, d = c.value * dx, dy);\n          x += d;\n        }\n      }\n    }\n    function depth(node) {\n      var children = node.children, d = 0;\n      if (children && (n = children.length)) {\n        var i = -1, n;\n        while (++i < n) d = Math.max(d, depth(children[i]));\n      }\n      return 1 + d;\n    }\n    function partition(d, i) {\n      var nodes = hierarchy.call(this, d, i);\n      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n      return nodes;\n    }\n    partition.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return partition;\n    };\n    return d3_layout_hierarchyRebind(partition, hierarchy);\n  };\n  d3.layout.pie = function() {\n    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;\n    function pie(data) {\n      var n = data.length, values = data.map(function(d, i) {\n        return +value.call(pie, d, i);\n      }), a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \"function\" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;\n      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {\n        return values[j] - values[i];\n      } : function(i, j) {\n        return sort(data[i], data[j]);\n      });\n      index.forEach(function(i) {\n        arcs[i] = {\n          data: data[i],\n          value: v = values[i],\n          startAngle: a,\n          endAngle: a += v * k + pa,\n          padAngle: p\n        };\n      });\n      return arcs;\n    }\n    pie.value = function(_) {\n      if (!arguments.length) return value;\n      value = _;\n      return pie;\n    };\n    pie.sort = function(_) {\n      if (!arguments.length) return sort;\n      sort = _;\n      return pie;\n    };\n    pie.startAngle = function(_) {\n      if (!arguments.length) return startAngle;\n      startAngle = _;\n      return pie;\n    };\n    pie.endAngle = function(_) {\n      if (!arguments.length) return endAngle;\n      endAngle = _;\n      return pie;\n    };\n    pie.padAngle = function(_) {\n      if (!arguments.length) return padAngle;\n      padAngle = _;\n      return pie;\n    };\n    return pie;\n  };\n  var d3_layout_pieSortByValue = {};\n  d3.layout.stack = function() {\n    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n    function stack(data, index) {\n      if (!(n = data.length)) return data;\n      var series = data.map(function(d, i) {\n        return values.call(stack, d, i);\n      });\n      var points = series.map(function(d) {\n        return d.map(function(v, i) {\n          return [ x.call(stack, v, i), y.call(stack, v, i) ];\n        });\n      });\n      var orders = order.call(stack, points, index);\n      series = d3.permute(series, orders);\n      points = d3.permute(points, orders);\n      var offsets = offset.call(stack, points, index);\n      var m = series[0].length, n, i, j, o;\n      for (j = 0; j < m; ++j) {\n        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n        for (i = 1; i < n; ++i) {\n          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n        }\n      }\n      return data;\n    }\n    stack.values = function(x) {\n      if (!arguments.length) return values;\n      values = x;\n      return stack;\n    };\n    stack.order = function(x) {\n      if (!arguments.length) return order;\n      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n      return stack;\n    };\n    stack.offset = function(x) {\n      if (!arguments.length) return offset;\n      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n      return stack;\n    };\n    stack.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      return stack;\n    };\n    stack.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      return stack;\n    };\n    stack.out = function(z) {\n      if (!arguments.length) return out;\n      out = z;\n      return stack;\n    };\n    return stack;\n  };\n  function d3_layout_stackX(d) {\n    return d.x;\n  }\n  function d3_layout_stackY(d) {\n    return d.y;\n  }\n  function d3_layout_stackOut(d, y0, y) {\n    d.y0 = y0;\n    d.y = y;\n  }\n  var d3_layout_stackOrders = d3.map({\n    \"inside-out\": function(data) {\n      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n        return max[a] - max[b];\n      }), top = 0, bottom = 0, tops = [], bottoms = [];\n      for (i = 0; i < n; ++i) {\n        j = index[i];\n        if (top < bottom) {\n          top += sums[j];\n          tops.push(j);\n        } else {\n          bottom += sums[j];\n          bottoms.push(j);\n        }\n      }\n      return bottoms.reverse().concat(tops);\n    },\n    reverse: function(data) {\n      return d3.range(data.length).reverse();\n    },\n    \"default\": d3_layout_stackOrderDefault\n  });\n  var d3_layout_stackOffsets = d3.map({\n    silhouette: function(data) {\n      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o > max) max = o;\n        sums.push(o);\n      }\n      for (j = 0; j < m; ++j) {\n        y0[j] = (max - sums[j]) / 2;\n      }\n      return y0;\n    },\n    wiggle: function(data) {\n      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];\n      y0[0] = o = o0 = 0;\n      for (j = 1; j < m; ++j) {\n        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];\n        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {\n          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {\n            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n          }\n          s2 += s3 * data[i][j][1];\n        }\n        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n        if (o < o0) o0 = o;\n      }\n      for (j = 0; j < m; ++j) y0[j] -= o0;\n      return y0;\n    },\n    expand: function(data) {\n      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;\n      }\n      for (j = 0; j < m; ++j) y0[j] = 0;\n      return y0;\n    },\n    zero: d3_layout_stackOffsetZero\n  });\n  function d3_layout_stackOrderDefault(data) {\n    return d3.range(data.length);\n  }\n  function d3_layout_stackOffsetZero(data) {\n    var j = -1, m = data[0].length, y0 = [];\n    while (++j < m) y0[j] = 0;\n    return y0;\n  }\n  function d3_layout_stackMaxIndex(array) {\n    var i = 1, j = 0, v = array[0][1], k, n = array.length;\n    for (;i < n; ++i) {\n      if ((k = array[i][1]) > v) {\n        j = i;\n        v = k;\n      }\n    }\n    return j;\n  }\n  function d3_layout_stackReduceSum(d) {\n    return d.reduce(d3_layout_stackSum, 0);\n  }\n  function d3_layout_stackSum(p, d) {\n    return p + d[1];\n  }\n  d3.layout.histogram = function() {\n    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;\n    function histogram(data, i) {\n      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n      while (++i < m) {\n        bin = bins[i] = [];\n        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n        bin.y = 0;\n      }\n      if (m > 0) {\n        i = -1;\n        while (++i < n) {\n          x = values[i];\n          if (x >= range[0] && x <= range[1]) {\n            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n            bin.y += k;\n            bin.push(data[i]);\n          }\n        }\n      }\n      return bins;\n    }\n    histogram.value = function(x) {\n      if (!arguments.length) return valuer;\n      valuer = x;\n      return histogram;\n    };\n    histogram.range = function(x) {\n      if (!arguments.length) return ranger;\n      ranger = d3_functor(x);\n      return histogram;\n    };\n    histogram.bins = function(x) {\n      if (!arguments.length) return binner;\n      binner = typeof x === \"number\" ? function(range) {\n        return d3_layout_histogramBinFixed(range, x);\n      } : d3_functor(x);\n      return histogram;\n    };\n    histogram.frequency = function(x) {\n      if (!arguments.length) return frequency;\n      frequency = !!x;\n      return histogram;\n    };\n    return histogram;\n  };\n  function d3_layout_histogramBinSturges(range, values) {\n    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n  }\n  function d3_layout_histogramBinFixed(range, n) {\n    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];\n    while (++x <= n) f[x] = m * x + b;\n    return f;\n  }\n  function d3_layout_histogramRange(values) {\n    return [ d3.min(values), d3.max(values) ];\n  }\n  d3.layout.pack = function() {\n    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;\n    function pack(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \"function\" ? radius : function() {\n        return radius;\n      };\n      root.x = root.y = 0;\n      d3_layout_hierarchyVisitAfter(root, function(d) {\n        d.r = +r(d.value);\n      });\n      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n      if (padding) {\n        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r += dr;\n        });\n        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r -= dr;\n        });\n      }\n      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n      return nodes;\n    }\n    pack.size = function(_) {\n      if (!arguments.length) return size;\n      size = _;\n      return pack;\n    };\n    pack.radius = function(_) {\n      if (!arguments.length) return radius;\n      radius = _ == null || typeof _ === \"function\" ? _ : +_;\n      return pack;\n    };\n    pack.padding = function(_) {\n      if (!arguments.length) return padding;\n      padding = +_;\n      return pack;\n    };\n    return d3_layout_hierarchyRebind(pack, hierarchy);\n  };\n  function d3_layout_packSort(a, b) {\n    return a.value - b.value;\n  }\n  function d3_layout_packInsert(a, b) {\n    var c = a._pack_next;\n    a._pack_next = b;\n    b._pack_prev = a;\n    b._pack_next = c;\n    c._pack_prev = b;\n  }\n  function d3_layout_packSplice(a, b) {\n    a._pack_next = b;\n    b._pack_prev = a;\n  }\n  function d3_layout_packIntersects(a, b) {\n    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;\n    return .999 * dr * dr > dx * dx + dy * dy;\n  }\n  function d3_layout_packSiblings(node) {\n    if (!(nodes = node.children) || !(n = nodes.length)) return;\n    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;\n    function bound(node) {\n      xMin = Math.min(node.x - node.r, xMin);\n      xMax = Math.max(node.x + node.r, xMax);\n      yMin = Math.min(node.y - node.r, yMin);\n      yMax = Math.max(node.y + node.r, yMax);\n    }\n    nodes.forEach(d3_layout_packLink);\n    a = nodes[0];\n    a.x = -a.r;\n    a.y = 0;\n    bound(a);\n    if (n > 1) {\n      b = nodes[1];\n      b.x = b.r;\n      b.y = 0;\n      bound(b);\n      if (n > 2) {\n        c = nodes[2];\n        d3_layout_packPlace(a, b, c);\n        bound(c);\n        d3_layout_packInsert(a, c);\n        a._pack_prev = c;\n        d3_layout_packInsert(c, b);\n        b = a._pack_next;\n        for (i = 3; i < n; i++) {\n          d3_layout_packPlace(a, b, c = nodes[i]);\n          var isect = 0, s1 = 1, s2 = 1;\n          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n            if (d3_layout_packIntersects(j, c)) {\n              isect = 1;\n              break;\n            }\n          }\n          if (isect == 1) {\n            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n              if (d3_layout_packIntersects(k, c)) {\n                break;\n              }\n            }\n          }\n          if (isect) {\n            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);\n            i--;\n          } else {\n            d3_layout_packInsert(a, c);\n            b = c;\n            bound(c);\n          }\n        }\n      }\n    }\n    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;\n    for (i = 0; i < n; i++) {\n      c = nodes[i];\n      c.x -= cx;\n      c.y -= cy;\n      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n    }\n    node.r = cr;\n    nodes.forEach(d3_layout_packUnlink);\n  }\n  function d3_layout_packLink(node) {\n    node._pack_next = node._pack_prev = node;\n  }\n  function d3_layout_packUnlink(node) {\n    delete node._pack_next;\n    delete node._pack_prev;\n  }\n  function d3_layout_packTransform(node, x, y, k) {\n    var children = node.children;\n    node.x = x += k * node.x;\n    node.y = y += k * node.y;\n    node.r *= k;\n    if (children) {\n      var i = -1, n = children.length;\n      while (++i < n) d3_layout_packTransform(children[i], x, y, k);\n    }\n  }\n  function d3_layout_packPlace(a, b, c) {\n    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;\n    if (db && (dx || dy)) {\n      var da = b.r + c.r, dc = dx * dx + dy * dy;\n      da *= da;\n      db *= db;\n      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = a.x + x * dx + y * dy;\n      c.y = a.y + x * dy - y * dx;\n    } else {\n      c.x = a.x + db;\n      c.y = a.y;\n    }\n  }\n  d3.layout.tree = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n    function tree(d, i) {\n      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);\n      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {\n        var left = root0, right = root0, bottom = root0;\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n      return nodes;\n    }\n    function wrapTree(root0) {\n      var root1 = {\n        A: null,\n        children: [ root0 ]\n      }, queue = [ root1 ], node1;\n      while ((node1 = queue.pop()) != null) {\n        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {\n          queue.push((children[i] = child = {\n            _: children[i],\n            parent: node1,\n            children: (child = children[i].children) && child.slice() || [],\n            A: null,\n            a: null,\n            z: 0,\n            m: 0,\n            c: 0,\n            s: 0,\n            t: null,\n            i: i\n          }).a = child);\n        }\n      }\n      return root1.children[0];\n    }\n    function firstWalk(v) {\n      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;\n      if (children.length) {\n        d3_layout_treeShift(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {\n          vom = d3_layout_treeLeft(vom);\n          vop = d3_layout_treeRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !d3_layout_treeRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !d3_layout_treeLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n    function sizeNode(node) {\n      node.x *= size[0];\n      node.y = node.depth * size[1];\n    }\n    tree.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return tree;\n    };\n    tree.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null ? sizeNode : null;\n      return tree;\n    };\n    tree.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) == null ? null : sizeNode;\n      return tree;\n    };\n    return d3_layout_hierarchyRebind(tree, hierarchy);\n  };\n  function d3_layout_treeSeparation(a, b) {\n    return a.parent == b.parent ? 1 : 2;\n  }\n  function d3_layout_treeLeft(v) {\n    var children = v.children;\n    return children.length ? children[0] : v.t;\n  }\n  function d3_layout_treeRight(v) {\n    var children = v.children, n;\n    return (n = children.length) ? children[n - 1] : v.t;\n  }\n  function d3_layout_treeMove(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n  function d3_layout_treeShift(v) {\n    var shift = 0, change = 0, children = v.children, i = children.length, w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n  function d3_layout_treeAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n  d3.layout.cluster = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n    function cluster(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var children = node.children;\n        if (children && children.length) {\n          node.x = d3_layout_clusterX(children);\n          node.y = d3_layout_clusterY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {\n        node.x = (node.x - root.x) * size[0];\n        node.y = (root.y - node.y) * size[1];\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * size[0];\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n      });\n      return nodes;\n    }\n    cluster.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return cluster;\n    };\n    cluster.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null;\n      return cluster;\n    };\n    cluster.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) != null;\n      return cluster;\n    };\n    return d3_layout_hierarchyRebind(cluster, hierarchy);\n  };\n  function d3_layout_clusterY(children) {\n    return 1 + d3.max(children, function(child) {\n      return child.y;\n    });\n  }\n  function d3_layout_clusterX(children) {\n    return children.reduce(function(x, child) {\n      return x + child.x;\n    }, 0) / children.length;\n  }\n  function d3_layout_clusterLeft(node) {\n    var children = node.children;\n    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;\n  }\n  function d3_layout_clusterRight(node) {\n    var children = node.children, n;\n    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n  }\n  d3.layout.treemap = function() {\n    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n    function scale(children, k) {\n      var i = -1, n = children.length, child, area;\n      while (++i < n) {\n        area = (child = children[i]).value * (k < 0 ? 0 : k);\n        child.area = isNaN(area) || area <= 0 ? 0 : area;\n      }\n    }\n    function squarify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while ((n = remaining.length) > 0) {\n          row.push(child = remaining[n - 1]);\n          row.area += child.area;\n          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {\n            remaining.pop();\n            best = score;\n          } else {\n            row.area -= row.pop().area;\n            position(row, u, rect, false);\n            u = Math.min(rect.dx, rect.dy);\n            row.length = row.area = 0;\n            best = Infinity;\n          }\n        }\n        if (row.length) {\n          position(row, u, rect, true);\n          row.length = row.area = 0;\n        }\n        children.forEach(squarify);\n      }\n    }\n    function stickify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), remaining = children.slice(), child, row = [];\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while (child = remaining.pop()) {\n          row.push(child);\n          row.area += child.area;\n          if (child.z != null) {\n            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n            row.length = row.area = 0;\n          }\n        }\n        children.forEach(stickify);\n      }\n    }\n    function worst(row, u) {\n      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;\n      while (++i < n) {\n        if (!(r = row[i].area)) continue;\n        if (r < rmin) rmin = r;\n        if (r > rmax) rmax = r;\n      }\n      s *= s;\n      u *= u;\n      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n    }\n    function position(row, u, rect, flush) {\n      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;\n      if (u == rect.dx) {\n        if (flush || v > rect.dy) v = rect.dy;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dy = v;\n          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n        }\n        o.z = true;\n        o.dx += rect.x + rect.dx - x;\n        rect.y += v;\n        rect.dy -= v;\n      } else {\n        if (flush || v > rect.dx) v = rect.dx;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dx = v;\n          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n        }\n        o.z = false;\n        o.dy += rect.y + rect.dy - y;\n        rect.x += v;\n        rect.dx -= v;\n      }\n    }\n    function treemap(d) {\n      var nodes = stickies || hierarchy(d), root = nodes[0];\n      root.x = root.y = 0;\n      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;\n      if (stickies) hierarchy.revalue(root);\n      scale([ root ], root.dx * root.dy / root.value);\n      (stickies ? stickify : squarify)(root);\n      if (sticky) stickies = nodes;\n      return nodes;\n    }\n    treemap.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return treemap;\n    };\n    treemap.padding = function(x) {\n      if (!arguments.length) return padding;\n      function padFunction(node) {\n        var p = x.call(treemap, node, node.depth);\n        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n      }\n      function padConstant(node) {\n        return d3_layout_treemapPad(node, x);\n      }\n      var type;\n      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ], \n      padConstant) : padConstant;\n      return treemap;\n    };\n    treemap.round = function(x) {\n      if (!arguments.length) return round != Number;\n      round = x ? Math.round : Number;\n      return treemap;\n    };\n    treemap.sticky = function(x) {\n      if (!arguments.length) return sticky;\n      sticky = x;\n      stickies = null;\n      return treemap;\n    };\n    treemap.ratio = function(x) {\n      if (!arguments.length) return ratio;\n      ratio = x;\n      return treemap;\n    };\n    treemap.mode = function(x) {\n      if (!arguments.length) return mode;\n      mode = x + \"\";\n      return treemap;\n    };\n    return d3_layout_hierarchyRebind(treemap, hierarchy);\n  };\n  function d3_layout_treemapPadNull(node) {\n    return {\n      x: node.x,\n      y: node.y,\n      dx: node.dx,\n      dy: node.dy\n    };\n  }\n  function d3_layout_treemapPad(node, padding) {\n    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n    if (dx < 0) {\n      x += dx / 2;\n      dx = 0;\n    }\n    if (dy < 0) {\n      y += dy / 2;\n      dy = 0;\n    }\n    return {\n      x: x,\n      y: y,\n      dx: dx,\n      dy: dy\n    };\n  }\n  d3.random = {\n    normal: function(µ, σ) {\n      var n = arguments.length;\n      if (n < 2) σ = 1;\n      if (n < 1) µ = 0;\n      return function() {\n        var x, y, r;\n        do {\n          x = Math.random() * 2 - 1;\n          y = Math.random() * 2 - 1;\n          r = x * x + y * y;\n        } while (!r || r > 1);\n        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n      };\n    },\n    logNormal: function() {\n      var random = d3.random.normal.apply(d3, arguments);\n      return function() {\n        return Math.exp(random());\n      };\n    },\n    bates: function(m) {\n      var random = d3.random.irwinHall(m);\n      return function() {\n        return random() / m;\n      };\n    },\n    irwinHall: function(m) {\n      return function() {\n        for (var s = 0, j = 0; j < m; j++) s += Math.random();\n        return s;\n      };\n    }\n  };\n  d3.scale = {};\n  function d3_scaleExtent(domain) {\n    var start = domain[0], stop = domain[domain.length - 1];\n    return start < stop ? [ start, stop ] : [ stop, start ];\n  }\n  function d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n  }\n  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);\n    return function(x) {\n      return i(u(x));\n    };\n  }\n  function d3_scale_nice(domain, nice) {\n    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;\n    if (x1 < x0) {\n      dx = i0, i0 = i1, i1 = dx;\n      dx = x0, x0 = x1, x1 = dx;\n    }\n    domain[i0] = nice.floor(x0);\n    domain[i1] = nice.ceil(x1);\n    return domain;\n  }\n  function d3_scale_niceStep(step) {\n    return step ? {\n      floor: function(x) {\n        return Math.floor(x / step) * step;\n      },\n      ceil: function(x) {\n        return Math.ceil(x / step) * step;\n      }\n    } : d3_scale_niceIdentity;\n  }\n  var d3_scale_niceIdentity = {\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;\n    if (domain[k] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n    while (++j <= k) {\n      u.push(uninterpolate(domain[j - 1], domain[j]));\n      i.push(interpolate(range[j - 1], range[j]));\n    }\n    return function(x) {\n      var j = d3.bisect(domain, x, 1, k) - 1;\n      return i[j](u[j](x));\n    };\n  }\n  d3.scale.linear = function() {\n    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);\n  };\n  function d3_scale_linear(domain, range, interpolate, clamp) {\n    var output, input;\n    function rescale() {\n      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n      output = linear(domain, range, uninterpolate, interpolate);\n      input = linear(range, domain, uninterpolate, d3_interpolate);\n      return scale;\n    }\n    function scale(x) {\n      return output(x);\n    }\n    scale.invert = function(y) {\n      return input(y);\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(Number);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.rangeRound = function(x) {\n      return scale.range(x).interpolate(d3_interpolateRound);\n    };\n    scale.clamp = function(x) {\n      if (!arguments.length) return clamp;\n      clamp = x;\n      return rescale();\n    };\n    scale.interpolate = function(x) {\n      if (!arguments.length) return interpolate;\n      interpolate = x;\n      return rescale();\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      d3_scale_linearNice(domain, m);\n      return rescale();\n    };\n    scale.copy = function() {\n      return d3_scale_linear(domain, range, interpolate, clamp);\n    };\n    return rescale();\n  }\n  function d3_scale_linearRebind(scale, linear) {\n    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");\n  }\n  function d3_scale_linearNice(domain, m) {\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    return domain;\n  }\n  function d3_scale_linearTickRange(domain, m) {\n    if (m == null) m = 10;\n    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;\n    extent[0] = Math.ceil(extent[0] / step) * step;\n    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n    extent[2] = step;\n    return extent;\n  }\n  function d3_scale_linearTicks(domain, m) {\n    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n  }\n  function d3_scale_linearTickFormat(domain, m, format) {\n    var range = d3_scale_linearTickRange(domain, m);\n    if (format) {\n      var match = d3_format_re.exec(format);\n      match.shift();\n      if (match[8] === \"s\") {\n        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n        if (!match[7]) match[7] = \".\" + d3_scale_linearPrecision(prefix.scale(range[2]));\n        match[8] = \"f\";\n        format = d3.format(match.join(\"\"));\n        return function(d) {\n          return format(prefix.scale(d)) + prefix.symbol;\n        };\n      }\n      if (!match[7]) match[7] = \".\" + d3_scale_linearFormatPrecision(match[8], range);\n      format = match.join(\"\");\n    } else {\n      format = \",.\" + d3_scale_linearPrecision(range[2]) + \"f\";\n    }\n    return d3.format(format);\n  }\n  var d3_scale_linearFormatSignificant = {\n    s: 1,\n    g: 1,\n    p: 1,\n    r: 1,\n    e: 1\n  };\n  function d3_scale_linearPrecision(value) {\n    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n  }\n  function d3_scale_linearFormatPrecision(type, range) {\n    var p = d3_scale_linearPrecision(range[2]);\n    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \"e\") : p - (type === \"%\") * 2;\n  }\n  d3.scale.log = function() {\n    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);\n  };\n  function d3_scale_log(linear, base, positive, domain) {\n    function log(x) {\n      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);\n    }\n    function pow(x) {\n      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n    }\n    function scale(x) {\n      return linear(log(x));\n    }\n    scale.invert = function(x) {\n      return pow(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      positive = x[0] >= 0;\n      linear.domain((domain = x.map(Number)).map(log));\n      return scale;\n    };\n    scale.base = function(_) {\n      if (!arguments.length) return base;\n      base = +_;\n      linear.domain(domain.map(log));\n      return scale;\n    };\n    scale.nice = function() {\n      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n      linear.domain(niced);\n      domain = niced.map(pow);\n      return scale;\n    };\n    scale.ticks = function() {\n      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n      if (isFinite(j - i)) {\n        if (positive) {\n          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);\n          ticks.push(pow(i));\n        } else {\n          ticks.push(pow(i));\n          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);\n        }\n        for (i = 0; ticks[i] < u; i++) {}\n        for (j = ticks.length; ticks[j - 1] > v; j--) {}\n        ticks = ticks.slice(i, j);\n      }\n      return ticks;\n    };\n    scale.tickFormat = function(n, format) {\n      if (!arguments.length) return d3_scale_logFormat;\n      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== \"function\") format = d3.format(format);\n      var k = Math.max(1, base * n / scale.ticks().length);\n      return function(d) {\n        var i = d / pow(Math.round(log(d)));\n        if (i * base < base - .5) i *= base;\n        return i <= k ? format(d) : \"\";\n      };\n    };\n    scale.copy = function() {\n      return d3_scale_log(linear.copy(), base, positive, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  var d3_scale_logFormat = d3.format(\".0e\"), d3_scale_logNiceNegative = {\n    floor: function(x) {\n      return -Math.ceil(-x);\n    },\n    ceil: function(x) {\n      return -Math.floor(-x);\n    }\n  };\n  d3.scale.pow = function() {\n    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);\n  };\n  function d3_scale_pow(linear, exponent, domain) {\n    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);\n    function scale(x) {\n      return linear(powp(x));\n    }\n    scale.invert = function(x) {\n      return powb(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      linear.domain((domain = x.map(Number)).map(powp));\n      return scale;\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      return scale.domain(d3_scale_linearNice(domain, m));\n    };\n    scale.exponent = function(x) {\n      if (!arguments.length) return exponent;\n      powp = d3_scale_powPow(exponent = x);\n      powb = d3_scale_powPow(1 / exponent);\n      linear.domain(domain.map(powp));\n      return scale;\n    };\n    scale.copy = function() {\n      return d3_scale_pow(linear.copy(), exponent, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_scale_powPow(e) {\n    return function(x) {\n      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n    };\n  }\n  d3.scale.sqrt = function() {\n    return d3.scale.pow().exponent(.5);\n  };\n  d3.scale.ordinal = function() {\n    return d3_scale_ordinal([], {\n      t: \"range\",\n      a: [ [] ]\n    });\n  };\n  function d3_scale_ordinal(domain, ranger) {\n    var index, range, rangeBand;\n    function scale(x) {\n      return range[((index.get(x) || (ranger.t === \"range\" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n    }\n    function steps(start, step) {\n      return d3.range(domain.length).map(function(i) {\n        return start + step * i;\n      });\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = [];\n      index = new d3_Map();\n      var i = -1, n = x.length, xi;\n      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n      return scale[ranger.t].apply(scale, ranger.a);\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      rangeBand = 0;\n      ranger = {\n        t: \"range\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangePoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, \n      0) : (stop - start) / (domain.length - 1 + padding);\n      range = steps(start + step * padding / 2, step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangePoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundPoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), \n      0) : (stop - start) / (domain.length - 1 + padding) | 0;\n      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangeRoundPoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n      range = steps(start + step * outerPadding, step);\n      if (reverse) range.reverse();\n      rangeBand = step * (1 - padding);\n      ranger = {\n        t: \"rangeBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n      if (reverse) range.reverse();\n      rangeBand = Math.round(step * (1 - padding));\n      ranger = {\n        t: \"rangeRoundBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBand = function() {\n      return rangeBand;\n    };\n    scale.rangeExtent = function() {\n      return d3_scaleExtent(ranger.a[0]);\n    };\n    scale.copy = function() {\n      return d3_scale_ordinal(domain, ranger);\n    };\n    return scale.domain(domain);\n  }\n  d3.scale.category10 = function() {\n    return d3.scale.ordinal().range(d3_category10);\n  };\n  d3.scale.category20 = function() {\n    return d3.scale.ordinal().range(d3_category20);\n  };\n  d3.scale.category20b = function() {\n    return d3.scale.ordinal().range(d3_category20b);\n  };\n  d3.scale.category20c = function() {\n    return d3.scale.ordinal().range(d3_category20c);\n  };\n  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n  d3.scale.quantile = function() {\n    return d3_scale_quantile([], []);\n  };\n  function d3_scale_quantile(domain, range) {\n    var thresholds;\n    function rescale() {\n      var k = 0, q = range.length;\n      thresholds = [];\n      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);\n      return scale;\n    }\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.quantiles = function() {\n      return thresholds;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantile(domain, range);\n    };\n    return rescale();\n  }\n  d3.scale.quantize = function() {\n    return d3_scale_quantize(0, 1, [ 0, 1 ]);\n  };\n  function d3_scale_quantize(x0, x1, range) {\n    var kx, i;\n    function scale(x) {\n      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n    }\n    function rescale() {\n      kx = range.length / (x1 - x0);\n      i = range.length - 1;\n      return scale;\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return [ x0, x1 ];\n      x0 = +x[0];\n      x1 = +x[x.length - 1];\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      y = y < 0 ? NaN : y / kx + x0;\n      return [ y, y + 1 / kx ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantize(x0, x1, range);\n    };\n    return rescale();\n  }\n  d3.scale.threshold = function() {\n    return d3_scale_threshold([ .5 ], [ 0, 1 ]);\n  };\n  function d3_scale_threshold(domain, range) {\n    function scale(x) {\n      if (x <= x) return range[d3.bisect(domain, x)];\n    }\n    scale.domain = function(_) {\n      if (!arguments.length) return domain;\n      domain = _;\n      return scale;\n    };\n    scale.range = function(_) {\n      if (!arguments.length) return range;\n      range = _;\n      return scale;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return [ domain[y - 1], domain[y] ];\n    };\n    scale.copy = function() {\n      return d3_scale_threshold(domain, range);\n    };\n    return scale;\n  }\n  d3.scale.identity = function() {\n    return d3_scale_identity([ 0, 1 ]);\n  };\n  function d3_scale_identity(domain) {\n    function identity(x) {\n      return +x;\n    }\n    identity.invert = identity;\n    identity.domain = identity.range = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(identity);\n      return identity;\n    };\n    identity.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    identity.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    identity.copy = function() {\n      return d3_scale_identity(domain);\n    };\n    return identity;\n  }\n  d3.svg = {};\n  function d3_zero() {\n    return 0;\n  }\n  d3.svg.arc = function() {\n    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n    function arc() {\n      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;\n      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;\n      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \"\") + \"Z\";\n      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];\n      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n        if (!cw) p1 *= -1;\n        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n      }\n      if (r1) {\n        x0 = r1 * Math.cos(a0 + p1);\n        y0 = r1 * Math.sin(a0 + p1);\n        x1 = r1 * Math.cos(a1 - p1);\n        y1 = r1 * Math.sin(a1 - p1);\n        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;\n        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n          var h1 = (a0 + a1) / 2;\n          x0 = r1 * Math.cos(h1);\n          y0 = r1 * Math.sin(h1);\n          x1 = y1 = null;\n        }\n      } else {\n        x0 = y0 = 0;\n      }\n      if (r0) {\n        x2 = r0 * Math.cos(a1 - p0);\n        y2 = r0 * Math.sin(a1 - p0);\n        x3 = r0 * Math.cos(a0 + p0);\n        y3 = r0 * Math.sin(a0 + p0);\n        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;\n        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n          var h0 = (a0 + a1) / 2;\n          x2 = r0 * Math.cos(h0);\n          y2 = r0 * Math.sin(h0);\n          x3 = y3 = null;\n        }\n      } else {\n        x2 = y2 = 0;\n      }\n      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {\n        cr = r0 < r1 ^ cw ? 0 : 1;\n        var rc1 = rc, rc0 = rc;\n        if (da < π) {\n          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n        }\n        if (x1 != null) {\n          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n          if (rc === rc1) {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t30[1], \"A\", r1, \",\", r1, \" 0 \", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \",\", cw, \" \", t12[1], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t12[0]);\n          } else {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 1,\", cr, \" \", t12[0]);\n          }\n        } else {\n          path.push(\"M\", x0, \",\", y0);\n        }\n        if (x3 != null) {\n          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n          if (rc === rc0) {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t21[1], \"A\", r0, \",\", r0, \" 0 \", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \",\", 1 - cw, \" \", t03[1], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          } else {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          }\n        } else {\n          path.push(\"L\", x2, \",\", y2);\n        }\n      } else {\n        path.push(\"M\", x0, \",\", y0);\n        if (x1 != null) path.push(\"A\", r1, \",\", r1, \" 0 \", l1, \",\", cw, \" \", x1, \",\", y1);\n        path.push(\"L\", x2, \",\", y2);\n        if (x3 != null) path.push(\"A\", r0, \",\", r0, \" 0 \", l0, \",\", 1 - cw, \" \", x3, \",\", y3);\n      }\n      path.push(\"Z\");\n      return path.join(\"\");\n    }\n    function circleSegment(r1, cw) {\n      return \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + r1;\n    }\n    arc.innerRadius = function(v) {\n      if (!arguments.length) return innerRadius;\n      innerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.outerRadius = function(v) {\n      if (!arguments.length) return outerRadius;\n      outerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.cornerRadius = function(v) {\n      if (!arguments.length) return cornerRadius;\n      cornerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.padRadius = function(v) {\n      if (!arguments.length) return padRadius;\n      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n      return arc;\n    };\n    arc.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return arc;\n    };\n    arc.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return arc;\n    };\n    arc.padAngle = function(v) {\n      if (!arguments.length) return padAngle;\n      padAngle = d3_functor(v);\n      return arc;\n    };\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n      return [ Math.cos(a) * r, Math.sin(a) * r ];\n    };\n    return arc;\n  };\n  var d3_svg_arcAuto = \"auto\";\n  function d3_svg_arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n  function d3_svg_arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n  function d3_svg_arcStartAngle(d) {\n    return d.startAngle;\n  }\n  function d3_svg_arcEndAngle(d) {\n    return d.endAngle;\n  }\n  function d3_svg_arcPadAngle(d) {\n    return d && d.padAngle;\n  }\n  function d3_svg_arcSweep(x0, y0, x1, y1) {\n    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;\n  }\n  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];\n  }\n  function d3_svg_line(projection) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n    function line(data) {\n      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points), tension));\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);\n        } else if (points.length) {\n          segment();\n          points = [];\n        }\n      }\n      if (points.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    line.x = function(_) {\n      if (!arguments.length) return x;\n      x = _;\n      return line;\n    };\n    line.y = function(_) {\n      if (!arguments.length) return y;\n      y = _;\n      return line;\n    };\n    line.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return line;\n    };\n    line.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      return line;\n    };\n    line.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return line;\n    };\n    return line;\n  }\n  d3.svg.line = function() {\n    return d3_svg_line(d3_identity);\n  };\n  var d3_svg_lineInterpolators = d3.map({\n    linear: d3_svg_lineLinear,\n    \"linear-closed\": d3_svg_lineLinearClosed,\n    step: d3_svg_lineStep,\n    \"step-before\": d3_svg_lineStepBefore,\n    \"step-after\": d3_svg_lineStepAfter,\n    basis: d3_svg_lineBasis,\n    \"basis-open\": d3_svg_lineBasisOpen,\n    \"basis-closed\": d3_svg_lineBasisClosed,\n    bundle: d3_svg_lineBundle,\n    cardinal: d3_svg_lineCardinal,\n    \"cardinal-open\": d3_svg_lineCardinalOpen,\n    \"cardinal-closed\": d3_svg_lineCardinalClosed,\n    monotone: d3_svg_lineMonotone\n  });\n  d3_svg_lineInterpolators.forEach(function(key, value) {\n    value.key = key;\n    value.closed = /-closed$/.test(key);\n  });\n  function d3_svg_lineLinear(points) {\n    return points.length > 1 ? points.join(\"L\") : points + \"Z\";\n  }\n  function d3_svg_lineLinearClosed(points) {\n    return points.join(\"L\") + \"Z\";\n  }\n  function d3_svg_lineStep(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p[0] + (p = points[i])[0]) / 2, \"V\", p[1]);\n    if (n > 1) path.push(\"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepBefore(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepAfter(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineCardinalOpen(points, tension) {\n    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineCardinalClosed(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));\n  }\n  function d3_svg_lineCardinal(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineHermite(points, tangents) {\n    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {\n      return d3_svg_lineLinear(points);\n    }\n    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n    if (quad) {\n      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];\n      p0 = points[1];\n      pi = 2;\n    }\n    if (tangents.length > 1) {\n      t = tangents[1];\n      p = points[pi];\n      pi++;\n      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      for (var i = 2; i < tangents.length; i++, pi++) {\n        p = points[pi];\n        t = tangents[i];\n        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      }\n    }\n    if (quad) {\n      var lp = points[pi];\n      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];\n    }\n    return path;\n  }\n  function d3_svg_lineCardinalTangents(points, tension) {\n    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;\n    while (++i < n) {\n      p0 = p1;\n      p1 = p2;\n      p2 = points[i];\n      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineBasis(points) {\n    if (points.length < 3) return d3_svg_lineLinear(points);\n    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0, \"L\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    points.push(points[n - 1]);\n    while (++i <= n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    points.pop();\n    path.push(\"L\", pi);\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisOpen(points) {\n    if (points.length < 4) return d3_svg_lineLinear(points);\n    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];\n    while (++i < 3) {\n      pi = points[i];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n    --i;\n    while (++i < n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisClosed(points) {\n    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];\n    while (++i < 4) {\n      pi = points[i % n];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    --i;\n    while (++i < m) {\n      pi = points[i % n];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBundle(points, tension) {\n    var n = points.length - 1;\n    if (n) {\n      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;\n      while (++i <= n) {\n        p = points[i];\n        t = i / n;\n        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n      }\n    }\n    return d3_svg_lineBasis(points);\n  }\n  function d3_svg_lineDot4(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n  function d3_svg_lineBasisBezier(path, x, y) {\n    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n  }\n  function d3_svg_lineSlope(p0, p1) {\n    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n  }\n  function d3_svg_lineFiniteDifferences(points) {\n    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);\n    while (++i < j) {\n      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n    }\n    m[i] = d;\n    return m;\n  }\n  function d3_svg_lineMonotoneTangents(points) {\n    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;\n    while (++i < j) {\n      d = d3_svg_lineSlope(points[i], points[i + 1]);\n      if (abs(d) < ε) {\n        m[i] = m[i + 1] = 0;\n      } else {\n        a = m[i] / d;\n        b = m[i + 1] / d;\n        s = a * a + b * b;\n        if (s > 9) {\n          s = d * 3 / Math.sqrt(s);\n          m[i] = s * a;\n          m[i + 1] = s * b;\n        }\n      }\n    }\n    i = -1;\n    while (++i <= j) {\n      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n      tangents.push([ s || 0, m[i] * s || 0 ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineMonotone(points) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n  }\n  d3.svg.line.radial = function() {\n    var line = d3_svg_line(d3_svg_lineRadial);\n    line.radius = line.x, delete line.x;\n    line.angle = line.y, delete line.y;\n    return line;\n  };\n  function d3_svg_lineRadial(points) {\n    var point, i = -1, n = points.length, r, a;\n    while (++i < n) {\n      point = points[i];\n      r = point[0];\n      a = point[1] - halfπ;\n      point[0] = r * Math.cos(a);\n      point[1] = r * Math.sin(a);\n    }\n    return points;\n  }\n  function d3_svg_area(projection) {\n    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n    function area(data) {\n      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n        return x;\n      } : d3_functor(x1), fy1 = y0 === y1 ? function() {\n        return y;\n      } : d3_functor(y1), x, y;\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);\n          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);\n        } else if (points0.length) {\n          segment();\n          points0 = [];\n          points1 = [];\n        }\n      }\n      if (points0.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    area.x = function(_) {\n      if (!arguments.length) return x1;\n      x0 = x1 = _;\n      return area;\n    };\n    area.x0 = function(_) {\n      if (!arguments.length) return x0;\n      x0 = _;\n      return area;\n    };\n    area.x1 = function(_) {\n      if (!arguments.length) return x1;\n      x1 = _;\n      return area;\n    };\n    area.y = function(_) {\n      if (!arguments.length) return y1;\n      y0 = y1 = _;\n      return area;\n    };\n    area.y0 = function(_) {\n      if (!arguments.length) return y0;\n      y0 = _;\n      return area;\n    };\n    area.y1 = function(_) {\n      if (!arguments.length) return y1;\n      y1 = _;\n      return area;\n    };\n    area.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return area;\n    };\n    area.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      interpolateReverse = interpolate.reverse || interpolate;\n      L = interpolate.closed ? \"M\" : \"L\";\n      return area;\n    };\n    area.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return area;\n    };\n    return area;\n  }\n  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n  d3.svg.area = function() {\n    return d3_svg_area(d3_identity);\n  };\n  d3.svg.area.radial = function() {\n    var area = d3_svg_area(d3_svg_lineRadial);\n    area.radius = area.x, delete area.x;\n    area.innerRadius = area.x0, delete area.x0;\n    area.outerRadius = area.x1, delete area.x1;\n    area.angle = area.y, delete area.y;\n    area.startAngle = area.y0, delete area.y0;\n    area.endAngle = area.y1, delete area.y1;\n    return area;\n  };\n  d3.svg.chord = function() {\n    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n    function chord(d, i) {\n      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);\n      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n    }\n    function subgroup(self, f, d, i) {\n      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n      return {\n        r: r,\n        a0: a0,\n        a1: a1,\n        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],\n        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]\n      };\n    }\n    function equals(a, b) {\n      return a.a0 == b.a0 && a.a1 == b.a1;\n    }\n    function arc(r, p, a) {\n      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;\n    }\n    function curve(r0, p0, r1, p1) {\n      return \"Q 0,0 \" + p1;\n    }\n    chord.radius = function(v) {\n      if (!arguments.length) return radius;\n      radius = d3_functor(v);\n      return chord;\n    };\n    chord.source = function(v) {\n      if (!arguments.length) return source;\n      source = d3_functor(v);\n      return chord;\n    };\n    chord.target = function(v) {\n      if (!arguments.length) return target;\n      target = d3_functor(v);\n      return chord;\n    };\n    chord.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return chord;\n    };\n    chord.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return chord;\n    };\n    return chord;\n  };\n  function d3_svg_chordRadius(d) {\n    return d.radius;\n  }\n  d3.svg.diagonal = function() {\n    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;\n    function diagonal(d, i) {\n      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {\n        x: p0.x,\n        y: m\n      }, {\n        x: p3.x,\n        y: m\n      }, p3 ];\n      p = p.map(projection);\n      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];\n    }\n    diagonal.source = function(x) {\n      if (!arguments.length) return source;\n      source = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.target = function(x) {\n      if (!arguments.length) return target;\n      target = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.projection = function(x) {\n      if (!arguments.length) return projection;\n      projection = x;\n      return diagonal;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalProjection(d) {\n    return [ d.x, d.y ];\n  }\n  d3.svg.diagonal.radial = function() {\n    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;\n    diagonal.projection = function(x) {\n      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalRadialProjection(projection) {\n    return function() {\n      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;\n      return [ r * Math.cos(a), r * Math.sin(a) ];\n    };\n  }\n  d3.svg.symbol = function() {\n    var type = d3_svg_symbolType, size = d3_svg_symbolSize;\n    function symbol(d, i) {\n      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n    }\n    symbol.type = function(x) {\n      if (!arguments.length) return type;\n      type = d3_functor(x);\n      return symbol;\n    };\n    symbol.size = function(x) {\n      if (!arguments.length) return size;\n      size = d3_functor(x);\n      return symbol;\n    };\n    return symbol;\n  };\n  function d3_svg_symbolSize() {\n    return 64;\n  }\n  function d3_svg_symbolType() {\n    return \"circle\";\n  }\n  function d3_svg_symbolCircle(size) {\n    var r = Math.sqrt(size / π);\n    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";\n  }\n  var d3_svg_symbols = d3.map({\n    circle: d3_svg_symbolCircle,\n    cross: function(size) {\n      var r = Math.sqrt(size / 5) / 2;\n      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n    },\n    diamond: function(size) {\n      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;\n      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";\n    },\n    square: function(size) {\n      var r = Math.sqrt(size) / 2;\n      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";\n    },\n    \"triangle-down\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";\n    },\n    \"triangle-up\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";\n    }\n  });\n  d3.svg.symbolTypes = d3_svg_symbols.keys();\n  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n  d3_selectionPrototype.transition = function(name) {\n    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n      time: Date.now(),\n      ease: d3_ease_cubicInOut,\n      delay: 0,\n      duration: 250\n    };\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_selectionPrototype.interrupt = function(name) {\n    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));\n  };\n  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());\n  function d3_selection_interruptNS(ns) {\n    return function() {\n      var lock, activeId, active;\n      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        if (--lock.count) delete lock[activeId]; else delete this[ns];\n        lock.active += .5;\n        active.event && active.event.interrupt.call(this, this.__data__, active.index);\n      }\n    };\n  }\n  function d3_transition(groups, ns, id) {\n    d3_subclass(groups, d3_transitionPrototype);\n    groups.namespace = ns;\n    groups.id = id;\n    return groups;\n  }\n  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;\n  d3_transitionPrototype.call = d3_selectionPrototype.call;\n  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n  d3_transitionPrototype.node = d3_selectionPrototype.node;\n  d3_transitionPrototype.size = d3_selectionPrototype.size;\n  d3.transition = function(selection, name) {\n    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);\n  };\n  d3.transition.prototype = d3_transitionPrototype;\n  d3_transitionPrototype.select = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n          subgroup.push(subnode);\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.selectAll = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          transition = node[ns][id];\n          subnodes = selector.call(node, node.__data__, i, j);\n          subgroups.push(subgroup = []);\n          for (var k = -1, o = subnodes.length; ++k < o; ) {\n            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n            subgroup.push(subnode);\n          }\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_transition(subgroups, this.namespace, this.id);\n  };\n  d3_transitionPrototype.tween = function(name, tween) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);\n    return d3_selection_each(this, tween == null ? function(node) {\n      node[ns][id].tween.remove(name);\n    } : function(node) {\n      node[ns][id].tween.set(name, tween);\n    });\n  };\n  function d3_transition_tween(groups, name, value, tween) {\n    var id = groups.id, ns = groups.namespace;\n    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n    } : (value = tween(value), function(node) {\n      node[ns][id].tween.set(name, value);\n    }));\n  }\n  d3_transitionPrototype.attr = function(nameNS, value) {\n    if (arguments.length < 2) {\n      for (value in nameNS) this.attr(value, nameNS[value]);\n      return this;\n    }\n    var interpolate = nameNS == \"transform\" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrTween(b) {\n      return b == null ? attrNull : (b += \"\", function() {\n        var a = this.getAttribute(name), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttribute(name, i(t));\n        });\n      });\n    }\n    function attrTweenNS(b) {\n      return b == null ? attrNullNS : (b += \"\", function() {\n        var a = this.getAttributeNS(name.space, name.local), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttributeNS(name.space, name.local, i(t));\n        });\n      });\n    }\n    return d3_transition_tween(this, \"attr.\" + nameNS, value, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.attrTween = function(nameNS, tween) {\n    var name = d3.ns.qualify(nameNS);\n    function attrTween(d, i) {\n      var f = tween.call(this, d, i, this.getAttribute(name));\n      return f && function(t) {\n        this.setAttribute(name, f(t));\n      };\n    }\n    function attrTweenNS(d, i) {\n      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n      return f && function(t) {\n        this.setAttributeNS(name.space, name.local, f(t));\n      };\n    }\n    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.style(priority, name[priority], value);\n        return this;\n      }\n      priority = \"\";\n    }\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleString(b) {\n      return b == null ? styleNull : (b += \"\", function() {\n        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;\n        return a !== b && (i = d3_interpolate(a, b), function(t) {\n          this.style.setProperty(name, i(t), priority);\n        });\n      });\n    }\n    return d3_transition_tween(this, \"style.\" + name, value, styleString);\n  };\n  d3_transitionPrototype.styleTween = function(name, tween, priority) {\n    if (arguments.length < 3) priority = \"\";\n    function styleTween(d, i) {\n      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));\n      return f && function(t) {\n        this.style.setProperty(name, f(t), priority);\n      };\n    }\n    return this.tween(\"style.\" + name, styleTween);\n  };\n  d3_transitionPrototype.text = function(value) {\n    return d3_transition_tween(this, \"text\", value, d3_transition_text);\n  };\n  function d3_transition_text(b) {\n    if (b == null) b = \"\";\n    return function() {\n      this.textContent = b;\n    };\n  }\n  d3_transitionPrototype.remove = function() {\n    var ns = this.namespace;\n    return this.each(\"end.transition\", function() {\n      var p;\n      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);\n    });\n  };\n  d3_transitionPrototype.ease = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].ease;\n    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);\n    return d3_selection_each(this, function(node) {\n      node[ns][id].ease = value;\n    });\n  };\n  d3_transitionPrototype.delay = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].delay;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n    } : (value = +value, function(node) {\n      node[ns][id].delay = value;\n    }));\n  };\n  d3_transitionPrototype.duration = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].duration;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n    } : (value = Math.max(1, value), function(node) {\n      node[ns][id].duration = value;\n    }));\n  };\n  d3_transitionPrototype.each = function(type, listener) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) {\n      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;\n      try {\n        d3_transitionInheritId = id;\n        d3_selection_each(this, function(node, i, j) {\n          d3_transitionInherit = node[ns][id];\n          type.call(node, node.__data__, i, j);\n        });\n      } finally {\n        d3_transitionInherit = inherit;\n        d3_transitionInheritId = inheritId;\n      }\n    } else {\n      d3_selection_each(this, function(node) {\n        var transition = node[ns][id];\n        (transition.event || (transition.event = d3.dispatch(\"start\", \"end\", \"interrupt\"))).on(type, listener);\n      });\n    }\n    return this;\n  };\n  d3_transitionPrototype.transition = function() {\n    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if (node = group[i]) {\n          transition = node[ns][id0];\n          d3_transitionNode(node, i, ns, id1, {\n            time: transition.time,\n            ease: transition.ease,\n            delay: transition.delay + transition.duration,\n            duration: transition.duration\n          });\n        }\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id1);\n  };\n  function d3_transitionNamespace(name) {\n    return name == null ? \"__transition__\" : \"__transition_\" + name + \"__\";\n  }\n  function d3_transitionNode(node, i, ns, id, inherit) {\n    var lock = node[ns] || (node[ns] = {\n      active: 0,\n      count: 0\n    }), transition = lock[id], time, timer, duration, ease, tweens;\n    function schedule(elapsed) {\n      var delay = transition.delay;\n      timer.t = delay + time;\n      if (delay <= elapsed) return start(elapsed - delay);\n      timer.c = start;\n    }\n    function start(elapsed) {\n      var activeId = lock.active, active = lock[activeId];\n      if (active) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        --lock.count;\n        delete lock[activeId];\n        active.event && active.event.interrupt.call(node, node.__data__, active.index);\n      }\n      for (var cancelId in lock) {\n        if (+cancelId < id) {\n          var cancel = lock[cancelId];\n          cancel.timer.c = null;\n          cancel.timer.t = NaN;\n          --lock.count;\n          delete lock[cancelId];\n        }\n      }\n      timer.c = tick;\n      d3_timer(function() {\n        if (timer.c && tick(elapsed || 1)) {\n          timer.c = null;\n          timer.t = NaN;\n        }\n        return 1;\n      }, 0, time);\n      lock.active = id;\n      transition.event && transition.event.start.call(node, node.__data__, i);\n      tweens = [];\n      transition.tween.forEach(function(key, value) {\n        if (value = value.call(node, node.__data__, i)) {\n          tweens.push(value);\n        }\n      });\n      ease = transition.ease;\n      duration = transition.duration;\n    }\n    function tick(elapsed) {\n      var t = elapsed / duration, e = ease(t), n = tweens.length;\n      while (n > 0) {\n        tweens[--n].call(node, e);\n      }\n      if (t >= 1) {\n        transition.event && transition.event.end.call(node, node.__data__, i);\n        if (--lock.count) delete lock[id]; else delete node[ns];\n        return 1;\n      }\n    }\n    if (!transition) {\n      time = inherit.time;\n      timer = d3_timer(schedule, 0, time);\n      transition = lock[id] = {\n        tween: new d3_Map(),\n        time: time,\n        timer: timer,\n        delay: inherit.delay,\n        duration: inherit.duration,\n        ease: inherit.ease,\n        index: i\n      };\n      inherit = null;\n      ++lock.count;\n    }\n  }\n  d3.svg.axis = function() {\n    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n    function axis(g) {\n      g.each(function() {\n        var g = d3.select(this);\n        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();\n        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\".tick\").data(ticks, scale1), tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", ε), tickExit = d3.transition(tick.exit()).style(\"opacity\", ε).remove(), tickUpdate = d3.transition(tick.order()).style(\"opacity\", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n        var range = d3_scaleRange(scale1), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), \n        d3.transition(path));\n        tickEnter.append(\"line\");\n        tickEnter.append(\"text\");\n        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\"), sign = orient === \"top\" || orient === \"left\" ? -1 : 1, x1, x2, y1, y2;\n        if (orient === \"bottom\" || orient === \"top\") {\n          tickTransform = d3_svg_axisX, x1 = \"x\", y1 = \"y\", x2 = \"x2\", y2 = \"y2\";\n          text.attr(\"dy\", sign < 0 ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\");\n          pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + sign * outerTickSize + \"V0H\" + range[1] + \"V\" + sign * outerTickSize);\n        } else {\n          tickTransform = d3_svg_axisY, x1 = \"y\", y1 = \"x\", x2 = \"y2\", y2 = \"x2\";\n          text.attr(\"dy\", \".32em\").style(\"text-anchor\", sign < 0 ? \"end\" : \"start\");\n          pathUpdate.attr(\"d\", \"M\" + sign * outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * outerTickSize);\n        }\n        lineEnter.attr(y2, sign * innerTickSize);\n        textEnter.attr(y1, sign * tickSpacing);\n        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n        if (scale1.rangeBand) {\n          var x = scale1, dx = x.rangeBand() / 2;\n          scale0 = scale1 = function(d) {\n            return x(d) + dx;\n          };\n        } else if (scale0.rangeBand) {\n          scale0 = scale1;\n        } else {\n          tickExit.call(tickTransform, scale1, scale0);\n        }\n        tickEnter.call(tickTransform, scale0, scale1);\n        tickUpdate.call(tickTransform, scale1, scale1);\n      });\n    }\n    axis.scale = function(x) {\n      if (!arguments.length) return scale;\n      scale = x;\n      return axis;\n    };\n    axis.orient = function(x) {\n      if (!arguments.length) return orient;\n      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;\n      return axis;\n    };\n    axis.ticks = function() {\n      if (!arguments.length) return tickArguments_;\n      tickArguments_ = d3_array(arguments);\n      return axis;\n    };\n    axis.tickValues = function(x) {\n      if (!arguments.length) return tickValues;\n      tickValues = x;\n      return axis;\n    };\n    axis.tickFormat = function(x) {\n      if (!arguments.length) return tickFormat_;\n      tickFormat_ = x;\n      return axis;\n    };\n    axis.tickSize = function(x) {\n      var n = arguments.length;\n      if (!n) return innerTickSize;\n      innerTickSize = +x;\n      outerTickSize = +arguments[n - 1];\n      return axis;\n    };\n    axis.innerTickSize = function(x) {\n      if (!arguments.length) return innerTickSize;\n      innerTickSize = +x;\n      return axis;\n    };\n    axis.outerTickSize = function(x) {\n      if (!arguments.length) return outerTickSize;\n      outerTickSize = +x;\n      return axis;\n    };\n    axis.tickPadding = function(x) {\n      if (!arguments.length) return tickPadding;\n      tickPadding = +x;\n      return axis;\n    };\n    axis.tickSubdivide = function() {\n      return arguments.length && axis;\n    };\n    return axis;\n  };\n  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  };\n  function d3_svg_axisX(selection, x0, x1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = x0(d);\n      return \"translate(\" + (isFinite(v0) ? v0 : x1(d)) + \",0)\";\n    });\n  }\n  function d3_svg_axisY(selection, y0, y1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = y0(d);\n      return \"translate(0,\" + (isFinite(v0) ? v0 : y1(d)) + \")\";\n    });\n  }\n  d3.svg.brush = function() {\n    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n    function brush(g) {\n      g.each(function() {\n        var g = d3.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);\n        var background = g.selectAll(\".background\").data([ 0 ]);\n        background.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n        g.selectAll(\".extent\").data([ 0 ]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");\n        var resize = g.selectAll(\".resize\").data(resizes, d3_identity);\n        resize.exit().remove();\n        resize.enter().append(\"g\").attr(\"class\", function(d) {\n          return \"resize \" + d;\n        }).style(\"cursor\", function(d) {\n          return d3_svg_brushCursor[d];\n        }).append(\"rect\").attr(\"x\", function(d) {\n          return /[ew]$/.test(d) ? -3 : null;\n        }).attr(\"y\", function(d) {\n          return /^[ns]/.test(d) ? -3 : null;\n        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");\n        resize.style(\"display\", brush.empty() ? \"none\" : null);\n        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;\n        if (x) {\n          range = d3_scaleRange(x);\n          backgroundUpdate.attr(\"x\", range[0]).attr(\"width\", range[1] - range[0]);\n          redrawX(gUpdate);\n        }\n        if (y) {\n          range = d3_scaleRange(y);\n          backgroundUpdate.attr(\"y\", range[0]).attr(\"height\", range[1] - range[0]);\n          redrawY(gUpdate);\n        }\n        redraw(gUpdate);\n      });\n    }\n    brush.event = function(g) {\n      g.each(function() {\n        var event_ = event.of(this, arguments), extent1 = {\n          x: xExtent,\n          y: yExtent,\n          i: xExtentDomain,\n          j: yExtentDomain\n        }, extent0 = this.__chart__ || extent1;\n        this.__chart__ = extent1;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.brush\", function() {\n            xExtentDomain = extent0.i;\n            yExtentDomain = extent0.j;\n            xExtent = extent0.x;\n            yExtent = extent0.y;\n            event_({\n              type: \"brushstart\"\n            });\n          }).tween(\"brush:brush\", function() {\n            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);\n            xExtentDomain = yExtentDomain = null;\n            return function(t) {\n              xExtent = extent1.x = xi(t);\n              yExtent = extent1.y = yi(t);\n              event_({\n                type: \"brush\",\n                mode: \"resize\"\n              });\n            };\n          }).each(\"end.brush\", function() {\n            xExtentDomain = extent1.i;\n            yExtentDomain = extent1.j;\n            event_({\n              type: \"brush\",\n              mode: \"resize\"\n            });\n            event_({\n              type: \"brushend\"\n            });\n          });\n        } else {\n          event_({\n            type: \"brushstart\"\n          });\n          event_({\n            type: \"brush\",\n            mode: \"resize\"\n          });\n          event_({\n            type: \"brushend\"\n          });\n        }\n      });\n    };\n    function redraw(g) {\n      g.selectAll(\".resize\").attr(\"transform\", function(d) {\n        return \"translate(\" + xExtent[+/e$/.test(d)] + \",\" + yExtent[+/^s/.test(d)] + \")\";\n      });\n    }\n    function redrawX(g) {\n      g.select(\".extent\").attr(\"x\", xExtent[0]);\n      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", xExtent[1] - xExtent[0]);\n    }\n    function redrawY(g) {\n      g.select(\".extent\").attr(\"y\", yExtent[0]);\n      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", yExtent[1] - yExtent[0]);\n    }\n    function brushstart() {\n      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;\n      var w = d3.select(d3_window(target)).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);\n      if (d3.event.changedTouches) {\n        w.on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend);\n      } else {\n        w.on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend);\n      }\n      g.interrupt().selectAll(\"*\").interrupt();\n      if (dragging) {\n        origin[0] = xExtent[0] - origin[0];\n        origin[1] = yExtent[0] - origin[1];\n      } else if (resizing) {\n        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);\n        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];\n        origin[0] = xExtent[ex];\n        origin[1] = yExtent[ey];\n      } else if (d3.event.altKey) center = origin.slice();\n      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);\n      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));\n      event_({\n        type: \"brushstart\"\n      });\n      brushmove();\n      function keydown() {\n        if (d3.event.keyCode == 32) {\n          if (!dragging) {\n            center = null;\n            origin[0] -= xExtent[1];\n            origin[1] -= yExtent[1];\n            dragging = 2;\n          }\n          d3_eventPreventDefault();\n        }\n      }\n      function keyup() {\n        if (d3.event.keyCode == 32 && dragging == 2) {\n          origin[0] += xExtent[1];\n          origin[1] += yExtent[1];\n          dragging = 0;\n          d3_eventPreventDefault();\n        }\n      }\n      function brushmove() {\n        var point = d3.mouse(target), moved = false;\n        if (offset) {\n          point[0] += offset[0];\n          point[1] += offset[1];\n        }\n        if (!dragging) {\n          if (d3.event.altKey) {\n            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];\n            origin[0] = xExtent[+(point[0] < center[0])];\n            origin[1] = yExtent[+(point[1] < center[1])];\n          } else center = null;\n        }\n        if (resizingX && move1(point, x, 0)) {\n          redrawX(g);\n          moved = true;\n        }\n        if (resizingY && move1(point, y, 1)) {\n          redrawY(g);\n          moved = true;\n        }\n        if (moved) {\n          redraw(g);\n          event_({\n            type: \"brush\",\n            mode: dragging ? \"move\" : \"resize\"\n          });\n        }\n      }\n      function move1(point, scale, i) {\n        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n        if (dragging) {\n          r0 -= position;\n          r1 -= size + position;\n        }\n        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n        if (dragging) {\n          max = (min += position) + size;\n        } else {\n          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n          if (position < min) {\n            max = min;\n            min = position;\n          } else {\n            max = position;\n          }\n        }\n        if (extent[0] != min || extent[1] != max) {\n          if (i) yExtentDomain = null; else xExtentDomain = null;\n          extent[0] = min;\n          extent[1] = max;\n          return true;\n        }\n      }\n      function brushend() {\n        brushmove();\n        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);\n        d3.select(\"body\").style(\"cursor\", null);\n        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n        dragRestore();\n        event_({\n          type: \"brushend\"\n        });\n      }\n    }\n    brush.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.clamp = function(z) {\n      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;\n      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;\n      return brush;\n    };\n    brush.extent = function(z) {\n      var x0, x1, y0, y1, t;\n      if (!arguments.length) {\n        if (x) {\n          if (xExtentDomain) {\n            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n          } else {\n            x0 = xExtent[0], x1 = xExtent[1];\n            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n          }\n        }\n        if (y) {\n          if (yExtentDomain) {\n            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n          } else {\n            y0 = yExtent[0], y1 = yExtent[1];\n            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n          }\n        }\n        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];\n      }\n      if (x) {\n        x0 = z[0], x1 = z[1];\n        if (y) x0 = x0[0], x1 = x1[0];\n        xExtentDomain = [ x0, x1 ];\n        if (x.invert) x0 = x(x0), x1 = x(x1);\n        if (x1 < x0) t = x0, x0 = x1, x1 = t;\n        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];\n      }\n      if (y) {\n        y0 = z[0], y1 = z[1];\n        if (x) y0 = y0[1], y1 = y1[1];\n        yExtentDomain = [ y0, y1 ];\n        if (y.invert) y0 = y(y0), y1 = y(y1);\n        if (y1 < y0) t = y0, y0 = y1, y1 = t;\n        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];\n      }\n      return brush;\n    };\n    brush.clear = function() {\n      if (!brush.empty()) {\n        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];\n        xExtentDomain = yExtentDomain = null;\n      }\n      return brush;\n    };\n    brush.empty = function() {\n      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];\n    };\n    return d3.rebind(brush, event, \"on\");\n  };\n  var d3_svg_brushCursor = {\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];\n  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n  var d3_time_formatUtc = d3_time_format.utc;\n  var d3_time_formatIso = d3_time_formatUtc(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n  d3_time_format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n  function d3_time_formatIsoNative(date) {\n    return date.toISOString();\n  }\n  d3_time_formatIsoNative.parse = function(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  };\n  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n  d3_time.second = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 1e3) * 1e3);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n  }, function(date) {\n    return date.getSeconds();\n  });\n  d3_time.seconds = d3_time.second.range;\n  d3_time.seconds.utc = d3_time.second.utc.range;\n  d3_time.minute = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 6e4) * 6e4);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n  }, function(date) {\n    return date.getMinutes();\n  });\n  d3_time.minutes = d3_time.minute.range;\n  d3_time.minutes.utc = d3_time.minute.utc.range;\n  d3_time.hour = d3_time_interval(function(date) {\n    var timezone = date.getTimezoneOffset() / 60;\n    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n  }, function(date) {\n    return date.getHours();\n  });\n  d3_time.hours = d3_time.hour.range;\n  d3_time.hours.utc = d3_time.hour.utc.range;\n  d3_time.month = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setDate(1);\n    return date;\n  }, function(date, offset) {\n    date.setMonth(date.getMonth() + offset);\n  }, function(date) {\n    return date.getMonth();\n  });\n  d3_time.months = d3_time.month.range;\n  d3_time.months.utc = d3_time.month.utc.range;\n  function d3_time_scale(linear, methods, format) {\n    function scale(x) {\n      return linear(x);\n    }\n    scale.invert = function(x) {\n      return d3_time_scaleDate(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n      linear.domain(x);\n      return scale;\n    };\n    function tickMethod(extent, count) {\n      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);\n      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {\n        return d / 31536e6;\n      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n    }\n    scale.nice = function(interval, skip) {\n      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" && tickMethod(extent, interval);\n      if (method) interval = method[0], skip = method[1];\n      function skipped(date) {\n        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n      }\n      return scale.domain(d3_scale_nice(domain, skip > 1 ? {\n        floor: function(date) {\n          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);\n          return date;\n        },\n        ceil: function(date) {\n          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);\n          return date;\n        }\n      } : interval));\n    };\n    scale.ticks = function(interval, skip) {\n      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" ? tickMethod(extent, interval) : !interval.range && [ {\n        range: interval\n      }, skip ];\n      if (method) interval = method[0], skip = method[1];\n      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);\n    };\n    scale.tickFormat = function() {\n      return format;\n    };\n    scale.copy = function() {\n      return d3_time_scale(linear.copy(), methods, format);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_time_scaleDate(t) {\n    return new Date(t);\n  }\n  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \".%L\", function(d) {\n    return d.getMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getDay() && d.getDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  var d3_time_scaleMilliseconds = {\n    range: function(start, stop, step) {\n      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n    },\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  d3_time_scaleLocalMethods.year = d3_time.year;\n  d3_time.scale = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n  };\n  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {\n    return [ m[0].utc, m[1] ];\n  });\n  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \".%L\", function(d) {\n    return d.getUTCMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getUTCSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getUTCMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getUTCHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getUTCDay() && d.getUTCDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getUTCDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getUTCMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n  d3_time.scale.utc = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n  };\n  d3.text = d3_xhrType(function(request) {\n    return request.responseText;\n  });\n  d3.json = function(url, callback) {\n    return d3_xhr(url, \"application/json\", d3_json, callback);\n  };\n  function d3_json(request) {\n    return JSON.parse(request.responseText);\n  }\n  d3.html = function(url, callback) {\n    return d3_xhr(url, \"text/html\", d3_html, callback);\n  };\n  function d3_html(request) {\n    var range = d3_document.createRange();\n    range.selectNode(d3_document.body);\n    return range.createContextualFragment(request.responseText);\n  }\n  d3.xml = d3_xhrType(function(request) {\n    return request.responseXML;\n  });\n  if (typeof define === \"function\" && define.amd) this.d3 = d3, define(d3); else if (typeof module === \"object\" && module.exports) module.exports = d3; else this.d3 = d3;\n}();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/d3/d3.js\n// module id = 291\n// module chunks = 0","module.exports = require(\"./crossfilter\").crossfilter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dc/node_modules/crossfilter2/index.js\n// module id = 292\n// module chunks = 0","(function(exports){\ncrossfilter.version = \"1.3.14\";\nfunction crossfilter_identity(d) {\n  return d;\n}\ncrossfilter.permute = permute;\n\nfunction permute(array, index) {\n  for (var i = 0, n = index.length, copy = new Array(n); i < n; ++i) {\n    copy[i] = array[index[i]];\n  }\n  return copy;\n}\nvar bisect = crossfilter.bisect = bisect_by(crossfilter_identity);\n\nbisect.by = bisect_by;\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\nvar heap = crossfilter.heap = heap_by(crossfilter_identity);\n\nheap.by = heap_by;\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\nvar heapselect = crossfilter.heapselect = heapselect_by(crossfilter_identity);\n\nheapselect.by = heapselect_by;\n\nfunction heapselect_by(f) {\n  var heap = heap_by(f);\n\n  // Returns a new array containing the top k elements in the array a[lo:hi].\n  // The returned array is not sorted, but maintains the heap property. If k is\n  // greater than hi - lo, then fewer than k elements will be returned. The\n  // order of elements in a is unchanged by this operation.\n  function heapselect(a, lo, hi, k) {\n    var queue = new Array(k = Math.min(hi - lo, k)),\n        min,\n        i,\n        x,\n        d;\n\n    for (i = 0; i < k; ++i) queue[i] = a[lo++];\n    heap(queue, 0, k);\n\n    if (lo < hi) {\n      min = f(queue[0]);\n      do {\n        if (x = f(d = a[lo]) > min) {\n          queue[0] = d;\n          min = f(heap(queue, 0, k)[0]);\n        }\n      } while (++lo < hi);\n    }\n\n    return queue;\n  }\n\n  return heapselect;\n}\nvar insertionsort = crossfilter.insertionsort = insertionsort_by(crossfilter_identity);\n\ninsertionsort.by = insertionsort_by;\n\nfunction insertionsort_by(f) {\n\n  function insertionsort(a, lo, hi) {\n    for (var i = lo + 1; i < hi; ++i) {\n      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n        a[j] = a[j - 1];\n      }\n      a[j] = t;\n    }\n    return a;\n  }\n\n  return insertionsort;\n}\n// Algorithm designed by Vladimir Yaroslavskiy.\n// Implementation based on the Dart project; see lib/dart/LICENSE for details.\n\nvar quicksort = crossfilter.quicksort = quicksort_by(crossfilter_identity);\n\nquicksort.by = quicksort_by;\n\nfunction quicksort_by(f) {\n  var insertionsort = insertionsort_by(f);\n\n  function sort(a, lo, hi) {\n    return (hi - lo < quicksort_sizeThreshold\n        ? insertionsort\n        : quicksort)(a, lo, hi);\n  }\n\n  function quicksort(a, lo, hi) {\n    // Compute the two pivots by looking at 5 elements.\n    var sixth = (hi - lo) / 6 | 0,\n        i1 = lo + sixth,\n        i5 = hi - 1 - sixth,\n        i3 = lo + hi - 1 >> 1,  // The midpoint.\n        i2 = i3 - sixth,\n        i4 = i3 + sixth;\n\n    var e1 = a[i1], x1 = f(e1),\n        e2 = a[i2], x2 = f(e2),\n        e3 = a[i3], x3 = f(e3),\n        e4 = a[i4], x4 = f(e4),\n        e5 = a[i5], x5 = f(e5);\n\n    var t;\n\n    // Sort the selected 5 elements using a sorting network.\n    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n    var pivot1 = e2, pivotValue1 = x2,\n        pivot2 = e4, pivotValue2 = x4;\n\n    // e2 and e4 have been saved in the pivot variables. They will be written\n    // back, once the partitioning is finished.\n    a[i1] = e1;\n    a[i2] = a[lo];\n    a[i3] = e3;\n    a[i4] = a[hi - 1];\n    a[i5] = e5;\n\n    var less = lo + 1,   // First element in the middle partition.\n        great = hi - 2;  // Last element in the middle partition.\n\n    // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n    // Object.prototype.valueOf; == and === do not, so in order to be consistent\n    // with natural order (such as for Date objects), we must do two compares.\n    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n    if (pivotsEqual) {\n\n      // Degenerated case where the partitioning becomes a dutch national flag\n      // problem.\n      //\n      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n      //  ^             ^          ^             ^            ^\n      // left         less         k           great         right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1) for x in ]left, less[ : x < pivot.\n      //   2) for x in [less, k[ : x == pivot.\n      //   3) for x in ]great, right[ : x > pivot.\n      for (var k = less; k <= great; ++k) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else if (xk > pivotValue1) {\n\n          // Find the first element <= pivot in the range [k - 1, great] and\n          // put [:ek:] there. We know that such an element must exist:\n          // When k == less, then el3 (which is equal to pivot) lies in the\n          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n          // Note that in the latter case invariant 2 will be violated for a\n          // short amount of time. The invariant will be restored when the\n          // pivots are put into their final positions.\n          while (true) {\n            var greatValue = f(a[great]);\n            if (greatValue > pivotValue1) {\n              great--;\n              // This is the only location in the while-loop where a new\n              // iteration is started.\n              continue;\n            } else if (greatValue < pivotValue1) {\n              // Triple exchange.\n              a[k] = a[less];\n              a[less++] = a[great];\n              a[great--] = ek;\n              break;\n            } else {\n              a[k] = a[great];\n              a[great--] = ek;\n              // Note: if great < k then we will exit the outer loop and fix\n              // invariant 2 (which we just violated).\n              break;\n            }\n          }\n        }\n      }\n    } else {\n\n      // We partition the list into three parts:\n      //  1. < pivot1\n      //  2. >= pivot1 && <= pivot2\n      //  3. > pivot2\n      //\n      // During the loop we have:\n      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n      //  ^            ^                        ^              ^             ^\n      // left         less                     k              great        right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1. for x in ]left, less[ : x < pivot1\n      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n      //   3. for x in ]great, right[ : x > pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else {\n          if (xk > pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] <= pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] >= pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Move pivots into their final positions.\n    // We shrunk the list from both sides (a[left] and a[right] have\n    // meaningless values in them) and now we move elements from the first\n    // and third partition into these locations so that we can store the\n    // pivots.\n    a[lo] = a[less - 1];\n    a[less - 1] = pivot1;\n    a[hi - 1] = a[great + 1];\n    a[great + 1] = pivot2;\n\n    // The list is now partitioned into three partitions:\n    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n    //  ^            ^                        ^             ^\n    // left         less                     great        right\n\n    // Recursive descent. (Don't include the pivot values.)\n    sort(a, lo, less - 1);\n    sort(a, great + 2, hi);\n\n    if (pivotsEqual) {\n      // All elements in the second partition are equal to the pivot. No\n      // need to sort them.\n      return a;\n    }\n\n    // In theory it should be enough to call _doSort recursively on the second\n    // partition.\n    // The Android source however removes the pivot elements from the recursive\n    // call if the second partition is too large (more than 2/3 of the list).\n    if (less < i1 && great > i5) {\n      var lessValue, greatValue;\n      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\n      while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\n\n      // Copy paste of the previous 3-way partitioning with adaptions.\n      //\n      // We partition the list into three parts:\n      //  1. == pivot1\n      //  2. > pivot1 && < pivot2\n      //  3. == pivot2\n      //\n      // During the loop we have:\n      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n      //              ^                      ^              ^\n      //            less                     k              great\n      //\n      // Invariants:\n      //   1. for x in [ *, less[ : x == pivot1\n      //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n      //   3. for x in ]great, * ] : x == pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk <= pivotValue1 && xk >= pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          less++;\n        } else {\n          if (xk <= pivotValue2 && xk >= pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] < pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] == pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // The second partition has now been cleared of pivot elements and looks\n    // as follows:\n    // [  *  |  > pivot1 && < pivot2  | * ]\n    //        ^                      ^\n    //       less                  great\n    // Sort the second partition using recursive descent.\n\n    // The second partition looks as follows:\n    // [  *  |  >= pivot1 && <= pivot2  | * ]\n    //        ^                        ^\n    //       less                    great\n    // Simply sort it by recursive descent.\n\n    return sort(a, less, great + 1);\n  }\n\n  return sort;\n}\n\nvar quicksort_sizeThreshold = 32;\nvar crossfilter_array8 = crossfilter_arrayUntyped,\n    crossfilter_array16 = crossfilter_arrayUntyped,\n    crossfilter_array32 = crossfilter_arrayUntyped,\n    crossfilter_arrayLengthen = crossfilter_arrayLengthenUntyped,\n    crossfilter_arrayWiden = crossfilter_arrayWidenUntyped;\n\nif (typeof Uint8Array !== \"undefined\") {\n  crossfilter_array8 = function(n) { return new Uint8Array(n); };\n  crossfilter_array16 = function(n) { return new Uint16Array(n); };\n  crossfilter_array32 = function(n) { return new Uint32Array(n); };\n\n  crossfilter_arrayLengthen = function(array, length) {\n    if (array.length >= length) return array;\n    var copy = new array.constructor(length);\n    copy.set(array);\n    return copy;\n  };\n\n  crossfilter_arrayWiden = function(array, width) {\n    var copy;\n    switch (width) {\n      case 16: copy = crossfilter_array16(array.length); break;\n      case 32: copy = crossfilter_array32(array.length); break;\n      default: throw new Error(\"invalid array width!\");\n    }\n    copy.set(array);\n    return copy;\n  };\n}\n\nfunction crossfilter_arrayUntyped(n) {\n  var array = new Array(n), i = -1;\n  while (++i < n) array[i] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayLengthenUntyped(array, length) {\n  var n = array.length;\n  while (n < length) array[n++] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayWidenUntyped(array, width) {\n  if (width > 32) throw new Error(\"invalid array width!\");\n  return array;\n}\nfunction crossfilter_filterExact(bisect, value) {\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n  };\n}\n\nfunction crossfilter_filterRange(bisect, range) {\n  var min = range[0],\n      max = range[1];\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n  };\n}\n\nfunction crossfilter_filterAll(values) {\n  return [0, values.length];\n}\nfunction crossfilter_null() {\n  return null;\n}\nfunction crossfilter_zero() {\n  return 0;\n}\nfunction crossfilter_reduceIncrement(p) {\n  return p + 1;\n}\n\nfunction crossfilter_reduceDecrement(p) {\n  return p - 1;\n}\n\nfunction crossfilter_reduceAdd(f) {\n  return function(p, v) {\n    return p + +f(v);\n  };\n}\n\nfunction crossfilter_reduceSubtract(f) {\n  return function(p, v) {\n    return p - f(v);\n  };\n}\nexports.crossfilter = crossfilter;\n\nfunction crossfilter() {\n  var crossfilter = {\n    add: add,\n    remove: removeData,\n    dimension: dimension,\n    groupAll: groupAll,\n    size: size\n  };\n\n  var data = [], // the records\n      n = 0, // the number of records; data.length\n      m = 0, // a bit mask representing which dimensions are in use\n      M = 8, // number of dimensions that can fit in `filters`\n      filters = crossfilter_array8(0), // M bits per record; 1 is filtered out\n      filterListeners = [], // when the filters change\n      dataListeners = [], // when data is added\n      removeDataListeners = []; // when data is removed\n\n  // Adds the specified new records to this crossfilter.\n  function add(newData) {\n    var n0 = n,\n        n1 = newData.length;\n\n    // If there's actually new data to add…\n    // Merge the new data into the existing data.\n    // Lengthen the filter bitset to handle the new records.\n    // Notify listeners (dimensions and groups) that new data is available.\n    if (n1) {\n      data = data.concat(newData);\n      filters = crossfilter_arrayLengthen(filters, n += n1);\n      dataListeners.forEach(function(l) { l(newData, n0, n1); });\n    }\n\n    return crossfilter;\n  }\n\n  // Removes all records that match the current filters.\n  function removeData() {\n    var newIndex = crossfilter_index(n, n),\n        removed = [];\n    for (var i = 0, j = 0; i < n; ++i) {\n      if (filters[i]) newIndex[i] = j++;\n      else removed.push(i);\n    }\n\n    // Remove all matching records from groups.\n    filterListeners.forEach(function(l) { l(0, [], removed); });\n\n    // Update indexes.\n    removeDataListeners.forEach(function(l) { l(newIndex); });\n\n    // Remove old filters and data by overwriting.\n    for (var i = 0, j = 0, k; i < n; ++i) {\n      if (k = filters[i]) {\n        if (i !== j) filters[j] = k, data[j] = data[i];\n        ++j;\n      }\n    }\n    data.length = j;\n    while (n > j) filters[--n] = 0;\n  }\n\n  // Adds a new dimension with the specified value accessor function.\n  function dimension(value) {\n    var dimension = {\n      filter: filter,\n      filterExact: filterExact,\n      filterRange: filterRange,\n      filterFunction: filterFunction,\n      filterAll: filterAll,\n      top: top,\n      bottom: bottom,\n      group: group,\n      groupAll: groupAll,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var one = ~m & -~m, // lowest unset bit as mask, e.g., 00001000\n        zero = ~one, // inverted one, e.g., 11110111\n        values, // sorted, cached array\n        index, // value rank ↦ object id\n        newValues, // temporary array storing newly-added values\n        newIndex, // temporary array storing newly-added index\n        sort = quicksort_by(function(i) { return newValues[i]; }),\n        refilter = crossfilter_filterAll, // for recomputing filter\n        refilterFunction, // the custom filter function in use\n        indexListeners = [], // when data is added\n        dimensionGroups = [],\n        lo0 = 0,\n        hi0 = 0;\n\n    // Updating a dimension is a two-stage process. First, we must update the\n    // associated filters for the newly-added records. Once all dimensions have\n    // updated their filters, the groups are notified to update.\n    dataListeners.unshift(preAdd);\n    dataListeners.push(postAdd);\n\n    removeDataListeners.push(removeData);\n\n    // Incorporate any existing data into this dimension, and make sure that the\n    // filter bitset is wide enough to handle the new dimension.\n    m |= one;\n    if (M >= 32 ? !one : m & -(1 << M)) {\n      filters = crossfilter_arrayWiden(filters, M <<= 1);\n    }\n    preAdd(data, 0, n);\n    postAdd(data, 0, n);\n\n    // Incorporates the specified new records into this dimension.\n    // This function is responsible for updating filters, values, and index.\n    function preAdd(newData, n0, n1) {\n\n      // Permute new values into natural order using a sorted index.\n      newValues = newData.map(value);\n      newIndex = sort(crossfilter_range(n1), 0, n1);\n      newValues = permute(newValues, newIndex);\n\n      // Bisect newValues to determine which new records are selected.\n      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1], i;\n      if (refilterFunction) {\n        for (i = 0; i < n1; ++i) {\n          if (!refilterFunction(newValues[i], i)) filters[newIndex[i] + n0] |= one;\n        }\n      } else {\n        for (i = 0; i < lo1; ++i) filters[newIndex[i] + n0] |= one;\n        for (i = hi1; i < n1; ++i) filters[newIndex[i] + n0] |= one;\n      }\n\n      // If this dimension previously had no data, then we don't need to do the\n      // more expensive merge operation; use the new values and index as-is.\n      if (!n0) {\n        values = newValues;\n        index = newIndex;\n        lo0 = lo1;\n        hi0 = hi1;\n        return;\n      }\n\n      var oldValues = values,\n          oldIndex = index,\n          i0 = 0,\n          i1 = 0;\n\n      // Otherwise, create new arrays into which to merge new and old.\n      values = new Array(n);\n      index = crossfilter_index(n, n);\n\n      // Merge the old and new sorted values, and old and new index.\n      for (i = 0; i0 < n0 && i1 < n1; ++i) {\n        if (oldValues[i0] < newValues[i1]) {\n          values[i] = oldValues[i0];\n          index[i] = oldIndex[i0++];\n        } else {\n          values[i] = newValues[i1];\n          index[i] = newIndex[i1++] + n0;\n        }\n      }\n\n      // Add any remaining old values.\n      for (; i0 < n0; ++i0, ++i) {\n        values[i] = oldValues[i0];\n        index[i] = oldIndex[i0];\n      }\n\n      // Add any remaining new values.\n      for (; i1 < n1; ++i1, ++i) {\n        values[i] = newValues[i1];\n        index[i] = newIndex[i1] + n0;\n      }\n\n      // Bisect again to recompute lo0 and hi0.\n      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // When all filters have updated, notify index listeners of the new values.\n    function postAdd(newData, n0, n1) {\n      indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\n      newValues = newIndex = null;\n    }\n\n    function removeData(reIndex) {\n      for (var i = 0, j = 0, k; i < n; ++i) {\n        if (filters[k = index[i]]) {\n          if (i !== j) values[j] = values[i];\n          index[j] = reIndex[k];\n          ++j;\n        }\n      }\n      values.length = j;\n      while (j < n) index[j++] = 0;\n\n      // Bisect again to recompute lo0 and hi0.\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // Updates the selected values based on the specified bounds [lo, hi].\n    // This implementation is used by all the public filter methods.\n    function filterIndexBounds(bounds) {\n      var lo1 = bounds[0],\n          hi1 = bounds[1];\n\n      if (refilterFunction) {\n        refilterFunction = null;\n        filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; });\n        lo0 = lo1;\n        hi0 = hi1;\n        return dimension;\n      }\n\n      var i,\n          j,\n          k,\n          added = [],\n          removed = [];\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      lo0 = lo1;\n      hi0 = hi1;\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n      return dimension;\n    }\n\n    // Filters this dimension using the specified range, value, or null.\n    // If the range is null, this is equivalent to filterAll.\n    // If the range is an array, this is equivalent to filterRange.\n    // Otherwise, this is equivalent to filterExact.\n    function filter(range) {\n      return range == null\n          ? filterAll() : Array.isArray(range)\n          ? filterRange(range) : typeof range === \"function\"\n          ? filterFunction(range)\n          : filterExact(range);\n    }\n\n    // Filters this dimension to select the exact value.\n    function filterExact(value) {\n      return filterIndexBounds((refilter = crossfilter_filterExact(bisect, value))(values));\n    }\n\n    // Filters this dimension to select the specified range [lo, hi].\n    // The lower bound is inclusive, and the upper bound is exclusive.\n    function filterRange(range) {\n      return filterIndexBounds((refilter = crossfilter_filterRange(bisect, range))(values));\n    }\n\n    // Clears any filters on this dimension.\n    function filterAll() {\n      return filterIndexBounds((refilter = crossfilter_filterAll)(values));\n    }\n\n    // Filters this dimension using an arbitrary function.\n    function filterFunction(f) {\n      refilter = crossfilter_filterAll;\n\n      filterIndexFunction(refilterFunction = f);\n\n      lo0 = 0;\n      hi0 = n;\n\n      return dimension;\n    }\n\n    function filterIndexFunction(f) {\n      var i,\n          k,\n          x,\n          added = [],\n          removed = [];\n\n      for (i = 0; i < n; ++i) {\n        if (!(filters[k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n          if (x) filters[k] &= zero, added.push(k);\n          else filters[k] |= one, removed.push(k);\n        }\n      }\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n    }\n\n    // Returns the top K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function top(k) {\n      var array = [],\n          i = hi0,\n          j;\n\n      while (--i >= lo0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n      }\n\n      return array;\n    }\n\n    // Returns the bottom K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function bottom(k) {\n      var array = [],\n          i = lo0,\n          j;\n\n      while (i < hi0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n        i++;\n      }\n\n      return array;\n    }\n\n    // Adds a new group to this dimension, using the specified key function.\n    function group(key) {\n      var group = {\n        top: top,\n        all: all,\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        order: order,\n        orderNatural: orderNatural,\n        size: size,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      // Ensure that this group will be removed when the dimension is removed.\n      dimensionGroups.push(group);\n\n      var groups, // array of {key, value}\n          groupIndex, // object id ↦ group id\n          groupWidth = 8,\n          groupCapacity = crossfilter_capacity(groupWidth),\n          k = 0, // cardinality\n          select,\n          heap,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          update = crossfilter_null,\n          reset = crossfilter_null,\n          resetNeeded = true,\n          groupAll = key === crossfilter_null;\n\n      if (arguments.length < 1) key = crossfilter_identity;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the associated reduce values. It must also listen to\n      // the parent dimension for when data is added, and compute new keys.\n      filterListeners.push(update);\n      indexListeners.push(add);\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into the grouping.\n      add(values, index, 0, n);\n\n      // Incorporates the specified new values into this group.\n      // This function is responsible for updating groups and groupIndex.\n      function add(newValues, newIndex, n0, n1) {\n        var oldGroups = groups,\n            reIndex = crossfilter_index(k, groupCapacity),\n            add = reduceAdd,\n            initial = reduceInitial,\n            k0 = k, // old cardinality\n            i0 = 0, // index of old group\n            i1 = 0, // index of new record\n            j, // object id\n            g0, // old group\n            x0, // old key\n            x1, // new key\n            g, // group to add\n            x; // key of group to add\n\n        // If a reset is needed, we don't need to update the reduce values.\n        if (resetNeeded) add = initial = crossfilter_null;\n\n        // Reset the new groups (k is a lower bound).\n        // Also, make sure that groupIndex exists and is long enough.\n        groups = new Array(k), k = 0;\n        groupIndex = k0 > 1 ? crossfilter_arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n\n        // Get the first old key (x0 of g0), if it exists.\n        if (k0) x0 = (g0 = oldGroups[0]).key;\n\n        // Find the first new key (x1), skipping NaN keys.\n        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\n\n        // While new keys remain…\n        while (i1 < n1) {\n\n          // Determine the lesser of the two current keys; new and old.\n          // If there are no old keys remaining, then always add the new key.\n          if (g0 && x0 <= x1) {\n            g = g0, x = x0;\n\n            // Record the new index of the old group.\n            reIndex[i0] = k;\n\n            // Retrieve the next old key.\n            if (g0 = oldGroups[++i0]) x0 = g0.key;\n          } else {\n            g = {key: x1, value: initial()}, x = x1;\n          }\n\n          // Add the lesser group.\n          groups[k] = g;\n\n          // Add any selected records belonging to the added group, while\n          // advancing the new key and populating the associated group index.\n          while (!(x1 > x)) {\n            groupIndex[j = newIndex[i1] + n0] = k;\n            if (!(filters[j] & zero)) g.value = add(g.value, data[j]);\n            if (++i1 >= n1) break;\n            x1 = key(newValues[i1]);\n          }\n\n          groupIncrement();\n        }\n\n        // Add any remaining old groups that were greater than all new keys.\n        // No incremental reduce is needed; these groups have no new records.\n        // Also record the new index of the old group.\n        while (i0 < k0) {\n          groups[reIndex[i0] = k] = oldGroups[i0++];\n          groupIncrement();\n        }\n\n        // If we added any new groups before any old groups,\n        // update the group index of all the old records.\n        if (k > i0) for (i0 = 0; i0 < n0; ++i0) {\n          groupIndex[i0] = reIndex[groupIndex[i0]];\n        }\n\n        // Modify the update and reset behavior based on the cardinality.\n        // If the cardinality is less than or equal to one, then the groupIndex\n        // is not needed. If the cardinality is zero, then there are no records\n        // and therefore no groups to update or reset. Note that we also must\n        // change the registered listener to point to the new method.\n        j = filterListeners.indexOf(update);\n        if (k > 1) {\n          update = updateMany;\n          reset = resetMany;\n        } else {\n          if (!k && groupAll) {\n            k = 1;\n            groups = [{key: null, value: initial()}];\n          }\n          if (k === 1) {\n            update = updateOne;\n            reset = resetOne;\n          } else {\n            update = crossfilter_null;\n            reset = crossfilter_null;\n          }\n          groupIndex = null;\n        }\n        filterListeners[j] = update;\n\n        // Count the number of added groups,\n        // and widen the group index as needed.\n        function groupIncrement() {\n          if (++k === groupCapacity) {\n            reIndex = crossfilter_arrayWiden(reIndex, groupWidth <<= 1);\n            groupIndex = crossfilter_arrayWiden(groupIndex, groupWidth);\n            groupCapacity = crossfilter_capacity(groupWidth);\n          }\n        }\n      }\n\n      function removeData() {\n        if (k > 1) {\n          var oldK = k,\n              oldGroups = groups,\n              seenGroups = crossfilter_index(oldK, oldK);\n\n          // Filter out non-matches by copying matching group index entries to\n          // the beginning of the array.\n          for (var i = 0, j = 0; i < n; ++i) {\n            if (filters[i]) {\n              seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n              ++j;\n            }\n          }\n\n          // Reassemble groups including only those groups that were referred\n          // to by matching group index entries.  Note the new group index in\n          // seenGroups.\n          groups = [], k = 0;\n          for (i = 0; i < oldK; ++i) {\n            if (seenGroups[i]) {\n              seenGroups[i] = k++;\n              groups.push(oldGroups[i]);\n            }\n          }\n\n          if (k > 1) {\n            // Reindex the group index using seenGroups to find the new index.\n            for (var i = 0; i < j; ++i) groupIndex[i] = seenGroups[groupIndex[i]];\n          } else {\n            groupIndex = null;\n          }\n          filterListeners[filterListeners.indexOf(update)] = k > 1\n              ? (reset = resetMany, update = updateMany)\n              : k === 1 ? (reset = resetOne, update = updateOne)\n              : reset = update = crossfilter_null;\n        } else if (k === 1) {\n          if (groupAll) return;\n          for (var i = 0; i < n; ++i) if (filters[i]) return;\n          groups = [], k = 0;\n          filterListeners[filterListeners.indexOf(update)] =\n          update = reset = crossfilter_null;\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is greater than 1.\n      function updateMany(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g;\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g = groups[groupIndex[k]];\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is 1.\n      function updateOne(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g = groups[0];\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is greater than 1.\n      function resetMany() {\n        var i,\n            g;\n\n        // Reset all group values.\n        for (i = 0; i < k; ++i) {\n          groups[i].value = reduceInitial();\n        }\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g = groups[groupIndex[i]];\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is 1.\n      function resetOne() {\n        var i,\n            g = groups[0];\n\n        // Reset the singleton group values.\n        g.value = reduceInitial();\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Returns the array of group values, in the dimension's natural order.\n      function all() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return groups;\n      }\n\n      // Returns a new array containing the top K group values, in reduce order.\n      function top(k) {\n        var top = select(all(), 0, groups.length, k);\n        return heap.sort(top, 0, top.length);\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce values, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Sets the reduce order, using the specified accessor.\n      function order(value) {\n        select = heapselect_by(valueOf);\n        heap = heap_by(valueOf);\n        function valueOf(d) { return value(d.value); }\n        return group;\n      }\n\n      // A convenience method for natural ordering by reduce value.\n      function orderNatural() {\n        return order(crossfilter_identity);\n      }\n\n      // Returns the cardinality of this group, irrespective of any filters.\n      function size() {\n        return k;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i, 1);\n        i = indexListeners.indexOf(add);\n        if (i >= 0) indexListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        return group;\n      }\n\n      return reduceCount().orderNatural();\n    }\n\n    // A convenience function for generating a singleton group.\n    function groupAll() {\n      var g = group(crossfilter_null), all = g.all;\n      delete g.all;\n      delete g.top;\n      delete g.order;\n      delete g.orderNatural;\n      delete g.size;\n      g.value = function() { return all()[0].value; };\n      return g;\n    }\n\n    // Removes this dimension and associated groups and event listeners.\n    function dispose() {\n      dimensionGroups.forEach(function(group) { group.dispose(); });\n      var i = dataListeners.indexOf(preAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = dataListeners.indexOf(postAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = removeDataListeners.indexOf(removeData);\n      if (i >= 0) removeDataListeners.splice(i, 1);\n      m &= zero;\n      return filterAll();\n    }\n\n    return dimension;\n  }\n\n  // A convenience method for groupAll on a dummy dimension.\n  // This implementation can be optimized since it always has cardinality 1.\n  function groupAll() {\n    var group = {\n      reduce: reduce,\n      reduceCount: reduceCount,\n      reduceSum: reduceSum,\n      value: value,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var reduceValue,\n        reduceAdd,\n        reduceRemove,\n        reduceInitial,\n        resetNeeded = true;\n\n    // The group listens to the crossfilter for when any dimension changes, so\n    // that it can update the reduce value. It must also listen to the parent\n    // dimension for when data is added.\n    filterListeners.push(update);\n    dataListeners.push(add);\n\n    // For consistency; actually a no-op since resetNeeded is true.\n    add(data, 0, n);\n\n    // Incorporates the specified new values into this group.\n    function add(newData, n0) {\n      var i;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = n0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Reduces the specified selected or deselected records.\n    function update(filterOne, added, removed) {\n      var i,\n          k,\n          n;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = 0, n = added.length; i < n; ++i) {\n        if (!filters[k = added[i]]) {\n          reduceValue = reduceAdd(reduceValue, data[k]);\n        }\n      }\n\n      // Remove the removed values.\n      for (i = 0, n = removed.length; i < n; ++i) {\n        if (filters[k = removed[i]] === filterOne) {\n          reduceValue = reduceRemove(reduceValue, data[k]);\n        }\n      }\n    }\n\n    // Recomputes the group reduce value from scratch.\n    function reset() {\n      var i;\n\n      reduceValue = reduceInitial();\n\n      for (i = 0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Sets the reduce behavior for this group to use the specified functions.\n    // This method lazily recomputes the reduce value, waiting until needed.\n    function reduce(add, remove, initial) {\n      reduceAdd = add;\n      reduceRemove = remove;\n      reduceInitial = initial;\n      resetNeeded = true;\n      return group;\n    }\n\n    // A convenience method for reducing by count.\n    function reduceCount() {\n      return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n    }\n\n    // A convenience method for reducing by sum(value).\n    function reduceSum(value) {\n      return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n    }\n\n    // Returns the computed reduce value.\n    function value() {\n      if (resetNeeded) reset(), resetNeeded = false;\n      return reduceValue;\n    }\n\n    // Removes this group and associated event listeners.\n    function dispose() {\n      var i = filterListeners.indexOf(update);\n      if (i >= 0) filterListeners.splice(i);\n      i = dataListeners.indexOf(add);\n      if (i >= 0) dataListeners.splice(i);\n      return group;\n    }\n\n    return reduceCount();\n  }\n\n  // Returns the number of records in this crossfilter, irrespective of any filters.\n  function size() {\n    return n;\n  }\n\n  return arguments.length\n      ? add(arguments[0])\n      : crossfilter;\n}\n\n// Returns an array of size n, big enough to store ids up to m.\nfunction crossfilter_index(n, m) {\n  return (m < 0x101\n      ? crossfilter_array8 : m < 0x10001\n      ? crossfilter_array16\n      : crossfilter_array32)(n);\n}\n\n// Constructs a new array of size n, with sequential values from 0 to n - 1.\nfunction crossfilter_range(n) {\n  var range = crossfilter_index(n, n);\n  for (var i = -1; ++i < n;) range[i] = i;\n  return range;\n}\n\nfunction crossfilter_capacity(w) {\n  return w === 8\n      ? 0x100 : w === 16\n      ? 0x10000\n      : 0x100000000;\n}\n})(typeof exports !== 'undefined' && exports || this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dc/node_modules/crossfilter2/crossfilter.js\n// module id = 293\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../css-loader/index.js??ref--1-oneOf-2-2!../postcss-loader/lib/index.js??postcss!./dc.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../css-loader/index.js??ref--1-oneOf-2-2!../postcss-loader/lib/index.js??postcss!./dc.css\", function() {\n\t\t\tvar newContent = require(\"!!../css-loader/index.js??ref--1-oneOf-2-2!../postcss-loader/lib/index.js??postcss!./dc.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dc/dc.css\n// module id = 294\n// module chunks = 0","exports = module.exports = require(\"../css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".dc-chart path.dc-symbol,.dc-legend g.dc-legend-item.fadeout{fill-opacity:.5;stroke-opacity:.5}div.dc-chart{float:left}.dc-chart rect.bar{stroke:none;cursor:pointer}.dc-chart rect.bar:hover{fill-opacity:.5}.dc-chart rect.deselected{stroke:none;fill:#ccc}.dc-chart .pie-slice{fill:#fff;font-size:12px;cursor:pointer}.dc-chart .pie-slice.external{fill:#000}.dc-chart .pie-slice.highlight,.dc-chart .pie-slice :hover{fill-opacity:.8}.dc-chart .pie-path{fill:none;stroke-width:2px;stroke:#000;opacity:.4}.dc-chart .selected circle,.dc-chart .selected path{stroke-width:3;stroke:#ccc;fill-opacity:1}.dc-chart .deselected circle,.dc-chart .deselected path{stroke:none;fill-opacity:.5;fill:#ccc}.dc-chart .axis line,.dc-chart .axis path{fill:none;stroke:#000;shape-rendering:crispEdges}.dc-chart .axis text{font:10px sans-serif}.dc-chart .axis .grid-line,.dc-chart .axis .grid-line line,.dc-chart .grid-line,.dc-chart .grid-line line{fill:none;stroke:#ccc;opacity:.5;shape-rendering:crispEdges}.dc-chart .brush rect.background{z-index:-999}.dc-chart .brush rect.extent{fill:#4682b4;fill-opacity:.125}.dc-chart .brush .resize path{fill:#eee;stroke:#666}.dc-chart path.line{fill:none;stroke-width:1.5px}.dc-chart path.area{fill-opacity:.3;stroke:none}.dc-chart path.highlight{stroke-width:3;fill-opacity:1;stroke-opacity:1}.dc-chart g.state{cursor:pointer}.dc-chart g.state :hover{fill-opacity:.8}.dc-chart g.state path{stroke:#fff}.dc-chart g.deselected path{fill:gray}.dc-chart g.deselected text{display:none}.dc-chart g.row rect{fill-opacity:.8;cursor:pointer}.dc-chart g.row rect:hover{fill-opacity:.6}.dc-chart g.row text{fill:#fff;font-size:12px;cursor:pointer}.dc-chart g.dc-tooltip path{fill:none;stroke:gray;stroke-opacity:.8}.dc-chart g.county path{stroke:#fff;fill:none}.dc-chart g.debug rect{fill:#00f;fill-opacity:.2}.dc-chart g.axis text{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none}.dc-chart .node{font-size:.7em;cursor:pointer}.dc-chart .node :hover{fill-opacity:.8}.dc-chart .bubble{stroke:none;fill-opacity:.6}.dc-chart .highlight{fill-opacity:1;stroke-opacity:1}.dc-chart .fadeout{fill-opacity:.2;stroke-opacity:.2}.dc-chart .box text{font:10px sans-serif;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none}.dc-chart .box circle,.dc-chart .box line{fill:#fff}.dc-chart .box circle,.dc-chart .box line,.dc-chart .box rect{stroke:#000;stroke-width:1.5px}.dc-chart .box .center{stroke-dasharray:3,3}.dc-chart .box .outlier{fill:none;stroke:#ccc}.dc-chart .box.deselected{opacity:.5}.dc-chart .box.deselected .box{fill:#ccc}.dc-chart .symbol{stroke:none}.dc-chart .heatmap .box-group.deselected rect{stroke:none;fill-opacity:.5;fill:#ccc}.dc-chart .heatmap g.axis text{pointer-events:all;cursor:pointer}.dc-chart .empty-chart .pie-slice{cursor:default}.dc-chart .empty-chart .pie-slice path{fill:#fee;cursor:default}.dc-chart circle.dot{stroke:none}.dc-data-count{float:right;margin-top:15px;margin-right:15px}.dc-data-count .filter-count,.dc-data-count .total-count{color:#3182bd;font-weight:700}.dc-legend{font-size:11px}.dc-legend .dc-legend-item{cursor:pointer}.dc-hard .number-display{float:none}\", \"\", {\"version\":3,\"sources\":[\"D:/projects/personal-blog/node_modules/dc/dc.css\"],\"names\":[],\"mappings\":\"AAAA,6DACE,gBAAkB,AAClB,iBAAoB,CAAE,AAExB,aACE,UAAY,CAAE,AAEhB,mBACE,YAAa,AACb,cAAgB,CAAE,AAClB,yBACE,eAAiB,CAAE,AAEvB,0BACE,YAAa,AACb,SAAW,CAAE,AAEf,qBACE,UAAW,AACX,eAAgB,AAChB,cAAgB,CAAE,AAClB,8BACE,SAAW,CAAE,AACf,2DACE,eAAiB,CAAE,AAEvB,oBACE,UAAW,AACX,iBAAkB,AAClB,YAAa,AACb,UAAa,CAAE,AAEjB,oDACE,eAAgB,AAChB,YAAa,AACb,cAAgB,CAAE,AAEpB,wDACE,YAAa,AACb,gBAAiB,AACjB,SAAW,CAAE,AAEf,0CACE,UAAW,AACX,YAAa,AACb,0BAA4B,CAAE,AAEhC,qBACE,oBAAsB,CAAE,AAE1B,0GACE,UAAW,AACX,YAAa,AACb,WAAY,AACZ,0BAA4B,CAAE,AAEhC,iCACE,YAAc,CAAE,AAElB,6BACE,aAAc,AACd,iBAAmB,CAAE,AAEvB,8BACE,UAAW,AACX,WAAa,CAAE,AAEjB,oBACE,UAAW,AACX,kBAAoB,CAAE,AAExB,oBACE,gBAAiB,AACjB,WAAa,CAAE,AAEjB,yBACE,eAAgB,AAChB,eAAgB,AAChB,gBAAkB,CAAE,AAEtB,kBACE,cAAgB,CAAE,AAClB,yBACE,eAAiB,CAAE,AACrB,uBACE,WAAa,CAAE,AAEnB,4BACE,SAAc,CAAE,AAElB,4BACE,YAAc,CAAE,AAElB,qBACE,gBAAkB,AAClB,cAAgB,CAAE,AAClB,2BACE,eAAkB,CAAE,AAExB,qBACE,UAAW,AACX,eAAgB,AAChB,cAAgB,CAAE,AAEpB,4BACE,UAAW,AACX,YAAgB,AAChB,iBAAmB,CAAE,AAEvB,wBACE,YAAa,AACb,SAAW,CAAE,AAEf,uBACE,UAAW,AACX,eAAiB,CAAE,AAErB,sBACE,2BAA4B,AAC5B,yBAA0B,AAC1B,sBAAuB,AACvB,qBAAsB,AACtB,iBAAkB,AAClB,mBAAqB,CAAE,AAEzB,gBACE,eAAiB,AACjB,cAAgB,CAAE,AAClB,uBACE,eAAiB,CAAE,AAEvB,kBACE,YAAa,AACb,eAAkB,CAAE,AAEtB,qBACE,eAAgB,AAChB,gBAAkB,CAAE,AAEtB,mBACE,gBAAkB,AAClB,iBAAoB,CAAE,AAExB,oBACE,qBAAsB,AACtB,2BAA4B,AAC5B,yBAA0B,AAC1B,sBAAuB,AACvB,qBAAsB,AACtB,iBAAkB,AAClB,mBAAqB,CAAE,AAEzB,0CACE,SAAW,CAAE,AAEf,8DACE,YAAa,AACb,kBAAoB,CAAE,AAExB,uBACE,oBAAuB,CAAE,AAE3B,wBACE,UAAW,AACX,WAAa,CAAE,AAEjB,0BACE,UAAa,CAAE,AACf,+BACE,SAAW,CAAE,AAEjB,kBACE,WAAa,CAAE,AAEjB,8CACE,YAAa,AACb,gBAAkB,AAClB,SAAW,CAAE,AAEf,+BACE,mBAAoB,AACpB,cAAgB,CAAE,AAEpB,kCACE,cAAgB,CAAE,AAClB,uCACE,UAAW,AACX,cAAgB,CAAE,AAEtB,qBACE,WAAa,CAAE,AAEjB,eACE,YAAa,AACb,gBAAiB,AACjB,iBAAmB,CAAE,AACrB,yDACE,cAAe,AACf,eAAkB,CAAE,AAExB,WACE,cAAgB,CAAE,AAClB,2BACE,cAAgB,CAAE,AAEtB,yBACE,UAAY,CAAE\",\"file\":\"dc.css\",\"sourcesContent\":[\".dc-chart path.dc-symbol, .dc-legend g.dc-legend-item.fadeout {\\n  fill-opacity: 0.5;\\n  stroke-opacity: 0.5; }\\n\\ndiv.dc-chart {\\n  float: left; }\\n\\n.dc-chart rect.bar {\\n  stroke: none;\\n  cursor: pointer; }\\n  .dc-chart rect.bar:hover {\\n    fill-opacity: .5; }\\n\\n.dc-chart rect.deselected {\\n  stroke: none;\\n  fill: #ccc; }\\n\\n.dc-chart .pie-slice {\\n  fill: #fff;\\n  font-size: 12px;\\n  cursor: pointer; }\\n  .dc-chart .pie-slice.external {\\n    fill: #000; }\\n  .dc-chart .pie-slice :hover, .dc-chart .pie-slice.highlight {\\n    fill-opacity: .8; }\\n\\n.dc-chart .pie-path {\\n  fill: none;\\n  stroke-width: 2px;\\n  stroke: #000;\\n  opacity: 0.4; }\\n\\n.dc-chart .selected path, .dc-chart .selected circle {\\n  stroke-width: 3;\\n  stroke: #ccc;\\n  fill-opacity: 1; }\\n\\n.dc-chart .deselected path, .dc-chart .deselected circle {\\n  stroke: none;\\n  fill-opacity: .5;\\n  fill: #ccc; }\\n\\n.dc-chart .axis path, .dc-chart .axis line {\\n  fill: none;\\n  stroke: #000;\\n  shape-rendering: crispEdges; }\\n\\n.dc-chart .axis text {\\n  font: 10px sans-serif; }\\n\\n.dc-chart .grid-line, .dc-chart .axis .grid-line, .dc-chart .grid-line line, .dc-chart .axis .grid-line line {\\n  fill: none;\\n  stroke: #ccc;\\n  opacity: .5;\\n  shape-rendering: crispEdges; }\\n\\n.dc-chart .brush rect.background {\\n  z-index: -999; }\\n\\n.dc-chart .brush rect.extent {\\n  fill: #4682b4;\\n  fill-opacity: .125; }\\n\\n.dc-chart .brush .resize path {\\n  fill: #eee;\\n  stroke: #666; }\\n\\n.dc-chart path.line {\\n  fill: none;\\n  stroke-width: 1.5px; }\\n\\n.dc-chart path.area {\\n  fill-opacity: .3;\\n  stroke: none; }\\n\\n.dc-chart path.highlight {\\n  stroke-width: 3;\\n  fill-opacity: 1;\\n  stroke-opacity: 1; }\\n\\n.dc-chart g.state {\\n  cursor: pointer; }\\n  .dc-chart g.state :hover {\\n    fill-opacity: .8; }\\n  .dc-chart g.state path {\\n    stroke: #fff; }\\n\\n.dc-chart g.deselected path {\\n  fill: #808080; }\\n\\n.dc-chart g.deselected text {\\n  display: none; }\\n\\n.dc-chart g.row rect {\\n  fill-opacity: 0.8;\\n  cursor: pointer; }\\n  .dc-chart g.row rect:hover {\\n    fill-opacity: 0.6; }\\n\\n.dc-chart g.row text {\\n  fill: #fff;\\n  font-size: 12px;\\n  cursor: pointer; }\\n\\n.dc-chart g.dc-tooltip path {\\n  fill: none;\\n  stroke: #808080;\\n  stroke-opacity: .8; }\\n\\n.dc-chart g.county path {\\n  stroke: #fff;\\n  fill: none; }\\n\\n.dc-chart g.debug rect {\\n  fill: #00f;\\n  fill-opacity: .2; }\\n\\n.dc-chart g.axis text {\\n  -webkit-touch-callout: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n  pointer-events: none; }\\n\\n.dc-chart .node {\\n  font-size: 0.7em;\\n  cursor: pointer; }\\n  .dc-chart .node :hover {\\n    fill-opacity: .8; }\\n\\n.dc-chart .bubble {\\n  stroke: none;\\n  fill-opacity: 0.6; }\\n\\n.dc-chart .highlight {\\n  fill-opacity: 1;\\n  stroke-opacity: 1; }\\n\\n.dc-chart .fadeout {\\n  fill-opacity: 0.2;\\n  stroke-opacity: 0.2; }\\n\\n.dc-chart .box text {\\n  font: 10px sans-serif;\\n  -webkit-touch-callout: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n  pointer-events: none; }\\n\\n.dc-chart .box line, .dc-chart .box circle {\\n  fill: #fff; }\\n\\n.dc-chart .box rect, .dc-chart .box line, .dc-chart .box circle {\\n  stroke: #000;\\n  stroke-width: 1.5px; }\\n\\n.dc-chart .box .center {\\n  stroke-dasharray: 3, 3; }\\n\\n.dc-chart .box .outlier {\\n  fill: none;\\n  stroke: #ccc; }\\n\\n.dc-chart .box.deselected {\\n  opacity: 0.5; }\\n  .dc-chart .box.deselected .box {\\n    fill: #ccc; }\\n\\n.dc-chart .symbol {\\n  stroke: none; }\\n\\n.dc-chart .heatmap .box-group.deselected rect {\\n  stroke: none;\\n  fill-opacity: 0.5;\\n  fill: #ccc; }\\n\\n.dc-chart .heatmap g.axis text {\\n  pointer-events: all;\\n  cursor: pointer; }\\n\\n.dc-chart .empty-chart .pie-slice {\\n  cursor: default; }\\n  .dc-chart .empty-chart .pie-slice path {\\n    fill: #fee;\\n    cursor: default; }\\n\\n.dc-chart circle.dot {\\n  stroke: none; }\\n\\n.dc-data-count {\\n  float: right;\\n  margin-top: 15px;\\n  margin-right: 15px; }\\n  .dc-data-count .filter-count, .dc-data-count .total-count {\\n    color: #3182bd;\\n    font-weight: bold; }\\n\\n.dc-legend {\\n  font-size: 11px; }\\n  .dc-legend .dc-legend-item {\\n    cursor: pointer; }\\n\\n.dc-hard .number-display {\\n  float: none; }\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader?{\"importLoaders\":1,\"minimize\":true,\"sourceMap\":true}!./node_modules/postcss-loader/lib?{\"ident\":\"postcss\",\"plugins\":[null,null]}!./node_modules/dc/dc.css\n// module id = 295\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js??ref--1-oneOf-2-2!../../node_modules/postcss-loader/lib/index.js??postcss!./chart.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js??ref--1-oneOf-2-2!../../node_modules/postcss-loader/lib/index.js??postcss!./chart.css\", function() {\n\t\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js??ref--1-oneOf-2-2!../../node_modules/postcss-loader/lib/index.js??postcss!./chart.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/chart.css\n// module id = 296\n// module chunks = 0","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \"div.dc-chart{float:none;background-color:#b5bdc5}.dc-chart .pie-slice,.dc-chart g.row text{fill:#000}button.reset.btn.btn-sm{font-size:.5em;padding:0 .5em;border-radius:1em;cursor:pointer}.dc-chart legend{position:relative;padding:0 1rem;border-bottom:1px solid #4e5d6c;color:#2b3e50}.dc-chart legend .reset{position:absolute;right:1rem;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%)}\", \"\", {\"version\":3,\"sources\":[\"D:/projects/personal-blog/src/components/chart.css\"],\"names\":[],\"mappings\":\"AAAA,aACE,WAAY,AACZ,wBAA0B,CAC3B,AAED,0CAEE,SAAY,CACb,AAED,wBACE,eAAiB,AACjB,eAAiB,AACjB,kBAAmB,AACnB,cAAgB,CACjB,AAED,iBACE,kBAAmB,AACnB,eAAgB,AAChB,gCAAiC,AACjC,aAAe,CAChB,AAED,wBACE,kBAAmB,AACnB,WAAY,AACZ,QAAS,AACT,mCAAoC,AAChC,+BAAgC,AAC5B,0BAA4B,CACrC\",\"file\":\"chart.css\",\"sourcesContent\":[\"div.dc-chart {\\r\\n  float: none;\\r\\n  background-color: #b5bdc5;\\r\\n}\\r\\n\\r\\n.dc-chart g.row text,\\r\\n.dc-chart .pie-slice {\\r\\n  fill: black;\\r\\n}\\r\\n\\r\\nbutton.reset.btn.btn-sm {\\r\\n  font-size: 0.5em;\\r\\n  padding: 0 0.5em;\\r\\n  border-radius: 1em;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.dc-chart legend {\\r\\n  position: relative;\\r\\n  padding: 0 1rem;\\r\\n  border-bottom: 1px solid #4e5d6c;\\r\\n  color: #2b3e50;\\r\\n}\\r\\n\\r\\n.dc-chart legend .reset {\\r\\n  position: absolute;\\r\\n  right: 1rem;\\r\\n  top: 50%;\\r\\n  -webkit-transform: translateY(-50%);\\r\\n      -ms-transform: translateY(-50%);\\r\\n          transform: translateY(-50%);\\r\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader?{\"importLoaders\":1,\"minimize\":true,\"sourceMap\":true}!./node_modules/postcss-loader/lib?{\"ident\":\"postcss\",\"plugins\":[null,null]}!./src/components/chart.css\n// module id = 297\n// module chunks = 0"],"sourceRoot":""}