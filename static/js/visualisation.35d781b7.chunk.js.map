{"version":3,"sources":["../static/js/visualisation.35d781b7.chunk.js","components/Visualisation.jsx","../node_modules/crossfilter2/src/identity.js","../node_modules/crossfilter2/src/heap.js","../node_modules/crossfilter2/src/insertionsort.js","../node_modules/crossfilter2/index.js","../node_modules/crossfilter2/src/crossfilter.js","../node_modules/crossfilter2/src/array.js","../node_modules/crossfilter2/src/filter.js","../node_modules/crossfilter2/src/null.js","../node_modules/crossfilter2/src/zero.js","../node_modules/crossfilter2/src/heapselect.js","../node_modules/crossfilter2/src/bisect.js","../node_modules/crossfilter2/src/permute.js","../node_modules/crossfilter2/src/quicksort.js","../node_modules/crossfilter2/src/reduce.js","../node_modules/crossfilter2/package.json","../node_modules/lodash.result/index.js","webpack:///./node_modules/dc/dc.js?5131","../node_modules/dc/dc.js","../node_modules/d3/d3.js","../node_modules/dc/node_modules/crossfilter2/index.js","../node_modules/dc/node_modules/crossfilter2/crossfilter.js","webpack:///./node_modules/dc/dc.css?6aae","../node_modules/dc/dc.css","webpack:///./src/components/chart.css?4c7c","components/chart.css"],"names":["webpackJsonp","266","module","__webpack_exports__","__webpack_require__","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","__WEBPACK_IMPORTED_MODULE_0_react__","__WEBPACK_IMPORTED_MODULE_0_react___default","n","__WEBPACK_IMPORTED_MODULE_1_prop_types__","__WEBPACK_IMPORTED_MODULE_1_prop_types___default","__WEBPACK_IMPORTED_MODULE_2_crossfilter2__","__WEBPACK_IMPORTED_MODULE_2_crossfilter2___default","__WEBPACK_IMPORTED_MODULE_3_expose_loader_dc_dc__","__WEBPACK_IMPORTED_MODULE_3_expose_loader_dc_dc___default","__WEBPACK_IMPORTED_MODULE_4_react_loading_animation__","__WEBPACK_IMPORTED_MODULE_4_react_loading_animation___default","__WEBPACK_IMPORTED_MODULE_5_dc_dc_css__","__WEBPACK_IMPORTED_MODULE_6__chart_css__","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","Vis","data","Charts","_class","_temp","_PureComponent","Visualisation","this","_this","getPrototypeOf","state","loading","ndx","resize","bind","console","time","timeEnd","setState","window","addEventListener","removeEventListener","a","disableTransitions","renderAll","createElement","width","height","childContextTypes","object","isRequired","269","exports","crossfilter_identity","d","270","heap_by","f","heap","lo","hi","sift","sort","t","child","x","by","271","insertionsort_by","insertionsort","j","272","crossfilter","273","add","newData","n0","n1","concat","filters","lengthen","dataListeners","forEach","l","triggerOnChange","removeData","newIndex","crossfilter_index","removed","index1","index2","zero","push","filterListeners","removeDataListeners","index3","index4","copy","truncate","isElementFiltered","ignore_dimensions","id","len","mask","Array","subarrays","zeroExceptMask","dimension","iterable","preAdd","k","i0","newValues","newIterablesIndexCount","crossfilter_range","newIterablesIndexFilterStatus","unsortedIndex","iterablesEmptyRows","sortMap","permute","map","bounds","refilter","lo1","hi1","refilterFunction","offset","one","values","index","iterablesIndexCount","iterablesIndexFilterStatus","lo0","hi0","old_n0","oldValues","oldIndex","oldIterablesIndexFilterStatus","i1","oldiiclength","xfilterArray","arrayLengthen","index5","postAdd","indexListeners","reIndex","filterIndexBounds","filterIndexFunction","added","valueIndexAdded","valueIndexRemoved","Math","min","max","newAdded","newRemoved","filter","range","filterAll","isArray","filterRange","filterFunction","filterExact","xfilterFilter","bisect","indexLength","top","top_offset","array","toSkip","bottom","bottom_offset","group","groupIncrement","groupCapacity","arrayWiden","groupWidth","groupIndex","crossfilter_capacity","n0old","g0","x0","x1","g","oldGroups","groups","reduceAdd","remove","reduceRemove","initial","reduceInitial","k0","resetNeeded","crossfilter_null","zeroExcept","indexOf","update","updateMany","reset","resetMany","groupAll","updateOne","resetOne","oldK","seenGroups","filterOne","filterOffset","notFilter","onlyExcept","all","select","reduce","reduceCount","xfilterReduce","reduceIncrement","reduceDecrement","crossfilter_zero","reduceSum","reduceSubtract","order","valueOf","xfilterHeapselect","xfilterHeap","orderNatural","size","dispose","splice","dimensionGroups","arguments","masks","accessorPath","result","accessor","quicksort","unshift","tmp","log","reduceValue","only","allFiltered","onChange","cb","warn","callbacks","eventName","bitarray","m","array8","array16","array32","w","packageJson","heapselect","version","274","crossfilter_arrayUntyped","crossfilter_arrayLengthenUntyped","crossfilter_arrayWidenUntyped","Error","crossfilter_bitarray","0","crossfilter_array8","Uint8Array","crossfilter_array16","Uint16Array","crossfilter_array32","Uint32Array","crossfilter_arrayLengthen","set","crossfilter_arrayWiden","dest","src","onlyOffset","onlyOne","275","crossfilter_filterExact","left","right","crossfilter_filterRange","crossfilter_filterAll","276","277","278","heapselect_by","queue","xFilterHeap","279","bisect_by","bisectLeft","mid","bisectRight","280","deep","JSON","parse","stringify","281","quicksort_by","quicksort_sizeThreshold","sixth","i5","i3","i2","i4","e1","e2","x2","e3","x3","e4","x4","e5","x5","pivot1","pivotValue1","pivot2","pivotValue2","less","great","pivotsEqual","ek","xk","greatValue","lessValue","xFilterInsertionsort","282","crossfilter_reduceIncrement","p","crossfilter_reduceDecrement","crossfilter_reduceAdd","v","crossfilter_reduceSubtract","283","_args","_from","_id","_inBundle","_integrity","_location","_phantomChildren","_requested","type","registry","raw","name","escapedName","rawSpec","saveSpec","fetchSpec","_requiredBy","_resolved","_spec","_where","author","url","bugs","contributors","dependencies","lodash.result","description","devDependencies","browserify","d3","eslint","package-json-versionify","semver","uglify-js","vows","eslintConfig","env","browser","node","globals","extends","files","homepage","keywords","license","main","maintainers","repository","scripts","benchmark","build","clean","test","284","global","getValue","undefined","isHostObject","toString","e","Hash","entries","clear","entry","hashClear","__data__","nativeCreate","hashDelete","has","hashGet","HASH_UNDEFINED","hasOwnProperty","hashHas","hashSet","ListCache","listCacheClear","listCacheDelete","assocIndexOf","pop","listCacheGet","listCacheHas","listCacheSet","MapCache","mapCacheClear","hash","Map","string","mapCacheDelete","getMapData","mapCacheGet","get","mapCacheHas","mapCacheSet","eq","baseIsNative","isObject","isMasked","isFunction","reIsNative","reIsHostCtor","toSource","baseToString","isSymbol","symbolToString","INFINITY","castPath","stringToPath","isKeyable","getNative","isKey","reIsPlainProp","reIsDeepProp","func","maskSrcKey","toKey","funcToString","memoize","resolver","FUNC_ERROR_TEXT","memoized","args","apply","cache","Cache","other","tag","objectToString","funcTag","genTag","isObjectLike","symbolTag","path","defaultValue","reLeadingDot","rePropName","reRegExpChar","reEscapeChar","freeGlobal","freeSelf","root","Function","arrayProto","funcProto","objectProto","coreJsData","uid","exec","keys","IE_PROTO","RegExp","replace","Symbol","symbolProto","match","number","quote","285","286","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","_dc","dc","constants","CHART_CLASS","DEBUG_GROUP_CLASS","STACK_CLASS","DESELECTED_CLASS","SELECTED_CLASS","NODE_INDEX_NAME","GROUP_INDEX_NAME","DEFAULT_CHART_GROUP","EVENT_DELAY","NEGLIGIBLE_NUMBER","_renderlet","chartRegistry","initializeChartGroup","_chartMap","chart","register","deregister","anchorName","list","registerChart","deregisterChart","hasChart","deregisterAllCharts","charts","refocusAll","focus","render","redrawAll","redraw","transition","selection","duration","delay","s","optionalTransition","enable","afterTransition","callback","empty","each","units","integers","start","end","abs","ordinal","domain","fp","precision","_f","resolution","utils","isNegligible","floor","ceil","round","override","obj","functionName","newFunction","existingFunction","renderlet","_","instanceOfChart","o","__dcFlag__","errors","Exception","msg","_msg","message","stack","InvalidStateException","BadArgumentException","dateFormat","format","printers","printSingleValue","pluck","Date","isFloat","fformat","isInteger","r","getTime","percentage","subtract","isNumber","clamp","val","_idCounter","uniqueId","nameToId","toLowerCase","appendOrSelect","parent","selector","element","append","safeNumber","logger","enableDebugLog","debug","deprecate","fn","deprecated","warned","events","current","trigger","closure","setTimeout","RangedFilter","low","high","isFiltered","filterType","TwoDimensionalFilter","RangedTwoDimensionalFilter","fromBottomLeft","Infinity","y","baseMixin","_chart","sizeSvg","_svg","_useViewBoxResizing","attr","generateSvg","checkForMandatoryAttributes","applyFilters","fs","_filterHandler","_dimension","_group","_anchor","_root","_isChild","_width","_height","_orderSort","_legend","_commitHandler","_minWidth","_defaultWidthCalc","getBoundingClientRect","_widthCalc","_minHeight","_defaultHeightCalc","_heightCalc","_keyAccessor","_valueAccessor","_label","_ordering","_renderLabel","_title","keyAccessor","valueAccessor","_renderTitle","_controlsUseVisibility","_transitionDuration","_transitionDelay","_filterPrinter","_mandatoryAttributes","_chartGroup","_listeners","dispatch","_filters","_data","functor","minWidth","minHeight","useViewBoxResizing","expireCache","_groupName","ordering","orderFunction","_computeOrderedGroups","dataCopy","slice","selectAll","anchor","chartGroup","classed","chartID","rootElement","svg","svgElement","resetSvg","filterPrinter","filterPrinterFunction","controlsUseVisibility","useVisibility","turnOnControls","attribute","style","text","turnOffControls","transitionDuration","transitionDelay","preRender","_doRender","_activateRenderlets","event","pretransition","preRedraw","_doRedraw","commitHandler","redrawGroup","error","renderGroup","_invokeFilteredListener","filtered","_invokeZoomedListener","zoomed","_hasFilterHandler","some","hasFilterHandler","hasFilter","_removeFilterHandler","removeFilterHandler","_addFilterHandler","addFilterHandler","_resetFilterHandler","resetFilterHandler","replaceFilter","highlightSelected","fadeDeselected","resetHighlight","onClick","datum","filterHandler","legendables","legendHighlight","legendReset","legendToggle","isLegendableHidden","label","labelFunction","enableLabels","renderLabel","title","titleFunction","renderTitle","renderletFunction","on","legend","options","opts","applyOptions","listener","marginMixin","_margin","margins","effectiveWidth","effectiveHeight","colorMixin","_colors","scale","category20c","_defaultAccessor","_colorAccessor","colors","colorScale","quantize","ordinalColors","linearColors","linear","interpolate","interpolateHcl","colorAccessor","defaultColorAccessor","colorDomain","calculateColorDomain","newDomain","getColor","colorCalculator","coordinateGridMixin","compareDomains","d1","d2","elem","prepareXAxis","isOrdinal","elasticX","_x","_ordinalXDomain","xAxisMin","xAxisMax","xdom","_lastXDomain","rescale","rangeBands","xAxisLength","_rangeBandPadding","_useOuterPadding","_outerRangeBandPadding","_xAxis","renderVerticalGridLines","gridLineG","VERTICAL_CLASS","_renderVerticalGridLine","insert","GRID_LINE_CLASS","ticks","tickValues","lines","linesGEnter","enter","_xAxisY","exit","brushHeight","getClipPathId","generateClipPath","defs","_parent","chartBodyClip","padding","_clipPadding","yAxisHeight","drawChart","_brushOn","_prepareYAxis","plotData","_resizing","renderXAxis","elasticY","renderYAxis","renderBrush","redrawBrush","fadeDeselectedArea","configureMouseZoom","_mouseZoomable","_enableMouseZoom","_hasBeenMouseZoomable","_disableMouseZoom","zoomHandler","_refocused","_zoomOutRestrict","constraint","_xOriginalDomain","_rangeChart","intersectExtents","constrained","constrainExtent","domFilter","rangesEqual","ext1","ext2","extent","range1","range2","hasRangeSelected","category10","_g","_chartBodyG","_xAxisLabel","_y","_yAxisLabel","_round","_unitCount","_focusChart","axis","orient","_xUnits","_xAxisPadding","_xAxisPaddingUnit","_xElasticity","_xAxisLabelPadding","_yAxis","_yAxisPadding","_yElasticity","_yAxisLabelPadding","_brush","brush","_renderHorizontalGridLine","_zoomScale","_zoom","behavior","zoom","_nullZoom","_useRightYAxis","resizing","rangeChart","focusChart","zoomScale","zoomOutRestrict","_generateG","href","location","split","gElement","mouseZoomable","chartBodyG","xScale","xOriginalDomain","xUnits","xAxis","xAxisPadding","xAxisPaddingUnit","unit","xUnitCount","useRightYAxis","axisXG","axisXLab","xAxisLabel","labelText","yAxisMin","yAxisMax","rangeRound","_renderHorizontalGridLinesForAxis","renderYAxisLabel","axisClass","rotation","labelXPosition","axisYLab","labelYPosition","Y_AXIS_LABEL_CLASS","renderYAxisAt","position","axisYG","axisPosition","_yAxisX","labelPosition","yAxisLabel","yScale","yAxis","renderHorizontalGridLines","yAxisPadding","_filter","_brushing","gBrush","setBrushY","setHandlePaths","resizeHandlePath","extendBrush","brushIsEmpty","rangedFilter","doTransition","clipPadding","_preprocessData","scaleExtent","refocused","c","brushOn","stackMixin","prepareValues","layer","layerIdx","valAccessor","String","hidden","domainFilter","_evadeDomainFilter","xDomain","findLayerByName","_stack","flattenStack","valueses","visability","_stackLayout","layout","_titles","_hidableStacks","hidableStacks","hideStack","stackName","showStack","getValueAccessorByIndex","y0","titleAccessor","stackLayout","evadeDomainFilter","layers","flat","color","capMixin","_cap","_takeFront","_othersLabel","kv","_othersGrouper","topItems","restItems","restItemsSum","sum","restKeys","others","othersLabel","cappedKeyAccessor","cappedValueAccessor","rest","items","cap","count","takeFront","othersGrouper","grouperFunction","_onClick","bubbleMixin","_maxBubbleRelativeSize","_minRadiusWithLabel","_sortBubbleSize","_elasticRadius","BUBBLE_NODE_CLASS","BUBBLE_CLASS","MIN_RADIUS","radiusAccessor","radiusValueAccessor","b","descending","_r","_rValueAccessor","bubbleRadiusScale","elasticRadius","calculateRadiusDomain","rMin","rMax","bubbleR","isNaN","shouldLabel","labelOpacity","labelPointerEvent","_doRenderLabel","bubbleGEnter","doUpdateLabels","labels","_doRenderTitles","doUpdateTitles","sortBubbleSize","minRadius","radius","minRadiusWithLabel","maxBubbleRelativeSize","relativeSize","isSelectedNode","pieChart","maxRadius","_radius","_givenRadius","pieData","arc","buildArcs","pie","pieLayout","_emptyCssClass","_emptyTitle","slices","_sliceGroupCssClass","_sliceCssClass","_labelGroupCssClass","_labelCssClass","createElements","updateElements","removeElements","highlightFilter","cx","cy","slicesEnter","createSliceNodes","createSlicePath","createTitles","createLabels","slicePath","fill","safeArc","attrTween","tweenPie","positionLabels","_applyLabelText","highlightSlice","whether","classes","_externalLabelRadius","_drawPaths","updateLabelPaths","polyline","arc2","outerRadius","_externalRadiusPadding","innerRadius","_current","startAngle","endAngle","centroid","updateSlicePaths","updateLabels","updateTitles","slicePaths","isSelectedSlice","_innerRadius","sliceTooSmall","angle","_minAngleForLabel","sliceHasNoData","isOffCanvas","highlightSliceFromLegendable","legendable","highlighted","_cx","_cy","slicesCap","externalRadiusPadding","minAngleForLabel","emptyTitle","externalLabels","externalLabelRadius","drawPaths","barChart","barHeight","renderLabels","layerIndex","_centerBar","_barWidth","LABEL_PADDING","renderBars","bars","_gap","calculateBarWidth","numberOfBars","rangeBand","barPadding","MIN_BAR_WIDTH","colorFilter","inv","item","_alwaysUseRounding","_rescale","_render","last","centerBar","outerPadding","gap","alwaysUseRounding","_xAxisMax","lineChart","drawLine","layersEnter","line","_interpolate","tension","_tension","_defined","defined","_dashStyle","safeD","drawArea","_renderArea","area","drawDots","chartBody","xyTipsOn","tooltipListClass","TOOLTIP_G_CLASS","tooltips","points","createRefLines","dots","DOT_CIRCLE_CLASS","getDotRadius","_dataPointFillOpacity","_dataPointStrokeOpacity","dot","showDot","showRefLines","hideDot","hideRefLines","drawLabels","Y_AXIS_REF_LINE_CLASS","X_AXIS_REF_LINE_CLASS","_dotRadius","yAxisX","yAxisRefPathD","xAxisRefPathD","_dataPointRadius","dashstyle","join","_xyTipsOn","layersList","dashStyle","renderArea","dotRadius","renderDataPoints","fillOpacity","strokeOpacity","_legendables","dataCount","_formatNumber","_html","html","formatNumber","formatter","tot","selected","dataTable","renderGroups","bAllFunctions","_columns","thead","headrow","headcols","HEAD_CSS_CLASS","_doColumnHeaderFormat","nestEntries","rowGroup","_showGroups","GROUP_CSS_CLASS","LABEL_CSS_CLASS","_order","ascending","_size","nest","sortKeys","_sortBy","_beginSlice","_endSlice","renderRows","rows","ROW_CSS_CLASS","rowEnter","COLUMN_CSS_CLASS","_doColumnValueFormat","_doColumnHeaderFnToString","_doColumnHeaderCapitalize","charAt","toUpperCase","lastIndexOf","substring","beginSlice","endSlice","columns","sortBy","showGroups","dataGrid","GRID_CSS_CLASS","itemGroup","_htmlGroup","renderItems","ITEM_CSS_CLASS","htmlGroup","sortByFunction","bubbleChart","renderNodes","bubbleG","bubbleLocator","updateNodes","removeNodes","bubbleX","bubbleY","compositeChart","calculateYAxisRanges","lyAxisMin","lyAxisMax","ryAxisMin","ryAxisMax","ranges","rightYAxisMin","rightYAxisMax","alignYAxes","alignYAxisRanges","extentRatio","prepareRightYAxis","needDomain","rightY","needRange","rightYAxis","prepareLeftYAxis","generateChildG","SUB_CHART_CLASS","leftYAxisChildren","_children","rightYAxisChildren","getYAxisMin","getYAxisMax","getAllXAxisMinFromChildCharts","getAllXAxisMaxFromChildCharts","_rightY","_childOptions","_shareColors","_shareTitle","_alignYAxes","_rightYAxis","_rightYAxisLabel","_rightYAxisLabelPadding","_rightAxisGridLines","__generateG","rightYAxisLabel","useRightAxisGridLines","childOptions","compose","subChartArray","children","shareColors","shareTitle","seriesChart","keySort","clearChart","_charts","resetChildren","_seriesAccessor","_chartFunction","_seriesSort","_valueSort","childrenChanged","keep","nester","sortValues","nesting","sub","subChart","_compose","chartFunction","seriesAccessor","seriesSort","sortFunction","valueSort","geoChoroplethChart","generateLayeredData","isDataLayer","regionG","renderRegionG","renderPaths","geoJson","layerSelector","isSelected","isDeselected","layerNameClass","regionClass","baseClasses","getKey","_geoJsons","paths","currentFill","_projectionFlag","_geoPath","geo","states","selectedRegion","overlayGeoJson","json","projection","geoJsons","geoPath","removeGeoJson","bubbleOverlay","initOverlayG","BUBBLE_OVERLAY_CLASS","initializeBubbles","mapData","_points","point","nodeG","getNodeG","circle","bubbleNodeClass","updateBubbles","flag","debugG","debugText","mouse","rowChart","calculateAxisScale","_elasticX","_rowData","drawAxis","axisG","drawGridLines","_rowCssClass","rootValue","_fixedBarHeight","_hasLabelOffsetY","_labelOffsetY","rect","isSelectedRow","translateX","renderTitleLabel","_titleRowCssClass","lab","_labelOffsetX","_dyOffset","titlelab","_titleLabelOffsetX","_renderTitleLabel","rowsCap","fixedBarHeight","labelOffsetX","labelOffsetY","labelOffsety","titleLabelOffsetX","legendItemHeight","_itemHeight","_maxItems","_horizontal","_legendWidth","_itemWidth","_autoItemWidth","_legendText","itemEnter","clientHeight","_cumulativeLegendTextWidth","row","itemWidth","getBBox","translateBy","itemHeight","horizontal","legendWidth","autoItemWidth","legendText","maxItems","scatterPlot","elementSize","_existenceAccessor","_filtered","pow","_symbolSize","_excludedSize","_emptySize","renderTitles","symbol","resizeSymbolsWhere","condition","symbols","oldSize","_symbol","originalKeyAccessor","existenceAccessor","_locator","_highlightedSize","_excludedColor","_excludedOpacity","_emptyOpacity","_nonemptyOpacity","_emptyColor","__filter","excludedOpacity","excludedColor","customSymbol","symbolSize","highlightedSize","excludedSize","hiddenSize","emptySize","emptyColor","emptyOpacity","nonemptyOpacity","ranged2DFilter","numberDisplay","maxBin","sorted","_lastValue","none","valObj","newValue","span","ease","tween","interpStart","isFinite","interp","interpolateNumber","num","innerHTML","heatMap","filterAxis","cellsOnAxis","unfilteredCellsOnAxis","_chartBody","_cols","_rows","_colOrdering","_rowOrdering","_colScale","_rowScale","_xBorderRadius","_yBorderRadius","_colsLabel","_rowsLabel","colsLabel","rowsLabel","_xAxisOnClick","_yAxisOnClick","_boxOnClick","rowOrdering","cols","colOrdering","rowCount","colCount","boxWidth","boxHeight","rangeRoundBands","boxes","gEnter","boxOnClick","gCols","gColsText","xAxisOnClick","gRows","gRowsText","yAxisOnClick","handler","xBorderRadius","yBorderRadius","boxWhiskers","boxQuartiles","quantile","box","quartileData","quartiles","whiskerIndices","whiskers","whiskerData","outlierIndices","__chart__","center","medianLine","whisker","outlier","Number","tickFormat","boxTick","whiskerTick","timer","flush","boxPlot","DEFAULT_WHISKERS_IQR","q1","q3","iqr","renderBoxes","boxesG","boxTransform","_box","updateBoxes","removeBoxes","_whiskersIqr","_whiskers","_tickFormat","_boxWidth","innerChartWidth","boxPadding","_calculatedBoxWidth","selectMenu","renderOptions","_select","OPTION_CSS_CLASS","selectedOptions","option","_promptValue","_multiple","setAttributes","_numberVisible","_promptText","_filterDisplayed","property","promptText","filterDisplayed","multiple","promptValue","numberVisible","abstractBubbleChart","baseChart","capped","colorChart","coordinateGridChart","marginable","stackableChart","287","d3_documentElement","ownerDocument","document","documentElement","d3_window","defaultView","d3_ascending","NaN","d3_number","d3_numeric","d3_bisector","compare","d3_transposeLength","d3_range_integerScale","d3_class","ctor","properties","d3_Map","d3_map_escape","d3_map_proto","d3_map_zero","d3_map_unescape","d3_map_has","d3_map_remove","d3_map_keys","d3_map_size","d3_map_empty","d3_Set","d3_identity","d3_rebind","source","method","d3_vendorSymbol","d3_vendorPrefixes","prefixName","d3_noop","d3_dispatch","d3_dispatch_event","z","listeners","listenerByName","d3_eventPreventDefault","preventDefault","d3_eventSource","sourceEvent","d3_eventDispatch","of","thiz","argumentz","e0","d3_selection","d3_subclass","d3_selectionPrototype","d3_selection_selector","d3_select","d3_selection_selectorAll","d3_selectAll","d3_selection_attr","attrNull","removeAttribute","attrNullNS","removeAttributeNS","space","local","attrConstant","setAttribute","attrConstantNS","setAttributeNS","attrFunction","attrFunctionNS","ns","qualify","d3_collapse","trim","d3_selection_classedRe","requote","d3_selection_classes","d3_selection_classed","classedConstant","classedFunction","d3_selection_classedName","re","classList","getAttribute","lastIndex","d3_selection_style","priority","styleNull","removeProperty","styleConstant","setProperty","styleFunction","d3_selection_property","propertyNull","propertyConstant","propertyFunction","d3_selection_creator","namespace","namespaceURI","d3_nsXhtml","createElementNS","createNS","d3_selectionRemove","parentNode","removeChild","d3_selection_dataNode","d3_selection_filter","d3_selectMatches","d3_selection_sortComparator","comparator","d3_selection_each","d3_selection_enter","d3_selection_enterPrototype","d3_selection_enterInsertBefore","j0","d3_selection_on","capture","onRemove","$","onAdd","wrap","d3_array","removeAll","d3_selection_onListener","d3_selection_onFilters","d3_selection_onFilter","related","relatedTarget","compareDocumentPosition","d3_event_dragSuppress","d3_event_dragId","click","d3_event_dragSelect","suppressClick","off","d3_mousePoint","container","changedTouches","ownerSVGElement","createSVGPoint","d3_mouse_bug44083","scrollX","scrollY","margin","border","ctm","getScreenCTM","pageX","pageY","clientX","clientY","matrixTransform","inverse","clientLeft","clientTop","d3_behavior_dragTouchId","identifier","d3_sgn","d3_cross2d","d3_acos","π","acos","d3_asin","halfπ","asin","d3_sinh","exp","d3_cosh","d3_tanh","d3_haversin","sin","d3_color","d3_hsl","h","d3_rgb_parse","d3_rgb_hsl","d3_hsl_rgb","m1","m2","vv","d3_rgb","d3_hcl","d3_lab","d3_lab_hcl","d3_rgb_lab","rgb","d3_hcl_lab","cos","d3_radians","d3_lab_rgb","d3_lab_xyz","d3_lab_X","d3_lab_Y","d3_lab_Z","d3_xyz_rgb","atan2","d3_degrees","sqrt","d3_xyz_lab","d3_rgbNumber","d3_rgbString","d3_rgb_hex","hsl","parseFloat","d3_rgb_parseNumber","d3_rgb_names","parseInt","d3_rgb_xyz","d3_functor","d3_xhrType","response","mimeType","d3_xhr","respond","status","request","d3_xhrHasResponse","xhr","load","headers","XMLHttpRequest","responseType","XDomainRequest","onload","onerror","onreadystatechange","readyState","onprogress","progress","header","send","open","setRequestHeader","overrideMimeType","beforesend","abort","rebind","d3_xhr_fixCallback","responseText","d3_timer","then","now","d3_timer_queueTail","d3_timer_queueHead","d3_timer_interval","d3_timer_timeout","clearTimeout","d3_timer_frame","d3_timer_step","d3_timer_mark","d3_timer_sweep","t0","t1","d3_format_precision","LN10","d3_formatPrefix","d3_locale_numberFormat","locale","locale_decimal","decimal","locale_thousands","thousands","locale_grouping","grouping","locale_currency","currency","formatGroup","reverse","specifier","d3_format_re","align","sign","zfill","comma","prefix","suffix","integer","exponent","d3_format_types","d3_format_typeDefault","zcomma","fullSuffix","negative","formatPrefix","before","after","d3_date_utc","UTC","d3_time_interval","step","date","d0","d3_date","dt","times","range_utc","utc","d3_time_interval_utc","d3_locale_timeFormat","d3_time_format","template","charCodeAt","d3_time_formatPads","d3_time_formats","H","M","S","L","Z","d3_time_parse","localZ","setFullYear","W","getDay","U","setHours","d3_time_parsers","d3_time_parseWeekdayAbbrev","d3_time_dayAbbrevRe","d3_time_dayAbbrevLookup","d3_time_parseWeekday","d3_time_dayRe","d3_time_dayLookup","d3_time_parseMonthAbbrev","d3_time_monthAbbrevRe","d3_time_monthAbbrevLookup","d3_time_parseMonth","d3_time_monthRe","d3_time_monthLookup","d3_time_parseLocaleFull","d3_time_parseLocaleDate","d3_time_parseLocaleTime","X","d3_time_parseAmPm","d3_time_periodLookup","locale_dateTime","dateTime","locale_date","locale_time","locale_periods","periods","locale_days","days","locale_shortDays","shortDays","locale_months","months","locale_shortMonths","shortMonths","multi","d3_time_formatMulti","d3_time_formatRe","d3_time_formatLookup","A","getMonth","B","d3_time_formatPad","getDate","getHours","I","d3_time","dayOfYear","getMilliseconds","getMinutes","getSeconds","sundayOfYear","mondayOfYear","getFullYear","Y","d3_time_zone","%","d3_time_parseDay","d3_time_parseHour24","d3_time_parseDayOfYear","d3_time_parseMilliseconds","d3_time_parseMonthNumber","d3_time_parseMinutes","d3_time_parseSeconds","d3_time_parseWeekNumberSunday","d3_time_parseWeekdayNumber","d3_time_parseWeekNumberMonday","d3_time_parseYear","d3_time_parseFullYear","d3_time_parseZone","d3_time_parseLiteralPercent","names","d3_time_numberRe","d3_time_expandYear","getTimezoneOffset","zs","zh","zm","d3_time_percentRe","formats","d3_adder","d3_adderSum","bv","av","d3_geo_streamGeometry","geometry","d3_geo_streamGeometryType","d3_geo_streamLine","coordinates","closed","coordinate","lineStart","lineEnd","d3_geo_streamPolygon","polygonStart","polygonEnd","d3_geo_areaRingStart","nextPoint","λ","φ","dλ","λ0","sdλ","adλ","cosφ","sinφ","sinφ0","u","cosφ0","d3_geo_areaRingSum","λ00","φ00","d3_geo_area","d3_geo_cartesian","spherical","d3_geo_cartesianDot","d3_geo_cartesianCross","d3_geo_cartesianAdd","d3_geo_cartesianScale","vector","d3_geo_cartesianNormalize","d3_geo_spherical","cartesian","d3_geo_sphericalEqual","ε","d3_geo_centroidPoint","d3_geo_centroidPointXYZ","d3_geo_centroidW0","d3_geo_centroidX0","d3_geo_centroidY0","d3_geo_centroidZ0","d3_geo_centroidLineStart","z0","d3_geo_centroidW1","d3_geo_centroidX1","d3_geo_centroidY1","d3_geo_centroidZ1","d3_geo_centroid","d3_geo_centroidLineEnd","d3_geo_centroidRingStart","cz","d3_geo_centroidX2","d3_geo_centroidY2","d3_geo_centroidZ2","d3_geo_compose","invert","d3_true","d3_geo_clipPolygon","segments","clipStartInside","subject","clip","segment","p0","p1","d3_geo_clipPolygonIntersection","d3_geo_clipPolygonLinkCircular","isSubject","d3_geo_clip","pointVisible","clipLine","clipStart","rotate","pointLine","pointRing","ring","ringListener","ringStart","ringEnd","ringSegments","buffer","polygon","polygonStarted","shift","d3_geo_clipSegmentLength1","rotatedClipStart","merge","d3_geo_pointInPolygon","d3_geo_clipSort","sphere","d3_geo_clipBufferListener","rejoin","d3_geo_clipAntimeridianLine","φ0","sλ0","λ1","φ1","sλ1","d3_geo_clipAntimeridianIntersect","cosφ1","sinλ0_λ1","atan","d3_geo_clipAntimeridianInterpolate","from","to","direction","meridian","parallel","meridianNormal","polarAngle","winding","point0","antimeridian","τ","intersection","φarc","d3_geo_clipCircle","visible","cr","c0","v0","v00","point2","point1","smallRadius","code","intersect","notHemisphere","two","pa","pb","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","uu","t2","q","δλ","polar","d3_geo_circleInterpolate","d3_geom_clipLine","y1","ax","ay","bx","dx","dy","d3_geo_clipExtent","corner","comparePoints","ca","insidePolygon","wn","a1","linePoint","first","v_","x_","y_","x__","y__","v__","bufferListener","d3_geo_clipExtentMAX","listener_","inside","d3_geo_conic","projectAt","d3_geo_projectionMutator","parallels","d3_geo_conicEqualArea","forward","ρ","C","ρ0","ρ0_y","d3_geo_pathAreaRingStart","d3_geo_pathAreaPolygon","x00","y00","d3_geo_pathArea","d3_geo_pathBoundsPoint","d3_geo_pathBoundsX0","d3_geo_pathBoundsX1","d3_geo_pathBoundsY0","d3_geo_pathBoundsY1","d3_geo_pathBuffer","pointCircle","pointLineStart","stream","lineEndPolygon","d3_geo_pathBufferCircle","pointRadius","d3_geo_pathCentroidPoint","d3_geo_pathCentroidLineStart","d3_geo_pathCentroid","d3_geo_pathCentroidLineEnd","d3_geo_pathCentroidRingStart","d3_geo_pathContext","context","moveTo","lineTo","closePath","d3_geo_resample","project","resample","maxDepth","resampleRecursive","resampleNone","d3_geo_transformPoint","resampleLineTo","a0","b0","ringPoint","a00","b00","c00","b1","depth","δ2","φ2","λ2","y2","dx2","dy2","dz","cosMinDistance","d3_geo_pathProjectStream","d3_geo_projectionRadians","d3_geo_transform","d3_geo_projection","projectRotate","δx","δy","d3_geo_rotation","δφ","δγ","invalidate","valid","projectResample","preclip","d3_geo_clipAntimeridian","postclip","clipAngle","clipExtent","output","translate","d3_geo_equirectangular","d3_geo_identityRotation","d3_geo_rotationλ","d3_geo_rotationφγ","d3_geo_forwardRotationλ","cosδφ","sinδφ","cosδγ","sinδγ","sr","d3_geo_circleAngle","PI","d3_geo_graticuleX","d3_geo_graticuleY","d3_source","d3_target","d3_geo_interpolate","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","distance","d3_geo_lengthLineStart","cosΔλ","d3_geo_lengthSum","d3_geo_length","d3_geo_azimuthal","azimuthal","cosλ","sinc","cosc","d3_geo_conicConformal","F","tan","d3_geo_mercator","d3_geo_conicEquidistant","G","d3_geo_mercatorProjection","clipAuto","d3_geo_transverseMercator","d3_geom_pointX","d3_geom_pointY","d3_geom_hullUpper","hull","hs","d3_geom_hullOrder","d3_geom_polygonInside","d3_geom_polygonIntersect","x21","x43","y3","y21","y43","ua","d3_geom_polygonClosed","d3_geom_voronoiBeach","d3_geom_voronoiRedBlackNode","edge","site","d3_geom_voronoiCreateBeach","beach","d3_geom_voronoiBeachPool","d3_geom_voronoiDetachBeach","d3_geom_voronoiDetachCircle","d3_geom_voronoiBeaches","d3_geom_voronoiRemoveBeach","vertex","previous","P","next","N","disappearing","lArc","rArc","iArc","nArcs","d3_geom_voronoiSetEdgeEnd","d3_geom_voronoiCreateEdge","d3_geom_voronoiAttachCircle","d3_geom_voronoiAddBeach","dxl","dxr","directrix","d3_geom_voronoiLeftBreakPoint","d3_geom_voronoiRightBreakPoint","R","newArc","lSite","rSite","hb","hc","rfocx","rfocy","pby2","lfocx","lfocy","plby2","hl","aby2","d3_geom_voronoiCell","edges","d3_geom_voronoiCloseCells","cell","iHalfEdge","halfEdges","nHalfEdges","cells","d3_geom_voronoiCells","iCell","prepare","d3_geom_voronoiHalfEdge","d3_geom_voronoiCreateBorderEdge","d3_geom_voronoiHalfEdgeOrder","d3_geom_voronoiCircle","cSite","ε2","ha","d3_geom_voronoiCirclePool","d3_geom_voronoiCircles","d3_geom_voronoiFirstCircle","d3_geom_voronoiClipEdges","d3_geom_voronoiEdges","d3_geom_voronoiConnectEdge","vb","fm","fb","va","lx","ly","rx","ry","fx","fy","d3_geom_voronoiEdge","d3_geom_voronoiRedBlackTree","d3_geom_voronoiRedBlackRotateLeft","tree","d3_geom_voronoiRedBlackRotateRight","d3_geom_voronoiRedBlackFirst","d3_geom_voronoi","sites","bbox","d3_geom_voronoiVertexOrder","diagram","d3_geom_voronoiTriangleArea","d3_geom_quadtreeCompatX","d3_geom_quadtreeCompatY","d3_geom_quadtreeNode","leaf","nodes","d3_geom_quadtreeVisit","sx","sy","d3_geom_quadtreeFind","closestPoint","minDistance2","find","distance2","xm","ym","below","d3_interpolateRgb","ar","ag","ab","br","bg","bb","d3_interpolateObject","d3_interpolate","d3_interpolateNumber","d3_interpolateString","am","bm","bs","bi","d3_interpolate_numberA","d3_interpolate_numberB","interpolators","d3_interpolateArray","na","nb","d3_ease_clamp","d3_ease_reverse","d3_ease_reflect","d3_ease_quad","d3_ease_cubic","d3_ease_cubicInOut","t3","d3_ease_poly","d3_ease_sin","d3_ease_exp","d3_ease_circle","d3_ease_elastic","d3_ease_back","d3_ease_bounce","d3_interpolateHcl","hcl","ah","ac","al","bh","bc","bl","d3_interpolateHsl","as","d3_interpolateLab","aa","ba","d3_interpolateRound","d3_transform","r0","r1","kx","d3_transformNormalize","kz","d3_transformDot","ky","d3_transformCombine","skew","d3_interpolateTransformPop","d3_interpolateTranslate","ta","tb","d3_interpolateRotate","ra","rb","d3_interpolateSkew","wa","wb","d3_interpolateScale","ka","kb","d3_interpolateTransform","transform","d3_uninterpolateNumber","d3_uninterpolateClamp","d3_layout_bundlePath","link","lca","d3_layout_bundleLeastCommonAncestor","d3_layout_bundleAncestors","ancestors","aNodes","bNodes","aNode","bNode","sharedNode","d3_layout_forceDragstart","fixed","d3_layout_forceDragend","d3_layout_forceMouseover","px","py","d3_layout_forceMouseout","d3_layout_forceAccumulate","quad","alpha","charges","charge","random","pointCharge","d3_layout_hierarchyRebind","hierarchy","links","d3_layout_hierarchyLinks","d3_layout_hierarchyVisitBefore","d3_layout_hierarchyVisitAfter","nodes2","d3_layout_hierarchyChildren","d3_layout_hierarchyValue","d3_layout_hierarchySort","d3_layout_stackX","d3_layout_stackY","d3_layout_stackOut","d3_layout_stackOrderDefault","d3_layout_stackOffsetZero","d3_layout_stackMaxIndex","d3_layout_stackReduceSum","d3_layout_stackSum","d3_layout_histogramBinSturges","d3_layout_histogramBinFixed","LN2","d3_layout_histogramRange","d3_layout_packSort","d3_layout_packInsert","_pack_next","_pack_prev","d3_layout_packSplice","d3_layout_packIntersects","dr","d3_layout_packSiblings","bound","xMin","xMax","yMin","yMax","d3_layout_packLink","d3_layout_packPlace","isect","s1","s2","d3_layout_packUnlink","d3_layout_packTransform","db","da","d3_layout_treeSeparation","d3_layout_treeLeft","d3_layout_treeRight","d3_layout_treeMove","wm","wp","change","d3_layout_treeShift","d3_layout_treeAncestor","vim","ancestor","d3_layout_clusterY","d3_layout_clusterX","d3_layout_clusterLeft","d3_layout_clusterRight","d3_layout_treemapPadNull","d3_layout_treemapPad","d3_scaleExtent","stop","d3_scaleRange","rangeExtent","d3_scale_bilinear","uninterpolate","d3_scale_nice","nice","d3_scale_niceStep","d3_scale_niceIdentity","d3_scale_polylinear","d3_scale_linear","input","d3_scale_linearTicks","d3_scale_linearTickFormat","d3_scale_linearNice","d3_scale_linearRebind","d3_scale_linearTickRange","err","d3_scale_linearPrecision","d3_scale_linearFormatPrecision","d3_scale_linearFormatSignificant","d3_scale_log","base","positive","niced","d3_scale_logNiceNegative","d3_scale_logFormat","d3_scale_pow","powp","d3_scale_powPow","powb","d3_scale_ordinal","ranger","steps","xi","rangePoints","rangeRoundPoints","d3_scale_quantile","thresholds","quantiles","invertExtent","d3_scale_quantize","d3_scale_threshold","d3_scale_identity","identity","d3_zero","d3_svg_arcInnerRadius","d3_svg_arcOuterRadius","d3_svg_arcStartAngle","d3_svg_arcEndAngle","d3_svg_arcPadAngle","padAngle","d3_svg_arcSweep","d3_svg_arcCornerTangents","rc","cw","x01","y01","ox","oy","D","cx0","cx1","dx0","dy0","dx1","dy1","d3_svg_line","d3_svg_lineLinear","interpolateKey","d3_svg_lineInterpolators","d3_svg_lineLinearClosed","d3_svg_lineStep","d3_svg_lineStepBefore","d3_svg_lineStepAfter","d3_svg_lineCardinalOpen","d3_svg_lineHermite","d3_svg_lineCardinalTangents","d3_svg_lineCardinalClosed","d3_svg_lineCardinal","tangents","pi","lp","p2","d3_svg_lineBasis","d3_svg_lineDot4","d3_svg_lineBasisBezier3","d3_svg_lineBasisBezier","d3_svg_lineBasisOpen","d3_svg_lineBasisClosed","d3_svg_lineBundle","d3_svg_lineBasisBezier1","d3_svg_lineBasisBezier2","d3_svg_lineSlope","d3_svg_lineFiniteDifferences","d3_svg_lineMonotoneTangents","d3_svg_lineMonotone","d3_svg_lineRadial","d3_svg_area","points1","interpolateReverse","points0","fx0","fy0","fx1","fy1","d3_svg_chordRadius","d3_svg_diagonalProjection","d3_svg_diagonalRadialProjection","d3_svg_symbolSize","d3_svg_symbolType","d3_svg_symbolCircle","d3_selection_interruptNS","lock","activeId","active","interrupt","d3_transition","d3_transitionPrototype","d3_transition_tween","d3_transition_text","textContent","d3_transitionNamespace","d3_transitionNode","inherit","schedule","elapsed","cancelId","cancel","tick","tweens","d3_svg_axisX","d3_svg_axisY","d3_time_formatIsoNative","toISOString","d3_time_scale","methods","tickMethod","d3_time_scaleSteps","year","d3_time_scaleMilliseconds","d3_time_scaleDate","interval","skip","skipped","d3_json","d3_html","d3_document","createRange","selectNode","body","createContextualFragment","d3_arraySlice","childNodes","nodeType","d3_element_prototype","Element","d3_element_setAttribute","d3_element_setAttributeNS","d3_style_prototype","CSSStyleDeclaration","d3_style_setProperty","mean","median","numbers","variance","deviation","d3_bisect","bisector","shuffle","indexes","permutes","pairs","transpose","matrix","zip","arrays","merged","mapType","rollup","keyValue","setter","valuesByKey","sortKey","keyMap","d3_requote_re","querySelector","querySelectorAll","d3_selectMatcher","matches","Sizzle","matchesSelector","subgroup","subnode","subgroups","d3_nsPrefix","xhtml","xlink","xml","xmlns","getAttributeNS","contains","getComputedStyle","getPropertyValue","appendChild","insertBefore","groupData","nodeData","enterNodes","exitNodes","nodeByKeyValue","keyValues","nextSibling","upgroup","mouseenter","mouseleave","navigator","userAgent","touch","touches","drag","mousedown","touchstart","dragstart","move","moved","position1","dragId","position0","dragged","dragOffset","ended","dragSubject","dragName","dragRestore","that","correspondingElement","origin","τε","SQRT2","interpolateZoom","ux0","uy0","w0","ux1","uy1","w1","coshr0","mousedowned","d3_behavior_zoomWheel","mousewheeled","dblclicked","touchstarted","view","scaleTo","translateTo","zoomTo","center0","zoomstarted","zooming","zoomended","location0","mousemove","mouseup","d3_selection_interrupt","relocate","scale0","locations0","started","touchmove","touchend","targets","changed","touchtime","distance0","l0","l1","distance1","scale1","zoomName","mousewheelTimer","translate0","d3_behavior_zoomDelta","shiftKey","d3_behavior_zoomInfinity","deltaY","deltaMode","wheelDelta","detail","view1","d3_transitionInheritId","d3_hslPrototype","brighter","darker","d3_hclPrototype","d3_lab_K","d3_labPrototype","d3_rgbPrototype","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","dsv","delimiter","typedResponse","formatRow","formatValue","reFormat","delimiterCode","parseRows","token","EOF","eol","EOL","formatRows","fieldSet","fields","field","csv","tsv","d3_formatPrefixes","fromCharCode","toPrecision","toExponential","toFixed","getUTCDate","getUTCDay","getUTCFullYear","getUTCHours","getUTCMilliseconds","getUTCMinutes","getUTCMonth","getUTCSeconds","setDate","d3_time_prototype","setUTCDate","setDay","setUTCDay","setUTCFullYear","setUTCHours","setMilliseconds","setUTCMilliseconds","setMinutes","setUTCMinutes","setMonth","setUTCMonth","setSeconds","setUTCSeconds","setTime","day","years","week","sunday","weeks","weekOfYear","-","numberFormat","timeFormat","d3_locale_enUS","d3_adderTemp","d3_geo_streamObjectType","Feature","feature","FeatureCollection","features","Sphere","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeometryCollection","geometries","d3_geo_areaSum","normal","equatorial","inflection","λ_","λi","φi","dλSum","λ__","φ__","compareRanges","withinRange","best","conicEqualArea","albers","albersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","alaska","hawaii","pointStream","lower48Stream","alaskaStream","hawaiiStream","d3_geo_pathAreaSum","d3_geo_pathBounds","contextStream","cacheStream","projectStream","projectionMutator","equirectangular","Δλ","sinΔλ","sinφ1","graticule","X0","DX","X1","Y0","DY","Y1","outline","majorExtent","minorExtent","majorStep","minorStep","greatArc","source_","target_","d3_geo_azimuthalEqualArea","cosλcosφ","azimuthalEqualArea","d3_geo_azimuthalEquidistant","azimuthalEquidistant","conicConformal","conicEquidistant","d3_geo_gnomonic","gnomonic","mercator","d3_geo_orthographic","orthographic","d3_geo_stereographic","stereographic","transverseMercator","geom","vertices","flippedPoints","upper","lower","skipLeft","skipRight","d3_geom_polygonPrototype","grandpa","uncle","sibling","voronoi","polygons","d3_geom_voronoiClipExtent","triangles","s0","delaunay","quadtree","nx","ny","insertChild","nPoint","xs","ys","x1_","y1_","x2_","y2_","compat","visit","interpolateRgb","interpolateObject","interpolateString","interpolateArray","d3_ease_default","d3_ease","poly","cubic","elastic","back","bounce","d3_ease_mode","in","out","in-out","out-in","interpolateHsl","interpolateLab","interpolateRound","baseVal","consolidate","d3_transformIdentity","interpolateTransform","bundle","chord","relayout","groupSums","subgroupIndex","chords","sortGroups","sortSubgroups","di","dj","subindex","sortChords","resort","force","repulse","dw","dn","theta2","chargeDistance2","dragmove","resume","distances","strengths","friction","linkDistance","d3_layout_forceLinkDistance","linkStrength","d3_layout_forceLinkStrength","d3_layout_forceChargeDistance2","gravity","weight","chargeDistance","theta","neighbors","candidates","childs","revalue","partition","arcs","d3_layout_pieSortByValue","series","orders","offsets","d3_layout_stackOrders","d3_layout_stackOffsets","inside-out","sums","tops","bottoms","default","silhouette","wiggle","s3","o0","expand","histogram","bin","bins","valuer","binner","frequency","pack","root0","root1","wrapTree","firstWalk","secondWalk","nodeSize","sizeNode","tx","separation","node1","siblings","midpoint","apportion","vip","vop","vom","sip","sop","sim","som","cluster","previousNode","treemap","squarify","score","pad","remaining","mode","worst","stickify","rmax","rmin","ratio","stickies","sticky","padFunction","padConstant","µ","σ","logNormal","bates","irwinHall","d3_category10","category20","d3_category20","category20b","d3_category20b","d3_category20c","threshold","circleSegment","rp","ap","padRadius","d3_svg_arcAuto","h1","h0","cornerRadius","rc1","rc0","oc","kc","lc","t30","t12","t03","t21","linear-closed","step-before","step-after","basis","basis-open","basis-closed","cardinal","cardinal-open","cardinal-closed","monotone","radial","equals","curve","diagonal","p3","projection_","d3_svg_symbols","cross","diamond","d3_svg_symbolTan30","square","triangle-down","d3_svg_symbolSqrt3","triangle-up","symbolTypes","d3_transitionId","d3_transitionInherit","subnodes","nameNS","attrTweenNS","styleString","styleTween","inheritId","id0","id1","tickTransform","tickArguments_","tickFormat_","tickEnter","tickExit","tickUpdate","tickSpacing","innerTickSize","tickPadding","pathUpdate","lineEnter","lineUpdate","textEnter","textUpdate","outerTickSize","d3_svg_axisDefaultOrient","d3_svg_axisOrients","tickSize","tickSubdivide","brushstart","background","resizes","d3_svg_brushCursor","gUpdate","backgroundUpdate","redrawX","redrawY","xExtent","yExtent","keydown","keyCode","dragging","keyup","brushmove","altKey","resizingX","move1","resizingY","event_","yClamp","xClamp","yExtentDomain","xExtentDomain","brushend","eventTarget","ex","ey","d3_svg_brushResizes","extent1","extent0","yi","nw","ne","se","sw","d3_time_formatUtc","d3_time_formatIso","iso","second","seconds","minute","minutes","hour","timezone","hours","month","d3_time_scaleLocalMethods","d3_time_scaleLocalFormat","d3_time_scaleUtcMethods","d3_time_scaleUtcFormat","responseXML","288","289","290","content","locals","291","sources","mappings","file","sourcesContent","sourceRoot","292","293"],"mappings":"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","file":"static/js/visualisation.35d781b7.chunk.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 266:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_crossfilter2__ = __webpack_require__(272);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_crossfilter2___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_crossfilter2__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_expose_loader_dc_dc__ = __webpack_require__(285);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_expose_loader_dc_dc___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_expose_loader_dc_dc__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_react_loading_animation__ = __webpack_require__(108);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_react_loading_animation___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_react_loading_animation__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_dc_dc_css__ = __webpack_require__(290);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_dc_dc_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_dc_dc_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__chart_css__ = __webpack_require__(292);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__chart_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__chart_css__);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/* eslint import/no-webpack-loader-syntax: off */var Vis=function Vis(data,Charts){var _class,_temp;return _temp=_class=function(_PureComponent){_inherits(Visualisation,_PureComponent);function Visualisation(){_classCallCheck(this,Visualisation);var _this=_possibleConstructorReturn(this,(Visualisation.__proto__||Object.getPrototypeOf(Visualisation)).call(this));_this.state={loading:true};_this.ndx={};_this.resize=_this.resize.bind(_this);return _this;}_createClass(Visualisation,[{key:\"componentDidMount\",value:function componentDidMount(){console.time(\"ndx\");this.ndx=__WEBPACK_IMPORTED_MODULE_2_crossfilter2___default()(data);console.timeEnd(\"ndx\");this.setState({loading:false});window.addEventListener(\"resize\",this.resize);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){window.removeEventListener(\"resize\",this.resize);}},{key:\"getChildContext\",value:function getChildContext(){return{ndx:this.ndx};}},{key:\"resize\",value:function resize(){// TODO: maybe throttle this\n__WEBPACK_IMPORTED_MODULE_3_expose_loader_dc_dc___default.a.disableTransitions=true;__WEBPACK_IMPORTED_MODULE_3_expose_loader_dc_dc___default.a.renderAll();__WEBPACK_IMPORTED_MODULE_3_expose_loader_dc_dc___default.a.disableTransitions=false;}},{key:\"render\",value:function render(){if(this.state.loading){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4_react_loading_animation___default.a,{width:\"300px\",height:\"300px\"});}else{return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(Charts,null);}}}]);return Visualisation;}(__WEBPACK_IMPORTED_MODULE_0_react__[\"PureComponent\"]),_class.childContextTypes={ndx:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object.isRequired},_temp;};/* harmony default export */ __webpack_exports__[\"default\"] = (Vis);\n\n/***/ }),\n\n/***/ 269:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction crossfilter_identity(d) {\n  return d;\n}\n\nmodule.exports = crossfilter_identity;\n\n\n/***/ }),\n\n/***/ 270:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar crossfilter_identity = __webpack_require__(269);\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\n\nmodule.exports = heap_by(crossfilter_identity);\nmodule.exports.by = heap_by;\n\n\n/***/ }),\n\n/***/ 271:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar crossfilter_identity = __webpack_require__(269);\n\nfunction insertionsort_by(f) {\n\n  function insertionsort(a, lo, hi) {\n    for (var i = lo + 1; i < hi; ++i) {\n      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n        a[j] = a[j - 1];\n      }\n      a[j] = t;\n    }\n    return a;\n  }\n\n  return insertionsort;\n}\n\nmodule.exports = insertionsort_by(crossfilter_identity);\nmodule.exports.by = insertionsort_by;\n\n\n/***/ }),\n\n/***/ 272:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(273).crossfilter;\n\n\n/***/ }),\n\n/***/ 273:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar xfilterArray = __webpack_require__(274);\nvar xfilterFilter = __webpack_require__(275);\nvar crossfilter_identity = __webpack_require__(269);\nvar crossfilter_null = __webpack_require__(276);\nvar crossfilter_zero = __webpack_require__(277);\nvar xfilterHeapselect = __webpack_require__(278);\nvar xfilterHeap = __webpack_require__(270);\nvar bisect = __webpack_require__(279);\nvar insertionsort = __webpack_require__(271);\nvar permute = __webpack_require__(280);\nvar quicksort = __webpack_require__(281);\nvar xfilterReduce = __webpack_require__(282);\nvar packageJson = __webpack_require__(283); // require own package.json for the version field\nvar result = __webpack_require__(284);\n// expose API exports\nexports.crossfilter = crossfilter;\nexports.crossfilter.heap = xfilterHeap;\nexports.crossfilter.heapselect = xfilterHeapselect;\nexports.crossfilter.bisect = bisect;\nexports.crossfilter.insertionsort = insertionsort;\nexports.crossfilter.permute = permute;\nexports.crossfilter.quicksort = quicksort;\nexports.crossfilter.version = packageJson.version; // please note use of \"package-json-versionify\" transform\n\nfunction crossfilter() {\n  var crossfilter = {\n    add: add,\n    remove: removeData,\n    dimension: dimension,\n    groupAll: groupAll,\n    size: size,\n    all: all,\n    allFiltered: allFiltered,\n    onChange: onChange,\n    isElementFiltered: isElementFiltered\n  };\n\n  var data = [], // the records\n      n = 0, // the number of records; data.length\n      filters, // 1 is filtered out\n      filterListeners = [], // when the filters change\n      dataListeners = [], // when data is added\n      removeDataListeners = [], // when data is removed\n      callbacks = [];\n\n  filters = new xfilterArray.bitarray(0);\n\n  // Adds the specified new records to this crossfilter.\n  function add(newData) {\n    var n0 = n,\n        n1 = newData.length;\n\n    // If there's actually new data to add…\n    // Merge the new data into the existing data.\n    // Lengthen the filter bitset to handle the new records.\n    // Notify listeners (dimensions and groups) that new data is available.\n    if (n1) {\n      data = data.concat(newData);\n      filters.lengthen(n += n1);\n      dataListeners.forEach(function(l) { l(newData, n0, n1); });\n      triggerOnChange('dataAdded');\n    }\n\n    return crossfilter;\n  }\n\n  // Removes all records that match the current filters.\n  function removeData() {\n    var newIndex = crossfilter_index(n, n),\n        removed = [];\n\n    for (var index1 = 0, index2 = 0; index1 < n; ++index1) {\n      if (!filters.zero(index1)) newIndex[index1] = index2++;\n      else removed.push(index1);\n    }\n\n    // Remove all matching records from groups.\n    filterListeners.forEach(function(l) { l(-1, -1, [], removed, true); });\n\n    // Update indexes.\n    removeDataListeners.forEach(function(l) { l(newIndex); });\n\n    // Remove old filters and data by overwriting.\n    for (var index3 = 0, index4 = 0; index3 < n; ++index3) {\n      if (!filters.zero(index3)) {\n        if (index3 !== index4) filters.copy(index4, index3), data[index4] = data[index3];\n        ++index4;\n      }\n    }\n\n    data.length = n = index4;\n    filters.truncate(index4);\n    triggerOnChange('dataRemoved');\n  }\n\n  // Return true if the data element at index i is filtered IN.\n  // Optionally, ignore the filters of any dimensions in the ignore_dimensions list.\n  function isElementFiltered(i, ignore_dimensions) {\n    var n,\n        d,\n        id,\n        len,\n        mask = Array(filters.subarrays);\n    for (n = 0; n < filters.subarrays; n++) { mask[n] = ~0; }\n    if (ignore_dimensions) {\n      for (d = 0, len = ignore_dimensions.length; d < len; d++) {\n        // The top bits of the ID are the subarray offset and the lower bits are the bit\n        // offset of the \"one\" mask.\n        id = ignore_dimensions[d].id();\n        mask[id >> 7] &= ~(0x1 << (id & 0x3f));\n      }\n    }\n    return filters.zeroExceptMask(i,mask);\n  }\n\n  // Adds a new dimension with the specified value accessor function.\n  function dimension(value, iterable) {\n\n    if (typeof value === 'string') {\n      var accessorPath = value;\n      value = function(d) { return result(d, accessorPath); };\n    }\n\n    var dimension = {\n      filter: filter,\n      filterExact: filterExact,\n      filterRange: filterRange,\n      filterFunction: filterFunction,\n      filterAll: filterAll,\n      top: top,\n      bottom: bottom,\n      group: group,\n      groupAll: groupAll,\n      dispose: dispose,\n      remove: dispose, // for backwards-compatibility\n      accessor: value,\n      id: function() { return id; }\n    };\n\n    var one, // lowest unset bit as mask, e.g., 00001000\n        zero, // inverted one, e.g., 11110111\n        offset, // offset into the filters arrays\n        id, // unique ID for this dimension (reused when dimensions are disposed)\n        values, // sorted, cached array\n        index, // value rank ↦ object id\n        newValues, // temporary array storing newly-added values\n        newIndex, // temporary array storing newly-added index\n        iterablesIndexCount,\n        newIterablesIndexCount,\n        iterablesIndexFilterStatus,\n        newIterablesIndexFilterStatus,\n        iterablesEmptyRows = [],\n        sort = quicksort.by(function(i) { return newValues[i]; }),\n        refilter = xfilterFilter.filterAll, // for recomputing filter\n        refilterFunction, // the custom filter function in use\n        indexListeners = [], // when data is added\n        dimensionGroups = [],\n        lo0 = 0,\n        hi0 = 0,\n        t = 0,\n        k;\n\n    // Updating a dimension is a two-stage process. First, we must update the\n    // associated filters for the newly-added records. Once all dimensions have\n    // updated their filters, the groups are notified to update.\n    dataListeners.unshift(preAdd);\n    dataListeners.push(postAdd);\n\n    removeDataListeners.push(removeData);\n\n    // Add a new dimension in the filter bitmap and store the offset and bitmask.\n    var tmp = filters.add();\n    offset = tmp.offset;\n    one = tmp.one;\n    zero = ~one;\n\n    // Create a unique ID for the dimension\n    // IDs will be re-used if dimensions are disposed.\n    // For internal use the ID is the subarray offset shifted left 7 bits or'd with the\n    // bit offset of the set bit in the dimension's \"one\" mask.\n    id = (offset << 7) | (Math.log(one) / Math.log(2));\n\n    preAdd(data, 0, n);\n    postAdd(data, 0, n);\n\n    // Incorporates the specified new records into this dimension.\n    // This function is responsible for updating filters, values, and index.\n    function preAdd(newData, n0, n1) {\n\n      if (iterable){\n        // Count all the values\n        t = 0;\n        j = 0;\n        k = [];\n\n        for (var i0 = 0; i0 < newData.length; i0++) {\n          for(j = 0, k = value(newData[i0]); j < k.length; j++) {\n            t++;\n          }\n        }\n\n        newValues = [];\n        newIterablesIndexCount = crossfilter_range(newData.length);\n        newIterablesIndexFilterStatus = crossfilter_index(t,1);\n        var unsortedIndex = crossfilter_range(t);\n\n        for (var l = 0, index1 = 0; index1 < newData.length; index1++) {\n          k = value(newData[index1])\n          //\n          if(!k.length){\n            newIterablesIndexCount[index1] = 0;\n            iterablesEmptyRows.push(index1 + n0);\n            continue;\n          }\n          newIterablesIndexCount[index1] = k.length\n          for (j = 0; j < k.length; j++) {\n            newValues.push(k[j]);\n            unsortedIndex[l] = index1;\n            l++;\n          }\n        }\n\n        // Create the Sort map used to sort both the values and the valueToData indices\n        var sortMap = sort(crossfilter_range(t), 0, t);\n\n        // Use the sortMap to sort the newValues\n        newValues = permute(newValues, sortMap);\n\n\n        // Use the sortMap to sort the unsortedIndex map\n        // newIndex should be a map of sortedValue -> crossfilterData\n        newIndex = permute(unsortedIndex, sortMap)\n\n      } else{\n        // Permute new values into natural order using a standard sorted index.\n        newValues = newData.map(value);\n        newIndex = sort(crossfilter_range(n1), 0, n1);\n        newValues = permute(newValues, newIndex);\n      }\n\n      if(iterable) {\n        n1 = t;\n      }\n\n      // Bisect newValues to determine which new records are selected.\n      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1];\n      if (refilterFunction) {\n        for (var index2 = 0; index2 < n1; ++index2) {\n          if (!refilterFunction(newValues[index2], index2)) {\n            filters[offset][newIndex[index2] + n0] |= one;\n            if(iterable) newIterablesIndexFilterStatus[index2] = 1;\n          }\n        }\n      } else {\n        for (var index3 = 0; index3 < lo1; ++index3) {\n          filters[offset][newIndex[index3] + n0] |= one;\n          if(iterable) newIterablesIndexFilterStatus[index3] = 1;\n        }\n        for (var index4 = hi1; index4 < n1; ++index4) {\n          filters[offset][newIndex[index4] + n0] |= one;\n          if(iterable) newIterablesIndexFilterStatus[index4] = 1;\n        }\n      }\n\n      // If this dimension previously had no data, then we don't need to do the\n      // more expensive merge operation; use the new values and index as-is.\n      if (!n0) {\n        values = newValues;\n        index = newIndex;\n        iterablesIndexCount = newIterablesIndexCount;\n        iterablesIndexFilterStatus = newIterablesIndexFilterStatus;\n        lo0 = lo1;\n        hi0 = hi1;\n        return;\n      }\n\n\n\n      var oldValues = values,\n        oldIndex = index,\n        oldIterablesIndexFilterStatus = iterablesIndexFilterStatus,\n        old_n0,\n        i1 = 0;\n\n      i0 = 0;\n\n      if(iterable){\n        old_n0 = n0\n        n0 = oldValues.length;\n        n1 = t\n      }\n\n      // Otherwise, create new arrays into which to merge new and old.\n      values = iterable ? new Array(n0 + n1) : new Array(n);\n      index = iterable ? new Array(n0 + n1) : crossfilter_index(n, n);\n      if(iterable) iterablesIndexFilterStatus = crossfilter_index(n0 + n1, 1);\n\n      // Concatenate the newIterablesIndexCount onto the old one.\n      if(iterable) {\n        var oldiiclength = iterablesIndexCount.length;\n        iterablesIndexCount = xfilterArray.arrayLengthen(iterablesIndexCount, n);\n        for(var j=0; j+oldiiclength < n; j++) {\n          iterablesIndexCount[j+oldiiclength] = newIterablesIndexCount[j];\n        }\n      }\n\n      // Merge the old and new sorted values, and old and new index.\n      var index5 = 0;\n      for (; i0 < n0 && i1 < n1; ++index5) {\n        if (oldValues[i0] < newValues[i1]) {\n          values[index5] = oldValues[i0];\n          if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];\n          index[index5] = oldIndex[i0++];\n        } else {\n          values[index5] = newValues[i1];\n          if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];\n          index[index5] = newIndex[i1++] + (iterable ? old_n0 : n0);\n        }\n      }\n\n      // Add any remaining old values.\n      for (; i0 < n0; ++i0, ++index5) {\n        values[index5] = oldValues[i0];\n        if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];\n        index[index5] = oldIndex[i0];\n      }\n\n      // Add any remaining new values.\n      for (; i1 < n1; ++i1, ++index5) {\n        values[index5] = newValues[i1];\n        if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];\n        index[index5] = newIndex[i1] + (iterable ? old_n0 : n0);\n      }\n\n      // Bisect again to recompute lo0 and hi0.\n      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // When all filters have updated, notify index listeners of the new values.\n    function postAdd(newData, n0, n1) {\n      indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\n      newValues = newIndex = null;\n    }\n\n    function removeData(reIndex) {\n      for (var i = 0, j = 0, k; i < n; ++i) {\n        if (!filters.zero(k = index[i])) {\n          if (i !== j) values[j] = values[i];\n          index[j] = reIndex[k];\n          ++j;\n        }\n      }\n      values.length = j;\n      while (j < n) index[j++] = 0;\n\n      // Bisect again to recompute lo0 and hi0.\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // Updates the selected values based on the specified bounds [lo, hi].\n    // This implementation is used by all the public filter methods.\n    function filterIndexBounds(bounds) {\n\n      var lo1 = bounds[0],\n          hi1 = bounds[1];\n\n      if (refilterFunction) {\n        refilterFunction = null;\n        filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; }, bounds[0] === 0 && bounds[1] === index.length);\n        lo0 = lo1;\n        hi0 = hi1;\n        return dimension;\n      }\n\n      var i,\n          j,\n          k,\n          added = [],\n          removed = [],\n          valueIndexAdded = [],\n          valueIndexRemoved = [];\n\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          added.push(index[i]);\n          valueIndexAdded.push(i);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          removed.push(index[i]);\n          valueIndexRemoved.push(i);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          added.push(index[i]);\n          valueIndexAdded.push(i);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          removed.push(index[i]);\n          valueIndexRemoved.push(i);\n        }\n      }\n\n      if(!iterable) {\n        // Flip filters normally.\n\n        for(i=0; i<added.length; i++) {\n          filters[offset][added[i]] ^= one;\n        }\n\n        for(i=0; i<removed.length; i++) {\n          filters[offset][removed[i]] ^= one;\n        }\n\n      } else {\n        // For iterables, we need to figure out if the row has been completely removed vs partially included\n        // Only count a row as added if it is not already being aggregated. Only count a row\n        // as removed if the last element being aggregated is removed.\n\n        var newAdded = [];\n        var newRemoved = [];\n        for (i = 0; i < added.length; i++) {\n          iterablesIndexCount[added[i]]++\n          iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;\n          if(iterablesIndexCount[added[i]] === 1) {\n            filters[offset][added[i]] ^= one;\n            newAdded.push(added[i]);\n          }\n        }\n        for (i = 0; i < removed.length; i++) {\n          iterablesIndexCount[removed[i]]--\n          iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;\n          if(iterablesIndexCount[removed[i]] === 0) {\n            filters[offset][removed[i]] ^= one;\n            newRemoved.push(removed[i]);\n          }\n        }\n\n        added = newAdded;\n        removed = newRemoved;\n\n        // Now handle empty rows.\n        if(bounds[0] === 0 && bounds[1] === index.length) {\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if((filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was not in the filter, so set the filter and add\n              filters[offset][k] ^= one;\n              added.push(k);\n            }\n          }\n        } else {\n          // filter in place - remove empty rows if necessary\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was in the filter, so set the filter and remove\n              filters[offset][k] ^= one;\n              removed.push(k);\n            }\n          }\n        }\n      }\n\n      lo0 = lo1;\n      hi0 = hi1;\n      filterListeners.forEach(function(l) { l(one, offset, added, removed); });\n      triggerOnChange('filtered');\n      return dimension;\n    }\n\n    // Filters this dimension using the specified range, value, or null.\n    // If the range is null, this is equivalent to filterAll.\n    // If the range is an array, this is equivalent to filterRange.\n    // Otherwise, this is equivalent to filterExact.\n    function filter(range) {\n      return range == null\n          ? filterAll() : Array.isArray(range)\n          ? filterRange(range) : typeof range === \"function\"\n          ? filterFunction(range)\n          : filterExact(range);\n    }\n\n    // Filters this dimension to select the exact value.\n    function filterExact(value) {\n      return filterIndexBounds((refilter = xfilterFilter.filterExact(bisect, value))(values));\n    }\n\n    // Filters this dimension to select the specified range [lo, hi].\n    // The lower bound is inclusive, and the upper bound is exclusive.\n    function filterRange(range) {\n      return filterIndexBounds((refilter = xfilterFilter.filterRange(bisect, range))(values));\n    }\n\n    // Clears any filters on this dimension.\n    function filterAll() {\n      return filterIndexBounds((refilter = xfilterFilter.filterAll)(values));\n    }\n\n    // Filters this dimension using an arbitrary function.\n    function filterFunction(f) {\n      refilterFunction = f;\n      refilter = xfilterFilter.filterAll;\n\n      filterIndexFunction(f, false);\n\n      lo0 = 0;\n      hi0 = n;\n\n      return dimension;\n    }\n\n    function filterIndexFunction(f, filterAll) {\n      var i,\n          k,\n          x,\n          added = [],\n          removed = [],\n          valueIndexAdded = [],\n          valueIndexRemoved = [],\n          indexLength = index.length;\n\n      if(!iterable) {\n        for (i = 0; i < indexLength; ++i) {\n          if (!(filters[offset][k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n            if (x) added.push(k);\n            else removed.push(k);\n          }\n        }\n      }\n\n      if(iterable) {\n        for(i=0; i < indexLength; ++i) {\n          if(f(values[i], i)) {\n            added.push(index[i]);\n            valueIndexAdded.push(i);\n          } else {\n            removed.push(index[i]);\n            valueIndexRemoved.push(i);\n          }\n        }\n      }\n\n      if(!iterable) {\n        for(i=0; i<added.length; i++) {\n          if(filters[offset][added[i]] & one) filters[offset][added[i]] &= zero;\n        }\n\n        for(i=0; i<removed.length; i++) {\n          if(!(filters[offset][removed[i]] & one)) filters[offset][removed[i]] |= one;\n        }\n      } else {\n\n        var newAdded = [];\n        var newRemoved = [];\n        for (i = 0; i < added.length; i++) {\n          // First check this particular value needs to be added\n          if(iterablesIndexFilterStatus[valueIndexAdded[i]] === 1) {\n            iterablesIndexCount[added[i]]++\n            iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;\n            if(iterablesIndexCount[added[i]] === 1) {\n              filters[offset][added[i]] ^= one;\n              newAdded.push(added[i]);\n            }\n          }\n        }\n        for (i = 0; i < removed.length; i++) {\n          // First check this particular value needs to be removed\n          if(iterablesIndexFilterStatus[valueIndexRemoved[i]] === 0) {\n            iterablesIndexCount[removed[i]]--\n            iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;\n            if(iterablesIndexCount[removed[i]] === 0) {\n              filters[offset][removed[i]] ^= one;\n              newRemoved.push(removed[i]);\n            }\n          }\n        }\n\n        added = newAdded;\n        removed = newRemoved;\n\n        // Now handle empty rows.\n        if(filterAll) {\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if((filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was not in the filter, so set the filter and add\n              filters[offset][k] ^= one;\n              added.push(k);\n            }\n          }\n        } else {\n          // filter in place - remove empty rows if necessary\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was in the filter, so set the filter and remove\n              filters[offset][k] ^= one;\n              removed.push(k);\n            }\n          }\n        }\n      }\n\n      filterListeners.forEach(function(l) { l(one, offset, added, removed); });\n      triggerOnChange('filtered');\n    }\n\n    // Returns the top K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function top(k, top_offset) {\n      var array = [],\n          i = hi0,\n          j,\n          toSkip = 0;\n\n      if(top_offset && top_offset > 0) toSkip = top_offset;\n\n      while (--i >= lo0 && k > 0) {\n        if (filters.zero(j = index[i])) {\n          if(toSkip > 0) {\n            //skip matching row\n            --toSkip;\n          } else {\n            array.push(data[j]);\n            --k;\n          }\n        }\n      }\n\n      if(iterable){\n        for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {\n          // Add row with empty iterable column at the end\n          if(filters.zero(j = iterablesEmptyRows[i])) {\n            if(toSkip > 0) {\n              //skip matching row\n              --toSkip;\n            } else {\n              array.push(data[j]);\n              --k;\n            }\n          }\n        }\n      }\n\n      return array;\n    }\n\n    // Returns the bottom K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function bottom(k, bottom_offset) {\n      var array = [],\n          i,\n          j,\n          toSkip = 0;\n\n      if(bottom_offset && bottom_offset > 0) toSkip = bottom_offset;\n\n      if(iterable) {\n        // Add row with empty iterable column at the top\n        for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {\n          if(filters.zero(j = iterablesEmptyRows[i])) {\n            if(toSkip > 0) {\n              //skip matching row\n              --toSkip;\n            } else {\n              array.push(data[j]);\n              --k;\n            }\n          }\n        }\n      }\n\n      i = lo0;\n\n      while (i < hi0 && k > 0) {\n        if (filters.zero(j = index[i])) {\n          if(toSkip > 0) {\n            //skip matching row\n            --toSkip;\n          } else {\n            array.push(data[j]);\n            --k;\n          }\n        }\n        i++;\n      }\n\n      return array;\n    }\n\n    // Adds a new group to this dimension, using the specified key function.\n    function group(key) {\n      var group = {\n        top: top,\n        all: all,\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        order: order,\n        orderNatural: orderNatural,\n        size: size,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      // Ensure that this group will be removed when the dimension is removed.\n      dimensionGroups.push(group);\n\n      var groups, // array of {key, value}\n          groupIndex, // object id ↦ group id\n          groupWidth = 8,\n          groupCapacity = crossfilter_capacity(groupWidth),\n          k = 0, // cardinality\n          select,\n          heap,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          update = crossfilter_null,\n          reset = crossfilter_null,\n          resetNeeded = true,\n          groupAll = key === crossfilter_null,\n          n0old;\n\n      if (arguments.length < 1) key = crossfilter_identity;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the associated reduce values. It must also listen to\n      // the parent dimension for when data is added, and compute new keys.\n      filterListeners.push(update);\n      indexListeners.push(add);\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into the grouping.\n      add(values, index, 0, n);\n\n      // Incorporates the specified new values into this group.\n      // This function is responsible for updating groups and groupIndex.\n      function add(newValues, newIndex, n0, n1) {\n\n        if(iterable) {\n          n0old = n0\n          n0 = values.length - newValues.length\n          n1 = newValues.length;\n        }\n\n        var oldGroups = groups,\n            reIndex = iterable ? [] : crossfilter_index(k, groupCapacity),\n            add = reduceAdd,\n            remove = reduceRemove,\n            initial = reduceInitial,\n            k0 = k, // old cardinality\n            i0 = 0, // index of old group\n            i1 = 0, // index of new record\n            j, // object id\n            g0, // old group\n            x0, // old key\n            x1, // new key\n            g, // group to add\n            x; // key of group to add\n\n        // If a reset is needed, we don't need to update the reduce values.\n        if (resetNeeded) add = initial = crossfilter_null;\n        if (resetNeeded) remove = initial = crossfilter_null;\n\n        // Reset the new groups (k is a lower bound).\n        // Also, make sure that groupIndex exists and is long enough.\n        groups = new Array(k), k = 0;\n        if(iterable){\n          groupIndex = k0 > 1 ? groupIndex : [];\n        }\n        else{\n          groupIndex = k0 > 1 ? xfilterArray.arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n        }\n\n\n        // Get the first old key (x0 of g0), if it exists.\n        if (k0) x0 = (g0 = oldGroups[0]).key;\n\n        // Find the first new key (x1), skipping NaN keys.\n        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\n\n        // While new keys remain…\n        while (i1 < n1) {\n\n          // Determine the lesser of the two current keys; new and old.\n          // If there are no old keys remaining, then always add the new key.\n          if (g0 && x0 <= x1) {\n            g = g0, x = x0;\n\n            // Record the new index of the old group.\n            reIndex[i0] = k;\n\n            // Retrieve the next old key.\n            g0 = oldGroups[++i0];\n            if (g0) x0 = g0.key;\n          } else {\n            g = {key: x1, value: initial()}, x = x1;\n          }\n\n          // Add the lesser group.\n          groups[k] = g;\n\n          // Add any selected records belonging to the added group, while\n          // advancing the new key and populating the associated group index.\n\n          while (x1 <= x) {\n            j = newIndex[i1] + (iterable ? n0old : n0)\n\n\n            if(iterable){\n              if(groupIndex[j]){\n                groupIndex[j].push(k)\n              }\n              else{\n                groupIndex[j] = [k]\n              }\n            }\n            else{\n              groupIndex[j] = k;\n            }\n\n            // Always add new values to groups. Only remove when not in filter.\n            // This gives groups full information on data life-cycle.\n            g.value = add(g.value, data[j], true);\n            if (!filters.zeroExcept(j, offset, zero)) g.value = remove(g.value, data[j], false);\n            if (++i1 >= n1) break;\n            x1 = key(newValues[i1]);\n          }\n\n          groupIncrement();\n        }\n\n        // Add any remaining old groups that were greater th1an all new keys.\n        // No incremental reduce is needed; these groups have no new records.\n        // Also record the new index of the old group.\n        while (i0 < k0) {\n          groups[reIndex[i0] = k] = oldGroups[i0++];\n          groupIncrement();\n        }\n\n\n        // Fill in gaps with empty arrays where there may have been rows with empty iterables\n        if(iterable){\n          for (var index1 = 0; index1 < n; index1++) {\n            if(!groupIndex[index1]){\n              groupIndex[index1] = [];\n            }\n          }\n        }\n\n        // If we added any new groups before any old groups,\n        // update the group index of all the old records.\n        if(k > i0){\n          if(iterable){\n            groupIndex = permute(groupIndex, reIndex, true)\n          }\n          else{\n            for (i0 = 0; i0 < n0; ++i0) {\n              groupIndex[i0] = reIndex[groupIndex[i0]];\n            }\n          }\n        }\n\n        // Modify the update and reset behavior based on the cardinality.\n        // If the cardinality is less than or equal to one, then the groupIndex\n        // is not needed. If the cardinality is zero, then there are no records\n        // and therefore no groups to update or reset. Note that we also must\n        // change the registered listener to point to the new method.\n        j = filterListeners.indexOf(update);\n        if (k > 1) {\n          update = updateMany;\n          reset = resetMany;\n        } else {\n          if (!k && groupAll) {\n            k = 1;\n            groups = [{key: null, value: initial()}];\n          }\n          if (k === 1) {\n            update = updateOne;\n            reset = resetOne;\n          } else {\n            update = crossfilter_null;\n            reset = crossfilter_null;\n          }\n          groupIndex = null;\n        }\n        filterListeners[j] = update;\n\n        // Count the number of added groups,\n        // and widen the group index as needed.\n        function groupIncrement() {\n          if(iterable){\n            k++\n            return\n          }\n          if (++k === groupCapacity) {\n            reIndex = xfilterArray.arrayWiden(reIndex, groupWidth <<= 1);\n            groupIndex = xfilterArray.arrayWiden(groupIndex, groupWidth);\n            groupCapacity = crossfilter_capacity(groupWidth);\n          }\n        }\n      }\n\n      function removeData() {\n        if (k > 1) {\n          var oldK = k,\n              oldGroups = groups,\n              seenGroups = crossfilter_index(oldK, oldK);\n\n          // Filter out non-matches by copying matching group index entries to\n          // the beginning of the array.\n          for (var i = 0, j = 0; i < n; ++i) {\n            if (!filters.zero(i)) {\n              seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n              ++j;\n            }\n          }\n\n          // Reassemble groups including only those groups that were referred\n          // to by matching group index entries.  Note the new group index in\n          // seenGroups.\n          groups = [], k = 0;\n          for (i = 0; i < oldK; ++i) {\n            if (seenGroups[i]) {\n              seenGroups[i] = k++;\n              groups.push(oldGroups[i]);\n            }\n          }\n\n          if (k > 1) {\n            // Reindex the group index using seenGroups to find the new index.\n            for (var index2 = 0; index2 < j; ++index2) groupIndex[index2] = seenGroups[groupIndex[index2]];\n          } else {\n            groupIndex = null;\n          }\n          filterListeners[filterListeners.indexOf(update)] = k > 1\n              ? (reset = resetMany, update = updateMany)\n              : k === 1 ? (reset = resetOne, update = updateOne)\n              : reset = update = crossfilter_null;\n        } else if (k === 1) {\n          if (groupAll) return;\n          for (var index3 = 0; index3 < n; ++index3) if (!filters.zero(index3)) return;\n          groups = [], k = 0;\n          filterListeners[filterListeners.indexOf(update)] =\n          update = reset = crossfilter_null;\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is greater than 1.\n      // notFilter indicates a crossfilter.add/remove operation.\n      function updateMany(filterOne, filterOffset, added, removed, notFilter) {\n\n        if ((filterOne === one && filterOffset === offset) || resetNeeded) return;\n\n        var i,\n            j,\n            k,\n            n,\n            g;\n\n        if(iterable){\n          // Add the added values.\n          for (i = 0, n = added.length; i < n; ++i) {\n            if (filters.zeroExcept(k = added[i], offset, zero)) {\n              for (j = 0; j < groupIndex[k].length; j++) {\n                g = groups[groupIndex[k][j]];\n                g.value = reduceAdd(g.value, data[k], false, j);\n              }\n            }\n          }\n\n          // Remove the removed values.\n          for (i = 0, n = removed.length; i < n; ++i) {\n            if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n              for (j = 0; j < groupIndex[k].length; j++) {\n                g = groups[groupIndex[k][j]];\n                g.value = reduceRemove(g.value, data[k], notFilter, j);\n              }\n            }\n          }\n          return;\n        }\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (filters.zeroExcept(k = added[i], offset, zero)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceAdd(g.value, data[k], false);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceRemove(g.value, data[k], notFilter);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is 1.\n      // notFilter indicates a crossfilter.add/remove operation.\n      function updateOne(filterOne, filterOffset, added, removed, notFilter) {\n        if ((filterOne === one && filterOffset === offset) || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g = groups[0];\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (filters.zeroExcept(k = added[i], offset, zero)) {\n            g.value = reduceAdd(g.value, data[k], false);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n            g.value = reduceRemove(g.value, data[k], notFilter);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is greater than 1.\n      function resetMany() {\n        var i,\n            j,\n            g;\n\n        // Reset all group values.\n        for (i = 0; i < k; ++i) {\n          groups[i].value = reduceInitial();\n        }\n\n        // We add all records and then remove filtered records so that reducers\n        // can build an 'unfiltered' view even if there are already filters in\n        // place on other dimensions.\n        if(iterable){\n          for (i = 0; i < n; ++i) {\n            for (j = 0; j < groupIndex[i].length; j++) {\n              g = groups[groupIndex[i][j]];\n              g.value = reduceAdd(g.value, data[i], true, j);\n            }\n          }\n          for (i = 0; i < n; ++i) {\n            if (!filters.zeroExcept(i, offset, zero)) {\n              for (j = 0; j < groupIndex[i].length; j++) {\n                g = groups[groupIndex[i][j]];\n                g.value = reduceRemove(g.value, data[i], false, j);\n              }\n            }\n          }\n          return;\n        }\n\n        for (i = 0; i < n; ++i) {\n          g = groups[groupIndex[i]];\n          g.value = reduceAdd(g.value, data[i], true);\n        }\n        for (i = 0; i < n; ++i) {\n          if (!filters.zeroExcept(i, offset, zero)) {\n            g = groups[groupIndex[i]];\n            g.value = reduceRemove(g.value, data[i], false);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is 1.\n      function resetOne() {\n        var i,\n            g = groups[0];\n\n        // Reset the singleton group values.\n        g.value = reduceInitial();\n\n        // We add all records and then remove filtered records so that reducers\n        // can build an 'unfiltered' view even if there are already filters in\n        // place on other dimensions.\n        for (i = 0; i < n; ++i) {\n          g.value = reduceAdd(g.value, data[i], true);\n        }\n\n        for (i = 0; i < n; ++i) {\n          if (!filters.zeroExcept(i, offset, zero)) {\n            g.value = reduceRemove(g.value, data[i], false);\n          }\n        }\n      }\n\n      // Returns the array of group values, in the dimension's natural order.\n      function all() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return groups;\n      }\n\n      // Returns a new array containing the top K group values, in reduce order.\n      function top(k) {\n        var top = select(all(), 0, groups.length, k);\n        return heap.sort(top, 0, top.length);\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce values, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Sets the reduce order, using the specified accessor.\n      function order(value) {\n        select = xfilterHeapselect.by(valueOf);\n        heap = xfilterHeap.by(valueOf);\n        function valueOf(d) { return value(d.value); }\n        return group;\n      }\n\n      // A convenience method for natural ordering by reduce value.\n      function orderNatural() {\n        return order(crossfilter_identity);\n      }\n\n      // Returns the cardinality of this group, irrespective of any filters.\n      function size() {\n        return k;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i, 1);\n        i = indexListeners.indexOf(add);\n        if (i >= 0) indexListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        return group;\n      }\n\n      return reduceCount().orderNatural();\n    }\n\n    // A convenience function for generating a singleton group.\n    function groupAll() {\n      var g = group(crossfilter_null), all = g.all;\n      delete g.all;\n      delete g.top;\n      delete g.order;\n      delete g.orderNatural;\n      delete g.size;\n      g.value = function() { return all()[0].value; };\n      return g;\n    }\n\n    // Removes this dimension and associated groups and event listeners.\n    function dispose() {\n      dimensionGroups.forEach(function(group) { group.dispose(); });\n      var i = dataListeners.indexOf(preAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = dataListeners.indexOf(postAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = removeDataListeners.indexOf(removeData);\n      if (i >= 0) removeDataListeners.splice(i, 1);\n      filters.masks[offset] &= zero;\n      return filterAll();\n    }\n\n    return dimension;\n  }\n\n  // A convenience method for groupAll on a dummy dimension.\n  // This implementation can be optimized since it always has cardinality 1.\n  function groupAll() {\n    var group = {\n      reduce: reduce,\n      reduceCount: reduceCount,\n      reduceSum: reduceSum,\n      value: value,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var reduceValue,\n        reduceAdd,\n        reduceRemove,\n        reduceInitial,\n        resetNeeded = true;\n\n    // The group listens to the crossfilter for when any dimension changes, so\n    // that it can update the reduce value. It must also listen to the parent\n    // dimension for when data is added.\n    filterListeners.push(update);\n    dataListeners.push(add);\n\n    // For consistency; actually a no-op since resetNeeded is true.\n    add(data, 0, n);\n\n    // Incorporates the specified new values into this group.\n    function add(newData, n0) {\n      var i;\n\n      if (resetNeeded) return;\n\n      // Cycle through all the values.\n      for (i = n0; i < n; ++i) {\n\n        // Add all values all the time.\n        reduceValue = reduceAdd(reduceValue, data[i], true);\n\n        // Remove the value if filtered.\n        if (!filters.zero(i)) {\n          reduceValue = reduceRemove(reduceValue, data[i], false);\n        }\n      }\n    }\n\n    // Reduces the specified selected or deselected records.\n    function update(filterOne, filterOffset, added, removed, notFilter) {\n      var i,\n          k,\n          n;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = 0, n = added.length; i < n; ++i) {\n        if (filters.zero(k = added[i])) {\n          reduceValue = reduceAdd(reduceValue, data[k], notFilter);\n        }\n      }\n\n      // Remove the removed values.\n      for (i = 0, n = removed.length; i < n; ++i) {\n        if (filters.only(k = removed[i], filterOffset, filterOne)) {\n          reduceValue = reduceRemove(reduceValue, data[k], notFilter);\n        }\n      }\n    }\n\n    // Recomputes the group reduce value from scratch.\n    function reset() {\n      var i;\n\n      reduceValue = reduceInitial();\n\n      // Cycle through all the values.\n      for (i = 0; i < n; ++i) {\n\n        // Add all values all the time.\n        reduceValue = reduceAdd(reduceValue, data[i], true);\n\n        // Remove the value if it is filtered.\n        if (!filters.zero(i)) {\n          reduceValue = reduceRemove(reduceValue, data[i], false);\n        }\n      }\n    }\n\n    // Sets the reduce behavior for this group to use the specified functions.\n    // This method lazily recomputes the reduce value, waiting until needed.\n    function reduce(add, remove, initial) {\n      reduceAdd = add;\n      reduceRemove = remove;\n      reduceInitial = initial;\n      resetNeeded = true;\n      return group;\n    }\n\n    // A convenience method for reducing by count.\n    function reduceCount() {\n      return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, crossfilter_zero);\n    }\n\n    // A convenience method for reducing by sum(value).\n    function reduceSum(value) {\n      return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), crossfilter_zero);\n    }\n\n    // Returns the computed reduce value.\n    function value() {\n      if (resetNeeded) reset(), resetNeeded = false;\n      return reduceValue;\n    }\n\n    // Removes this group and associated event listeners.\n    function dispose() {\n      var i = filterListeners.indexOf(update);\n      if (i >= 0) filterListeners.splice(i);\n      i = dataListeners.indexOf(add);\n      if (i >= 0) dataListeners.splice(i);\n      return group;\n    }\n\n    return reduceCount();\n  }\n\n  // Returns the number of records in this crossfilter, irrespective of any filters.\n  function size() {\n    return n;\n  }\n\n  // Returns the raw row data contained in this crossfilter\n  function all(){\n    return data;\n  }\n\n  // Returns row data with all dimension filters applied\n  function allFiltered() {\n    var array = [],\n        i = 0;\n\n      for (i = 0; i < n; i++) {\n        if (filters.zero(i)) {\n          array.push(data[i]);\n        }\n      }\n\n      return array;\n  }\n\n  function onChange(cb){\n    if(typeof cb !== 'function'){\n      /* eslint no-console: 0 */\n      console.warn('onChange callback parameter must be a function!');\n      return;\n    }\n    callbacks.push(cb);\n    return function(){\n      callbacks.splice(callbacks.indexOf(cb), 1);\n    };\n  }\n\n  function triggerOnChange(eventName){\n    for (var i = 0; i < callbacks.length; i++) {\n      callbacks[i](eventName);\n    }\n  }\n\n  return arguments.length\n      ? add(arguments[0])\n      : crossfilter;\n}\n\n// Returns an array of size n, big enough to store ids up to m.\nfunction crossfilter_index(n, m) {\n  return (m < 0x101\n      ? xfilterArray.array8 : m < 0x10001\n      ? xfilterArray.array16\n      : xfilterArray.array32)(n);\n}\n\n// Constructs a new array of size n, with sequential values from 0 to n - 1.\nfunction crossfilter_range(n) {\n  var range = crossfilter_index(n, n);\n  for (var i = -1; ++i < n;) range[i] = i;\n  return range;\n}\n\nfunction crossfilter_capacity(w) {\n  return w === 8\n      ? 0x100 : w === 16\n      ? 0x10000\n      : 0x100000000;\n}\n\n\n/***/ }),\n\n/***/ 274:\n/***/ (function(module, exports) {\n\nif (typeof Uint8Array !== \"undefined\") {\n  var crossfilter_array8 = function(n) { return new Uint8Array(n); };\n  var crossfilter_array16 = function(n) { return new Uint16Array(n); };\n  var crossfilter_array32 = function(n) { return new Uint32Array(n); };\n\n  var crossfilter_arrayLengthen = function(array, length) {\n    if (array.length >= length) return array;\n    var copy = new array.constructor(length);\n    copy.set(array);\n    return copy;\n  };\n\n  var crossfilter_arrayWiden = function(array, width) {\n    var copy;\n    switch (width) {\n      case 16: copy = crossfilter_array16(array.length); break;\n      case 32: copy = crossfilter_array32(array.length); break;\n      default: throw new Error(\"invalid array width!\");\n    }\n    copy.set(array);\n    return copy;\n  };\n}\n\nfunction crossfilter_arrayUntyped(n) {\n  var array = new Array(n), i = -1;\n  while (++i < n) array[i] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayLengthenUntyped(array, length) {\n  var n = array.length;\n  while (n < length) array[n++] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayWidenUntyped(array, width) {\n  if (width > 32) throw new Error(\"invalid array width!\");\n  return array;\n}\n\n// An arbitrarily-wide array of bitmasks\nfunction crossfilter_bitarray(n) {\n  this.length = n;\n  this.subarrays = 1;\n  this.width = 8;\n  this.masks = {\n    0: 0\n  }\n\n  this[0] = crossfilter_array8(n);\n}\n\ncrossfilter_bitarray.prototype.lengthen = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    this[i] = crossfilter_arrayLengthen(this[i], n);\n  }\n  this.length = n;\n};\n\n// Reserve a new bit index in the array, returns {offset, one}\ncrossfilter_bitarray.prototype.add = function() {\n  var m, w, one, i, len;\n\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    m = this.masks[i];\n    w = this.width - (32 * i);\n    one = ~m & -~m;\n\n    if (w >= 32 && !one) {\n      continue;\n    }\n\n    if (w < 32 && (one & (1 << w))) {\n      // widen this subarray\n      this[i] = crossfilter_arrayWiden(this[i], w <<= 1);\n      this.width = 32 * i + w;\n    }\n\n    this.masks[i] |= one;\n\n    return {\n      offset: i,\n      one: one\n    };\n  }\n\n  // add a new subarray\n  this[this.subarrays] = crossfilter_array8(this.length);\n  this.masks[this.subarrays] = 1;\n  this.width += 8;\n  return {\n    offset: this.subarrays++,\n    one: 1\n  };\n};\n\n// Copy record from index src to index dest\ncrossfilter_bitarray.prototype.copy = function(dest, src) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    this[i][dest] = this[i][src];\n  }\n};\n\n// Truncate the array to the given length\ncrossfilter_bitarray.prototype.truncate = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    for (var j = this.length - 1; j >= n; j--) {\n      this[i][j] = 0;\n    }\n    this[i].length = n;\n  }\n  this.length = n;\n};\n\n// Checks that all bits for the given index are 0\ncrossfilter_bitarray.prototype.zero = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that all bits for the given index are 0 except for possibly one\ncrossfilter_bitarray.prototype.zeroExcept = function(n, offset, zero) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (i === offset ? this[i][n] & zero : this[i][n]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that all bits for the given indez are 0 except for the specified mask.\n// The mask should be an array of the same size as the filter subarrays width.\ncrossfilter_bitarray.prototype.zeroExceptMask = function(n, mask) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n] & mask[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Checks that only the specified bit is set for the given index\ncrossfilter_bitarray.prototype.only = function(n, offset, one) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n] != (i === offset ? one : 0)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that only the specified bit is set for the given index except for possibly one other\ncrossfilter_bitarray.prototype.onlyExcept = function(n, offset, zero, onlyOffset, onlyOne) {\n  var mask;\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    mask = this[i][n];\n    if (i === offset)\n      mask &= zero;\n    if (mask != (i === onlyOffset ? onlyOne : 0)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  array8: crossfilter_arrayUntyped,\n  array16: crossfilter_arrayUntyped,\n  array32: crossfilter_arrayUntyped,\n  arrayLengthen: crossfilter_arrayLengthenUntyped,\n  arrayWiden: crossfilter_arrayWidenUntyped,\n  bitarray: crossfilter_bitarray\n};\n\n\n/***/ }),\n\n/***/ 275:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction crossfilter_filterExact(bisect, value) {\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n  };\n}\n\nfunction crossfilter_filterRange(bisect, range) {\n  var min = range[0],\n      max = range[1];\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n  };\n}\n\nfunction crossfilter_filterAll(values) {\n  return [0, values.length];\n}\n\nmodule.exports = {\n  filterExact: crossfilter_filterExact,\n  filterRange: crossfilter_filterRange,\n  filterAll: crossfilter_filterAll\n};\n\n\n/***/ }),\n\n/***/ 276:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction crossfilter_null() {\n  return null;\n}\n\nmodule.exports = crossfilter_null;\n\n\n/***/ }),\n\n/***/ 277:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction crossfilter_zero() {\n  return 0;\n}\n\nmodule.exports = crossfilter_zero;\n\n\n/***/ }),\n\n/***/ 278:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar crossfilter_identity = __webpack_require__(269);\nvar xFilterHeap = __webpack_require__(270);\n\nfunction heapselect_by(f) {\n  var heap = xFilterHeap.by(f);\n\n  // Returns a new array containing the top k elements in the array a[lo:hi].\n  // The returned array is not sorted, but maintains the heap property. If k is\n  // greater than hi - lo, then fewer than k elements will be returned. The\n  // order of elements in a is unchanged by this operation.\n  function heapselect(a, lo, hi, k) {\n    var queue = new Array(k = Math.min(hi - lo, k)),\n        min,\n        i,\n        d;\n\n    for (i = 0; i < k; ++i) queue[i] = a[lo++];\n    heap(queue, 0, k);\n\n    if (lo < hi) {\n      min = f(queue[0]);\n      do {\n        if (f(d = a[lo]) > min) {\n          queue[0] = d;\n          min = f(heap(queue, 0, k)[0]);\n        }\n      } while (++lo < hi);\n    }\n\n    return queue;\n  }\n\n  return heapselect;\n}\n\nmodule.exports = heapselect_by(crossfilter_identity);\nmodule.exports.by = heapselect_by; // assign the raw function to the export as well\n\n\n/***/ }),\n\n/***/ 279:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar crossfilter_identity = __webpack_require__(269);\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\n\nmodule.exports = bisect_by(crossfilter_identity);\nmodule.exports.by = bisect_by; // assign the raw function to the export as well\n\n\n/***/ }),\n\n/***/ 280:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction permute(array, index, deep) {\n  for (var i = 0, n = index.length, copy = deep ? JSON.parse(JSON.stringify(array)) : new Array(n); i < n; ++i) {\n    copy[i] = array[index[i]];\n  }\n  return copy;\n}\n\nmodule.exports = permute;\n\n\n/***/ }),\n\n/***/ 281:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar crossfilter_identity = __webpack_require__(269);\nvar xFilterInsertionsort = __webpack_require__(271);\n\n// Algorithm designed by Vladimir Yaroslavskiy.\n// Implementation based on the Dart project; see NOTICE and AUTHORS for details.\n\nfunction quicksort_by(f) {\n  var insertionsort = xFilterInsertionsort.by(f);\n\n  function sort(a, lo, hi) {\n    return (hi - lo < quicksort_sizeThreshold\n        ? insertionsort\n        : quicksort)(a, lo, hi);\n  }\n\n  function quicksort(a, lo, hi) {\n    // Compute the two pivots by looking at 5 elements.\n    var sixth = (hi - lo) / 6 | 0,\n        i1 = lo + sixth,\n        i5 = hi - 1 - sixth,\n        i3 = lo + hi - 1 >> 1,  // The midpoint.\n        i2 = i3 - sixth,\n        i4 = i3 + sixth;\n\n    var e1 = a[i1], x1 = f(e1),\n        e2 = a[i2], x2 = f(e2),\n        e3 = a[i3], x3 = f(e3),\n        e4 = a[i4], x4 = f(e4),\n        e5 = a[i5], x5 = f(e5);\n\n    var t;\n\n    // Sort the selected 5 elements using a sorting network.\n    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n    var pivot1 = e2, pivotValue1 = x2,\n        pivot2 = e4, pivotValue2 = x4;\n\n    // e2 and e4 have been saved in the pivot variables. They will be written\n    // back, once the partitioning is finished.\n    a[i1] = e1;\n    a[i2] = a[lo];\n    a[i3] = e3;\n    a[i4] = a[hi - 1];\n    a[i5] = e5;\n\n    var less = lo + 1,   // First element in the middle partition.\n        great = hi - 2;  // Last element in the middle partition.\n\n    // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n    // Object.prototype.valueOf; == and === do not, so in order to be consistent\n    // with natural order (such as for Date objects), we must do two compares.\n    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n    if (pivotsEqual) {\n\n      // Degenerated case where the partitioning becomes a dutch national flag\n      // problem.\n      //\n      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n      //  ^             ^          ^             ^            ^\n      // left         less         k           great         right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1) for x in ]left, less[ : x < pivot.\n      //   2) for x in [less, k[ : x == pivot.\n      //   3) for x in ]great, right[ : x > pivot.\n      for (var k = less; k <= great; ++k) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else if (xk > pivotValue1) {\n\n          // Find the first element <= pivot in the range [k - 1, great] and\n          // put [:ek:] there. We know that such an element must exist:\n          // When k == less, then el3 (which is equal to pivot) lies in the\n          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n          // Note that in the latter case invariant 2 will be violated for a\n          // short amount of time. The invariant will be restored when the\n          // pivots are put into their final positions.\n          /* eslint no-constant-condition: 0 */\n          while (true) {\n            var greatValue = f(a[great]);\n            if (greatValue > pivotValue1) {\n              great--;\n              // This is the only location in the while-loop where a new\n              // iteration is started.\n              continue;\n            } else if (greatValue < pivotValue1) {\n              // Triple exchange.\n              a[k] = a[less];\n              a[less++] = a[great];\n              a[great--] = ek;\n              break;\n            } else {\n              a[k] = a[great];\n              a[great--] = ek;\n              // Note: if great < k then we will exit the outer loop and fix\n              // invariant 2 (which we just violated).\n              break;\n            }\n          }\n        }\n      }\n    } else {\n\n      // We partition the list into three parts:\n      //  1. < pivot1\n      //  2. >= pivot1 && <= pivot2\n      //  3. > pivot2\n      //\n      // During the loop we have:\n      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n      //  ^            ^                        ^              ^             ^\n      // left         less                     k              great        right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1. for x in ]left, less[ : x < pivot1\n      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n      //   3. for x in ]great, right[ : x > pivot2\n      (function () { // isolate scope\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else {\n          if (xk > pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] <= pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] >= pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n      })(); // isolate scope\n    }\n\n    // Move pivots into their final positions.\n    // We shrunk the list from both sides (a[left] and a[right] have\n    // meaningless values in them) and now we move elements from the first\n    // and third partition into these locations so that we can store the\n    // pivots.\n    a[lo] = a[less - 1];\n    a[less - 1] = pivot1;\n    a[hi - 1] = a[great + 1];\n    a[great + 1] = pivot2;\n\n    // The list is now partitioned into three partitions:\n    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n    //  ^            ^                        ^             ^\n    // left         less                     great        right\n\n    // Recursive descent. (Don't include the pivot values.)\n    sort(a, lo, less - 1);\n    sort(a, great + 2, hi);\n\n    if (pivotsEqual) {\n      // All elements in the second partition are equal to the pivot. No\n      // need to sort them.\n      return a;\n    }\n\n    // In theory it should be enough to call _doSort recursively on the second\n    // partition.\n    // The Android source however removes the pivot elements from the recursive\n    // call if the second partition is too large (more than 2/3 of the list).\n    if (less < i1 && great > i5) {\n\n      (function () { // isolate scope\n      var lessValue, greatValue;\n      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\n      while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\n\n      // Copy paste of the previous 3-way partitioning with adaptions.\n      //\n      // We partition the list into three parts:\n      //  1. == pivot1\n      //  2. > pivot1 && < pivot2\n      //  3. == pivot2\n      //\n      // During the loop we have:\n      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n      //              ^                      ^              ^\n      //            less                     k              great\n      //\n      // Invariants:\n      //   1. for x in [ *, less[ : x == pivot1\n      //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n      //   3. for x in ]great, * ] : x == pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk <= pivotValue1 && xk >= pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          less++;\n        } else {\n          if (xk <= pivotValue2 && xk >= pivotValue2) {\n            /* eslint no-constant-condition: 0 */\n            while (true) {\n              greatValue = f(a[great]);\n              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] < pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] == pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n      })(); // isolate scope\n\n    }\n\n    // The second partition has now been cleared of pivot elements and looks\n    // as follows:\n    // [  *  |  > pivot1 && < pivot2  | * ]\n    //        ^                      ^\n    //       less                  great\n    // Sort the second partition using recursive descent.\n\n    // The second partition looks as follows:\n    // [  *  |  >= pivot1 && <= pivot2  | * ]\n    //        ^                        ^\n    //       less                    great\n    // Simply sort it by recursive descent.\n\n    return sort(a, less, great + 1);\n  }\n\n  return sort;\n}\n\nvar quicksort_sizeThreshold = 32;\n\nmodule.exports = quicksort_by(crossfilter_identity);\nmodule.exports.by = quicksort_by;\n\n\n/***/ }),\n\n/***/ 282:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction crossfilter_reduceIncrement(p) {\n  return p + 1;\n}\n\nfunction crossfilter_reduceDecrement(p) {\n  return p - 1;\n}\n\nfunction crossfilter_reduceAdd(f) {\n  return function(p, v) {\n    return p + +f(v);\n  };\n}\n\nfunction crossfilter_reduceSubtract(f) {\n  return function(p, v) {\n    return p - f(v);\n  };\n}\n\nmodule.exports = {\n  reduceIncrement: crossfilter_reduceIncrement,\n  reduceDecrement: crossfilter_reduceDecrement,\n  reduceAdd: crossfilter_reduceAdd,\n  reduceSubtract: crossfilter_reduceSubtract\n};\n\n\n/***/ }),\n\n/***/ 283:\n/***/ (function(module, exports) {\n\nmodule.exports = {\"_args\":[[\"crossfilter2@1.4.1\",\"D:\\\\projects\\\\personal-blog\"]],\"_from\":\"crossfilter2@1.4.1\",\"_id\":\"crossfilter2@1.4.1\",\"_inBundle\":false,\"_integrity\":\"sha512-0ykBoUMRMMUUq5aBZk0Dn+pZgD+3a3KuUKRRCi5a/jxlnkwpu9B5FZM4BEaK5j9gUXF8BTDJXr/zIbM4Gi7Wig==\",\"_location\":\"/crossfilter2\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"version\",\"registry\":true,\"raw\":\"crossfilter2@1.4.1\",\"name\":\"crossfilter2\",\"escapedName\":\"crossfilter2\",\"rawSpec\":\"1.4.1\",\"saveSpec\":null,\"fetchSpec\":\"1.4.1\"},\"_requiredBy\":[\"/\"],\"_resolved\":\"https://registry.npmjs.org/crossfilter2/-/crossfilter2-1.4.1.tgz\",\"_spec\":\"1.4.1\",\"_where\":\"D:\\\\projects\\\\personal-blog\",\"author\":{\"name\":\"Mike Bostock\",\"url\":\"http://bost.ocks.org/mike\"},\"bugs\":{\"url\":\"https://github.com/crossfilter/crossfilter/issues\"},\"contributors\":[{\"name\":\"Jason Davies\",\"url\":\"http://www.jasondavies.com/\"}],\"dependencies\":{\"lodash.result\":\"^4.4.0\"},\"description\":\"Fast multidimensional filtering for coordinated views.\",\"devDependencies\":{\"browserify\":\"^13.0.0\",\"d3\":\"3.5\",\"eslint\":\"2.10.2\",\"package-json-versionify\":\"1.0.2\",\"semver\":\"^5.3.0\",\"uglify-js\":\"2.4.0\",\"vows\":\"0.7.0\"},\"eslintConfig\":{\"env\":{\"browser\":true,\"node\":true},\"globals\":{\"Uint8Array\":true,\"Uint16Array\":true,\"Uint32Array\":true},\"extends\":\"eslint:recommended\"},\"files\":[\"src\",\"index.js\",\"crossfilter.js\",\"crossfilter.min.js\"],\"homepage\":\"http://crossfilter.github.com/crossfilter/\",\"keywords\":[\"analytics\",\"visualization\",\"crossfilter\"],\"license\":\"Apache-2.0\",\"main\":\"./index.js\",\"maintainers\":[{\"name\":\"Gordon Woodhull\",\"url\":\"https://github.com/gordonwoodhull\"},{\"name\":\"Tanner Linsley\",\"url\":\"https://github.com/tannerlinsley\"},{\"name\":\"Ethan Jewett\",\"url\":\"https://github.com/esjewett\"}],\"name\":\"crossfilter2\",\"repository\":{\"type\":\"git\",\"url\":\"git+ssh://git@github.com/crossfilter/crossfilter.git\"},\"scripts\":{\"benchmark\":\"node test/benchmark.js\",\"build\":\"browserify index.js -t package-json-versionify --standalone crossfilter -o crossfilter.js && uglifyjs --compress --mangle --screw-ie8 crossfilter.js -o crossfilter.min.js\",\"clean\":\"rm -f crossfilter.js crossfilter.min.js\",\"test\":\"vows --verbose && eslint src/\"},\"version\":\"1.4.1\"}\n\n/***/ }),\n\n/***/ 284:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * This method is like `_.get` except that if the resolved value is a\n * function it's invoked with the `this` binding of its parent object and\n * its result is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to resolve.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n *\n * _.result(object, 'a[0].b.c1');\n * // => 3\n *\n * _.result(object, 'a[0].b.c2');\n * // => 4\n *\n * _.result(object, 'a[0].b.c3', 'default');\n * // => 'default'\n *\n * _.result(object, 'a[0].b.c3', _.constant('default'));\n * // => 'default'\n */\nfunction result(object, path, defaultValue) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = -1,\n      length = path.length;\n\n  // Ensure the loop is entered when path is empty.\n  if (!length) {\n    object = undefined;\n    length = 1;\n  }\n  while (++index < length) {\n    var value = object == null ? undefined : object[toKey(path[index])];\n    if (value === undefined) {\n      index = length;\n      value = defaultValue;\n    }\n    object = isFunction(value) ? value.call(object) : value;\n  }\n  return object;\n}\n\nmodule.exports = result;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(107)))\n\n/***/ }),\n\n/***/ 285:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {module.exports = global[\"dc\"] = __webpack_require__(286);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(107)))\n\n/***/ }),\n\n/***/ 286:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n *  dc 2.1.8\n *  http://dc-js.github.io/dc.js/\n *  Copyright 2012-2016 Nick Zhu & the dc.js Developers\n *  https://github.com/dc-js/dc.js/blob/master/AUTHORS\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n(function() { function _dc(d3, crossfilter) {\n'use strict';\n\n/**\n * The entire dc.js library is scoped under the **dc** name space. It does not introduce\n * anything else into the global name space.\n *\n * Most `dc` functions are designed to allow function chaining, meaning they return the current chart\n * instance whenever it is appropriate.  The getter forms of functions do not participate in function\n * chaining because they return values that are not the chart, although some,\n * such as {@link dc.baseMixin#svg .svg} and {@link dc.coordinateGridMixin#xAxis .xAxis},\n * return values that are themselves chainable d3 objects.\n * @namespace dc\n * @version 2.1.8\n * @example\n * // Example chaining\n * chart.width(300)\n *      .height(300)\n *      .filter('sunday');\n */\n/*jshint -W079*/\nvar dc = {\n    version: '2.1.8',\n    constants: {\n        CHART_CLASS: 'dc-chart',\n        DEBUG_GROUP_CLASS: 'debug',\n        STACK_CLASS: 'stack',\n        DESELECTED_CLASS: 'deselected',\n        SELECTED_CLASS: 'selected',\n        NODE_INDEX_NAME: '__index__',\n        GROUP_INDEX_NAME: '__group_index__',\n        DEFAULT_CHART_GROUP: '__default_chart_group__',\n        EVENT_DELAY: 40,\n        NEGLIGIBLE_NUMBER: 1e-10\n    },\n    _renderlet: null\n};\n/*jshint +W079*/\n\n/**\n * The dc.chartRegistry object maintains sets of all instantiated dc.js charts under named groups\n * and the default group.\n *\n * A chart group often corresponds to a crossfilter instance. It specifies\n * the set of charts which should be updated when a filter changes on one of the charts or when the\n * global functions {@link dc.filterAll dc.filterAll}, {@link dc.refocusAll dc.refocusAll},\n * {@link dc.renderAll dc.renderAll}, {@link dc.redrawAll dc.redrawAll}, or chart functions\n * {@link dc.baseMixin#renderGroup baseMixin.renderGroup},\n * {@link dc.baseMixin#redrawGroup baseMixin.redrawGroup} are called.\n *\n * @namespace chartRegistry\n * @memberof dc\n * @type {{has, register, deregister, clear, list}}\n */\ndc.chartRegistry = (function () {\n    // chartGroup:string => charts:array\n    var _chartMap = {};\n\n    function initializeChartGroup (group) {\n        if (!group) {\n            group = dc.constants.DEFAULT_CHART_GROUP;\n        }\n\n        if (!_chartMap[group]) {\n            _chartMap[group] = [];\n        }\n\n        return group;\n    }\n\n    return {\n        /**\n         * Determine if a given chart instance resides in any group in the registry.\n         * @method has\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @returns {Boolean}\n         */\n        has: function (chart) {\n            for (var e in _chartMap) {\n                if (_chartMap[e].indexOf(chart) >= 0) {\n                    return true;\n                }\n            }\n            return false;\n        },\n\n        /**\n         * Add given chart instance to the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method register\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        register: function (chart, group) {\n            group = initializeChartGroup(group);\n            _chartMap[group].push(chart);\n        },\n\n        /**\n         * Remove given chart instance from the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method deregister\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        deregister: function (chart, group) {\n            group = initializeChartGroup(group);\n            for (var i = 0; i < _chartMap[group].length; i++) {\n                if (_chartMap[group][i].anchorName() === chart.anchorName()) {\n                    _chartMap[group].splice(i, 1);\n                    break;\n                }\n            }\n        },\n\n        /**\n         * Clear given group if one is provided, otherwise clears all groups.\n         * @method clear\n         * @memberof dc.chartRegistry\n         * @param {String} group Group name\n         */\n        clear: function (group) {\n            if (group) {\n                delete _chartMap[group];\n            } else {\n                _chartMap = {};\n            }\n        },\n\n        /**\n         * Get an array of each chart instance in the given group.\n         * If no group is provided, the charts in the default group are returned.\n         * @method list\n         * @memberof dc.chartRegistry\n         * @param {String} [group] Group name\n         * @returns {Array<Object>}\n         */\n        list: function (group) {\n            group = initializeChartGroup(group);\n            return _chartMap[group];\n        }\n    };\n})();\n\n/**\n * Add given chart instance to the given group, creating the group if necessary.\n * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n * @memberof dc\n * @method registerChart\n * @param {Object} chart dc.js chart instance\n * @param {String} [group] Group name\n */\ndc.registerChart = function (chart, group) {\n    dc.chartRegistry.register(chart, group);\n};\n\n/**\n * Remove given chart instance from the given group, creating the group if necessary.\n * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n * @memberof dc\n * @method deregisterChart\n * @param {Object} chart dc.js chart instance\n * @param {String} [group] Group name\n */\ndc.deregisterChart = function (chart, group) {\n    dc.chartRegistry.deregister(chart, group);\n};\n\n/**\n * Determine if a given chart instance resides in any group in the registry.\n * @memberof dc\n * @method hasChart\n * @param {Object} chart dc.js chart instance\n * @returns {Boolean}\n */\ndc.hasChart = function (chart) {\n    return dc.chartRegistry.has(chart);\n};\n\n/**\n * Clear given group if one is provided, otherwise clears all groups.\n * @memberof dc\n * @method deregisterAllCharts\n * @param {String} group Group name\n */\ndc.deregisterAllCharts = function (group) {\n    dc.chartRegistry.clear(group);\n};\n\n/**\n * Clear all filters on all charts within the given chart group. If the chart group is not given then\n * only charts that belong to the default chart group will be reset.\n * @memberof dc\n * @method filterAll\n * @param {String} [group]\n */\ndc.filterAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].filterAll();\n    }\n};\n\n/**\n * Reset zoom level / focus on all charts that belong to the given chart group. If the chart group is\n * not given then only charts that belong to the default chart group will be reset.\n * @memberof dc\n * @method refocusAll\n * @param {String} [group]\n */\ndc.refocusAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        if (charts[i].focus) {\n            charts[i].focus();\n        }\n    }\n};\n\n/**\n * Re-render all charts belong to the given chart group. If the chart group is not given then only\n * charts that belong to the default chart group will be re-rendered.\n * @memberof dc\n * @method renderAll\n * @param {String} [group]\n */\ndc.renderAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].render();\n    }\n\n    if (dc._renderlet !== null) {\n        dc._renderlet(group);\n    }\n};\n\n/**\n * Redraw all charts belong to the given chart group. If the chart group is not given then only charts\n * that belong to the default chart group will be re-drawn. Redraw is different from re-render since\n * when redrawing dc tries to update the graphic incrementally, using transitions, instead of starting\n * from scratch.\n * @memberof dc\n * @method redrawAll\n * @param {String} [group]\n */\ndc.redrawAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].redraw();\n    }\n\n    if (dc._renderlet !== null) {\n        dc._renderlet(group);\n    }\n};\n\n/**\n * If this boolean is set truthy, all transitions will be disabled, and changes to the charts will happen\n * immediately.\n * @memberof dc\n * @member disableTransitions\n * @type {Boolean}\n * @default false\n */\ndc.disableTransitions = false;\n\n/**\n * Start a transition on a selection if transitions are globally enabled\n * ({@link dc.disableTransitions} is false) and the duration is greater than zero; otherwise return\n * the selection. Since most operations are the same on a d3 selection and a d3 transition, this\n * allows a common code path for both cases.\n * @memberof dc\n * @method transition\n * @param {d3.selection} selection - the selection to be transitioned\n * @param {Number|Function} [duration=250] - the duration of the transition in milliseconds, a\n * function returning the duration, or 0 for no transition\n * @param {Number|Function} [delay] - the delay of the transition in milliseconds, or a function\n * returning the delay, or 0 for no delay\n * @param {String} [name] - the name of the transition (if concurrent transitions on the same\n * elements are needed)\n * @returns {d3.transition|d3.selection}\n */\ndc.transition = function (selection, duration, delay, name) {\n    if (dc.disableTransitions || duration <= 0) {\n        return selection;\n    }\n\n    var s = selection.transition(name);\n\n    if (duration >= 0 || duration !== undefined) {\n        s = s.duration(duration);\n    }\n    if (delay >= 0 || delay !== undefined) {\n        s = s.delay(delay);\n    }\n\n    return s;\n};\n\n/* somewhat silly, but to avoid duplicating logic */\ndc.optionalTransition = function (enable, duration, delay, name) {\n    if (enable) {\n        return function (selection) {\n            return dc.transition(selection, duration, delay, name);\n        };\n    } else {\n        return function (selection) {\n            return selection;\n        };\n    }\n};\n\n// See http://stackoverflow.com/a/20773846\ndc.afterTransition = function (transition, callback) {\n    if (transition.empty() || !transition.duration) {\n        callback.call(transition);\n    } else {\n        var n = 0;\n        transition\n            .each(function () { ++n; })\n            .each('end', function () {\n                if (!--n) {\n                    callback.call(transition);\n                }\n            });\n    }\n};\n\n/**\n * @namespace units\n * @memberof dc\n * @type {{}}\n */\ndc.units = {};\n\n/**\n * The default value for {@link dc.coordinateGridMixin#xUnits .xUnits} for the\n * {@link dc.coordinateGridMixin Coordinate Grid Chart} and should\n * be used when the x values are a sequence of integers.\n * It is a function that counts the number of integers in the range supplied in its start and end parameters.\n * @method integers\n * @memberof dc.units\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @example\n * chart.xUnits(dc.units.integers) // already the default\n * @param {Number} start\n * @param {Number} end\n * @returns {Number}\n */\ndc.units.integers = function (start, end) {\n    return Math.abs(end - start);\n};\n\n/**\n * This argument can be passed to the {@link dc.coordinateGridMixin#xUnits .xUnits} function of the to\n * specify ordinal units for the x axis. Usually this parameter is used in combination with passing\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal} to\n * {@link dc.coordinateGridMixin#x .x}.\n * It just returns the domain passed to it, which for ordinal charts is an array of all values.\n * @method ordinal\n * @memberof dc.units\n * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal}\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @see {@link dc.coordinateGridMixin#x coordinateGridMixin.x}\n * @example\n * chart.xUnits(dc.units.ordinal)\n *      .x(d3.scale.ordinal())\n * @param {*} start\n * @param {*} end\n * @param {Array<String>} domain\n * @returns {Array<String>}\n */\ndc.units.ordinal = function (start, end, domain) {\n    return domain;\n};\n\n/**\n * @namespace fp\n * @memberof dc.units\n * @type {{}}\n */\ndc.units.fp = {};\n/**\n * This function generates an argument for the {@link dc.coordinateGridMixin Coordinate Grid Chart}\n * {@link dc.coordinateGridMixin#xUnits .xUnits} function specifying that the x values are floating-point\n * numbers with the given precision.\n * The returned function determines how many values at the given precision will fit into the range\n * supplied in its start and end parameters.\n * @method precision\n * @memberof dc.units.fp\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @example\n * // specify values (and ticks) every 0.1 units\n * chart.xUnits(dc.units.fp.precision(0.1)\n * // there are 500 units between 0.5 and 1 if the precision is 0.001\n * var thousandths = dc.units.fp.precision(0.001);\n * thousandths(0.5, 1.0) // returns 500\n * @param {Number} precision\n * @returns {Function} start-end unit function\n */\ndc.units.fp.precision = function (precision) {\n    var _f = function (s, e) {\n        var d = Math.abs((e - s) / _f.resolution);\n        if (dc.utils.isNegligible(d - Math.floor(d))) {\n            return Math.floor(d);\n        } else {\n            return Math.ceil(d);\n        }\n    };\n    _f.resolution = precision;\n    return _f;\n};\n\ndc.round = {};\ndc.round.floor = function (n) {\n    return Math.floor(n);\n};\ndc.round.ceil = function (n) {\n    return Math.ceil(n);\n};\ndc.round.round = function (n) {\n    return Math.round(n);\n};\n\ndc.override = function (obj, functionName, newFunction) {\n    var existingFunction = obj[functionName];\n    obj['_' + functionName] = existingFunction;\n    obj[functionName] = newFunction;\n};\n\ndc.renderlet = function (_) {\n    if (!arguments.length) {\n        return dc._renderlet;\n    }\n    dc._renderlet = _;\n    return dc;\n};\n\ndc.instanceOfChart = function (o) {\n    return o instanceof Object && o.__dcFlag__ && true;\n};\n\ndc.errors = {};\n\ndc.errors.Exception = function (msg) {\n    var _msg = msg || 'Unexpected internal error';\n\n    this.message = _msg;\n\n    this.toString = function () {\n        return _msg;\n    };\n    this.stack = (new Error()).stack;\n};\ndc.errors.Exception.prototype = Object.create(Error.prototype);\ndc.errors.Exception.prototype.constructor = dc.errors.Exception;\n\ndc.errors.InvalidStateException = function () {\n    dc.errors.Exception.apply(this, arguments);\n};\n\ndc.errors.InvalidStateException.prototype = Object.create(dc.errors.Exception.prototype);\ndc.errors.InvalidStateException.prototype.constructor = dc.errors.InvalidStateException;\n\ndc.errors.BadArgumentException = function () {\n    dc.errors.Exception.apply(this, arguments);\n};\n\ndc.errors.BadArgumentException.prototype = Object.create(dc.errors.Exception.prototype);\ndc.errors.BadArgumentException.prototype.constructor = dc.errors.BadArgumentException;\n\n/**\n * The default date format for dc.js\n * @name dateFormat\n * @memberof dc\n * @type {Function}\n * @default d3.time.format('%m/%d/%Y')\n */\ndc.dateFormat = d3.time.format('%m/%d/%Y');\n\n/**\n * @namespace printers\n * @memberof dc\n * @type {{}}\n */\ndc.printers = {};\n\n/**\n * Converts a list of filters into a readable string.\n * @method filters\n * @memberof dc.printers\n * @param {Array<dc.filters>} filters\n * @returns {String}\n */\ndc.printers.filters = function (filters) {\n    var s = '';\n\n    for (var i = 0; i < filters.length; ++i) {\n        if (i > 0) {\n            s += ', ';\n        }\n        s += dc.printers.filter(filters[i]);\n    }\n\n    return s;\n};\n\n/**\n * Converts a filter into a readable string.\n * @method filter\n * @memberof dc.printers\n * @param {dc.filters|any|Array<any>} filter\n * @returns {String}\n */\ndc.printers.filter = function (filter) {\n    var s = '';\n\n    if (typeof filter !== 'undefined' && filter !== null) {\n        if (filter instanceof Array) {\n            if (filter.length >= 2) {\n                s = '[' + dc.utils.printSingleValue(filter[0]) + ' -> ' + dc.utils.printSingleValue(filter[1]) + ']';\n            } else if (filter.length >= 1) {\n                s = dc.utils.printSingleValue(filter[0]);\n            }\n        } else {\n            s = dc.utils.printSingleValue(filter);\n        }\n    }\n\n    return s;\n};\n\n/**\n * Returns a function that given a string property name, can be used to pluck the property off an object.  A function\n * can be passed as the second argument to also alter the data being returned.\n *\n * This can be a useful shorthand method to create accessor functions.\n * @method pluck\n * @memberof dc\n * @example\n * var xPluck = dc.pluck('x');\n * var objA = {x: 1};\n * xPluck(objA) // 1\n * @example\n * var xPosition = dc.pluck('x', function (x, i) {\n *     // `this` is the original datum,\n *     // `x` is the x property of the datum,\n *     // `i` is the position in the array\n *     return this.radius + x;\n * });\n * dc.selectAll('.circle').data(...).x(xPosition);\n * @param {String} n\n * @param {Function} [f]\n * @returns {Function}\n */\ndc.pluck = function (n, f) {\n    if (!f) {\n        return function (d) { return d[n]; };\n    }\n    return function (d, i) { return f.call(d, d[n], i); };\n};\n\n/**\n * @namespace utils\n * @memberof dc\n * @type {{}}\n */\ndc.utils = {};\n\n/**\n * Print a single value filter.\n * @method printSingleValue\n * @memberof dc.utils\n * @param {any} filter\n * @returns {String}\n */\ndc.utils.printSingleValue = function (filter) {\n    var s = '' + filter;\n\n    if (filter instanceof Date) {\n        s = dc.dateFormat(filter);\n    } else if (typeof(filter) === 'string') {\n        s = filter;\n    } else if (dc.utils.isFloat(filter)) {\n        s = dc.utils.printSingleValue.fformat(filter);\n    } else if (dc.utils.isInteger(filter)) {\n        s = Math.round(filter);\n    }\n\n    return s;\n};\ndc.utils.printSingleValue.fformat = d3.format('.2f');\n\n/**\n * Arbitrary add one value to another.\n * @method add\n * @memberof dc.utils\n * @todo\n * These assume than any string r is a percentage (whether or not it includes %).\n * They also generate strange results if l is a string.\n * @param {String|Date|Number} l the value to modify\n * @param {Number} r the amount by which to modify the value\n * @param {String} [t] if `l` is a `Date`, the\n * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n * the `d3.time` namespace\n * @returns {String|Date|Number}\n */\ndc.utils.add = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() + r);\n        }\n        t = t || 'day';\n        return d3.time[t].offset(l, r);\n    } else if (typeof r === 'string') {\n        var percentage = (+r / 100);\n        return l > 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l + r;\n    }\n};\n\n/**\n * Arbitrary subtract one value from another.\n * @method subtract\n * @memberof dc.utils\n * @todo\n * These assume than any string r is a percentage (whether or not it includes %).\n * They also generate strange results if l is a string.\n * @param {String|Date|Number} l the value to modify\n * @param {Number} r the amount by which to modify the value\n * @param {String} [t] if `l` is a `Date`, the\n * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n * the `d3.time` namespace\n * @returns {String|Date|Number}\n */\ndc.utils.subtract = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() - r);\n        }\n        t = t || 'day';\n        return d3.time[t].offset(l, -r);\n    } else if (typeof r === 'string') {\n        var percentage = (+r / 100);\n        return l < 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l - r;\n    }\n};\n\n/**\n * Is the value a number?\n * @method isNumber\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isNumber = function (n) {\n    return n === +n;\n};\n\n/**\n * Is the value a float?\n * @method isFloat\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isFloat = function (n) {\n    return n === +n && n !== (n | 0);\n};\n\n/**\n * Is the value an integer?\n * @method isInteger\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isInteger = function (n) {\n    return n === +n && n === (n | 0);\n};\n\n/**\n * Is the value very close to zero?\n * @method isNegligible\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isNegligible = function (n) {\n    return !dc.utils.isNumber(n) || (n < dc.constants.NEGLIGIBLE_NUMBER && n > -dc.constants.NEGLIGIBLE_NUMBER);\n};\n\n/**\n * Ensure the value is no greater or less than the min/max values.  If it is return the boundary value.\n * @method clamp\n * @memberof dc.utils\n * @param {any} val\n * @param {any} min\n * @param {any} max\n * @returns {any}\n */\ndc.utils.clamp = function (val, min, max) {\n    return val < min ? min : (val > max ? max : val);\n};\n\n/**\n * Using a simple static counter, provide a unique integer id.\n * @method uniqueId\n * @memberof dc.utils\n * @returns {Number}\n */\nvar _idCounter = 0;\ndc.utils.uniqueId = function () {\n    return ++_idCounter;\n};\n\n/**\n * Convert a name to an ID.\n * @method nameToId\n * @memberof dc.utils\n * @param {String} name\n * @returns {String}\n */\ndc.utils.nameToId = function (name) {\n    return name.toLowerCase().replace(/[\\s]/g, '_').replace(/[\\.']/g, '');\n};\n\n/**\n * Append or select an item on a parent element.\n * @method appendOrSelect\n * @memberof dc.utils\n * @param {d3.selection} parent\n * @param {String} selector\n * @param {String} tag\n * @returns {d3.selection}\n */\ndc.utils.appendOrSelect = function (parent, selector, tag) {\n    tag = tag || selector;\n    var element = parent.select(selector);\n    if (element.empty()) {\n        element = parent.append(tag);\n    }\n    return element;\n};\n\n/**\n * Return the number if the value is a number; else 0.\n * @method safeNumber\n * @memberof dc.utils\n * @param {Number|any} n\n * @returns {Number}\n */\ndc.utils.safeNumber = function (n) { return dc.utils.isNumber(+n) ? +n : 0;};\n\ndc.logger = {};\n\ndc.logger.enableDebugLog = false;\n\ndc.logger.warn = function (msg) {\n    if (console) {\n        if (console.warn) {\n            console.warn(msg);\n        } else if (console.log) {\n            console.log(msg);\n        }\n    }\n\n    return dc.logger;\n};\n\ndc.logger.debug = function (msg) {\n    if (dc.logger.enableDebugLog && console) {\n        if (console.debug) {\n            console.debug(msg);\n        } else if (console.log) {\n            console.log(msg);\n        }\n    }\n\n    return dc.logger;\n};\n\ndc.logger.deprecate = function (fn, msg) {\n    // Allow logging of deprecation\n    var warned = false;\n    function deprecated () {\n        if (!warned) {\n            dc.logger.warn(msg);\n            warned = true;\n        }\n        return fn.apply(this, arguments);\n    }\n    return deprecated;\n};\n\ndc.events = {\n    current: null\n};\n\n/**\n * This function triggers a throttled event function with a specified delay (in milli-seconds).  Events\n * that are triggered repetitively due to user interaction such brush dragging might flood the library\n * and invoke more renders than can be executed in time. Using this function to wrap your event\n * function allows the library to smooth out the rendering by throttling events and only responding to\n * the most recent event.\n * @name events.trigger\n * @memberof dc\n * @example\n * chart.on('renderlet', function(chart) {\n *     // smooth the rendering through event throttling\n *     dc.events.trigger(function(){\n *         // focus some other chart to the range selected by user on this chart\n *         someOtherChart.focus(chart.filter());\n *     });\n * })\n * @param {Function} closure\n * @param {Number} [delay]\n */\ndc.events.trigger = function (closure, delay) {\n    if (!delay) {\n        closure();\n        return;\n    }\n\n    dc.events.current = closure;\n\n    setTimeout(function () {\n        if (closure === dc.events.current) {\n            closure();\n        }\n    }, delay);\n};\n\n/**\n * The dc.js filters are functions which are passed into crossfilter to chose which records will be\n * accumulated to produce values for the charts.  In the crossfilter model, any filters applied on one\n * dimension will affect all the other dimensions but not that one.  dc always applies a filter\n * function to the dimension; the function combines multiple filters and if any of them accept a\n * record, it is filtered in.\n *\n * These filter constructors are used as appropriate by the various charts to implement brushing.  We\n * mention below which chart uses which filter.  In some cases, many instances of a filter will be added.\n *\n * Each of the dc.js filters is an object with the following properties:\n * * `isFiltered` - a function that returns true if a value is within the filter\n * * `filterType` - a string identifying the filter, here the name of the constructor\n *\n * Currently these filter objects are also arrays, but this is not a requirement. Custom filters\n * can be used as long as they have the properties above.\n * @namespace filters\n * @memberof dc\n * @type {{}}\n */\ndc.filters = {};\n\n/**\n * RangedFilter is a filter which accepts keys between `low` and `high`.  It is used to implement X\n * axis brushing for the {@link dc.coordinateGridMixin coordinate grid charts}.\n *\n * Its `filterType` is 'RangedFilter'\n * @name RangedFilter\n * @memberof dc.filters\n * @param {Number} low\n * @param {Number} high\n * @returns {Array<Number>}\n * @constructor\n */\ndc.filters.RangedFilter = function (low, high) {\n    var range = new Array(low, high);\n    range.isFiltered = function (value) {\n        return value >= this[0] && value < this[1];\n    };\n    range.filterType = 'RangedFilter';\n\n    return range;\n};\n\n/**\n * TwoDimensionalFilter is a filter which accepts a single two-dimensional value.  It is used by the\n * {@link dc.heatMap heat map chart} to include particular cells as they are clicked.  (Rows and columns are\n * filtered by filtering all the cells in the row or column.)\n *\n * Its `filterType` is 'TwoDimensionalFilter'\n * @name TwoDimensionalFilter\n * @memberof dc.filters\n * @param {Array<Number>} filter\n * @returns {Array<Number>}\n * @constructor\n */\ndc.filters.TwoDimensionalFilter = function (filter) {\n    if (filter === null) { return null; }\n\n    var f = filter;\n    f.isFiltered = function (value) {\n        return value.length && value.length === f.length &&\n               value[0] === f[0] && value[1] === f[1];\n    };\n    f.filterType = 'TwoDimensionalFilter';\n\n    return f;\n};\n\n/**\n * The RangedTwoDimensionalFilter allows filtering all values which fit within a rectangular\n * region. It is used by the {@link dc.scatterPlot scatter plot} to implement rectangular brushing.\n *\n * It takes two two-dimensional points in the form `[[x1,y1],[x2,y2]]`, and normalizes them so that\n * `x1 <= x2` and `y1 <= y2`. It then returns a filter which accepts any points which are in the\n * rectangular range including the lower values but excluding the higher values.\n *\n * If an array of two values are given to the RangedTwoDimensionalFilter, it interprets the values as\n * two x coordinates `x1` and `x2` and returns a filter which accepts any points for which `x1 <= x <\n * x2`.\n *\n * Its `filterType` is 'RangedTwoDimensionalFilter'\n * @name RangedTwoDimensionalFilter\n * @memberof dc.filters\n * @param {Array<Array<Number>>} filter\n * @returns {Array<Array<Number>>}\n * @constructor\n */\ndc.filters.RangedTwoDimensionalFilter = function (filter) {\n    if (filter === null) { return null; }\n\n    var f = filter;\n    var fromBottomLeft;\n\n    if (f[0] instanceof Array) {\n        fromBottomLeft = [\n            [Math.min(filter[0][0], filter[1][0]), Math.min(filter[0][1], filter[1][1])],\n            [Math.max(filter[0][0], filter[1][0]), Math.max(filter[0][1], filter[1][1])]\n        ];\n    } else {\n        fromBottomLeft = [[filter[0], -Infinity], [filter[1], Infinity]];\n    }\n\n    f.isFiltered = function (value) {\n        var x, y;\n\n        if (value instanceof Array) {\n            x = value[0];\n            y = value[1];\n        } else {\n            x = value;\n            y = fromBottomLeft[0][1];\n        }\n\n        return x >= fromBottomLeft[0][0] && x < fromBottomLeft[1][0] &&\n               y >= fromBottomLeft[0][1] && y < fromBottomLeft[1][1];\n    };\n    f.filterType = 'RangedTwoDimensionalFilter';\n\n    return f;\n};\n\n/**\n * `dc.baseMixin` is an abstract functional object representing a basic `dc` chart object\n * for all chart and widget implementations. Methods from the {@link #dc.baseMixin dc.baseMixin} are inherited\n * and available on all chart implementations in the `dc` library.\n * @name baseMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.baseMixin}\n */\ndc.baseMixin = function (_chart) {\n    _chart.__dcFlag__ = dc.utils.uniqueId();\n\n    var _dimension;\n    var _group;\n\n    var _anchor;\n    var _root;\n    var _svg;\n    var _isChild;\n\n    var _minWidth = 200;\n    var _defaultWidthCalc = function (element) {\n        var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n        return (width && width > _minWidth) ? width : _minWidth;\n    };\n    var _widthCalc = _defaultWidthCalc;\n\n    var _minHeight = 200;\n    var _defaultHeightCalc = function (element) {\n        var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n        return (height && height > _minHeight) ? height : _minHeight;\n    };\n    var _heightCalc = _defaultHeightCalc;\n    var _width, _height;\n    var _useViewBoxResizing = false;\n\n    var _keyAccessor = dc.pluck('key');\n    var _valueAccessor = dc.pluck('value');\n    var _label = dc.pluck('key');\n\n    var _ordering = dc.pluck('key');\n    var _orderSort;\n\n    var _renderLabel = false;\n\n    var _title = function (d) {\n        return _chart.keyAccessor()(d) + ': ' + _chart.valueAccessor()(d);\n    };\n    var _renderTitle = true;\n    var _controlsUseVisibility = false;\n\n    var _transitionDuration = 750;\n\n    var _transitionDelay = 0;\n\n    var _filterPrinter = dc.printers.filters;\n\n    var _mandatoryAttributes = ['dimension', 'group'];\n\n    var _chartGroup = dc.constants.DEFAULT_CHART_GROUP;\n\n    var _listeners = d3.dispatch(\n        'preRender',\n        'postRender',\n        'preRedraw',\n        'postRedraw',\n        'filtered',\n        'zoomed',\n        'renderlet',\n        'pretransition');\n\n    var _legend;\n    var _commitHandler;\n\n    var _filters = [];\n    var _filterHandler = function (dimension, filters) {\n        if (filters.length === 0) {\n            dimension.filter(null);\n        } else if (filters.length === 1 && !filters[0].isFiltered) {\n            // single value and not a function-based filter\n            dimension.filterExact(filters[0]);\n        } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n            // single range-based filter\n            dimension.filterRange(filters[0]);\n        } else {\n            dimension.filterFunction(function (d) {\n                for (var i = 0; i < filters.length; i++) {\n                    var filter = filters[i];\n                    if (filter.isFiltered && filter.isFiltered(d)) {\n                        return true;\n                    } else if (filter <= d && filter >= d) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n        }\n        return filters;\n    };\n\n    var _data = function (group) {\n        return group.all();\n    };\n\n    /**\n     * Set or get the height attribute of a chart. The height is applied to the SVGElement generated by\n     * the chart when rendered (or re-rendered). If a value is given, then it will be used to calculate\n     * the new height and the chart returned for method chaining.  The value can either be a numeric, a\n     * function, or falsy. If no value is specified then the value of the current height attribute will\n     * be returned.\n     *\n     * By default, without an explicit height being given, the chart will select the width of its\n     * anchor element. If that isn't possible it defaults to 200 (provided by the\n     * {@link dc.baseMixin#minHeight minHeight} property). Setting the value falsy will return\n     * the chart to the default behavior.\n     * @method height\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#minHeight minHeight}\n     * @example\n     * // Default height\n     * chart.height(function (element) {\n     *     var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n     *     return (height && height > chart.minHeight()) ? height : chart.minHeight();\n     * });\n     *\n     * chart.height(250); // Set the chart's height to 250px;\n     * chart.height(function(anchor) { return doSomethingWith(anchor); }); // set the chart's height with a function\n     * chart.height(null); // reset the height to the default auto calculation\n     * @param {Number|Function} [height]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.height = function (height) {\n        if (!arguments.length) {\n            if (!dc.utils.isNumber(_height)) {\n                // only calculate once\n                _height = _heightCalc(_root.node());\n            }\n            return _height;\n        }\n        _heightCalc = d3.functor(height || _defaultHeightCalc);\n        _height = undefined;\n        return _chart;\n    };\n\n    /**\n     * Set or get the width attribute of a chart.\n     * @method width\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#height height}\n     * @see {@link dc.baseMixin#minWidth minWidth}\n     * @example\n     * // Default width\n     * chart.width(function (element) {\n     *     var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n     *     return (width && width > chart.minWidth()) ? width : chart.minWidth();\n     * });\n     * @param {Number|Function} [width]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.width = function (width) {\n        if (!arguments.length) {\n            if (!dc.utils.isNumber(_width)) {\n                // only calculate once\n                _width = _widthCalc(_root.node());\n            }\n            return _width;\n        }\n        _widthCalc = d3.functor(width || _defaultWidthCalc);\n        _width = undefined;\n        return _chart;\n    };\n\n    /**\n     * Set or get the minimum width attribute of a chart. This only has effect when used with the default\n     * {@link dc.baseMixin#width width} function.\n     * @method minWidth\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#width width}\n     * @param {Number} [minWidth=200]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.minWidth = function (minWidth) {\n        if (!arguments.length) {\n            return _minWidth;\n        }\n        _minWidth = minWidth;\n        return _chart;\n    };\n\n    /**\n     * Set or get the minimum height attribute of a chart. This only has effect when used with the default\n     * {@link dc.baseMixin#height height} function.\n     * @method minHeight\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#height height}\n     * @param {Number} [minHeight=200]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.minHeight = function (minHeight) {\n        if (!arguments.length) {\n            return _minHeight;\n        }\n        _minHeight = minHeight;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off using the SVG\n     * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox `viewBox` attribute}.\n     * When enabled, `viewBox` will be set on the svg root element instead of `width` and `height`.\n     * Requires that the chart aspect ratio be defined using chart.width(w) and chart.height(h).\n     *\n     * This will maintain the aspect ratio while enabling the chart to resize responsively to the\n     * space given to the chart using CSS. For example, the chart can use `width: 100%; height:\n     * 100%` or absolute positioning to resize to its parent div.\n     *\n     * Since the text will be sized as if the chart is drawn according to the width and height, and\n     * will be resized if the chart is any other size, you need to set the chart width and height so\n     * that the text looks good. In practice, 600x400 seems to work pretty well for most charts.\n     *\n     * You can see examples of this resizing strategy in the [Chart Resizing\n     * Examples](http://dc-js.github.io/dc.js/resizing/); just add `?resize=viewbox` to any of the\n     * one-chart examples to enable `useViewBoxResizing`.\n     * @method useViewBoxResizing\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [useViewBoxResizing=false]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.useViewBoxResizing = function (useViewBoxResizing) {\n        if (!arguments.length) {\n            return _useViewBoxResizing;\n        }\n        _useViewBoxResizing = useViewBoxResizing;\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the dimension attribute of a chart. In `dc`, a dimension can be any valid\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter dimension}\n     *\n     * If a value is given, then it will be used as the new dimension. If no value is specified then\n     * the current dimension will be returned.\n     * @method dimension\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter.dimension}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(dc.pluck('key'));\n     * chart.dimension(dimension);\n     * @param {crossfilter.dimension} [dimension]\n     * @returns {crossfilter.dimension|dc.baseMixin}\n     */\n    _chart.dimension = function (dimension) {\n        if (!arguments.length) {\n            return _dimension;\n        }\n        _dimension = dimension;\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * Set the data callback or retrieve the chart's data set. The data callback is passed the chart's\n     * group and by default will return\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all}.\n     * This behavior may be modified to, for instance, return only the top 5 groups.\n     * @method data\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // Default data function\n     * chart.data(function (group) { return group.all(); });\n     *\n     * chart.data(function (group) { return group.top(5); });\n     * @param {Function} [callback]\n     * @returns {*|dc.baseMixin}\n     */\n    _chart.data = function (callback) {\n        if (!arguments.length) {\n            return _data.call(_chart, _group);\n        }\n        _data = d3.functor(callback);\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the group attribute of a chart. In `dc` a group is a\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter group}.\n     * Usually the group should be created from the particular dimension associated with the same chart. If a value is\n     * given, then it will be used as the new group.\n     *\n     * If no value specified then the current group will be returned.\n     * If `name` is specified then it will be used to generate legend label.\n     * @method group\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(dc.pluck('key'));\n     * chart.dimension(dimension);\n     * chart.group(dimension.group(crossfilter.reduceSum()));\n     * @param {crossfilter.group} [group]\n     * @param {String} [name]\n     * @returns {crossfilter.group|dc.baseMixin}\n     */\n    _chart.group = function (group, name) {\n        if (!arguments.length) {\n            return _group;\n        }\n        _group = group;\n        _chart._groupName = name;\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * Get or set an accessor to order ordinal dimensions.  The chart uses\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n     * to sort elements; this accessor returns the value to order on.\n     * @method ordering\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n     * @example\n     * // Default ordering accessor\n     * _chart.ordering(dc.pluck('key'));\n     * @param {Function} [orderFunction]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.ordering = function (orderFunction) {\n        if (!arguments.length) {\n            return _ordering;\n        }\n        _ordering = orderFunction;\n        _orderSort = crossfilter.quicksort.by(_ordering);\n        _chart.expireCache();\n        return _chart;\n    };\n\n    _chart._computeOrderedGroups = function (data) {\n        var dataCopy = data.slice(0);\n\n        if (dataCopy.length <= 1) {\n            return dataCopy;\n        }\n\n        if (!_orderSort) {\n            _orderSort = crossfilter.quicksort.by(_ordering);\n        }\n\n        return _orderSort(dataCopy, 0, dataCopy.length);\n    };\n\n    /**\n     * Clear all filters associated with this chart. The same effect can be achieved by calling\n     * {@link dc.baseMixin#filter chart.filter(null)}.\n     * @method filterAll\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.filterAll = function () {\n        return _chart.filter(null);\n    };\n\n    /**\n     * Execute d3 single selection in the chart's scope using the given selector and return the d3\n     * selection.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @method select\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_select d3.select}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').select(selector)\n     * chart.select(selector)\n     * @returns {d3.selection}\n     */\n    _chart.select = function (s) {\n        return _root.select(s);\n    };\n\n    /**\n     * Execute in scope d3 selectAll using the given selector and return d3 selection result.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @method selectAll\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_selectAll d3.selectAll}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').selectAll(selector)\n     * chart.selectAll(selector)\n     * @returns {d3.selection}\n     */\n    _chart.selectAll = function (s) {\n        return _root ? _root.selectAll(s) : null;\n    };\n\n    /**\n     * Set the root SVGElement to either be an existing chart's root; or any valid [d3 single\n     * selector](https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements) specifying a dom\n     * block element such as a div; or a dom element or d3 selection. Optionally registers the chart\n     * within the chartGroup. This class is called internally on chart initialization, but be called\n     * again to relocate the chart. However, it will orphan any previously created SVGElements.\n     * @method anchor\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {anchorChart|anchorSelector|anchorNode} [parent]\n     * @param {String} [chartGroup]\n     * @returns {String|node|d3.selection|dc.baseMixin}\n     */\n    _chart.anchor = function (parent, chartGroup) {\n        if (!arguments.length) {\n            return _anchor;\n        }\n        if (dc.instanceOfChart(parent)) {\n            _anchor = parent.anchor();\n            _root = parent.root();\n            _isChild = true;\n        } else if (parent) {\n            if (parent.select && parent.classed) { // detect d3 selection\n                _anchor = parent.node();\n            } else {\n                _anchor = parent;\n            }\n            _root = d3.select(_anchor);\n            _root.classed(dc.constants.CHART_CLASS, true);\n            dc.registerChart(_chart, chartGroup);\n            _isChild = false;\n        } else {\n            throw new dc.errors.BadArgumentException('parent must be defined');\n        }\n        _chartGroup = chartGroup;\n        return _chart;\n    };\n\n    /**\n     * Returns the DOM id for the chart's anchored location.\n     * @method anchorName\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {String}\n     */\n    _chart.anchorName = function () {\n        var a = _chart.anchor();\n        if (a && a.id) {\n            return a.id;\n        }\n        if (a && a.replace) {\n            return a.replace('#', '');\n        }\n        return 'dc-chart' + _chart.chartID();\n    };\n\n    /**\n     * Returns the root element where a chart resides. Usually it will be the parent div element where\n     * the SVGElement was created. You can also pass in a new root element however this is usually handled by\n     * dc internally. Resetting the root element on a chart outside of dc internals may have\n     * unexpected consequences.\n     * @method root\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement HTMLElement}\n     * @param {HTMLElement} [rootElement]\n     * @returns {HTMLElement|dc.baseMixin}\n     */\n    _chart.root = function (rootElement) {\n        if (!arguments.length) {\n            return _root;\n        }\n        _root = rootElement;\n        return _chart;\n    };\n\n    /**\n     * Returns the top SVGElement for this specific chart. You can also pass in a new SVGElement,\n     * however this is usually handled by dc internally. Resetting the SVGElement on a chart outside\n     * of dc internals may have unexpected consequences.\n     * @method svg\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @param {SVGElement|d3.selection} [svgElement]\n     * @returns {SVGElement|d3.selection|dc.baseMixin}\n     */\n    _chart.svg = function (svgElement) {\n        if (!arguments.length) {\n            return _svg;\n        }\n        _svg = svgElement;\n        return _chart;\n    };\n\n    /**\n     * Remove the chart's SVGElements from the dom and recreate the container SVGElement.\n     * @method resetSvg\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @returns {SVGElement}\n     */\n    _chart.resetSvg = function () {\n        _chart.select('svg').remove();\n        return generateSvg();\n    };\n\n    function sizeSvg () {\n        if (_svg) {\n            if (!_useViewBoxResizing) {\n                _svg\n                    .attr('width', _chart.width())\n                    .attr('height', _chart.height());\n            } else if (!_svg.attr('viewBox')) {\n                _svg\n                    .attr('viewBox', '0 0 ' + _chart.width() + ' ' + _chart.height());\n            }\n        }\n    }\n\n    function generateSvg () {\n        _svg = _chart.root().append('svg');\n        sizeSvg();\n        return _svg;\n    }\n\n    /**\n     * Set or get the filter printer function. The filter printer function is used to generate human\n     * friendly text for filter value(s) associated with the chart instance. The text will get shown\n     * in the `.filter element; see {@link dc.baseMixin#turnOnControls turnOnControls}.\n     *\n     * By default dc charts use a default filter printer {@link dc.printers.filters dc.printers.filters}\n     * that provides simple printing support for both single value and ranged filters.\n     * @method filterPrinter\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // for a chart with an ordinal brush, print the filters in upper case\n     * chart.filterPrinter(function(filters) {\n     *   return filters.map(function(f) { return f.toUpperCase(); }).join(', ');\n     * });\n     * // for a chart with a range brush, print the filter as start and extent\n     * chart.filterPrinter(function(filters) {\n     *   return 'start ' + dc.utils.printSingleValue(filters[0][0]) +\n     *     ' extent ' + dc.utils.printSingleValue(filters[0][1] - filters[0][0]);\n     * });\n     * @param {Function} [filterPrinterFunction=dc.printers.filters]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.filterPrinter = function (filterPrinterFunction) {\n        if (!arguments.length) {\n            return _filterPrinter;\n        }\n        _filterPrinter = filterPrinterFunction;\n        return _chart;\n    };\n\n    /**\n     * If set, use the `visibility` attribute instead of the `display` attribute for showing/hiding\n     * chart reset and filter controls, for less disruption to the layout.\n     * @method controlsUseVisibility\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [controlsUseVisibility=false]\n     * @returns {Boolean|dc.baseMixin}\n     **/\n    _chart.controlsUseVisibility = function (useVisibility) {\n        if (!arguments.length) {\n            return _controlsUseVisibility;\n        }\n        _controlsUseVisibility = useVisibility;\n        return _chart;\n    };\n\n    /**\n     * Turn on optional control elements within the root element. dc currently supports the\n     * following html control elements.\n     * * root.selectAll('.reset') - elements are turned on if the chart has an active filter. This type\n     * of control element is usually used to store a reset link to allow user to reset filter on a\n     * certain chart. This element will be turned off automatically if the filter is cleared.\n     * * root.selectAll('.filter') elements are turned on if the chart has an active filter. The text\n     * content of this element is then replaced with the current filter value using the filter printer\n     * function. This type of element will be turned off automatically if the filter is cleared.\n     * @method turnOnControls\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.turnOnControls = function () {\n        if (_root) {\n            var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n            _chart.selectAll('.reset').style(attribute, null);\n            _chart.selectAll('.filter').text(_filterPrinter(_chart.filters())).style(attribute, null);\n        }\n        return _chart;\n    };\n\n    /**\n     * Turn off optional control elements within the root element.\n     * @method turnOffControls\n     * @memberof dc.baseMixin\n     * @see {@link dc.baseMixin#turnOnControls turnOnControls}\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.turnOffControls = function () {\n        if (_root) {\n            var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n            var value = _chart.controlsUseVisibility() ? 'hidden' : 'none';\n            _chart.selectAll('.reset').style(attribute, value);\n            _chart.selectAll('.filter').style(attribute, value).text(_chart.filter());\n        }\n        return _chart;\n    };\n\n    /**\n     * Set or get the animation transition duration (in milliseconds) for this chart instance.\n     * @method transitionDuration\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Number} [duration=750]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.transitionDuration = function (duration) {\n        if (!arguments.length) {\n            return _transitionDuration;\n        }\n        _transitionDuration = duration;\n        return _chart;\n    };\n\n    /**\n     * Set or get the animation transition delay (in milliseconds) for this chart instance.\n     * @method transitionDelay\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Number} [delay=0]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.transitionDelay = function (delay) {\n        if (!arguments.length) {\n            return _transitionDelay;\n        }\n        _transitionDelay = delay;\n        return _chart;\n    };\n\n    _chart._mandatoryAttributes = function (_) {\n        if (!arguments.length) {\n            return _mandatoryAttributes;\n        }\n        _mandatoryAttributes = _;\n        return _chart;\n    };\n\n    function checkForMandatoryAttributes (a) {\n        if (!_chart[a] || !_chart[a]()) {\n            throw new dc.errors.InvalidStateException('Mandatory attribute chart.' + a +\n                ' is missing on chart[#' + _chart.anchorName() + ']');\n        }\n    }\n\n    /**\n     * Invoking this method will force the chart to re-render everything from scratch. Generally it\n     * should only be used to render the chart for the first time on the page or if you want to make\n     * sure everything is redrawn from scratch instead of relying on the default incremental redrawing\n     * behaviour.\n     * @method render\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.render = function () {\n        _height = _width = undefined; // force recalculate\n        _listeners.preRender(_chart);\n\n        if (_mandatoryAttributes) {\n            _mandatoryAttributes.forEach(checkForMandatoryAttributes);\n        }\n\n        var result = _chart._doRender();\n\n        if (_legend) {\n            _legend.render();\n        }\n\n        _chart._activateRenderlets('postRender');\n\n        return result;\n    };\n\n    _chart._activateRenderlets = function (event) {\n        _listeners.pretransition(_chart);\n        if (_chart.transitionDuration() > 0 && _svg) {\n            _svg.transition().duration(_chart.transitionDuration()).delay(_chart.transitionDelay())\n                .each('end', function () {\n                    _listeners.renderlet(_chart);\n                    if (event) {\n                        _listeners[event](_chart);\n                    }\n                });\n        } else {\n            _listeners.renderlet(_chart);\n            if (event) {\n                _listeners[event](_chart);\n            }\n        }\n    };\n\n    /**\n     * Calling redraw will cause the chart to re-render data changes incrementally. If there is no\n     * change in the underlying data dimension then calling this method will have no effect on the\n     * chart. Most chart interaction in dc will automatically trigger this method through internal\n     * events (in particular {@link dc.redrawAll dc.redrawAll}); therefore, you only need to\n     * manually invoke this function if data is manipulated outside of dc's control (for example if\n     * data is loaded in the background using\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}).\n     * @method redraw\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.redraw = function () {\n        sizeSvg();\n        _listeners.preRedraw(_chart);\n\n        var result = _chart._doRedraw();\n\n        if (_legend) {\n            _legend.render();\n        }\n\n        _chart._activateRenderlets('postRedraw');\n\n        return result;\n    };\n\n    /**\n     * Gets/sets the commit handler. If the chart has a commit handler, the handler will be called when\n     * the chart's filters have changed, in order to send the filter data asynchronously to a server.\n     *\n     * Unlike other functions in dc.js, the commit handler is asynchronous. It takes two arguments:\n     * a flag indicating whether this is a render (true) or a redraw (false), and a callback to be\n     * triggered once the commit is filtered. The callback has the standard node.js continuation signature\n     * with error first and result second.\n     * @method commitHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.commitHandler = function (commitHandler) {\n        if (!arguments.length) {\n            return _commitHandler;\n        }\n        _commitHandler = commitHandler;\n        return _chart;\n    };\n\n    /**\n     * Redraws all charts in the same group as this chart, typically in reaction to a filter\n     * change. If the chart has a {@link dc.baseMixin.commitFilter commitHandler}, it will\n     * be executed and waited for.\n     * @method redrawGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.redrawGroup = function () {\n        if (_commitHandler) {\n            _commitHandler(false, function (error, result) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    dc.redrawAll(_chart.chartGroup());\n                }\n            });\n        } else {\n            dc.redrawAll(_chart.chartGroup());\n        }\n        return _chart;\n    };\n\n    /**\n     * Renders all charts in the same group as this chart. If the chart has a\n     * {@link dc.baseMixin.commitFilter commitHandler}, it will be executed and waited for\n     * @method renderGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.renderGroup = function () {\n        if (_commitHandler) {\n            _commitHandler(false, function (error, result) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    dc.renderAll(_chart.chartGroup());\n                }\n            });\n        } else {\n            dc.renderAll(_chart.chartGroup());\n        }\n        return _chart;\n    };\n\n    _chart._invokeFilteredListener = function (f) {\n        if (f !== undefined) {\n            _listeners.filtered(_chart, f);\n        }\n    };\n\n    _chart._invokeZoomedListener = function () {\n        _listeners.zoomed(_chart);\n    };\n\n    var _hasFilterHandler = function (filters, filter) {\n        if (filter === null || typeof(filter) === 'undefined') {\n            return filters.length > 0;\n        }\n        return filters.some(function (f) {\n            return filter <= f && filter >= f;\n        });\n    };\n\n    /**\n     * Set or get the has-filter handler. The has-filter handler is a function that checks to see if\n     * the chart's current filters (first argument) include a specific filter (second argument).  Using a custom has-filter handler allows\n     * you to change the way filters are checked for and replaced.\n     * @method hasFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default has-filter handler\n     * chart.hasFilterHandler(function (filters, filter) {\n     *     if (filter === null || typeof(filter) === 'undefined') {\n     *         return filters.length > 0;\n     *     }\n     *     return filters.some(function (f) {\n     *         return filter <= f && filter >= f;\n     *     });\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.hasFilterHandler(function(filters, filter) {\n     *     return false;\n     * });\n     * @param {Function} [hasFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.hasFilterHandler = function (hasFilterHandler) {\n        if (!arguments.length) {\n            return _hasFilterHandler;\n        }\n        _hasFilterHandler = hasFilterHandler;\n        return _chart;\n    };\n\n    /**\n     * Check whether any active filter or a specific filter is associated with particular chart instance.\n     * This function is **not chainable**.\n     * @method hasFilter\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#hasFilterHandler hasFilterHandler}\n     * @param {*} [filter]\n     * @returns {Boolean}\n     */\n    _chart.hasFilter = function (filter) {\n        return _hasFilterHandler(_filters, filter);\n    };\n\n    var _removeFilterHandler = function (filters, filter) {\n        for (var i = 0; i < filters.length; i++) {\n            if (filters[i] <= filter && filters[i] >= filter) {\n                filters.splice(i, 1);\n                break;\n            }\n        }\n        return filters;\n    };\n\n    /**\n     * Set or get the remove filter handler. The remove filter handler is a function that removes a\n     * filter from the chart's current filters. Using a custom remove filter handler allows you to\n     * change how filters are removed or perform additional work when removing a filter, e.g. when\n     * using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method removeFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default remove filter handler\n     * chart.removeFilterHandler(function (filters, filter) {\n     *     for (var i = 0; i < filters.length; i++) {\n     *         if (filters[i] <= filter && filters[i] >= filter) {\n     *             filters.splice(i, 1);\n     *             break;\n     *         }\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.removeFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [removeFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.removeFilterHandler = function (removeFilterHandler) {\n        if (!arguments.length) {\n            return _removeFilterHandler;\n        }\n        _removeFilterHandler = removeFilterHandler;\n        return _chart;\n    };\n\n    var _addFilterHandler = function (filters, filter) {\n        filters.push(filter);\n        return filters;\n    };\n\n    /**\n     * Set or get the add filter handler. The add filter handler is a function that adds a filter to\n     * the chart's filter list. Using a custom add filter handler allows you to change the way filters\n     * are added or perform additional work when adding a filter, e.g. when using a filter server other\n     * than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method addFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default add filter handler\n     * chart.addFilterHandler(function (filters, filter) {\n     *     filters.push(filter);\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.addFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [addFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.addFilterHandler = function (addFilterHandler) {\n        if (!arguments.length) {\n            return _addFilterHandler;\n        }\n        _addFilterHandler = addFilterHandler;\n        return _chart;\n    };\n\n    var _resetFilterHandler = function (filters) {\n        return [];\n    };\n\n    /**\n     * Set or get the reset filter handler. The reset filter handler is a function that resets the\n     * chart's filter list by returning a new list. Using a custom reset filter handler allows you to\n     * change the way filters are reset, or perform additional work when resetting the filters,\n     * e.g. when using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method resetFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default remove filter handler\n     * function (filters) {\n     *     return [];\n     * }\n     *\n     * // custom filter handler (no-op)\n     * chart.resetFilterHandler(function(filters) {\n     *     return filters;\n     * });\n     * @param {Function} [resetFilterHandler]\n     * @returns {dc.baseMixin}\n     */\n    _chart.resetFilterHandler = function (resetFilterHandler) {\n        if (!arguments.length) {\n            return _resetFilterHandler;\n        }\n        _resetFilterHandler = resetFilterHandler;\n        return _chart;\n    };\n\n    function applyFilters (filters) {\n        if (_chart.dimension() && _chart.dimension().filter) {\n            var fs = _filterHandler(_chart.dimension(), filters);\n            if (fs) {\n                filters = fs;\n            }\n        }\n        return filters;\n    }\n\n    /**\n     * Replace the chart filter. This is equivalent to calling `chart.filter(null).filter(filter)`\n     * but more efficient because the filter is only applied once.\n     *\n     * @method replaceFilter\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {*} [filter]\n     * @returns {dc.baseMixin}\n     **/\n    _chart.replaceFilter = function (filter) {\n        _filters = _resetFilterHandler(_filters);\n        _chart.filter(filter);\n        return _chart;\n    };\n\n    /**\n     * Filter the chart by the given parameter, or return the current filter if no input parameter\n     * is given.\n     *\n     * The filter parameter can take one of these forms:\n     * * A single value: the value will be toggled (added if it is not present in the current\n     * filters, removed if it is present)\n     * * An array containing a single array of values (`[[value,value,value]]`): each value is\n     * toggled\n     * * When appropriate for the chart, a {@link dc.filters dc filter object} such as\n     *   * {@link dc.filters.RangedFilter `dc.filters.RangedFilter`} for the\n     * {@link dc.coordinateGridMixin dc.coordinateGridMixin} charts\n     *   * {@link dc.filters.TwoDimensionalFilter `dc.filters.TwoDimensionalFilter`} for the\n     * {@link dc.heatMap heat map}\n     *   * {@link dc.filters.RangedTwoDimensionalFilter `dc.filters.RangedTwoDimensionalFilter`}\n     * for the {@link dc.scatterPlot scatter plot}\n     * * `null`: the filter will be reset using the\n     * {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n     *\n     * Note that this is always a toggle (even when it doesn't make sense for the filter type). If\n     * you wish to replace the current filter, either call `chart.filter(null)` first - or it's more\n     * efficient to call {@link dc.baseMixin#replaceFilter `chart.replaceFilter(filter)`} instead.\n     *\n     * Each toggle is executed by checking if the value is already present using the\n     * {@link dc.baseMixin#hasFilterHandler hasFilterHandler}; if it is not present, it is added\n     * using the {@link dc.baseMixin#addFilterHandler addFilterHandler}; if it is already present,\n     * it is removed using the {@link dc.baseMixin#removeFilterHandler removeFilterHandler}.\n     *\n     * Once the filters array has been updated, the filters are applied to the\n     * crossfilter dimension, using the {@link dc.baseMixin#filterHandler filterHandler}.\n     *\n     * Once you have set the filters, call {@link dc.baseMixin#redrawGroup `chart.redrawGroup()`}\n     * (or {@link dc.redrawAll `dc.redrawAll()`}) to redraw the chart's group.\n     * @method filter\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#addFilterHandler addFilterHandler}\n     * @see {@link dc.baseMixin#removeFilterHandler removeFilterHandler}\n     * @see {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n     * @see {@link dc.baseMixin#filterHandler filterHandler}\n     * @example\n     * // filter by a single string\n     * chart.filter('Sunday');\n     * // filter by a single age\n     * chart.filter(18);\n     * // filter by a set of states\n     * chart.filter([['MA', 'TX', 'ND', 'WA']]);\n     * // filter by range -- note the use of dc.filters.RangedFilter, which is different\n     * // from the syntax for filtering a crossfilter dimension directly, dimension.filter([15,20])\n     * chart.filter(dc.filters.RangedFilter(15,20));\n     * @param {*} [filter]\n     * @returns {dc.baseMixin}\n     */\n    _chart.filter = function (filter) {\n        if (!arguments.length) {\n            return _filters.length > 0 ? _filters[0] : null;\n        }\n        var filters = _filters;\n        if (filter instanceof Array && filter[0] instanceof Array && !filter.isFiltered) {\n            // toggle each filter\n            filter[0].forEach(function (f) {\n                if (_hasFilterHandler(filters, f)) {\n                    filters = _removeFilterHandler(filters, f);\n                } else {\n                    filters = _addFilterHandler(filters, f);\n                }\n            });\n        } else if (filter === null) {\n            filters = _resetFilterHandler(filters);\n        } else {\n            if (_hasFilterHandler(filters, filter)) {\n                filters = _removeFilterHandler(filters, filter);\n            } else {\n                filters = _addFilterHandler(filters, filter);\n            }\n        }\n        _filters = applyFilters(filters);\n        _chart._invokeFilteredListener(filter);\n\n        if (_root !== null && _chart.hasFilter()) {\n            _chart.turnOnControls();\n        } else {\n            _chart.turnOffControls();\n        }\n\n        return _chart;\n    };\n\n    /**\n     * Returns all current filters. This method does not perform defensive cloning of the internal\n     * filter array before returning, therefore any modification of the returned array will effect the\n     * chart's internal filter storage.\n     * @method filters\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {Array<*>}\n     */\n    _chart.filters = function () {\n        return _filters;\n    };\n\n    _chart.highlightSelected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, true);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n    };\n\n    _chart.fadeDeselected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, true);\n    };\n\n    _chart.resetHighlight = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n    };\n\n    /**\n     * This function is passed to d3 as the onClick handler for each chart. The default behavior is to\n     * filter on the clicked datum (passed to the callback) and redraw the chart group.\n     * @method onClick\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {*} datum\n     */\n    _chart.onClick = function (datum) {\n        var filter = _chart.keyAccessor()(datum);\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    /**\n     * Set or get the filter handler. The filter handler is a function that performs the filter action\n     * on a specific dimension. Using a custom filter handler allows you to perform additional logic\n     * before or after filtering.\n     * @method filterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter crossfilter.dimension.filter}\n     * @example\n     * // the default filter handler handles all possible cases for the charts in dc.js\n     * // you can replace it with something more specialized for your own chart\n     * chart.filterHandler(function (dimension, filters) {\n     *     if (filters.length === 0) {\n     *         // the empty case (no filtering)\n     *         dimension.filter(null);\n     *     } else if (filters.length === 1 && !filters[0].isFiltered) {\n     *         // single value and not a function-based filter\n     *         dimension.filterExact(filters[0]);\n     *     } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n     *         // single range-based filter\n     *         dimension.filterRange(filters[0]);\n     *     } else {\n     *         // an array of values, or an array of filter objects\n     *         dimension.filterFunction(function (d) {\n     *             for (var i = 0; i < filters.length; i++) {\n     *                 var filter = filters[i];\n     *                 if (filter.isFiltered && filter.isFiltered(d)) {\n     *                     return true;\n     *                 } else if (filter <= d && filter >= d) {\n     *                     return true;\n     *                 }\n     *             }\n     *             return false;\n     *         });\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler\n     * chart.filterHandler(function(dimension, filter){\n     *     var newFilter = filter + 10;\n     *     dimension.filter(newFilter);\n     *     return newFilter; // set the actual filter value to the new value\n     * });\n     * @param {Function} [filterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.filterHandler = function (filterHandler) {\n        if (!arguments.length) {\n            return _filterHandler;\n        }\n        _filterHandler = filterHandler;\n        return _chart;\n    };\n\n    // abstract function stub\n    _chart._doRender = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    _chart.legendables = function () {\n        // do nothing in base, should be overridden by sub-function\n        return [];\n    };\n\n    _chart.legendHighlight = function () {\n        // do nothing in base, should be overridden by sub-function\n    };\n\n    _chart.legendReset = function () {\n        // do nothing in base, should be overridden by sub-function\n    };\n\n    _chart.legendToggle = function () {\n        // do nothing in base, should be overriden by sub-function\n    };\n\n    _chart.isLegendableHidden = function () {\n        // do nothing in base, should be overridden by sub-function\n        return false;\n    };\n\n    /**\n     * Set or get the key accessor function. The key accessor function is used to retrieve the key\n     * value from the crossfilter group. Key values are used differently in different charts, for\n     * example keys correspond to slices in a pie chart and x axis positions in a grid coordinate chart.\n     * @method keyAccessor\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default key accessor\n     * chart.keyAccessor(function(d) { return d.key; });\n     * // custom key accessor for a multi-value crossfilter reduction\n     * chart.keyAccessor(function(p) { return p.value.absGain; });\n     * @param {Function} [keyAccessor]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.keyAccessor = function (keyAccessor) {\n        if (!arguments.length) {\n            return _keyAccessor;\n        }\n        _keyAccessor = keyAccessor;\n        return _chart;\n    };\n\n    /**\n     * Set or get the value accessor function. The value accessor function is used to retrieve the\n     * value from the crossfilter group. Group values are used differently in different charts, for\n     * example values correspond to slice sizes in a pie chart and y axis positions in a grid\n     * coordinate chart.\n     * @method valueAccessor\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default value accessor\n     * chart.valueAccessor(function(d) { return d.value; });\n     * // custom value accessor for a multi-value crossfilter reduction\n     * chart.valueAccessor(function(p) { return p.value.percentageGain; });\n     * @param {Function} [valueAccessor]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.valueAccessor = function (valueAccessor) {\n        if (!arguments.length) {\n            return _valueAccessor;\n        }\n        _valueAccessor = valueAccessor;\n        return _chart;\n    };\n\n    /**\n     * Set or get the label function. The chart class will use this function to render labels for each\n     * child element in the chart, e.g. slices in a pie chart or bubbles in a bubble chart. Not every\n     * chart supports the label function, for example line chart does not use this function\n     * at all. By default, enables labels; pass false for the second parameter if this is not desired.\n     * @method label\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default label function just return the key\n     * chart.label(function(d) { return d.key; });\n     * // label function has access to the standard d3 data binding and can get quite complicated\n     * chart.label(function(d) { return d.data.key + '(' + Math.floor(d.data.value / all.value() * 100) + '%)'; });\n     * @param {Function} [labelFunction]\n     * @param {Boolean} [enableLabels=true]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.label = function (labelFunction, enableLabels) {\n        if (!arguments.length) {\n            return _label;\n        }\n        _label = labelFunction;\n        if ((enableLabels === undefined) || enableLabels) {\n            _renderLabel = true;\n        }\n        return _chart;\n    };\n\n    /**\n     * Turn on/off label rendering\n     * @method renderLabel\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [renderLabel=false]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.renderLabel = function (renderLabel) {\n        if (!arguments.length) {\n            return _renderLabel;\n        }\n        _renderLabel = renderLabel;\n        return _chart;\n    };\n\n    /**\n     * Set or get the title function. The chart class will use this function to render the SVGElement title\n     * (usually interpreted by browser as tooltips) for each child element in the chart, e.g. a slice\n     * in a pie chart or a bubble in a bubble chart. Almost every chart supports the title function;\n     * however in grid coordinate charts you need to turn off the brush in order to see titles, because\n     * otherwise the brush layer will block tooltip triggering.\n     * @method title\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default title function shows \"key: value\"\n     * chart.title(function(d) { return d.key + ': ' + d.value; });\n     * // title function has access to the standard d3 data binding and can get quite complicated\n     * chart.title(function(p) {\n     *    return p.key.getFullYear()\n     *        + '\\n'\n     *        + 'Index Gain: ' + numberFormat(p.value.absGain) + '\\n'\n     *        + 'Index Gain in Percentage: ' + numberFormat(p.value.percentageGain) + '%\\n'\n     *        + 'Fluctuation / Index Ratio: ' + numberFormat(p.value.fluctuationPercentage) + '%';\n     * });\n     * @param {Function} [titleFunction]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.title = function (titleFunction) {\n        if (!arguments.length) {\n            return _title;\n        }\n        _title = titleFunction;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off title rendering, or return the state of the render title flag if no arguments are\n     * given.\n     * @method renderTitle\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [renderTitle=true]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.renderTitle = function (renderTitle) {\n        if (!arguments.length) {\n            return _renderTitle;\n        }\n        _renderTitle = renderTitle;\n        return _chart;\n    };\n\n    /**\n     * A renderlet is similar to an event listener on rendering event. Multiple renderlets can be added\n     * to an individual chart.  Each time a chart is rerendered or redrawn the renderlets are invoked\n     * right after the chart finishes its transitions, giving you a way to modify the SVGElements.\n     * Renderlet functions take the chart instance as the only input parameter and you can\n     * use the dc API or use raw d3 to achieve pretty much any effect.\n     *\n     * Use {@link dc.baseMixin#on on} with a 'renderlet' prefix.\n     * Generates a random key for the renderlet, which makes it hard to remove.\n     * @method renderlet\n     * @memberof dc.baseMixin\n     * @instance\n     * @deprecated\n     * @example\n     * // do this instead of .renderlet(function(chart) { ... })\n     * chart.on(\"renderlet\", function(chart){\n     *     // mix of dc API and d3 manipulation\n     *     chart.select('g.y').style('display', 'none');\n     *     // its a closure so you can also access other chart variable available in the closure scope\n     *     moveChart.filter(chart.filter());\n     * });\n     * @param {Function} renderletFunction\n     * @returns {dc.baseMixin}\n     */\n    _chart.renderlet = dc.logger.deprecate(function (renderletFunction) {\n        _chart.on('renderlet.' + dc.utils.uniqueId(), renderletFunction);\n        return _chart;\n    }, 'chart.renderlet has been deprecated.  Please use chart.on(\"renderlet.<renderletKey>\", renderletFunction)');\n\n    /**\n     * Get or set the chart group to which this chart belongs. Chart groups are rendered or redrawn\n     * together since it is expected they share the same underlying crossfilter data set.\n     * @method chartGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {String} [chartGroup]\n     * @returns {String|dc.baseMixin}\n     */\n    _chart.chartGroup = function (chartGroup) {\n        if (!arguments.length) {\n            return _chartGroup;\n        }\n        if (!_isChild) {\n            dc.deregisterChart(_chart, _chartGroup);\n        }\n        _chartGroup = chartGroup;\n        if (!_isChild) {\n            dc.registerChart(_chart, _chartGroup);\n        }\n        return _chart;\n    };\n\n    /**\n     * Expire the internal chart cache. dc charts cache some data internally on a per chart basis to\n     * speed up rendering and avoid unnecessary calculation; however it might be useful to clear the\n     * cache if you have changed state which will affect rendering.  For example, if you invoke\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}\n     * function or reset group or dimension after rendering, it is a good idea to\n     * clear the cache to make sure charts are rendered properly.\n     * @method expireCache\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.expireCache = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    /**\n     * Attach a dc.legend widget to this chart. The legend widget will automatically draw legend labels\n     * based on the color setting and names associated with each group.\n     * @method legend\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n     * @param {dc.legend} [legend]\n     * @returns {dc.legend|dc.baseMixin}\n     */\n    _chart.legend = function (legend) {\n        if (!arguments.length) {\n            return _legend;\n        }\n        _legend = legend;\n        _legend.parent(_chart);\n        return _chart;\n    };\n\n    /**\n     * Returns the internal numeric ID of the chart.\n     * @method chartID\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {String}\n     */\n    _chart.chartID = function () {\n        return _chart.__dcFlag__;\n    };\n\n    /**\n     * Set chart options using a configuration object. Each key in the object will cause the method of\n     * the same name to be called with the value to set that attribute for the chart.\n     * @method options\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * chart.options({dimension: myDimension, group: myGroup});\n     * @param {{}} opts\n     * @returns {dc.baseMixin}\n     */\n    _chart.options = function (opts) {\n        var applyOptions = [\n            'anchor',\n            'group',\n            'xAxisLabel',\n            'yAxisLabel',\n            'stack',\n            'title',\n            'point',\n            'getColor',\n            'overlayGeoJson'\n        ];\n\n        for (var o in opts) {\n            if (typeof(_chart[o]) === 'function') {\n                if (opts[o] instanceof Array && applyOptions.indexOf(o) !== -1) {\n                    _chart[o].apply(_chart, opts[o]);\n                } else {\n                    _chart[o].call(_chart, opts[o]);\n                }\n            } else {\n                dc.logger.debug('Not a valid option setter name: ' + o);\n            }\n        }\n        return _chart;\n    };\n\n    /**\n     * All dc chart instance supports the following listeners.\n     * Supports the following events:\n     * * `renderlet` - This listener function will be invoked after transitions after redraw and render. Replaces the\n     * deprecated {@link dc.baseMixin#renderlet renderlet} method.\n     * * `pretransition` - Like `.on('renderlet', ...)` but the event is fired before transitions start.\n     * * `preRender` - This listener function will be invoked before chart rendering.\n     * * `postRender` - This listener function will be invoked after chart finish rendering including\n     * all renderlets' logic.\n     * * `preRedraw` - This listener function will be invoked before chart redrawing.\n     * * `postRedraw` - This listener function will be invoked after chart finish redrawing\n     * including all renderlets' logic.\n     * * `filtered` - This listener function will be invoked after a filter is applied, added or removed.\n     * * `zoomed` - This listener function will be invoked after a zoom is triggered.\n     * @method on\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Internals.md#dispatch_on d3.dispatch.on}\n     * @example\n     * .on('renderlet', function(chart, filter){...})\n     * .on('pretransition', function(chart, filter){...})\n     * .on('preRender', function(chart){...})\n     * .on('postRender', function(chart){...})\n     * .on('preRedraw', function(chart){...})\n     * .on('postRedraw', function(chart){...})\n     * .on('filtered', function(chart, filter){...})\n     * .on('zoomed', function(chart, filter){...})\n     * @param {String} event\n     * @param {Function} listener\n     * @returns {dc.baseMixin}\n     */\n    _chart.on = function (event, listener) {\n        _listeners.on(event, listener);\n        return _chart;\n    };\n\n    return _chart;\n};\n\n/**\n * Margin is a mixin that provides margin utility functions for both the Row Chart and Coordinate Grid\n * Charts.\n * @name marginMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.marginMixin}\n */\ndc.marginMixin = function (_chart) {\n    var _margin = {top: 10, right: 50, bottom: 30, left: 30};\n\n    /**\n     * Get or set the margins for a particular coordinate grid chart instance. The margins is stored as\n     * an associative Javascript array.\n     * @method margins\n     * @memberof dc.marginMixin\n     * @instance\n     * @example\n     * var leftMargin = chart.margins().left; // 30 by default\n     * chart.margins().left = 50;\n     * leftMargin = chart.margins().left; // now 50\n     * @param {{top: Number, right: Number, left: Number, bottom: Number}} [margins={top: 10, right: 50, bottom: 30, left: 30}]\n     * @returns {{top: Number, right: Number, left: Number, bottom: Number}|dc.marginMixin}\n     */\n    _chart.margins = function (margins) {\n        if (!arguments.length) {\n            return _margin;\n        }\n        _margin = margins;\n        return _chart;\n    };\n\n    _chart.effectiveWidth = function () {\n        return _chart.width() - _chart.margins().left - _chart.margins().right;\n    };\n\n    _chart.effectiveHeight = function () {\n        return _chart.height() - _chart.margins().top - _chart.margins().bottom;\n    };\n\n    return _chart;\n};\n\n/**\n * The Color Mixin is an abstract chart functional class providing universal coloring support\n * as a mix-in for any concrete chart implementation.\n * @name colorMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.colorMixin}\n */\ndc.colorMixin = function (_chart) {\n    var _colors = d3.scale.category20c();\n    var _defaultAccessor = true;\n\n    var _colorAccessor = function (d) { return _chart.keyAccessor()(d); };\n\n    /**\n     * Retrieve current color scale or set a new color scale. This methods accepts any function that\n     * operates like a d3 scale.\n     * @method colors\n     * @memberof dc.colorMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @example\n     * // alternate categorical scale\n     * chart.colors(d3.scale.category20b());\n     * // ordinal scale\n     * chart.colors(d3.scale.ordinal().range(['red','green','blue']));\n     * // convenience method, the same as above\n     * chart.ordinalColors(['red','green','blue']);\n     * // set a linear scale\n     * chart.linearColors([\"#4575b4\", \"#ffffbf\", \"#a50026\"]);\n     * @param {d3.scale} [colorScale=d3.scale.category20c()]\n     * @returns {d3.scale|dc.colorMixin}\n     */\n    _chart.colors = function (colorScale) {\n        if (!arguments.length) {\n            return _colors;\n        }\n        if (colorScale instanceof Array) {\n            _colors = d3.scale.quantize().range(colorScale); // deprecated legacy support, note: this fails for ordinal domains\n        } else {\n            _colors = d3.functor(colorScale);\n        }\n        return _chart;\n    };\n\n    /**\n     * Convenience method to set the color scale to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal d3.scale.ordinal} with\n     * range `r`.\n     * @method ordinalColors\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<String>} r\n     * @returns {dc.colorMixin}\n     */\n    _chart.ordinalColors = function (r) {\n        return _chart.colors(d3.scale.ordinal().range(r));\n    };\n\n    /**\n     * Convenience method to set the color scale to an Hcl interpolated linear scale with range `r`.\n     * @method linearColors\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<Number>} r\n     * @returns {dc.colorMixin}\n     */\n    _chart.linearColors = function (r) {\n        return _chart.colors(d3.scale.linear()\n                             .range(r)\n                             .interpolate(d3.interpolateHcl));\n    };\n\n    /**\n     * Set or the get color accessor function. This function will be used to map a data point in a\n     * crossfilter group to a color value on the color scale. The default function uses the key\n     * accessor.\n     * @method colorAccessor\n     * @memberof dc.colorMixin\n     * @instance\n     * @example\n     * // default index based color accessor\n     * .colorAccessor(function (d, i){return i;})\n     * // color accessor for a multi-value crossfilter reduction\n     * .colorAccessor(function (d){return d.value.absGain;})\n     * @param {Function} [colorAccessor]\n     * @returns {Function|dc.colorMixin}\n     */\n    _chart.colorAccessor = function (colorAccessor) {\n        if (!arguments.length) {\n            return _colorAccessor;\n        }\n        _colorAccessor = colorAccessor;\n        _defaultAccessor = false;\n        return _chart;\n    };\n\n    // what is this?\n    _chart.defaultColorAccessor = function () {\n        return _defaultAccessor;\n    };\n\n    /**\n     * Set or get the current domain for the color mapping function. The domain must be supplied as an\n     * array.\n     *\n     * Note: previously this method accepted a callback function. Instead you may use a custom scale\n     * set by {@link dc.colorMixin#colors .colors}.\n     * @method colorDomain\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<String>} [domain]\n     * @returns {Array<String>|dc.colorMixin}\n     */\n    _chart.colorDomain = function (domain) {\n        if (!arguments.length) {\n            return _colors.domain();\n        }\n        _colors.domain(domain);\n        return _chart;\n    };\n\n    /**\n     * Set the domain by determining the min and max values as retrieved by\n     * {@link dc.colorMixin#colorAccessor .colorAccessor} over the chart's dataset.\n     * @method calculateColorDomain\n     * @memberof dc.colorMixin\n     * @instance\n     * @returns {dc.colorMixin}\n     */\n    _chart.calculateColorDomain = function () {\n        var newDomain = [d3.min(_chart.data(), _chart.colorAccessor()),\n                         d3.max(_chart.data(), _chart.colorAccessor())];\n        _colors.domain(newDomain);\n        return _chart;\n    };\n\n    /**\n     * Get the color for the datum d and counter i. This is used internally by charts to retrieve a color.\n     * @method getColor\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {*} d\n     * @param {Number} [i]\n     * @returns {String}\n     */\n    _chart.getColor = function (d, i) {\n        return _colors(_colorAccessor.call(this, d, i));\n    };\n\n    /**\n     * **Deprecated.** Get/set the color calculator. This actually replaces the\n     * {@link dc.colorMixin#getColor getColor} method!\n     *\n     * This is not recommended, since using a {@link dc.colorMixin#colorAccessor colorAccessor} and\n     * color scale ({@link dc.colorMixin#colors .colors}) is more powerful and idiomatic d3.\n     * @method colorCalculator\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {*} [colorCalculator]\n     * @returns {Function|dc.colorMixin}\n     */\n    _chart.colorCalculator = dc.logger.deprecate(function (colorCalculator) {\n        if (!arguments.length) {\n            return _chart.getColor;\n        }\n        _chart.getColor = colorCalculator;\n        return _chart;\n    }, 'colorMixin.colorCalculator has been deprecated. Please colorMixin.colors and colorMixin.colorAccessor instead');\n\n    return _chart;\n};\n\n/**\n * Coordinate Grid is an abstract base chart designed to support a number of coordinate grid based\n * concrete chart types, e.g. bar chart, line chart, and bubble chart.\n * @name coordinateGridMixin\n * @memberof dc\n * @mixin\n * @mixes dc.colorMixin\n * @mixes dc.marginMixin\n * @mixes dc.baseMixin\n * @param {Object} _chart\n * @returns {dc.coordinateGridMixin}\n */\ndc.coordinateGridMixin = function (_chart) {\n    var GRID_LINE_CLASS = 'grid-line';\n    var HORIZONTAL_CLASS = 'horizontal';\n    var VERTICAL_CLASS = 'vertical';\n    var Y_AXIS_LABEL_CLASS = 'y-axis-label';\n    var X_AXIS_LABEL_CLASS = 'x-axis-label';\n    var DEFAULT_AXIS_LABEL_PADDING = 12;\n\n    _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin(_chart)));\n\n    _chart.colors(d3.scale.category10());\n    _chart._mandatoryAttributes().push('x');\n    var _parent;\n    var _g;\n    var _chartBodyG;\n\n    var _x;\n    var _xOriginalDomain;\n    var _xAxis = d3.svg.axis().orient('bottom');\n    var _xUnits = dc.units.integers;\n    var _xAxisPadding = 0;\n    var _xAxisPaddingUnit = 'day';\n    var _xElasticity = false;\n    var _xAxisLabel;\n    var _xAxisLabelPadding = 0;\n    var _lastXDomain;\n\n    var _y;\n    var _yAxis = d3.svg.axis().orient('left');\n    var _yAxisPadding = 0;\n    var _yElasticity = false;\n    var _yAxisLabel;\n    var _yAxisLabelPadding = 0;\n\n    var _brush = d3.svg.brush();\n    var _brushOn = true;\n    var _round;\n\n    var _renderHorizontalGridLine = false;\n    var _renderVerticalGridLine = false;\n\n    var _refocused = false, _resizing = false;\n    var _unitCount;\n\n    var _zoomScale = [1, Infinity];\n    var _zoomOutRestrict = true;\n\n    var _zoom = d3.behavior.zoom().on('zoom', zoomHandler);\n    var _nullZoom = d3.behavior.zoom().on('zoom', null);\n    var _hasBeenMouseZoomable = false;\n\n    var _rangeChart;\n    var _focusChart;\n\n    var _mouseZoomable = false;\n    var _clipPadding = 0;\n\n    var _outerRangeBandPadding = 0.5;\n    var _rangeBandPadding = 0;\n\n    var _useRightYAxis = false;\n\n    /**\n     * When changing the domain of the x or y scale, it is necessary to tell the chart to recalculate\n     * and redraw the axes. (`.rescale()` is called automatically when the x or y scale is replaced\n     * with {@link dc.coordinateGridMixin+x .x()} or {@link dc.coordinateGridMixin#y .y()}, and has\n     * no effect on elastic scales.)\n     * @method rescale\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {dc.coordinateGridMixin}\n     */\n    _chart.rescale = function () {\n        _unitCount = undefined;\n        _resizing = true;\n        return _chart;\n    };\n\n    _chart.resizing = function () {\n        return _resizing;\n    };\n\n    /**\n     * Get or set the range selection chart associated with this instance. Setting the range selection\n     * chart using this function will automatically update its selection brush when the current chart\n     * zooms in. In return the given range chart will also automatically attach this chart as its focus\n     * chart hence zoom in when range brush updates.\n     *\n     * Usually the range and focus charts will share a dimension. The range chart will set the zoom\n     * boundaries for the focus chart, so its dimension values must be compatible with the domain of\n     * the focus chart.\n     *\n     * See the [Nasdaq 100 Index](http://dc-js.github.com/dc.js/) example for this effect in action.\n     * @method rangeChart\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {dc.coordinateGridMixin} [rangeChart]\n     * @returns {dc.coordinateGridMixin}\n     */\n    _chart.rangeChart = function (rangeChart) {\n        if (!arguments.length) {\n            return _rangeChart;\n        }\n        _rangeChart = rangeChart;\n        _rangeChart.focusChart(_chart);\n        return _chart;\n    };\n\n    /**\n     * Get or set the scale extent for mouse zooms.\n     * @method zoomScale\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Array<Number|Date>} [extent=[1, Infinity]]\n     * @returns {Array<Number|Date>|dc.coordinateGridMixin}\n     */\n    _chart.zoomScale = function (extent) {\n        if (!arguments.length) {\n            return _zoomScale;\n        }\n        _zoomScale = extent;\n        return _chart;\n    };\n\n    /**\n     * Get or set the zoom restriction for the chart. If true limits the zoom to origional domain of the chart.\n     * @method zoomOutRestrict\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [zoomOutRestrict=true]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.zoomOutRestrict = function (zoomOutRestrict) {\n        if (!arguments.length) {\n            return _zoomOutRestrict;\n        }\n        _zoomScale[0] = zoomOutRestrict ? 1 : 0;\n        _zoomOutRestrict = zoomOutRestrict;\n        return _chart;\n    };\n\n    _chart._generateG = function (parent) {\n        if (parent === undefined) {\n            _parent = _chart.svg();\n        } else {\n            _parent = parent;\n        }\n\n        var href = window.location.href.split('#')[0];\n\n        _g = _parent.append('g');\n\n        _chartBodyG = _g.append('g').attr('class', 'chart-body')\n            .attr('transform', 'translate(' + _chart.margins().left + ', ' + _chart.margins().top + ')')\n            .attr('clip-path', 'url(' + href + '#' + getClipPathId() + ')');\n\n        return _g;\n    };\n\n    /**\n     * Get or set the root g element. This method is usually used to retrieve the g element in order to\n     * overlay custom svg drawing programatically. **Caution**: The root g element is usually generated\n     * by dc.js internals, and resetting it might produce unpredictable result.\n     * @method g\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {SVGElement} [gElement]\n     * @returns {SVGElement|dc.coordinateGridMixin}\n     */\n    _chart.g = function (gElement) {\n        if (!arguments.length) {\n            return _g;\n        }\n        _g = gElement;\n        return _chart;\n    };\n\n    /**\n     * Set or get mouse zoom capability flag (default: false). When turned on the chart will be\n     * zoomable using the mouse wheel. If the range selector chart is attached zooming will also update\n     * the range selection brush on the associated range selector chart.\n     * @method mouseZoomable\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [mouseZoomable=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.mouseZoomable = function (mouseZoomable) {\n        if (!arguments.length) {\n            return _mouseZoomable;\n        }\n        _mouseZoomable = mouseZoomable;\n        return _chart;\n    };\n\n    /**\n     * Retrieve the svg group for the chart body.\n     * @method chartBodyG\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {SVGElement} [chartBodyG]\n     * @returns {SVGElement}\n     */\n    _chart.chartBodyG = function (chartBodyG) {\n        if (!arguments.length) {\n            return _chartBodyG;\n        }\n        _chartBodyG = chartBodyG;\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Get or set the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale} or\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md ordinal scale}.\n     * @method x\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @example\n     * // set x to a linear scale\n     * chart.x(d3.scale.linear().domain([-2500, 2500]))\n     * // set x to a time scale to generate histogram\n     * chart.x(d3.time.scale().domain([new Date(1985, 0, 1), new Date(2012, 11, 31)]))\n     * @param {d3.scale} [xScale]\n     * @returns {d3.scale|dc.coordinateGridMixin}\n     */\n    _chart.x = function (xScale) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = xScale;\n        _xOriginalDomain = _x.domain();\n        _chart.rescale();\n        return _chart;\n    };\n\n    _chart.xOriginalDomain = function () {\n        return _xOriginalDomain;\n    };\n\n    /**\n     * Set or get the xUnits function. The coordinate grid chart uses the xUnits function to calculate\n     * the number of data projections on x axis such as the number of bars for a bar chart or the\n     * number of dots for a line chart. This function is expected to return a Javascript array of all\n     * data points on x axis, or the number of points on the axis. [d3 time range functions\n     * d3.time.days, d3.time.months, and\n     * d3.time.years](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#aliases) are all valid xUnits\n     * function. dc.js also provides a few units function, see the {@link dc.units Units Namespace} for\n     * a list of built-in units functions.\n     * @method xUnits\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @todo Add docs for utilities\n     * @example\n     * // set x units to count days\n     * chart.xUnits(d3.time.days);\n     * // set x units to count months\n     * chart.xUnits(d3.time.months);\n     *\n     * // A custom xUnits function can be used as long as it follows the following interface:\n     * // units in integer\n     * function(start, end, xDomain) {\n     *      // simply calculates how many integers in the domain\n     *      return Math.abs(end - start);\n     * };\n     *\n     * // fixed units\n     * function(start, end, xDomain) {\n     *      // be aware using fixed units will disable the focus/zoom ability on the chart\n     *      return 1000;\n     * @param {Function} [xUnits=dc.units.integers]\n     * @returns {Function|dc.coordinateGridMixin}\n     */\n    _chart.xUnits = function (xUnits) {\n        if (!arguments.length) {\n            return _xUnits;\n        }\n        _xUnits = xUnits;\n        return _chart;\n    };\n\n    /**\n     * Set or get the x axis used by a particular coordinate grid chart instance. This function is most\n     * useful when x axis customization is required. The x axis in dc.js is an instance of a\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object};\n     * therefore it supports any valid d3 axis manipulation.\n     *\n     * **Caution**: The x axis is usually generated internally by dc; resetting it may cause\n     * unexpected results. Note also that when used as a getter, this function is not chainable:\n     * it returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n     * so attempting to call chart functions after calling `.xAxis()` will fail}.\n     * @method xAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function(v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [xAxis=d3.svg.axis().orient('bottom')]\n     * @returns {d3.svg.axis|dc.coordinateGridMixin}\n     */\n    _chart.xAxis = function (xAxis) {\n        if (!arguments.length) {\n            return _xAxis;\n        }\n        _xAxis = xAxis;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off elastic x axis behavior. If x axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the x axis range whenever a redraw event is triggered.\n     * @method elasticX\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [elasticX=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n            return _xElasticity;\n        }\n        _xElasticity = elasticX;\n        return _chart;\n    };\n\n    /**\n     * Set or get x axis padding for the elastic x axis. The padding will be added to both end of the x\n     * axis if elasticX is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date x axes.  When padding a date axis, an integer represents number of units being padded\n     * and a percentage string will be treated the same as an integer. The unit will be determined by the\n     * xAxisPaddingUnit variable.\n     * @method xAxisPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number|String} [padding=0]\n     * @returns {Number|String|dc.coordinateGridMixin}\n     */\n    _chart.xAxisPadding = function (padding) {\n        if (!arguments.length) {\n            return _xAxisPadding;\n        }\n        _xAxisPadding = padding;\n        return _chart;\n    };\n\n    /**\n     * Set or get x axis padding unit for the elastic x axis. The padding unit will determine which unit to\n     * use when applying xAxis padding if elasticX is turned on and if x-axis uses a time dimension;\n     * otherwise it is ignored.\n     *\n     * Padding unit is a string that will be used when the padding is calculated. Available parameters are\n     * the available d3 time intervals; see\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval d3.time.interval}.\n     * @method xAxisPaddingUnit\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [unit='days']\n     * @returns {String|dc.coordinateGridMixin}\n     */\n    _chart.xAxisPaddingUnit = function (unit) {\n        if (!arguments.length) {\n            return _xAxisPaddingUnit;\n        }\n        _xAxisPaddingUnit = unit;\n        return _chart;\n    };\n\n    /**\n     * Returns the number of units displayed on the x axis using the unit measure configured by\n     * {@link dc.coordinateGridMixin#xUnits xUnits}.\n     * @method xUnitCount\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {Number}\n     */\n    _chart.xUnitCount = function () {\n        if (_unitCount === undefined) {\n            var units = _chart.xUnits()(_chart.x().domain()[0], _chart.x().domain()[1], _chart.x().domain());\n\n            if (units instanceof Array) {\n                _unitCount = units.length;\n            } else {\n                _unitCount = units;\n            }\n        }\n\n        return _unitCount;\n    };\n\n    /**\n     * Gets or sets whether the chart should be drawn with a right axis instead of a left axis. When\n     * used with a chart in a composite chart, allows both left and right Y axes to be shown on a\n     * chart.\n     * @method useRightYAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [useRightYAxis=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.useRightYAxis = function (useRightYAxis) {\n        if (!arguments.length) {\n            return _useRightYAxis;\n        }\n        _useRightYAxis = useRightYAxis;\n        return _chart;\n    };\n\n    /**\n     * Returns true if the chart is using ordinal xUnits ({@link dc.units.ordinal dc.units.ordinal}, or false\n     * otherwise. Most charts behave differently with ordinal data and use the result of this method to\n     * trigger the appropriate logic.\n     * @method isOrdinal\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {Boolean}\n     */\n    _chart.isOrdinal = function () {\n        return _chart.xUnits() === dc.units.ordinal;\n    };\n\n    _chart._useOuterPadding = function () {\n        return true;\n    };\n\n    _chart._ordinalXDomain = function () {\n        var groups = _chart._computeOrderedGroups(_chart.data());\n        return groups.map(_chart.keyAccessor());\n    };\n\n    function compareDomains (d1, d2) {\n        return !d1 || !d2 || d1.length !== d2.length ||\n            d1.some(function (elem, i) { return (elem && d2[i]) ? elem.toString() !== d2[i].toString() : elem === d2[i]; });\n    }\n\n    function prepareXAxis (g, render) {\n        if (!_chart.isOrdinal()) {\n            if (_chart.elasticX()) {\n                _x.domain([_chart.xAxisMin(), _chart.xAxisMax()]);\n            }\n        } else { // _chart.isOrdinal()\n            if (_chart.elasticX() || _x.domain().length === 0) {\n                _x.domain(_chart._ordinalXDomain());\n            }\n        }\n\n        // has the domain changed?\n        var xdom = _x.domain();\n        if (render || compareDomains(_lastXDomain, xdom)) {\n            _chart.rescale();\n        }\n        _lastXDomain = xdom;\n\n        // please can't we always use rangeBands for bar charts?\n        if (_chart.isOrdinal()) {\n            _x.rangeBands([0, _chart.xAxisLength()], _rangeBandPadding,\n                          _chart._useOuterPadding() ? _outerRangeBandPadding : 0);\n        } else {\n            _x.range([0, _chart.xAxisLength()]);\n        }\n\n        _xAxis = _xAxis.scale(_chart.x());\n\n        renderVerticalGridLines(g);\n    }\n\n    _chart.renderXAxis = function (g) {\n        var axisXG = g.select('g.x');\n\n        if (axisXG.empty()) {\n            axisXG = g.append('g')\n                .attr('class', 'axis x')\n                .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')');\n        }\n\n        var axisXLab = g.select('text.' + X_AXIS_LABEL_CLASS);\n        if (axisXLab.empty() && _chart.xAxisLabel()) {\n            axisXLab = g.append('text')\n                .attr('class', X_AXIS_LABEL_CLASS)\n                .attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' +\n                      (_chart.height() - _xAxisLabelPadding) + ')')\n                .attr('text-anchor', 'middle');\n        }\n        if (_chart.xAxisLabel() && axisXLab.text() !== _chart.xAxisLabel()) {\n            axisXLab.text(_chart.xAxisLabel());\n        }\n\n        dc.transition(axisXG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')')\n            .call(_xAxis);\n        dc.transition(axisXLab, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' +\n                  (_chart.height() - _xAxisLabelPadding) + ')');\n    };\n\n    function renderVerticalGridLines (g) {\n        var gridLineG = g.select('g.' + VERTICAL_CLASS);\n\n        if (_renderVerticalGridLine) {\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child')\n                    .attr('class', GRID_LINE_CLASS + ' ' + VERTICAL_CLASS)\n                    .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n            }\n\n            var ticks = _xAxis.tickValues() ? _xAxis.tickValues() :\n                    (typeof _x.ticks === 'function' ? _x.ticks(_xAxis.ticks()[0]) : _x.domain());\n\n            var lines = gridLineG.selectAll('line')\n                .data(ticks);\n\n            // enter\n            var linesGEnter = lines.enter()\n                .append('line')\n                .attr('x1', function (d) {\n                    return _x(d);\n                })\n                .attr('y1', _chart._xAxisY() - _chart.margins().top)\n                .attr('x2', function (d) {\n                    return _x(d);\n                })\n                .attr('y2', 0)\n                .attr('opacity', 0);\n            dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', 1);\n\n            // update\n            dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('x1', function (d) {\n                    return _x(d);\n                })\n                .attr('y1', _chart._xAxisY() - _chart.margins().top)\n                .attr('x2', function (d) {\n                    return _x(d);\n                })\n                .attr('y2', 0);\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    }\n\n    _chart._xAxisY = function () {\n        return (_chart.height() - _chart.margins().bottom);\n    };\n\n    _chart.xAxisLength = function () {\n        return _chart.effectiveWidth();\n    };\n\n    /**\n     * Set or get the x axis label. If setting the label, you may optionally include additional padding to\n     * the margin to make room for the label. By default the padded is set to 12 to accomodate the text height.\n     * @method xAxisLabel\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String}\n     */\n    _chart.xAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n            return _xAxisLabel;\n        }\n        _xAxisLabel = labelText;\n        _chart.margins().bottom -= _xAxisLabelPadding;\n        _xAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().bottom += _xAxisLabelPadding;\n        return _chart;\n    };\n\n    _chart._prepareYAxis = function (g) {\n        if (_y === undefined || _chart.elasticY()) {\n            if (_y === undefined) {\n                _y = d3.scale.linear();\n            }\n            var min = _chart.yAxisMin() || 0,\n                max = _chart.yAxisMax() || 0;\n            _y.domain([min, max]).rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _y.range([_chart.yAxisHeight(), 0]);\n        _yAxis = _yAxis.scale(_y);\n\n        if (_useRightYAxis) {\n            _yAxis.orient('right');\n        }\n\n        _chart._renderHorizontalGridLinesForAxis(g, _y, _yAxis);\n    };\n\n    _chart.renderYAxisLabel = function (axisClass, text, rotation, labelXPosition) {\n        labelXPosition = labelXPosition || _yAxisLabelPadding;\n\n        var axisYLab = _chart.g().select('text.' + Y_AXIS_LABEL_CLASS + '.' + axisClass + '-label');\n        var labelYPosition = (_chart.margins().top + _chart.yAxisHeight() / 2);\n        if (axisYLab.empty() && text) {\n            axisYLab = _chart.g().append('text')\n                .attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')')\n                .attr('class', Y_AXIS_LABEL_CLASS + ' ' + axisClass + '-label')\n                .attr('text-anchor', 'middle')\n                .text(text);\n        }\n        if (text && axisYLab.text() !== text) {\n            axisYLab.text(text);\n        }\n        dc.transition(axisYLab, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')');\n    };\n\n    _chart.renderYAxisAt = function (axisClass, axis, position) {\n        var axisYG = _chart.g().select('g.' + axisClass);\n        if (axisYG.empty()) {\n            axisYG = _chart.g().append('g')\n                .attr('class', 'axis ' + axisClass)\n                .attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')');\n        }\n\n        dc.transition(axisYG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')')\n            .call(axis);\n    };\n\n    _chart.renderYAxis = function () {\n        var axisPosition = _useRightYAxis ? (_chart.width() - _chart.margins().right) : _chart._yAxisX();\n        _chart.renderYAxisAt('y', _yAxis, axisPosition);\n        var labelPosition = _useRightYAxis ? (_chart.width() - _yAxisLabelPadding) : _yAxisLabelPadding;\n        var rotation = _useRightYAxis ? 90 : -90;\n        _chart.renderYAxisLabel('y', _chart.yAxisLabel(), rotation, labelPosition);\n    };\n\n    _chart._renderHorizontalGridLinesForAxis = function (g, scale, axis) {\n        var gridLineG = g.select('g.' + HORIZONTAL_CLASS);\n\n        if (_renderHorizontalGridLine) {\n            var ticks = axis.tickValues() ? axis.tickValues() : scale.ticks(axis.ticks()[0]);\n\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child')\n                    .attr('class', GRID_LINE_CLASS + ' ' + HORIZONTAL_CLASS)\n                    .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n            }\n\n            var lines = gridLineG.selectAll('line')\n                .data(ticks);\n\n            // enter\n            var linesGEnter = lines.enter()\n                .append('line')\n                .attr('x1', 1)\n                .attr('y1', function (d) {\n                    return scale(d);\n                })\n                .attr('x2', _chart.xAxisLength())\n                .attr('y2', function (d) {\n                    return scale(d);\n                })\n                .attr('opacity', 0);\n            dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', 1);\n\n            // update\n            dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('x1', 1)\n                .attr('y1', function (d) {\n                    return scale(d);\n                })\n                .attr('x2', _chart.xAxisLength())\n                .attr('y2', function (d) {\n                    return scale(d);\n                });\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    };\n\n    _chart._yAxisX = function () {\n        return _chart.useRightYAxis() ? _chart.width() - _chart.margins().right : _chart.margins().left;\n    };\n\n    /**\n     * Set or get the y axis label. If setting the label, you may optionally include additional padding\n     * to the margin to make room for the label. By default the padding is set to 12 to accommodate the\n     * text height.\n     * @method yAxisLabel\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String|dc.coordinateGridMixin}\n     */\n    _chart.yAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n            return _yAxisLabel;\n        }\n        _yAxisLabel = labelText;\n        _chart.margins().left -= _yAxisLabelPadding;\n        _yAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().left += _yAxisLabelPadding;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y scale. The y scale is typically automatically determined by the chart implementation.\n     * @method y\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|dc.coordinateGridMixin}\n     */\n    _chart.y = function (yScale) {\n        if (!arguments.length) {\n            return _y;\n        }\n        _y = yScale;\n        _chart.rescale();\n        return _chart;\n    };\n\n    /**\n     * Set or get the y axis used by the coordinate grid chart instance. This function is most useful\n     * when y axis customization is required. The y axis in dc.js is simply an instance of a [d3 axis\n     * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis); therefore it supports any\n     * valid d3 axis manipulation.\n     *\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.  Note also that when used as a getter, this function is not chainable: it\n     * returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n     * so attempting to call chart functions after calling `.yAxis()` will fail}.\n     * @method yAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize y axis tick format\n     * chart.yAxis().tickFormat(function(v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.yAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [yAxis=d3.svg.axis().orient('left')]\n     * @returns {d3.svg.axis|dc.coordinateGridMixin}\n     */\n    _chart.yAxis = function (yAxis) {\n        if (!arguments.length) {\n            return _yAxis;\n        }\n        _yAxis = yAxis;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off elastic y axis behavior. If y axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the y axis range whenever a redraw event is triggered.\n     * @method elasticY\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [elasticY=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.elasticY = function (elasticY) {\n        if (!arguments.length) {\n            return _yElasticity;\n        }\n        _yElasticity = elasticY;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off horizontal grid lines.\n     * @method renderHorizontalGridLines\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [renderHorizontalGridLines=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.renderHorizontalGridLines = function (renderHorizontalGridLines) {\n        if (!arguments.length) {\n            return _renderHorizontalGridLine;\n        }\n        _renderHorizontalGridLine = renderHorizontalGridLines;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off vertical grid lines.\n     * @method renderVerticalGridLines\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [renderVerticalGridLines=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.renderVerticalGridLines = function (renderVerticalGridLines) {\n        if (!arguments.length) {\n            return _renderVerticalGridLine;\n        }\n        _renderVerticalGridLine = renderVerticalGridLines;\n        return _chart;\n    };\n\n    /**\n     * Calculates the minimum x value to display in the chart. Includes xAxisPadding if set.\n     * @method xAxisMin\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.xAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.keyAccessor()(e);\n        });\n        return dc.utils.subtract(min, _xAxisPadding, _xAxisPaddingUnit);\n    };\n\n    /**\n     * Calculates the maximum x value to display in the chart. Includes xAxisPadding if set.\n     * @method xAxisMax\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.xAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.keyAccessor()(e);\n        });\n        return dc.utils.add(max, _xAxisPadding, _xAxisPaddingUnit);\n    };\n\n    /**\n     * Calculates the minimum y value to display in the chart. Includes yAxisPadding if set.\n     * @method yAxisMin\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.yAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.valueAccessor()(e);\n        });\n        return dc.utils.subtract(min, _yAxisPadding);\n    };\n\n    /**\n     * Calculates the maximum y value to display in the chart. Includes yAxisPadding if set.\n     * @method yAxisMax\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.yAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.valueAccessor()(e);\n        });\n        return dc.utils.add(max, _yAxisPadding);\n    };\n\n    /**\n     * Set or get y axis padding for the elastic y axis. The padding will be added to the top and\n     * bottom of the y axis if elasticY is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date axes. When padding a date axis, an integer represents number of days being padded\n     * and a percentage string will be treated the same as an integer.\n     * @method yAxisPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number|String} [padding=0]\n     * @returns {Number|dc.coordinateGridMixin}\n     */\n    _chart.yAxisPadding = function (padding) {\n        if (!arguments.length) {\n            return _yAxisPadding;\n        }\n        _yAxisPadding = padding;\n        return _chart;\n    };\n\n    _chart.yAxisHeight = function () {\n        return _chart.effectiveHeight();\n    };\n\n    /**\n     * Set or get the rounding function used to quantize the selection when brushing is enabled.\n     * @method round\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @example\n     * // set x unit round to by month, this will make sure range selection brush will\n     * // select whole months\n     * chart.round(d3.time.month.round);\n     * @param {Function} [round]\n     * @returns {Function|dc.coordinateGridMixin}\n     */\n    _chart.round = function (round) {\n        if (!arguments.length) {\n            return _round;\n        }\n        _round = round;\n        return _chart;\n    };\n\n    _chart._rangeBandPadding = function (_) {\n        if (!arguments.length) {\n            return _rangeBandPadding;\n        }\n        _rangeBandPadding = _;\n        return _chart;\n    };\n\n    _chart._outerRangeBandPadding = function (_) {\n        if (!arguments.length) {\n            return _outerRangeBandPadding;\n        }\n        _outerRangeBandPadding = _;\n        return _chart;\n    };\n\n    dc.override(_chart, 'filter', function (_) {\n        if (!arguments.length) {\n            return _chart._filter();\n        }\n\n        _chart._filter(_);\n\n        if (_) {\n            _chart.brush().extent(_);\n        } else {\n            _chart.brush().clear();\n        }\n\n        return _chart;\n    });\n\n    _chart.brush = function (_) {\n        if (!arguments.length) {\n            return _brush;\n        }\n        _brush = _;\n        return _chart;\n    };\n\n    function brushHeight () {\n        return _chart._xAxisY() - _chart.margins().top;\n    }\n\n    _chart.renderBrush = function (g) {\n        if (_brushOn) {\n            _brush.on('brush', _chart._brushing);\n            _brush.on('brushstart', _chart._disableMouseZoom);\n            _brush.on('brushend', configureMouseZoom);\n\n            var gBrush = g.append('g')\n                .attr('class', 'brush')\n                .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')')\n                .call(_brush.x(_chart.x()));\n            _chart.setBrushY(gBrush, false);\n            _chart.setHandlePaths(gBrush);\n\n            if (_chart.hasFilter()) {\n                _chart.redrawBrush(g, false);\n            }\n        }\n    };\n\n    _chart.setHandlePaths = function (gBrush) {\n        gBrush.selectAll('.resize').append('path').attr('d', _chart.resizeHandlePath);\n    };\n\n    _chart.setBrushY = function (gBrush) {\n        gBrush.selectAll('rect')\n            .attr('height', brushHeight());\n        gBrush.selectAll('.resize path')\n            .attr('d', _chart.resizeHandlePath);\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _brush.extent();\n        if (_chart.round()) {\n            extent[0] = extent.map(_chart.round())[0];\n            extent[1] = extent.map(_chart.round())[1];\n\n            _g.select('.brush')\n                .call(_brush.extent(extent));\n        }\n        return extent;\n    };\n\n    _chart.brushIsEmpty = function (extent) {\n        return _brush.empty() || !extent || extent[1] <= extent[0];\n    };\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n\n        _chart.redrawBrush(_g, false);\n\n        if (_chart.brushIsEmpty(extent)) {\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n        } else {\n            var rangedFilter = dc.filters.RangedFilter(extent[0], extent[1]);\n\n            dc.events.trigger(function () {\n                _chart.replaceFilter(rangedFilter);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n        }\n    };\n\n    _chart.redrawBrush = function (g, doTransition) {\n        if (_brushOn) {\n            if (_chart.filter() && _chart.brush().empty()) {\n                _chart.brush().extent(_chart.filter());\n            }\n\n            var gBrush = dc.optionalTransition(doTransition, _chart.transitionDuration(), _chart.transitionDelay())(g.select('g.brush'));\n            _chart.setBrushY(gBrush);\n            gBrush.call(_chart.brush()\n                      .x(_chart.x())\n                      .extent(_chart.brush().extent()));\n        }\n\n        _chart.fadeDeselectedArea();\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        // do nothing, sub-chart should override this function\n    };\n\n    // borrowed from Crossfilter example\n    _chart.resizeHandlePath = function (d) {\n        var e = +(d === 'e'), x = e ? 1 : -1, y = brushHeight() / 3;\n        return 'M' + (0.5 * x) + ',' + y +\n            'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6) +\n            'V' + (2 * y - 6) +\n            'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y) +\n            'Z' +\n            'M' + (2.5 * x) + ',' + (y + 8) +\n            'V' + (2 * y - 8) +\n            'M' + (4.5 * x) + ',' + (y + 8) +\n            'V' + (2 * y - 8);\n    };\n\n    function getClipPathId () {\n        return _chart.anchorName().replace(/[ .#=\\[\\]\"]/g, '-') + '-clip';\n    }\n\n    /**\n     * Get or set the padding in pixels for the clip path. Once set padding will be applied evenly to\n     * the top, left, right, and bottom when the clip path is generated. If set to zero, the clip area\n     * will be exactly the chart body area minus the margins.\n     * @method clipPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number} [padding=5]\n     * @returns {Number|dc.coordinateGridMixin}\n     */\n    _chart.clipPadding = function (padding) {\n        if (!arguments.length) {\n            return _clipPadding;\n        }\n        _clipPadding = padding;\n        return _chart;\n    };\n\n    function generateClipPath () {\n        var defs = dc.utils.appendOrSelect(_parent, 'defs');\n        // cannot select <clippath> elements; bug in WebKit, must select by id\n        // https://groups.google.com/forum/#!topic/d3-js/6EpAzQ2gU9I\n        var id = getClipPathId();\n        var chartBodyClip = dc.utils.appendOrSelect(defs, '#' + id, 'clipPath').attr('id', id);\n\n        var padding = _clipPadding * 2;\n\n        dc.utils.appendOrSelect(chartBodyClip, 'rect')\n            .attr('width', _chart.xAxisLength() + padding)\n            .attr('height', _chart.yAxisHeight() + padding)\n            .attr('transform', 'translate(-' + _clipPadding + ', -' + _clipPadding + ')');\n    }\n\n    _chart._preprocessData = function () {};\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chart._preprocessData();\n\n        _chart._generateG();\n        generateClipPath();\n\n        drawChart(true);\n\n        configureMouseZoom();\n\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        _chart._preprocessData();\n\n        drawChart(false);\n        generateClipPath();\n\n        return _chart;\n    };\n\n    function drawChart (render) {\n        if (_chart.isOrdinal()) {\n            _brushOn = false;\n        }\n\n        prepareXAxis(_chart.g(), render);\n        _chart._prepareYAxis(_chart.g());\n\n        _chart.plotData();\n\n        if (_chart.elasticX() || _resizing || render) {\n            _chart.renderXAxis(_chart.g());\n        }\n\n        if (_chart.elasticY() || _resizing || render) {\n            _chart.renderYAxis(_chart.g());\n        }\n\n        if (render) {\n            _chart.renderBrush(_chart.g(), false);\n        } else {\n            _chart.redrawBrush(_chart.g(), _resizing);\n        }\n        _chart.fadeDeselectedArea();\n        _resizing = false;\n    }\n\n    function configureMouseZoom () {\n        if (_mouseZoomable) {\n            _chart._enableMouseZoom();\n        } else if (_hasBeenMouseZoomable) {\n            _chart._disableMouseZoom();\n        }\n    }\n\n    _chart._enableMouseZoom = function () {\n        _hasBeenMouseZoomable = true;\n        _zoom.x(_chart.x())\n            .scaleExtent(_zoomScale)\n            .size([_chart.width(), _chart.height()])\n            .duration(_chart.transitionDuration());\n        _chart.root().call(_zoom);\n    };\n\n    _chart._disableMouseZoom = function () {\n        _chart.root().call(_nullZoom);\n    };\n\n    function zoomHandler () {\n        _refocused = true;\n        if (_zoomOutRestrict) {\n            var constraint = _xOriginalDomain;\n            if (_rangeChart) {\n                constraint = intersectExtents(constraint, _rangeChart.x().domain());\n            }\n            var constrained = constrainExtent(_chart.x().domain(), constraint);\n            if (constrained) {\n                _chart.x().domain(constrained);\n            }\n        }\n\n        var domain = _chart.x().domain();\n        var domFilter = dc.filters.RangedFilter(domain[0], domain[1]);\n\n        _chart.replaceFilter(domFilter);\n        _chart.rescale();\n        _chart.redraw();\n\n        if (_rangeChart && !rangesEqual(_chart.filter(), _rangeChart.filter())) {\n            dc.events.trigger(function () {\n                _rangeChart.replaceFilter(domFilter);\n                _rangeChart.redraw();\n            });\n        }\n\n        _chart._invokeZoomedListener();\n\n        dc.events.trigger(function () {\n            _chart.redrawGroup();\n        }, dc.constants.EVENT_DELAY);\n\n        _refocused = !rangesEqual(domain, _xOriginalDomain);\n    }\n\n    function intersectExtents (ext1, ext2) {\n        if (ext1[0] > ext2[1] || ext1[1] < ext2[0]) {\n            console.warn('could not intersect extents');\n        }\n        return [Math.max(ext1[0], ext2[0]), Math.min(ext1[1], ext2[1])];\n    }\n\n    function constrainExtent (extent, constraint) {\n        var size = extent[1] - extent[0];\n        if (extent[0] < constraint[0]) {\n            return [constraint[0], Math.min(constraint[1], dc.utils.add(constraint[0], size, 'millis'))];\n        } else if (extent[1] > constraint[1]) {\n            return [Math.max(constraint[0], dc.utils.subtract(constraint[1], size, 'millis')), constraint[1]];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Zoom this chart to focus on the given range. The given range should be an array containing only\n     * 2 elements (`[start, end]`) defining a range in the x domain. If the range is not given or set\n     * to null, then the zoom will be reset. _For focus to work elasticX has to be turned off;\n     * otherwise focus will be ignored.\n     * @method focus\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @example\n     * chart.on('renderlet', function(chart) {\n     *     // smooth the rendering through event throttling\n     *     dc.events.trigger(function(){\n     *          // focus some other chart to the range selected by user on this chart\n     *          someOtherChart.focus(chart.filter());\n     *     });\n     * })\n     * @param {Array<Number>} [range]\n     */\n    _chart.focus = function (range) {\n        if (hasRangeSelected(range)) {\n            _chart.x().domain(range);\n        } else {\n            _chart.x().domain(_xOriginalDomain);\n        }\n\n        _zoom.x(_chart.x());\n        zoomHandler();\n    };\n\n    _chart.refocused = function () {\n        return _refocused;\n    };\n\n    _chart.focusChart = function (c) {\n        if (!arguments.length) {\n            return _focusChart;\n        }\n        _focusChart = c;\n        _chart.on('filtered', function (chart) {\n            if (!chart.filter()) {\n                dc.events.trigger(function () {\n                    _focusChart.x().domain(_focusChart.xOriginalDomain());\n                });\n            } else if (!rangesEqual(chart.filter(), _focusChart.filter())) {\n                dc.events.trigger(function () {\n                    _focusChart.focus(chart.filter());\n                });\n            }\n        });\n        return _chart;\n    };\n\n    function rangesEqual (range1, range2) {\n        if (!range1 && !range2) {\n            return true;\n        } else if (!range1 || !range2) {\n            return false;\n        } else if (range1.length === 0 && range2.length === 0) {\n            return true;\n        } else if (range1[0].valueOf() === range2[0].valueOf() &&\n            range1[1].valueOf() === range2[1].valueOf()) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Turn on/off the brush-based range filter. When brushing is on then user can drag the mouse\n     * across a chart with a quantitative scale to perform range filtering based on the extent of the\n     * brush, or click on the bars of an ordinal bar chart or slices of a pie chart to filter and\n     * un-filter them. However turning on the brush filter will disable other interactive elements on\n     * the chart such as highlighting, tool tips, and reference lines. Zooming will still be possible\n     * if enabled, but only via scrolling (panning will be disabled.)\n     * @method brushOn\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [brushOn=true]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.brushOn = function (brushOn) {\n        if (!arguments.length) {\n            return _brushOn;\n        }\n        _brushOn = brushOn;\n        return _chart;\n    };\n\n    function hasRangeSelected (range) {\n        return range instanceof Array && range.length > 1;\n    }\n\n    return _chart;\n};\n\n/**\n * Stack Mixin is an mixin that provides cross-chart support of stackability using d3.layout.stack.\n * @name stackMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.stackMixin}\n */\ndc.stackMixin = function (_chart) {\n\n    function prepareValues (layer, layerIdx) {\n        var valAccessor = layer.accessor || _chart.valueAccessor();\n        layer.name = String(layer.name || layerIdx);\n        layer.values = layer.group.all().map(function (d, i) {\n            return {\n                x: _chart.keyAccessor()(d, i),\n                y: layer.hidden ? null : valAccessor(d, i),\n                data: d,\n                layer: layer.name,\n                hidden: layer.hidden\n            };\n        });\n\n        layer.values = layer.values.filter(domainFilter());\n        return layer.values;\n    }\n\n    var _stackLayout = d3.layout.stack()\n        .values(prepareValues);\n\n    var _stack = [];\n    var _titles = {};\n\n    var _hidableStacks = false;\n    var _evadeDomainFilter = false;\n\n    function domainFilter () {\n        if (!_chart.x() || _evadeDomainFilter) {\n            return d3.functor(true);\n        }\n        var xDomain = _chart.x().domain();\n        if (_chart.isOrdinal()) {\n            // TODO #416\n            //var domainSet = d3.set(xDomain);\n            return function () {\n                return true; //domainSet.has(p.x);\n            };\n        }\n        if (_chart.elasticX()) {\n            return function () { return true; };\n        }\n        return function (p) {\n            //return true;\n            return p.x >= xDomain[0] && p.x <= xDomain[xDomain.length - 1];\n        };\n    }\n\n    /**\n     * Stack a new crossfilter group onto this chart with an optional custom value accessor. All stacks\n     * in the same chart will share the same key accessor and therefore the same set of keys.\n     *\n     * For example, in a stacked bar chart, the bars of each stack will be positioned using the same set\n     * of keys on the x axis, while stacked vertically. If name is specified then it will be used to\n     * generate the legend label.\n     * @method stack\n     * @memberof dc.stackMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * // stack group using default accessor\n     * chart.stack(valueSumGroup)\n     * // stack group using custom accessor\n     * .stack(avgByDayGroup, function(d){return d.value.avgByDay;});\n     * @param {crossfilter.group} group\n     * @param {String} [name]\n     * @param {Function} [accessor]\n     * @returns {Array<{group: crossfilter.group, name: String, accessor: Function}>|dc.stackMixin}\n     */\n    _chart.stack = function (group, name, accessor) {\n        if (!arguments.length) {\n            return _stack;\n        }\n\n        if (arguments.length <= 2) {\n            accessor = name;\n        }\n\n        var layer = {group: group};\n        if (typeof name === 'string') {\n            layer.name = name;\n        }\n        if (typeof accessor === 'function') {\n            layer.accessor = accessor;\n        }\n        _stack.push(layer);\n\n        return _chart;\n    };\n\n    dc.override(_chart, 'group', function (g, n, f) {\n        if (!arguments.length) {\n            return _chart._group();\n        }\n        _stack = [];\n        _titles = {};\n        _chart.stack(g, n);\n        if (f) {\n            _chart.valueAccessor(f);\n        }\n        return _chart._group(g, n);\n    });\n\n    /**\n     * Allow named stacks to be hidden or shown by clicking on legend items.\n     * This does not affect the behavior of hideStack or showStack.\n     * @method hidableStacks\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {Boolean} [hidableStacks=false]\n     * @returns {Boolean|dc.stackMixin}\n     */\n    _chart.hidableStacks = function (hidableStacks) {\n        if (!arguments.length) {\n            return _hidableStacks;\n        }\n        _hidableStacks = hidableStacks;\n        return _chart;\n    };\n\n    function findLayerByName (n) {\n        var i = _stack.map(dc.pluck('name')).indexOf(n);\n        return _stack[i];\n    }\n\n    /**\n     * Hide all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @method hideStack\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {String} stackName\n     * @returns {dc.stackMixin}\n     */\n    _chart.hideStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = true;\n        }\n        return _chart;\n    };\n\n    /**\n     * Show all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @method showStack\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {String} stackName\n     * @returns {dc.stackMixin}\n     */\n    _chart.showStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = false;\n        }\n        return _chart;\n    };\n\n    _chart.getValueAccessorByIndex = function (index) {\n        return _stack[index].accessor || _chart.valueAccessor();\n    };\n\n    _chart.yAxisMin = function () {\n        var min = d3.min(flattenStack(), function (p) {\n            return (p.y < 0) ? (p.y + p.y0) : p.y0;\n        });\n\n        return dc.utils.subtract(min, _chart.yAxisPadding());\n\n    };\n\n    _chart.yAxisMax = function () {\n        var max = d3.max(flattenStack(), function (p) {\n            return (p.y > 0) ? (p.y + p.y0) : p.y0;\n        });\n\n        return dc.utils.add(max, _chart.yAxisPadding());\n    };\n\n    function flattenStack () {\n        var valueses = _chart.data().map(function (layer) { return layer.values; });\n        return Array.prototype.concat.apply([], valueses);\n    }\n\n    _chart.xAxisMin = function () {\n        var min = d3.min(flattenStack(), dc.pluck('x'));\n        return dc.utils.subtract(min, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    };\n\n    _chart.xAxisMax = function () {\n        var max = d3.max(flattenStack(), dc.pluck('x'));\n        return dc.utils.add(max, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    };\n\n    /**\n     * Set or get the title function. Chart class will use this function to render svg title (usually interpreted by\n     * browser as tooltips) for each child element in the chart, i.e. a slice in a pie chart or a bubble in a bubble chart.\n     * Almost every chart supports title function however in grid coordinate chart you need to turn off brush in order to\n     * use title otherwise the brush layer will block tooltip trigger.\n     *\n     * If the first argument is a stack name, the title function will get or set the title for that stack. If stackName\n     * is not provided, the first stack is implied.\n     * @method title\n     * @memberof dc.stackMixin\n     * @instance\n     * @example\n     * // set a title function on 'first stack'\n     * chart.title('first stack', function(d) { return d.key + ': ' + d.value; });\n     * // get a title function from 'second stack'\n     * var secondTitleFunction = chart.title('second stack');\n     * @param {String} [stackName]\n     * @param {Function} [titleAccessor]\n     * @returns {String|dc.stackMixin}\n     */\n    dc.override(_chart, 'title', function (stackName, titleAccessor) {\n        if (!stackName) {\n            return _chart._title();\n        }\n\n        if (typeof stackName === 'function') {\n            return _chart._title(stackName);\n        }\n        if (stackName === _chart._groupName && typeof titleAccessor === 'function') {\n            return _chart._title(titleAccessor);\n        }\n\n        if (typeof titleAccessor !== 'function') {\n            return _titles[stackName] || _chart._title();\n        }\n\n        _titles[stackName] = titleAccessor;\n\n        return _chart;\n    });\n\n    /**\n     * Gets or sets the stack layout algorithm, which computes a baseline for each stack and\n     * propagates it to the next.\n     * @method stackLayout\n     * @memberof dc.stackMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Stack-Layout.md d3.layout.stack}\n     * @param {Function} [stack=d3.layout.stack]\n     * @returns {Function|dc.stackMixin}\n     */\n    _chart.stackLayout = function (stack) {\n        if (!arguments.length) {\n            return _stackLayout;\n        }\n        _stackLayout = stack;\n        if (_stackLayout.values() === d3.layout.stack().values()) {\n            _stackLayout.values(prepareValues);\n        }\n        return _chart;\n    };\n\n    /**\n     * Since dc.js 2.0, there has been {@link https://github.com/dc-js/dc.js/issues/949 an issue}\n     * where points are filtered to the current domain. While this is a useful optimization, it is\n     * incorrectly implemented: the next point outside the domain is required in order to draw lines\n     * that are clipped to the bounds, as well as bars that are partly clipped.\n     *\n     * A fix will be included in dc.js 2.1.x, but a workaround is needed for dc.js 2.0 and until\n     * that fix is published, so set this flag to skip any filtering of points.\n     *\n     * Once the bug is fixed, this flag will have no effect, and it will be deprecated.\n     * @method evadeDomainFilter\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {Boolean} [evadeDomainFilter=false]\n     * @returns {Boolean|dc.stackMixin}\n     */\n    _chart.evadeDomainFilter = function (evadeDomainFilter) {\n        if (!arguments.length) {\n            return _evadeDomainFilter;\n        }\n        _evadeDomainFilter = evadeDomainFilter;\n        return _chart;\n    };\n\n    function visability (l) {\n        return !l.hidden;\n    }\n\n    _chart.data(function () {\n        var layers = _stack.filter(visability);\n        return layers.length ? _chart.stackLayout()(layers) : [];\n    });\n\n    _chart._ordinalXDomain = function () {\n        var flat = flattenStack().map(dc.pluck('data'));\n        var ordered = _chart._computeOrderedGroups(flat);\n        return ordered.map(_chart.keyAccessor());\n    };\n\n    _chart.colorAccessor(function (d) {\n        var layer = this.layer || this.name || d.name || d.layer;\n        return layer;\n    });\n\n    _chart.legendables = function () {\n        return _stack.map(function (layer, i) {\n            return {\n                chart: _chart,\n                name: layer.name,\n                hidden: layer.hidden || false,\n                color: _chart.getColor.call(layer, layer.values, i)\n            };\n        });\n    };\n\n    _chart.isLegendableHidden = function (d) {\n        var layer = findLayerByName(d.name);\n        return layer ? layer.hidden : false;\n    };\n\n    _chart.legendToggle = function (d) {\n        if (_hidableStacks) {\n            if (_chart.isLegendableHidden(d)) {\n                _chart.showStack(d.name);\n            } else {\n                _chart.hideStack(d.name);\n            }\n            //_chart.redraw();\n            _chart.renderGroup();\n        }\n    };\n\n    return _chart;\n};\n\n/**\n * Cap is a mixin that groups small data elements below a _cap_ into an *others* grouping for both the\n * Row and Pie Charts.\n *\n * The top ordered elements in the group up to the cap amount will be kept in the chart, and the rest\n * will be replaced with an *others* element, with value equal to the sum of the replaced values. The\n * keys of the elements below the cap limit are recorded in order to filter by those keys when the\n * others* element is clicked.\n * @name capMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.capMixin}\n */\ndc.capMixin = function (_chart) {\n    var _cap = Infinity, _takeFront = true;\n    var _othersLabel = 'Others';\n\n    // emulate old group.top(N) ordering\n    _chart.ordering(function (kv) {\n        return -kv.value;\n    });\n\n    var _othersGrouper = function (topItems, restItems) {\n        var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n            restKeys = restItems.map(_chart.keyAccessor());\n        if (restItemsSum > 0) {\n            return topItems.concat([{\n                others: restKeys,\n                key: _chart.othersLabel(),\n                value: restItemsSum\n            }]);\n        }\n        return topItems;\n    };\n\n    _chart.cappedKeyAccessor = function (d, i) {\n        if (d.others) {\n            return d.key;\n        }\n        return _chart.keyAccessor()(d, i);\n    };\n\n    _chart.cappedValueAccessor = function (d, i) {\n        if (d.others) {\n            return d.value;\n        }\n        return _chart.valueAccessor()(d, i);\n    };\n\n    // return N \"top\" groups, where N is the cap, sorted by baseMixin.ordering\n    // whether top means front or back depends on takeFront\n    _chart.data(function (group) {\n        if (_cap === Infinity) {\n            return _chart._computeOrderedGroups(group.all());\n        } else {\n            var items = group.all(), rest;\n            items = _chart._computeOrderedGroups(items); // sort by baseMixin.ordering\n\n            if (_cap) {\n                if (_takeFront) {\n                    rest = items.slice(_cap);\n                    items = items.slice(0, _cap);\n                } else {\n                    var start = Math.max(0, items.length - _cap);\n                    rest = items.slice(0, start);\n                    items = items.slice(start);\n                }\n            }\n\n            if (_othersGrouper) {\n                return _othersGrouper(items, rest);\n            }\n            return items;\n        }\n    });\n\n    /**\n     * Get or set the count of elements to that will be included in the cap. If there is an\n     * {@link dc.capMixin#othersGrouper othersGrouper}, any further elements will be combined in an\n     * extra element with its name determined by {@link dc.capMixin#othersLabel othersLabel}.\n     *\n     * As of dc.js 2.1 and onward, the capped charts use\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all()}\n     * and {@link dc.baseMixin#ordering baseMixin.ordering()} to determine the order of\n     * elements. Then `cap` and {@link dc.capMixin#takeFront takeFront} determine how many elements\n     * to keep, from which end of the resulting array.\n     *\n     * **Migration note:** Up through dc.js 2.0.*, capping used\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_top group.top(N)},\n     * which selects the largest items according to\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_order group.order()}.\n     * The chart then sorted the items according to {@link dc.baseMixin#ordering baseMixin.ordering()}.\n     * So the two values essentially had to agree, but if the `group.order()` was incorrect (it's\n     * easy to forget about), the wrong rows or slices would be displayed, in the correct order.\n     *\n     * If your chart previously relied on `group.order()`, use `chart.ordering()` instead. As of\n     * 2.1.5, the ordering defaults to sorting from greatest to least like `group.top(N)` did.\n     *\n     * If you want to cap by one ordering but sort by another, please\n     * [file an issue](https://github.com/dc-js/dc.js/issues/new) - it's still possible but we'll\n     * need to work up an example.\n     * @method cap\n     * @memberof dc.capMixin\n     * @instance\n     * @param {Number} [count=Infinity]\n     * @returns {Number|dc.capMixin}\n     */\n    _chart.cap = function (count) {\n        if (!arguments.length) {\n            return _cap;\n        }\n        _cap = count;\n        return _chart;\n    };\n\n    /**\n     * Get or set the direction of capping. If set, the chart takes the first\n     * {@link dc.capMixin#cap cap} elements from the sorted array of elements; otherwise\n     * it takes the last `cap` elements.\n     * @method takeFront\n     * @memberof dc.capMixin\n     * @instance\n     * @param {Boolean} [takeFront=true]\n     * @returns {Boolean|dc.capMixin}\n     */\n    _chart.takeFront = function (takeFront) {\n        if (!arguments.length) {\n            return _takeFront;\n        }\n        _takeFront = takeFront;\n        return _chart;\n    };\n\n    /**\n     * Get or set the label for *Others* slice when slices cap is specified.\n     * @method othersLabel\n     * @memberof dc.capMixin\n     * @instance\n     * @param {String} [label=\"Others\"]\n     * @returns {String|dc.capMixin}\n     */\n    _chart.othersLabel = function (label) {\n        if (!arguments.length) {\n            return _othersLabel;\n        }\n        _othersLabel = label;\n        return _chart;\n    };\n\n    /**\n     * Get or set the grouper function that will perform the insertion of data for the *Others* slice\n     * if the slices cap is specified. If set to a falsy value, no others will be added.\n     *\n     * The grouper function takes an array of included (\"top\") items, and an array of the rest of\n     * the items. By default the grouper function computes the sum of the rest.\n     * @method othersGrouper\n     * @memberof dc.capMixin\n     * @instance\n     * @example\n     * // Do not show others\n     * chart.othersGrouper(null);\n     * // Default others grouper\n     * chart.othersGrouper(function (topItems, restItems) {\n     *     var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n     *         restKeys = restItems.map(_chart.keyAccessor());\n     *     if (restItemsSum > 0) {\n     *         return topItems.concat([{\n     *             others: restKeys,\n     *             key: _chart.othersLabel(),\n     *             value: restItemsSum\n     *         }]);\n     *     }\n     *     return topItems;\n     * });\n     * @param {Function} [grouperFunction]\n     * @returns {Function|dc.capMixin}\n     */\n    _chart.othersGrouper = function (grouperFunction) {\n        if (!arguments.length) {\n            return _othersGrouper;\n        }\n        _othersGrouper = grouperFunction;\n        return _chart;\n    };\n\n    dc.override(_chart, 'onClick', function (d) {\n        if (d.others) {\n            _chart.filter([d.others]);\n        }\n        _chart._onClick(d);\n    });\n\n    return _chart;\n};\n\n/**\n * This Mixin provides reusable functionalities for any chart that needs to visualize data using bubbles.\n * @name bubbleMixin\n * @memberof dc\n * @mixin\n * @mixes dc.colorMixin\n * @param {Object} _chart\n * @returns {dc.bubbleMixin}\n */\ndc.bubbleMixin = function (_chart) {\n    var _maxBubbleRelativeSize = 0.3;\n    var _minRadiusWithLabel = 10;\n    var _sortBubbleSize = false;\n    var _elasticRadius = false;\n\n    _chart.BUBBLE_NODE_CLASS = 'node';\n    _chart.BUBBLE_CLASS = 'bubble';\n    _chart.MIN_RADIUS = 10;\n\n    _chart = dc.colorMixin(_chart);\n\n    _chart.renderLabel(true);\n\n    _chart.data(function (group) {\n        var data = group.all();\n        if (_sortBubbleSize) {\n            // sort descending so smaller bubbles are on top\n            var radiusAccessor = _chart.radiusValueAccessor();\n            data.sort(function (a, b) { return d3.descending(radiusAccessor(a), radiusAccessor(b)); });\n        }\n        return data;\n    });\n\n    var _r = d3.scale.linear().domain([0, 100]);\n\n    var _rValueAccessor = function (d) {\n        return d.r;\n    };\n\n    /**\n     * Get or set the bubble radius scale. By default the bubble chart uses\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md#linear d3.scale.linear().domain([0, 100])}\n     * as its radius scale.\n     * @method r\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [bubbleRadiusScale=d3.scale.linear().domain([0, 100])]\n     * @returns {d3.scale|dc.bubbleMixin}\n     */\n    _chart.r = function (bubbleRadiusScale) {\n        if (!arguments.length) {\n            return _r;\n        }\n        _r = bubbleRadiusScale;\n        return _chart;\n    };\n\n    /**\n     * Turn on or off the elastic bubble radius feature, or return the value of the flag. If this\n     * feature is turned on, then bubble radii will be automatically rescaled to fit the chart better.\n     * @method elasticRadius\n     * @memberof dc.bubbleChart\n     * @instance\n     * @param {Boolean} [elasticRadius=false]\n     * @returns {Boolean|dc.bubbleChart}\n     */\n    _chart.elasticRadius = function (elasticRadius) {\n        if (!arguments.length) {\n            return _elasticRadius;\n        }\n        _elasticRadius = elasticRadius;\n        return _chart;\n    };\n\n    _chart.calculateRadiusDomain = function () {\n        if (_elasticRadius) {\n            _chart.r().domain([_chart.rMin(), _chart.rMax()]);\n        }\n    };\n\n    /**\n     * Get or set the radius value accessor function. If set, the radius value accessor function will\n     * be used to retrieve a data value for each bubble. The data retrieved then will be mapped using\n     * the r scale to the actual bubble radius. This allows you to encode a data dimension using bubble\n     * size.\n     * @method radiusValueAccessor\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Function} [radiusValueAccessor]\n     * @returns {Function|dc.bubbleMixin}\n     */\n    _chart.radiusValueAccessor = function (radiusValueAccessor) {\n        if (!arguments.length) {\n            return _rValueAccessor;\n        }\n        _rValueAccessor = radiusValueAccessor;\n        return _chart;\n    };\n\n    _chart.rMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.radiusValueAccessor()(e);\n        });\n        return min;\n    };\n\n    _chart.rMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.radiusValueAccessor()(e);\n        });\n        return max;\n    };\n\n    _chart.bubbleR = function (d) {\n        var value = _chart.radiusValueAccessor()(d);\n        var r = _chart.r()(value);\n        if (isNaN(r) || value <= 0) {\n            r = 0;\n        }\n        return r;\n    };\n\n    var labelFunction = function (d) {\n        return _chart.label()(d);\n    };\n\n    var shouldLabel = function (d) {\n        return (_chart.bubbleR(d) > _minRadiusWithLabel);\n    };\n\n    var labelOpacity = function (d) {\n        return shouldLabel(d) ? 1 : 0;\n    };\n\n    var labelPointerEvent = function (d) {\n        return shouldLabel(d) ? 'all' : 'none';\n    };\n\n    _chart._doRenderLabel = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n            var label = bubbleGEnter.select('text');\n\n            if (label.empty()) {\n                label = bubbleGEnter.append('text')\n                    .attr('text-anchor', 'middle')\n                    .attr('dy', '.3em')\n                    .on('click', _chart.onClick);\n            }\n\n            label\n                .attr('opacity', 0)\n                .attr('pointer-events', labelPointerEvent)\n                .text(labelFunction);\n            dc.transition(label, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', labelOpacity);\n        }\n    };\n\n    _chart.doUpdateLabels = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n            var labels = bubbleGEnter.select('text')\n                .attr('pointer-events', labelPointerEvent)\n                .text(labelFunction);\n            dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', labelOpacity);\n        }\n    };\n\n    var titleFunction = function (d) {\n        return _chart.title()(d);\n    };\n\n    _chart._doRenderTitles = function (g) {\n        if (_chart.renderTitle()) {\n            var title = g.select('title');\n\n            if (title.empty()) {\n                g.append('title').text(titleFunction);\n            }\n        }\n    };\n\n    _chart.doUpdateTitles = function (g) {\n        if (_chart.renderTitle()) {\n            g.select('title').text(titleFunction);\n        }\n    };\n\n    /**\n     * Turn on or off the bubble sorting feature, or return the value of the flag. If enabled,\n     * bubbles will be sorted by their radius, with smaller bubbles in front.\n     * @method sortBubbleSize\n     * @memberof dc.bubbleChart\n     * @instance\n     * @param {Boolean} [sortBubbleSize=false]\n     * @returns {Boolean|dc.bubbleChart}\n     */\n    _chart.sortBubbleSize = function (sortBubbleSize) {\n        if (!arguments.length) {\n            return _sortBubbleSize;\n        }\n        _sortBubbleSize = sortBubbleSize;\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimum radius. This will be used to initialize the radius scale's range.\n     * @method minRadius\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [radius=10]\n     * @returns {Number|dc.bubbleMixin}\n     */\n    _chart.minRadius = function (radius) {\n        if (!arguments.length) {\n            return _chart.MIN_RADIUS;\n        }\n        _chart.MIN_RADIUS = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimum radius for label rendering. If a bubble's radius is less than this value\n     * then no label will be rendered.\n     * @method minRadiusWithLabel\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [radius=10]\n     * @returns {Number|dc.bubbleMixin}\n     */\n\n    _chart.minRadiusWithLabel = function (radius) {\n        if (!arguments.length) {\n            return _minRadiusWithLabel;\n        }\n        _minRadiusWithLabel = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the maximum relative size of a bubble to the length of x axis. This value is useful\n     * when the difference in radius between bubbles is too great.\n     * @method maxBubbleRelativeSize\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [relativeSize=0.3]\n     * @returns {Number|dc.bubbleMixin}\n     */\n    _chart.maxBubbleRelativeSize = function (relativeSize) {\n        if (!arguments.length) {\n            return _maxBubbleRelativeSize;\n        }\n        _maxBubbleRelativeSize = relativeSize;\n        return _chart;\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function (d) {\n                if (_chart.isSelectedNode(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n    };\n\n    _chart.onClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    return _chart;\n};\n\n/**\n * The pie chart implementation is usually used to visualize a small categorical distribution.  The pie\n * chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each\n * slice relative to the sum of all values. Slices are ordered by {@link dc.baseMixin#ordering ordering}\n * which defaults to sorting by key.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class pieChart\n * @memberof dc\n * @mixes dc.capMixin\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a pie chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.pieChart('#chart-container1');\n * // create a pie chart under #chart-container2 element using chart group A\n * var chart2 = dc.pieChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.pieChart}\n */\ndc.pieChart = function (parent, chartGroup) {\n    var DEFAULT_MIN_ANGLE_FOR_LABEL = 0.5;\n\n    var _sliceCssClass = 'pie-slice';\n    var _labelCssClass = 'pie-label';\n    var _sliceGroupCssClass = 'pie-slice-group';\n    var _labelGroupCssClass = 'pie-label-group';\n    var _emptyCssClass = 'empty-chart';\n    var _emptyTitle = 'empty';\n\n    var _radius,\n        _givenRadius, // specified radius, if any\n        _innerRadius = 0,\n        _externalRadiusPadding = 0;\n\n    var _g;\n    var _cx;\n    var _cy;\n    var _minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL;\n    var _externalLabelRadius;\n    var _drawPaths = false;\n    var _chart = dc.capMixin(dc.colorMixin(dc.baseMixin({})));\n\n    _chart.colorAccessor(_chart.cappedKeyAccessor);\n\n    _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n    });\n\n    /**\n     * Get or set the maximum number of slices the pie chart will generate. The top slices are determined by\n     * value from high to low. Other slices exeeding the cap will be rolled up into one single *Others* slice.\n     * @method slicesCap\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cap]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.slicesCap = _chart.cap;\n\n    _chart.label(_chart.cappedKeyAccessor);\n    _chart.renderLabel(true);\n\n    _chart.transitionDuration(350);\n    _chart.transitionDelay(0);\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg()\n            .append('g')\n            .attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n\n        _g.append('g').attr('class', _sliceGroupCssClass);\n        _g.append('g').attr('class', _labelGroupCssClass);\n\n        drawChart();\n\n        return _chart;\n    };\n\n    function drawChart () {\n        // set radius from chart size if none given, or if given radius is too large\n        var maxRadius =  d3.min([_chart.width(), _chart.height()]) / 2;\n        _radius = _givenRadius && _givenRadius < maxRadius ? _givenRadius : maxRadius;\n\n        var arc = buildArcs();\n\n        var pie = pieLayout();\n        var pieData;\n        // if we have data...\n        if (d3.sum(_chart.data(), _chart.valueAccessor())) {\n            pieData = pie(_chart.data());\n            _g.classed(_emptyCssClass, false);\n        } else {\n            // otherwise we'd be getting NaNs, so override\n            // note: abuse others for its ignoring the value accessor\n            pieData = pie([{key: _emptyTitle, value: 1, others: [_emptyTitle]}]);\n            _g.classed(_emptyCssClass, true);\n        }\n\n        if (_g) {\n            var slices = _g.select('g.' + _sliceGroupCssClass)\n                .selectAll('g.' + _sliceCssClass)\n                .data(pieData);\n\n            var labels = _g.select('g.' + _labelGroupCssClass)\n                .selectAll('text.' + _labelCssClass)\n                .data(pieData);\n\n            createElements(slices, labels, arc, pieData);\n\n            updateElements(pieData, arc);\n\n            removeElements(slices, labels);\n\n            highlightFilter();\n\n            dc.transition(_g, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n        }\n    }\n\n    function createElements (slices, labels, arc, pieData) {\n        var slicesEnter = createSliceNodes(slices);\n\n        createSlicePath(slicesEnter, arc);\n\n        createTitles(slicesEnter);\n\n        createLabels(labels, pieData, arc);\n    }\n\n    function createSliceNodes (slices) {\n        var slicesEnter = slices\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return _sliceCssClass + ' _' + i;\n            });\n        return slicesEnter;\n    }\n\n    function createSlicePath (slicesEnter, arc) {\n        var slicePath = slicesEnter.append('path')\n            .attr('fill', fill)\n            .on('click', onClick)\n            .attr('d', function (d, i) {\n                return safeArc(d, i, arc);\n            });\n\n        var transition = dc.transition(slicePath, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenPie);\n        }\n    }\n\n    function createTitles (slicesEnter) {\n        if (_chart.renderTitle()) {\n            slicesEnter.append('title').text(function (d) {\n                return _chart.title()(d.data);\n            });\n        }\n    }\n\n    _chart._applyLabelText = function (labels) {\n        labels\n            .text(function (d) {\n                var data = d.data;\n                if ((sliceHasNoData(data) || sliceTooSmall(d)) && !isSelectedSlice(d)) {\n                    return '';\n                }\n                return _chart.label()(d.data);\n            });\n    };\n\n    function positionLabels (labels, arc) {\n        _chart._applyLabelText(labels);\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', function (d) {\n                return labelPosition(d, arc);\n            })\n            .attr('text-anchor', 'middle');\n    }\n\n    function highlightSlice (i, whether) {\n        _chart.select('g.pie-slice._' + i)\n            .classed('highlight', whether);\n    }\n\n    function createLabels (labels, pieData, arc) {\n        if (_chart.renderLabel()) {\n            var labelsEnter = labels\n                .enter()\n                .append('text')\n                .attr('class', function (d, i) {\n                    var classes = _sliceCssClass + ' ' + _labelCssClass + ' _' + i;\n                    if (_externalLabelRadius) {\n                        classes += ' external';\n                    }\n                    return classes;\n                })\n                .on('click', onClick)\n                .on('mouseover', function (d, i) {\n                    highlightSlice(i, true);\n                })\n                .on('mouseout', function (d, i) {\n                    highlightSlice(i, false);\n                });\n            positionLabels(labelsEnter, arc);\n            if (_externalLabelRadius && _drawPaths) {\n                updateLabelPaths(pieData, arc);\n            }\n        }\n    }\n\n    function updateLabelPaths (pieData, arc) {\n        var polyline = _g.selectAll('polyline.' + _sliceCssClass)\n                .data(pieData);\n\n        polyline\n                .enter()\n                .append('polyline')\n                .attr('class', function (d, i) {\n                    return 'pie-path _' + i + ' ' + _sliceCssClass;\n                })\n                .on('click', onClick)\n                .on('mouseover', function (d, i) {\n                    highlightSlice(i, true);\n                })\n                .on('mouseout', function (d, i) {\n                    highlightSlice(i, false);\n                });\n\n        polyline.exit().remove();\n        var arc2 = d3.svg.arc()\n                .outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .innerRadius(_radius - _externalRadiusPadding);\n        var transition = dc.transition(polyline, _chart.transitionDuration(), _chart.transitionDelay());\n        // this is one rare case where d3.selection differs from d3.transition\n        if (transition.attrTween) {\n            transition\n                .attrTween('points', function (d) {\n                    var current = this._current || d;\n                    current = {startAngle: current.startAngle, endAngle: current.endAngle};\n                    var interpolate = d3.interpolate(current, d);\n                    this._current = interpolate(0);\n                    return function (t) {\n                        var d2 = interpolate(t);\n                        return [arc.centroid(d2), arc2.centroid(d2)];\n                    };\n                });\n        } else {\n            transition.attr('points', function (d) {\n                return [arc.centroid(d), arc2.centroid(d)];\n            });\n        }\n        transition.style('visibility', function (d) {\n            return d.endAngle - d.startAngle < 0.0001 ? 'hidden' : 'visible';\n        });\n\n    }\n\n    function updateElements (pieData, arc) {\n        updateSlicePaths(pieData, arc);\n        updateLabels(pieData, arc);\n        updateTitles(pieData);\n    }\n\n    function updateSlicePaths (pieData, arc) {\n        var slicePaths = _g.selectAll('g.' + _sliceCssClass)\n            .data(pieData)\n            .select('path')\n            .attr('d', function (d, i) {\n                return safeArc(d, i, arc);\n            });\n        var transition = dc.transition(slicePaths, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenPie);\n        }\n        transition.attr('fill', fill);\n    }\n\n    function updateLabels (pieData, arc) {\n        if (_chart.renderLabel()) {\n            var labels = _g.selectAll('text.' + _labelCssClass)\n                .data(pieData);\n            positionLabels(labels, arc);\n            if (_externalLabelRadius && _drawPaths) {\n                updateLabelPaths(pieData, arc);\n            }\n        }\n    }\n\n    function updateTitles (pieData) {\n        if (_chart.renderTitle()) {\n            _g.selectAll('g.' + _sliceCssClass)\n                .data(pieData)\n                .select('title')\n                .text(function (d) {\n                    return _chart.title()(d.data);\n                });\n        }\n    }\n\n    function removeElements (slices, labels) {\n        slices.exit().remove();\n        labels.exit().remove();\n    }\n\n    function highlightFilter () {\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.' + _sliceCssClass).each(function (d) {\n                if (isSelectedSlice(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.' + _sliceCssClass).each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    }\n\n    /**\n     * Get or set the external radius padding of the pie chart. This will force the radius of the\n     * pie chart to become smaller or larger depending on the value.\n     * @method externalRadiusPadding\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [externalRadiusPadding=0]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.externalRadiusPadding = function (externalRadiusPadding) {\n        if (!arguments.length) {\n            return _externalRadiusPadding;\n        }\n        _externalRadiusPadding = externalRadiusPadding;\n        return _chart;\n    };\n\n    /**\n     * Get or set the inner radius of the pie chart. If the inner radius is greater than 0px then the\n     * pie chart will be rendered as a doughnut chart.\n     * @method innerRadius\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [innerRadius=0]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.innerRadius = function (innerRadius) {\n        if (!arguments.length) {\n            return _innerRadius;\n        }\n        _innerRadius = innerRadius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the outer radius. If the radius is not set, it will be half of the minimum of the\n     * chart width and height.\n     * @method radius\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [radius]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.radius = function (radius) {\n        if (!arguments.length) {\n            return _givenRadius;\n        }\n        _givenRadius = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set center x coordinate position. Default is center of svg.\n     * @method cx\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cx]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.cx = function (cx) {\n        if (!arguments.length) {\n            return (_cx ||  _chart.width() / 2);\n        }\n        _cx = cx;\n        return _chart;\n    };\n\n    /**\n     * Get or set center y coordinate position. Default is center of svg.\n     * @method cy\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cy]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.cy = function (cy) {\n        if (!arguments.length) {\n            return (_cy ||  _chart.height() / 2);\n        }\n        _cy = cy;\n        return _chart;\n    };\n\n    function buildArcs () {\n        return d3.svg.arc()\n            .outerRadius(_radius - _externalRadiusPadding)\n            .innerRadius(_innerRadius);\n    }\n\n    function isSelectedSlice (d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d.data));\n    }\n\n    _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not\n     * display a slice label.\n     * @method minAngleForLabel\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [minAngleForLabel=0.5]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.minAngleForLabel = function (minAngleForLabel) {\n        if (!arguments.length) {\n            return _minAngleForLabel;\n        }\n        _minAngleForLabel = minAngleForLabel;\n        return _chart;\n    };\n\n    function pieLayout () {\n        return d3.layout.pie().sort(null).value(_chart.cappedValueAccessor);\n    }\n\n    function sliceTooSmall (d) {\n        var angle = (d.endAngle - d.startAngle);\n        return isNaN(angle) || angle < _minAngleForLabel;\n    }\n\n    function sliceHasNoData (d) {\n        return _chart.cappedValueAccessor(d) === 0;\n    }\n\n    function tweenPie (b) {\n        b.innerRadius = _innerRadius;\n        var current = this._current;\n        if (isOffCanvas(current)) {\n            current = {startAngle: 0, endAngle: 0};\n        } else {\n            // only interpolate startAngle & endAngle, not the whole data object\n            current = {startAngle: current.startAngle, endAngle: current.endAngle};\n        }\n        var i = d3.interpolate(current, b);\n        this._current = i(0);\n        return function (t) {\n            return safeArc(i(t), 0, buildArcs());\n        };\n    }\n\n    function isOffCanvas (current) {\n        return !current || isNaN(current.startAngle) || isNaN(current.endAngle);\n    }\n\n    function fill (d, i) {\n        return _chart.getColor(d.data, i);\n    }\n\n    function onClick (d, i) {\n        if (_g.attr('class') !== _emptyCssClass) {\n            _chart.onClick(d.data, i);\n        }\n    }\n\n    function safeArc (d, i, arc) {\n        var path = arc(d, i);\n        if (path.indexOf('NaN') >= 0) {\n            path = 'M0,0';\n        }\n        return path;\n    }\n\n    /**\n     * Title to use for the only slice when there is no data.\n     * @method emptyTitle\n     * @memberof dc.pieChart\n     * @instance\n     * @param {String} [title]\n     * @returns {String|dc.pieChart}\n     */\n    _chart.emptyTitle = function (title) {\n        if (arguments.length === 0) {\n            return _emptyTitle;\n        }\n        _emptyTitle = title;\n        return _chart;\n    };\n\n    /**\n     * Position slice labels offset from the outer edge of the chart.\n     *\n     * The argument specifies the extra radius to be added for slice labels.\n     * @method externalLabels\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [externalLabelRadius]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.externalLabels = function (externalLabelRadius) {\n        if (arguments.length === 0) {\n            return _externalLabelRadius;\n        } else if (externalLabelRadius) {\n            _externalLabelRadius = externalLabelRadius;\n        } else {\n            _externalLabelRadius = undefined;\n        }\n\n        return _chart;\n    };\n\n    /**\n     * Get or set whether to draw lines from pie slices to their labels.\n     *\n     * @method drawPaths\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Boolean} [drawPaths]\n     * @returns {Boolean|dc.pieChart}\n     */\n    _chart.drawPaths = function (drawPaths) {\n        if (arguments.length === 0) {\n            return _drawPaths;\n        }\n        _drawPaths = drawPaths;\n        return _chart;\n    };\n\n    function labelPosition (d, arc) {\n        var centroid;\n        if (_externalLabelRadius) {\n            centroid = d3.svg.arc()\n                .outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .innerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .centroid(d);\n        } else {\n            centroid = arc.centroid(d);\n        }\n        if (isNaN(centroid[0]) || isNaN(centroid[1])) {\n            return 'translate(0,0)';\n        } else {\n            return 'translate(' + centroid + ')';\n        }\n    }\n\n    _chart.legendables = function () {\n        return _chart.data().map(function (d, i) {\n            var legendable = {name: d.key, data: d.value, others: d.others, chart: _chart};\n            legendable.color = _chart.getColor(d, i);\n            return legendable;\n        });\n    };\n\n    _chart.legendHighlight = function (d) {\n        highlightSliceFromLegendable(d, true);\n    };\n\n    _chart.legendReset = function (d) {\n        highlightSliceFromLegendable(d, false);\n    };\n\n    _chart.legendToggle = function (d) {\n        _chart.onClick({key: d.name, others: d.others});\n    };\n\n    function highlightSliceFromLegendable (legendable, highlighted) {\n        _chart.selectAll('g.pie-slice').each(function (d) {\n            if (legendable.name === d.data.key) {\n                d3.select(this).classed('highlight', highlighted);\n            }\n        });\n    }\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Concrete bar chart/histogram implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class barChart\n * @memberof dc\n * @mixes dc.stackMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a bar chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.barChart('#chart-container1');\n * // create a bar chart under #chart-container2 element using chart group A\n * var chart2 = dc.barChart('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.barChart(compositeChart);\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n * specifying a dom block element such as a div; or a dom element or d3 selection.  If the bar\n * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n * composite chart instance instead.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.barChart}\n */\ndc.barChart = function (parent, chartGroup) {\n    var MIN_BAR_WIDTH = 1;\n    var DEFAULT_GAP_BETWEEN_BARS = 2;\n    var LABEL_PADDING = 3;\n\n    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n\n    var _gap = DEFAULT_GAP_BETWEEN_BARS;\n    var _centerBar = false;\n    var _alwaysUseRounding = false;\n\n    var _barWidth;\n\n    dc.override(_chart, 'rescale', function () {\n        _chart._rescale();\n        _barWidth = undefined;\n        return _chart;\n    });\n\n    dc.override(_chart, 'render', function () {\n        if (_chart.round() && _centerBar && !_alwaysUseRounding) {\n            dc.logger.warn('By default, brush rounding is disabled if bars are centered. ' +\n                         'See dc.js bar chart API documentation for details.');\n        }\n\n        return _chart._render();\n    });\n\n    _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n    }, false);\n\n    _chart.plotData = function () {\n        var layers = _chart.chartBodyG().selectAll('g.stack')\n            .data(_chart.data());\n\n        calculateBarWidth();\n\n        layers\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return 'stack ' + '_' + i;\n            });\n\n        var last = layers.size() - 1;\n        layers.each(function (d, i) {\n            var layer = d3.select(this);\n\n            renderBars(layer, i, d);\n\n            if (_chart.renderLabel() && last === i) {\n                renderLabels(layer, i, d);\n            }\n        });\n    };\n\n    function barHeight (d) {\n        return dc.utils.safeNumber(Math.abs(_chart.y()(d.y + d.y0) - _chart.y()(d.y0)));\n    }\n\n    function renderLabels (layer, layerIndex, d) {\n        var labels = layer.selectAll('text.barLabel')\n            .data(d.values, dc.pluck('x'));\n\n        labels.enter()\n            .append('text')\n            .attr('class', 'barLabel')\n            .attr('text-anchor', 'middle');\n\n        if (_chart.isOrdinal()) {\n            labels.on('click', _chart.onClick);\n            labels.attr('cursor', 'pointer');\n        }\n\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) {\n                var x = _chart.x()(d.x);\n                if (!_centerBar) {\n                    x += _barWidth / 2;\n                }\n                return dc.utils.safeNumber(x);\n            })\n            .attr('y', function (d) {\n                var y = _chart.y()(d.y + d.y0);\n\n                if (d.y < 0) {\n                    y -= barHeight(d);\n                }\n\n                return dc.utils.safeNumber(y - LABEL_PADDING);\n            })\n            .text(function (d) {\n                return _chart.label()(d);\n            });\n\n        dc.transition(labels.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('height', 0)\n            .remove();\n    }\n\n    function renderBars (layer, layerIndex, d) {\n        var bars = layer.selectAll('rect.bar')\n            .data(d.values, dc.pluck('x'));\n\n        var enter = bars.enter()\n            .append('rect')\n            .attr('class', 'bar')\n            .attr('fill', dc.pluck('data', _chart.getColor))\n            .attr('y', _chart.yAxisHeight())\n            .attr('height', 0);\n\n        if (_chart.renderTitle()) {\n            enter.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n\n        if (_chart.isOrdinal()) {\n            bars.on('click', _chart.onClick);\n        }\n\n        dc.transition(bars, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) {\n                var x = _chart.x()(d.x);\n                if (_centerBar) {\n                    x -= _barWidth / 2;\n                }\n                if (_chart.isOrdinal() && _gap !== undefined) {\n                    x += _gap / 2;\n                }\n                return dc.utils.safeNumber(x);\n            })\n            .attr('y', function (d) {\n                var y = _chart.y()(d.y + d.y0);\n\n                if (d.y < 0) {\n                    y -= barHeight(d);\n                }\n\n                return dc.utils.safeNumber(y);\n            })\n            .attr('width', _barWidth)\n            .attr('height', function (d) {\n                return barHeight(d);\n            })\n            .attr('fill', dc.pluck('data', _chart.getColor))\n            .select('title').text(dc.pluck('data', _chart.title(d.name)));\n\n        dc.transition(bars.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) { return _chart.x()(d.x); })\n            .attr('width', _barWidth * 0.9)\n            .remove();\n    }\n\n    function calculateBarWidth () {\n        if (_barWidth === undefined) {\n            var numberOfBars = _chart.xUnitCount();\n\n            // please can't we always use rangeBands for bar charts?\n            if (_chart.isOrdinal() && _gap === undefined) {\n                _barWidth = Math.floor(_chart.x().rangeBand());\n            } else if (_gap) {\n                _barWidth = Math.floor((_chart.xAxisLength() - (numberOfBars - 1) * _gap) / numberOfBars);\n            } else {\n                _barWidth = Math.floor(_chart.xAxisLength() / (1 + _chart.barPadding()) / numberOfBars);\n            }\n\n            if (_barWidth === Infinity || isNaN(_barWidth) || _barWidth < MIN_BAR_WIDTH) {\n                _barWidth = MIN_BAR_WIDTH;\n            }\n        }\n    }\n\n    _chart.fadeDeselectedArea = function () {\n        var bars = _chart.chartBodyG().selectAll('rect.bar');\n        var extent = _chart.brush().extent();\n\n        if (_chart.isOrdinal()) {\n            if (_chart.hasFilter()) {\n                bars.classed(dc.constants.SELECTED_CLASS, function (d) {\n                    return _chart.hasFilter(d.x);\n                });\n                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n                    return !_chart.hasFilter(d.x);\n                });\n            } else {\n                bars.classed(dc.constants.SELECTED_CLASS, false);\n                bars.classed(dc.constants.DESELECTED_CLASS, false);\n            }\n        } else {\n            if (!_chart.brushIsEmpty(extent)) {\n                var start = extent[0];\n                var end = extent[1];\n\n                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n                    return d.x < start || d.x >= end;\n                });\n            } else {\n                bars.classed(dc.constants.DESELECTED_CLASS, false);\n            }\n        }\n    };\n\n    /**\n     * Whether the bar chart will render each bar centered around the data position on the x-axis.\n     * @method centerBar\n     * @memberof dc.barChart\n     * @instance\n     * @param {Boolean} [centerBar=false]\n     * @returns {Boolean|dc.barChart}\n     */\n    _chart.centerBar = function (centerBar) {\n        if (!arguments.length) {\n            return _centerBar;\n        }\n        _centerBar = centerBar;\n        return _chart;\n    };\n\n    dc.override(_chart, 'onClick', function (d) {\n        _chart._onClick(d.data);\n    });\n\n    /**\n     * Get or set the spacing between bars as a fraction of bar size. Valid values are between 0-1.\n     * Setting this value will also remove any previously set {@link dc.barChart#gap gap}. See the\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n     * for a visual description of how the padding is applied.\n     * @method barPadding\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [barPadding=0]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.barPadding = function (barPadding) {\n        if (!arguments.length) {\n            return _chart._rangeBandPadding();\n        }\n        _chart._rangeBandPadding(barPadding);\n        _gap = undefined;\n        return _chart;\n    };\n\n    _chart._useOuterPadding = function () {\n        return _gap === undefined;\n    };\n\n    /**\n     * Get or set the outer padding on an ordinal bar chart. This setting has no effect on non-ordinal charts.\n     * Will pad the width by `padding * barWidth` on each side of the chart.\n     * @method outerPadding\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [padding=0.5]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.outerPadding = _chart._outerRangeBandPadding;\n\n    /**\n     * Manually set fixed gap (in px) between bars instead of relying on the default auto-generated\n     * gap.  By default the bar chart implementation will calculate and set the gap automatically\n     * based on the number of data points and the length of the x axis.\n     * @method gap\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [gap=2]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _chart;\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n        if (_chart.round() && (!_centerBar || _alwaysUseRounding)) {\n            extent[0] = extent.map(_chart.round())[0];\n            extent[1] = extent.map(_chart.round())[1];\n\n            _chart.chartBodyG().select('.brush')\n                .call(_chart.brush().extent(extent));\n        }\n\n        return extent;\n    };\n\n    /**\n     * Set or get whether rounding is enabled when bars are centered. If false, using\n     * rounding with centered bars will result in a warning and rounding will be ignored.  This flag\n     * has no effect if bars are not {@link dc.barChart#centerBar centered}.\n     * When using standard d3.js rounding methods, the brush often doesn't align correctly with\n     * centered bars since the bars are offset.  The rounding function must add an offset to\n     * compensate, such as in the following example.\n     * @method alwaysUseRounding\n     * @memberof dc.barChart\n     * @instance\n     * @example\n     * chart.round(function(n) { return Math.floor(n) + 0.5; });\n     * @param {Boolean} [alwaysUseRounding=false]\n     * @returns {Boolean|dc.barChart}\n     */\n    _chart.alwaysUseRounding = function (alwaysUseRounding) {\n        if (!arguments.length) {\n            return _alwaysUseRounding;\n        }\n        _alwaysUseRounding = alwaysUseRounding;\n        return _chart;\n    };\n\n    function colorFilter (color, inv) {\n        return function () {\n            var item = d3.select(this);\n            var match = item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n    }\n\n    _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n            _chart.g().selectAll('rect.bar')\n                .classed('highlight', colorFilter(d.color))\n                .classed('fadeout', colorFilter(d.color, true));\n        }\n    };\n\n    _chart.legendReset = function () {\n        _chart.g().selectAll('rect.bar')\n            .classed('highlight', false)\n            .classed('fadeout', false);\n    };\n\n    dc.override(_chart, 'xAxisMax', function () {\n        var max = this._xAxisMax();\n        if ('resolution' in _chart.xUnits()) {\n            var res = _chart.xUnits().resolution;\n            max += res;\n        }\n        return max;\n    });\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Concrete line/area chart implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class lineChart\n * @memberof dc\n * @mixes dc.stackMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a line chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.lineChart('#chart-container1');\n * // create a line chart under #chart-container2 element using chart group A\n * var chart2 = dc.lineChart('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.lineChart(compositeChart);\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n * specifying a dom block element such as a div; or a dom element or d3 selection.  If the line\n * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n * composite chart instance instead.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.lineChart}\n */\ndc.lineChart = function (parent, chartGroup) {\n    var DEFAULT_DOT_RADIUS = 5;\n    var TOOLTIP_G_CLASS = 'dc-tooltip';\n    var DOT_CIRCLE_CLASS = 'dot';\n    var Y_AXIS_REF_LINE_CLASS = 'yRef';\n    var X_AXIS_REF_LINE_CLASS = 'xRef';\n    var DEFAULT_DOT_OPACITY = 1e-6;\n    var LABEL_PADDING = 3;\n\n    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n    var _renderArea = false;\n    var _dotRadius = DEFAULT_DOT_RADIUS;\n    var _dataPointRadius = null;\n    var _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n    var _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n    var _interpolate = 'linear';\n    var _tension = 0.7;\n    var _defined;\n    var _dashStyle;\n    var _xyTipsOn = true;\n\n    _chart.transitionDuration(500);\n    _chart.transitionDelay(0);\n    _chart._rangeBandPadding(1);\n\n    _chart.plotData = function () {\n        var chartBody = _chart.chartBodyG();\n        var layersList = chartBody.select('g.stack-list');\n\n        if (layersList.empty()) {\n            layersList = chartBody.append('g').attr('class', 'stack-list');\n        }\n\n        var layers = layersList.selectAll('g.stack').data(_chart.data());\n\n        var layersEnter = layers\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return 'stack ' + '_' + i;\n            });\n\n        drawLine(layersEnter, layers);\n\n        drawArea(layersEnter, layers);\n\n        drawDots(chartBody, layers);\n\n        if (_chart.renderLabel()) {\n            drawLabels(layers);\n        }\n    };\n\n    /**\n     * Gets or sets the interpolator to use for lines drawn, by string name, allowing e.g. step\n     * functions, splines, and cubic interpolation.  This is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate} and\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate},\n     * where you can find a complete list of valid arguments.\n     * @method interpolate\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n     * @param  {String} [interpolate='linear']\n     * @returns {String|dc.lineChart}\n     */\n    _chart.interpolate = function (interpolate) {\n        if (!arguments.length) {\n            return _interpolate;\n        }\n        _interpolate = interpolate;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the tension to use for lines drawn, in the range 0 to 1.\n     * This parameter further customizes the interpolation behavior.  It is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_tension d3.svg.line.tension} and\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_tension d3.svg.area.tension}.\n     * @method tension\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n     * @param  {Number} [tension=0.7]\n     * @returns {Number|dc.lineChart}\n     */\n    _chart.tension = function (tension) {\n        if (!arguments.length) {\n            return _tension;\n        }\n        _tension = tension;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets a function that will determine discontinuities in the line which should be\n     * skipped: the path will be broken into separate subpaths if some points are undefined.\n     * This function is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n     *\n     * Note: crossfilter will sometimes coerce nulls to 0, so you may need to carefully write\n     * custom reduce functions to get this to work, depending on your data. See\n     * {@link https://github.com/dc-js/dc.js/issues/615#issuecomment-49089248 this GitHub comment}\n     * for more details and an example.\n     * @method defined\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n     * @param  {Function} [defined]\n     * @returns {Function|dc.lineChart}\n     */\n    _chart.defined = function (defined) {\n        if (!arguments.length) {\n            return _defined;\n        }\n        _defined = defined;\n        return _chart;\n    };\n\n    /**\n     * Set the line's d3 dashstyle. This value becomes the 'stroke-dasharray' of line. Defaults to empty\n     * array (solid line).\n     * @method dashStyle\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray stroke-dasharray}\n     * @example\n     * // create a Dash Dot Dot Dot\n     * chart.dashStyle([3,1,1,1]);\n     * @param  {Array<Number>} [dashStyle=[]]\n     * @returns {Array<Number>|dc.lineChart}\n     */\n    _chart.dashStyle = function (dashStyle) {\n        if (!arguments.length) {\n            return _dashStyle;\n        }\n        _dashStyle = dashStyle;\n        return _chart;\n    };\n\n    /**\n     * Get or set render area flag. If the flag is set to true then the chart will render the area\n     * beneath each line and the line chart effectively becomes an area chart.\n     * @method renderArea\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Boolean} [renderArea=false]\n     * @returns {Boolean|dc.lineChart}\n     */\n    _chart.renderArea = function (renderArea) {\n        if (!arguments.length) {\n            return _renderArea;\n        }\n        _renderArea = renderArea;\n        return _chart;\n    };\n\n    function colors (d, i) {\n        return _chart.getColor.call(d, d.values, i);\n    }\n\n    function drawLine (layersEnter, layers) {\n        var line = d3.svg.line()\n            .x(function (d) {\n                return _chart.x()(d.x);\n            })\n            .y(function (d) {\n                return _chart.y()(d.y + d.y0);\n            })\n            .interpolate(_interpolate)\n            .tension(_tension);\n        if (_defined) {\n            line.defined(_defined);\n        }\n\n        var path = layersEnter.append('path')\n            .attr('class', 'line')\n            .attr('stroke', colors);\n        if (_dashStyle) {\n            path.attr('stroke-dasharray', _dashStyle);\n        }\n\n        dc.transition(layers.select('path.line'), _chart.transitionDuration(), _chart.transitionDelay())\n            //.ease('linear')\n            .attr('stroke', colors)\n            .attr('d', function (d) {\n                return safeD(line(d.values));\n            });\n    }\n\n    function drawArea (layersEnter, layers) {\n        if (_renderArea) {\n            var area = d3.svg.area()\n                .x(function (d) {\n                    return _chart.x()(d.x);\n                })\n                .y(function (d) {\n                    return _chart.y()(d.y + d.y0);\n                })\n                .y0(function (d) {\n                    return _chart.y()(d.y0);\n                })\n                .interpolate(_interpolate)\n                .tension(_tension);\n            if (_defined) {\n                area.defined(_defined);\n            }\n\n            layersEnter.append('path')\n                .attr('class', 'area')\n                .attr('fill', colors)\n                .attr('d', function (d) {\n                    return safeD(area(d.values));\n                });\n\n            dc.transition(layers.select('path.area'), _chart.transitionDuration(), _chart.transitionDelay())\n                //.ease('linear')\n                .attr('fill', colors)\n                .attr('d', function (d) {\n                    return safeD(area(d.values));\n                });\n        }\n    }\n\n    function safeD (d) {\n        return (!d || d.indexOf('NaN') >= 0) ? 'M0,0' : d;\n    }\n\n    function drawDots (chartBody, layers) {\n        if (_chart.xyTipsOn() === 'always' || (!_chart.brushOn() && _chart.xyTipsOn())) {\n            var tooltipListClass = TOOLTIP_G_CLASS + '-list';\n            var tooltips = chartBody.select('g.' + tooltipListClass);\n\n            if (tooltips.empty()) {\n                tooltips = chartBody.append('g').attr('class', tooltipListClass);\n            }\n\n            layers.each(function (d, layerIndex) {\n                var points = d.values;\n                if (_defined) {\n                    points = points.filter(_defined);\n                }\n\n                var g = tooltips.select('g.' + TOOLTIP_G_CLASS + '._' + layerIndex);\n                if (g.empty()) {\n                    g = tooltips.append('g').attr('class', TOOLTIP_G_CLASS + ' _' + layerIndex);\n                }\n\n                createRefLines(g);\n\n                var dots = g.selectAll('circle.' + DOT_CIRCLE_CLASS)\n                    .data(points, dc.pluck('x'));\n\n                dots.enter()\n                    .append('circle')\n                    .attr('class', DOT_CIRCLE_CLASS)\n                    .attr('r', getDotRadius())\n                    .style('fill-opacity', _dataPointFillOpacity)\n                    .style('stroke-opacity', _dataPointStrokeOpacity)\n                    .attr('fill', _chart.getColor)\n                    .on('mousemove', function () {\n                        var dot = d3.select(this);\n                        showDot(dot);\n                        showRefLines(dot, g);\n                    })\n                    .on('mouseout', function () {\n                        var dot = d3.select(this);\n                        hideDot(dot);\n                        hideRefLines(g);\n                    });\n\n                dots.call(renderTitle, d);\n\n                dc.transition(dots, _chart.transitionDuration())\n                    .attr('cx', function (d) {\n                        return dc.utils.safeNumber(_chart.x()(d.x));\n                    })\n                    .attr('cy', function (d) {\n                        return dc.utils.safeNumber(_chart.y()(d.y + d.y0));\n                    })\n                    .attr('fill', _chart.getColor);\n\n                dots.exit().remove();\n            });\n        }\n    }\n\n    _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n    }, false);\n\n    function drawLabels (layers) {\n        layers.each(function (d, layerIndex) {\n            var layer = d3.select(this);\n            var labels = layer.selectAll('text.lineLabel')\n                .data(d.values, dc.pluck('x'));\n\n            labels.enter()\n                .append('text')\n                .attr('class', 'lineLabel')\n                .attr('text-anchor', 'middle');\n\n            dc.transition(labels, _chart.transitionDuration())\n                .attr('x', function (d) {\n                    return dc.utils.safeNumber(_chart.x()(d.x));\n                })\n                .attr('y', function (d) {\n                    var y = _chart.y()(d.y + d.y0) - LABEL_PADDING;\n                    return dc.utils.safeNumber(y);\n                })\n                .text(function (d) {\n                    return _chart.label()(d);\n                });\n\n            dc.transition(labels.exit(), _chart.transitionDuration())\n                .attr('height', 0)\n                .remove();\n        });\n    }\n\n    function createRefLines (g) {\n        var yRefLine = g.select('path.' + Y_AXIS_REF_LINE_CLASS).empty() ?\n            g.append('path').attr('class', Y_AXIS_REF_LINE_CLASS) : g.select('path.' + Y_AXIS_REF_LINE_CLASS);\n        yRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n\n        var xRefLine = g.select('path.' + X_AXIS_REF_LINE_CLASS).empty() ?\n            g.append('path').attr('class', X_AXIS_REF_LINE_CLASS) : g.select('path.' + X_AXIS_REF_LINE_CLASS);\n        xRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n    }\n\n    function showDot (dot) {\n        dot.style('fill-opacity', 0.8);\n        dot.style('stroke-opacity', 0.8);\n        dot.attr('r', _dotRadius);\n        return dot;\n    }\n\n    function showRefLines (dot, g) {\n        var x = dot.attr('cx');\n        var y = dot.attr('cy');\n        var yAxisX = (_chart._yAxisX() - _chart.margins().left);\n        var yAxisRefPathD = 'M' + yAxisX + ' ' + y + 'L' + (x) + ' ' + (y);\n        var xAxisRefPathD = 'M' + x + ' ' + _chart.yAxisHeight() + 'L' + x + ' ' + y;\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', '').attr('d', yAxisRefPathD);\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', '').attr('d', xAxisRefPathD);\n    }\n\n    function getDotRadius () {\n        return _dataPointRadius || _dotRadius;\n    }\n\n    function hideDot (dot) {\n        dot.style('fill-opacity', _dataPointFillOpacity)\n            .style('stroke-opacity', _dataPointStrokeOpacity)\n            .attr('r', getDotRadius());\n    }\n\n    function hideRefLines (g) {\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', 'none');\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', 'none');\n    }\n\n    function renderTitle (dot, d) {\n        if (_chart.renderTitle()) {\n            dot.select('title').remove();\n            dot.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n    }\n\n    /**\n     * Turn on/off the mouseover behavior of an individual data point which renders a circle and x/y axis\n     * dashed lines back to each respective axis.  This is ignored if the chart\n     * {@link dc.coordinateGridMixin#brushOn brush} is on\n     * @method xyTipsOn\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Boolean} [xyTipsOn=false]\n     * @returns {Boolean|dc.lineChart}\n     */\n    _chart.xyTipsOn = function (xyTipsOn) {\n        if (!arguments.length) {\n            return _xyTipsOn;\n        }\n        _xyTipsOn = xyTipsOn;\n        return _chart;\n    };\n\n    /**\n     * Get or set the radius (in px) for dots displayed on the data points.\n     * @method dotRadius\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Number} [dotRadius=5]\n     * @returns {Number|dc.lineChart}\n     */\n    _chart.dotRadius = function (dotRadius) {\n        if (!arguments.length) {\n            return _dotRadius;\n        }\n        _dotRadius = dotRadius;\n        return _chart;\n    };\n\n    /**\n     * Always show individual dots for each datapoint.\n     *\n     * If `options` is falsy, it disables data point rendering. If no `options` are provided, the\n     * current `options` values are instead returned.\n     * @method renderDataPoints\n     * @memberof dc.lineChart\n     * @instance\n     * @example\n     * chart.renderDataPoints({radius: 2, fillOpacity: 0.8, strokeOpacity: 0.8})\n     * @param  {{fillOpacity: Number, strokeOpacity: Number, radius: Number}} [options={fillOpacity: 0.8, strokeOpacity: 0.8, radius: 2}]\n     * @returns {{fillOpacity: Number, strokeOpacity: Number, radius: Number}|dc.lineChart}\n     */\n    _chart.renderDataPoints = function (options) {\n        if (!arguments.length) {\n            return {\n                fillOpacity: _dataPointFillOpacity,\n                strokeOpacity: _dataPointStrokeOpacity,\n                radius: _dataPointRadius\n            };\n        } else if (!options) {\n            _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n            _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n            _dataPointRadius = null;\n        } else {\n            _dataPointFillOpacity = options.fillOpacity || 0.8;\n            _dataPointStrokeOpacity = options.strokeOpacity || 0.8;\n            _dataPointRadius = options.radius || 2;\n        }\n        return _chart;\n    };\n\n    function colorFilter (color, dashstyle, inv) {\n        return function () {\n            var item = d3.select(this);\n            var match = (item.attr('stroke') === color &&\n                item.attr('stroke-dasharray') === ((dashstyle instanceof Array) ?\n                    dashstyle.join(',') : null)) || item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n    }\n\n    _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n            _chart.g().selectAll('path.line, path.area')\n                .classed('highlight', colorFilter(d.color, d.dashstyle))\n                .classed('fadeout', colorFilter(d.color, d.dashstyle, true));\n        }\n    };\n\n    _chart.legendReset = function () {\n        _chart.g().selectAll('path.line, path.area')\n            .classed('highlight', false)\n            .classed('fadeout', false);\n    };\n\n    dc.override(_chart, 'legendables', function () {\n        var legendables = _chart._legendables();\n        if (!_dashStyle) {\n            return legendables;\n        }\n        return legendables.map(function (l) {\n            l.dashstyle = _dashStyle;\n            return l;\n        });\n    });\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The data count widget is a simple widget designed to display the number of records selected by the\n * current filters out of the total number of records in the data set. Once created the data count widget\n * will automatically update the text content of child elements with the following classes:\n *\n * * `.total-count` - total number of records\n * * `.filter-count` - number of records matched by the current filters\n *\n * Note: this widget works best for the specific case of showing the number of records out of a\n * total. If you want a more general-purpose numeric display, please use the\n * {@link dc.numberDisplay} widget instead.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class dataCount\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * var ndx = crossfilter(data);\n * var all = ndx.groupAll();\n *\n * dc.dataCount('.dc-data-count')\n *     .dimension(ndx)\n *     .group(all);\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataCount}\n */\ndc.dataCount = function (parent, chartGroup) {\n    var _formatNumber = d3.format(',d');\n    var _chart = dc.baseMixin({});\n    var _html = {some: '', all: ''};\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending how many items are\n     * selected. The text `%total-count` will replaced with the total number of records, and the text\n     * `%filter-count` will be replaced with the number of selected records.\n     * - all: HTML template to use if all items are selected\n     * - some: HTML template to use if not all items are selected\n     * @method html\n     * @memberof dc.dataCount\n     * @instance\n     * @example\n     * counter.html({\n     *      some: '%filter-count out of %total-count records selected',\n     *      all: 'All records selected. Click on charts to apply filters'\n     * })\n     * @param {{some:String, all: String}} [options]\n     * @returns {{some:String, all: String}|dc.dataCount}\n     */\n    _chart.html = function (options) {\n        if (!arguments.length) {\n            return _html;\n        }\n        if (options.all) {\n            _html.all = options.all;\n        }\n        if (options.some) {\n            _html.some = options.some;\n        }\n        return _chart;\n    };\n\n    /**\n     * Gets or sets an optional function to format the filter count and total count.\n     * @method formatNumber\n     * @memberof dc.dataCount\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n     * @example\n     * counter.formatNumber(d3.format('.2g'))\n     * @param {Function} [formatter=d3.format('.2g')]\n     * @returns {Function|dc.dataCount}\n     */\n    _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n            return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        var tot = _chart.dimension().size(),\n            val = _chart.group().value();\n        var all = _formatNumber(tot);\n        var selected = _formatNumber(val);\n\n        if ((tot === val) && (_html.all !== '')) {\n            _chart.root().html(_html.all.replace('%total-count', all).replace('%filter-count', selected));\n        } else if (_html.some !== '') {\n            _chart.root().html(_html.some.replace('%total-count', all).replace('%filter-count', selected));\n        } else {\n            _chart.selectAll('.total-count').text(all);\n            _chart.selectAll('.filter-count').text(selected);\n        }\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The data table is a simple widget designed to list crossfilter focused data set (rows being\n * filtered) in a good old tabular fashion.\n *\n * Note: Unlike other charts, the data table (and data grid chart) use the {@link dc.dataTable#group group} attribute as a\n * keying function for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data\n * together in groups.  Do not pass in a crossfilter group as this will not work.\n *\n * Another interesting feature of the data table is that you can pass a crossfilter group to the `dimension`, as\n * long as you specify the {@link dc.dataTable#order order} as `d3.descending`, since the data\n * table will use `dimension.top()` to fetch the data in that case, and the method is equally\n * supported on the crossfilter group as the crossfilter dimension.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.io/dc.js/examples/table-on-aggregated-data.html dataTable on a crossfilter group}\n * ({@link https://github.com/dc-js/dc.js/blob/develop/web/examples/table-on-aggregated-data.html source})\n * @class dataTable\n * @memberof dc\n * @mixes dc.baseMixin\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataTable}\n */\ndc.dataTable = function (parent, chartGroup) {\n    var LABEL_CSS_CLASS = 'dc-table-label';\n    var ROW_CSS_CLASS = 'dc-table-row';\n    var COLUMN_CSS_CLASS = 'dc-table-column';\n    var GROUP_CSS_CLASS = 'dc-table-group';\n    var HEAD_CSS_CLASS = 'dc-table-head';\n\n    var _chart = dc.baseMixin({});\n\n    var _size = 25;\n    var _columns = [];\n    var _sortBy = function (d) {\n        return d;\n    };\n    var _order = d3.ascending;\n    var _beginSlice = 0;\n    var _endSlice;\n    var _showGroups = true;\n\n    _chart._doRender = function () {\n        _chart.selectAll('tbody').remove();\n\n        renderRows(renderGroups());\n\n        return _chart;\n    };\n\n    _chart._doColumnValueFormat = function (v, d) {\n        return ((typeof v === 'function') ?\n                v(d) :                          // v as function\n                ((typeof v === 'string') ?\n                 d[v] :                         // v is field name string\n                 v.format(d)                        // v is Object, use fn (element 2)\n                )\n               );\n    };\n\n    _chart._doColumnHeaderFormat = function (d) {\n        // if 'function', convert to string representation\n        // show a string capitalized\n        // if an object then display its label string as-is.\n        return (typeof d === 'function') ?\n                _chart._doColumnHeaderFnToString(d) :\n                ((typeof d === 'string') ?\n                 _chart._doColumnHeaderCapitalize(d) : String(d.label));\n    };\n\n    _chart._doColumnHeaderCapitalize = function (s) {\n        // capitalize\n        return s.charAt(0).toUpperCase() + s.slice(1);\n    };\n\n    _chart._doColumnHeaderFnToString = function (f) {\n        // columnString(f) {\n        var s = String(f);\n        var i1 = s.indexOf('return ');\n        if (i1 >= 0) {\n            var i2 = s.lastIndexOf(';');\n            if (i2 >= 0) {\n                s = s.substring(i1 + 7, i2);\n                var i3 = s.indexOf('numberFormat');\n                if (i3 >= 0) {\n                    s = s.replace('numberFormat', '');\n                }\n            }\n        }\n        return s;\n    };\n\n    function renderGroups () {\n        // The 'original' example uses all 'functions'.\n        // If all 'functions' are used, then don't remove/add a header, and leave\n        // the html alone. This preserves the functionality of earlier releases.\n        // A 2nd option is a string representing a field in the data.\n        // A third option is to supply an Object such as an array of 'information', and\n        // supply your own _doColumnHeaderFormat and _doColumnValueFormat functions to\n        // create what you need.\n        var bAllFunctions = true;\n        _columns.forEach(function (f) {\n            bAllFunctions = bAllFunctions & (typeof f === 'function');\n        });\n\n        if (!bAllFunctions) {\n            // ensure one thead\n            var thead = _chart.selectAll('thead').data([0]);\n            thead.enter().append('thead');\n            thead.exit().remove();\n\n            // with one tr\n            var headrow = thead.selectAll('tr').data([0]);\n            headrow.enter().append('tr');\n            headrow.exit().remove();\n\n            // with a th for each column\n            var headcols = headrow.selectAll('th')\n                .data(_columns);\n            headcols.enter().append('th');\n            headcols.exit().remove();\n\n            headcols\n                .attr('class', HEAD_CSS_CLASS)\n                    .html(function (d) {\n                        return (_chart._doColumnHeaderFormat(d));\n\n                    });\n        }\n\n        var groups = _chart.root().selectAll('tbody')\n            .data(nestEntries(), function (d) {\n                return _chart.keyAccessor()(d);\n            });\n\n        var rowGroup = groups\n            .enter()\n            .append('tbody');\n\n        if (_showGroups === true) {\n            rowGroup\n                .append('tr')\n                .attr('class', GROUP_CSS_CLASS)\n                    .append('td')\n                    .attr('class', LABEL_CSS_CLASS)\n                    .attr('colspan', _columns.length)\n                    .html(function (d) {\n                        return _chart.keyAccessor()(d);\n                    });\n        }\n\n        groups.exit().remove();\n\n        return rowGroup;\n    }\n\n    function nestEntries () {\n        var entries;\n        if (_order === d3.ascending) {\n            entries = _chart.dimension().bottom(_size);\n        } else {\n            entries = _chart.dimension().top(_size);\n        }\n\n        return d3.nest()\n            .key(_chart.group())\n            .sortKeys(_order)\n            .entries(entries.sort(function (a, b) {\n                return _order(_sortBy(a), _sortBy(b));\n            }).slice(_beginSlice, _endSlice));\n    }\n\n    function renderRows (groups) {\n        var rows = groups.order()\n            .selectAll('tr.' + ROW_CSS_CLASS)\n            .data(function (d) {\n                return d.values;\n            });\n\n        var rowEnter = rows.enter()\n            .append('tr')\n            .attr('class', ROW_CSS_CLASS);\n\n        _columns.forEach(function (v, i) {\n            rowEnter.append('td')\n                .attr('class', COLUMN_CSS_CLASS + ' _' + i)\n                .html(function (d) {\n                    return _chart._doColumnValueFormat(v, d);\n                });\n        });\n\n        rows.exit().remove();\n\n        return rows;\n    }\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set the group function for the data table. The group function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n     * to split rows into groups.\n     *\n     * Do not pass in a crossfilter group as this will not work.\n     * @method group\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * // group rows by the value of their field\n     * chart\n     *     .group(function(d) { return d.field; })\n     * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n     * @returns {Function|dc.dataTable}\n     */\n\n    /**\n     * Get or set the table size which determines the number of rows displayed by the widget.\n     * @method size\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number} [size=25]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.size = function (size) {\n        if (!arguments.length) {\n            return _size;\n        }\n        _size = size;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed\n     * by the widget. Useful when implementing pagination.\n     *\n     * Note: the sortBy function will determine how the rows are ordered for pagination purposes.\n\n     * See the {@link http://dc-js.github.io/dc.js/examples/table-pagination.html table pagination example}\n     * to see how to implement the pagination user interface using `beginSlice` and `endSlice`.\n     * @method beginSlice\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n            return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the\n     * widget. Useful when implementing pagination. See {@link dc.dataTable#beginSlice `beginSlice`} for more information.\n     * @method endSlice\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number|undefined} [endSlice=undefined]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n            return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set column functions. The data table widget supports several methods of specifying the\n     * columns to display.\n     *\n     * The original method uses an array of functions to generate dynamic columns. Column functions\n     * are simple javascript functions with only one input argument `d` which represents a row in\n     * the data set. The return value of these functions will be used to generate the content for\n     * each cell. However, this method requires the HTML for the table to have a fixed set of column\n     * headers.\n     *\n     * <pre><code>chart.columns([\n     *     function(d) { return d.date; },\n     *     function(d) { return d.open; },\n     *     function(d) { return d.close; },\n     *     function(d) { return numberFormat(d.close - d.open); },\n     *     function(d) { return d.volume; }\n     * ]);\n     * </code></pre>\n     *\n     * In the second method, you can list the columns to read from the data without specifying it as\n     * a function, except where necessary (ie, computed columns).  Note the data element name is\n     * capitalized when displayed in the table header. You can also mix in functions as necessary,\n     * using the third `{label, format}` form, as shown below.\n     *\n     * <pre><code>chart.columns([\n     *     \"date\",    // d[\"date\"], ie, a field accessor; capitalized automatically\n     *     \"open\",    // ...\n     *     \"close\",   // ...\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) {\n     *             return numberFormat(d.close - d.open);\n     *         }\n     *     },\n     *     \"volume\"   // d[\"volume\"], ie, a field accessor; capitalized automatically\n     * ]);\n     * </code></pre>\n     *\n     * In the third example, we specify all fields using the `{label, format}` method:\n     * <pre><code>chart.columns([\n     *     {\n     *         label: \"Date\",\n     *         format: function (d) { return d.date; }\n     *     },\n     *     {\n     *         label: \"Open\",\n     *         format: function (d) { return numberFormat(d.open); }\n     *     },\n     *     {\n     *         label: \"Close\",\n     *         format: function (d) { return numberFormat(d.close); }\n     *     },\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) { return numberFormat(d.close - d.open); }\n     *     },\n     *     {\n     *         label: \"Volume\",\n     *         format: function (d) { return d.volume; }\n     *     }\n     * ]);\n     * </code></pre>\n     *\n     * You may wish to override the dataTable functions `_doColumnHeaderCapitalize` and\n     * `_doColumnHeaderFnToString`, which are used internally to translate the column information or\n     * function into a displayed header. The first one is used on the \"string\" column specifier; the\n     * second is used to transform a stringified function into something displayable. For the Stock\n     * example, the function for Change becomes the table header **d.close - d.open**.\n     *\n     * Finally, you can even specify a completely different form of column definition. To do this,\n     * override `_chart._doColumnHeaderFormat` and `_chart._doColumnValueFormat` Be aware that\n     * fields without numberFormat specification will be displayed just as they are stored in the\n     * data, unformatted.\n     * @method columns\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Array<Function>} [columns=[]]\n     * @returns {Array<Function>}|dc.dataTable}\n     */\n    _chart.columns = function (columns) {\n        if (!arguments.length) {\n            return _columns;\n        }\n        _columns = columns;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at row level and returns a\n     * particular field to be sorted by.\n     * @method sortBy\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortBy=identity function]\n     * @returns {Function|dc.dataTable}\n     */\n    _chart.sortBy = function (sortBy) {\n        if (!arguments.length) {\n            return _sortBy;\n        }\n        _sortBy = sortBy;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort order. If the order is `d3.ascending`, the data table will use\n     * `dimension().bottom()` to fetch the data; otherwise it will use `dimension().top()`\n     * @method order\n     * @memberof dc.dataTable\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|dc.dataTable}\n     */\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    /**\n     * Get or set if group rows will be shown. The dataTable {@link dc.dataTable#group group}\n     * function must be specified even if groups are not shown.\n     * @method showGroups\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * chart\n     *     .group([value], [name])\n     *     .showGroups(true|false);\n     * @param {Boolean} [showGroups=true]\n     * @returns {Boolean|dc.dataTable}\n     */\n    _chart.showGroups = function (showGroups) {\n        if (!arguments.length) {\n            return _showGroups;\n        }\n        _showGroups = showGroups;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Data grid is a simple widget designed to list the filtered records, providing\n * a simple way to define how the items are displayed.\n *\n * Note: Unlike other charts, the data grid chart (and data table) use the {@link dc.dataGrid#group group} attribute as a keying function\n * for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data together in groups.\n * Do not pass in a crossfilter group as this will not work.\n *\n * Examples:\n * - {@link http://europarl.me/dc.js/web/ep/index.html List of members of the european parliament}\n * @class dataGrid\n * @memberof dc\n * @mixes dc.baseMixin\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataGrid}\n */\ndc.dataGrid = function (parent, chartGroup) {\n    var LABEL_CSS_CLASS = 'dc-grid-label';\n    var ITEM_CSS_CLASS = 'dc-grid-item';\n    var GROUP_CSS_CLASS = 'dc-grid-group';\n    var GRID_CSS_CLASS = 'dc-grid-top';\n\n    var _chart = dc.baseMixin({});\n\n    var _size = 999; // shouldn't be needed, but you might\n    var _html = function (d) { return 'you need to provide an html() handling param:  ' + JSON.stringify(d); };\n    var _sortBy = function (d) {\n        return d;\n    };\n    var _order = d3.ascending;\n    var _beginSlice = 0, _endSlice;\n\n    var _htmlGroup = function (d) {\n        return '<div class=\\'' + GROUP_CSS_CLASS + '\\'><h1 class=\\'' + LABEL_CSS_CLASS + '\\'>' +\n            _chart.keyAccessor()(d) + '</h1></div>';\n    };\n\n    _chart._doRender = function () {\n        _chart.selectAll('div.' + GRID_CSS_CLASS).remove();\n\n        renderItems(renderGroups());\n\n        return _chart;\n    };\n\n    function renderGroups () {\n        var groups = _chart.root().selectAll('div.' + GRID_CSS_CLASS)\n                .data(nestEntries(), function (d) {\n                    return _chart.keyAccessor()(d);\n                });\n\n        var itemGroup = groups\n                .enter()\n                .append('div')\n                .attr('class', GRID_CSS_CLASS);\n\n        if (_htmlGroup) {\n            itemGroup\n                .html(function (d) {\n                    return _htmlGroup(d);\n                });\n        }\n\n        groups.exit().remove();\n        return itemGroup;\n    }\n\n    function nestEntries () {\n        var entries = _chart.dimension().top(_size);\n\n        return d3.nest()\n            .key(_chart.group())\n            .sortKeys(_order)\n            .entries(entries.sort(function (a, b) {\n                return _order(_sortBy(a), _sortBy(b));\n            }).slice(_beginSlice, _endSlice));\n    }\n\n    function renderItems (groups) {\n        var items = groups.order()\n                .selectAll('div.' + ITEM_CSS_CLASS)\n                .data(function (d) {\n                    return d.values;\n                });\n\n        items.enter()\n            .append('div')\n            .attr('class', ITEM_CSS_CLASS)\n            .html(function (d) {\n                return _html(d);\n            });\n\n        items.exit().remove();\n\n        return items;\n    }\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set the group function for the data grid. The group function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n     * to split rows into groups.\n     *\n     * Do not pass in a crossfilter group as this will not work.\n     * @method group\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * // group rows by the value of their field\n     * chart\n     *     .group(function(d) { return d.field; })\n     * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n     * @returns {Function|dc.dataTable}\n     */\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @method beginSlice\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n            return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @method endSlice\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [endSlice]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n            return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the grid size which determines the number of items displayed by the widget.\n     * @method size\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [size=999]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.size = function (size) {\n        if (!arguments.length) {\n            return _size;\n        }\n        _size = size;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that formats an item. The data grid widget uses a\n     * function to generate dynamic html. Use your favourite templating engine or\n     * generate the string directly.\n     * @method html\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.html(function (d) { return '<div class='item '+data.exampleCategory+''>'+data.exampleString+'</div>';});\n     * @param {Function} [html]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.html = function (html) {\n        if (!arguments.length) {\n            return _html;\n        }\n        _html = html;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that formats a group label.\n     * @method htmlGroup\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.htmlGroup (function (d) { return '<h2>'.d.key . 'with ' . d.values.length .' items</h2>'});\n     * @param {Function} [htmlGroup]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.htmlGroup = function (htmlGroup) {\n        if (!arguments.length) {\n            return _htmlGroup;\n        }\n        _htmlGroup = htmlGroup;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at the item\n     * level and returns a particular field to be sorted.\n     * @method sortBy\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortByFunction]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.sortBy = function (sortByFunction) {\n        if (!arguments.length) {\n            return _sortBy;\n        }\n        _sortBy = sortByFunction;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort the order function.\n     * @method order\n     * @memberof dc.dataGrid\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A concrete implementation of a general purpose bubble chart that allows data visualization using the\n * following dimensions:\n * - x axis position\n * - y axis position\n * - bubble radius\n * - color\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n * @class bubbleChart\n * @memberof dc\n * @mixes dc.bubbleMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a bubble chart under #chart-container1 element using the default global chart group\n * var bubbleChart1 = dc.bubbleChart('#chart-container1');\n * // create a bubble chart under #chart-container2 element using chart group A\n * var bubbleChart2 = dc.bubbleChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.bubbleChart}\n */\ndc.bubbleChart = function (parent, chartGroup) {\n    var _chart = dc.bubbleMixin(dc.coordinateGridMixin({}));\n\n    _chart.transitionDuration(750);\n\n    _chart.transitionDelay(0);\n\n    var bubbleLocator = function (d) {\n        return 'translate(' + (bubbleX(d)) + ',' + (bubbleY(d)) + ')';\n    };\n\n    _chart.plotData = function () {\n        _chart.calculateRadiusDomain();\n        _chart.r().range([_chart.MIN_RADIUS, _chart.xAxisLength() * _chart.maxBubbleRelativeSize()]);\n\n        var data = _chart.data();\n        var bubbleG = _chart.chartBodyG().selectAll('g.' + _chart.BUBBLE_NODE_CLASS)\n                .data(data, function (d) { return d.key; });\n        if (_chart.sortBubbleSize()) {\n            // update dom order based on sort\n            bubbleG.order();\n        }\n\n        renderNodes(bubbleG);\n\n        updateNodes(bubbleG);\n\n        removeNodes(bubbleG);\n\n        _chart.fadeDeselectedArea();\n    };\n\n    function renderNodes (bubbleG) {\n        var bubbleGEnter = bubbleG.enter().append('g');\n\n        bubbleGEnter\n            .attr('class', _chart.BUBBLE_NODE_CLASS)\n            .attr('transform', bubbleLocator)\n            .append('circle').attr('class', function (d, i) {\n                return _chart.BUBBLE_CLASS + ' _' + i;\n            })\n            .on('click', _chart.onClick)\n            .attr('fill', _chart.getColor)\n            .attr('r', 0);\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay())\n            .select('circle.' + _chart.BUBBLE_CLASS)\n            .attr('r', function (d) {\n                return _chart.bubbleR(d);\n            })\n            .attr('opacity', function (d) {\n                return (_chart.bubbleR(d) > 0) ? 1 : 0;\n            });\n\n        _chart._doRenderLabel(bubbleGEnter);\n\n        _chart._doRenderTitles(bubbleGEnter);\n    }\n\n    function updateNodes (bubbleG) {\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', bubbleLocator)\n            .select('circle.' + _chart.BUBBLE_CLASS)\n            .attr('fill', _chart.getColor)\n            .attr('r', function (d) {\n                return _chart.bubbleR(d);\n            })\n            .attr('opacity', function (d) {\n                return (_chart.bubbleR(d) > 0) ? 1 : 0;\n            });\n\n        _chart.doUpdateLabels(bubbleG);\n        _chart.doUpdateTitles(bubbleG);\n    }\n\n    function removeNodes (bubbleG) {\n        bubbleG.exit().remove();\n    }\n\n    function bubbleX (d) {\n        var x = _chart.x()(_chart.keyAccessor()(d));\n        if (isNaN(x)) {\n            x = 0;\n        }\n        return x;\n    }\n\n    function bubbleY (d) {\n        var y = _chart.y()(_chart.valueAccessor()(d));\n        if (isNaN(y)) {\n            y = 0;\n        }\n        return y;\n    }\n\n    _chart.renderBrush = function () {\n        // override default x axis brush from parent chart\n    };\n\n    _chart.redrawBrush = function () {\n        // override default x axis brush from parent chart\n        _chart.fadeDeselectedArea();\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Composite charts are a special kind of chart that render multiple charts on the same Coordinate\n * Grid. You can overlay (compose) different bar/line/area charts in a single composite chart to\n * achieve some quite flexible charting effects.\n * @class compositeChart\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a composite chart under #chart-container1 element using the default global chart group\n * var compositeChart1 = dc.compositeChart('#chart-container1');\n * // create a composite chart under #chart-container2 element using chart group A\n * var compositeChart2 = dc.compositeChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.compositeChart}\n */\ndc.compositeChart = function (parent, chartGroup) {\n\n    var SUB_CHART_CLASS = 'sub';\n    var DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING = 12;\n\n    var _chart = dc.coordinateGridMixin({});\n    var _children = [];\n\n    var _childOptions = {};\n\n    var _shareColors = false,\n        _shareTitle = true,\n        _alignYAxes = false;\n\n    var _rightYAxis = d3.svg.axis(),\n        _rightYAxisLabel = 0,\n        _rightYAxisLabelPadding = DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING,\n        _rightY,\n        _rightAxisGridLines = false;\n\n    _chart._mandatoryAttributes([]);\n    _chart.transitionDuration(500);\n    _chart.transitionDelay(0);\n\n    dc.override(_chart, '_generateG', function () {\n        var g = this.__generateG();\n\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n\n            generateChildG(child, i);\n\n            if (!child.dimension()) {\n                child.dimension(_chart.dimension());\n            }\n            if (!child.group()) {\n                child.group(_chart.group());\n            }\n\n            child.chartGroup(_chart.chartGroup());\n            child.svg(_chart.svg());\n            child.xUnits(_chart.xUnits());\n            child.transitionDuration(_chart.transitionDuration(), _chart.transitionDelay());\n            child.brushOn(_chart.brushOn());\n            child.renderTitle(_chart.renderTitle());\n            child.elasticX(_chart.elasticX());\n        }\n\n        return g;\n    });\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n        var brushIsEmpty = _chart.brushIsEmpty(extent);\n\n        for (var i = 0; i < _children.length; ++i) {\n            _children[i].replaceFilter(brushIsEmpty ? null : extent);\n        }\n    };\n\n    _chart._prepareYAxis = function () {\n        var left = (leftYAxisChildren().length !== 0);\n        var right = (rightYAxisChildren().length !== 0);\n        var ranges = calculateYAxisRanges(left, right);\n\n        if (left) { prepareLeftYAxis(ranges); }\n        if (right) { prepareRightYAxis(ranges); }\n\n        if (leftYAxisChildren().length > 0 && !_rightAxisGridLines) {\n            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _chart.y(), _chart.yAxis());\n        } else if (rightYAxisChildren().length > 0) {\n            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _rightY, _rightYAxis);\n        }\n    };\n\n    _chart.renderYAxis = function () {\n        if (leftYAxisChildren().length !== 0) {\n            _chart.renderYAxisAt('y', _chart.yAxis(), _chart.margins().left);\n            _chart.renderYAxisLabel('y', _chart.yAxisLabel(), -90);\n        }\n\n        if (rightYAxisChildren().length !== 0) {\n            _chart.renderYAxisAt('yr', _chart.rightYAxis(), _chart.width() - _chart.margins().right);\n            _chart.renderYAxisLabel('yr', _chart.rightYAxisLabel(), 90, _chart.width() - _rightYAxisLabelPadding);\n        }\n    };\n\n    function calculateYAxisRanges (left, right) {\n        var lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax;\n        var ranges;\n\n        if (left) {\n            lyAxisMin = yAxisMin();\n            lyAxisMax = yAxisMax();\n        }\n\n        if (right) {\n            ryAxisMin = rightYAxisMin();\n            ryAxisMax = rightYAxisMax();\n        }\n\n        if (_chart.alignYAxes() && left && right) {\n            ranges = alignYAxisRanges(lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax);\n        }\n\n        return ranges || {\n            lyAxisMin: lyAxisMin,\n            lyAxisMax: lyAxisMax,\n            ryAxisMin: ryAxisMin,\n            ryAxisMax: ryAxisMax\n        };\n    }\n\n    function alignYAxisRanges (lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax) {\n        // since the two series will share a zero, each Y is just a multiple\n        // of the other. and the ratio should be the ratio of the ranges of the\n        // input data, so that they come out the same height. so we just min/max\n\n        // note: both ranges already include zero due to the stack mixin (#667)\n        // if #667 changes, we can reconsider whether we want data height or\n        // height from zero to be equal. and it will be possible for the axes\n        // to be aligned but not visible.\n        var extentRatio = (ryAxisMax - ryAxisMin) / (lyAxisMax - lyAxisMin);\n\n        return {\n            lyAxisMin: Math.min(lyAxisMin, ryAxisMin / extentRatio),\n            lyAxisMax: Math.max(lyAxisMax, ryAxisMax / extentRatio),\n            ryAxisMin: Math.min(ryAxisMin, lyAxisMin * extentRatio),\n            ryAxisMax: Math.max(ryAxisMax, lyAxisMax * extentRatio)\n        };\n    }\n\n    function prepareRightYAxis (ranges) {\n        var needDomain = _chart.rightY() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n        if (_chart.rightY() === undefined) {\n            _chart.rightY(d3.scale.linear());\n        }\n        if (needDomain) {\n            _chart.rightY().domain([ranges.ryAxisMin, ranges.ryAxisMax]);\n        }\n        if (needRange) {\n            _chart.rightY().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.rightY().range([_chart.yAxisHeight(), 0]);\n        _chart.rightYAxis(_chart.rightYAxis().scale(_chart.rightY()));\n\n        _chart.rightYAxis().orient('right');\n    }\n\n    function prepareLeftYAxis (ranges) {\n        var needDomain = _chart.y() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n        if (_chart.y() === undefined) {\n            _chart.y(d3.scale.linear());\n        }\n        if (needDomain) {\n            _chart.y().domain([ranges.lyAxisMin, ranges.lyAxisMax]);\n        }\n        if (needRange) {\n            _chart.y().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.y().range([_chart.yAxisHeight(), 0]);\n        _chart.yAxis(_chart.yAxis().scale(_chart.y()));\n\n        _chart.yAxis().orient('left');\n    }\n\n    function generateChildG (child, i) {\n        child._generateG(_chart.g());\n        child.g().attr('class', SUB_CHART_CLASS + ' _' + i);\n    }\n\n    _chart.plotData = function () {\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n\n            if (!child.g()) {\n                generateChildG(child, i);\n            }\n\n            if (_shareColors) {\n                child.colors(_chart.colors());\n            }\n\n            child.x(_chart.x());\n\n            child.xAxis(_chart.xAxis());\n\n            if (child.useRightYAxis()) {\n                child.y(_chart.rightY());\n                child.yAxis(_chart.rightYAxis());\n            } else {\n                child.y(_chart.y());\n                child.yAxis(_chart.yAxis());\n            }\n\n            child.plotData();\n\n            child._activateRenderlets();\n        }\n    };\n\n    /**\n     * Get or set whether to draw gridlines from the right y axis.  Drawing from the left y axis is the\n     * default behavior. This option is only respected when subcharts with both left and right y-axes\n     * are present.\n     * @method useRightAxisGridLines\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [useRightAxisGridLines=false]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.useRightAxisGridLines = function (useRightAxisGridLines) {\n        if (!arguments) {\n            return _rightAxisGridLines;\n        }\n\n        _rightAxisGridLines = useRightAxisGridLines;\n        return _chart;\n    };\n\n    /**\n     * Get or set chart-specific options for all child charts. This is equivalent to calling\n     * {@link dc.baseMixin#options .options} on each child chart.\n     * @method childOptions\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Object} [childOptions]\n     * @returns {Object|dc.compositeChart}\n     */\n    _chart.childOptions = function (childOptions) {\n        if (!arguments.length) {\n            return _childOptions;\n        }\n        _childOptions = childOptions;\n        _children.forEach(function (child) {\n            child.options(_childOptions);\n        });\n        return _chart;\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n            child.brush(_chart.brush());\n            child.fadeDeselectedArea();\n        }\n    };\n\n    /**\n     * Set or get the right y axis label.\n     * @method rightYAxisLabel\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {String} [rightYAxisLabel]\n     * @param {Number} [padding]\n     * @returns {String|dc.compositeChart}\n     */\n    _chart.rightYAxisLabel = function (rightYAxisLabel, padding) {\n        if (!arguments.length) {\n            return _rightYAxisLabel;\n        }\n        _rightYAxisLabel = rightYAxisLabel;\n        _chart.margins().right -= _rightYAxisLabelPadding;\n        _rightYAxisLabelPadding = (padding === undefined) ? DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING : padding;\n        _chart.margins().right += _rightYAxisLabelPadding;\n        return _chart;\n    };\n\n    /**\n     * Combine the given charts into one single composite coordinate grid chart.\n     * @method compose\n     * @memberof dc.compositeChart\n     * @instance\n     * @example\n     * moveChart.compose([\n     *     // when creating sub-chart you need to pass in the parent chart\n     *     dc.lineChart(moveChart)\n     *         .group(indexAvgByMonthGroup) // if group is missing then parent's group will be used\n     *         .valueAccessor(function (d){return d.value.avg;})\n     *         // most of the normal functions will continue to work in a composed chart\n     *         .renderArea(true)\n     *         .stack(monthlyMoveGroup, function (d){return d.value;})\n     *         .title(function (d){\n     *             var value = d.value.avg?d.value.avg:d.value;\n     *             if(isNaN(value)) value = 0;\n     *             return dateFormat(d.key) + '\\n' + numberFormat(value);\n     *         }),\n     *     dc.barChart(moveChart)\n     *         .group(volumeByMonthGroup)\n     *         .centerBar(true)\n     * ]);\n     * @param {Array<Chart>} [subChartArray]\n     * @returns {dc.compositeChart}\n     */\n    _chart.compose = function (subChartArray) {\n        _children = subChartArray;\n        _children.forEach(function (child) {\n            child.height(_chart.height());\n            child.width(_chart.width());\n            child.margins(_chart.margins());\n\n            if (_shareTitle) {\n                child.title(_chart.title());\n            }\n\n            child.options(_childOptions);\n        });\n        return _chart;\n    };\n\n    /**\n     * Returns the child charts which are composed into the composite chart.\n     * @method children\n     * @memberof dc.compositeChart\n     * @instance\n     * @returns {Array<dc.baseMixin>}\n     */\n    _chart.children = function () {\n        return _children;\n    };\n\n    /**\n     * Get or set color sharing for the chart. If set, the {@link dc.colorMixin#colors .colors()} value from this chart\n     * will be shared with composed children. Additionally if the child chart implements\n     * Stackable and has not set a custom .colorAccessor, then it will generate a color\n     * specific to its order in the composition.\n     * @method shareColors\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [shareColors=false]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.shareColors = function (shareColors) {\n        if (!arguments.length) {\n            return _shareColors;\n        }\n        _shareColors = shareColors;\n        return _chart;\n    };\n\n    /**\n     * Get or set title sharing for the chart. If set, the {@link dc.baseMixin#title .title()} value from\n     * this chart will be shared with composed children.\n     * @method shareTitle\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [shareTitle=true]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.shareTitle = function (shareTitle) {\n        if (!arguments.length) {\n            return _shareTitle;\n        }\n        _shareTitle = shareTitle;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y scale for the right axis. The right y scale is typically automatically\n     * generated by the chart implementation.\n     * @method rightY\n     * @memberof dc.compositeChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|dc.compositeChart}\n     */\n    _chart.rightY = function (yScale) {\n        if (!arguments.length) {\n            return _rightY;\n        }\n        _rightY = yScale;\n        _chart.rescale();\n        return _chart;\n    };\n\n    /**\n     * Get or set alignment between left and right y axes. A line connecting '0' on both y axis\n     * will be parallel to x axis. This only has effect when {@link #dc.coordinateGridMixin+elasticY elasticY} is true.\n     * @method alignYAxes\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [alignYAxes=false]\n     * @returns {Chart}\n     */\n    _chart.alignYAxes = function (alignYAxes) {\n        if (!arguments.length) {\n            return _alignYAxes;\n        }\n        _alignYAxes = alignYAxes;\n        _chart.rescale();\n        return _chart;\n    };\n\n    function leftYAxisChildren () {\n        return _children.filter(function (child) {\n            return !child.useRightYAxis();\n        });\n    }\n\n    function rightYAxisChildren () {\n        return _children.filter(function (child) {\n            return child.useRightYAxis();\n        });\n    }\n\n    function getYAxisMin (charts) {\n        return charts.map(function (c) {\n            return c.yAxisMin();\n        });\n    }\n\n    delete _chart.yAxisMin;\n    function yAxisMin () {\n        return d3.min(getYAxisMin(leftYAxisChildren()));\n    }\n\n    function rightYAxisMin () {\n        return d3.min(getYAxisMin(rightYAxisChildren()));\n    }\n\n    function getYAxisMax (charts) {\n        return charts.map(function (c) {\n            return c.yAxisMax();\n        });\n    }\n\n    delete _chart.yAxisMax;\n    function yAxisMax () {\n        return dc.utils.add(d3.max(getYAxisMax(leftYAxisChildren())), _chart.yAxisPadding());\n    }\n\n    function rightYAxisMax () {\n        return dc.utils.add(d3.max(getYAxisMax(rightYAxisChildren())), _chart.yAxisPadding());\n    }\n\n    function getAllXAxisMinFromChildCharts () {\n        return _children.map(function (c) {\n            return c.xAxisMin();\n        });\n    }\n\n    dc.override(_chart, 'xAxisMin', function () {\n        return dc.utils.subtract(d3.min(getAllXAxisMinFromChildCharts()), _chart.xAxisPadding());\n    });\n\n    function getAllXAxisMaxFromChildCharts () {\n        return _children.map(function (c) {\n            return c.xAxisMax();\n        });\n    }\n\n    dc.override(_chart, 'xAxisMax', function () {\n        return dc.utils.add(d3.max(getAllXAxisMaxFromChildCharts()), _chart.xAxisPadding());\n    });\n\n    _chart.legendables = function () {\n        return _children.reduce(function (items, child) {\n            if (_shareColors) {\n                child.colors(_chart.colors());\n            }\n            items.push.apply(items, child.legendables());\n            return items;\n        }, []);\n    };\n\n    _chart.legendHighlight = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n            var child = _children[j];\n            child.legendHighlight(d);\n        }\n    };\n\n    _chart.legendReset = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n            var child = _children[j];\n            child.legendReset(d);\n        }\n    };\n\n    _chart.legendToggle = function () {\n        console.log('composite should not be getting legendToggle itself');\n    };\n\n    /**\n     * Set or get the right y axis used by the composite chart. This function is most useful when y\n     * axis customization is required. The y axis in dc.js is an instance of a [d3 axis\n     * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis) therefore it supports any valid\n     * d3 axis manipulation.\n     *\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.\n     * @method rightYAxis\n     * @memberof dc.compositeChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize y axis tick format\n     * chart.rightYAxis().tickFormat(function (v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.rightYAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [rightYAxis]\n     * @returns {d3.svg.axis|dc.compositeChart}\n     */\n    _chart.rightYAxis = function (rightYAxis) {\n        if (!arguments.length) {\n            return _rightYAxis;\n        }\n        _rightYAxis = rightYAxis;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A series chart is a chart that shows multiple series of data overlaid on one chart, where the\n * series is specified in the data. It is a specialization of Composite Chart and inherits all\n * composite features other than recomposing the chart.\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/series.html Series Chart}\n * @class seriesChart\n * @memberof dc\n * @mixes dc.compositeChart\n * @example\n * // create a series chart under #chart-container1 element using the default global chart group\n * var seriesChart1 = dc.seriesChart(\"#chart-container1\");\n * // create a series chart under #chart-container2 element using chart group A\n * var seriesChart2 = dc.seriesChart(\"#chart-container2\", \"chartGroupA\");\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.seriesChart}\n */\ndc.seriesChart = function (parent, chartGroup) {\n    var _chart = dc.compositeChart(parent, chartGroup);\n\n    function keySort (a, b) {\n        return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n    }\n\n    var _charts = {};\n    var _chartFunction = dc.lineChart;\n    var _seriesAccessor;\n    var _seriesSort = d3.ascending;\n    var _valueSort = keySort;\n\n    _chart._mandatoryAttributes().push('seriesAccessor', 'chart');\n    _chart.shareColors(true);\n\n    _chart._preprocessData = function () {\n        var keep = [];\n        var childrenChanged;\n        var nester = d3.nest().key(_seriesAccessor);\n        if (_seriesSort) {\n            nester.sortKeys(_seriesSort);\n        }\n        if (_valueSort) {\n            nester.sortValues(_valueSort);\n        }\n        var nesting = nester.entries(_chart.data());\n        var children =\n            nesting.map(function (sub, i) {\n                var subChart = _charts[sub.key] || _chartFunction.call(_chart, _chart, chartGroup, sub.key, i);\n                if (!_charts[sub.key]) {\n                    childrenChanged = true;\n                }\n                _charts[sub.key] = subChart;\n                keep.push(sub.key);\n                return subChart\n                    .dimension(_chart.dimension())\n                    .group({all: d3.functor(sub.values)}, sub.key)\n                    .keyAccessor(_chart.keyAccessor())\n                    .valueAccessor(_chart.valueAccessor())\n                    .brushOn(_chart.brushOn());\n            });\n        // this works around the fact compositeChart doesn't really\n        // have a removal interface\n        Object.keys(_charts)\n            .filter(function (c) {return keep.indexOf(c) === -1;})\n            .forEach(function (c) {\n                clearChart(c);\n                childrenChanged = true;\n            });\n        _chart._compose(children);\n        if (childrenChanged && _chart.legend()) {\n            _chart.legend().render();\n        }\n    };\n\n    function clearChart (c) {\n        if (_charts[c].g()) {\n            _charts[c].g().remove();\n        }\n        delete _charts[c];\n    }\n\n    function resetChildren () {\n        Object.keys(_charts).map(clearChart);\n        _charts = {};\n    }\n\n    /**\n     * Get or set the chart function, which generates the child charts.\n     * @method chart\n     * @memberof dc.seriesChart\n     * @instance\n     * @example\n     * // put interpolation on the line charts used for the series\n     * chart.chart(function(c) { return dc.lineChart(c).interpolate('basis'); })\n     * // do a scatter series chart\n     * chart.chart(dc.scatterPlot)\n     * @param {Function} [chartFunction=dc.lineChart]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.chart = function (chartFunction) {\n        if (!arguments.length) {\n            return _chartFunction;\n        }\n        _chartFunction = chartFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Get or set accessor function for the displayed series. Given a datum, this function\n     * should return the series that datum belongs to.\n     * @method seriesAccessor\n     * @memberof dc.seriesChart\n     * @instance\n     * @example\n     * // simple series accessor\n     * chart.seriesAccessor(function(d) { return \"Expt: \" + d.key[0]; })\n     * @param {Function} [accessor]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.seriesAccessor = function (accessor) {\n        if (!arguments.length) {\n            return _seriesAccessor;\n        }\n        _seriesAccessor = accessor;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * Get or set a function to sort the list of series by, given series values.\n     * @method seriesSort\n     * @memberof dc.seriesChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.seriesSort(d3.descending);\n     * @param {Function} [sortFunction=d3.ascending]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.seriesSort = function (sortFunction) {\n        if (!arguments.length) {\n            return _seriesSort;\n        }\n        _seriesSort = sortFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * Get or set a function to sort each series values by. By default this is the key accessor which,\n     * for example, will ensure a lineChart series connects its points in increasing key/x order,\n     * rather than haphazardly.\n     * @method valueSort\n     * @memberof dc.seriesChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * // Default value sort\n     * _chart.valueSort(function keySort (a, b) {\n     *     return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n     * });\n     * @param {Function} [sortFunction]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.valueSort = function (sortFunction) {\n        if (!arguments.length) {\n            return _valueSort;\n        }\n        _valueSort = sortFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    // make compose private\n    _chart._compose = _chart.compose;\n    delete _chart.compose;\n\n    return _chart;\n};\n\n/**\n * The geo choropleth chart is designed as an easy way to create a crossfilter driven choropleth map\n * from GeoJson data. This chart implementation was inspired by\n * {@link http://bl.ocks.org/4060606 the great d3 choropleth example}.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n * @class geoChoroplethChart\n * @memberof dc\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a choropleth chart under '#us-chart' element using the default global chart group\n * var chart1 = dc.geoChoroplethChart('#us-chart');\n * // create a choropleth chart under '#us-chart2' element using chart group A\n * var chart2 = dc.compositeChart('#us-chart2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.geoChoroplethChart}\n */\ndc.geoChoroplethChart = function (parent, chartGroup) {\n    var _chart = dc.colorMixin(dc.baseMixin({}));\n\n    _chart.colorAccessor(function (d) {\n        return d || 0;\n    });\n\n    var _geoPath = d3.geo.path();\n    var _projectionFlag;\n\n    var _geoJsons = [];\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n            var states = _chart.svg().append('g')\n                .attr('class', 'layer' + layerIndex);\n\n            var regionG = states.selectAll('g.' + geoJson(layerIndex).name)\n                .data(geoJson(layerIndex).data)\n                .enter()\n                .append('g')\n                .attr('class', geoJson(layerIndex).name);\n\n            regionG\n                .append('path')\n                .attr('fill', 'white')\n                .attr('d', _geoPath);\n\n            regionG.append('title');\n\n            plotData(layerIndex);\n        }\n        _projectionFlag = false;\n    };\n\n    function plotData (layerIndex) {\n        var data = generateLayeredData();\n\n        if (isDataLayer(layerIndex)) {\n            var regionG = renderRegionG(layerIndex);\n\n            renderPaths(regionG, layerIndex, data);\n\n            renderTitle(regionG, layerIndex, data);\n        }\n    }\n\n    function generateLayeredData () {\n        var data = {};\n        var groupAll = _chart.data();\n        for (var i = 0; i < groupAll.length; ++i) {\n            data[_chart.keyAccessor()(groupAll[i])] = _chart.valueAccessor()(groupAll[i]);\n        }\n        return data;\n    }\n\n    function isDataLayer (layerIndex) {\n        return geoJson(layerIndex).keyAccessor;\n    }\n\n    function renderRegionG (layerIndex) {\n        var regionG = _chart.svg()\n            .selectAll(layerSelector(layerIndex))\n            .classed('selected', function (d) {\n                return isSelected(layerIndex, d);\n            })\n            .classed('deselected', function (d) {\n                return isDeselected(layerIndex, d);\n            })\n            .attr('class', function (d) {\n                var layerNameClass = geoJson(layerIndex).name;\n                var regionClass = dc.utils.nameToId(geoJson(layerIndex).keyAccessor(d));\n                var baseClasses = layerNameClass + ' ' + regionClass;\n                if (isSelected(layerIndex, d)) {\n                    baseClasses += ' selected';\n                }\n                if (isDeselected(layerIndex, d)) {\n                    baseClasses += ' deselected';\n                }\n                return baseClasses;\n            });\n        return regionG;\n    }\n\n    function layerSelector (layerIndex) {\n        return 'g.layer' + layerIndex + ' g.' + geoJson(layerIndex).name;\n    }\n\n    function isSelected (layerIndex, d) {\n        return _chart.hasFilter() && _chart.hasFilter(getKey(layerIndex, d));\n    }\n\n    function isDeselected (layerIndex, d) {\n        return _chart.hasFilter() && !_chart.hasFilter(getKey(layerIndex, d));\n    }\n\n    function getKey (layerIndex, d) {\n        return geoJson(layerIndex).keyAccessor(d);\n    }\n\n    function geoJson (index) {\n        return _geoJsons[index];\n    }\n\n    function renderPaths (regionG, layerIndex, data) {\n        var paths = regionG\n            .select('path')\n            .attr('fill', function () {\n                var currentFill = d3.select(this).attr('fill');\n                if (currentFill) {\n                    return currentFill;\n                }\n                return 'none';\n            })\n            .on('click', function (d) {\n                return _chart.onClick(d, layerIndex);\n            });\n\n        dc.transition(paths, _chart.transitionDuration(), _chart.transitionDelay()).attr('fill', function (d, i) {\n            return _chart.getColor(data[geoJson(layerIndex).keyAccessor(d)], i);\n        });\n    }\n\n    _chart.onClick = function (d, layerIndex) {\n        var selectedRegion = geoJson(layerIndex).keyAccessor(d);\n        dc.events.trigger(function () {\n            _chart.filter(selectedRegion);\n            _chart.redrawGroup();\n        });\n    };\n\n    function renderTitle (regionG, layerIndex, data) {\n        if (_chart.renderTitle()) {\n            regionG.selectAll('title').text(function (d) {\n                var key = getKey(layerIndex, d);\n                var value = data[key];\n                return _chart.title()({key: key, value: value});\n            });\n        }\n    }\n\n    _chart._doRedraw = function () {\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n            plotData(layerIndex);\n            if (_projectionFlag) {\n                _chart.svg().selectAll('g.' + geoJson(layerIndex).name + ' path').attr('d', _geoPath);\n            }\n        }\n        _projectionFlag = false;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Use this function to insert a new GeoJson map layer. This function can be invoked multiple times\n     * if you have multiple GeoJson data layers to render on top of each other. If you overlay multiple\n     * layers with the same name the new overlay will override the existing one.\n     * @method overlayGeoJson\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link http://geojson.org/ GeoJSON}\n     * @see {@link https://github.com/topojson/topojson/wiki TopoJSON}\n     * @see {@link https://github.com/topojson/topojson-1.x-api-reference/blob/master/API-Reference.md#wiki-feature topojson.feature}\n     * @example\n     * // insert a layer for rendering US states\n     * chart.overlayGeoJson(statesJson.features, 'state', function(d) {\n     *      return d.properties.name;\n     * });\n     * @param {geoJson} json - a geojson feed\n     * @param {String} name - name of the layer\n     * @param {Function} keyAccessor - accessor function used to extract 'key' from the GeoJson data. The key extracted by\n     * this function should match the keys returned by the crossfilter groups.\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.overlayGeoJson = function (json, name, keyAccessor) {\n        for (var i = 0; i < _geoJsons.length; ++i) {\n            if (_geoJsons[i].name === name) {\n                _geoJsons[i].data = json;\n                _geoJsons[i].keyAccessor = keyAccessor;\n                return _chart;\n            }\n        }\n        _geoJsons.push({name: name, data: json, keyAccessor: keyAccessor});\n        return _chart;\n    };\n\n    /**\n     * Set custom geo projection function. See the available\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3 geo projection functions}.\n     * @method projection\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3.geo.projection}\n     * @see {@link https://github.com/d3/d3-geo-projection Extended d3.geo.projection}\n     * @param {d3.projection} [projection=d3.geo.albersUsa()]\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.projection = function (projection) {\n        _geoPath.projection(projection);\n        _projectionFlag = true;\n        return _chart;\n    };\n\n    /**\n     * Returns all GeoJson layers currently registered with this chart. The returned array is a\n     * reference to this chart's internal data structure, so any modification to this array will also\n     * modify this chart's internal registration.\n     * @method geoJsons\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @returns {Array<{name:String, data: Object, accessor: Function}>}\n     */\n    _chart.geoJsons = function () {\n        return _geoJsons;\n    };\n\n    /**\n     * Returns the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path} object used to\n     * render the projection and features.  Can be useful for figuring out the bounding box of the\n     * feature set and thus a way to calculate scale and translation for the projection.\n     * @method geoPath\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path}\n     * @returns {d3.geo.path}\n     */\n    _chart.geoPath = function () {\n        return _geoPath;\n    };\n\n    /**\n     * Remove a GeoJson layer from this chart by name\n     * @method removeGeoJson\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @param {String} name\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.removeGeoJson = function (name) {\n        var geoJsons = [];\n\n        for (var i = 0; i < _geoJsons.length; ++i) {\n            var layer = _geoJsons[i];\n            if (layer.name !== name) {\n                geoJsons.push(layer);\n            }\n        }\n\n        _geoJsons = geoJsons;\n\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The bubble overlay chart is quite different from the typical bubble chart. With the bubble overlay\n * chart you can arbitrarily place bubbles on an existing svg or bitmap image, thus changing the\n * typical x and y positioning while retaining the capability to visualize data using bubble radius\n * and coloring.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class bubbleOverlay\n * @memberof dc\n * @mixes dc.bubbleMixin\n * @mixes dc.baseMixin\n * @example\n * // create a bubble overlay chart on top of the '#chart-container1 svg' element using the default global chart group\n * var bubbleChart1 = dc.bubbleOverlayChart('#chart-container1').svg(d3.select('#chart-container1 svg'));\n * // create a bubble overlay chart on top of the '#chart-container2 svg' element using chart group A\n * var bubbleChart2 = dc.compositeChart('#chart-container2', 'chartGroupA').svg(d3.select('#chart-container2 svg'));\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.bubbleOverlay}\n */\ndc.bubbleOverlay = function (parent, chartGroup) {\n    var BUBBLE_OVERLAY_CLASS = 'bubble-overlay';\n    var BUBBLE_NODE_CLASS = 'node';\n    var BUBBLE_CLASS = 'bubble';\n\n    /**\n     * **mandatory**\n     *\n     * Set the underlying svg image element. Unlike other dc charts this chart will not generate a svg\n     * element; therefore the bubble overlay chart will not work if this function is not invoked. If the\n     * underlying image is a bitmap, then an empty svg will need to be created on top of the image.\n     * @method svg\n     * @memberof dc.bubbleOverlay\n     * @instance\n     * @example\n     * // set up underlying svg element\n     * chart.svg(d3.select('#chart svg'));\n     * @param {SVGElement|d3.selection} [imageElement]\n     * @returns {dc.bubbleOverlay}\n     */\n    var _chart = dc.bubbleMixin(dc.baseMixin({}));\n    var _g;\n    var _points = [];\n\n    _chart.transitionDuration(750);\n\n    _chart.transitionDelay(0);\n\n    _chart.radiusValueAccessor(function (d) {\n        return d.value;\n    });\n\n    /**\n     * **mandatory**\n     *\n     * Set up a data point on the overlay. The name of a data point should match a specific 'key' among\n     * data groups generated using keyAccessor.  If a match is found (point name <-> data group key)\n     * then a bubble will be generated at the position specified by the function. x and y\n     * value specified here are relative to the underlying svg.\n     * @method point\n     * @memberof dc.bubbleOverlay\n     * @instance\n     * @param {String} name\n     * @param {Number} x\n     * @param {Number} y\n     * @returns {dc.bubbleOverlay}\n     */\n    _chart.point = function (name, x, y) {\n        _points.push({name: name, x: x, y: y});\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        _g = initOverlayG();\n\n        _chart.r().range([_chart.MIN_RADIUS, _chart.width() * _chart.maxBubbleRelativeSize()]);\n\n        initializeBubbles();\n\n        _chart.fadeDeselectedArea();\n\n        return _chart;\n    };\n\n    function initOverlayG () {\n        _g = _chart.select('g.' + BUBBLE_OVERLAY_CLASS);\n        if (_g.empty()) {\n            _g = _chart.svg().append('g').attr('class', BUBBLE_OVERLAY_CLASS);\n        }\n        return _g;\n    }\n\n    function initializeBubbles () {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n            var nodeG = getNodeG(point, data);\n\n            var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n\n            if (circle.empty()) {\n                circle = nodeG.append('circle')\n                    .attr('class', BUBBLE_CLASS)\n                    .attr('r', 0)\n                    .attr('fill', _chart.getColor)\n                    .on('click', _chart.onClick);\n            }\n\n            dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('r', function (d) {\n                    return _chart.bubbleR(d);\n                });\n\n            _chart._doRenderLabel(nodeG);\n\n            _chart._doRenderTitles(nodeG);\n        });\n    }\n\n    function mapData () {\n        var data = {};\n        _chart.data().forEach(function (datum) {\n            data[_chart.keyAccessor()(datum)] = datum;\n        });\n        return data;\n    }\n\n    function getNodeG (point, data) {\n        var bubbleNodeClass = BUBBLE_NODE_CLASS + ' ' + dc.utils.nameToId(point.name);\n\n        var nodeG = _g.select('g.' + dc.utils.nameToId(point.name));\n\n        if (nodeG.empty()) {\n            nodeG = _g.append('g')\n                .attr('class', bubbleNodeClass)\n                .attr('transform', 'translate(' + point.x + ',' + point.y + ')');\n        }\n\n        nodeG.datum(data[point.name]);\n\n        return nodeG;\n    }\n\n    _chart._doRedraw = function () {\n        updateBubbles();\n\n        _chart.fadeDeselectedArea();\n\n        return _chart;\n    };\n\n    function updateBubbles () {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n            var nodeG = getNodeG(point, data);\n\n            var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n\n            dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('r', function (d) {\n                    return _chart.bubbleR(d);\n                })\n                .attr('fill', _chart.getColor);\n\n            _chart.doUpdateLabels(nodeG);\n\n            _chart.doUpdateTitles(nodeG);\n        });\n    }\n\n    _chart.debug = function (flag) {\n        if (flag) {\n            var debugG = _chart.select('g.' + dc.constants.DEBUG_GROUP_CLASS);\n\n            if (debugG.empty()) {\n                debugG = _chart.svg()\n                    .append('g')\n                    .attr('class', dc.constants.DEBUG_GROUP_CLASS);\n            }\n\n            var debugText = debugG.append('text')\n                .attr('x', 10)\n                .attr('y', 20);\n\n            debugG\n                .append('rect')\n                .attr('width', _chart.width())\n                .attr('height', _chart.height())\n                .on('mousemove', function () {\n                    var position = d3.mouse(debugG.node());\n                    var msg = position[0] + ', ' + position[1];\n                    debugText.text(msg);\n                });\n        } else {\n            _chart.selectAll('.debug').remove();\n        }\n\n        return _chart;\n    };\n\n    _chart.anchor(parent, chartGroup);\n\n    return _chart;\n};\n\n/**\n * Concrete row chart implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class rowChart\n * @memberof dc\n * @mixes dc.capMixin\n * @mixes dc.marginMixin\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a row chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.rowChart('#chart-container1');\n * // create a row chart under #chart-container2 element using chart group A\n * var chart2 = dc.rowChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.rowChart}\n */\ndc.rowChart = function (parent, chartGroup) {\n\n    var _g;\n\n    var _labelOffsetX = 10;\n    var _labelOffsetY = 15;\n    var _hasLabelOffsetY = false;\n    var _dyOffset = '0.35em';  // this helps center labels https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#svg_text\n    var _titleLabelOffsetX = 2;\n\n    var _gap = 5;\n\n    var _fixedBarHeight = false;\n    var _rowCssClass = 'row';\n    var _titleRowCssClass = 'titlerow';\n    var _renderTitleLabel = false;\n\n    var _chart = dc.capMixin(dc.marginMixin(dc.colorMixin(dc.baseMixin({}))));\n\n    var _x;\n\n    var _elasticX;\n\n    var _xAxis = d3.svg.axis().orient('bottom');\n\n    var _rowData;\n\n    _chart.rowsCap = _chart.cap;\n\n    function calculateAxisScale () {\n        if (!_x || _elasticX) {\n            var extent = d3.extent(_rowData, _chart.cappedValueAccessor);\n            if (extent[0] > 0) {\n                extent[0] = 0;\n            }\n            if (extent[1] < 0) {\n                extent[1] = 0;\n            }\n            _x = d3.scale.linear().domain(extent)\n                .range([0, _chart.effectiveWidth()]);\n        }\n        _xAxis.scale(_x);\n    }\n\n    function drawAxis () {\n        var axisG = _g.select('g.axis');\n\n        calculateAxisScale();\n\n        if (axisG.empty()) {\n            axisG = _g.append('g').attr('class', 'axis');\n        }\n        axisG.attr('transform', 'translate(0, ' + _chart.effectiveHeight() + ')');\n\n        dc.transition(axisG, _chart.transitionDuration(), _chart.transitionDelay())\n            .call(_xAxis);\n    }\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg()\n            .append('g')\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n\n        drawChart();\n\n        return _chart;\n    };\n\n    _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n    });\n\n    _chart.label(_chart.cappedKeyAccessor);\n\n    /**\n     * Gets or sets the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}.\n     * @method x\n     * @memberof dc.rowChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}\n     * @param {d3.scale} [scale]\n     * @returns {d3.scale|dc.rowChart}\n     */\n    _chart.x = function (scale) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = scale;\n        return _chart;\n    };\n\n    function drawGridLines () {\n        _g.selectAll('g.tick')\n            .select('line.grid-line')\n            .remove();\n\n        _g.selectAll('g.tick')\n            .append('line')\n            .attr('class', 'grid-line')\n            .attr('x1', 0)\n            .attr('y1', 0)\n            .attr('x2', 0)\n            .attr('y2', function () {\n                return -_chart.effectiveHeight();\n            });\n    }\n\n    function drawChart () {\n        _rowData = _chart.data();\n\n        drawAxis();\n        drawGridLines();\n\n        var rows = _g.selectAll('g.' + _rowCssClass)\n            .data(_rowData);\n\n        createElements(rows);\n        removeElements(rows);\n        updateElements(rows);\n    }\n\n    function createElements (rows) {\n        var rowEnter = rows.enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return _rowCssClass + ' _' + i;\n            });\n\n        rowEnter.append('rect').attr('width', 0);\n\n        createLabels(rowEnter);\n    }\n\n    function removeElements (rows) {\n        rows.exit().remove();\n    }\n\n    function rootValue () {\n        var root = _x(0);\n        return (root === -Infinity || root !== root) ? _x(1) : root;\n    }\n\n    function updateElements (rows) {\n        var n = _rowData.length;\n\n        var height;\n        if (!_fixedBarHeight) {\n            height = (_chart.effectiveHeight() - (n + 1) * _gap) / n;\n        } else {\n            height = _fixedBarHeight;\n        }\n\n        // vertically align label in center unless they override the value via property setter\n        if (!_hasLabelOffsetY) {\n            _labelOffsetY = height / 2;\n        }\n\n        var rect = rows.attr('transform', function (d, i) {\n                return 'translate(0,' + ((i + 1) * _gap + i * height) + ')';\n            }).select('rect')\n            .attr('height', height)\n            .attr('fill', _chart.getColor)\n            .on('click', onClick)\n            .classed('deselected', function (d) {\n                return (_chart.hasFilter()) ? !isSelectedRow(d) : false;\n            })\n            .classed('selected', function (d) {\n                return (_chart.hasFilter()) ? isSelectedRow(d) : false;\n            });\n\n        dc.transition(rect, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('width', function (d) {\n                return Math.abs(rootValue() - _x(_chart.valueAccessor()(d)));\n            })\n            .attr('transform', translateX);\n\n        createTitles(rows);\n        updateLabels(rows);\n    }\n\n    function createTitles (rows) {\n        if (_chart.renderTitle()) {\n            rows.select('title').remove();\n            rows.append('title').text(_chart.title());\n        }\n    }\n\n    function createLabels (rowEnter) {\n        if (_chart.renderLabel()) {\n            rowEnter.append('text')\n                .on('click', onClick);\n        }\n        if (_chart.renderTitleLabel()) {\n            rowEnter.append('text')\n                .attr('class', _titleRowCssClass)\n                .on('click', onClick);\n        }\n    }\n\n    function updateLabels (rows) {\n        if (_chart.renderLabel()) {\n            var lab = rows.select('text')\n                .attr('x', _labelOffsetX)\n                .attr('y', _labelOffsetY)\n                .attr('dy', _dyOffset)\n                .on('click', onClick)\n                .attr('class', function (d, i) {\n                    return _rowCssClass + ' _' + i;\n                })\n                .text(function (d) {\n                    return _chart.label()(d);\n                });\n            dc.transition(lab, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', translateX);\n        }\n        if (_chart.renderTitleLabel()) {\n            var titlelab = rows.select('.' + _titleRowCssClass)\n                    .attr('x', _chart.effectiveWidth() - _titleLabelOffsetX)\n                    .attr('y', _labelOffsetY)\n                    .attr('dy', _dyOffset)\n                    .attr('text-anchor', 'end')\n                    .on('click', onClick)\n                    .attr('class', function (d, i) {\n                        return _titleRowCssClass + ' _' + i ;\n                    })\n                    .text(function (d) {\n                        return _chart.title()(d);\n                    });\n            dc.transition(titlelab, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', translateX);\n        }\n    }\n\n    /**\n     * Turn on/off Title label rendering (values) using SVG style of text-anchor 'end'.\n     * @method renderTitleLabel\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Boolean} [renderTitleLabel=false]\n     * @returns {Boolean|dc.rowChart}\n     */\n    _chart.renderTitleLabel = function (renderTitleLabel) {\n        if (!arguments.length) {\n            return _renderTitleLabel;\n        }\n        _renderTitleLabel = renderTitleLabel;\n        return _chart;\n    };\n\n    function onClick (d) {\n        _chart.onClick(d);\n    }\n\n    function translateX (d) {\n        var x = _x(_chart.cappedValueAccessor(d)),\n            x0 = rootValue(),\n            s = x > x0 ? x0 : x;\n        return 'translate(' + s + ',0)';\n    }\n\n    _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n    };\n\n    /**\n     * Get the x axis for the row chart instance.  Note: not settable for row charts.\n     * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object}\n     * documention for more information.\n     * @method xAxis\n     * @memberof dc.rowChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function (v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * @returns {d3.svg.axis}\n     */\n    _chart.xAxis = function () {\n        return _xAxis;\n    };\n\n    /**\n     * Get or set the fixed bar height. Default is [false] which will auto-scale bars.\n     * For example, if you want to fix the height for a specific number of bars (useful in TopN charts)\n     * you could fix height as follows (where count = total number of bars in your TopN and gap is\n     * your vertical gap space).\n     * @method fixedBarHeight\n     * @memberof dc.rowChart\n     * @instance\n     * @example\n     * chart.fixedBarHeight( chartheight - (count + 1) * gap / count);\n     * @param {Boolean|Number} [fixedBarHeight=false]\n     * @returns {Boolean|Number|dc.rowChart}\n     */\n    _chart.fixedBarHeight = function (fixedBarHeight) {\n        if (!arguments.length) {\n            return _fixedBarHeight;\n        }\n        _fixedBarHeight = fixedBarHeight;\n        return _chart;\n    };\n\n    /**\n     * Get or set the vertical gap space between rows on a particular row chart instance.\n     * @method gap\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [gap=5]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _chart;\n    };\n\n    /**\n     * Get or set the elasticity on x axis. If this attribute is set to true, then the x axis will rescle to auto-fit the\n     * data range when filtered.\n     * @method elasticX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Boolean} [elasticX]\n     * @returns {Boolean|dc.rowChart}\n     */\n    _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n            return _elasticX;\n        }\n        _elasticX = elasticX;\n        return _chart;\n    };\n\n    /**\n     * Get or set the x offset (horizontal space to the top left corner of a row) for labels on a particular row chart.\n     * @method labelOffsetX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [labelOffsetX=10]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.labelOffsetX = function (labelOffsetX) {\n        if (!arguments.length) {\n            return _labelOffsetX;\n        }\n        _labelOffsetX = labelOffsetX;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y offset (vertical space to the top left corner of a row) for labels on a particular row chart.\n     * @method labelOffsetY\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [labelOffsety=15]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.labelOffsetY = function (labelOffsety) {\n        if (!arguments.length) {\n            return _labelOffsetY;\n        }\n        _labelOffsetY = labelOffsety;\n        _hasLabelOffsetY = true;\n        return _chart;\n    };\n\n    /**\n     * Get of set the x offset (horizontal space between right edge of row and right edge or text.\n     * @method titleLabelOffsetX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [titleLabelOffsetX=2]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.titleLabelOffsetX = function (titleLabelOffsetX) {\n        if (!arguments.length) {\n            return _titleLabelOffsetX;\n        }\n        _titleLabelOffsetX = titleLabelOffsetX;\n        return _chart;\n    };\n\n    function isSelectedRow (d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d));\n    }\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Legend is a attachable widget that can be added to other dc charts to render horizontal legend\n * labels.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class legend\n * @memberof dc\n * @example\n * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n * @returns {dc.legend}\n */\ndc.legend = function () {\n    var LABEL_GAP = 2;\n\n    var _legend = {},\n        _parent,\n        _x = 0,\n        _y = 0,\n        _itemHeight = 12,\n        _gap = 5,\n        _horizontal = false,\n        _legendWidth = 560,\n        _itemWidth = 70,\n        _autoItemWidth = false,\n        _legendText = dc.pluck('name'),\n        _maxItems;\n\n    var _g;\n\n    _legend.parent = function (p) {\n        if (!arguments.length) {\n            return _parent;\n        }\n        _parent = p;\n        return _legend;\n    };\n\n    _legend.render = function () {\n        _parent.svg().select('g.dc-legend').remove();\n        _g = _parent.svg().append('g')\n            .attr('class', 'dc-legend')\n            .attr('transform', 'translate(' + _x + ',' + _y + ')');\n        var legendables = _parent.legendables();\n\n        if (_maxItems !== undefined) {\n            legendables = legendables.slice(0, _maxItems);\n        }\n\n        var itemEnter = _g.selectAll('g.dc-legend-item')\n            .data(legendables)\n            .enter()\n            .append('g')\n            .attr('class', 'dc-legend-item')\n            .on('mouseover', function (d) {\n                _parent.legendHighlight(d);\n            })\n            .on('mouseout', function (d) {\n                _parent.legendReset(d);\n            })\n            .on('click', function (d) {\n                d.chart.legendToggle(d);\n            });\n\n        _g.selectAll('g.dc-legend-item')\n            .classed('fadeout', function (d) {\n                return d.chart.isLegendableHidden(d);\n            });\n\n        if (legendables.some(dc.pluck('dashstyle'))) {\n            itemEnter\n                .append('line')\n                .attr('x1', 0)\n                .attr('y1', _itemHeight / 2)\n                .attr('x2', _itemHeight)\n                .attr('y2', _itemHeight / 2)\n                .attr('stroke-width', 2)\n                .attr('stroke-dasharray', dc.pluck('dashstyle'))\n                .attr('stroke', dc.pluck('color'));\n        } else {\n            itemEnter\n                .append('rect')\n                .attr('width', _itemHeight)\n                .attr('height', _itemHeight)\n                .attr('fill', function (d) {return d ? d.color : 'blue';});\n        }\n\n        itemEnter.append('text')\n                .text(_legendText)\n                .attr('x', _itemHeight + LABEL_GAP)\n                .attr('y', function () {\n                    return _itemHeight / 2 + (this.clientHeight ? this.clientHeight : 13) / 2 - 2;\n                });\n\n        var _cumulativeLegendTextWidth = 0;\n        var row = 0;\n        itemEnter.attr('transform', function (d, i) {\n            if (_horizontal) {\n                var itemWidth   = _autoItemWidth === true ? this.getBBox().width + _gap : _itemWidth;\n                if ((_cumulativeLegendTextWidth + itemWidth) > _legendWidth && _cumulativeLegendTextWidth > 0) {\n                    ++row;\n                    _cumulativeLegendTextWidth = 0;\n                }\n                var translateBy = 'translate(' + _cumulativeLegendTextWidth + ',' + row * legendItemHeight() + ')';\n                _cumulativeLegendTextWidth += itemWidth;\n                return translateBy;\n            } else {\n                return 'translate(0,' + i * legendItemHeight() + ')';\n            }\n        });\n    };\n\n    function legendItemHeight () {\n        return _gap + _itemHeight;\n    }\n\n    /**\n     * Set or get x coordinate for legend widget.\n     * @method x\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [x=0]\n     * @returns {Number|dc.legend}\n     */\n    _legend.x = function (x) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = x;\n        return _legend;\n    };\n\n    /**\n     * Set or get y coordinate for legend widget.\n     * @method y\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [y=0]\n     * @returns {Number|dc.legend}\n     */\n    _legend.y = function (y) {\n        if (!arguments.length) {\n            return _y;\n        }\n        _y = y;\n        return _legend;\n    };\n\n    /**\n     * Set or get gap between legend items.\n     * @method gap\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [gap=5]\n     * @returns {Number|dc.legend}\n     */\n    _legend.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _legend;\n    };\n\n    /**\n     * Set or get legend item height.\n     * @method itemHeight\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [itemHeight=12]\n     * @returns {Number|dc.legend}\n     */\n    _legend.itemHeight = function (itemHeight) {\n        if (!arguments.length) {\n            return _itemHeight;\n        }\n        _itemHeight = itemHeight;\n        return _legend;\n    };\n\n    /**\n     * Position legend horizontally instead of vertically.\n     * @method horizontal\n     * @memberof dc.legend\n     * @instance\n     * @param  {Boolean} [horizontal=false]\n     * @returns {Boolean|dc.legend}\n     */\n    _legend.horizontal = function (horizontal) {\n        if (!arguments.length) {\n            return _horizontal;\n        }\n        _horizontal = horizontal;\n        return _legend;\n    };\n\n    /**\n     * Maximum width for horizontal legend.\n     * @method legendWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [legendWidth=500]\n     * @returns {Number|dc.legend}\n     */\n    _legend.legendWidth = function (legendWidth) {\n        if (!arguments.length) {\n            return _legendWidth;\n        }\n        _legendWidth = legendWidth;\n        return _legend;\n    };\n\n    /**\n     * Legend item width for horizontal legend.\n     * @method itemWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [itemWidth=70]\n     * @returns {Number|dc.legend}\n     */\n    _legend.itemWidth = function (itemWidth) {\n        if (!arguments.length) {\n            return _itemWidth;\n        }\n        _itemWidth = itemWidth;\n        return _legend;\n    };\n\n    /**\n     * Turn automatic width for legend items on or off. If true, {@link dc.legend#itemWidth itemWidth} is ignored.\n     * This setting takes into account the {@link dc.legend#gap gap}.\n     * @method autoItemWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Boolean} [autoItemWidth=false]\n     * @returns {Boolean|dc.legend}\n     */\n    _legend.autoItemWidth = function (autoItemWidth) {\n        if (!arguments.length) {\n            return _autoItemWidth;\n        }\n        _autoItemWidth = autoItemWidth;\n        return _legend;\n    };\n\n    /**\n     * Set or get the legend text function. The legend widget uses this function to render the legend\n     * text for each item. If no function is specified the legend widget will display the names\n     * associated with each group.\n     * @method legendText\n     * @memberof dc.legend\n     * @instance\n     * @param  {Function} [legendText]\n     * @returns {Function|dc.legend}\n     * @example\n     * // default legendText\n     * legend.legendText(dc.pluck('name'))\n     *\n     * // create numbered legend items\n     * chart.legend(dc.legend().legendText(function(d, i) { return i + '. ' + d.name; }))\n     *\n     * // create legend displaying group counts\n     * chart.legend(dc.legend().legendText(function(d) { return d.name + ': ' d.data; }))\n     **/\n    _legend.legendText = function (legendText) {\n        if (!arguments.length) {\n            return _legendText;\n        }\n        _legendText = legendText;\n        return _legend;\n    };\n\n    /**\n     * Maximum number of legend items to display\n     * @method maxItems\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [maxItems]\n     * @return {dc.legend}\n     */\n    _legend.maxItems = function (maxItems) {\n        if (!arguments.length) {\n            return _maxItems;\n        }\n        _maxItems = dc.utils.isNumber(maxItems) ? maxItems : undefined;\n        return _legend;\n    };\n\n    return _legend;\n};\n\n/**\n * A scatter plot chart\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/scatter.html Scatter Chart}\n * - {@link http://dc-js.github.io/dc.js/examples/multi-scatter.html Multi-Scatter Chart}\n * @class scatterPlot\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a scatter plot under #chart-container1 element using the default global chart group\n * var chart1 = dc.scatterPlot('#chart-container1');\n * // create a scatter plot under #chart-container2 element using chart group A\n * var chart2 = dc.scatterPlot('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.scatterPlot(compositeChart);\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.scatterPlot}\n */\ndc.scatterPlot = function (parent, chartGroup) {\n    var _chart = dc.coordinateGridMixin({});\n    var _symbol = d3.svg.symbol();\n\n    var _existenceAccessor = function (d) { return d.value; };\n\n    var originalKeyAccessor = _chart.keyAccessor();\n    _chart.keyAccessor(function (d) { return originalKeyAccessor(d)[0]; });\n    _chart.valueAccessor(function (d) { return originalKeyAccessor(d)[1]; });\n    _chart.colorAccessor(function () { return _chart._groupName; });\n\n    _chart.title(function (d) {\n        // this basically just counteracts the setting of its own key/value accessors\n        // see https://github.com/dc-js/dc.js/issues/702\n        return _chart.keyAccessor()(d) + ',' + _chart.valueAccessor()(d) + ': ' +\n            _chart.existenceAccessor()(d);\n    });\n\n    var _locator = function (d) {\n        return 'translate(' + _chart.x()(_chart.keyAccessor()(d)) + ',' +\n                              _chart.y()(_chart.valueAccessor()(d)) + ')';\n    };\n\n    var _highlightedSize = 7;\n    var _symbolSize = 5;\n    var _excludedSize = 3;\n    var _excludedColor = null;\n    var _excludedOpacity = 1.0;\n    var _emptySize = 0;\n    var _emptyOpacity = 0;\n    var _nonemptyOpacity = 1;\n    var _emptyColor = null;\n    var _filtered = [];\n\n    function elementSize (d, i) {\n        if (!_existenceAccessor(d)) {\n            return Math.pow(_emptySize, 2);\n        } else if (_filtered[i]) {\n            return Math.pow(_symbolSize, 2);\n        } else {\n            return Math.pow(_excludedSize, 2);\n        }\n    }\n    _symbol.size(elementSize);\n\n    dc.override(_chart, '_filter', function (filter) {\n        if (!arguments.length) {\n            return _chart.__filter();\n        }\n\n        return _chart.__filter(dc.filters.RangedTwoDimensionalFilter(filter));\n    });\n\n    _chart.plotData = function () {\n        var symbols = _chart.chartBodyG().selectAll('path.symbol')\n            .data(_chart.data());\n\n        symbols\n            .enter()\n        .append('path')\n            .attr('class', 'symbol')\n            .attr('opacity', 0)\n            .attr('fill', _chart.getColor)\n            .attr('transform', _locator);\n\n        symbols.call(renderTitles, _chart.data());\n\n        symbols.each(function (d, i) {\n            _filtered[i] = !_chart.filter() || _chart.filter().isFiltered([d.key[0], d.key[1]]);\n        });\n\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('opacity', function (d, i) {\n                if (!_existenceAccessor(d)) {\n                    return _emptyOpacity;\n                } else if (_filtered[i]) {\n                    return _nonemptyOpacity;\n                } else {\n                    return _chart.excludedOpacity();\n                }\n            })\n            .attr('fill', function (d, i) {\n                if (_emptyColor && !_existenceAccessor(d)) {\n                    return _emptyColor;\n                } else if (_chart.excludedColor() && !_filtered[i]) {\n                    return _chart.excludedColor();\n                } else {\n                    return _chart.getColor(d);\n                }\n            })\n            .attr('transform', _locator)\n            .attr('d', _symbol);\n\n        dc.transition(symbols.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('opacity', 0).remove();\n    };\n\n    function renderTitles (symbol, d) {\n        if (_chart.renderTitle()) {\n            symbol.selectAll('title').remove();\n            symbol.append('title').text(function (d) {\n                return _chart.title()(d);\n            });\n        }\n    }\n\n    /**\n     * Get or set the existence accessor.  If a point exists, it is drawn with\n     * {@link dc.scatterPlot#symbolSize symbolSize} radius and\n     * opacity 1; if it does not exist, it is drawn with\n     * {@link dc.scatterPlot#emptySize emptySize} radius and opacity 0. By default,\n     * the existence accessor checks if the reduced value is truthy.\n     * @method existenceAccessor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link dc.scatterPlot#symbolSize symbolSize}\n     * @see {@link dc.scatterPlot#emptySize emptySize}\n     * @example\n     * // default accessor\n     * chart.existenceAccessor(function (d) { return d.value; });\n     * @param {Function} [accessor]\n     * @returns {Function|dc.scatterPlot}\n     */\n    _chart.existenceAccessor = function (accessor) {\n        if (!arguments.length) {\n            return _existenceAccessor;\n        }\n        _existenceAccessor = accessor;\n        return this;\n    };\n\n    /**\n     * Get or set the symbol type used for each point. By default the symbol is a circle.\n     * Type can be a constant or an accessor.\n     * @method symbol\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_type d3.svg.symbol.type}\n     * @example\n     * // Circle type\n     * chart.symbol('circle');\n     * // Square type\n     * chart.symbol('square');\n     * @param {String|Function} [type='circle']\n     * @returns {String|Function|dc.scatterPlot}\n     */\n    _chart.symbol = function (type) {\n        if (!arguments.length) {\n            return _symbol.type();\n        }\n        _symbol.type(type);\n        return _chart;\n    };\n\n    /**\n     * Get or set the symbol generator. By default `dc.scatterPlot` will use\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol()}\n     * to generate symbols. `dc.scatterPlot` will set the\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size size accessor}\n     * on the symbol generator.\n     * @method customSymbol\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol}\n     * @see {@link https://stackoverflow.com/questions/25332120/create-additional-d3-js-symbols Create additional D3.js symbols}\n     * @param {String|Function} [customSymbol=d3.svg.symbol()]\n     * @returns {String|Function|dc.scatterPlot}\n     */\n    _chart.customSymbol = function (customSymbol) {\n        if (!arguments.length) {\n            return _symbol;\n        }\n        _symbol = customSymbol;\n        _symbol.size(elementSize);\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for symbols.\n     * @method symbolSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [symbolSize=3]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.symbolSize = function (symbolSize) {\n        if (!arguments.length) {\n            return _symbolSize;\n        }\n        _symbolSize = symbolSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for highlighted symbols.\n     * @method highlightedSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [highlightedSize=5]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.highlightedSize = function (highlightedSize) {\n        if (!arguments.length) {\n            return _highlightedSize;\n        }\n        _highlightedSize = highlightedSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get size for symbols excluded from this chart's filter. If null, no\n     * special size is applied for symbols based on their filter status.\n     * @method excludedSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [excludedSize=null]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedSize = function (excludedSize) {\n        if (!arguments.length) {\n            return _excludedSize;\n        }\n        _excludedSize = excludedSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get color for symbols excluded from this chart's filter. If null, no\n     * special color is applied for symbols based on their filter status.\n     * @method excludedColor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [excludedColor=null]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedColor = function (excludedColor) {\n        if (!arguments.length) {\n            return _excludedColor;\n        }\n        _excludedColor = excludedColor;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols excluded from this chart's filter.\n     * @method excludedOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [excludedOpacity=1.0]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedOpacity = function (excludedOpacity) {\n        if (!arguments.length) {\n            return _excludedOpacity;\n        }\n        _excludedOpacity = excludedOpacity;\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for symbols when the group is empty.\n     * @method emptySize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [emptySize=0]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.hiddenSize = _chart.emptySize = function (emptySize) {\n        if (!arguments.length) {\n            return _emptySize;\n        }\n        _emptySize = emptySize;\n        return _chart;\n    };\n\n    /**\n     * Set or get color for symbols when the group is empty. If null, just use the\n     * {@link dc.colorMixin#colors colorMixin.colors} color scale zero value.\n     * @name emptyColor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {String} [emptyColor=null]\n     * @return {String}\n     * @return {dc.scatterPlot}/\n     */\n    _chart.emptyColor = function (emptyColor) {\n        if (!arguments.length) {\n            return _emptyColor;\n        }\n        _emptyColor = emptyColor;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols when the group is empty.\n     * @name emptyOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [emptyOpacity=0]\n     * @return {Number}\n     * @return {dc.scatterPlot}\n     */\n    _chart.emptyOpacity = function (emptyOpacity) {\n        if (!arguments.length) {\n            return _emptyOpacity;\n        }\n        _emptyOpacity = emptyOpacity;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols when the group is not empty.\n     * @name nonemptyOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [nonemptyOpacity=1]\n     * @return {Number}\n     * @return {dc.scatterPlot}\n     */\n    _chart.nonemptyOpacity = function (nonemptyOpacity) {\n        if (!arguments.length) {\n            return _emptyOpacity;\n        }\n        _nonemptyOpacity = nonemptyOpacity;\n        return _chart;\n    };\n\n    _chart.legendables = function () {\n        return [{chart: _chart, name: _chart._groupName, color: _chart.getColor()}];\n    };\n\n    _chart.legendHighlight = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n            return symbol.attr('fill') === d.color;\n        }, _highlightedSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', true);\n    };\n\n    _chart.legendReset = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n            return symbol.attr('fill') === d.color;\n        }, _symbolSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', false);\n    };\n\n    function resizeSymbolsWhere (condition, size) {\n        var symbols = _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return condition(d3.select(this));\n        });\n        var oldSize = _symbol.size();\n        _symbol.size(Math.pow(size, 2));\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay()).attr('d', _symbol);\n        _symbol.size(oldSize);\n    }\n\n    _chart.setHandlePaths = function () {\n        // no handle paths for poly-brushes\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n        if (_chart.round()) {\n            extent[0] = extent[0].map(_chart.round());\n            extent[1] = extent[1].map(_chart.round());\n\n            _chart.g().select('.brush')\n                .call(_chart.brush().extent(extent));\n        }\n        return extent;\n    };\n\n    _chart.brushIsEmpty = function (extent) {\n        return _chart.brush().empty() || !extent || extent[0][0] >= extent[1][0] || extent[0][1] >= extent[1][1];\n    };\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n\n        _chart.redrawBrush(_chart.g());\n\n        if (_chart.brushIsEmpty(extent)) {\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.redrawGroup();\n            });\n\n        } else {\n            var ranged2DFilter = dc.filters.RangedTwoDimensionalFilter(extent);\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.filter(ranged2DFilter);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n\n        }\n    };\n\n    _chart.setBrushY = function (gBrush) {\n        gBrush.call(_chart.brush().y(_chart.y()));\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A display of a single numeric value.\n * Unlike other charts, you do not need to set a dimension. Instead a group object must be provided and\n * a valueAccessor that returns a single value.\n * @class numberDisplay\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * // create a number display under #chart-container1 element using the default global chart group\n * var display1 = dc.numberDisplay('#chart-container1');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.numberDisplay}\n */\ndc.numberDisplay = function (parent, chartGroup) {\n    var SPAN_CLASS = 'number-display';\n    var _formatNumber = d3.format('.2s');\n    var _chart = dc.baseMixin({});\n    var _html = {one: '', some: '', none: ''};\n    var _lastValue;\n\n    // dimension not required\n    _chart._mandatoryAttributes(['group']);\n\n    // default to ordering by value, to emulate old group.top(1) behavior when multiple groups\n    _chart.ordering(function (kv) { return kv.value; });\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending on the number\n     * displayed.  The text `%number` will be replaced with the current value.\n     * - one: HTML template to use if the number is 1\n     * - zero: HTML template to use if the number is 0\n     * - some: HTML template to use otherwise\n     * @method html\n     * @memberof dc.numberDisplay\n     * @instance\n     * @example\n     * numberWidget.html({\n     *      one:'%number record',\n     *      some:'%number records',\n     *      none:'no records'})\n     * @param {{one:String, some:String, none:String}} [html={one: '', some: '', none: ''}]\n     * @returns {{one:String, some:String, none:String}|dc.numberDisplay}\n     */\n    _chart.html = function (html) {\n        if (!arguments.length) {\n            return _html;\n        }\n        if (html.none) {\n            _html.none = html.none;//if none available\n        } else if (html.one) {\n            _html.none = html.one;//if none not available use one\n        } else if (html.some) {\n            _html.none = html.some;//if none and one not available use some\n        }\n        if (html.one) {\n            _html.one = html.one;//if one available\n        } else if (html.some) {\n            _html.one = html.some;//if one not available use some\n        }\n        if (html.some) {\n            _html.some = html.some;//if some available\n        } else if (html.one) {\n            _html.some = html.one;//if some not available use one\n        }\n        return _chart;\n    };\n\n    /**\n     * Calculate and return the underlying value of the display.\n     * @method value\n     * @memberof dc.numberDisplay\n     * @instance\n     * @returns {Number}\n     */\n    _chart.value = function () {\n        return _chart.data();\n    };\n\n    function maxBin (all) {\n        if (!all.length) {\n            return null;\n        }\n        var sorted = _chart._computeOrderedGroups(all);\n        return sorted[sorted.length - 1];\n    }\n    _chart.data(function (group) {\n        var valObj = group.value ? group.value() : maxBin(group.all());\n        return _chart.valueAccessor()(valObj);\n    });\n\n    _chart.transitionDuration(250); // good default\n    _chart.transitionDelay(0);\n\n    _chart._doRender = function () {\n        var newValue = _chart.value(),\n            span = _chart.selectAll('.' + SPAN_CLASS);\n\n        if (span.empty()) {\n            span = span.data([0])\n                .enter()\n                .append('span')\n                .attr('class', SPAN_CLASS);\n        }\n\n        span.transition()\n            .duration(_chart.transitionDuration())\n            .delay(_chart.transitionDelay())\n            .ease('quad-out-in')\n            .tween('text', function () {\n                // [XA] don't try and interpolate from Infinity, else this breaks.\n                var interpStart = isFinite(_lastValue) ? _lastValue : 0;\n                var interp = d3.interpolateNumber(interpStart || 0, newValue);\n                _lastValue = newValue;\n                return function (t) {\n                    var html = null, num = _chart.formatNumber()(interp(t));\n                    if (newValue === 0 && (_html.none !== '')) {\n                        html = _html.none;\n                    } else if (newValue === 1 && (_html.one !== '')) {\n                        html = _html.one;\n                    } else if (_html.some !== '') {\n                        html = _html.some;\n                    }\n                    this.innerHTML = html ? html.replace('%number', num) : num;\n                };\n            });\n    };\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set a function to format the value for the display.\n     * @method formatNumber\n     * @memberof dc.numberDisplay\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n     * @param {Function} [formatter=d3.format('.2s')]\n     * @returns {Function|dc.numberDisplay}\n     */\n    _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n            return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A heat map is matrix that represents the values of two dimensions of data using colors.\n * @class heatMap\n * @memberof dc\n * @mixes dc.colorMixin\n * @mixes dc.marginMixin\n * @mixes dc.baseMixin\n * @example\n * // create a heat map under #chart-container1 element using the default global chart group\n * var heatMap1 = dc.heatMap('#chart-container1');\n * // create a heat map under #chart-container2 element using chart group A\n * var heatMap2 = dc.heatMap('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.heatMap}\n */\ndc.heatMap = function (parent, chartGroup) {\n\n    var DEFAULT_BORDER_RADIUS = 6.75;\n\n    var _chartBody;\n\n    var _cols;\n    var _rows;\n    var _colOrdering = d3.ascending;\n    var _rowOrdering = d3.ascending;\n    var _colScale = d3.scale.ordinal();\n    var _rowScale = d3.scale.ordinal();\n\n    var _xBorderRadius = DEFAULT_BORDER_RADIUS;\n    var _yBorderRadius = DEFAULT_BORDER_RADIUS;\n\n    var _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin({})));\n    _chart._mandatoryAttributes(['group']);\n    _chart.title(_chart.colorAccessor());\n\n    var _colsLabel = function (d) {\n        return d;\n    };\n    var _rowsLabel = function (d) {\n        return d;\n    };\n\n    /**\n     * Set or get the column label function. The chart class uses this function to render\n     * column labels on the X axis. It is passed the column name.\n     * @method colsLabel\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // the default label function just returns the name\n     * chart.colsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.colsLabel = function (labelFunction) {\n        if (!arguments.length) {\n            return _colsLabel;\n        }\n        _colsLabel = labelFunction;\n        return _chart;\n    };\n\n    /**\n     * Set or get the row label function. The chart class uses this function to render\n     * row labels on the Y axis. It is passed the row name.\n     * @method rowsLabel\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // the default label function just returns the name\n     * chart.rowsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.rowsLabel = function (labelFunction) {\n        if (!arguments.length) {\n            return _rowsLabel;\n        }\n        _rowsLabel = labelFunction;\n        return _chart;\n    };\n\n    var _xAxisOnClick = function (d) { filterAxis(0, d); };\n    var _yAxisOnClick = function (d) { filterAxis(1, d); };\n    var _boxOnClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    function filterAxis (axis, value) {\n        var cellsOnAxis = _chart.selectAll('.box-group').filter(function (d) {\n            return d.key[axis] === value;\n        });\n        var unfilteredCellsOnAxis = cellsOnAxis.filter(function (d) {\n            return !_chart.hasFilter(d.key);\n        });\n        dc.events.trigger(function () {\n            var selection = unfilteredCellsOnAxis.empty() ? cellsOnAxis : unfilteredCellsOnAxis;\n            var filters = selection.data().map(function (kv) {\n                return dc.filters.TwoDimensionalFilter(kv.key);\n            });\n            _chart._filter([filters]);\n            _chart.redrawGroup();\n        });\n    }\n\n    dc.override(_chart, 'filter', function (filter) {\n        if (!arguments.length) {\n            return _chart._filter();\n        }\n\n        return _chart._filter(dc.filters.TwoDimensionalFilter(filter));\n    });\n\n    /**\n     * Gets or sets the values used to create the rows of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the value accessor.\n     * @method rows\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Array<String|Number>} [rows]\n     * @returns {Array<String|Number>|dc.heatMap}\n     */\n\n    _chart.rows = function (rows) {\n        if (!arguments.length) {\n            return _rows;\n        }\n        _rows = rows;\n        return _chart;\n    };\n\n    /**\n     #### .rowOrdering([orderFunction])\n     Get or set an accessor to order the rows.  Default is d3.ascending.\n     */\n    _chart.rowOrdering = function (_) {\n        if (!arguments.length) {\n            return _rowOrdering;\n        }\n        _rowOrdering = _;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the keys used to create the columns of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the key accessor.\n     * @method cols\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Array<String|Number>} [cols]\n     * @returns {Array<String|Number>|dc.heatMap}\n     */\n    _chart.cols = function (cols) {\n        if (!arguments.length) {\n            return _cols;\n        }\n        _cols = cols;\n        return _chart;\n    };\n\n    /**\n     #### .colOrdering([orderFunction])\n     Get or set an accessor to order the cols.  Default is ascending.\n     */\n    _chart.colOrdering = function (_) {\n        if (!arguments.length) {\n            return _colOrdering;\n        }\n        _colOrdering = _;\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chartBody = _chart.svg()\n            .append('g')\n            .attr('class', 'heatmap')\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n\n        return _chart._doRedraw();\n    };\n\n    _chart._doRedraw = function () {\n        var data = _chart.data(),\n            rows = _chart.rows() || data.map(_chart.valueAccessor()),\n            cols = _chart.cols() || data.map(_chart.keyAccessor());\n        if (_rowOrdering) {\n            rows = rows.sort(_rowOrdering);\n        }\n        if (_colOrdering) {\n            cols = cols.sort(_colOrdering);\n        }\n        rows = _rowScale.domain(rows);\n        cols = _colScale.domain(cols);\n\n        var rowCount = rows.domain().length,\n            colCount = cols.domain().length,\n            boxWidth = Math.floor(_chart.effectiveWidth() / colCount),\n            boxHeight = Math.floor(_chart.effectiveHeight() / rowCount);\n\n        cols.rangeRoundBands([0, _chart.effectiveWidth()]);\n        rows.rangeRoundBands([_chart.effectiveHeight(), 0]);\n\n        var boxes = _chartBody.selectAll('g.box-group').data(_chart.data(), function (d, i) {\n            return _chart.keyAccessor()(d, i) + '\\0' + _chart.valueAccessor()(d, i);\n        });\n        var gEnter = boxes.enter().append('g')\n            .attr('class', 'box-group');\n\n        gEnter.append('rect')\n            .attr('class', 'heat-box')\n            .attr('fill', 'white')\n            .on('click', _chart.boxOnClick());\n\n        if (_chart.renderTitle()) {\n            gEnter.append('title');\n            boxes.select('title').text(_chart.title());\n        }\n\n        dc.transition(boxes.select('rect'), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d, i) { return cols(_chart.keyAccessor()(d, i)); })\n            .attr('y', function (d, i) { return rows(_chart.valueAccessor()(d, i)); })\n            .attr('rx', _xBorderRadius)\n            .attr('ry', _yBorderRadius)\n            .attr('fill', _chart.getColor)\n            .attr('width', boxWidth)\n            .attr('height', boxHeight);\n\n        boxes.exit().remove();\n\n        var gCols = _chartBody.select('g.cols');\n        if (gCols.empty()) {\n            gCols = _chartBody.append('g').attr('class', 'cols axis');\n        }\n        var gColsText = gCols.selectAll('text').data(cols.domain());\n        gColsText.enter().append('text')\n              .attr('x', function (d) { return cols(d) + boxWidth / 2; })\n              .style('text-anchor', 'middle')\n              .attr('y', _chart.effectiveHeight())\n              .attr('dy', 12)\n              .on('click', _chart.xAxisOnClick())\n              .text(_chart.colsLabel());\n        dc.transition(gColsText, _chart.transitionDuration(), _chart.transitionDelay())\n               .text(_chart.colsLabel())\n               .attr('x', function (d) { return cols(d) + boxWidth / 2; })\n               .attr('y', _chart.effectiveHeight());\n        gColsText.exit().remove();\n        var gRows = _chartBody.select('g.rows');\n        if (gRows.empty()) {\n            gRows = _chartBody.append('g').attr('class', 'rows axis');\n        }\n        var gRowsText = gRows.selectAll('text').data(rows.domain());\n        gRowsText.enter().append('text')\n              .attr('dy', 6)\n              .style('text-anchor', 'end')\n              .attr('x', 0)\n              .attr('dx', -2)\n              .on('click', _chart.yAxisOnClick())\n              .text(_chart.rowsLabel());\n        dc.transition(gRowsText, _chart.transitionDuration(), _chart.transitionDelay())\n              .text(_chart.rowsLabel())\n              .attr('y', function (d) { return rows(d) + boxHeight / 2; });\n        gRowsText.exit().remove();\n\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.box-group').each(function (d) {\n                if (_chart.isSelectedNode(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.box-group').each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when an individual cell is clicked in the heatmap.\n     * By default, filtering of the cell will be toggled.\n     * @method boxOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // default box on click handler\n     * chart.boxOnClick(function (d) {\n     *     var filter = d.key;\n     *     dc.events.trigger(function () {\n     *         _chart.filter(filter);\n     *         _chart.redrawGroup();\n     *     });\n     * });\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.boxOnClick = function (handler) {\n        if (!arguments.length) {\n            return _boxOnClick;\n        }\n        _boxOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when a column tick is clicked in the x axis.\n     * By default, if any cells in the column are unselected, the whole column will be selected,\n     * otherwise the whole column will be unselected.\n     * @method xAxisOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.xAxisOnClick = function (handler) {\n        if (!arguments.length) {\n            return _xAxisOnClick;\n        }\n        _xAxisOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when a row tick is clicked in the y axis.\n     * By default, if any cells in the row are unselected, the whole row will be selected,\n     * otherwise the whole row will be unselected.\n     * @method yAxisOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.yAxisOnClick = function (handler) {\n        if (!arguments.length) {\n            return _yAxisOnClick;\n        }\n        _yAxisOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the X border radius.  Set to 0 to get full rectangles.\n     * @method xBorderRadius\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Number} [xBorderRadius=6.75]\n     * @returns {Number|dc.heatMap}\n     */\n    _chart.xBorderRadius = function (xBorderRadius) {\n        if (!arguments.length) {\n            return _xBorderRadius;\n        }\n        _xBorderRadius = xBorderRadius;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the Y border radius.  Set to 0 to get full rectangles.\n     * @method yBorderRadius\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Number} [yBorderRadius=6.75]\n     * @returns {Number|dc.heatMap}\n     */\n    _chart.yBorderRadius = function (yBorderRadius) {\n        if (!arguments.length) {\n            return _yBorderRadius;\n        }\n        _yBorderRadius = yBorderRadius;\n        return _chart;\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n// https://github.com/d3/d3-plugins/blob/master/box/box.js\n(function () {\n\n    // Inspired by http://informationandvisualization.de/blog/box-plot\n    d3.box = function () {\n        var width = 1,\n            height = 1,\n            duration = 0,\n            delay = 0,\n            domain = null,\n            value = Number,\n            whiskers = boxWhiskers,\n            quartiles = boxQuartiles,\n            tickFormat = null;\n\n        // For each small multiple…\n        function box (g) {\n            g.each(function (d, i) {\n                d = d.map(value).sort(d3.ascending);\n                var g = d3.select(this),\n                    n = d.length,\n                    min = d[0],\n                    max = d[n - 1];\n\n                // Compute quartiles. Must return exactly 3 elements.\n                var quartileData = d.quartiles = quartiles(d);\n\n                // Compute whiskers. Must return exactly 2 elements, or null.\n                var whiskerIndices = whiskers && whiskers.call(this, d, i),\n                    whiskerData = whiskerIndices && whiskerIndices.map(function (i) { return d[i]; });\n\n                // Compute outliers. If no whiskers are specified, all data are 'outliers'.\n                // We compute the outliers as indices, so that we can join across transitions!\n                var outlierIndices = whiskerIndices ?\n                    d3.range(0, whiskerIndices[0]).concat(d3.range(whiskerIndices[1] + 1, n)) : d3.range(n);\n\n                // Compute the new x-scale.\n                var x1 = d3.scale.linear()\n                    .domain(domain && domain.call(this, d, i) || [min, max])\n                    .range([height, 0]);\n\n                // Retrieve the old x-scale, if this is an update.\n                var x0 = this.__chart__ || d3.scale.linear()\n                    .domain([0, Infinity])\n                    .range(x1.range());\n\n                // Stash the new scale.\n                this.__chart__ = x1;\n\n                // Note: the box, median, and box tick elements are fixed in number,\n                // so we only have to handle enter and update. In contrast, the outliers\n                // and other elements are variable, so we need to exit them! Variable\n                // elements also fade in and out.\n\n                // Update center line: the vertical line spanning the whiskers.\n                var center = g.selectAll('line.center')\n                    .data(whiskerData ? [whiskerData] : []);\n\n                center.enter().insert('line', 'rect')\n                    .attr('class', 'center')\n                    .attr('x1', width / 2)\n                    .attr('y1', function (d) { return x0(d[0]); })\n                    .attr('x2', width / 2)\n                    .attr('y2', function (d) { return x0(d[1]); })\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); });\n\n                center.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1)\n                    .attr('x1', width / 2)\n                    .attr('x2', width / 2)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); });\n\n                center.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1e-6)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); })\n                    .remove();\n\n                // Update innerquartile box.\n                var box = g.selectAll('rect.box')\n                    .data([quartileData]);\n\n                box.enter().append('rect')\n                    .attr('class', 'box')\n                    .attr('x', 0)\n                    .attr('y', function (d) { return x0(d[2]); })\n                    .attr('width', width)\n                    .attr('height', function (d) { return x0(d[0]) - x0(d[2]); })\n                  .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', function (d) { return x1(d[2]); })\n                    .attr('height', function (d) { return x1(d[0]) - x1(d[2]); });\n\n                box.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('width', width)\n                    .attr('y', function (d) { return x1(d[2]); })\n                    .attr('height', function (d) { return x1(d[0]) - x1(d[2]); });\n\n                // Update median line.\n                var medianLine = g.selectAll('line.median')\n                    .data([quartileData[1]]);\n\n                medianLine.enter().append('line')\n                    .attr('class', 'median')\n                    .attr('x1', 0)\n                    .attr('y1', x0)\n                    .attr('x2', width)\n                    .attr('y2', x0)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1);\n\n                medianLine.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('x1', 0)\n                    .attr('x2', width)\n                    .attr('y1', x1)\n                    .attr('y2', x1);\n\n                // Update whiskers.\n                var whisker = g.selectAll('line.whisker')\n                    .data(whiskerData || []);\n\n                whisker.enter().insert('line', 'circle, text')\n                    .attr('class', 'whisker')\n                    .attr('x1', 0)\n                    .attr('y1', x0)\n                    .attr('x2', width)\n                    .attr('y2', x0)\n                    .style('opacity', 1e-6)\n                  .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1);\n\n                whisker.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('x1', 0)\n                    .attr('x2', width)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1);\n\n                whisker.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1e-6)\n                    .remove();\n\n                // Update outliers.\n                var outlier = g.selectAll('circle.outlier')\n                    .data(outlierIndices, Number);\n\n                outlier.enter().insert('circle', 'text')\n                    .attr('class', 'outlier')\n                    .attr('r', 5)\n                    .attr('cx', width / 2)\n                    .attr('cy', function (i) { return x0(d[i]); })\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1);\n\n                outlier.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cx', width / 2)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1);\n\n                outlier.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1e-6)\n                    .remove();\n\n                // Compute the tick format.\n                var format = tickFormat || x1.tickFormat(8);\n\n                // Update box ticks.\n                var boxTick = g.selectAll('text.box')\n                    .data(quartileData);\n\n                boxTick.enter().append('text')\n                    .attr('class', 'box')\n                    .attr('dy', '.3em')\n                    .attr('dx', function (d, i) { return i & 1 ? 6 : -6; })\n                    .attr('x', function (d, i) { return i & 1 ? width : 0; })\n                    .attr('y', x0)\n                    .attr('text-anchor', function (d, i) { return i & 1 ? 'start' : 'end'; })\n                    .text(format)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1);\n\n                boxTick.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .text(format)\n                    .attr('x', function (d, i) { return i & 1 ? width : 0; })\n                    .attr('y', x1);\n\n                // Update whisker ticks. These are handled separately from the box\n                // ticks because they may or may not exist, and we want don't want\n                // to join box ticks pre-transition with whisker ticks post-.\n                var whiskerTick = g.selectAll('text.whisker')\n                    .data(whiskerData || []);\n\n                whiskerTick.enter().append('text')\n                    .attr('class', 'whisker')\n                    .attr('dy', '.3em')\n                    .attr('dx', 6)\n                    .attr('x', width)\n                    .attr('y', x0)\n                    .text(format)\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1)\n                    .style('opacity', 1);\n\n                whiskerTick.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .text(format)\n                    .attr('x', width)\n                    .attr('y', x1)\n                    .style('opacity', 1);\n\n                whiskerTick.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1)\n                    .style('opacity', 1e-6)\n                    .remove();\n            });\n            d3.timer.flush();\n        }\n\n        box.width = function (x) {\n            if (!arguments.length) {\n                return width;\n            }\n            width = x;\n            return box;\n        };\n\n        box.height = function (x) {\n            if (!arguments.length) {\n                return height;\n            }\n            height = x;\n            return box;\n        };\n\n        box.tickFormat = function (x) {\n            if (!arguments.length) {\n                return tickFormat;\n            }\n            tickFormat = x;\n            return box;\n        };\n\n        box.duration = function (x) {\n            if (!arguments.length) {\n                return duration;\n            }\n            duration = x;\n            return box;\n        };\n\n        box.domain = function (x) {\n            if (!arguments.length) {\n                return domain;\n            }\n            domain = x === null ? x : d3.functor(x);\n            return box;\n        };\n\n        box.value = function (x) {\n            if (!arguments.length) {\n                return value;\n            }\n            value = x;\n            return box;\n        };\n\n        box.whiskers = function (x) {\n            if (!arguments.length) {\n                return whiskers;\n            }\n            whiskers = x;\n            return box;\n        };\n\n        box.quartiles = function (x) {\n            if (!arguments.length) {\n                return quartiles;\n            }\n            quartiles = x;\n            return box;\n        };\n\n        return box;\n    };\n\n    function boxWhiskers (d) {\n        return [0, d.length - 1];\n    }\n\n    function boxQuartiles (d) {\n        return [\n            d3.quantile(d, 0.25),\n            d3.quantile(d, 0.5),\n            d3.quantile(d, 0.75)\n        ];\n    }\n\n})();\n\n\n/**\n * A box plot is a chart that depicts numerical data via their quartile ranges.\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/box-plot-time.html Box plot time example}\n * - {@link http://dc-js.github.io/dc.js/examples/box-plot.html Box plot example}\n * @class boxPlot\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a box plot under #chart-container1 element using the default global chart group\n * var boxPlot1 = dc.boxPlot('#chart-container1');\n * // create a box plot under #chart-container2 element using chart group A\n * var boxPlot2 = dc.boxPlot('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.boxPlot}\n */\ndc.boxPlot = function (parent, chartGroup) {\n    var _chart = dc.coordinateGridMixin({});\n\n    // Returns a function to compute the interquartile range.\n    function DEFAULT_WHISKERS_IQR (k) {\n        return function (d) {\n            var q1 = d.quartiles[0],\n                q3 = d.quartiles[2],\n                iqr = (q3 - q1) * k,\n                i = -1,\n                j = d.length;\n            do { ++i; } while (d[i] < q1 - iqr);\n            do { --j; } while (d[j] > q3 + iqr);\n            return [i, j];\n        };\n    }\n\n    var _whiskerIqrFactor = 1.5;\n    var _whiskersIqr = DEFAULT_WHISKERS_IQR;\n    var _whiskers = _whiskersIqr(_whiskerIqrFactor);\n\n    var _box = d3.box();\n    var _tickFormat = null;\n\n    var _boxWidth = function (innerChartWidth, xUnits) {\n        if (_chart.isOrdinal()) {\n            return _chart.x().rangeBand();\n        } else {\n            return innerChartWidth / (1 + _chart.boxPadding()) / xUnits;\n        }\n    };\n\n    // default padding to handle min/max whisker text\n    _chart.yAxisPadding(12);\n\n    // default to ordinal\n    _chart.x(d3.scale.ordinal());\n    _chart.xUnits(dc.units.ordinal);\n\n    // valueAccessor should return an array of values that can be coerced into numbers\n    // or if data is overloaded for a static array of arrays, it should be `Number`.\n    // Empty arrays are not included.\n    _chart.data(function (group) {\n        return group.all().map(function (d) {\n            d.map = function (accessor) { return accessor.call(d, d); };\n            return d;\n        }).filter(function (d) {\n            var values = _chart.valueAccessor()(d);\n            return values.length !== 0;\n        });\n    });\n\n    /**\n     * Get or set the spacing between boxes as a fraction of box size. Valid values are within 0-1.\n     * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n     * for a visual description of how the padding is applied.\n     * @method boxPadding\n     * @memberof dc.boxPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3.scale.ordinal.rangeBands}\n     * @param {Number} [padding=0.8]\n     * @returns {Number|dc.boxPlot}\n     */\n    _chart.boxPadding = _chart._rangeBandPadding;\n    _chart.boxPadding(0.8);\n\n    /**\n     * Get or set the outer padding on an ordinal box chart. This setting has no effect on non-ordinal charts\n     * or on charts with a custom {@link dc.boxPlot#boxWidth .boxWidth}. Will pad the width by\n     * `padding * barWidth` on each side of the chart.\n     * @method outerPadding\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Number} [padding=0.5]\n     * @returns {Number|dc.boxPlot}\n     */\n    _chart.outerPadding = _chart._outerRangeBandPadding;\n    _chart.outerPadding(0.5);\n\n    /**\n     * Get or set the numerical width of the boxplot box. The width may also be a function taking as\n     * parameters the chart width excluding the right and left margins, as well as the number of x\n     * units.\n     * @example\n     * // Using numerical parameter\n     * chart.boxWidth(10);\n     * // Using function\n     * chart.boxWidth((innerChartWidth, xUnits) { ... });\n     * @method boxWidth\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Number|Function} [boxWidth=0.5]\n     * @returns {Number|Function|dc.boxPlot}\n     */\n    _chart.boxWidth = function (boxWidth) {\n        if (!arguments.length) {\n            return _boxWidth;\n        }\n        _boxWidth = d3.functor(boxWidth);\n        return _chart;\n    };\n\n    var boxTransform = function (d, i) {\n        var xOffset = _chart.x()(_chart.keyAccessor()(d, i));\n        return 'translate(' + xOffset + ', 0)';\n    };\n\n    _chart._preprocessData = function () {\n        if (_chart.elasticX()) {\n            _chart.x().domain([]);\n        }\n    };\n\n    _chart.plotData = function () {\n        var _calculatedBoxWidth = _boxWidth(_chart.effectiveWidth(), _chart.xUnitCount());\n\n        _box.whiskers(_whiskers)\n            .width(_calculatedBoxWidth)\n            .height(_chart.effectiveHeight())\n            .value(_chart.valueAccessor())\n            .domain(_chart.y().domain())\n            .duration(_chart.transitionDuration())\n            .tickFormat(_tickFormat);\n\n        var boxesG = _chart.chartBodyG().selectAll('g.box').data(_chart.data(), _chart.keyAccessor());\n\n        renderBoxes(boxesG);\n        updateBoxes(boxesG);\n        removeBoxes(boxesG);\n\n        _chart.fadeDeselectedArea();\n    };\n\n    function renderBoxes (boxesG) {\n        var boxesGEnter = boxesG.enter().append('g');\n\n        boxesGEnter\n            .attr('class', 'box')\n            .attr('transform', boxTransform)\n            .call(_box)\n            .on('click', function (d) {\n                _chart.filter(_chart.keyAccessor()(d));\n                _chart.redrawGroup();\n            });\n    }\n\n    function updateBoxes (boxesG) {\n        dc.transition(boxesG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', boxTransform)\n            .call(_box)\n            .each(function () {\n                d3.select(this).select('rect.box').attr('fill', _chart.getColor);\n            });\n    }\n\n    function removeBoxes (boxesG) {\n        boxesG.exit().remove().call(_box);\n    }\n\n    _chart.fadeDeselectedArea = function () {\n        if (_chart.hasFilter()) {\n            if (_chart.isOrdinal()) {\n                _chart.g().selectAll('g.box').each(function (d) {\n                    if (_chart.isSelectedNode(d)) {\n                        _chart.highlightSelected(this);\n                    } else {\n                        _chart.fadeDeselected(this);\n                    }\n                });\n            } else {\n                var extent = _chart.brush().extent();\n                var start = extent[0];\n                var end = extent[1];\n                var keyAccessor = _chart.keyAccessor();\n                _chart.g().selectAll('g.box').each(function (d) {\n                    var key = keyAccessor(d);\n                    if (key < start || key >= end) {\n                        _chart.fadeDeselected(this);\n                    } else {\n                        _chart.highlightSelected(this);\n                    }\n                });\n            }\n        } else {\n            _chart.g().selectAll('g.box').each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(_chart.keyAccessor()(d));\n    };\n\n    _chart.yAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return d3.min(_chart.valueAccessor()(e));\n        });\n        return dc.utils.subtract(min, _chart.yAxisPadding());\n    };\n\n    _chart.yAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return d3.max(_chart.valueAccessor()(e));\n        });\n        return dc.utils.add(max, _chart.yAxisPadding());\n    };\n\n    /**\n     * Set the numerical format of the boxplot median, whiskers and quartile labels. Defaults to\n     * integer formatting.\n     * @example\n     * // format ticks to 2 decimal places\n     * chart.tickFormat(d3.format('.2f'));\n     * @method tickFormat\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Function} [tickFormat]\n     * @returns {Number|Function|dc.boxPlot}\n     */\n    _chart.tickFormat = function (tickFormat) {\n        if (!arguments.length) {\n            return _tickFormat;\n        }\n        _tickFormat = tickFormat;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The select menu is a simple widget designed to filter a dimension by selecting an option from\n * an HTML `<select/>` menu. The menu can be optionally turned into a multiselect.\n * @class selectMenu\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * // create a select menu under #select-container using the default global chart group\n * var select = dc.selectMenu('#select-container')\n *                .dimension(states)\n *                .group(stateGroup);\n * // the option text can be set via the title() function\n * // by default the option text is '`key`: `value`'\n * select.title(function (d){\n *     return 'STATE: ' + d.key;\n * })\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this widget should be placed in.\n * Interaction with the widget will only trigger events and redraws within its group.\n * @returns {selectMenu}\n **/\ndc.selectMenu = function (parent, chartGroup) {\n    var SELECT_CSS_CLASS = 'dc-select-menu';\n    var OPTION_CSS_CLASS = 'dc-select-option';\n\n    var _chart = dc.baseMixin({});\n\n    var _select;\n    var _promptText = 'Select all';\n    var _multiple = false;\n    var _promptValue = null;\n    var _numberVisible = null;\n    var _order = function (a, b) {\n        return _chart.keyAccessor()(a) > _chart.keyAccessor()(b) ?\n             1 : _chart.keyAccessor()(b) > _chart.keyAccessor()(a) ?\n            -1 : 0;\n    };\n\n    var _filterDisplayed = function (d) {\n        return _chart.valueAccessor()(d) > 0;\n    };\n\n    _chart.data(function (group) {\n        return group.all().filter(_filterDisplayed);\n    });\n\n    _chart._doRender = function () {\n        _chart.select('select').remove();\n        _select = _chart.root().append('select')\n                        .classed(SELECT_CSS_CLASS, true);\n        _select.append('option').text(_promptText).attr('value', '');\n\n        _chart._doRedraw();\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        setAttributes();\n        renderOptions();\n        // select the option(s) corresponding to current filter(s)\n        if (_chart.hasFilter() && _multiple) {\n            _select.selectAll('option')\n                .property('selected', function (d) {\n                    return d && _chart.filters().indexOf(String(_chart.keyAccessor()(d))) >= 0;\n                });\n        } else if (_chart.hasFilter()) {\n            _select.property('value', _chart.filter());\n        } else {\n            _select.property('value', '');\n        }\n        return _chart;\n    };\n\n    function renderOptions () {\n        var options = _select.selectAll('option.' + OPTION_CSS_CLASS)\n          .data(_chart.data(), function (d) { return _chart.keyAccessor()(d); });\n\n        options.enter()\n              .append('option')\n              .classed(OPTION_CSS_CLASS, true)\n              .attr('value', function (d) { return _chart.keyAccessor()(d); });\n\n        options.text(_chart.title());\n        options.exit().remove();\n        _select.selectAll('option.' + OPTION_CSS_CLASS).sort(_order);\n\n        _select.on('change', onChange);\n        return options;\n    }\n\n    function onChange (d, i) {\n        var values;\n        var target = d3.event.target;\n        if (target.selectedOptions) {\n            var selectedOptions = Array.prototype.slice.call(target.selectedOptions);\n            values = selectedOptions.map(function (d) {\n                return d.value;\n            });\n        } else { // IE and other browsers do not support selectedOptions\n            // adapted from this polyfill: https://gist.github.com/brettz9/4212217\n            var options = [].slice.call(d3.event.target.options);\n            values = options.filter(function (option) {\n                return option.selected;\n            }).map(function (option) {\n                return option.value;\n            });\n        }\n        // console.log(values);\n        // check if only prompt option is selected\n        if (values.length === 1 && values[0] === '') {\n            values = _promptValue || null;\n        } else if (!_multiple && values.length === 1) {\n            values = values[0];\n        }\n        _chart.onChange(values);\n    }\n\n    _chart.onChange = function (val) {\n        if (val && _multiple) {\n            _chart.replaceFilter([val]);\n        } else if (val) {\n            _chart.replaceFilter(val);\n        } else {\n            _chart.filterAll();\n        }\n        dc.events.trigger(function () {\n            _chart.redrawGroup();\n        });\n    };\n\n    function setAttributes () {\n        if (_multiple) {\n            _select.attr('multiple', true);\n        } else {\n            _select.attr('multiple', null);\n        }\n        if (_numberVisible !== null) {\n            _select.attr('size', _numberVisible);\n        } else {\n            _select.attr('size', null);\n        }\n    }\n\n    /**\n     * Get or set the function that controls the ordering of option tags in the\n     * select menu. By default options are ordered by the group key in ascending\n     * order.\n     * @name order\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {Function} [order]\n     * @example\n     * // order by the group's value\n     * chart.order(function (a,b) {\n     *     return a.value > b.value ? 1 : b.value > a.value ? -1 : 0;\n     * });\n     **/\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    /**\n     * Get or set the text displayed in the options used to prompt selection.\n     * @name promptText\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {String} [promptText='Select all']\n     * @example\n     * chart.promptText('All states');\n     **/\n    _chart.promptText = function (_) {\n        if (!arguments.length) {\n            return _promptText;\n        }\n        _promptText = _;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that filters option tags prior to display. By default options\n     * with a value of < 1 are not displayed.\n     * @name filterDisplayed\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {function} [filterDisplayed]\n     * @example\n     * // display all options override the `filterDisplayed` function:\n     * chart.filterDisplayed(function () {\n     *     return true;\n     * });\n     **/\n    _chart.filterDisplayed = function (filterDisplayed) {\n        if (!arguments.length) {\n            return _filterDisplayed;\n        }\n        _filterDisplayed = filterDisplayed;\n        return _chart;\n    };\n\n    /**\n     * Controls the type of select menu. Setting it to true converts the underlying\n     * HTML tag into a multiple select.\n     * @name multiple\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {boolean} [multiple=false]\n     * @example\n     * chart.multiple(true);\n     **/\n    _chart.multiple = function (multiple) {\n        if (!arguments.length) {\n            return _multiple;\n        }\n        _multiple = multiple;\n\n        return _chart;\n    };\n\n    /**\n     * Controls the default value to be used for\n     * [dimension.filter](https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter)\n     * when only the prompt value is selected. If `null` (the default), no filtering will occur when\n     * just the prompt is selected.\n     * @name promptValue\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {?*} [promptValue=null]\n     **/\n    _chart.promptValue = function (promptValue) {\n        if (!arguments.length) {\n            return _promptValue;\n        }\n        _promptValue = promptValue;\n\n        return _chart;\n    };\n\n    /**\n     * Controls the number of items to show in the select menu, when `.multiple()` is true. This\n     * controls the [`size` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#Attributes) of\n     * the `select` element. If `null` (the default), uses the browser's default height.\n     * @name numberItems\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {?number} [numberVisible=null]\n     * @example\n     * chart.numberVisible(10);\n     **/\n    _chart.numberVisible = function (numberVisible) {\n        if (!arguments.length) {\n            return _numberVisible;\n        }\n        _numberVisible = numberVisible;\n\n        return _chart;\n    };\n\n    _chart.size = dc.logger.deprecate(_chart.numberVisible, 'selectMenu.size is ambiguous - use numberVisible instead');\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n// Renamed functions\n\ndc.abstractBubbleChart = dc.bubbleMixin;\ndc.baseChart = dc.baseMixin;\ndc.capped = dc.capMixin;\ndc.colorChart = dc.colorMixin;\ndc.coordinateGridChart = dc.coordinateGridMixin;\ndc.marginable = dc.marginMixin;\ndc.stackableChart = dc.stackMixin;\n\n// Expose d3 and crossfilter, so that clients in browserify\n// case can obtain them if they need them.\ndc.d3 = d3;\ndc.crossfilter = crossfilter;\n\nreturn dc;}\n    if(true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(287), __webpack_require__(288)], __WEBPACK_AMD_DEFINE_FACTORY__ = (_dc),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if(typeof module === \"object\" && module.exports) {\n        var _d3 = require('d3');\n        var _crossfilter = require('crossfilter2');\n        // When using npm + browserify, 'crossfilter' is a function,\n        // since package.json specifies index.js as main function, and it\n        // does special handling. When using bower + browserify,\n        // there's no main in bower.json (in fact, there's no bower.json),\n        // so we need to fix it.\n        if (typeof _crossfilter !== \"function\") {\n            _crossfilter = _crossfilter.crossfilter;\n        }\n        module.exports = _dc(_d3, _crossfilter);\n    } else {\n        this.dc = _dc(d3, crossfilter);\n    }\n}\n)();\n\n//# sourceMappingURL=dc.js.map\n\n/***/ }),\n\n/***/ 287:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {\n  var d3 = {\n    version: \"3.5.17\"\n  };\n  var d3_arraySlice = [].slice, d3_array = function(list) {\n    return d3_arraySlice.call(list);\n  };\n  var d3_document = this.document;\n  function d3_documentElement(node) {\n    return node && (node.ownerDocument || node.document || node).documentElement;\n  }\n  function d3_window(node) {\n    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n  }\n  if (d3_document) {\n    try {\n      d3_array(d3_document.documentElement.childNodes)[0].nodeType;\n    } catch (e) {\n      d3_array = function(list) {\n        var i = list.length, array = new Array(i);\n        while (i--) array[i] = list[i];\n        return array;\n      };\n    }\n  }\n  if (!Date.now) Date.now = function() {\n    return +new Date();\n  };\n  if (d3_document) {\n    try {\n      d3_document.createElement(\"DIV\").style.setProperty(\"opacity\", 0, \"\");\n    } catch (error) {\n      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n      d3_element_prototype.setAttribute = function(name, value) {\n        d3_element_setAttribute.call(this, name, value + \"\");\n      };\n      d3_element_prototype.setAttributeNS = function(space, local, value) {\n        d3_element_setAttributeNS.call(this, space, local, value + \"\");\n      };\n      d3_style_prototype.setProperty = function(name, value, priority) {\n        d3_style_setProperty.call(this, name, value + \"\", priority);\n      };\n    }\n  }\n  d3.ascending = d3_ascending;\n  function d3_ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n  d3.descending = function(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  };\n  d3.min = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;\n    }\n    return a;\n  };\n  d3.max = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;\n    }\n    return a;\n  };\n  d3.extent = function(array, f) {\n    var i = -1, n = array.length, a, b, c;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n    return [ a, c ];\n  };\n  function d3_number(x) {\n    return x === null ? NaN : +x;\n  }\n  function d3_numeric(x) {\n    return !isNaN(x);\n  }\n  d3.sum = function(array, f) {\n    var s = 0, n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = +array[i])) s += a;\n    } else {\n      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n    }\n    return s;\n  };\n  d3.mean = function(array, f) {\n    var s = 0, n = array.length, a, i = -1, j = n;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;\n    }\n    if (j) return s / j;\n  };\n  d3.quantile = function(values, p) {\n    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;\n    return e ? v + e * (values[h] - v) : v;\n  };\n  d3.median = function(array, f) {\n    var numbers = [], n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n    }\n    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n  };\n  d3.variance = function(array, f) {\n    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    } else {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n    if (j > 1) return s / (j - 1);\n  };\n  d3.deviation = function() {\n    var v = d3.variance.apply(this, arguments);\n    return v ? Math.sqrt(v) : v;\n  };\n  function d3_bisector(compare) {\n    return {\n      left: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n  var d3_bisect = d3_bisector(d3_ascending);\n  d3.bisectLeft = d3_bisect.left;\n  d3.bisect = d3.bisectRight = d3_bisect.right;\n  d3.bisector = function(f) {\n    return d3_bisector(f.length === 1 ? function(d, x) {\n      return d3_ascending(f(d), x);\n    } : f);\n  };\n  d3.shuffle = function(array, i0, i1) {\n    if ((m = arguments.length) < 3) {\n      i1 = array.length;\n      if (m < 2) i0 = 0;\n    }\n    var m = i1 - i0, t, i;\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n    }\n    return array;\n  };\n  d3.permute = function(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  };\n  d3.pairs = function(array) {\n    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];\n    return pairs;\n  };\n  d3.transpose = function(matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  };\n  function d3_transposeLength(d) {\n    return d.length;\n  }\n  d3.zip = function() {\n    return d3.transpose(arguments);\n  };\n  d3.keys = function(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  };\n  d3.values = function(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  };\n  d3.entries = function(map) {\n    var entries = [];\n    for (var key in map) entries.push({\n      key: key,\n      value: map[key]\n    });\n    return entries;\n  };\n  d3.merge = function(arrays) {\n    var n = arrays.length, m, i = -1, j = 0, merged, array;\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n    return merged;\n  };\n  var abs = Math.abs;\n  d3.range = function(start, stop, step) {\n    if (arguments.length < 3) {\n      step = 1;\n      if (arguments.length < 2) {\n        stop = start;\n        start = 0;\n      }\n    }\n    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n    start *= k, stop *= k, step *= k;\n    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n    return range;\n  };\n  function d3_range_integerScale(x) {\n    var k = 1;\n    while (x * k % 1) k *= 10;\n    return k;\n  }\n  function d3_class(ctor, properties) {\n    for (var key in properties) {\n      Object.defineProperty(ctor.prototype, key, {\n        value: properties[key],\n        enumerable: false\n      });\n    }\n  }\n  d3.map = function(object, f) {\n    var map = new d3_Map();\n    if (object instanceof d3_Map) {\n      object.forEach(function(key, value) {\n        map.set(key, value);\n      });\n    } else if (Array.isArray(object)) {\n      var i = -1, n = object.length, o;\n      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);\n    } else {\n      for (var key in object) map.set(key, object[key]);\n    }\n    return map;\n  };\n  function d3_Map() {\n    this._ = Object.create(null);\n  }\n  var d3_map_proto = \"__proto__\", d3_map_zero = \"\\x00\";\n  d3_class(d3_Map, {\n    has: d3_map_has,\n    get: function(key) {\n      return this._[d3_map_escape(key)];\n    },\n    set: function(key, value) {\n      return this._[d3_map_escape(key)] = value;\n    },\n    remove: d3_map_remove,\n    keys: d3_map_keys,\n    values: function() {\n      var values = [];\n      for (var key in this._) values.push(this._[key]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var key in this._) entries.push({\n        key: d3_map_unescape(key),\n        value: this._[key]\n      });\n      return entries;\n    },\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);\n    }\n  });\n  function d3_map_escape(key) {\n    return (key += \"\") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n  }\n  function d3_map_unescape(key) {\n    return (key += \"\")[0] === d3_map_zero ? key.slice(1) : key;\n  }\n  function d3_map_has(key) {\n    return d3_map_escape(key) in this._;\n  }\n  function d3_map_remove(key) {\n    return (key = d3_map_escape(key)) in this._ && delete this._[key];\n  }\n  function d3_map_keys() {\n    var keys = [];\n    for (var key in this._) keys.push(d3_map_unescape(key));\n    return keys;\n  }\n  function d3_map_size() {\n    var size = 0;\n    for (var key in this._) ++size;\n    return size;\n  }\n  function d3_map_empty() {\n    for (var key in this._) return false;\n    return true;\n  }\n  d3.nest = function() {\n    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;\n    function map(mapType, array, depth) {\n      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n          values.push(object);\n        } else {\n          valuesByKey.set(keyValue, [ object ]);\n        }\n      }\n      if (mapType) {\n        object = mapType();\n        setter = function(keyValue, values) {\n          object.set(keyValue, map(mapType, values, depth));\n        };\n      } else {\n        object = {};\n        setter = function(keyValue, values) {\n          object[keyValue] = map(mapType, values, depth);\n        };\n      }\n      valuesByKey.forEach(setter);\n      return object;\n    }\n    function entries(map, depth) {\n      if (depth >= keys.length) return map;\n      var array = [], sortKey = sortKeys[depth++];\n      map.forEach(function(key, keyMap) {\n        array.push({\n          key: key,\n          values: entries(keyMap, depth)\n        });\n      });\n      return sortKey ? array.sort(function(a, b) {\n        return sortKey(a.key, b.key);\n      }) : array;\n    }\n    nest.map = function(array, mapType) {\n      return map(mapType, array, 0);\n    };\n    nest.entries = function(array) {\n      return entries(map(d3.map, array, 0), 0);\n    };\n    nest.key = function(d) {\n      keys.push(d);\n      return nest;\n    };\n    nest.sortKeys = function(order) {\n      sortKeys[keys.length - 1] = order;\n      return nest;\n    };\n    nest.sortValues = function(order) {\n      sortValues = order;\n      return nest;\n    };\n    nest.rollup = function(f) {\n      rollup = f;\n      return nest;\n    };\n    return nest;\n  };\n  d3.set = function(array) {\n    var set = new d3_Set();\n    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);\n    return set;\n  };\n  function d3_Set() {\n    this._ = Object.create(null);\n  }\n  d3_class(d3_Set, {\n    has: d3_map_has,\n    add: function(key) {\n      this._[d3_map_escape(key += \"\")] = true;\n      return key;\n    },\n    remove: d3_map_remove,\n    values: d3_map_keys,\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key));\n    }\n  });\n  d3.behavior = {};\n  function d3_identity(d) {\n    return d;\n  }\n  d3.rebind = function(target, source) {\n    var i = 1, n = arguments.length, method;\n    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n    return target;\n  };\n  function d3_rebind(target, source, method) {\n    return function() {\n      var value = method.apply(source, arguments);\n      return value === source ? target : value;\n    };\n  }\n  function d3_vendorSymbol(object, name) {\n    if (name in object) return name;\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {\n      var prefixName = d3_vendorPrefixes[i] + name;\n      if (prefixName in object) return prefixName;\n    }\n  }\n  var d3_vendorPrefixes = [ \"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\" ];\n  function d3_noop() {}\n  d3.dispatch = function() {\n    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    return dispatch;\n  };\n  function d3_dispatch() {}\n  d3_dispatch.prototype.on = function(type, listener) {\n    var i = type.indexOf(\".\"), name = \"\";\n    if (i >= 0) {\n      name = type.slice(i + 1);\n      type = type.slice(0, i);\n    }\n    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);\n    if (arguments.length === 2) {\n      if (listener == null) for (type in this) {\n        if (this.hasOwnProperty(type)) this[type].on(name, null);\n      }\n      return this;\n    }\n  };\n  function d3_dispatch_event(dispatch) {\n    var listeners = [], listenerByName = new d3_Map();\n    function event() {\n      var z = listeners, i = -1, n = z.length, l;\n      while (++i < n) if (l = z[i].on) l.apply(this, arguments);\n      return dispatch;\n    }\n    event.on = function(name, listener) {\n      var l = listenerByName.get(name), i;\n      if (arguments.length < 2) return l && l.on;\n      if (l) {\n        l.on = null;\n        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n        listenerByName.remove(name);\n      }\n      if (listener) listeners.push(listenerByName.set(name, {\n        on: listener\n      }));\n      return dispatch;\n    };\n    return event;\n  }\n  d3.event = null;\n  function d3_eventPreventDefault() {\n    d3.event.preventDefault();\n  }\n  function d3_eventSource() {\n    var e = d3.event, s;\n    while (s = e.sourceEvent) e = s;\n    return e;\n  }\n  function d3_eventDispatch(target) {\n    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    dispatch.of = function(thiz, argumentz) {\n      return function(e1) {\n        try {\n          var e0 = e1.sourceEvent = d3.event;\n          e1.target = target;\n          d3.event = e1;\n          dispatch[e1.type].apply(thiz, argumentz);\n        } finally {\n          d3.event = e0;\n        }\n      };\n    };\n    return dispatch;\n  }\n  d3.requote = function(s) {\n    return s.replace(d3_requote_re, \"\\\\$&\");\n  };\n  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  var d3_subclass = {}.__proto__ ? function(object, prototype) {\n    object.__proto__ = prototype;\n  } : function(object, prototype) {\n    for (var property in prototype) object[property] = prototype[property];\n  };\n  function d3_selection(groups) {\n    d3_subclass(groups, d3_selectionPrototype);\n    return groups;\n  }\n  var d3_select = function(s, n) {\n    return n.querySelector(s);\n  }, d3_selectAll = function(s, n) {\n    return n.querySelectorAll(s);\n  }, d3_selectMatches = function(n, s) {\n    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, \"matchesSelector\")];\n    d3_selectMatches = function(n, s) {\n      return d3_selectMatcher.call(n, s);\n    };\n    return d3_selectMatches(n, s);\n  };\n  if (typeof Sizzle === \"function\") {\n    d3_select = function(s, n) {\n      return Sizzle(s, n)[0] || null;\n    };\n    d3_selectAll = Sizzle;\n    d3_selectMatches = Sizzle.matchesSelector;\n  }\n  d3.selection = function() {\n    return d3.select(d3_document.documentElement);\n  };\n  var d3_selectionPrototype = d3.selection.prototype = [];\n  d3_selectionPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, group, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selector(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_select(selector, this);\n    };\n  }\n  d3_selectionPrototype.selectAll = function(selector) {\n    var subgroups = [], subgroup, node;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n          subgroup.parentNode = node;\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selectorAll(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_selectAll(selector, this);\n    };\n  }\n  var d3_nsXhtml = \"http://www.w3.org/1999/xhtml\";\n  var d3_nsPrefix = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: d3_nsXhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n  d3.ns = {\n    prefix: d3_nsPrefix,\n    qualify: function(name) {\n      var i = name.indexOf(\":\"), prefix = name;\n      if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n        space: d3_nsPrefix[prefix],\n        local: name\n      } : name;\n    }\n  };\n  d3_selectionPrototype.attr = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node();\n        name = d3.ns.qualify(name);\n        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n      }\n      for (value in name) this.each(d3_selection_attr(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_attr(name, value));\n  };\n  function d3_selection_attr(name, value) {\n    name = d3.ns.qualify(name);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrConstant() {\n      this.setAttribute(name, value);\n    }\n    function attrConstantNS() {\n      this.setAttributeNS(name.space, name.local, value);\n    }\n    function attrFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);\n    }\n    function attrFunctionNS() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n    }\n    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n  }\n  function d3_collapse(s) {\n    return s.trim().replace(/\\s+/g, \" \");\n  }\n  d3_selectionPrototype.classed = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;\n        if (value = node.classList) {\n          while (++i < n) if (!value.contains(name[i])) return false;\n        } else {\n          value = node.getAttribute(\"class\");\n          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;\n        }\n        return true;\n      }\n      for (value in name) this.each(d3_selection_classed(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_classed(name, value));\n  };\n  function d3_selection_classedRe(name) {\n    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");\n  }\n  function d3_selection_classes(name) {\n    return (name + \"\").trim().split(/^|\\s+/);\n  }\n  function d3_selection_classed(name, value) {\n    name = d3_selection_classes(name).map(d3_selection_classedName);\n    var n = name.length;\n    function classedConstant() {\n      var i = -1;\n      while (++i < n) name[i](this, value);\n    }\n    function classedFunction() {\n      var i = -1, x = value.apply(this, arguments);\n      while (++i < n) name[i](this, x);\n    }\n    return typeof value === \"function\" ? classedFunction : classedConstant;\n  }\n  function d3_selection_classedName(name) {\n    var re = d3_selection_classedRe(name);\n    return function(node, value) {\n      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n      var c = node.getAttribute(\"class\") || \"\";\n      if (value) {\n        re.lastIndex = 0;\n        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));\n      } else {\n        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));\n      }\n    };\n  }\n  d3_selectionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));\n        return this;\n      }\n      if (n < 2) {\n        var node = this.node();\n        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);\n      }\n      priority = \"\";\n    }\n    return this.each(d3_selection_style(name, value, priority));\n  };\n  function d3_selection_style(name, value, priority) {\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleConstant() {\n      this.style.setProperty(name, value, priority);\n    }\n    function styleFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);\n    }\n    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;\n  }\n  d3_selectionPrototype.property = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") return this.node()[name];\n      for (value in name) this.each(d3_selection_property(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_property(name, value));\n  };\n  function d3_selection_property(name, value) {\n    function propertyNull() {\n      delete this[name];\n    }\n    function propertyConstant() {\n      this[name] = value;\n    }\n    function propertyFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) delete this[name]; else this[name] = x;\n    }\n    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;\n  }\n  d3_selectionPrototype.text = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.textContent = \"\";\n    } : function() {\n      this.textContent = value;\n    }) : this.node().textContent;\n  };\n  d3_selectionPrototype.html = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.innerHTML = \"\";\n    } : function() {\n      this.innerHTML = value;\n    }) : this.node().innerHTML;\n  };\n  d3_selectionPrototype.append = function(name) {\n    name = d3_selection_creator(name);\n    return this.select(function() {\n      return this.appendChild(name.apply(this, arguments));\n    });\n  };\n  function d3_selection_creator(name) {\n    function create() {\n      var document = this.ownerDocument, namespace = this.namespaceURI;\n      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);\n    }\n    function createNS() {\n      return this.ownerDocument.createElementNS(name.space, name.local);\n    }\n    return typeof name === \"function\" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;\n  }\n  d3_selectionPrototype.insert = function(name, before) {\n    name = d3_selection_creator(name);\n    before = d3_selection_selector(before);\n    return this.select(function() {\n      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n    });\n  };\n  d3_selectionPrototype.remove = function() {\n    return this.each(d3_selectionRemove);\n  };\n  function d3_selectionRemove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n  d3_selectionPrototype.data = function(value, key) {\n    var i = -1, n = this.length, group, node;\n    if (!arguments.length) {\n      value = new Array(n = (group = this[0]).length);\n      while (++i < n) {\n        if (node = group[i]) {\n          value[i] = node.__data__;\n        }\n      }\n      return value;\n    }\n    function bind(group, groupData) {\n      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n      if (key) {\n        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;\n        for (i = -1; ++i < n; ) {\n          if (node = group[i]) {\n            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {\n              exitNodes[i] = node;\n            } else {\n              nodeByKeyValue.set(keyValue, node);\n            }\n            keyValues[i] = keyValue;\n          }\n        }\n        for (i = -1; ++i < m; ) {\n          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          } else if (node !== true) {\n            updateNodes[i] = node;\n            node.__data__ = nodeData;\n          }\n          nodeByKeyValue.set(keyValue, true);\n        }\n        for (i = -1; ++i < n; ) {\n          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {\n            exitNodes[i] = group[i];\n          }\n        }\n      } else {\n        for (i = -1; ++i < n0; ) {\n          node = group[i];\n          nodeData = groupData[i];\n          if (node) {\n            node.__data__ = nodeData;\n            updateNodes[i] = node;\n          } else {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          }\n        }\n        for (;i < m; ++i) {\n          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n        }\n        for (;i < n; ++i) {\n          exitNodes[i] = group[i];\n        }\n      }\n      enterNodes.update = updateNodes;\n      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n      enter.push(enterNodes);\n      update.push(updateNodes);\n      exit.push(exitNodes);\n    }\n    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);\n    if (typeof value === \"function\") {\n      while (++i < n) {\n        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n      }\n    } else {\n      while (++i < n) {\n        bind(group = this[i], value);\n      }\n    }\n    update.enter = function() {\n      return enter;\n    };\n    update.exit = function() {\n      return exit;\n    };\n    return update;\n  };\n  function d3_selection_dataNode(data) {\n    return {\n      __data__: data\n    };\n  }\n  d3_selectionPrototype.datum = function(value) {\n    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");\n  };\n  d3_selectionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_filter(selector) {\n    return function() {\n      return d3_selectMatches(this, selector);\n    };\n  }\n  d3_selectionPrototype.order = function() {\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n    return this;\n  };\n  d3_selectionPrototype.sort = function(comparator) {\n    comparator = d3_selection_sortComparator.apply(this, arguments);\n    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);\n    return this.order();\n  };\n  function d3_selection_sortComparator(comparator) {\n    if (!arguments.length) comparator = d3_ascending;\n    return function(a, b) {\n      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;\n    };\n  }\n  d3_selectionPrototype.each = function(callback) {\n    return d3_selection_each(this, function(node, i, j) {\n      callback.call(node, node.__data__, i, j);\n    });\n  };\n  function d3_selection_each(groups, callback) {\n    for (var j = 0, m = groups.length; j < m; j++) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {\n        if (node = group[i]) callback(node, i, j);\n      }\n    }\n    return groups;\n  }\n  d3_selectionPrototype.call = function(callback) {\n    var args = d3_array(arguments);\n    callback.apply(args[0] = this, args);\n    return this;\n  };\n  d3_selectionPrototype.empty = function() {\n    return !this.node();\n  };\n  d3_selectionPrototype.node = function() {\n    for (var j = 0, m = this.length; j < m; j++) {\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n    return null;\n  };\n  d3_selectionPrototype.size = function() {\n    var n = 0;\n    d3_selection_each(this, function() {\n      ++n;\n    });\n    return n;\n  };\n  function d3_selection_enter(selection) {\n    d3_subclass(selection, d3_selection_enterPrototype);\n    return selection;\n  }\n  var d3_selection_enterPrototype = [];\n  d3.selection.enter = d3_selection_enter;\n  d3.selection.enter.prototype = d3_selection_enterPrototype;\n  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n  d3_selection_enterPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, upgroup, group, node;\n    for (var j = -1, m = this.length; ++j < m; ) {\n      upgroup = (group = this[j]).update;\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = group.parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n          subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  d3_selection_enterPrototype.insert = function(name, before) {\n    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);\n    return d3_selectionPrototype.insert.call(this, name, before);\n  };\n  function d3_selection_enterInsertBefore(enter) {\n    var i0, j0;\n    return function(d, i, j) {\n      var group = enter[j].update, n = group.length, node;\n      if (j != j0) j0 = j, i0 = 0;\n      if (i >= i0) i0 = i + 1;\n      while (!(node = group[i0]) && ++i0 < n) ;\n      return node;\n    };\n  }\n  d3.select = function(node) {\n    var group;\n    if (typeof node === \"string\") {\n      group = [ d3_select(node, d3_document) ];\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = [ node ];\n      group.parentNode = d3_documentElement(node);\n    }\n    return d3_selection([ group ]);\n  };\n  d3.selectAll = function(nodes) {\n    var group;\n    if (typeof nodes === \"string\") {\n      group = d3_array(d3_selectAll(nodes, d3_document));\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = d3_array(nodes);\n      group.parentNode = null;\n    }\n    return d3_selection([ group ]);\n  };\n  d3_selectionPrototype.on = function(type, listener, capture) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof type !== \"string\") {\n        if (n < 2) listener = false;\n        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));\n        return this;\n      }\n      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;\n      capture = false;\n    }\n    return this.each(d3_selection_on(type, listener, capture));\n  };\n  function d3_selection_on(type, listener, capture) {\n    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;\n    if (i > 0) type = type.slice(0, i);\n    var filter = d3_selection_onFilters.get(type);\n    if (filter) type = filter, wrap = d3_selection_onFilter;\n    function onRemove() {\n      var l = this[name];\n      if (l) {\n        this.removeEventListener(type, l, l.$);\n        delete this[name];\n      }\n    }\n    function onAdd() {\n      var l = wrap(listener, d3_array(arguments));\n      onRemove.call(this);\n      this.addEventListener(type, this[name] = l, l.$ = capture);\n      l._ = listener;\n    }\n    function removeAll() {\n      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;\n      for (var name in this) {\n        if (match = name.match(re)) {\n          var l = this[name];\n          this.removeEventListener(match[1], l, l.$);\n          delete this[name];\n        }\n      }\n    }\n    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n  }\n  var d3_selection_onFilters = d3.map({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n  });\n  if (d3_document) {\n    d3_selection_onFilters.forEach(function(k) {\n      if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);\n    });\n  }\n  function d3_selection_onListener(listener, argumentz) {\n    return function(e) {\n      var o = d3.event;\n      d3.event = e;\n      argumentz[0] = this.__data__;\n      try {\n        listener.apply(this, argumentz);\n      } finally {\n        d3.event = o;\n      }\n    };\n  }\n  function d3_selection_onFilter(listener, argumentz) {\n    var l = d3_selection_onListener(listener, argumentz);\n    return function(e) {\n      var target = this, related = e.relatedTarget;\n      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {\n        l.call(target, e);\n      }\n    };\n  }\n  var d3_event_dragSelect, d3_event_dragId = 0;\n  function d3_event_dragSuppress(node) {\n    var name = \".dragsuppress-\" + ++d3_event_dragId, click = \"click\" + name, w = d3.select(d3_window(node)).on(\"touchmove\" + name, d3_eventPreventDefault).on(\"dragstart\" + name, d3_eventPreventDefault).on(\"selectstart\" + name, d3_eventPreventDefault);\n    if (d3_event_dragSelect == null) {\n      d3_event_dragSelect = \"onselectstart\" in node ? false : d3_vendorSymbol(node.style, \"userSelect\");\n    }\n    if (d3_event_dragSelect) {\n      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];\n      style[d3_event_dragSelect] = \"none\";\n    }\n    return function(suppressClick) {\n      w.on(name, null);\n      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n      if (suppressClick) {\n        var off = function() {\n          w.on(click, null);\n        };\n        w.on(click, function() {\n          d3_eventPreventDefault();\n          off();\n        }, true);\n        setTimeout(off, 0);\n      }\n    };\n  }\n  d3.mouse = function(container) {\n    return d3_mousePoint(container, d3_eventSource());\n  };\n  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;\n  function d3_mousePoint(container, e) {\n    if (e.changedTouches) e = e.changedTouches[0];\n    var svg = container.ownerSVGElement || container;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      if (d3_mouse_bug44083 < 0) {\n        var window = d3_window(container);\n        if (window.scrollX || window.scrollY) {\n          svg = d3.select(\"body\").append(\"svg\").style({\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            margin: 0,\n            padding: 0,\n            border: \"none\"\n          }, \"important\");\n          var ctm = svg[0][0].getScreenCTM();\n          d3_mouse_bug44083 = !(ctm.f || ctm.e);\n          svg.remove();\n        }\n      }\n      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, \n      point.y = e.clientY;\n      point = point.matrixTransform(container.getScreenCTM().inverse());\n      return [ point.x, point.y ];\n    }\n    var rect = container.getBoundingClientRect();\n    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];\n  }\n  d3.touch = function(container, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;\n    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return d3_mousePoint(container, touch);\n      }\n    }\n  };\n  d3.behavior.drag = function() {\n    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, \"mousemove\", \"mouseup\"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, \"touchmove\", \"touchend\");\n    function drag() {\n      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", touchstart);\n    }\n    function dragstart(id, position, subject, move, end) {\n      return function() {\n        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \".drag\" + (dragId == null ? \"\" : \"-\" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);\n        if (origin) {\n          dragOffset = origin.apply(that, arguments);\n          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];\n        } else {\n          dragOffset = [ 0, 0 ];\n        }\n        dispatch({\n          type: \"dragstart\"\n        });\n        function moved() {\n          var position1 = position(parent, dragId), dx, dy;\n          if (!position1) return;\n          dx = position1[0] - position0[0];\n          dy = position1[1] - position0[1];\n          dragged |= dx | dy;\n          position0 = position1;\n          dispatch({\n            type: \"drag\",\n            x: position1[0] + dragOffset[0],\n            y: position1[1] + dragOffset[1],\n            dx: dx,\n            dy: dy\n          });\n        }\n        function ended() {\n          if (!position(parent, dragId)) return;\n          dragSubject.on(move + dragName, null).on(end + dragName, null);\n          dragRestore(dragged);\n          dispatch({\n            type: \"dragend\"\n          });\n        }\n      };\n    }\n    drag.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return drag;\n    };\n    return d3.rebind(drag, event, \"on\");\n  };\n  function d3_behavior_dragTouchId() {\n    return d3.event.changedTouches[0].identifier;\n  }\n  d3.touches = function(container, touches) {\n    if (arguments.length < 2) touches = d3_eventSource().touches;\n    return touches ? d3_array(touches).map(function(touch) {\n      var point = d3_mousePoint(container, touch);\n      point.identifier = touch.identifier;\n      return point;\n    }) : [];\n  };\n  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n  function d3_sgn(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  }\n  function d3_cross2d(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n  function d3_acos(x) {\n    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);\n  }\n  function d3_asin(x) {\n    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);\n  }\n  function d3_sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n  function d3_cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n  function d3_tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n  function d3_haversin(x) {\n    return (x = Math.sin(x / 2)) * x;\n  }\n  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;\n  d3.interpolateZoom = function(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;\n    if (d2 < ε2) {\n      S = Math.log(w1 / w0) / ρ;\n      i = function(t) {\n        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];\n      };\n    } else {\n      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / ρ;\n      i = function(t) {\n        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];\n      };\n    }\n    i.duration = S * 1e3;\n    return i;\n  };\n  d3.behavior.zoom = function() {\n    var view = {\n      x: 0,\n      y: 0,\n      k: 1\n    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \"mousedown.zoom\", mousemove = \"mousemove.zoom\", mouseup = \"mouseup.zoom\", mousewheelTimer, touchstart = \"touchstart.zoom\", touchtime, event = d3_eventDispatch(zoom, \"zoomstart\", \"zoom\", \"zoomend\"), x0, x1, y0, y1;\n    if (!d3_behavior_zoomWheel) {\n      d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n      }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return d3.event.wheelDelta;\n      }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {\n        return -d3.event.detail;\n      }, \"MozMousePixelScroll\");\n    }\n    function zoom(g) {\n      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \".zoom\", mousewheeled).on(\"dblclick.zoom\", dblclicked).on(touchstart, touchstarted);\n    }\n    zoom.event = function(g) {\n      g.each(function() {\n        var dispatch = event.of(this, arguments), view1 = view;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.zoom\", function() {\n            view = this.__chart__ || {\n              x: 0,\n              y: 0,\n              k: 1\n            };\n            zoomstarted(dispatch);\n          }).tween(\"zoom:zoom\", function() {\n            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n            return function(t) {\n              var l = i(t), k = dx / l[2];\n              this.__chart__ = view = {\n                x: cx - l[0] * k,\n                y: cy - l[1] * k,\n                k: k\n              };\n              zoomed(dispatch);\n            };\n          }).each(\"interrupt.zoom\", function() {\n            zoomended(dispatch);\n          }).each(\"end.zoom\", function() {\n            zoomended(dispatch);\n          });\n        } else {\n          this.__chart__ = view;\n          zoomstarted(dispatch);\n          zoomed(dispatch);\n          zoomended(dispatch);\n        }\n      });\n    };\n    zoom.translate = function(_) {\n      if (!arguments.length) return [ view.x, view.y ];\n      view = {\n        x: +_[0],\n        y: +_[1],\n        k: view.k\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scale = function(_) {\n      if (!arguments.length) return view.k;\n      view = {\n        x: view.x,\n        y: view.y,\n        k: null\n      };\n      scaleTo(+_);\n      rescale();\n      return zoom;\n    };\n    zoom.scaleExtent = function(_) {\n      if (!arguments.length) return scaleExtent;\n      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.center = function(_) {\n      if (!arguments.length) return center;\n      center = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.size = function(_) {\n      if (!arguments.length) return size;\n      size = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.duration = function(_) {\n      if (!arguments.length) return duration;\n      duration = +_;\n      return zoom;\n    };\n    zoom.x = function(z) {\n      if (!arguments.length) return x1;\n      x1 = z;\n      x0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    zoom.y = function(z) {\n      if (!arguments.length) return y1;\n      y1 = z;\n      y0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    function location(p) {\n      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];\n    }\n    function point(l) {\n      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];\n    }\n    function scaleTo(s) {\n      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n    }\n    function translateTo(p, l) {\n      l = point(l);\n      view.x += p[0] - l[0];\n      view.y += p[1] - l[1];\n    }\n    function zoomTo(that, p, l, k) {\n      that.__chart__ = {\n        x: view.x,\n        y: view.y,\n        k: view.k\n      };\n      scaleTo(Math.pow(2, k));\n      translateTo(center0 = p, l);\n      that = d3.select(that);\n      if (duration > 0) that = that.transition().duration(duration);\n      that.call(zoom.event);\n    }\n    function rescale() {\n      if (x1) x1.domain(x0.range().map(function(x) {\n        return (x - view.x) / view.k;\n      }).map(x0.invert));\n      if (y1) y1.domain(y0.range().map(function(y) {\n        return (y - view.y) / view.k;\n      }).map(y0.invert));\n    }\n    function zoomstarted(dispatch) {\n      if (!zooming++) dispatch({\n        type: \"zoomstart\"\n      });\n    }\n    function zoomed(dispatch) {\n      rescale();\n      dispatch({\n        type: \"zoom\",\n        scale: view.k,\n        translate: [ view.x, view.y ]\n      });\n    }\n    function zoomended(dispatch) {\n      if (!--zooming) dispatch({\n        type: \"zoomend\"\n      }), center0 = null;\n    }\n    function mousedowned() {\n      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);\n      d3_selection_interrupt.call(that);\n      zoomstarted(dispatch);\n      function moved() {\n        dragged = 1;\n        translateTo(d3.mouse(that), location0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        subject.on(mousemove, null).on(mouseup, null);\n        dragRestore(dragged);\n        zoomended(dispatch);\n      }\n    }\n    function touchstarted() {\n      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \".zoom-\" + d3.event.changedTouches[0].identifier, touchmove = \"touchmove\" + zoomName, touchend = \"touchend\" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);\n      started();\n      zoomstarted(dispatch);\n      subject.on(mousedown, null).on(touchstart, started);\n      function relocate() {\n        var touches = d3.touches(that);\n        scale0 = view.k;\n        touches.forEach(function(t) {\n          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n        });\n        return touches;\n      }\n      function started() {\n        var target = d3.event.target;\n        d3.select(target).on(touchmove, moved).on(touchend, ended);\n        targets.push(target);\n        var changed = d3.event.changedTouches;\n        for (var i = 0, n = changed.length; i < n; ++i) {\n          locations0[changed[i].identifier] = null;\n        }\n        var touches = relocate(), now = Date.now();\n        if (touches.length === 1) {\n          if (now - touchtime < 500) {\n            var p = touches[0];\n            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n            d3_eventPreventDefault();\n          }\n          touchtime = now;\n        } else if (touches.length > 1) {\n          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];\n          distance0 = dx * dx + dy * dy;\n        }\n      }\n      function moved() {\n        var touches = d3.touches(that), p0, l0, p1, l1;\n        d3_selection_interrupt.call(that);\n        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {\n          p1 = touches[i];\n          if (l1 = locations0[p1.identifier]) {\n            if (l0) break;\n            p0 = p1, l0 = l1;\n          }\n        }\n        if (l1) {\n          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);\n          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];\n          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];\n          scaleTo(scale1 * scale0);\n        }\n        touchtime = null;\n        translateTo(p0, l0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        if (d3.event.touches.length) {\n          var changed = d3.event.changedTouches;\n          for (var i = 0, n = changed.length; i < n; ++i) {\n            delete locations0[changed[i].identifier];\n          }\n          for (var identifier in locations0) {\n            return void relocate();\n          }\n        }\n        d3.selectAll(targets).on(zoomName, null);\n        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n        dragRestore();\n        zoomended(dispatch);\n      }\n    }\n    function mousewheeled() {\n      var dispatch = event.of(this, arguments);\n      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), \n      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);\n      mousewheelTimer = setTimeout(function() {\n        mousewheelTimer = null;\n        zoomended(dispatch);\n      }, 50);\n      d3_eventPreventDefault();\n      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n      translateTo(center0, translate0);\n      zoomed(dispatch);\n    }\n    function dblclicked() {\n      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;\n      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n    }\n    return d3.rebind(zoom, event, \"on\");\n  };\n  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;\n  d3.color = d3_color;\n  function d3_color() {}\n  d3_color.prototype.toString = function() {\n    return this.rgb() + \"\";\n  };\n  d3.hsl = d3_hsl;\n  function d3_hsl(h, s, l) {\n    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n  }\n  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n  d3_hslPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, this.l / k);\n  };\n  d3_hslPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, k * this.l);\n  };\n  d3_hslPrototype.rgb = function() {\n    return d3_hsl_rgb(this.h, this.s, this.l);\n  };\n  function d3_hsl_rgb(h, s, l) {\n    var m1, m2;\n    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;\n    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;\n    l = l < 0 ? 0 : l > 1 ? 1 : l;\n    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;\n    m1 = 2 * l - m2;\n    function v(h) {\n      if (h > 360) h -= 360; else if (h < 0) h += 360;\n      if (h < 60) return m1 + (m2 - m1) * h / 60;\n      if (h < 180) return m2;\n      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;\n      return m1;\n    }\n    function vv(h) {\n      return Math.round(v(h) * 255);\n    }\n    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n  }\n  d3.hcl = d3_hcl;\n  function d3_hcl(h, c, l) {\n    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n  }\n  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n  d3_hclPrototype.brighter = function(k) {\n    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.darker = function(k) {\n    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.rgb = function() {\n    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n  };\n  function d3_hcl_lab(h, c, l) {\n    if (isNaN(h)) h = 0;\n    if (isNaN(c)) c = 0;\n    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n  }\n  d3.lab = d3_lab;\n  function d3_lab(l, a, b) {\n    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n  }\n  var d3_lab_K = 18;\n  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;\n  var d3_labPrototype = d3_lab.prototype = new d3_color();\n  d3_labPrototype.brighter = function(k) {\n    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.darker = function(k) {\n    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.rgb = function() {\n    return d3_lab_rgb(this.l, this.a, this.b);\n  };\n  function d3_lab_rgb(l, a, b) {\n    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;\n    x = d3_lab_xyz(x) * d3_lab_X;\n    y = d3_lab_xyz(y) * d3_lab_Y;\n    z = d3_lab_xyz(z) * d3_lab_Z;\n    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n  }\n  function d3_lab_hcl(l, a, b) {\n    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n  }\n  function d3_lab_xyz(x) {\n    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n  }\n  function d3_xyz_lab(x) {\n    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n  }\n  function d3_xyz_rgb(r) {\n    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n  }\n  d3.rgb = d3_rgb;\n  function d3_rgb(r, g, b) {\n    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n  }\n  function d3_rgbNumber(value) {\n    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);\n  }\n  function d3_rgbString(value) {\n    return d3_rgbNumber(value) + \"\";\n  }\n  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n  d3_rgbPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    var r = this.r, g = this.g, b = this.b, i = 30;\n    if (!r && !g && !b) return new d3_rgb(i, i, i);\n    if (r && r < i) r = i;\n    if (g && g < i) g = i;\n    if (b && b < i) b = i;\n    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n  };\n  d3_rgbPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n  };\n  d3_rgbPrototype.hsl = function() {\n    return d3_rgb_hsl(this.r, this.g, this.b);\n  };\n  d3_rgbPrototype.toString = function() {\n    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n  };\n  function d3_rgb_hex(v) {\n    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n  }\n  function d3_rgb_parse(format, rgb, hsl) {\n    var r = 0, g = 0, b = 0, m1, m2, color;\n    m1 = /([a-z]+)\\((.*)\\)/.exec(format = format.toLowerCase());\n    if (m1) {\n      m2 = m1[2].split(\",\");\n      switch (m1[1]) {\n       case \"hsl\":\n        {\n          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n        }\n\n       case \"rgb\":\n        {\n          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n        }\n      }\n    }\n    if (color = d3_rgb_names.get(format)) {\n      return rgb(color.r, color.g, color.b);\n    }\n    if (format != null && format.charAt(0) === \"#\" && !isNaN(color = parseInt(format.slice(1), 16))) {\n      if (format.length === 4) {\n        r = (color & 3840) >> 4;\n        r = r >> 4 | r;\n        g = color & 240;\n        g = g >> 4 | g;\n        b = color & 15;\n        b = b << 4 | b;\n      } else if (format.length === 7) {\n        r = (color & 16711680) >> 16;\n        g = (color & 65280) >> 8;\n        b = color & 255;\n      }\n    }\n    return rgb(r, g, b);\n  }\n  function d3_rgb_hsl(r, g, b) {\n    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n    if (d) {\n      s = l < .5 ? d / (max + min) : d / (2 - max - min);\n      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n      h *= 60;\n    } else {\n      h = NaN;\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new d3_hsl(h, s, l);\n  }\n  function d3_rgb_lab(r, g, b) {\n    r = d3_rgb_xyz(r);\n    g = d3_rgb_xyz(g);\n    b = d3_rgb_xyz(b);\n    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n  }\n  function d3_rgb_xyz(r) {\n    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n  }\n  function d3_rgb_parseNumber(c) {\n    var f = parseFloat(c);\n    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;\n  }\n  var d3_rgb_names = d3.map({\n    aliceblue: 15792383,\n    antiquewhite: 16444375,\n    aqua: 65535,\n    aquamarine: 8388564,\n    azure: 15794175,\n    beige: 16119260,\n    bisque: 16770244,\n    black: 0,\n    blanchedalmond: 16772045,\n    blue: 255,\n    blueviolet: 9055202,\n    brown: 10824234,\n    burlywood: 14596231,\n    cadetblue: 6266528,\n    chartreuse: 8388352,\n    chocolate: 13789470,\n    coral: 16744272,\n    cornflowerblue: 6591981,\n    cornsilk: 16775388,\n    crimson: 14423100,\n    cyan: 65535,\n    darkblue: 139,\n    darkcyan: 35723,\n    darkgoldenrod: 12092939,\n    darkgray: 11119017,\n    darkgreen: 25600,\n    darkgrey: 11119017,\n    darkkhaki: 12433259,\n    darkmagenta: 9109643,\n    darkolivegreen: 5597999,\n    darkorange: 16747520,\n    darkorchid: 10040012,\n    darkred: 9109504,\n    darksalmon: 15308410,\n    darkseagreen: 9419919,\n    darkslateblue: 4734347,\n    darkslategray: 3100495,\n    darkslategrey: 3100495,\n    darkturquoise: 52945,\n    darkviolet: 9699539,\n    deeppink: 16716947,\n    deepskyblue: 49151,\n    dimgray: 6908265,\n    dimgrey: 6908265,\n    dodgerblue: 2003199,\n    firebrick: 11674146,\n    floralwhite: 16775920,\n    forestgreen: 2263842,\n    fuchsia: 16711935,\n    gainsboro: 14474460,\n    ghostwhite: 16316671,\n    gold: 16766720,\n    goldenrod: 14329120,\n    gray: 8421504,\n    green: 32768,\n    greenyellow: 11403055,\n    grey: 8421504,\n    honeydew: 15794160,\n    hotpink: 16738740,\n    indianred: 13458524,\n    indigo: 4915330,\n    ivory: 16777200,\n    khaki: 15787660,\n    lavender: 15132410,\n    lavenderblush: 16773365,\n    lawngreen: 8190976,\n    lemonchiffon: 16775885,\n    lightblue: 11393254,\n    lightcoral: 15761536,\n    lightcyan: 14745599,\n    lightgoldenrodyellow: 16448210,\n    lightgray: 13882323,\n    lightgreen: 9498256,\n    lightgrey: 13882323,\n    lightpink: 16758465,\n    lightsalmon: 16752762,\n    lightseagreen: 2142890,\n    lightskyblue: 8900346,\n    lightslategray: 7833753,\n    lightslategrey: 7833753,\n    lightsteelblue: 11584734,\n    lightyellow: 16777184,\n    lime: 65280,\n    limegreen: 3329330,\n    linen: 16445670,\n    magenta: 16711935,\n    maroon: 8388608,\n    mediumaquamarine: 6737322,\n    mediumblue: 205,\n    mediumorchid: 12211667,\n    mediumpurple: 9662683,\n    mediumseagreen: 3978097,\n    mediumslateblue: 8087790,\n    mediumspringgreen: 64154,\n    mediumturquoise: 4772300,\n    mediumvioletred: 13047173,\n    midnightblue: 1644912,\n    mintcream: 16121850,\n    mistyrose: 16770273,\n    moccasin: 16770229,\n    navajowhite: 16768685,\n    navy: 128,\n    oldlace: 16643558,\n    olive: 8421376,\n    olivedrab: 7048739,\n    orange: 16753920,\n    orangered: 16729344,\n    orchid: 14315734,\n    palegoldenrod: 15657130,\n    palegreen: 10025880,\n    paleturquoise: 11529966,\n    palevioletred: 14381203,\n    papayawhip: 16773077,\n    peachpuff: 16767673,\n    peru: 13468991,\n    pink: 16761035,\n    plum: 14524637,\n    powderblue: 11591910,\n    purple: 8388736,\n    rebeccapurple: 6697881,\n    red: 16711680,\n    rosybrown: 12357519,\n    royalblue: 4286945,\n    saddlebrown: 9127187,\n    salmon: 16416882,\n    sandybrown: 16032864,\n    seagreen: 3050327,\n    seashell: 16774638,\n    sienna: 10506797,\n    silver: 12632256,\n    skyblue: 8900331,\n    slateblue: 6970061,\n    slategray: 7372944,\n    slategrey: 7372944,\n    snow: 16775930,\n    springgreen: 65407,\n    steelblue: 4620980,\n    tan: 13808780,\n    teal: 32896,\n    thistle: 14204888,\n    tomato: 16737095,\n    turquoise: 4251856,\n    violet: 15631086,\n    wheat: 16113331,\n    white: 16777215,\n    whitesmoke: 16119285,\n    yellow: 16776960,\n    yellowgreen: 10145074\n  });\n  d3_rgb_names.forEach(function(key, value) {\n    d3_rgb_names.set(key, d3_rgbNumber(value));\n  });\n  function d3_functor(v) {\n    return typeof v === \"function\" ? v : function() {\n      return v;\n    };\n  }\n  d3.functor = d3_functor;\n  d3.xhr = d3_xhrType(d3_identity);\n  function d3_xhrType(response) {\n    return function(url, mimeType, callback) {\n      if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType, \n      mimeType = null;\n      return d3_xhr(url, mimeType, response, callback);\n    };\n  }\n  function d3_xhr(url, mimeType, response, callback) {\n    var xhr = {}, dispatch = d3.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"), headers = {}, request = new XMLHttpRequest(), responseType = null;\n    if (this.XDomainRequest && !(\"withCredentials\" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {\n      request.readyState > 3 && respond();\n    };\n    function respond() {\n      var status = request.status, result;\n      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {\n        try {\n          result = response.call(xhr, request);\n        } catch (e) {\n          dispatch.error.call(xhr, e);\n          return;\n        }\n        dispatch.load.call(xhr, result);\n      } else {\n        dispatch.error.call(xhr, request);\n      }\n    }\n    request.onprogress = function(event) {\n      var o = d3.event;\n      d3.event = event;\n      try {\n        dispatch.progress.call(xhr, request);\n      } finally {\n        d3.event = o;\n      }\n    };\n    xhr.header = function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers[name];\n      if (value == null) delete headers[name]; else headers[name] = value + \"\";\n      return xhr;\n    };\n    xhr.mimeType = function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return xhr;\n    };\n    xhr.responseType = function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return xhr;\n    };\n    xhr.response = function(value) {\n      response = value;\n      return xhr;\n    };\n    [ \"get\", \"post\" ].forEach(function(method) {\n      xhr[method] = function() {\n        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));\n      };\n    });\n    xhr.send = function(method, data, callback) {\n      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;\n      request.open(method, url, true);\n      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";\n      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);\n      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);\n      if (responseType != null) request.responseType = responseType;\n      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {\n        callback(null, request);\n      });\n      dispatch.beforesend.call(xhr, request);\n      request.send(data == null ? null : data);\n      return xhr;\n    };\n    xhr.abort = function() {\n      request.abort();\n      return xhr;\n    };\n    d3.rebind(xhr, dispatch, \"on\");\n    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n  }\n  function d3_xhr_fixCallback(callback) {\n    return callback.length === 1 ? function(error, request) {\n      callback(error == null ? request : null);\n    } : callback;\n  }\n  function d3_xhrHasResponse(request) {\n    var type = request.responseType;\n    return type && type !== \"text\" ? request.response : request.responseText;\n  }\n  d3.dsv = function(delimiter, mimeType) {\n    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);\n    function dsv(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n      xhr.row = function(_) {\n        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n      };\n      return xhr;\n    }\n    function response(request) {\n      return dsv.parse(request.responseText);\n    }\n    function typedResponse(f) {\n      return function(request) {\n        return dsv.parse(request.responseText, f);\n      };\n    }\n    dsv.parse = function(text, f) {\n      var o;\n      return dsv.parseRows(text, function(row, i) {\n        if (o) return o(row, i - 1);\n        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {\n          return JSON.stringify(name) + \": d[\" + i + \"]\";\n        }).join(\",\") + \"}\");\n        o = f ? function(row, i) {\n          return f(a(row), i);\n        } : a;\n      });\n    };\n    dsv.parseRows = function(text, f) {\n      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n      function token() {\n        if (I >= N) return EOF;\n        if (eol) return eol = false, EOL;\n        var j = I;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          var c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, '\"');\n        }\n        while (I < N) {\n          var c = text.charCodeAt(I++), k = 1;\n          if (c === 10) eol = true; else if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(I) === 10) ++I, ++k;\n          } else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n        return text.slice(j);\n      }\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n      return rows;\n    };\n    dsv.format = function(rows) {\n      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n      var fieldSet = new d3_Set(), fields = [];\n      rows.forEach(function(row) {\n        for (var field in row) {\n          if (!fieldSet.has(field)) {\n            fields.push(fieldSet.add(field));\n          }\n        }\n      });\n      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {\n        return fields.map(function(field) {\n          return formatValue(row[field]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    };\n    dsv.formatRows = function(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    };\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n    function formatValue(text) {\n      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;\n    }\n    return dsv;\n  };\n  d3.csv = d3.dsv(\",\", \"text/csv\");\n  d3.tsv = d3.dsv(\"\t\", \"text/tab-separated-values\");\n  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, \"requestAnimationFrame\")] || function(callback) {\n    setTimeout(callback, 17);\n  };\n  d3.timer = function() {\n    d3_timer.apply(this, arguments);\n  };\n  function d3_timer(callback, delay, then) {\n    var n = arguments.length;\n    if (n < 2) delay = 0;\n    if (n < 3) then = Date.now();\n    var time = then + delay, timer = {\n      c: callback,\n      t: time,\n      n: null\n    };\n    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;\n    d3_timer_queueTail = timer;\n    if (!d3_timer_interval) {\n      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n    return timer;\n  }\n  function d3_timer_step() {\n    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;\n    if (delay > 24) {\n      if (isFinite(delay)) {\n        clearTimeout(d3_timer_timeout);\n        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n      }\n      d3_timer_interval = 0;\n    } else {\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  }\n  d3.timer.flush = function() {\n    d3_timer_mark();\n    d3_timer_sweep();\n  };\n  function d3_timer_mark() {\n    var now = Date.now(), timer = d3_timer_queueHead;\n    while (timer) {\n      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;\n      timer = timer.n;\n    }\n    return now;\n  }\n  function d3_timer_sweep() {\n    var t0, t1 = d3_timer_queueHead, time = Infinity;\n    while (t1) {\n      if (t1.c) {\n        if (t1.t < time) time = t1.t;\n        t1 = (t0 = t1).n;\n      } else {\n        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n      }\n    }\n    d3_timer_queueTail = t0;\n    return time;\n  }\n  function d3_format_precision(x, p) {\n    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n  }\n  d3.round = function(x, n) {\n    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n  };\n  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n  d3.formatPrefix = function(value, precision) {\n    var i = 0;\n    if (value = +value) {\n      if (value < 0) value *= -1;\n      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n    }\n    return d3_formatPrefixes[8 + i / 3];\n  };\n  function d3_formatPrefix(d, i) {\n    var k = Math.pow(10, abs(8 - i) * 3);\n    return {\n      scale: i > 8 ? function(d) {\n        return d / k;\n      } : function(d) {\n        return d * k;\n      },\n      symbol: d\n    };\n  }\n  function d3_locale_numberFormat(locale) {\n    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {\n      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n      }\n      return t.reverse().join(locale_thousands);\n    } : d3_identity;\n    return function(specifier) {\n      var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"-\", symbol = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \"\", suffix = \"\", integer = false, exponent = true;\n      if (precision) precision = +precision.substring(1);\n      if (zfill || fill === \"0\" && align === \"=\") {\n        zfill = fill = \"0\";\n        align = \"=\";\n      }\n      switch (type) {\n       case \"n\":\n        comma = true;\n        type = \"g\";\n        break;\n\n       case \"%\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"f\";\n        break;\n\n       case \"p\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"r\";\n        break;\n\n       case \"b\":\n       case \"o\":\n       case \"x\":\n       case \"X\":\n        if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();\n\n       case \"c\":\n        exponent = false;\n\n       case \"d\":\n        integer = true;\n        precision = 0;\n        break;\n\n       case \"s\":\n        scale = -1;\n        type = \"r\";\n        break;\n      }\n      if (symbol === \"$\") prefix = locale_currency[0], suffix = locale_currency[1];\n      if (type == \"r\" && !precision) type = \"g\";\n      if (precision != null) {\n        if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n      }\n      type = d3_format_types.get(type) || d3_format_typeDefault;\n      var zcomma = zfill && comma;\n      return function(value) {\n        var fullSuffix = suffix;\n        if (integer && value % 1) return \"\";\n        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign === \"-\" ? \"\" : sign;\n        if (scale < 0) {\n          var unit = d3.formatPrefix(value, precision);\n          value = unit.scale(value);\n          fullSuffix = unit.symbol + suffix;\n        } else {\n          value *= scale;\n        }\n        value = type(value, precision);\n        var i = value.lastIndexOf(\".\"), before, after;\n        if (i < 0) {\n          var j = exponent ? value.lastIndexOf(\"e\") : -1;\n          if (j < 0) before = value, after = \"\"; else before = value.substring(0, j), after = value.substring(j);\n        } else {\n          before = value.substring(0, i);\n          after = locale_decimal + value.substring(i + 1);\n        }\n        if (!zfill && comma) before = formatGroup(before, Infinity);\n        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n        negative += prefix;\n        value = before + after;\n        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n      };\n    };\n  }\n  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n  var d3_format_types = d3.map({\n    b: function(x) {\n      return x.toString(2);\n    },\n    c: function(x) {\n      return String.fromCharCode(x);\n    },\n    o: function(x) {\n      return x.toString(8);\n    },\n    x: function(x) {\n      return x.toString(16);\n    },\n    X: function(x) {\n      return x.toString(16).toUpperCase();\n    },\n    g: function(x, p) {\n      return x.toPrecision(p);\n    },\n    e: function(x, p) {\n      return x.toExponential(p);\n    },\n    f: function(x, p) {\n      return x.toFixed(p);\n    },\n    r: function(x, p) {\n      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n    }\n  });\n  function d3_format_typeDefault(x) {\n    return x + \"\";\n  }\n  var d3_time = d3.time = {}, d3_date = Date;\n  function d3_date_utc() {\n    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n  }\n  d3_date_utc.prototype = {\n    getDate: function() {\n      return this._.getUTCDate();\n    },\n    getDay: function() {\n      return this._.getUTCDay();\n    },\n    getFullYear: function() {\n      return this._.getUTCFullYear();\n    },\n    getHours: function() {\n      return this._.getUTCHours();\n    },\n    getMilliseconds: function() {\n      return this._.getUTCMilliseconds();\n    },\n    getMinutes: function() {\n      return this._.getUTCMinutes();\n    },\n    getMonth: function() {\n      return this._.getUTCMonth();\n    },\n    getSeconds: function() {\n      return this._.getUTCSeconds();\n    },\n    getTime: function() {\n      return this._.getTime();\n    },\n    getTimezoneOffset: function() {\n      return 0;\n    },\n    valueOf: function() {\n      return this._.valueOf();\n    },\n    setDate: function() {\n      d3_time_prototype.setUTCDate.apply(this._, arguments);\n    },\n    setDay: function() {\n      d3_time_prototype.setUTCDay.apply(this._, arguments);\n    },\n    setFullYear: function() {\n      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n    },\n    setHours: function() {\n      d3_time_prototype.setUTCHours.apply(this._, arguments);\n    },\n    setMilliseconds: function() {\n      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n    },\n    setMinutes: function() {\n      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n    },\n    setMonth: function() {\n      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n    },\n    setSeconds: function() {\n      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n    },\n    setTime: function() {\n      d3_time_prototype.setTime.apply(this._, arguments);\n    }\n  };\n  var d3_time_prototype = Date.prototype;\n  function d3_time_interval(local, step, number) {\n    function round(date) {\n      var d0 = local(date), d1 = offset(d0, 1);\n      return date - d0 < d1 - date ? d0 : d1;\n    }\n    function ceil(date) {\n      step(date = local(new d3_date(date - 1)), 1);\n      return date;\n    }\n    function offset(date, k) {\n      step(date = new d3_date(+date), k);\n      return date;\n    }\n    function range(t0, t1, dt) {\n      var time = ceil(t0), times = [];\n      if (dt > 1) {\n        while (time < t1) {\n          if (!(number(time) % dt)) times.push(new Date(+time));\n          step(time, 1);\n        }\n      } else {\n        while (time < t1) times.push(new Date(+time)), step(time, 1);\n      }\n      return times;\n    }\n    function range_utc(t0, t1, dt) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = t0;\n        return range(utc, t1, dt);\n      } finally {\n        d3_date = Date;\n      }\n    }\n    local.floor = local;\n    local.round = round;\n    local.ceil = ceil;\n    local.offset = offset;\n    local.range = range;\n    var utc = local.utc = d3_time_interval_utc(local);\n    utc.floor = utc;\n    utc.round = d3_time_interval_utc(round);\n    utc.ceil = d3_time_interval_utc(ceil);\n    utc.offset = d3_time_interval_utc(offset);\n    utc.range = range_utc;\n    return local;\n  }\n  function d3_time_interval_utc(method) {\n    return function(date, k) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = date;\n        return method(utc, k)._;\n      } finally {\n        d3_date = Date;\n      }\n    };\n  }\n  d3_time.year = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setMonth(0, 1);\n    return date;\n  }, function(date, offset) {\n    date.setFullYear(date.getFullYear() + offset);\n  }, function(date) {\n    return date.getFullYear();\n  });\n  d3_time.years = d3_time.year.range;\n  d3_time.years.utc = d3_time.year.utc.range;\n  d3_time.day = d3_time_interval(function(date) {\n    var day = new d3_date(2e3, 0);\n    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    return day;\n  }, function(date, offset) {\n    date.setDate(date.getDate() + offset);\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n  d3_time.days = d3_time.day.range;\n  d3_time.days.utc = d3_time.day.utc.range;\n  d3_time.dayOfYear = function(date) {\n    var year = d3_time.year(date);\n    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n  };\n  [ \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\" ].forEach(function(day, i) {\n    i = 7 - i;\n    var interval = d3_time[day] = d3_time_interval(function(date) {\n      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n      return date;\n    }, function(date, offset) {\n      date.setDate(date.getDate() + Math.floor(offset) * 7);\n    }, function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n    });\n    d3_time[day + \"s\"] = interval.range;\n    d3_time[day + \"s\"].utc = interval.utc.range;\n    d3_time[day + \"OfYear\"] = function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n    };\n  });\n  d3_time.week = d3_time.sunday;\n  d3_time.weeks = d3_time.sunday.range;\n  d3_time.weeks.utc = d3_time.sunday.utc.range;\n  d3_time.weekOfYear = d3_time.sundayOfYear;\n  function d3_locale_timeFormat(locale) {\n    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n    function d3_time_format(template) {\n      var n = template.length;\n      function format(date) {\n        var string = [], i = -1, j = 0, c, p, f;\n        while (++i < n) {\n          if (template.charCodeAt(i) === 37) {\n            string.push(template.slice(j, i));\n            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n        string.push(template.slice(j, i));\n        return string.join(\"\");\n      }\n      format.parse = function(string) {\n        var d = {\n          y: 1900,\n          m: 0,\n          d: 1,\n          H: 0,\n          M: 0,\n          S: 0,\n          L: 0,\n          Z: null\n        }, i = d3_time_parse(d, template, string, 0);\n        if (i != string.length) return null;\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();\n        if (\"j\" in d) date.setFullYear(d.y, 0, d.j); else if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n          date.setFullYear(d.y, 0, 1);\n          date.setFullYear(d.y, 0, \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n        } else date.setFullYear(d.y, d.m, d.d);\n        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n        return localZ ? date._ : date;\n      };\n      format.toString = function() {\n        return template;\n      };\n      return format;\n    }\n    function d3_time_parse(date, template, string, j) {\n      var c, p, t, i = 0, n = template.length, m = string.length;\n      while (i < n) {\n        if (j >= m) return -1;\n        c = template.charCodeAt(i++);\n        if (c === 37) {\n          t = template.charAt(i++);\n          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n          if (!p || (j = p(date, string, j)) < 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n      return j;\n    }\n    d3_time_format.utc = function(template) {\n      var local = d3_time_format(template);\n      function format(date) {\n        try {\n          d3_date = d3_date_utc;\n          var utc = new d3_date();\n          utc._ = date;\n          return local(utc);\n        } finally {\n          d3_date = Date;\n        }\n      }\n      format.parse = function(string) {\n        try {\n          d3_date = d3_date_utc;\n          var date = local.parse(string);\n          return date && date._;\n        } finally {\n          d3_date = Date;\n        }\n      };\n      format.toString = local.toString;\n      return format;\n    };\n    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n    locale_periods.forEach(function(p, i) {\n      d3_time_periodLookup.set(p.toLowerCase(), i);\n    });\n    var d3_time_formats = {\n      a: function(d) {\n        return locale_shortDays[d.getDay()];\n      },\n      A: function(d) {\n        return locale_days[d.getDay()];\n      },\n      b: function(d) {\n        return locale_shortMonths[d.getMonth()];\n      },\n      B: function(d) {\n        return locale_months[d.getMonth()];\n      },\n      c: d3_time_format(locale_dateTime),\n      d: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      e: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      H: function(d, p) {\n        return d3_time_formatPad(d.getHours(), p, 2);\n      },\n      I: function(d, p) {\n        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n      },\n      j: function(d, p) {\n        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n      },\n      L: function(d, p) {\n        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n      },\n      m: function(d, p) {\n        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n      },\n      M: function(d, p) {\n        return d3_time_formatPad(d.getMinutes(), p, 2);\n      },\n      p: function(d) {\n        return locale_periods[+(d.getHours() >= 12)];\n      },\n      S: function(d, p) {\n        return d3_time_formatPad(d.getSeconds(), p, 2);\n      },\n      U: function(d, p) {\n        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n      },\n      w: function(d) {\n        return d.getDay();\n      },\n      W: function(d, p) {\n        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n      },\n      x: d3_time_format(locale_date),\n      X: d3_time_format(locale_time),\n      y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n      },\n      Y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n      },\n      Z: d3_time_zone,\n      \"%\": function() {\n        return \"%\";\n      }\n    };\n    var d3_time_parsers = {\n      a: d3_time_parseWeekdayAbbrev,\n      A: d3_time_parseWeekday,\n      b: d3_time_parseMonthAbbrev,\n      B: d3_time_parseMonth,\n      c: d3_time_parseLocaleFull,\n      d: d3_time_parseDay,\n      e: d3_time_parseDay,\n      H: d3_time_parseHour24,\n      I: d3_time_parseHour24,\n      j: d3_time_parseDayOfYear,\n      L: d3_time_parseMilliseconds,\n      m: d3_time_parseMonthNumber,\n      M: d3_time_parseMinutes,\n      p: d3_time_parseAmPm,\n      S: d3_time_parseSeconds,\n      U: d3_time_parseWeekNumberSunday,\n      w: d3_time_parseWeekdayNumber,\n      W: d3_time_parseWeekNumberMonday,\n      x: d3_time_parseLocaleDate,\n      X: d3_time_parseLocaleTime,\n      y: d3_time_parseYear,\n      Y: d3_time_parseFullYear,\n      Z: d3_time_parseZone,\n      \"%\": d3_time_parseLiteralPercent\n    };\n    function d3_time_parseWeekdayAbbrev(date, string, i) {\n      d3_time_dayAbbrevRe.lastIndex = 0;\n      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseWeekday(date, string, i) {\n      d3_time_dayRe.lastIndex = 0;\n      var n = d3_time_dayRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonthAbbrev(date, string, i) {\n      d3_time_monthAbbrevRe.lastIndex = 0;\n      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonth(date, string, i) {\n      d3_time_monthRe.lastIndex = 0;\n      var n = d3_time_monthRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseLocaleFull(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n    }\n    function d3_time_parseLocaleDate(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n    }\n    function d3_time_parseLocaleTime(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n    }\n    function d3_time_parseAmPm(date, string, i) {\n      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n      return n == null ? -1 : (date.p = n, i);\n    }\n    return d3_time_format;\n  }\n  var d3_time_formatPads = {\n    \"-\": \"\",\n    _: \" \",\n    \"0\": \"0\"\n  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;\n  function d3_time_formatPad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\", string = (sign ? -value : value) + \"\", length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n  function d3_time_formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");\n  }\n  function d3_time_formatLookup(names) {\n    var map = new d3_Map(), i = -1, n = names.length;\n    while (++i < n) map.set(names[i].toLowerCase(), i);\n    return map;\n  }\n  function d3_time_parseWeekdayNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n    return n ? (date.w = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberSunday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.U = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberMonday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.W = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseFullYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n    return n ? (date.y = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n  }\n  function d3_time_parseZone(date, string, i) {\n    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, \n    i + 5) : -1;\n  }\n  function d3_time_expandYear(d) {\n    return d + (d > 68 ? 1900 : 2e3);\n  }\n  function d3_time_parseMonthNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n  }\n  function d3_time_parseDay(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.d = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseDayOfYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.j = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseHour24(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.H = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMinutes(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.M = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseSeconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.S = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMilliseconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.L = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_zone(d) {\n    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = abs(z) / 60 | 0, zm = abs(z) % 60;\n    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);\n  }\n  function d3_time_parseLiteralPercent(date, string, i) {\n    d3_time_percentRe.lastIndex = 0;\n    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n  function d3_time_formatMulti(formats) {\n    var n = formats.length, i = -1;\n    while (++i < n) formats[i][0] = this(formats[i][0]);\n    return function(date) {\n      var i = 0, f = formats[i];\n      while (!f[1](date)) f = formats[++i];\n      return f[0](date);\n    };\n  }\n  d3.locale = function(locale) {\n    return {\n      numberFormat: d3_locale_numberFormat(locale),\n      timeFormat: d3_locale_timeFormat(locale)\n    };\n  };\n  var d3_locale_enUS = d3.locale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [ 3 ],\n    currency: [ \"$\", \"\" ],\n    dateTime: \"%a %b %e %X %Y\",\n    date: \"%m/%d/%Y\",\n    time: \"%H:%M:%S\",\n    periods: [ \"AM\", \"PM\" ],\n    days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],\n    shortDays: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],\n    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n    shortMonths: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\n  });\n  d3.format = d3_locale_enUS.numberFormat;\n  d3.geo = {};\n  function d3_adder() {}\n  d3_adder.prototype = {\n    s: 0,\n    t: 0,\n    add: function(y) {\n      d3_adderSum(y, this.t, d3_adderTemp);\n      d3_adderSum(d3_adderTemp.s, this.s, this);\n      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;\n    },\n    reset: function() {\n      this.s = this.t = 0;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n  var d3_adderTemp = new d3_adder();\n  function d3_adderSum(a, b, o) {\n    var x = o.s = a + b, bv = x - a, av = x - bv;\n    o.t = a - av + (b - bv);\n  }\n  d3.geo.stream = function(object, listener) {\n    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n      d3_geo_streamObjectType[object.type](object, listener);\n    } else {\n      d3_geo_streamGeometry(object, listener);\n    }\n  };\n  function d3_geo_streamGeometry(geometry, listener) {\n    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n    }\n  }\n  var d3_geo_streamObjectType = {\n    Feature: function(feature, listener) {\n      d3_geo_streamGeometry(feature.geometry, listener);\n    },\n    FeatureCollection: function(object, listener) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);\n    }\n  };\n  var d3_geo_streamGeometryType = {\n    Sphere: function(object, listener) {\n      listener.sphere();\n    },\n    Point: function(object, listener) {\n      object = object.coordinates;\n      listener.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, listener) {\n      d3_geo_streamLine(object.coordinates, listener, 0);\n    },\n    MultiLineString: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);\n    },\n    Polygon: function(object, listener) {\n      d3_geo_streamPolygon(object.coordinates, listener);\n    },\n    MultiPolygon: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);\n    },\n    GeometryCollection: function(object, listener) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);\n    }\n  };\n  function d3_geo_streamLine(coordinates, listener, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    listener.lineStart();\n    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n    listener.lineEnd();\n  }\n  function d3_geo_streamPolygon(coordinates, listener) {\n    var i = -1, n = coordinates.length;\n    listener.polygonStart();\n    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);\n    listener.polygonEnd();\n  }\n  d3.geo.area = function(object) {\n    d3_geo_areaSum = 0;\n    d3.geo.stream(object, d3_geo_area);\n    return d3_geo_areaSum;\n  };\n  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();\n  var d3_geo_area = {\n    sphere: function() {\n      d3_geo_areaSum += 4 * π;\n    },\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_areaRingSum.reset();\n      d3_geo_area.lineStart = d3_geo_areaRingStart;\n    },\n    polygonEnd: function() {\n      var area = 2 * d3_geo_areaRingSum;\n      d3_geo_areaSum += area < 0 ? 4 * π + area : area;\n      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n    }\n  };\n  function d3_geo_areaRingStart() {\n    var λ00, φ00, λ0, cosφ0, sinφ0;\n    d3_geo_area.point = function(λ, φ) {\n      d3_geo_area.point = nextPoint;\n      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), \n      sinφ0 = Math.sin(φ);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      φ = φ * d3_radians / 2 + π / 4;\n      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n      d3_geo_areaRingSum.add(Math.atan2(v, u));\n      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n    }\n    d3_geo_area.lineEnd = function() {\n      nextPoint(λ00, φ00);\n    };\n  }\n  function d3_geo_cartesian(spherical) {\n    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);\n    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];\n  }\n  function d3_geo_cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n  function d3_geo_cartesianCross(a, b) {\n    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];\n  }\n  function d3_geo_cartesianAdd(a, b) {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n  }\n  function d3_geo_cartesianScale(vector, k) {\n    return [ vector[0] * k, vector[1] * k, vector[2] * k ];\n  }\n  function d3_geo_cartesianNormalize(d) {\n    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l;\n    d[1] /= l;\n    d[2] /= l;\n  }\n  function d3_geo_spherical(cartesian) {\n    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];\n  }\n  function d3_geo_sphericalEqual(a, b) {\n    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;\n  }\n  d3.geo.bounds = function() {\n    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n    var bound = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        bound.point = ringPoint;\n        bound.lineStart = ringStart;\n        bound.lineEnd = ringEnd;\n        dλSum = 0;\n        d3_geo_area.polygonStart();\n      },\n      polygonEnd: function() {\n        d3_geo_area.polygonEnd();\n        bound.point = point;\n        bound.lineStart = lineStart;\n        bound.lineEnd = lineEnd;\n        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;\n        range[0] = λ0, range[1] = λ1;\n      }\n    };\n    function point(λ, φ) {\n      ranges.push(range = [ λ0 = λ, λ1 = λ ]);\n      if (φ < φ0) φ0 = φ;\n      if (φ > φ1) φ1 = φ;\n    }\n    function linePoint(λ, φ) {\n      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);\n      if (p0) {\n        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n        d3_geo_cartesianNormalize(inflection);\n        inflection = d3_geo_spherical(inflection);\n        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;\n        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = inflection[1] * d3_degrees;\n          if (φi > φ1) φ1 = φi;\n        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = -inflection[1] * d3_degrees;\n          if (φi < φ0) φ0 = φi;\n        } else {\n          if (φ < φ0) φ0 = φ;\n          if (φ > φ1) φ1 = φ;\n        }\n        if (antimeridian) {\n          if (λ < λ_) {\n            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n          } else {\n            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n          }\n        } else {\n          if (λ1 >= λ0) {\n            if (λ < λ0) λ0 = λ;\n            if (λ > λ1) λ1 = λ;\n          } else {\n            if (λ > λ_) {\n              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n            } else {\n              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n            }\n          }\n        }\n      } else {\n        point(λ, φ);\n      }\n      p0 = p, λ_ = λ;\n    }\n    function lineStart() {\n      bound.point = linePoint;\n    }\n    function lineEnd() {\n      range[0] = λ0, range[1] = λ1;\n      bound.point = point;\n      p0 = null;\n    }\n    function ringPoint(λ, φ) {\n      if (p0) {\n        var dλ = λ - λ_;\n        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;\n      } else λ__ = λ, φ__ = φ;\n      d3_geo_area.point(λ, φ);\n      linePoint(λ, φ);\n    }\n    function ringStart() {\n      d3_geo_area.lineStart();\n    }\n    function ringEnd() {\n      ringPoint(λ__, φ__);\n      d3_geo_area.lineEnd();\n      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);\n      range[0] = λ0, range[1] = λ1;\n      p0 = null;\n    }\n    function angle(λ0, λ1) {\n      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;\n    }\n    function compareRanges(a, b) {\n      return a[0] - b[0];\n    }\n    function withinRange(x, range) {\n      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n    }\n    return function(feature) {\n      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n      ranges = [];\n      d3.geo.stream(feature, bound);\n      var n = ranges.length;\n      if (n) {\n        ranges.sort(compareRanges);\n        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {\n          b = ranges[i];\n          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n          } else {\n            merged.push(a = b);\n          }\n        }\n        var best = -Infinity, dλ;\n        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {\n          b = merged[i];\n          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];\n        }\n      }\n      ranges = range = null;\n      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];\n    };\n  }();\n  d3.geo.centroid = function(object) {\n    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n    d3.geo.stream(object, d3_geo_centroid);\n    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;\n    if (m < ε2) {\n      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n      m = x * x + y * y + z * z;\n      if (m < ε2) return [ NaN, NaN ];\n    }\n    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];\n  };\n  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n  var d3_geo_centroid = {\n    sphere: d3_noop,\n    point: d3_geo_centroidPoint,\n    lineStart: d3_geo_centroidLineStart,\n    lineEnd: d3_geo_centroidLineEnd,\n    polygonStart: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n    }\n  };\n  function d3_geo_centroidPoint(λ, φ) {\n    λ *= d3_radians;\n    var cosφ = Math.cos(φ *= d3_radians);\n    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n  }\n  function d3_geo_centroidPointXYZ(x, y, z) {\n    ++d3_geo_centroidW0;\n    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n  }\n  function d3_geo_centroidLineStart() {\n    var x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroid.point = nextPoint;\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_centroidLineEnd() {\n    d3_geo_centroid.point = d3_geo_centroidPoint;\n  }\n  function d3_geo_centroidRingStart() {\n    var λ00, φ00, x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ00 = λ, φ00 = φ;\n      d3_geo_centroid.point = nextPoint;\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    d3_geo_centroid.lineEnd = function() {\n      nextPoint(λ00, φ00);\n      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n      d3_geo_centroid.point = d3_geo_centroidPoint;\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);\n      d3_geo_centroidX2 += v * cx;\n      d3_geo_centroidY2 += v * cy;\n      d3_geo_centroidZ2 += v * cz;\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_compose(a, b) {\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n    return compose;\n  }\n  function d3_true() {\n    return true;\n  }\n  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n    var subject = [], clip = [];\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n];\n      if (d3_geo_sphericalEqual(p0, p1)) {\n        listener.lineStart();\n        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);\n        listener.lineEnd();\n        return;\n      }\n      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n    });\n    clip.sort(compare);\n    d3_geo_clipPolygonLinkCircular(subject);\n    d3_geo_clipPolygonLinkCircular(clip);\n    if (!subject.length) return;\n    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {\n      clip[i].e = entry = !entry;\n    }\n    var start = subject[0], points, point;\n    while (1) {\n      var current = start, isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      listener.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, listener);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, listener);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      listener.lineEnd();\n    }\n  }\n  function d3_geo_clipPolygonLinkCircular(array) {\n    if (!(n = array.length)) return;\n    var n, i = 0, a = array[0], b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other;\n    this.e = entry;\n    this.v = false;\n    this.n = this.p = null;\n  }\n  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n    return function(rotate, listener) {\n      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = d3.merge(segments);\n          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n          if (segments.length) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n          } else if (clipStartInside) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            interpolate(null, null, 1, listener);\n            listener.lineEnd();\n          }\n          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          listener.polygonStart();\n          listener.lineStart();\n          interpolate(null, null, 1, listener);\n          listener.lineEnd();\n          listener.polygonEnd();\n        }\n      };\n      function point(λ, φ) {\n        var point = rotate(λ, φ);\n        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n      }\n      function pointLine(λ, φ) {\n        var point = rotate(λ, φ);\n        line.point(point[0], point[1]);\n      }\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n      var segments;\n      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n      function pointRing(λ, φ) {\n        ring.push([ λ, φ ]);\n        var point = rotate(λ, φ);\n        ringListener.point(point[0], point[1]);\n      }\n      function ringStart() {\n        ringListener.lineStart();\n        ring = [];\n      }\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringListener.lineEnd();\n        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n        if (!n) return;\n        if (clean & 1) {\n          segment = ringSegments[0];\n          var n = segment.length - 1, i = -1, point;\n          if (n > 0) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            while (++i < n) listener.point((point = segment[i])[0], point[1]);\n            listener.lineEnd();\n          }\n          return;\n        }\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n      }\n      return clip;\n    };\n  }\n  function d3_geo_clipSegmentLength1(segment) {\n    return segment.length > 1;\n  }\n  function d3_geo_clipBufferListener() {\n    var lines = [], line;\n    return {\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      point: function(λ, φ) {\n        line.push([ λ, φ ]);\n      },\n      lineEnd: d3_noop,\n      buffer: function() {\n        var buffer = lines;\n        lines = [];\n        line = null;\n        return buffer;\n      },\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      }\n    };\n  }\n  function d3_geo_clipSort(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n  }\n  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n  function d3_geo_clipAntimeridianLine(listener) {\n    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;\n    return {\n      lineStart: function() {\n        listener.lineStart();\n        clean = 1;\n      },\n      point: function(λ1, φ1) {\n        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);\n        if (abs(dλ - π) < ε) {\n          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          listener.point(λ1, φ0);\n          clean = 0;\n        } else if (sλ0 !== sλ1 && dλ >= π) {\n          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;\n          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;\n          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          clean = 0;\n        }\n        listener.point(λ0 = λ1, φ0 = φ1);\n        sλ0 = sλ1;\n      },\n      lineEnd: function() {\n        listener.lineEnd();\n        λ0 = φ0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean;\n      }\n    };\n  }\n  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);\n    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n  }\n  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n    var φ;\n    if (from == null) {\n      φ = direction * halfπ;\n      listener.point(-π, φ);\n      listener.point(0, φ);\n      listener.point(π, φ);\n      listener.point(π, 0);\n      listener.point(π, -φ);\n      listener.point(0, -φ);\n      listener.point(-π, -φ);\n      listener.point(-π, 0);\n      listener.point(-π, φ);\n    } else if (abs(from[0] - to[0]) > ε) {\n      var s = from[0] < to[0] ? π : -π;\n      φ = direction * s / 2;\n      listener.point(-s, φ);\n      listener.point(0, φ);\n      listener.point(s, φ);\n    } else {\n      listener.point(to[0], to[1]);\n    }\n  }\n  function d3_geo_pointInPolygon(point, polygon) {\n    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n    d3_geo_areaRingSum.reset();\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      var ring = polygon[i], m = ring.length;\n      if (!m) continue;\n      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n      while (true) {\n        if (j === m) j = 0;\n        point = ring[j];\n        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;\n        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {\n          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n          d3_geo_cartesianNormalize(arc);\n          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n          d3_geo_cartesianNormalize(intersection);\n          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);\n          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ dλ >= 0 ? 1 : -1;\n          }\n        }\n        if (!j++) break;\n        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n      }\n    }\n    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;\n  }\n  function d3_geo_clipCircle(radius) {\n    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);\n    function visible(λ, φ) {\n      return Math.cos(λ) * Math.cos(φ) > cr;\n    }\n    function clipLine(listener) {\n      var point0, c0, v0, v00, clean;\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(λ, φ) {\n          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n          if (!point0 && (v00 = v0 = v)) listener.lineStart();\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n              point1[0] += ε;\n              point1[1] += ε;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              listener.lineStart();\n              point2 = intersect(point1, point0);\n              listener.point(point2[0], point2[1]);\n            } else {\n              point2 = intersect(point0, point1);\n              listener.point(point2[0], point2[1]);\n              listener.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n              } else {\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n            listener.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) listener.lineEnd();\n          point0 = null;\n        },\n        clean: function() {\n          return clean | (v00 && v0) << 1;\n        }\n      };\n    }\n    function intersect(a, b, two) {\n      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);\n      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n      if (!determinant) return !two && a;\n      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n      d3_geo_cartesianAdd(A, B);\n      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n      if (t2 < 0) return;\n      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);\n      d3_geo_cartesianAdd(q, A);\n      q = d3_geo_spherical(q);\n      if (!two) return q;\n      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;\n      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;\n      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;\n      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;\n      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n        d3_geo_cartesianAdd(q1, A);\n        return [ q, d3_geo_spherical(q1) ];\n      }\n    }\n    function code(λ, φ) {\n      var r = smallRadius ? radius : π - radius, code = 0;\n      if (λ < -r) code |= 1; else if (λ > r) code |= 2;\n      if (φ < -r) code |= 4; else if (φ > r) code |= 8;\n      return code;\n    }\n  }\n  function d3_geom_clipLine(x0, y0, x1, y1) {\n    return function(line) {\n      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n      r = x0 - ax;\n      if (!dx && r > 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dx > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = x1 - ax;\n      if (!dx && r < 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dx > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      r = y0 - ay;\n      if (!dy && r > 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dy > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = y1 - ay;\n      if (!dy && r < 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dy > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      if (t0 > 0) line.a = {\n        x: ax + t0 * dx,\n        y: ay + t0 * dy\n      };\n      if (t1 < 1) line.b = {\n        x: ax + t1 * dx,\n        y: ay + t1 * dy\n      };\n      return line;\n    };\n  }\n  var d3_geo_clipExtentMAX = 1e9;\n  d3.geo.clipExtent = function() {\n    var x0, y0, x1, y1, stream, clip, clipExtent = {\n      stream: function(output) {\n        if (stream) stream.valid = false;\n        stream = clip(output);\n        stream.valid = true;\n        return stream;\n      },\n      extent: function(_) {\n        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n        if (stream) stream.valid = false, stream = null;\n        return clipExtent;\n      }\n    };\n    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);\n  };\n  function d3_geo_clipExtent(x0, y0, x1, y1) {\n    return function(listener) {\n      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          listener = bufferListener;\n          segments = [];\n          polygon = [];\n          clean = true;\n        },\n        polygonEnd: function() {\n          listener = listener_;\n          segments = d3.merge(segments);\n          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;\n          if (inside || visible) {\n            listener.polygonStart();\n            if (inside) {\n              listener.lineStart();\n              interpolate(null, null, 1, listener);\n              listener.lineEnd();\n            }\n            if (visible) {\n              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n            }\n            listener.polygonEnd();\n          }\n          segments = polygon = ring = null;\n        }\n      };\n      function insidePolygon(p) {\n        var wn = 0, n = polygon.length, y = p[1];\n        for (var i = 0; i < n; ++i) {\n          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {\n            b = v[j];\n            if (a[1] <= y) {\n              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;\n            } else {\n              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;\n            }\n            a = b;\n          }\n        }\n        return wn !== 0;\n      }\n      function interpolate(from, to, direction, listener) {\n        var a = 0, a1 = 0;\n        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n          do {\n            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n          } while ((a = (a + direction + 4) % 4) !== a1);\n        } else {\n          listener.point(to[0], to[1]);\n        }\n      }\n      function pointVisible(x, y) {\n        return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n      }\n      function point(x, y) {\n        if (pointVisible(x, y)) listener.point(x, y);\n      }\n      var x__, y__, v__, x_, y_, v_, first, clean;\n      function lineStart() {\n        clip.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferListener.rejoin();\n          segments.push(bufferListener.buffer());\n        }\n        clip.point = point;\n        if (v_) listener.lineEnd();\n      }\n      function linePoint(x, y) {\n        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n        var v = pointVisible(x, y);\n        if (polygon) ring.push([ x, y ]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            listener.lineStart();\n            listener.point(x, y);\n          }\n        } else {\n          if (v && v_) listener.point(x, y); else {\n            var l = {\n              a: {\n                x: x_,\n                y: y_\n              },\n              b: {\n                x: x,\n                y: y\n              }\n            };\n            if (clipLine(l)) {\n              if (!v_) {\n                listener.lineStart();\n                listener.point(l.a.x, l.a.y);\n              }\n              listener.point(l.b.x, l.b.y);\n              if (!v) listener.lineEnd();\n              clean = false;\n            } else if (v) {\n              listener.lineStart();\n              listener.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n      return clip;\n    };\n    function corner(p, direction) {\n      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n    }\n    function compare(a, b) {\n      return comparePoints(a.x, b.x);\n    }\n    function comparePoints(a, b) {\n      var ca = corner(a, 1), cb = corner(b, 1);\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }\n  }\n  function d3_geo_conic(projectAt) {\n    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);\n    p.parallels = function(_) {\n      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];\n      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n    };\n    return p;\n  }\n  function d3_geo_conicEqualArea(φ0, φ1) {\n    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;\n    function forward(λ, φ) {\n      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = ρ0 - y;\n      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEqualArea = function() {\n    return d3_geo_conic(d3_geo_conicEqualArea);\n  }).raw = d3_geo_conicEqualArea;\n  d3.geo.albers = function() {\n    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);\n  };\n  d3.geo.albersUsa = function() {\n    var lower48 = d3.geo.albers();\n    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);\n    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);\n    var point, pointStream = {\n      point: function(x, y) {\n        point = [ x, y ];\n      }\n    }, lower48Point, alaskaPoint, hawaiiPoint;\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      point = null;\n      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);\n      return point;\n    }\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n    };\n    albersUsa.stream = function(stream) {\n      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n      return {\n        point: function(x, y) {\n          lower48Stream.point(x, y);\n          alaskaStream.point(x, y);\n          hawaiiStream.point(x, y);\n        },\n        sphere: function() {\n          lower48Stream.sphere();\n          alaskaStream.sphere();\n          hawaiiStream.sphere();\n        },\n        lineStart: function() {\n          lower48Stream.lineStart();\n          alaskaStream.lineStart();\n          hawaiiStream.lineStart();\n        },\n        lineEnd: function() {\n          lower48Stream.lineEnd();\n          alaskaStream.lineEnd();\n          hawaiiStream.lineEnd();\n        },\n        polygonStart: function() {\n          lower48Stream.polygonStart();\n          alaskaStream.polygonStart();\n          hawaiiStream.polygonStart();\n        },\n        polygonEnd: function() {\n          lower48Stream.polygonEnd();\n          alaskaStream.polygonEnd();\n          hawaiiStream.polygonEnd();\n        }\n      };\n    };\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_);\n      alaska.precision(_);\n      hawaii.precision(_);\n      return albersUsa;\n    };\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_);\n      alaska.scale(_ * .35);\n      hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      return albersUsa;\n    };\n    return albersUsa.scale(1070);\n  };\n  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_pathAreaPolygon = 0;\n      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n    }\n  };\n  function d3_geo_pathAreaRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathArea.point = function(x, y) {\n      d3_geo_pathArea.point = nextPoint;\n      x00 = x0 = x, y00 = y0 = y;\n    };\n    function nextPoint(x, y) {\n      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n      x0 = x, y0 = y;\n    }\n    d3_geo_pathArea.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n  var d3_geo_pathBounds = {\n    point: d3_geo_pathBoundsPoint,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_pathBoundsPoint(x, y) {\n    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n  }\n  function d3_geo_pathBuffer() {\n    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = d3_geo_pathBufferCircle(_);\n        return stream;\n      },\n      result: function() {\n        if (buffer.length) {\n          var result = buffer.join(\"\");\n          buffer = [];\n          return result;\n        }\n      }\n    };\n    function point(x, y) {\n      buffer.push(\"M\", x, \",\", y, pointCircle);\n    }\n    function pointLineStart(x, y) {\n      buffer.push(\"M\", x, \",\", y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      buffer.push(\"L\", x, \",\", y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      buffer.push(\"Z\");\n    }\n    return stream;\n  }\n  function d3_geo_pathBufferCircle(radius) {\n    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n  }\n  var d3_geo_pathCentroid = {\n    point: d3_geo_pathCentroidPoint,\n    lineStart: d3_geo_pathCentroidLineStart,\n    lineEnd: d3_geo_pathCentroidLineEnd,\n    polygonStart: function() {\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n    }\n  };\n  function d3_geo_pathCentroidPoint(x, y) {\n    d3_geo_centroidX0 += x;\n    d3_geo_centroidY0 += y;\n    ++d3_geo_centroidZ0;\n  }\n  function d3_geo_pathCentroidLineStart() {\n    var x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n  }\n  function d3_geo_pathCentroidLineEnd() {\n    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n  }\n  function d3_geo_pathCentroidRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      z = y0 * x - x0 * y;\n      d3_geo_centroidX2 += z * (x0 + x);\n      d3_geo_centroidY2 += z * (y0 + y);\n      d3_geo_centroidZ2 += z * 3;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n    d3_geo_pathCentroid.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  function d3_geo_pathContext(context) {\n    var pointRadius = 4.5;\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n      result: d3_noop\n    };\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, τ);\n    }\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      context.closePath();\n    }\n    return stream;\n  }\n  function d3_geo_resample(project) {\n    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;\n    function resample(stream) {\n      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n    }\n    function resampleNone(stream) {\n      return d3_geo_transformPoint(stream, function(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      });\n    }\n    function resampleRecursive(stream) {\n      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n      var resample = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          stream.polygonStart();\n          resample.lineStart = ringStart;\n        },\n        polygonEnd: function() {\n          stream.polygonEnd();\n          resample.lineStart = lineStart;\n        }\n      };\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n      function lineStart() {\n        x0 = NaN;\n        resample.point = linePoint;\n        stream.lineStart();\n      }\n      function linePoint(λ, φ) {\n        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n      function lineEnd() {\n        resample.point = point;\n        stream.lineEnd();\n      }\n      function ringStart() {\n        lineStart();\n        resample.point = ringPoint;\n        resample.lineEnd = ringEnd;\n      }\n      function ringPoint(λ, φ) {\n        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resample.point = linePoint;\n      }\n      function ringEnd() {\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n        resample.lineEnd = lineEnd;\n        lineEnd();\n      }\n      return resample;\n    }\n    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n      if (d2 > 4 * δ2 && depth--) {\n        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    resample.precision = function(_) {\n      if (!arguments.length) return Math.sqrt(δ2);\n      maxDepth = (δ2 = _ * _) > 0 && 16;\n      return resample;\n    };\n    return resample;\n  }\n  d3.geo.path = function() {\n    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n        d3.geo.stream(object, cacheStream);\n      }\n      return contextStream.result();\n    }\n    path.area = function(object) {\n      d3_geo_pathAreaSum = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n      return d3_geo_pathAreaSum;\n    };\n    path.centroid = function(object) {\n      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n    };\n    path.bounds = function(object) {\n      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];\n    };\n    path.projection = function(_) {\n      if (!arguments.length) return projection;\n      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n      return reset();\n    };\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return reset();\n    };\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n    function reset() {\n      cacheStream = null;\n      return path;\n    }\n    return path.projection(d3.geo.albersUsa()).context(null);\n  };\n  function d3_geo_pathProjectStream(project) {\n    var resample = d3_geo_resample(function(x, y) {\n      return project([ x * d3_degrees, y * d3_degrees ]);\n    });\n    return function(stream) {\n      return d3_geo_projectionRadians(resample(stream));\n    };\n  }\n  d3.geo.transform = function(methods) {\n    return {\n      stream: function(stream) {\n        var transform = new d3_geo_transform(stream);\n        for (var k in methods) transform[k] = methods[k];\n        return transform;\n      }\n    };\n  };\n  function d3_geo_transform(stream) {\n    this.stream = stream;\n  }\n  d3_geo_transform.prototype = {\n    point: function(x, y) {\n      this.stream.point(x, y);\n    },\n    sphere: function() {\n      this.stream.sphere();\n    },\n    lineStart: function() {\n      this.stream.lineStart();\n    },\n    lineEnd: function() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function() {\n      this.stream.polygonEnd();\n    }\n  };\n  function d3_geo_transformPoint(stream, point) {\n    return {\n      point: point,\n      sphere: function() {\n        stream.sphere();\n      },\n      lineStart: function() {\n        stream.lineStart();\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n      },\n      polygonStart: function() {\n        stream.polygonStart();\n      },\n      polygonEnd: function() {\n        stream.polygonEnd();\n      }\n    };\n  }\n  d3.geo.projection = d3_geo_projection;\n  d3.geo.projectionMutator = d3_geo_projectionMutator;\n  function d3_geo_projection(project) {\n    return d3_geo_projectionMutator(function() {\n      return project;\n    })();\n  }\n  function d3_geo_projectionMutator(projectAt) {\n    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {\n      x = project(x, y);\n      return [ x[0] * k + δx, δy - x[1] * k ];\n    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n    function projection(point) {\n      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n      return [ point[0] * k + δx, δy - point[1] * k ];\n    }\n    function invert(point) {\n      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];\n    }\n    projection.stream = function(output) {\n      if (stream) stream.valid = false;\n      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n      stream.valid = true;\n      return stream;\n    };\n    projection.clipAngle = function(_) {\n      if (!arguments.length) return clipAngle;\n      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n      return invalidate();\n    };\n    projection.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent;\n      clipExtent = _;\n      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n      return invalidate();\n    };\n    projection.scale = function(_) {\n      if (!arguments.length) return k;\n      k = +_;\n      return reset();\n    };\n    projection.translate = function(_) {\n      if (!arguments.length) return [ x, y ];\n      x = +_[0];\n      y = +_[1];\n      return reset();\n    };\n    projection.center = function(_) {\n      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];\n      λ = _[0] % 360 * d3_radians;\n      φ = _[1] % 360 * d3_radians;\n      return reset();\n    };\n    projection.rotate = function(_) {\n      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];\n      δλ = _[0] % 360 * d3_radians;\n      δφ = _[1] % 360 * d3_radians;\n      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;\n      return reset();\n    };\n    d3.rebind(projection, projectResample, \"precision\");\n    function reset() {\n      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n      var center = project(λ, φ);\n      δx = x - center[0] * k;\n      δy = y + center[1] * k;\n      return invalidate();\n    }\n    function invalidate() {\n      if (stream) stream.valid = false, stream = null;\n      return projection;\n    }\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return reset();\n    };\n  }\n  function d3_geo_projectionRadians(stream) {\n    return d3_geo_transformPoint(stream, function(x, y) {\n      stream.point(x * d3_radians, y * d3_radians);\n    });\n  }\n  function d3_geo_equirectangular(λ, φ) {\n    return [ λ, φ ];\n  }\n  (d3.geo.equirectangular = function() {\n    return d3_geo_projection(d3_geo_equirectangular);\n  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n  d3.geo.rotation = function(rotate) {\n    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    }\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    };\n    return forward;\n  };\n  function d3_geo_identityRotation(λ, φ) {\n    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n  }\n  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n  function d3_geo_rotation(δλ, δφ, δγ) {\n    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n  }\n  function d3_geo_forwardRotationλ(δλ) {\n    return function(λ, φ) {\n      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n    };\n  }\n  function d3_geo_rotationλ(δλ) {\n    var rotation = d3_geo_forwardRotationλ(δλ);\n    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n    return rotation;\n  }\n  function d3_geo_rotationφγ(δφ, δγ) {\n    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);\n    function rotation(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];\n    }\n    rotation.invert = function(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];\n    };\n    return rotation;\n  }\n  d3.geo.circle = function() {\n    var origin = [ 0, 0 ], angle, precision = 6, interpolate;\n    function circle() {\n      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n      interpolate(null, null, 1, {\n        point: function(x, y) {\n          ring.push(x = rotate(x, y));\n          x[0] *= d3_degrees, x[1] *= d3_degrees;\n        }\n      });\n      return {\n        type: \"Polygon\",\n        coordinates: [ ring ]\n      };\n    }\n    circle.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return circle;\n    };\n    circle.angle = function(x) {\n      if (!arguments.length) return angle;\n      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n      return circle;\n    };\n    circle.precision = function(_) {\n      if (!arguments.length) return precision;\n      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n      return circle;\n    };\n    return circle.angle(90);\n  };\n  function d3_geo_circleInterpolate(radius, precision) {\n    var cr = Math.cos(radius), sr = Math.sin(radius);\n    return function(from, to, direction, listener) {\n      var step = direction * precision;\n      if (from != null) {\n        from = d3_geo_circleAngle(cr, from);\n        to = d3_geo_circleAngle(cr, to);\n        if (direction > 0 ? from < to : from > to) from += direction * τ;\n      } else {\n        from = radius + direction * τ;\n        to = radius - .5 * step;\n      }\n      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {\n        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);\n      }\n    };\n  }\n  function d3_geo_circleAngle(cr, point) {\n    var a = d3_geo_cartesian(point);\n    a[0] -= cr;\n    d3_geo_cartesianNormalize(a);\n    var angle = d3_acos(-a[1]);\n    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n  }\n  d3.geo.distance = function(a, b) {\n    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n  };\n  d3.geo.graticule = function() {\n    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;\n    function graticule() {\n      return {\n        type: \"MultiLineString\",\n        coordinates: lines()\n      };\n    }\n    function lines() {\n      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n        return abs(x % DX) > ε;\n      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {\n        return abs(y % DY) > ε;\n      }).map(y));\n    }\n    graticule.lines = function() {\n      return lines().map(function(coordinates) {\n        return {\n          type: \"LineString\",\n          coordinates: coordinates\n        };\n      });\n    };\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]\n      };\n    };\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.minorExtent();\n      return graticule.majorExtent(_).minorExtent(_);\n    };\n    graticule.majorExtent = function(_) {\n      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.minorExtent = function(_) {\n      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.minorStep();\n      return graticule.majorStep(_).minorStep(_);\n    };\n    graticule.majorStep = function(_) {\n      if (!arguments.length) return [ DX, DY ];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n    graticule.minorStep = function(_) {\n      if (!arguments.length) return [ dx, dy ];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = d3_geo_graticuleX(y0, y1, 90);\n      y = d3_geo_graticuleY(x0, x1, precision);\n      X = d3_geo_graticuleX(Y0, Y1, 90);\n      Y = d3_geo_graticuleY(X0, X1, precision);\n      return graticule;\n    };\n    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n  };\n  function d3_geo_graticuleX(y0, y1, dy) {\n    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n    return function(x) {\n      return y.map(function(y) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_geo_graticuleY(x0, x1, dx) {\n    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n    return function(y) {\n      return x.map(function(x) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_source(d) {\n    return d.source;\n  }\n  function d3_target(d) {\n    return d.target;\n  }\n  d3.geo.greatArc = function() {\n    var source = d3_source, source_, target = d3_target, target_;\n    function greatArc() {\n      return {\n        type: \"LineString\",\n        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]\n      };\n    }\n    greatArc.distance = function() {\n      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n    };\n    greatArc.source = function(_) {\n      if (!arguments.length) return source;\n      source = _, source_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.target = function(_) {\n      if (!arguments.length) return target;\n      target = _, target_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.precision = function() {\n      return arguments.length ? greatArc : 0;\n    };\n    return greatArc;\n  };\n  d3.geo.interpolate = function(source, target) {\n    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n  };\n  function d3_geo_interpolate(x0, y0, x1, y1) {\n    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n    var interpolate = d ? function(t) {\n      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];\n    } : function() {\n      return [ x0 * d3_degrees, y0 * d3_degrees ];\n    };\n    interpolate.distance = d;\n    return interpolate;\n  }\n  d3.geo.length = function(object) {\n    d3_geo_lengthSum = 0;\n    d3.geo.stream(object, d3_geo_length);\n    return d3_geo_lengthSum;\n  };\n  var d3_geo_lengthSum;\n  var d3_geo_length = {\n    sphere: d3_noop,\n    point: d3_noop,\n    lineStart: d3_geo_lengthLineStart,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_lengthLineStart() {\n    var λ0, sinφ0, cosφ0;\n    d3_geo_length.point = function(λ, φ) {\n      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n      d3_geo_length.point = nextPoint;\n    };\n    d3_geo_length.lineEnd = function() {\n      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n    };\n    function nextPoint(λ, φ) {\n      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n    }\n  }\n  function d3_geo_azimuthal(scale, angle) {\n    function azimuthal(λ, φ) {\n      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);\n      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];\n    }\n    azimuthal.invert = function(x, y) {\n      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);\n      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];\n    };\n    return azimuthal;\n  }\n  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {\n    return Math.sqrt(2 / (1 + cosλcosφ));\n  }, function(ρ) {\n    return 2 * Math.asin(ρ / 2);\n  });\n  (d3.geo.azimuthalEqualArea = function() {\n    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n  }).raw = d3_geo_azimuthalEqualArea;\n  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {\n    var c = Math.acos(cosλcosφ);\n    return c && c / Math.sin(c);\n  }, d3_identity);\n  (d3.geo.azimuthalEquidistant = function() {\n    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n  }).raw = d3_geo_azimuthalEquidistant;\n  function d3_geo_conicConformal(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), t = function(φ) {\n      return Math.tan(π / 4 + φ / 2);\n    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n    if (!n) return d3_geo_mercator;\n    function forward(λ, φ) {\n      if (F > 0) {\n        if (φ < -halfπ + ε) φ = -halfπ + ε;\n      } else {\n        if (φ > halfπ - ε) φ = halfπ - ε;\n      }\n      var ρ = F / Math.pow(t(φ), n);\n      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];\n    };\n    return forward;\n  }\n  (d3.geo.conicConformal = function() {\n    return d3_geo_conic(d3_geo_conicConformal);\n  }).raw = d3_geo_conicConformal;\n  function d3_geo_conicEquidistant(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;\n    if (abs(n) < ε) return d3_geo_equirectangular;\n    function forward(λ, φ) {\n      var ρ = G - φ;\n      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = G - y;\n      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEquidistant = function() {\n    return d3_geo_conic(d3_geo_conicEquidistant);\n  }).raw = d3_geo_conicEquidistant;\n  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / cosλcosφ;\n  }, Math.atan);\n  (d3.geo.gnomonic = function() {\n    return d3_geo_projection(d3_geo_gnomonic);\n  }).raw = d3_geo_gnomonic;\n  function d3_geo_mercator(λ, φ) {\n    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];\n  }\n  d3_geo_mercator.invert = function(x, y) {\n    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];\n  };\n  function d3_geo_mercatorProjection(project) {\n    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;\n    m.scale = function() {\n      var v = scale.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.translate = function() {\n      var v = translate.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.clipExtent = function(_) {\n      var v = clipExtent.apply(m, arguments);\n      if (v === m) {\n        if (clipAuto = _ == null) {\n          var k = π * scale(), t = translate();\n          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);\n        }\n      } else if (clipAuto) {\n        v = null;\n      }\n      return v;\n    };\n    return m.clipExtent(null);\n  }\n  (d3.geo.mercator = function() {\n    return d3_geo_mercatorProjection(d3_geo_mercator);\n  }).raw = d3_geo_mercator;\n  var d3_geo_orthographic = d3_geo_azimuthal(function() {\n    return 1;\n  }, Math.asin);\n  (d3.geo.orthographic = function() {\n    return d3_geo_projection(d3_geo_orthographic);\n  }).raw = d3_geo_orthographic;\n  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / (1 + cosλcosφ);\n  }, function(ρ) {\n    return 2 * Math.atan(ρ);\n  });\n  (d3.geo.stereographic = function() {\n    return d3_geo_projection(d3_geo_stereographic);\n  }).raw = d3_geo_stereographic;\n  function d3_geo_transverseMercator(λ, φ) {\n    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];\n  }\n  d3_geo_transverseMercator.invert = function(x, y) {\n    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];\n  };\n  (d3.geo.transverseMercator = function() {\n    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n    projection.center = function(_) {\n      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);\n    };\n    projection.rotate = function(_) {\n      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), \n      [ _[0], _[1], _[2] - 90 ]);\n    };\n    return rotate([ 0, 0, 90 ]);\n  }).raw = d3_geo_transverseMercator;\n  d3.geom = {};\n  function d3_geom_pointX(d) {\n    return d[0];\n  }\n  function d3_geom_pointY(d) {\n    return d[1];\n  }\n  d3.geom.hull = function(vertices) {\n    var x = d3_geom_pointX, y = d3_geom_pointY;\n    if (arguments.length) return hull(vertices);\n    function hull(data) {\n      if (data.length < 3) return [];\n      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];\n      for (i = 0; i < n; i++) {\n        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);\n      }\n      points.sort(d3_geom_hullOrder);\n      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);\n      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);\n      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);\n      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);\n      return polygon;\n    }\n    hull.x = function(_) {\n      return arguments.length ? (x = _, hull) : x;\n    };\n    hull.y = function(_) {\n      return arguments.length ? (y = _, hull) : y;\n    };\n    return hull;\n  };\n  function d3_geom_hullUpper(points) {\n    var n = points.length, hull = [ 0, 1 ], hs = 2;\n    for (var i = 2; i < n; i++) {\n      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;\n      hull[hs++] = i;\n    }\n    return hull.slice(0, hs);\n  }\n  function d3_geom_hullOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n  d3.geom.polygon = function(coordinates) {\n    d3_subclass(coordinates, d3_geom_polygonPrototype);\n    return coordinates;\n  };\n  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n  d3_geom_polygonPrototype.area = function() {\n    var i = -1, n = this.length, a, b = this[n - 1], area = 0;\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n    return area * .5;\n  };\n  d3_geom_polygonPrototype.centroid = function(k) {\n    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;\n    if (!arguments.length) k = -1 / (6 * this.area());\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n    return [ x * k, y * k ];\n  };\n  d3_geom_polygonPrototype.clip = function(subject) {\n    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n    while (++i < n) {\n      input = subject.slice();\n      subject.length = 0;\n      b = this[i];\n      c = input[(m = input.length - closed) - 1];\n      j = -1;\n      while (++j < m) {\n        d = input[j];\n        if (d3_geom_polygonInside(d, a, b)) {\n          if (!d3_geom_polygonInside(c, a, b)) {\n            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n          }\n          subject.push(d);\n        } else if (d3_geom_polygonInside(c, a, b)) {\n          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n        }\n        c = d;\n      }\n      if (closed) subject.push(subject[0]);\n      a = b;\n    }\n    return subject;\n  };\n  function d3_geom_polygonInside(p, a, b) {\n    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);\n  }\n  function d3_geom_polygonIntersect(c, d, a, b) {\n    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n    return [ x1 + ua * x21, y1 + ua * y21 ];\n  }\n  function d3_geom_polygonClosed(coordinates) {\n    var a = coordinates[0], b = coordinates[coordinates.length - 1];\n    return !(a[0] - b[0] || a[1] - b[1]);\n  }\n  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n  function d3_geom_voronoiBeach() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.edge = this.site = this.circle = null;\n  }\n  function d3_geom_voronoiCreateBeach(site) {\n    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n    beach.site = site;\n    return beach;\n  }\n  function d3_geom_voronoiDetachBeach(beach) {\n    d3_geom_voronoiDetachCircle(beach);\n    d3_geom_voronoiBeaches.remove(beach);\n    d3_geom_voronoiBeachPool.push(beach);\n    d3_geom_voronoiRedBlackNode(beach);\n  }\n  function d3_geom_voronoiRemoveBeach(beach) {\n    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {\n      x: x,\n      y: y\n    }, previous = beach.P, next = beach.N, disappearing = [ beach ];\n    d3_geom_voronoiDetachBeach(beach);\n    var lArc = previous;\n    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      d3_geom_voronoiDetachBeach(lArc);\n      lArc = previous;\n    }\n    disappearing.unshift(lArc);\n    d3_geom_voronoiDetachCircle(lArc);\n    var rArc = next;\n    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      d3_geom_voronoiDetachBeach(rArc);\n      rArc = next;\n    }\n    disappearing.push(rArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var nArcs = disappearing.length, iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiAddBeach(site) {\n    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;\n    while (node) {\n      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n      if (dxl > ε) node = node.L; else {\n        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n        if (dxr > ε) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -ε) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -ε) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n    var newArc = d3_geom_voronoiCreateBeach(site);\n    d3_geom_voronoiBeaches.insert(lArc, newArc);\n    if (!lArc && !rArc) return;\n    if (lArc === rArc) {\n      d3_geom_voronoiDetachCircle(lArc);\n      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n      d3_geom_voronoiBeaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      d3_geom_voronoiAttachCircle(lArc);\n      d3_geom_voronoiAttachCircle(rArc);\n      return;\n    }\n    if (!rArc) {\n      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      return;\n    }\n    d3_geom_voronoiDetachCircle(lArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n      x: (cy * hb - by * hc) / d + ax,\n      y: (bx * hc - cx * hb) / d + ay\n    };\n    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;\n    if (!pby2) return rfocx;\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n    site = lArc.site;\n    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;\n    if (!plby2) return lfocx;\n    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n    return (rfocx + lfocx) / 2;\n  }\n  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site.y === directrix ? site.x : Infinity;\n  }\n  function d3_geom_voronoiCell(site) {\n    this.site = site;\n    this.edges = [];\n  }\n  d3_geom_voronoiCell.prototype.prepare = function() {\n    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;\n    while (iHalfEdge--) {\n      edge = halfEdges[iHalfEdge].edge;\n      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n    }\n    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n    return halfEdges.length;\n  };\n  function d3_geom_voronoiCloseCells(extent) {\n    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n    while (iCell--) {\n      cell = cells[iCell];\n      if (!cell || !cell.prepare()) continue;\n      halfEdges = cell.edges;\n      nHalfEdges = halfEdges.length;\n      iHalfEdge = 0;\n      while (iHalfEdge < nHalfEdges) {\n        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {\n          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n            x: x0,\n            y: abs(x2 - x0) < ε ? y2 : y1\n          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {\n            x: abs(y2 - y1) < ε ? x2 : x1,\n            y: y1\n          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {\n            x: x1,\n            y: abs(x2 - x1) < ε ? y2 : y0\n          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {\n            x: abs(y2 - y0) < ε ? x2 : x0,\n            y: y0\n          } : null), cell.site, null));\n          ++nHalfEdges;\n        }\n      }\n    }\n  }\n  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n    return b.angle - a.angle;\n  }\n  function d3_geom_voronoiCircle() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.x = this.y = this.arc = this.site = this.cy = null;\n  }\n  function d3_geom_voronoiAttachCircle(arc) {\n    var lArc = arc.P, rArc = arc.N;\n    if (!lArc || !rArc) return;\n    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\n    if (lSite === rSite) return;\n    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -ε2) return;\n    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = cy + Math.sqrt(x * x + y * y);\n    circle.cy = cy;\n    arc.circle = circle;\n    var before = null, node = d3_geom_voronoiCircles._;\n    while (node) {\n      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n        if (node.L) node = node.L; else {\n          before = node.P;\n          break;\n        }\n      } else {\n        if (node.R) node = node.R; else {\n          before = node;\n          break;\n        }\n      }\n    }\n    d3_geom_voronoiCircles.insert(before, circle);\n    if (!before) d3_geom_voronoiFirstCircle = circle;\n  }\n  function d3_geom_voronoiDetachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n      d3_geom_voronoiCircles.remove(circle);\n      d3_geom_voronoiCirclePool.push(circle);\n      d3_geom_voronoiRedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n  function d3_geom_voronoiClipEdges(extent) {\n    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n    while (i--) {\n      e = edges[i];\n      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {\n        e.a = e.b = null;\n        edges.splice(i, 1);\n      }\n    }\n  }\n  function d3_geom_voronoiConnectEdge(edge, extent) {\n    var vb = edge.b;\n    if (vb) return true;\n    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!va) va = {\n          x: fx,\n          y: y0\n        }; else if (va.y >= y1) return;\n        vb = {\n          x: fx,\n          y: y1\n        };\n      } else {\n        if (!va) va = {\n          x: fx,\n          y: y1\n        }; else if (va.y < y0) return;\n        vb = {\n          x: fx,\n          y: y0\n        };\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!va) va = {\n            x: (y0 - fb) / fm,\n            y: y0\n          }; else if (va.y >= y1) return;\n          vb = {\n            x: (y1 - fb) / fm,\n            y: y1\n          };\n        } else {\n          if (!va) va = {\n            x: (y1 - fb) / fm,\n            y: y1\n          }; else if (va.y < y0) return;\n          vb = {\n            x: (y0 - fb) / fm,\n            y: y0\n          };\n        }\n      } else {\n        if (ly < ry) {\n          if (!va) va = {\n            x: x0,\n            y: fm * x0 + fb\n          }; else if (va.x >= x1) return;\n          vb = {\n            x: x1,\n            y: fm * x1 + fb\n          };\n        } else {\n          if (!va) va = {\n            x: x1,\n            y: fm * x1 + fb\n          }; else if (va.x < x0) return;\n          vb = {\n            x: x0,\n            y: fm * x0 + fb\n          };\n        }\n      }\n    }\n    edge.a = va;\n    edge.b = vb;\n    return true;\n  }\n  function d3_geom_voronoiEdge(lSite, rSite) {\n    this.l = lSite;\n    this.r = rSite;\n    this.a = this.b = null;\n  }\n  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n    d3_geom_voronoiEdges.push(edge);\n    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n    return edge;\n  }\n  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, null);\n    edge.a = va;\n    edge.b = vb;\n    d3_geom_voronoiEdges.push(edge);\n    return edge;\n  }\n  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n    if (!edge.a && !edge.b) {\n      edge.a = vertex;\n      edge.l = lSite;\n      edge.r = rSite;\n    } else if (edge.l === rSite) {\n      edge.b = vertex;\n    } else {\n      edge.a = vertex;\n    }\n  }\n  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n    var va = edge.a, vb = edge.b;\n    this.edge = edge;\n    this.site = lSite;\n    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n  }\n  d3_geom_voronoiHalfEdge.prototype = {\n    start: function() {\n      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n    },\n    end: function() {\n      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n    }\n  };\n  function d3_geom_voronoiRedBlackTree() {\n    this._ = null;\n  }\n  function d3_geom_voronoiRedBlackNode(node) {\n    node.U = node.C = node.L = node.R = node.P = node.N = null;\n  }\n  d3_geom_voronoiRedBlackTree.prototype = {\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = d3_geom_voronoiRedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              d3_geom_voronoiRedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n      var parent = node.U, sibling, left = node.L, right = node.R, next, red;\n      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);\n      if (parent) {\n        if (parent.L === node) parent.L = next; else parent.R = next;\n      } else {\n        this._ = next;\n      }\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) {\n        node.C = false;\n        return;\n      }\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n      if (node) node.C = false;\n    }\n  };\n  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n    var p = node, q = node.R, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n    var p = node, q = node.L, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n  function d3_geom_voronoiRedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n  function d3_geom_voronoi(sites, bbox) {\n    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;\n    d3_geom_voronoiEdges = [];\n    d3_geom_voronoiCells = new Array(sites.length);\n    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n    while (true) {\n      circle = d3_geom_voronoiFirstCircle;\n      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {\n        if (site.x !== x0 || site.y !== y0) {\n          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n          d3_geom_voronoiAddBeach(site);\n          x0 = site.x, y0 = site.y;\n        }\n        site = sites.pop();\n      } else if (circle) {\n        d3_geom_voronoiRemoveBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n    var diagram = {\n      cells: d3_geom_voronoiCells,\n      edges: d3_geom_voronoiEdges\n    };\n    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n    return diagram;\n  }\n  function d3_geom_voronoiVertexOrder(a, b) {\n    return b.y - a.y || b.x - a.x;\n  }\n  d3.geom.voronoi = function(points) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;\n    if (points) return voronoi(points);\n    function voronoi(data) {\n      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {\n        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {\n          var s = e.start();\n          return [ s.x, s.y ];\n        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n        polygon.point = data[i];\n      });\n      return polygons;\n    }\n    function sites(data) {\n      return data.map(function(d, i) {\n        return {\n          x: Math.round(fx(d, i) / ε) * ε,\n          y: Math.round(fy(d, i) / ε) * ε,\n          i: i\n        };\n      });\n    }\n    voronoi.links = function(data) {\n      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {\n        return edge.l && edge.r;\n      }).map(function(edge) {\n        return {\n          source: data[edge.l.i],\n          target: data[edge.r.i]\n        };\n      });\n    };\n    voronoi.triangles = function(data) {\n      var triangles = [];\n      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {\n        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n        while (++j < m) {\n          e0 = e1;\n          s0 = s1;\n          e1 = edges[j].edge;\n          s1 = e1.l === site ? e1.r : e1.l;\n          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {\n            triangles.push([ data[i], data[s0.i], data[s1.i] ]);\n          }\n        }\n      });\n      return triangles;\n    };\n    voronoi.x = function(_) {\n      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n    };\n    voronoi.y = function(_) {\n      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n    };\n    voronoi.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n      return voronoi;\n    };\n    voronoi.size = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];\n      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);\n    };\n    return voronoi;\n  };\n  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];\n  function d3_geom_voronoiTriangleArea(a, b, c) {\n    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n  }\n  d3.geom.delaunay = function(vertices) {\n    return d3.geom.voronoi().triangles(vertices);\n  };\n  d3.geom.quadtree = function(points, x1, y1, x2, y2) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, compat;\n    if (compat = arguments.length) {\n      x = d3_geom_quadtreeCompatX;\n      y = d3_geom_quadtreeCompatY;\n      if (compat === 3) {\n        y2 = y1;\n        x2 = x1;\n        y1 = x1 = 0;\n      }\n      return quadtree(points);\n    }\n    function quadtree(data) {\n      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;\n      if (x1 != null) {\n        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n      } else {\n        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n        xs = [], ys = [];\n        n = data.length;\n        if (compat) for (i = 0; i < n; ++i) {\n          d = data[i];\n          if (d.x < x1_) x1_ = d.x;\n          if (d.y < y1_) y1_ = d.y;\n          if (d.x > x2_) x2_ = d.x;\n          if (d.y > y2_) y2_ = d.y;\n          xs.push(d.x);\n          ys.push(d.y);\n        } else for (i = 0; i < n; ++i) {\n          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);\n          if (x_ < x1_) x1_ = x_;\n          if (y_ < y1_) y1_ = y_;\n          if (x_ > x2_) x2_ = x_;\n          if (y_ > y2_) y2_ = y_;\n          xs.push(x_);\n          ys.push(y_);\n        }\n      }\n      var dx = x2_ - x1_, dy = y2_ - y1_;\n      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;\n      function insert(n, d, x, y, x1, y1, x2, y2) {\n        if (isNaN(x) || isNaN(y)) return;\n        if (n.leaf) {\n          var nx = n.x, ny = n.y;\n          if (nx != null) {\n            if (abs(nx - x) + abs(ny - y) < .01) {\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            } else {\n              var nPoint = n.point;\n              n.x = n.y = n.point = null;\n              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            }\n          } else {\n            n.x = x, n.y = y, n.point = d;\n          }\n        } else {\n          insertChild(n, d, x, y, x1, y1, x2, y2);\n        }\n      }\n      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;\n        n.leaf = false;\n        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n        if (right) x1 = xm; else x2 = xm;\n        if (below) y1 = ym; else y2 = ym;\n        insert(n, d, x, y, x1, y1, x2, y2);\n      }\n      var root = d3_geom_quadtreeNode();\n      root.add = function(d) {\n        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n      };\n      root.visit = function(f) {\n        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n      };\n      root.find = function(point) {\n        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n      };\n      i = -1;\n      if (x1 == null) {\n        while (++i < n) {\n          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n        }\n        --i;\n      } else data.forEach(root.add);\n      xs = ys = data = d = null;\n      return root;\n    }\n    quadtree.x = function(_) {\n      return arguments.length ? (x = _, quadtree) : x;\n    };\n    quadtree.y = function(_) {\n      return arguments.length ? (y = _, quadtree) : y;\n    };\n    quadtree.extent = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], \n      y2 = +_[1][1];\n      return quadtree;\n    };\n    quadtree.size = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n      return quadtree;\n    };\n    return quadtree;\n  };\n  function d3_geom_quadtreeCompatX(d) {\n    return d.x;\n  }\n  function d3_geom_quadtreeCompatY(d) {\n    return d.y;\n  }\n  function d3_geom_quadtreeNode() {\n    return {\n      leaf: true,\n      nodes: [],\n      point: null,\n      x: null,\n      y: null\n    };\n  }\n  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n    if (!f(node, x1, y1, x2, y2)) {\n      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;\n      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n    }\n  }\n  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n    var minDistance2 = Infinity, closestPoint;\n    (function find(node, x1, y1, x2, y2) {\n      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\n      if (point = node.point) {\n        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;\n        if (distance2 < minDistance2) {\n          var distance = Math.sqrt(minDistance2 = distance2);\n          x0 = x - distance, y0 = y - distance;\n          x3 = x + distance, y3 = y + distance;\n          closestPoint = point;\n        }\n      }\n      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;\n      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {\n        if (node = children[i & 3]) switch (i & 3) {\n         case 0:\n          find(node, x1, y1, xm, ym);\n          break;\n\n         case 1:\n          find(node, xm, y1, x2, ym);\n          break;\n\n         case 2:\n          find(node, x1, ym, xm, y2);\n          break;\n\n         case 3:\n          find(node, xm, ym, x2, y2);\n          break;\n        }\n      }\n    })(root, x0, y0, x3, y3);\n    return closestPoint;\n  }\n  d3.interpolateRgb = d3_interpolateRgb;\n  function d3_interpolateRgb(a, b) {\n    a = d3.rgb(a);\n    b = d3.rgb(b);\n    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;\n    return function(t) {\n      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n    };\n  }\n  d3.interpolateObject = d3_interpolateObject;\n  function d3_interpolateObject(a, b) {\n    var i = {}, c = {}, k;\n    for (k in a) {\n      if (k in b) {\n        i[k] = d3_interpolate(a[k], b[k]);\n      } else {\n        c[k] = a[k];\n      }\n    }\n    for (k in b) {\n      if (!(k in a)) {\n        c[k] = b[k];\n      }\n    }\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n  d3.interpolateNumber = d3_interpolateNumber;\n  function d3_interpolateNumber(a, b) {\n    a = +a, b = +b;\n    return function(t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n  d3.interpolateString = d3_interpolateString;\n  function d3_interpolateString(a, b) {\n    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n    a = a + \"\", b = b + \"\";\n    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) {\n        if (s[i]) s[i] += bm; else s[++i] = bm;\n      } else {\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: d3_interpolateNumber(am, bm)\n        });\n      }\n      bi = d3_interpolate_numberB.lastIndex;\n    }\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; else s[++i] = bs;\n    }\n    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {\n      return b(t) + \"\";\n    }) : function() {\n      return b;\n    } : (b = q.length, function(t) {\n      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    });\n  }\n  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \"g\");\n  d3.interpolate = d3_interpolate;\n  function d3_interpolate(a, b) {\n    var i = d3.interpolators.length, f;\n    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;\n    return f;\n  }\n  d3.interpolators = [ function(a, b) {\n    var t = typeof b;\n    return (t === \"string\" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\\(|hsl\\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \"object\" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n  } ];\n  d3.interpolateArray = d3_interpolateArray;\n  function d3_interpolateArray(a, b) {\n    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;\n    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));\n    for (;i < na; ++i) c[i] = a[i];\n    for (;i < nb; ++i) c[i] = b[i];\n    return function(t) {\n      for (i = 0; i < n0; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n  var d3_ease_default = function() {\n    return d3_identity;\n  };\n  var d3_ease = d3.map({\n    linear: d3_ease_default,\n    poly: d3_ease_poly,\n    quad: function() {\n      return d3_ease_quad;\n    },\n    cubic: function() {\n      return d3_ease_cubic;\n    },\n    sin: function() {\n      return d3_ease_sin;\n    },\n    exp: function() {\n      return d3_ease_exp;\n    },\n    circle: function() {\n      return d3_ease_circle;\n    },\n    elastic: d3_ease_elastic,\n    back: d3_ease_back,\n    bounce: function() {\n      return d3_ease_bounce;\n    }\n  });\n  var d3_ease_mode = d3.map({\n    \"in\": d3_identity,\n    out: d3_ease_reverse,\n    \"in-out\": d3_ease_reflect,\n    \"out-in\": function(f) {\n      return d3_ease_reflect(d3_ease_reverse(f));\n    }\n  });\n  d3.ease = function(name) {\n    var i = name.indexOf(\"-\"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : \"in\";\n    t = d3_ease.get(t) || d3_ease_default;\n    m = d3_ease_mode.get(m) || d3_identity;\n    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n  };\n  function d3_ease_clamp(f) {\n    return function(t) {\n      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);\n    };\n  }\n  function d3_ease_reverse(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n  function d3_ease_reflect(f) {\n    return function(t) {\n      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n    };\n  }\n  function d3_ease_quad(t) {\n    return t * t;\n  }\n  function d3_ease_cubic(t) {\n    return t * t * t;\n  }\n  function d3_ease_cubicInOut(t) {\n    if (t <= 0) return 0;\n    if (t >= 1) return 1;\n    var t2 = t * t, t3 = t2 * t;\n    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n  }\n  function d3_ease_poly(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n  function d3_ease_sin(t) {\n    return 1 - Math.cos(t * halfπ);\n  }\n  function d3_ease_exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  function d3_ease_circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  function d3_ease_elastic(a, p) {\n    var s;\n    if (arguments.length < 2) p = .45;\n    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n    };\n  }\n  function d3_ease_back(s) {\n    if (!s) s = 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n  function d3_ease_bounce(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }\n  d3.interpolateHcl = d3_interpolateHcl;\n  function d3_interpolateHcl(a, b) {\n    a = d3.hcl(a);\n    b = d3.hcl(b);\n    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;\n    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateHsl = d3_interpolateHsl;\n  function d3_interpolateHsl(a, b) {\n    a = d3.hsl(a);\n    b = d3.hsl(b);\n    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;\n    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateLab = d3_interpolateLab;\n  function d3_interpolateLab(a, b) {\n    a = d3.lab(a);\n    b = d3.lab(b);\n    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;\n    return function(t) {\n      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";\n    };\n  }\n  d3.interpolateRound = d3_interpolateRound;\n  function d3_interpolateRound(a, b) {\n    b -= a;\n    return function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n  d3.transform = function(string) {\n    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");\n    return (d3.transform = function(string) {\n      if (string != null) {\n        g.setAttribute(\"transform\", string);\n        var t = g.transform.baseVal.consolidate();\n      }\n      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n    })(string);\n  };\n  function d3_transform(m) {\n    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n    if (r0[0] * r1[1] < r1[0] * r0[1]) {\n      r0[0] *= -1;\n      r0[1] *= -1;\n      kx *= -1;\n      kz *= -1;\n    }\n    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n    this.translate = [ m.e, m.f ];\n    this.scale = [ kx, ky ];\n    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n  }\n  d3_transform.prototype.toString = function() {\n    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n  };\n  function d3_transformDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n  function d3_transformNormalize(a) {\n    var k = Math.sqrt(d3_transformDot(a, a));\n    if (k) {\n      a[0] /= k;\n      a[1] /= k;\n    }\n    return k;\n  }\n  function d3_transformCombine(a, b, k) {\n    a[0] += k * b[0];\n    a[1] += k * b[1];\n    return a;\n  }\n  var d3_transformIdentity = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0\n  };\n  d3.interpolateTransform = d3_interpolateTransform;\n  function d3_interpolateTransformPop(s) {\n    return s.length ? s.pop() + \",\" : \"\";\n  }\n  function d3_interpolateTranslate(ta, tb, s, q) {\n    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {\n      var i = s.push(\"translate(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ta[0], tb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ta[1], tb[1])\n      });\n    } else if (tb[0] || tb[1]) {\n      s.push(\"translate(\" + tb + \")\");\n    }\n  }\n  function d3_interpolateRotate(ra, rb, s, q) {\n    if (ra !== rb) {\n      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"rotate(\", null, \")\") - 2,\n        x: d3_interpolateNumber(ra, rb)\n      });\n    } else if (rb) {\n      s.push(d3_interpolateTransformPop(s) + \"rotate(\" + rb + \")\");\n    }\n  }\n  function d3_interpolateSkew(wa, wb, s, q) {\n    if (wa !== wb) {\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"skewX(\", null, \")\") - 2,\n        x: d3_interpolateNumber(wa, wb)\n      });\n    } else if (wb) {\n      s.push(d3_interpolateTransformPop(s) + \"skewX(\" + wb + \")\");\n    }\n  }\n  function d3_interpolateScale(ka, kb, s, q) {\n    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {\n      var i = s.push(d3_interpolateTransformPop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ka[0], kb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ka[1], kb[1])\n      });\n    } else if (kb[0] !== 1 || kb[1] !== 1) {\n      s.push(d3_interpolateTransformPop(s) + \"scale(\" + kb + \")\");\n    }\n  }\n  function d3_interpolateTransform(a, b) {\n    var s = [], q = [];\n    a = d3.transform(a), b = d3.transform(b);\n    d3_interpolateTranslate(a.translate, b.translate, s, q);\n    d3_interpolateRotate(a.rotate, b.rotate, s, q);\n    d3_interpolateSkew(a.skew, b.skew, s, q);\n    d3_interpolateScale(a.scale, b.scale, s, q);\n    a = b = null;\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  }\n  function d3_uninterpolateNumber(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return (x - a) / b;\n    };\n  }\n  function d3_uninterpolateClamp(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return Math.max(0, Math.min(1, (x - a) / b));\n    };\n  }\n  d3.layout = {};\n  d3.layout.bundle = function() {\n    return function(links) {\n      var paths = [], i = -1, n = links.length;\n      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));\n      return paths;\n    };\n  };\n  function d3_layout_bundlePath(link) {\n    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n    while (start !== lca) {\n      start = start.parent;\n      points.push(start);\n    }\n    var k = points.length;\n    while (end !== lca) {\n      points.splice(k, 0, end);\n      end = end.parent;\n    }\n    return points;\n  }\n  function d3_layout_bundleAncestors(node) {\n    var ancestors = [], parent = node.parent;\n    while (parent != null) {\n      ancestors.push(node);\n      node = parent;\n      parent = parent.parent;\n    }\n    ancestors.push(node);\n    return ancestors;\n  }\n  function d3_layout_bundleLeastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n    while (aNode === bNode) {\n      sharedNode = aNode;\n      aNode = aNodes.pop();\n      bNode = bNodes.pop();\n    }\n    return sharedNode;\n  }\n  d3.layout.chord = function() {\n    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n    function relayout() {\n      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n      chords = [];\n      groups = [];\n      k = 0, i = -1;\n      while (++i < n) {\n        x = 0, j = -1;\n        while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(d3.range(n));\n        k += x;\n      }\n      if (sortGroups) {\n        groupIndex.sort(function(a, b) {\n          return sortGroups(groupSums[a], groupSums[b]);\n        });\n      }\n      if (sortSubgroups) {\n        subgroupIndex.forEach(function(d, i) {\n          d.sort(function(a, b) {\n            return sortSubgroups(matrix[i][a], matrix[i][b]);\n          });\n        });\n      }\n      k = (τ - padding * n) / k;\n      x = 0, i = -1;\n      while (++i < n) {\n        x0 = x, j = -1;\n        while (++j < n) {\n          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;\n          subgroups[di + \"-\" + dj] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: groupSums[di]\n        };\n        x += padding;\n      }\n      i = -1;\n      while (++i < n) {\n        j = i - 1;\n        while (++j < n) {\n          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value ? {\n              source: target,\n              target: source\n            } : {\n              source: source,\n              target: target\n            });\n          }\n        }\n      }\n      if (sortChords) resort();\n    }\n    function resort() {\n      chords.sort(function(a, b) {\n        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n      });\n    }\n    chord.matrix = function(x) {\n      if (!arguments.length) return matrix;\n      n = (matrix = x) && matrix.length;\n      chords = groups = null;\n      return chord;\n    };\n    chord.padding = function(x) {\n      if (!arguments.length) return padding;\n      padding = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortGroups = function(x) {\n      if (!arguments.length) return sortGroups;\n      sortGroups = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortSubgroups = function(x) {\n      if (!arguments.length) return sortSubgroups;\n      sortSubgroups = x;\n      chords = null;\n      return chord;\n    };\n    chord.sortChords = function(x) {\n      if (!arguments.length) return sortChords;\n      sortChords = x;\n      if (chords) resort();\n      return chord;\n    };\n    chord.chords = function() {\n      if (!chords) relayout();\n      return chords;\n    };\n    chord.groups = function() {\n      if (!groups) relayout();\n      return groups;\n    };\n    return chord;\n  };\n  d3.layout.force = function() {\n    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n    function repulse(node) {\n      return function(quad, x1, _, x2) {\n        if (quad.point !== node) {\n          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;\n          if (dw * dw / theta2 < dn) {\n            if (dn < chargeDistance2) {\n              var k = quad.charge / dn;\n              node.px -= dx * k;\n              node.py -= dy * k;\n            }\n            return true;\n          }\n          if (quad.point && dn && dn < chargeDistance2) {\n            var k = quad.pointCharge / dn;\n            node.px -= dx * k;\n            node.py -= dy * k;\n          }\n        }\n        return !quad.charge;\n      };\n    }\n    force.tick = function() {\n      if ((alpha *= .99) < .005) {\n        timer = null;\n        event.end({\n          type: \"end\",\n          alpha: alpha = 0\n        });\n        return true;\n      }\n      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        s = o.source;\n        t = o.target;\n        x = t.x - s.x;\n        y = t.y - s.y;\n        if (l = x * x + y * y) {\n          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n          x *= l;\n          y *= l;\n          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);\n          t.y -= y * k;\n          s.x += x * (k = 1 - k);\n          s.y += y * k;\n        }\n      }\n      if (k = alpha * gravity) {\n        x = size[0] / 2;\n        y = size[1] / 2;\n        i = -1;\n        if (k) while (++i < n) {\n          o = nodes[i];\n          o.x += (x - o.x) * k;\n          o.y += (y - o.y) * k;\n        }\n      }\n      if (charge) {\n        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n        i = -1;\n        while (++i < n) {\n          if (!(o = nodes[i]).fixed) {\n            q.visit(repulse(o));\n          }\n        }\n      }\n      i = -1;\n      while (++i < n) {\n        o = nodes[i];\n        if (o.fixed) {\n          o.x = o.px;\n          o.y = o.py;\n        } else {\n          o.x -= (o.px - (o.px = o.x)) * friction;\n          o.y -= (o.py - (o.py = o.y)) * friction;\n        }\n      }\n      event.tick({\n        type: \"tick\",\n        alpha: alpha\n      });\n    };\n    force.nodes = function(x) {\n      if (!arguments.length) return nodes;\n      nodes = x;\n      return force;\n    };\n    force.links = function(x) {\n      if (!arguments.length) return links;\n      links = x;\n      return force;\n    };\n    force.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return force;\n    };\n    force.linkDistance = function(x) {\n      if (!arguments.length) return linkDistance;\n      linkDistance = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.distance = force.linkDistance;\n    force.linkStrength = function(x) {\n      if (!arguments.length) return linkStrength;\n      linkStrength = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.friction = function(x) {\n      if (!arguments.length) return friction;\n      friction = +x;\n      return force;\n    };\n    force.charge = function(x) {\n      if (!arguments.length) return charge;\n      charge = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.chargeDistance = function(x) {\n      if (!arguments.length) return Math.sqrt(chargeDistance2);\n      chargeDistance2 = x * x;\n      return force;\n    };\n    force.gravity = function(x) {\n      if (!arguments.length) return gravity;\n      gravity = +x;\n      return force;\n    };\n    force.theta = function(x) {\n      if (!arguments.length) return Math.sqrt(theta2);\n      theta2 = x * x;\n      return force;\n    };\n    force.alpha = function(x) {\n      if (!arguments.length) return alpha;\n      x = +x;\n      if (alpha) {\n        if (x > 0) {\n          alpha = x;\n        } else {\n          timer.c = null, timer.t = NaN, timer = null;\n          event.end({\n            type: \"end\",\n            alpha: alpha = 0\n          });\n        }\n      } else if (x > 0) {\n        event.start({\n          type: \"start\",\n          alpha: alpha = x\n        });\n        timer = d3_timer(force.tick);\n      }\n      return force;\n    };\n    force.start = function() {\n      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;\n      for (i = 0; i < n; ++i) {\n        (o = nodes[i]).index = i;\n        o.weight = 0;\n      }\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        if (typeof o.source == \"number\") o.source = nodes[o.source];\n        if (typeof o.target == \"number\") o.target = nodes[o.target];\n        ++o.source.weight;\n        ++o.target.weight;\n      }\n      for (i = 0; i < n; ++i) {\n        o = nodes[i];\n        if (isNaN(o.x)) o.x = position(\"x\", w);\n        if (isNaN(o.y)) o.y = position(\"y\", h);\n        if (isNaN(o.px)) o.px = o.x;\n        if (isNaN(o.py)) o.py = o.y;\n      }\n      distances = [];\n      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n      strengths = [];\n      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n      charges = [];\n      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n      function position(dimension, size) {\n        if (!neighbors) {\n          neighbors = new Array(n);\n          for (j = 0; j < n; ++j) {\n            neighbors[j] = [];\n          }\n          for (j = 0; j < m; ++j) {\n            var o = links[j];\n            neighbors[o.source.index].push(o.target);\n            neighbors[o.target.index].push(o.source);\n          }\n        }\n        var candidates = neighbors[i], j = -1, l = candidates.length, x;\n        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;\n        return Math.random() * size;\n      }\n      return force.resume();\n    };\n    force.resume = function() {\n      return force.alpha(.1);\n    };\n    force.stop = function() {\n      return force.alpha(0);\n    };\n    force.drag = function() {\n      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n      if (!arguments.length) return drag;\n      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);\n    };\n    function dragmove(d) {\n      d.px = d3.event.x, d.py = d3.event.y;\n      force.resume();\n    }\n    return d3.rebind(force, event, \"on\");\n  };\n  function d3_layout_forceDragstart(d) {\n    d.fixed |= 2;\n  }\n  function d3_layout_forceDragend(d) {\n    d.fixed &= ~6;\n  }\n  function d3_layout_forceMouseover(d) {\n    d.fixed |= 4;\n    d.px = d.x, d.py = d.y;\n  }\n  function d3_layout_forceMouseout(d) {\n    d.fixed &= ~4;\n  }\n  function d3_layout_forceAccumulate(quad, alpha, charges) {\n    var cx = 0, cy = 0;\n    quad.charge = 0;\n    if (!quad.leaf) {\n      var nodes = quad.nodes, n = nodes.length, i = -1, c;\n      while (++i < n) {\n        c = nodes[i];\n        if (c == null) continue;\n        d3_layout_forceAccumulate(c, alpha, charges);\n        quad.charge += c.charge;\n        cx += c.charge * c.cx;\n        cy += c.charge * c.cy;\n      }\n    }\n    if (quad.point) {\n      if (!quad.leaf) {\n        quad.point.x += Math.random() - .5;\n        quad.point.y += Math.random() - .5;\n      }\n      var k = alpha * charges[quad.point.index];\n      quad.charge += quad.pointCharge = k;\n      cx += k * quad.point.x;\n      cy += k * quad.point.y;\n    }\n    quad.cx = cx / quad.charge;\n    quad.cy = cy / quad.charge;\n  }\n  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;\n  d3.layout.hierarchy = function() {\n    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;\n    function hierarchy(root) {\n      var stack = [ root ], nodes = [], node;\n      root.depth = 0;\n      while ((node = stack.pop()) != null) {\n        nodes.push(node);\n        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {\n          var n, childs, child;\n          while (--n >= 0) {\n            stack.push(child = childs[n]);\n            child.parent = node;\n            child.depth = node.depth + 1;\n          }\n          if (value) node.value = 0;\n          node.children = childs;\n        } else {\n          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          delete node.children;\n        }\n      }\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var childs, parent;\n        if (sort && (childs = node.children)) childs.sort(sort);\n        if (value && (parent = node.parent)) parent.value += node.value;\n      });\n      return nodes;\n    }\n    hierarchy.sort = function(x) {\n      if (!arguments.length) return sort;\n      sort = x;\n      return hierarchy;\n    };\n    hierarchy.children = function(x) {\n      if (!arguments.length) return children;\n      children = x;\n      return hierarchy;\n    };\n    hierarchy.value = function(x) {\n      if (!arguments.length) return value;\n      value = x;\n      return hierarchy;\n    };\n    hierarchy.revalue = function(root) {\n      if (value) {\n        d3_layout_hierarchyVisitBefore(root, function(node) {\n          if (node.children) node.value = 0;\n        });\n        d3_layout_hierarchyVisitAfter(root, function(node) {\n          var parent;\n          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          if (parent = node.parent) parent.value += node.value;\n        });\n      }\n      return root;\n    };\n    return hierarchy;\n  };\n  function d3_layout_hierarchyRebind(object, hierarchy) {\n    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");\n    object.nodes = object;\n    object.links = d3_layout_hierarchyLinks;\n    return object;\n  }\n  function d3_layout_hierarchyVisitBefore(node, callback) {\n    var nodes = [ node ];\n    while ((node = nodes.pop()) != null) {\n      callback(node);\n      if ((children = node.children) && (n = children.length)) {\n        var n, children;\n        while (--n >= 0) nodes.push(children[n]);\n      }\n    }\n  }\n  function d3_layout_hierarchyVisitAfter(node, callback) {\n    var nodes = [ node ], nodes2 = [];\n    while ((node = nodes.pop()) != null) {\n      nodes2.push(node);\n      if ((children = node.children) && (n = children.length)) {\n        var i = -1, n, children;\n        while (++i < n) nodes.push(children[i]);\n      }\n    }\n    while ((node = nodes2.pop()) != null) {\n      callback(node);\n    }\n  }\n  function d3_layout_hierarchyChildren(d) {\n    return d.children;\n  }\n  function d3_layout_hierarchyValue(d) {\n    return d.value;\n  }\n  function d3_layout_hierarchySort(a, b) {\n    return b.value - a.value;\n  }\n  function d3_layout_hierarchyLinks(nodes) {\n    return d3.merge(nodes.map(function(parent) {\n      return (parent.children || []).map(function(child) {\n        return {\n          source: parent,\n          target: child\n        };\n      });\n    }));\n  }\n  d3.layout.partition = function() {\n    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];\n    function position(node, x, dx, dy) {\n      var children = node.children;\n      node.x = x;\n      node.y = node.depth * dy;\n      node.dx = dx;\n      node.dy = dy;\n      if (children && (n = children.length)) {\n        var i = -1, n, c, d;\n        dx = node.value ? dx / node.value : 0;\n        while (++i < n) {\n          position(c = children[i], x, d = c.value * dx, dy);\n          x += d;\n        }\n      }\n    }\n    function depth(node) {\n      var children = node.children, d = 0;\n      if (children && (n = children.length)) {\n        var i = -1, n;\n        while (++i < n) d = Math.max(d, depth(children[i]));\n      }\n      return 1 + d;\n    }\n    function partition(d, i) {\n      var nodes = hierarchy.call(this, d, i);\n      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n      return nodes;\n    }\n    partition.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return partition;\n    };\n    return d3_layout_hierarchyRebind(partition, hierarchy);\n  };\n  d3.layout.pie = function() {\n    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;\n    function pie(data) {\n      var n = data.length, values = data.map(function(d, i) {\n        return +value.call(pie, d, i);\n      }), a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \"function\" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;\n      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {\n        return values[j] - values[i];\n      } : function(i, j) {\n        return sort(data[i], data[j]);\n      });\n      index.forEach(function(i) {\n        arcs[i] = {\n          data: data[i],\n          value: v = values[i],\n          startAngle: a,\n          endAngle: a += v * k + pa,\n          padAngle: p\n        };\n      });\n      return arcs;\n    }\n    pie.value = function(_) {\n      if (!arguments.length) return value;\n      value = _;\n      return pie;\n    };\n    pie.sort = function(_) {\n      if (!arguments.length) return sort;\n      sort = _;\n      return pie;\n    };\n    pie.startAngle = function(_) {\n      if (!arguments.length) return startAngle;\n      startAngle = _;\n      return pie;\n    };\n    pie.endAngle = function(_) {\n      if (!arguments.length) return endAngle;\n      endAngle = _;\n      return pie;\n    };\n    pie.padAngle = function(_) {\n      if (!arguments.length) return padAngle;\n      padAngle = _;\n      return pie;\n    };\n    return pie;\n  };\n  var d3_layout_pieSortByValue = {};\n  d3.layout.stack = function() {\n    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n    function stack(data, index) {\n      if (!(n = data.length)) return data;\n      var series = data.map(function(d, i) {\n        return values.call(stack, d, i);\n      });\n      var points = series.map(function(d) {\n        return d.map(function(v, i) {\n          return [ x.call(stack, v, i), y.call(stack, v, i) ];\n        });\n      });\n      var orders = order.call(stack, points, index);\n      series = d3.permute(series, orders);\n      points = d3.permute(points, orders);\n      var offsets = offset.call(stack, points, index);\n      var m = series[0].length, n, i, j, o;\n      for (j = 0; j < m; ++j) {\n        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n        for (i = 1; i < n; ++i) {\n          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n        }\n      }\n      return data;\n    }\n    stack.values = function(x) {\n      if (!arguments.length) return values;\n      values = x;\n      return stack;\n    };\n    stack.order = function(x) {\n      if (!arguments.length) return order;\n      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n      return stack;\n    };\n    stack.offset = function(x) {\n      if (!arguments.length) return offset;\n      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n      return stack;\n    };\n    stack.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      return stack;\n    };\n    stack.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      return stack;\n    };\n    stack.out = function(z) {\n      if (!arguments.length) return out;\n      out = z;\n      return stack;\n    };\n    return stack;\n  };\n  function d3_layout_stackX(d) {\n    return d.x;\n  }\n  function d3_layout_stackY(d) {\n    return d.y;\n  }\n  function d3_layout_stackOut(d, y0, y) {\n    d.y0 = y0;\n    d.y = y;\n  }\n  var d3_layout_stackOrders = d3.map({\n    \"inside-out\": function(data) {\n      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n        return max[a] - max[b];\n      }), top = 0, bottom = 0, tops = [], bottoms = [];\n      for (i = 0; i < n; ++i) {\n        j = index[i];\n        if (top < bottom) {\n          top += sums[j];\n          tops.push(j);\n        } else {\n          bottom += sums[j];\n          bottoms.push(j);\n        }\n      }\n      return bottoms.reverse().concat(tops);\n    },\n    reverse: function(data) {\n      return d3.range(data.length).reverse();\n    },\n    \"default\": d3_layout_stackOrderDefault\n  });\n  var d3_layout_stackOffsets = d3.map({\n    silhouette: function(data) {\n      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o > max) max = o;\n        sums.push(o);\n      }\n      for (j = 0; j < m; ++j) {\n        y0[j] = (max - sums[j]) / 2;\n      }\n      return y0;\n    },\n    wiggle: function(data) {\n      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];\n      y0[0] = o = o0 = 0;\n      for (j = 1; j < m; ++j) {\n        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];\n        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {\n          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {\n            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n          }\n          s2 += s3 * data[i][j][1];\n        }\n        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n        if (o < o0) o0 = o;\n      }\n      for (j = 0; j < m; ++j) y0[j] -= o0;\n      return y0;\n    },\n    expand: function(data) {\n      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;\n      }\n      for (j = 0; j < m; ++j) y0[j] = 0;\n      return y0;\n    },\n    zero: d3_layout_stackOffsetZero\n  });\n  function d3_layout_stackOrderDefault(data) {\n    return d3.range(data.length);\n  }\n  function d3_layout_stackOffsetZero(data) {\n    var j = -1, m = data[0].length, y0 = [];\n    while (++j < m) y0[j] = 0;\n    return y0;\n  }\n  function d3_layout_stackMaxIndex(array) {\n    var i = 1, j = 0, v = array[0][1], k, n = array.length;\n    for (;i < n; ++i) {\n      if ((k = array[i][1]) > v) {\n        j = i;\n        v = k;\n      }\n    }\n    return j;\n  }\n  function d3_layout_stackReduceSum(d) {\n    return d.reduce(d3_layout_stackSum, 0);\n  }\n  function d3_layout_stackSum(p, d) {\n    return p + d[1];\n  }\n  d3.layout.histogram = function() {\n    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;\n    function histogram(data, i) {\n      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n      while (++i < m) {\n        bin = bins[i] = [];\n        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n        bin.y = 0;\n      }\n      if (m > 0) {\n        i = -1;\n        while (++i < n) {\n          x = values[i];\n          if (x >= range[0] && x <= range[1]) {\n            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n            bin.y += k;\n            bin.push(data[i]);\n          }\n        }\n      }\n      return bins;\n    }\n    histogram.value = function(x) {\n      if (!arguments.length) return valuer;\n      valuer = x;\n      return histogram;\n    };\n    histogram.range = function(x) {\n      if (!arguments.length) return ranger;\n      ranger = d3_functor(x);\n      return histogram;\n    };\n    histogram.bins = function(x) {\n      if (!arguments.length) return binner;\n      binner = typeof x === \"number\" ? function(range) {\n        return d3_layout_histogramBinFixed(range, x);\n      } : d3_functor(x);\n      return histogram;\n    };\n    histogram.frequency = function(x) {\n      if (!arguments.length) return frequency;\n      frequency = !!x;\n      return histogram;\n    };\n    return histogram;\n  };\n  function d3_layout_histogramBinSturges(range, values) {\n    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n  }\n  function d3_layout_histogramBinFixed(range, n) {\n    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];\n    while (++x <= n) f[x] = m * x + b;\n    return f;\n  }\n  function d3_layout_histogramRange(values) {\n    return [ d3.min(values), d3.max(values) ];\n  }\n  d3.layout.pack = function() {\n    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;\n    function pack(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \"function\" ? radius : function() {\n        return radius;\n      };\n      root.x = root.y = 0;\n      d3_layout_hierarchyVisitAfter(root, function(d) {\n        d.r = +r(d.value);\n      });\n      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n      if (padding) {\n        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r += dr;\n        });\n        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r -= dr;\n        });\n      }\n      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n      return nodes;\n    }\n    pack.size = function(_) {\n      if (!arguments.length) return size;\n      size = _;\n      return pack;\n    };\n    pack.radius = function(_) {\n      if (!arguments.length) return radius;\n      radius = _ == null || typeof _ === \"function\" ? _ : +_;\n      return pack;\n    };\n    pack.padding = function(_) {\n      if (!arguments.length) return padding;\n      padding = +_;\n      return pack;\n    };\n    return d3_layout_hierarchyRebind(pack, hierarchy);\n  };\n  function d3_layout_packSort(a, b) {\n    return a.value - b.value;\n  }\n  function d3_layout_packInsert(a, b) {\n    var c = a._pack_next;\n    a._pack_next = b;\n    b._pack_prev = a;\n    b._pack_next = c;\n    c._pack_prev = b;\n  }\n  function d3_layout_packSplice(a, b) {\n    a._pack_next = b;\n    b._pack_prev = a;\n  }\n  function d3_layout_packIntersects(a, b) {\n    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;\n    return .999 * dr * dr > dx * dx + dy * dy;\n  }\n  function d3_layout_packSiblings(node) {\n    if (!(nodes = node.children) || !(n = nodes.length)) return;\n    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;\n    function bound(node) {\n      xMin = Math.min(node.x - node.r, xMin);\n      xMax = Math.max(node.x + node.r, xMax);\n      yMin = Math.min(node.y - node.r, yMin);\n      yMax = Math.max(node.y + node.r, yMax);\n    }\n    nodes.forEach(d3_layout_packLink);\n    a = nodes[0];\n    a.x = -a.r;\n    a.y = 0;\n    bound(a);\n    if (n > 1) {\n      b = nodes[1];\n      b.x = b.r;\n      b.y = 0;\n      bound(b);\n      if (n > 2) {\n        c = nodes[2];\n        d3_layout_packPlace(a, b, c);\n        bound(c);\n        d3_layout_packInsert(a, c);\n        a._pack_prev = c;\n        d3_layout_packInsert(c, b);\n        b = a._pack_next;\n        for (i = 3; i < n; i++) {\n          d3_layout_packPlace(a, b, c = nodes[i]);\n          var isect = 0, s1 = 1, s2 = 1;\n          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n            if (d3_layout_packIntersects(j, c)) {\n              isect = 1;\n              break;\n            }\n          }\n          if (isect == 1) {\n            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n              if (d3_layout_packIntersects(k, c)) {\n                break;\n              }\n            }\n          }\n          if (isect) {\n            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);\n            i--;\n          } else {\n            d3_layout_packInsert(a, c);\n            b = c;\n            bound(c);\n          }\n        }\n      }\n    }\n    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;\n    for (i = 0; i < n; i++) {\n      c = nodes[i];\n      c.x -= cx;\n      c.y -= cy;\n      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n    }\n    node.r = cr;\n    nodes.forEach(d3_layout_packUnlink);\n  }\n  function d3_layout_packLink(node) {\n    node._pack_next = node._pack_prev = node;\n  }\n  function d3_layout_packUnlink(node) {\n    delete node._pack_next;\n    delete node._pack_prev;\n  }\n  function d3_layout_packTransform(node, x, y, k) {\n    var children = node.children;\n    node.x = x += k * node.x;\n    node.y = y += k * node.y;\n    node.r *= k;\n    if (children) {\n      var i = -1, n = children.length;\n      while (++i < n) d3_layout_packTransform(children[i], x, y, k);\n    }\n  }\n  function d3_layout_packPlace(a, b, c) {\n    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;\n    if (db && (dx || dy)) {\n      var da = b.r + c.r, dc = dx * dx + dy * dy;\n      da *= da;\n      db *= db;\n      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = a.x + x * dx + y * dy;\n      c.y = a.y + x * dy - y * dx;\n    } else {\n      c.x = a.x + db;\n      c.y = a.y;\n    }\n  }\n  d3.layout.tree = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n    function tree(d, i) {\n      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);\n      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {\n        var left = root0, right = root0, bottom = root0;\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n      return nodes;\n    }\n    function wrapTree(root0) {\n      var root1 = {\n        A: null,\n        children: [ root0 ]\n      }, queue = [ root1 ], node1;\n      while ((node1 = queue.pop()) != null) {\n        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {\n          queue.push((children[i] = child = {\n            _: children[i],\n            parent: node1,\n            children: (child = children[i].children) && child.slice() || [],\n            A: null,\n            a: null,\n            z: 0,\n            m: 0,\n            c: 0,\n            s: 0,\n            t: null,\n            i: i\n          }).a = child);\n        }\n      }\n      return root1.children[0];\n    }\n    function firstWalk(v) {\n      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;\n      if (children.length) {\n        d3_layout_treeShift(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {\n          vom = d3_layout_treeLeft(vom);\n          vop = d3_layout_treeRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !d3_layout_treeRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !d3_layout_treeLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n    function sizeNode(node) {\n      node.x *= size[0];\n      node.y = node.depth * size[1];\n    }\n    tree.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return tree;\n    };\n    tree.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null ? sizeNode : null;\n      return tree;\n    };\n    tree.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) == null ? null : sizeNode;\n      return tree;\n    };\n    return d3_layout_hierarchyRebind(tree, hierarchy);\n  };\n  function d3_layout_treeSeparation(a, b) {\n    return a.parent == b.parent ? 1 : 2;\n  }\n  function d3_layout_treeLeft(v) {\n    var children = v.children;\n    return children.length ? children[0] : v.t;\n  }\n  function d3_layout_treeRight(v) {\n    var children = v.children, n;\n    return (n = children.length) ? children[n - 1] : v.t;\n  }\n  function d3_layout_treeMove(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n  function d3_layout_treeShift(v) {\n    var shift = 0, change = 0, children = v.children, i = children.length, w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n  function d3_layout_treeAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n  d3.layout.cluster = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n    function cluster(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var children = node.children;\n        if (children && children.length) {\n          node.x = d3_layout_clusterX(children);\n          node.y = d3_layout_clusterY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {\n        node.x = (node.x - root.x) * size[0];\n        node.y = (root.y - node.y) * size[1];\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * size[0];\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n      });\n      return nodes;\n    }\n    cluster.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return cluster;\n    };\n    cluster.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null;\n      return cluster;\n    };\n    cluster.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) != null;\n      return cluster;\n    };\n    return d3_layout_hierarchyRebind(cluster, hierarchy);\n  };\n  function d3_layout_clusterY(children) {\n    return 1 + d3.max(children, function(child) {\n      return child.y;\n    });\n  }\n  function d3_layout_clusterX(children) {\n    return children.reduce(function(x, child) {\n      return x + child.x;\n    }, 0) / children.length;\n  }\n  function d3_layout_clusterLeft(node) {\n    var children = node.children;\n    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;\n  }\n  function d3_layout_clusterRight(node) {\n    var children = node.children, n;\n    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n  }\n  d3.layout.treemap = function() {\n    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n    function scale(children, k) {\n      var i = -1, n = children.length, child, area;\n      while (++i < n) {\n        area = (child = children[i]).value * (k < 0 ? 0 : k);\n        child.area = isNaN(area) || area <= 0 ? 0 : area;\n      }\n    }\n    function squarify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while ((n = remaining.length) > 0) {\n          row.push(child = remaining[n - 1]);\n          row.area += child.area;\n          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {\n            remaining.pop();\n            best = score;\n          } else {\n            row.area -= row.pop().area;\n            position(row, u, rect, false);\n            u = Math.min(rect.dx, rect.dy);\n            row.length = row.area = 0;\n            best = Infinity;\n          }\n        }\n        if (row.length) {\n          position(row, u, rect, true);\n          row.length = row.area = 0;\n        }\n        children.forEach(squarify);\n      }\n    }\n    function stickify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), remaining = children.slice(), child, row = [];\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while (child = remaining.pop()) {\n          row.push(child);\n          row.area += child.area;\n          if (child.z != null) {\n            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n            row.length = row.area = 0;\n          }\n        }\n        children.forEach(stickify);\n      }\n    }\n    function worst(row, u) {\n      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;\n      while (++i < n) {\n        if (!(r = row[i].area)) continue;\n        if (r < rmin) rmin = r;\n        if (r > rmax) rmax = r;\n      }\n      s *= s;\n      u *= u;\n      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n    }\n    function position(row, u, rect, flush) {\n      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;\n      if (u == rect.dx) {\n        if (flush || v > rect.dy) v = rect.dy;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dy = v;\n          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n        }\n        o.z = true;\n        o.dx += rect.x + rect.dx - x;\n        rect.y += v;\n        rect.dy -= v;\n      } else {\n        if (flush || v > rect.dx) v = rect.dx;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dx = v;\n          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n        }\n        o.z = false;\n        o.dy += rect.y + rect.dy - y;\n        rect.x += v;\n        rect.dx -= v;\n      }\n    }\n    function treemap(d) {\n      var nodes = stickies || hierarchy(d), root = nodes[0];\n      root.x = root.y = 0;\n      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;\n      if (stickies) hierarchy.revalue(root);\n      scale([ root ], root.dx * root.dy / root.value);\n      (stickies ? stickify : squarify)(root);\n      if (sticky) stickies = nodes;\n      return nodes;\n    }\n    treemap.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return treemap;\n    };\n    treemap.padding = function(x) {\n      if (!arguments.length) return padding;\n      function padFunction(node) {\n        var p = x.call(treemap, node, node.depth);\n        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n      }\n      function padConstant(node) {\n        return d3_layout_treemapPad(node, x);\n      }\n      var type;\n      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ], \n      padConstant) : padConstant;\n      return treemap;\n    };\n    treemap.round = function(x) {\n      if (!arguments.length) return round != Number;\n      round = x ? Math.round : Number;\n      return treemap;\n    };\n    treemap.sticky = function(x) {\n      if (!arguments.length) return sticky;\n      sticky = x;\n      stickies = null;\n      return treemap;\n    };\n    treemap.ratio = function(x) {\n      if (!arguments.length) return ratio;\n      ratio = x;\n      return treemap;\n    };\n    treemap.mode = function(x) {\n      if (!arguments.length) return mode;\n      mode = x + \"\";\n      return treemap;\n    };\n    return d3_layout_hierarchyRebind(treemap, hierarchy);\n  };\n  function d3_layout_treemapPadNull(node) {\n    return {\n      x: node.x,\n      y: node.y,\n      dx: node.dx,\n      dy: node.dy\n    };\n  }\n  function d3_layout_treemapPad(node, padding) {\n    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n    if (dx < 0) {\n      x += dx / 2;\n      dx = 0;\n    }\n    if (dy < 0) {\n      y += dy / 2;\n      dy = 0;\n    }\n    return {\n      x: x,\n      y: y,\n      dx: dx,\n      dy: dy\n    };\n  }\n  d3.random = {\n    normal: function(µ, σ) {\n      var n = arguments.length;\n      if (n < 2) σ = 1;\n      if (n < 1) µ = 0;\n      return function() {\n        var x, y, r;\n        do {\n          x = Math.random() * 2 - 1;\n          y = Math.random() * 2 - 1;\n          r = x * x + y * y;\n        } while (!r || r > 1);\n        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n      };\n    },\n    logNormal: function() {\n      var random = d3.random.normal.apply(d3, arguments);\n      return function() {\n        return Math.exp(random());\n      };\n    },\n    bates: function(m) {\n      var random = d3.random.irwinHall(m);\n      return function() {\n        return random() / m;\n      };\n    },\n    irwinHall: function(m) {\n      return function() {\n        for (var s = 0, j = 0; j < m; j++) s += Math.random();\n        return s;\n      };\n    }\n  };\n  d3.scale = {};\n  function d3_scaleExtent(domain) {\n    var start = domain[0], stop = domain[domain.length - 1];\n    return start < stop ? [ start, stop ] : [ stop, start ];\n  }\n  function d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n  }\n  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);\n    return function(x) {\n      return i(u(x));\n    };\n  }\n  function d3_scale_nice(domain, nice) {\n    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;\n    if (x1 < x0) {\n      dx = i0, i0 = i1, i1 = dx;\n      dx = x0, x0 = x1, x1 = dx;\n    }\n    domain[i0] = nice.floor(x0);\n    domain[i1] = nice.ceil(x1);\n    return domain;\n  }\n  function d3_scale_niceStep(step) {\n    return step ? {\n      floor: function(x) {\n        return Math.floor(x / step) * step;\n      },\n      ceil: function(x) {\n        return Math.ceil(x / step) * step;\n      }\n    } : d3_scale_niceIdentity;\n  }\n  var d3_scale_niceIdentity = {\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;\n    if (domain[k] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n    while (++j <= k) {\n      u.push(uninterpolate(domain[j - 1], domain[j]));\n      i.push(interpolate(range[j - 1], range[j]));\n    }\n    return function(x) {\n      var j = d3.bisect(domain, x, 1, k) - 1;\n      return i[j](u[j](x));\n    };\n  }\n  d3.scale.linear = function() {\n    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);\n  };\n  function d3_scale_linear(domain, range, interpolate, clamp) {\n    var output, input;\n    function rescale() {\n      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n      output = linear(domain, range, uninterpolate, interpolate);\n      input = linear(range, domain, uninterpolate, d3_interpolate);\n      return scale;\n    }\n    function scale(x) {\n      return output(x);\n    }\n    scale.invert = function(y) {\n      return input(y);\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(Number);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.rangeRound = function(x) {\n      return scale.range(x).interpolate(d3_interpolateRound);\n    };\n    scale.clamp = function(x) {\n      if (!arguments.length) return clamp;\n      clamp = x;\n      return rescale();\n    };\n    scale.interpolate = function(x) {\n      if (!arguments.length) return interpolate;\n      interpolate = x;\n      return rescale();\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      d3_scale_linearNice(domain, m);\n      return rescale();\n    };\n    scale.copy = function() {\n      return d3_scale_linear(domain, range, interpolate, clamp);\n    };\n    return rescale();\n  }\n  function d3_scale_linearRebind(scale, linear) {\n    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");\n  }\n  function d3_scale_linearNice(domain, m) {\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    return domain;\n  }\n  function d3_scale_linearTickRange(domain, m) {\n    if (m == null) m = 10;\n    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;\n    extent[0] = Math.ceil(extent[0] / step) * step;\n    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n    extent[2] = step;\n    return extent;\n  }\n  function d3_scale_linearTicks(domain, m) {\n    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n  }\n  function d3_scale_linearTickFormat(domain, m, format) {\n    var range = d3_scale_linearTickRange(domain, m);\n    if (format) {\n      var match = d3_format_re.exec(format);\n      match.shift();\n      if (match[8] === \"s\") {\n        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n        if (!match[7]) match[7] = \".\" + d3_scale_linearPrecision(prefix.scale(range[2]));\n        match[8] = \"f\";\n        format = d3.format(match.join(\"\"));\n        return function(d) {\n          return format(prefix.scale(d)) + prefix.symbol;\n        };\n      }\n      if (!match[7]) match[7] = \".\" + d3_scale_linearFormatPrecision(match[8], range);\n      format = match.join(\"\");\n    } else {\n      format = \",.\" + d3_scale_linearPrecision(range[2]) + \"f\";\n    }\n    return d3.format(format);\n  }\n  var d3_scale_linearFormatSignificant = {\n    s: 1,\n    g: 1,\n    p: 1,\n    r: 1,\n    e: 1\n  };\n  function d3_scale_linearPrecision(value) {\n    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n  }\n  function d3_scale_linearFormatPrecision(type, range) {\n    var p = d3_scale_linearPrecision(range[2]);\n    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \"e\") : p - (type === \"%\") * 2;\n  }\n  d3.scale.log = function() {\n    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);\n  };\n  function d3_scale_log(linear, base, positive, domain) {\n    function log(x) {\n      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);\n    }\n    function pow(x) {\n      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n    }\n    function scale(x) {\n      return linear(log(x));\n    }\n    scale.invert = function(x) {\n      return pow(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      positive = x[0] >= 0;\n      linear.domain((domain = x.map(Number)).map(log));\n      return scale;\n    };\n    scale.base = function(_) {\n      if (!arguments.length) return base;\n      base = +_;\n      linear.domain(domain.map(log));\n      return scale;\n    };\n    scale.nice = function() {\n      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n      linear.domain(niced);\n      domain = niced.map(pow);\n      return scale;\n    };\n    scale.ticks = function() {\n      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n      if (isFinite(j - i)) {\n        if (positive) {\n          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);\n          ticks.push(pow(i));\n        } else {\n          ticks.push(pow(i));\n          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);\n        }\n        for (i = 0; ticks[i] < u; i++) {}\n        for (j = ticks.length; ticks[j - 1] > v; j--) {}\n        ticks = ticks.slice(i, j);\n      }\n      return ticks;\n    };\n    scale.tickFormat = function(n, format) {\n      if (!arguments.length) return d3_scale_logFormat;\n      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== \"function\") format = d3.format(format);\n      var k = Math.max(1, base * n / scale.ticks().length);\n      return function(d) {\n        var i = d / pow(Math.round(log(d)));\n        if (i * base < base - .5) i *= base;\n        return i <= k ? format(d) : \"\";\n      };\n    };\n    scale.copy = function() {\n      return d3_scale_log(linear.copy(), base, positive, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  var d3_scale_logFormat = d3.format(\".0e\"), d3_scale_logNiceNegative = {\n    floor: function(x) {\n      return -Math.ceil(-x);\n    },\n    ceil: function(x) {\n      return -Math.floor(-x);\n    }\n  };\n  d3.scale.pow = function() {\n    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);\n  };\n  function d3_scale_pow(linear, exponent, domain) {\n    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);\n    function scale(x) {\n      return linear(powp(x));\n    }\n    scale.invert = function(x) {\n      return powb(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      linear.domain((domain = x.map(Number)).map(powp));\n      return scale;\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      return scale.domain(d3_scale_linearNice(domain, m));\n    };\n    scale.exponent = function(x) {\n      if (!arguments.length) return exponent;\n      powp = d3_scale_powPow(exponent = x);\n      powb = d3_scale_powPow(1 / exponent);\n      linear.domain(domain.map(powp));\n      return scale;\n    };\n    scale.copy = function() {\n      return d3_scale_pow(linear.copy(), exponent, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_scale_powPow(e) {\n    return function(x) {\n      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n    };\n  }\n  d3.scale.sqrt = function() {\n    return d3.scale.pow().exponent(.5);\n  };\n  d3.scale.ordinal = function() {\n    return d3_scale_ordinal([], {\n      t: \"range\",\n      a: [ [] ]\n    });\n  };\n  function d3_scale_ordinal(domain, ranger) {\n    var index, range, rangeBand;\n    function scale(x) {\n      return range[((index.get(x) || (ranger.t === \"range\" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n    }\n    function steps(start, step) {\n      return d3.range(domain.length).map(function(i) {\n        return start + step * i;\n      });\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = [];\n      index = new d3_Map();\n      var i = -1, n = x.length, xi;\n      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n      return scale[ranger.t].apply(scale, ranger.a);\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      rangeBand = 0;\n      ranger = {\n        t: \"range\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangePoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, \n      0) : (stop - start) / (domain.length - 1 + padding);\n      range = steps(start + step * padding / 2, step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangePoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundPoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), \n      0) : (stop - start) / (domain.length - 1 + padding) | 0;\n      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangeRoundPoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n      range = steps(start + step * outerPadding, step);\n      if (reverse) range.reverse();\n      rangeBand = step * (1 - padding);\n      ranger = {\n        t: \"rangeBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n      if (reverse) range.reverse();\n      rangeBand = Math.round(step * (1 - padding));\n      ranger = {\n        t: \"rangeRoundBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBand = function() {\n      return rangeBand;\n    };\n    scale.rangeExtent = function() {\n      return d3_scaleExtent(ranger.a[0]);\n    };\n    scale.copy = function() {\n      return d3_scale_ordinal(domain, ranger);\n    };\n    return scale.domain(domain);\n  }\n  d3.scale.category10 = function() {\n    return d3.scale.ordinal().range(d3_category10);\n  };\n  d3.scale.category20 = function() {\n    return d3.scale.ordinal().range(d3_category20);\n  };\n  d3.scale.category20b = function() {\n    return d3.scale.ordinal().range(d3_category20b);\n  };\n  d3.scale.category20c = function() {\n    return d3.scale.ordinal().range(d3_category20c);\n  };\n  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n  d3.scale.quantile = function() {\n    return d3_scale_quantile([], []);\n  };\n  function d3_scale_quantile(domain, range) {\n    var thresholds;\n    function rescale() {\n      var k = 0, q = range.length;\n      thresholds = [];\n      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);\n      return scale;\n    }\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.quantiles = function() {\n      return thresholds;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantile(domain, range);\n    };\n    return rescale();\n  }\n  d3.scale.quantize = function() {\n    return d3_scale_quantize(0, 1, [ 0, 1 ]);\n  };\n  function d3_scale_quantize(x0, x1, range) {\n    var kx, i;\n    function scale(x) {\n      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n    }\n    function rescale() {\n      kx = range.length / (x1 - x0);\n      i = range.length - 1;\n      return scale;\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return [ x0, x1 ];\n      x0 = +x[0];\n      x1 = +x[x.length - 1];\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      y = y < 0 ? NaN : y / kx + x0;\n      return [ y, y + 1 / kx ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantize(x0, x1, range);\n    };\n    return rescale();\n  }\n  d3.scale.threshold = function() {\n    return d3_scale_threshold([ .5 ], [ 0, 1 ]);\n  };\n  function d3_scale_threshold(domain, range) {\n    function scale(x) {\n      if (x <= x) return range[d3.bisect(domain, x)];\n    }\n    scale.domain = function(_) {\n      if (!arguments.length) return domain;\n      domain = _;\n      return scale;\n    };\n    scale.range = function(_) {\n      if (!arguments.length) return range;\n      range = _;\n      return scale;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return [ domain[y - 1], domain[y] ];\n    };\n    scale.copy = function() {\n      return d3_scale_threshold(domain, range);\n    };\n    return scale;\n  }\n  d3.scale.identity = function() {\n    return d3_scale_identity([ 0, 1 ]);\n  };\n  function d3_scale_identity(domain) {\n    function identity(x) {\n      return +x;\n    }\n    identity.invert = identity;\n    identity.domain = identity.range = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(identity);\n      return identity;\n    };\n    identity.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    identity.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    identity.copy = function() {\n      return d3_scale_identity(domain);\n    };\n    return identity;\n  }\n  d3.svg = {};\n  function d3_zero() {\n    return 0;\n  }\n  d3.svg.arc = function() {\n    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n    function arc() {\n      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;\n      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;\n      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \"\") + \"Z\";\n      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];\n      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n        if (!cw) p1 *= -1;\n        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n      }\n      if (r1) {\n        x0 = r1 * Math.cos(a0 + p1);\n        y0 = r1 * Math.sin(a0 + p1);\n        x1 = r1 * Math.cos(a1 - p1);\n        y1 = r1 * Math.sin(a1 - p1);\n        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;\n        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n          var h1 = (a0 + a1) / 2;\n          x0 = r1 * Math.cos(h1);\n          y0 = r1 * Math.sin(h1);\n          x1 = y1 = null;\n        }\n      } else {\n        x0 = y0 = 0;\n      }\n      if (r0) {\n        x2 = r0 * Math.cos(a1 - p0);\n        y2 = r0 * Math.sin(a1 - p0);\n        x3 = r0 * Math.cos(a0 + p0);\n        y3 = r0 * Math.sin(a0 + p0);\n        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;\n        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n          var h0 = (a0 + a1) / 2;\n          x2 = r0 * Math.cos(h0);\n          y2 = r0 * Math.sin(h0);\n          x3 = y3 = null;\n        }\n      } else {\n        x2 = y2 = 0;\n      }\n      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {\n        cr = r0 < r1 ^ cw ? 0 : 1;\n        var rc1 = rc, rc0 = rc;\n        if (da < π) {\n          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n        }\n        if (x1 != null) {\n          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n          if (rc === rc1) {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t30[1], \"A\", r1, \",\", r1, \" 0 \", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \",\", cw, \" \", t12[1], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t12[0]);\n          } else {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 1,\", cr, \" \", t12[0]);\n          }\n        } else {\n          path.push(\"M\", x0, \",\", y0);\n        }\n        if (x3 != null) {\n          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n          if (rc === rc0) {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t21[1], \"A\", r0, \",\", r0, \" 0 \", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \",\", 1 - cw, \" \", t03[1], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          } else {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          }\n        } else {\n          path.push(\"L\", x2, \",\", y2);\n        }\n      } else {\n        path.push(\"M\", x0, \",\", y0);\n        if (x1 != null) path.push(\"A\", r1, \",\", r1, \" 0 \", l1, \",\", cw, \" \", x1, \",\", y1);\n        path.push(\"L\", x2, \",\", y2);\n        if (x3 != null) path.push(\"A\", r0, \",\", r0, \" 0 \", l0, \",\", 1 - cw, \" \", x3, \",\", y3);\n      }\n      path.push(\"Z\");\n      return path.join(\"\");\n    }\n    function circleSegment(r1, cw) {\n      return \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + r1;\n    }\n    arc.innerRadius = function(v) {\n      if (!arguments.length) return innerRadius;\n      innerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.outerRadius = function(v) {\n      if (!arguments.length) return outerRadius;\n      outerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.cornerRadius = function(v) {\n      if (!arguments.length) return cornerRadius;\n      cornerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.padRadius = function(v) {\n      if (!arguments.length) return padRadius;\n      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n      return arc;\n    };\n    arc.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return arc;\n    };\n    arc.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return arc;\n    };\n    arc.padAngle = function(v) {\n      if (!arguments.length) return padAngle;\n      padAngle = d3_functor(v);\n      return arc;\n    };\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n      return [ Math.cos(a) * r, Math.sin(a) * r ];\n    };\n    return arc;\n  };\n  var d3_svg_arcAuto = \"auto\";\n  function d3_svg_arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n  function d3_svg_arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n  function d3_svg_arcStartAngle(d) {\n    return d.startAngle;\n  }\n  function d3_svg_arcEndAngle(d) {\n    return d.endAngle;\n  }\n  function d3_svg_arcPadAngle(d) {\n    return d && d.padAngle;\n  }\n  function d3_svg_arcSweep(x0, y0, x1, y1) {\n    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;\n  }\n  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];\n  }\n  function d3_svg_line(projection) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n    function line(data) {\n      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points), tension));\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);\n        } else if (points.length) {\n          segment();\n          points = [];\n        }\n      }\n      if (points.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    line.x = function(_) {\n      if (!arguments.length) return x;\n      x = _;\n      return line;\n    };\n    line.y = function(_) {\n      if (!arguments.length) return y;\n      y = _;\n      return line;\n    };\n    line.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return line;\n    };\n    line.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      return line;\n    };\n    line.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return line;\n    };\n    return line;\n  }\n  d3.svg.line = function() {\n    return d3_svg_line(d3_identity);\n  };\n  var d3_svg_lineInterpolators = d3.map({\n    linear: d3_svg_lineLinear,\n    \"linear-closed\": d3_svg_lineLinearClosed,\n    step: d3_svg_lineStep,\n    \"step-before\": d3_svg_lineStepBefore,\n    \"step-after\": d3_svg_lineStepAfter,\n    basis: d3_svg_lineBasis,\n    \"basis-open\": d3_svg_lineBasisOpen,\n    \"basis-closed\": d3_svg_lineBasisClosed,\n    bundle: d3_svg_lineBundle,\n    cardinal: d3_svg_lineCardinal,\n    \"cardinal-open\": d3_svg_lineCardinalOpen,\n    \"cardinal-closed\": d3_svg_lineCardinalClosed,\n    monotone: d3_svg_lineMonotone\n  });\n  d3_svg_lineInterpolators.forEach(function(key, value) {\n    value.key = key;\n    value.closed = /-closed$/.test(key);\n  });\n  function d3_svg_lineLinear(points) {\n    return points.length > 1 ? points.join(\"L\") : points + \"Z\";\n  }\n  function d3_svg_lineLinearClosed(points) {\n    return points.join(\"L\") + \"Z\";\n  }\n  function d3_svg_lineStep(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p[0] + (p = points[i])[0]) / 2, \"V\", p[1]);\n    if (n > 1) path.push(\"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepBefore(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepAfter(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineCardinalOpen(points, tension) {\n    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineCardinalClosed(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));\n  }\n  function d3_svg_lineCardinal(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineHermite(points, tangents) {\n    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {\n      return d3_svg_lineLinear(points);\n    }\n    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n    if (quad) {\n      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];\n      p0 = points[1];\n      pi = 2;\n    }\n    if (tangents.length > 1) {\n      t = tangents[1];\n      p = points[pi];\n      pi++;\n      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      for (var i = 2; i < tangents.length; i++, pi++) {\n        p = points[pi];\n        t = tangents[i];\n        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      }\n    }\n    if (quad) {\n      var lp = points[pi];\n      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];\n    }\n    return path;\n  }\n  function d3_svg_lineCardinalTangents(points, tension) {\n    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;\n    while (++i < n) {\n      p0 = p1;\n      p1 = p2;\n      p2 = points[i];\n      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineBasis(points) {\n    if (points.length < 3) return d3_svg_lineLinear(points);\n    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0, \"L\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    points.push(points[n - 1]);\n    while (++i <= n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    points.pop();\n    path.push(\"L\", pi);\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisOpen(points) {\n    if (points.length < 4) return d3_svg_lineLinear(points);\n    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];\n    while (++i < 3) {\n      pi = points[i];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n    --i;\n    while (++i < n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisClosed(points) {\n    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];\n    while (++i < 4) {\n      pi = points[i % n];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    --i;\n    while (++i < m) {\n      pi = points[i % n];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBundle(points, tension) {\n    var n = points.length - 1;\n    if (n) {\n      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;\n      while (++i <= n) {\n        p = points[i];\n        t = i / n;\n        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n      }\n    }\n    return d3_svg_lineBasis(points);\n  }\n  function d3_svg_lineDot4(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n  function d3_svg_lineBasisBezier(path, x, y) {\n    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n  }\n  function d3_svg_lineSlope(p0, p1) {\n    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n  }\n  function d3_svg_lineFiniteDifferences(points) {\n    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);\n    while (++i < j) {\n      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n    }\n    m[i] = d;\n    return m;\n  }\n  function d3_svg_lineMonotoneTangents(points) {\n    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;\n    while (++i < j) {\n      d = d3_svg_lineSlope(points[i], points[i + 1]);\n      if (abs(d) < ε) {\n        m[i] = m[i + 1] = 0;\n      } else {\n        a = m[i] / d;\n        b = m[i + 1] / d;\n        s = a * a + b * b;\n        if (s > 9) {\n          s = d * 3 / Math.sqrt(s);\n          m[i] = s * a;\n          m[i + 1] = s * b;\n        }\n      }\n    }\n    i = -1;\n    while (++i <= j) {\n      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n      tangents.push([ s || 0, m[i] * s || 0 ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineMonotone(points) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n  }\n  d3.svg.line.radial = function() {\n    var line = d3_svg_line(d3_svg_lineRadial);\n    line.radius = line.x, delete line.x;\n    line.angle = line.y, delete line.y;\n    return line;\n  };\n  function d3_svg_lineRadial(points) {\n    var point, i = -1, n = points.length, r, a;\n    while (++i < n) {\n      point = points[i];\n      r = point[0];\n      a = point[1] - halfπ;\n      point[0] = r * Math.cos(a);\n      point[1] = r * Math.sin(a);\n    }\n    return points;\n  }\n  function d3_svg_area(projection) {\n    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n    function area(data) {\n      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n        return x;\n      } : d3_functor(x1), fy1 = y0 === y1 ? function() {\n        return y;\n      } : d3_functor(y1), x, y;\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);\n          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);\n        } else if (points0.length) {\n          segment();\n          points0 = [];\n          points1 = [];\n        }\n      }\n      if (points0.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    area.x = function(_) {\n      if (!arguments.length) return x1;\n      x0 = x1 = _;\n      return area;\n    };\n    area.x0 = function(_) {\n      if (!arguments.length) return x0;\n      x0 = _;\n      return area;\n    };\n    area.x1 = function(_) {\n      if (!arguments.length) return x1;\n      x1 = _;\n      return area;\n    };\n    area.y = function(_) {\n      if (!arguments.length) return y1;\n      y0 = y1 = _;\n      return area;\n    };\n    area.y0 = function(_) {\n      if (!arguments.length) return y0;\n      y0 = _;\n      return area;\n    };\n    area.y1 = function(_) {\n      if (!arguments.length) return y1;\n      y1 = _;\n      return area;\n    };\n    area.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return area;\n    };\n    area.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      interpolateReverse = interpolate.reverse || interpolate;\n      L = interpolate.closed ? \"M\" : \"L\";\n      return area;\n    };\n    area.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return area;\n    };\n    return area;\n  }\n  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n  d3.svg.area = function() {\n    return d3_svg_area(d3_identity);\n  };\n  d3.svg.area.radial = function() {\n    var area = d3_svg_area(d3_svg_lineRadial);\n    area.radius = area.x, delete area.x;\n    area.innerRadius = area.x0, delete area.x0;\n    area.outerRadius = area.x1, delete area.x1;\n    area.angle = area.y, delete area.y;\n    area.startAngle = area.y0, delete area.y0;\n    area.endAngle = area.y1, delete area.y1;\n    return area;\n  };\n  d3.svg.chord = function() {\n    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n    function chord(d, i) {\n      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);\n      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n    }\n    function subgroup(self, f, d, i) {\n      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n      return {\n        r: r,\n        a0: a0,\n        a1: a1,\n        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],\n        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]\n      };\n    }\n    function equals(a, b) {\n      return a.a0 == b.a0 && a.a1 == b.a1;\n    }\n    function arc(r, p, a) {\n      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;\n    }\n    function curve(r0, p0, r1, p1) {\n      return \"Q 0,0 \" + p1;\n    }\n    chord.radius = function(v) {\n      if (!arguments.length) return radius;\n      radius = d3_functor(v);\n      return chord;\n    };\n    chord.source = function(v) {\n      if (!arguments.length) return source;\n      source = d3_functor(v);\n      return chord;\n    };\n    chord.target = function(v) {\n      if (!arguments.length) return target;\n      target = d3_functor(v);\n      return chord;\n    };\n    chord.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return chord;\n    };\n    chord.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return chord;\n    };\n    return chord;\n  };\n  function d3_svg_chordRadius(d) {\n    return d.radius;\n  }\n  d3.svg.diagonal = function() {\n    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;\n    function diagonal(d, i) {\n      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {\n        x: p0.x,\n        y: m\n      }, {\n        x: p3.x,\n        y: m\n      }, p3 ];\n      p = p.map(projection);\n      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];\n    }\n    diagonal.source = function(x) {\n      if (!arguments.length) return source;\n      source = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.target = function(x) {\n      if (!arguments.length) return target;\n      target = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.projection = function(x) {\n      if (!arguments.length) return projection;\n      projection = x;\n      return diagonal;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalProjection(d) {\n    return [ d.x, d.y ];\n  }\n  d3.svg.diagonal.radial = function() {\n    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;\n    diagonal.projection = function(x) {\n      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalRadialProjection(projection) {\n    return function() {\n      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;\n      return [ r * Math.cos(a), r * Math.sin(a) ];\n    };\n  }\n  d3.svg.symbol = function() {\n    var type = d3_svg_symbolType, size = d3_svg_symbolSize;\n    function symbol(d, i) {\n      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n    }\n    symbol.type = function(x) {\n      if (!arguments.length) return type;\n      type = d3_functor(x);\n      return symbol;\n    };\n    symbol.size = function(x) {\n      if (!arguments.length) return size;\n      size = d3_functor(x);\n      return symbol;\n    };\n    return symbol;\n  };\n  function d3_svg_symbolSize() {\n    return 64;\n  }\n  function d3_svg_symbolType() {\n    return \"circle\";\n  }\n  function d3_svg_symbolCircle(size) {\n    var r = Math.sqrt(size / π);\n    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";\n  }\n  var d3_svg_symbols = d3.map({\n    circle: d3_svg_symbolCircle,\n    cross: function(size) {\n      var r = Math.sqrt(size / 5) / 2;\n      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n    },\n    diamond: function(size) {\n      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;\n      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";\n    },\n    square: function(size) {\n      var r = Math.sqrt(size) / 2;\n      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";\n    },\n    \"triangle-down\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";\n    },\n    \"triangle-up\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";\n    }\n  });\n  d3.svg.symbolTypes = d3_svg_symbols.keys();\n  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n  d3_selectionPrototype.transition = function(name) {\n    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n      time: Date.now(),\n      ease: d3_ease_cubicInOut,\n      delay: 0,\n      duration: 250\n    };\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_selectionPrototype.interrupt = function(name) {\n    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));\n  };\n  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());\n  function d3_selection_interruptNS(ns) {\n    return function() {\n      var lock, activeId, active;\n      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        if (--lock.count) delete lock[activeId]; else delete this[ns];\n        lock.active += .5;\n        active.event && active.event.interrupt.call(this, this.__data__, active.index);\n      }\n    };\n  }\n  function d3_transition(groups, ns, id) {\n    d3_subclass(groups, d3_transitionPrototype);\n    groups.namespace = ns;\n    groups.id = id;\n    return groups;\n  }\n  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;\n  d3_transitionPrototype.call = d3_selectionPrototype.call;\n  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n  d3_transitionPrototype.node = d3_selectionPrototype.node;\n  d3_transitionPrototype.size = d3_selectionPrototype.size;\n  d3.transition = function(selection, name) {\n    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);\n  };\n  d3.transition.prototype = d3_transitionPrototype;\n  d3_transitionPrototype.select = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n          subgroup.push(subnode);\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.selectAll = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          transition = node[ns][id];\n          subnodes = selector.call(node, node.__data__, i, j);\n          subgroups.push(subgroup = []);\n          for (var k = -1, o = subnodes.length; ++k < o; ) {\n            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n            subgroup.push(subnode);\n          }\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_transition(subgroups, this.namespace, this.id);\n  };\n  d3_transitionPrototype.tween = function(name, tween) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);\n    return d3_selection_each(this, tween == null ? function(node) {\n      node[ns][id].tween.remove(name);\n    } : function(node) {\n      node[ns][id].tween.set(name, tween);\n    });\n  };\n  function d3_transition_tween(groups, name, value, tween) {\n    var id = groups.id, ns = groups.namespace;\n    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n    } : (value = tween(value), function(node) {\n      node[ns][id].tween.set(name, value);\n    }));\n  }\n  d3_transitionPrototype.attr = function(nameNS, value) {\n    if (arguments.length < 2) {\n      for (value in nameNS) this.attr(value, nameNS[value]);\n      return this;\n    }\n    var interpolate = nameNS == \"transform\" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrTween(b) {\n      return b == null ? attrNull : (b += \"\", function() {\n        var a = this.getAttribute(name), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttribute(name, i(t));\n        });\n      });\n    }\n    function attrTweenNS(b) {\n      return b == null ? attrNullNS : (b += \"\", function() {\n        var a = this.getAttributeNS(name.space, name.local), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttributeNS(name.space, name.local, i(t));\n        });\n      });\n    }\n    return d3_transition_tween(this, \"attr.\" + nameNS, value, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.attrTween = function(nameNS, tween) {\n    var name = d3.ns.qualify(nameNS);\n    function attrTween(d, i) {\n      var f = tween.call(this, d, i, this.getAttribute(name));\n      return f && function(t) {\n        this.setAttribute(name, f(t));\n      };\n    }\n    function attrTweenNS(d, i) {\n      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n      return f && function(t) {\n        this.setAttributeNS(name.space, name.local, f(t));\n      };\n    }\n    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.style(priority, name[priority], value);\n        return this;\n      }\n      priority = \"\";\n    }\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleString(b) {\n      return b == null ? styleNull : (b += \"\", function() {\n        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;\n        return a !== b && (i = d3_interpolate(a, b), function(t) {\n          this.style.setProperty(name, i(t), priority);\n        });\n      });\n    }\n    return d3_transition_tween(this, \"style.\" + name, value, styleString);\n  };\n  d3_transitionPrototype.styleTween = function(name, tween, priority) {\n    if (arguments.length < 3) priority = \"\";\n    function styleTween(d, i) {\n      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));\n      return f && function(t) {\n        this.style.setProperty(name, f(t), priority);\n      };\n    }\n    return this.tween(\"style.\" + name, styleTween);\n  };\n  d3_transitionPrototype.text = function(value) {\n    return d3_transition_tween(this, \"text\", value, d3_transition_text);\n  };\n  function d3_transition_text(b) {\n    if (b == null) b = \"\";\n    return function() {\n      this.textContent = b;\n    };\n  }\n  d3_transitionPrototype.remove = function() {\n    var ns = this.namespace;\n    return this.each(\"end.transition\", function() {\n      var p;\n      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);\n    });\n  };\n  d3_transitionPrototype.ease = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].ease;\n    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);\n    return d3_selection_each(this, function(node) {\n      node[ns][id].ease = value;\n    });\n  };\n  d3_transitionPrototype.delay = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].delay;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n    } : (value = +value, function(node) {\n      node[ns][id].delay = value;\n    }));\n  };\n  d3_transitionPrototype.duration = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].duration;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n    } : (value = Math.max(1, value), function(node) {\n      node[ns][id].duration = value;\n    }));\n  };\n  d3_transitionPrototype.each = function(type, listener) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) {\n      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;\n      try {\n        d3_transitionInheritId = id;\n        d3_selection_each(this, function(node, i, j) {\n          d3_transitionInherit = node[ns][id];\n          type.call(node, node.__data__, i, j);\n        });\n      } finally {\n        d3_transitionInherit = inherit;\n        d3_transitionInheritId = inheritId;\n      }\n    } else {\n      d3_selection_each(this, function(node) {\n        var transition = node[ns][id];\n        (transition.event || (transition.event = d3.dispatch(\"start\", \"end\", \"interrupt\"))).on(type, listener);\n      });\n    }\n    return this;\n  };\n  d3_transitionPrototype.transition = function() {\n    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if (node = group[i]) {\n          transition = node[ns][id0];\n          d3_transitionNode(node, i, ns, id1, {\n            time: transition.time,\n            ease: transition.ease,\n            delay: transition.delay + transition.duration,\n            duration: transition.duration\n          });\n        }\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id1);\n  };\n  function d3_transitionNamespace(name) {\n    return name == null ? \"__transition__\" : \"__transition_\" + name + \"__\";\n  }\n  function d3_transitionNode(node, i, ns, id, inherit) {\n    var lock = node[ns] || (node[ns] = {\n      active: 0,\n      count: 0\n    }), transition = lock[id], time, timer, duration, ease, tweens;\n    function schedule(elapsed) {\n      var delay = transition.delay;\n      timer.t = delay + time;\n      if (delay <= elapsed) return start(elapsed - delay);\n      timer.c = start;\n    }\n    function start(elapsed) {\n      var activeId = lock.active, active = lock[activeId];\n      if (active) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        --lock.count;\n        delete lock[activeId];\n        active.event && active.event.interrupt.call(node, node.__data__, active.index);\n      }\n      for (var cancelId in lock) {\n        if (+cancelId < id) {\n          var cancel = lock[cancelId];\n          cancel.timer.c = null;\n          cancel.timer.t = NaN;\n          --lock.count;\n          delete lock[cancelId];\n        }\n      }\n      timer.c = tick;\n      d3_timer(function() {\n        if (timer.c && tick(elapsed || 1)) {\n          timer.c = null;\n          timer.t = NaN;\n        }\n        return 1;\n      }, 0, time);\n      lock.active = id;\n      transition.event && transition.event.start.call(node, node.__data__, i);\n      tweens = [];\n      transition.tween.forEach(function(key, value) {\n        if (value = value.call(node, node.__data__, i)) {\n          tweens.push(value);\n        }\n      });\n      ease = transition.ease;\n      duration = transition.duration;\n    }\n    function tick(elapsed) {\n      var t = elapsed / duration, e = ease(t), n = tweens.length;\n      while (n > 0) {\n        tweens[--n].call(node, e);\n      }\n      if (t >= 1) {\n        transition.event && transition.event.end.call(node, node.__data__, i);\n        if (--lock.count) delete lock[id]; else delete node[ns];\n        return 1;\n      }\n    }\n    if (!transition) {\n      time = inherit.time;\n      timer = d3_timer(schedule, 0, time);\n      transition = lock[id] = {\n        tween: new d3_Map(),\n        time: time,\n        timer: timer,\n        delay: inherit.delay,\n        duration: inherit.duration,\n        ease: inherit.ease,\n        index: i\n      };\n      inherit = null;\n      ++lock.count;\n    }\n  }\n  d3.svg.axis = function() {\n    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n    function axis(g) {\n      g.each(function() {\n        var g = d3.select(this);\n        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();\n        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\".tick\").data(ticks, scale1), tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", ε), tickExit = d3.transition(tick.exit()).style(\"opacity\", ε).remove(), tickUpdate = d3.transition(tick.order()).style(\"opacity\", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n        var range = d3_scaleRange(scale1), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), \n        d3.transition(path));\n        tickEnter.append(\"line\");\n        tickEnter.append(\"text\");\n        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\"), sign = orient === \"top\" || orient === \"left\" ? -1 : 1, x1, x2, y1, y2;\n        if (orient === \"bottom\" || orient === \"top\") {\n          tickTransform = d3_svg_axisX, x1 = \"x\", y1 = \"y\", x2 = \"x2\", y2 = \"y2\";\n          text.attr(\"dy\", sign < 0 ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\");\n          pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + sign * outerTickSize + \"V0H\" + range[1] + \"V\" + sign * outerTickSize);\n        } else {\n          tickTransform = d3_svg_axisY, x1 = \"y\", y1 = \"x\", x2 = \"y2\", y2 = \"x2\";\n          text.attr(\"dy\", \".32em\").style(\"text-anchor\", sign < 0 ? \"end\" : \"start\");\n          pathUpdate.attr(\"d\", \"M\" + sign * outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * outerTickSize);\n        }\n        lineEnter.attr(y2, sign * innerTickSize);\n        textEnter.attr(y1, sign * tickSpacing);\n        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n        if (scale1.rangeBand) {\n          var x = scale1, dx = x.rangeBand() / 2;\n          scale0 = scale1 = function(d) {\n            return x(d) + dx;\n          };\n        } else if (scale0.rangeBand) {\n          scale0 = scale1;\n        } else {\n          tickExit.call(tickTransform, scale1, scale0);\n        }\n        tickEnter.call(tickTransform, scale0, scale1);\n        tickUpdate.call(tickTransform, scale1, scale1);\n      });\n    }\n    axis.scale = function(x) {\n      if (!arguments.length) return scale;\n      scale = x;\n      return axis;\n    };\n    axis.orient = function(x) {\n      if (!arguments.length) return orient;\n      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;\n      return axis;\n    };\n    axis.ticks = function() {\n      if (!arguments.length) return tickArguments_;\n      tickArguments_ = d3_array(arguments);\n      return axis;\n    };\n    axis.tickValues = function(x) {\n      if (!arguments.length) return tickValues;\n      tickValues = x;\n      return axis;\n    };\n    axis.tickFormat = function(x) {\n      if (!arguments.length) return tickFormat_;\n      tickFormat_ = x;\n      return axis;\n    };\n    axis.tickSize = function(x) {\n      var n = arguments.length;\n      if (!n) return innerTickSize;\n      innerTickSize = +x;\n      outerTickSize = +arguments[n - 1];\n      return axis;\n    };\n    axis.innerTickSize = function(x) {\n      if (!arguments.length) return innerTickSize;\n      innerTickSize = +x;\n      return axis;\n    };\n    axis.outerTickSize = function(x) {\n      if (!arguments.length) return outerTickSize;\n      outerTickSize = +x;\n      return axis;\n    };\n    axis.tickPadding = function(x) {\n      if (!arguments.length) return tickPadding;\n      tickPadding = +x;\n      return axis;\n    };\n    axis.tickSubdivide = function() {\n      return arguments.length && axis;\n    };\n    return axis;\n  };\n  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  };\n  function d3_svg_axisX(selection, x0, x1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = x0(d);\n      return \"translate(\" + (isFinite(v0) ? v0 : x1(d)) + \",0)\";\n    });\n  }\n  function d3_svg_axisY(selection, y0, y1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = y0(d);\n      return \"translate(0,\" + (isFinite(v0) ? v0 : y1(d)) + \")\";\n    });\n  }\n  d3.svg.brush = function() {\n    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n    function brush(g) {\n      g.each(function() {\n        var g = d3.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);\n        var background = g.selectAll(\".background\").data([ 0 ]);\n        background.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n        g.selectAll(\".extent\").data([ 0 ]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");\n        var resize = g.selectAll(\".resize\").data(resizes, d3_identity);\n        resize.exit().remove();\n        resize.enter().append(\"g\").attr(\"class\", function(d) {\n          return \"resize \" + d;\n        }).style(\"cursor\", function(d) {\n          return d3_svg_brushCursor[d];\n        }).append(\"rect\").attr(\"x\", function(d) {\n          return /[ew]$/.test(d) ? -3 : null;\n        }).attr(\"y\", function(d) {\n          return /^[ns]/.test(d) ? -3 : null;\n        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");\n        resize.style(\"display\", brush.empty() ? \"none\" : null);\n        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;\n        if (x) {\n          range = d3_scaleRange(x);\n          backgroundUpdate.attr(\"x\", range[0]).attr(\"width\", range[1] - range[0]);\n          redrawX(gUpdate);\n        }\n        if (y) {\n          range = d3_scaleRange(y);\n          backgroundUpdate.attr(\"y\", range[0]).attr(\"height\", range[1] - range[0]);\n          redrawY(gUpdate);\n        }\n        redraw(gUpdate);\n      });\n    }\n    brush.event = function(g) {\n      g.each(function() {\n        var event_ = event.of(this, arguments), extent1 = {\n          x: xExtent,\n          y: yExtent,\n          i: xExtentDomain,\n          j: yExtentDomain\n        }, extent0 = this.__chart__ || extent1;\n        this.__chart__ = extent1;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.brush\", function() {\n            xExtentDomain = extent0.i;\n            yExtentDomain = extent0.j;\n            xExtent = extent0.x;\n            yExtent = extent0.y;\n            event_({\n              type: \"brushstart\"\n            });\n          }).tween(\"brush:brush\", function() {\n            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);\n            xExtentDomain = yExtentDomain = null;\n            return function(t) {\n              xExtent = extent1.x = xi(t);\n              yExtent = extent1.y = yi(t);\n              event_({\n                type: \"brush\",\n                mode: \"resize\"\n              });\n            };\n          }).each(\"end.brush\", function() {\n            xExtentDomain = extent1.i;\n            yExtentDomain = extent1.j;\n            event_({\n              type: \"brush\",\n              mode: \"resize\"\n            });\n            event_({\n              type: \"brushend\"\n            });\n          });\n        } else {\n          event_({\n            type: \"brushstart\"\n          });\n          event_({\n            type: \"brush\",\n            mode: \"resize\"\n          });\n          event_({\n            type: \"brushend\"\n          });\n        }\n      });\n    };\n    function redraw(g) {\n      g.selectAll(\".resize\").attr(\"transform\", function(d) {\n        return \"translate(\" + xExtent[+/e$/.test(d)] + \",\" + yExtent[+/^s/.test(d)] + \")\";\n      });\n    }\n    function redrawX(g) {\n      g.select(\".extent\").attr(\"x\", xExtent[0]);\n      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", xExtent[1] - xExtent[0]);\n    }\n    function redrawY(g) {\n      g.select(\".extent\").attr(\"y\", yExtent[0]);\n      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", yExtent[1] - yExtent[0]);\n    }\n    function brushstart() {\n      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;\n      var w = d3.select(d3_window(target)).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);\n      if (d3.event.changedTouches) {\n        w.on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend);\n      } else {\n        w.on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend);\n      }\n      g.interrupt().selectAll(\"*\").interrupt();\n      if (dragging) {\n        origin[0] = xExtent[0] - origin[0];\n        origin[1] = yExtent[0] - origin[1];\n      } else if (resizing) {\n        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);\n        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];\n        origin[0] = xExtent[ex];\n        origin[1] = yExtent[ey];\n      } else if (d3.event.altKey) center = origin.slice();\n      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);\n      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));\n      event_({\n        type: \"brushstart\"\n      });\n      brushmove();\n      function keydown() {\n        if (d3.event.keyCode == 32) {\n          if (!dragging) {\n            center = null;\n            origin[0] -= xExtent[1];\n            origin[1] -= yExtent[1];\n            dragging = 2;\n          }\n          d3_eventPreventDefault();\n        }\n      }\n      function keyup() {\n        if (d3.event.keyCode == 32 && dragging == 2) {\n          origin[0] += xExtent[1];\n          origin[1] += yExtent[1];\n          dragging = 0;\n          d3_eventPreventDefault();\n        }\n      }\n      function brushmove() {\n        var point = d3.mouse(target), moved = false;\n        if (offset) {\n          point[0] += offset[0];\n          point[1] += offset[1];\n        }\n        if (!dragging) {\n          if (d3.event.altKey) {\n            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];\n            origin[0] = xExtent[+(point[0] < center[0])];\n            origin[1] = yExtent[+(point[1] < center[1])];\n          } else center = null;\n        }\n        if (resizingX && move1(point, x, 0)) {\n          redrawX(g);\n          moved = true;\n        }\n        if (resizingY && move1(point, y, 1)) {\n          redrawY(g);\n          moved = true;\n        }\n        if (moved) {\n          redraw(g);\n          event_({\n            type: \"brush\",\n            mode: dragging ? \"move\" : \"resize\"\n          });\n        }\n      }\n      function move1(point, scale, i) {\n        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n        if (dragging) {\n          r0 -= position;\n          r1 -= size + position;\n        }\n        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n        if (dragging) {\n          max = (min += position) + size;\n        } else {\n          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n          if (position < min) {\n            max = min;\n            min = position;\n          } else {\n            max = position;\n          }\n        }\n        if (extent[0] != min || extent[1] != max) {\n          if (i) yExtentDomain = null; else xExtentDomain = null;\n          extent[0] = min;\n          extent[1] = max;\n          return true;\n        }\n      }\n      function brushend() {\n        brushmove();\n        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);\n        d3.select(\"body\").style(\"cursor\", null);\n        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n        dragRestore();\n        event_({\n          type: \"brushend\"\n        });\n      }\n    }\n    brush.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.clamp = function(z) {\n      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;\n      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;\n      return brush;\n    };\n    brush.extent = function(z) {\n      var x0, x1, y0, y1, t;\n      if (!arguments.length) {\n        if (x) {\n          if (xExtentDomain) {\n            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n          } else {\n            x0 = xExtent[0], x1 = xExtent[1];\n            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n          }\n        }\n        if (y) {\n          if (yExtentDomain) {\n            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n          } else {\n            y0 = yExtent[0], y1 = yExtent[1];\n            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n          }\n        }\n        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];\n      }\n      if (x) {\n        x0 = z[0], x1 = z[1];\n        if (y) x0 = x0[0], x1 = x1[0];\n        xExtentDomain = [ x0, x1 ];\n        if (x.invert) x0 = x(x0), x1 = x(x1);\n        if (x1 < x0) t = x0, x0 = x1, x1 = t;\n        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];\n      }\n      if (y) {\n        y0 = z[0], y1 = z[1];\n        if (x) y0 = y0[1], y1 = y1[1];\n        yExtentDomain = [ y0, y1 ];\n        if (y.invert) y0 = y(y0), y1 = y(y1);\n        if (y1 < y0) t = y0, y0 = y1, y1 = t;\n        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];\n      }\n      return brush;\n    };\n    brush.clear = function() {\n      if (!brush.empty()) {\n        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];\n        xExtentDomain = yExtentDomain = null;\n      }\n      return brush;\n    };\n    brush.empty = function() {\n      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];\n    };\n    return d3.rebind(brush, event, \"on\");\n  };\n  var d3_svg_brushCursor = {\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];\n  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n  var d3_time_formatUtc = d3_time_format.utc;\n  var d3_time_formatIso = d3_time_formatUtc(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n  d3_time_format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n  function d3_time_formatIsoNative(date) {\n    return date.toISOString();\n  }\n  d3_time_formatIsoNative.parse = function(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  };\n  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n  d3_time.second = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 1e3) * 1e3);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n  }, function(date) {\n    return date.getSeconds();\n  });\n  d3_time.seconds = d3_time.second.range;\n  d3_time.seconds.utc = d3_time.second.utc.range;\n  d3_time.minute = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 6e4) * 6e4);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n  }, function(date) {\n    return date.getMinutes();\n  });\n  d3_time.minutes = d3_time.minute.range;\n  d3_time.minutes.utc = d3_time.minute.utc.range;\n  d3_time.hour = d3_time_interval(function(date) {\n    var timezone = date.getTimezoneOffset() / 60;\n    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n  }, function(date) {\n    return date.getHours();\n  });\n  d3_time.hours = d3_time.hour.range;\n  d3_time.hours.utc = d3_time.hour.utc.range;\n  d3_time.month = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setDate(1);\n    return date;\n  }, function(date, offset) {\n    date.setMonth(date.getMonth() + offset);\n  }, function(date) {\n    return date.getMonth();\n  });\n  d3_time.months = d3_time.month.range;\n  d3_time.months.utc = d3_time.month.utc.range;\n  function d3_time_scale(linear, methods, format) {\n    function scale(x) {\n      return linear(x);\n    }\n    scale.invert = function(x) {\n      return d3_time_scaleDate(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n      linear.domain(x);\n      return scale;\n    };\n    function tickMethod(extent, count) {\n      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);\n      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {\n        return d / 31536e6;\n      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n    }\n    scale.nice = function(interval, skip) {\n      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" && tickMethod(extent, interval);\n      if (method) interval = method[0], skip = method[1];\n      function skipped(date) {\n        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n      }\n      return scale.domain(d3_scale_nice(domain, skip > 1 ? {\n        floor: function(date) {\n          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);\n          return date;\n        },\n        ceil: function(date) {\n          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);\n          return date;\n        }\n      } : interval));\n    };\n    scale.ticks = function(interval, skip) {\n      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" ? tickMethod(extent, interval) : !interval.range && [ {\n        range: interval\n      }, skip ];\n      if (method) interval = method[0], skip = method[1];\n      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);\n    };\n    scale.tickFormat = function() {\n      return format;\n    };\n    scale.copy = function() {\n      return d3_time_scale(linear.copy(), methods, format);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_time_scaleDate(t) {\n    return new Date(t);\n  }\n  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \".%L\", function(d) {\n    return d.getMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getDay() && d.getDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  var d3_time_scaleMilliseconds = {\n    range: function(start, stop, step) {\n      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n    },\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  d3_time_scaleLocalMethods.year = d3_time.year;\n  d3_time.scale = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n  };\n  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {\n    return [ m[0].utc, m[1] ];\n  });\n  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \".%L\", function(d) {\n    return d.getUTCMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getUTCSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getUTCMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getUTCHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getUTCDay() && d.getUTCDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getUTCDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getUTCMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n  d3_time.scale.utc = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n  };\n  d3.text = d3_xhrType(function(request) {\n    return request.responseText;\n  });\n  d3.json = function(url, callback) {\n    return d3_xhr(url, \"application/json\", d3_json, callback);\n  };\n  function d3_json(request) {\n    return JSON.parse(request.responseText);\n  }\n  d3.html = function(url, callback) {\n    return d3_xhr(url, \"text/html\", d3_html, callback);\n  };\n  function d3_html(request) {\n    var range = d3_document.createRange();\n    range.selectNode(d3_document.body);\n    return range.createContextualFragment(request.responseText);\n  }\n  d3.xml = d3_xhrType(function(request) {\n    return request.responseXML;\n  });\n  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === \"object\" && module.exports) module.exports = d3; else this.d3 = d3;\n}();\n\n/***/ }),\n\n/***/ 288:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(289).crossfilter;\n\n\n/***/ }),\n\n/***/ 289:\n/***/ (function(module, exports) {\n\n(function(exports){\ncrossfilter.version = \"1.3.14\";\nfunction crossfilter_identity(d) {\n  return d;\n}\ncrossfilter.permute = permute;\n\nfunction permute(array, index) {\n  for (var i = 0, n = index.length, copy = new Array(n); i < n; ++i) {\n    copy[i] = array[index[i]];\n  }\n  return copy;\n}\nvar bisect = crossfilter.bisect = bisect_by(crossfilter_identity);\n\nbisect.by = bisect_by;\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\nvar heap = crossfilter.heap = heap_by(crossfilter_identity);\n\nheap.by = heap_by;\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\nvar heapselect = crossfilter.heapselect = heapselect_by(crossfilter_identity);\n\nheapselect.by = heapselect_by;\n\nfunction heapselect_by(f) {\n  var heap = heap_by(f);\n\n  // Returns a new array containing the top k elements in the array a[lo:hi].\n  // The returned array is not sorted, but maintains the heap property. If k is\n  // greater than hi - lo, then fewer than k elements will be returned. The\n  // order of elements in a is unchanged by this operation.\n  function heapselect(a, lo, hi, k) {\n    var queue = new Array(k = Math.min(hi - lo, k)),\n        min,\n        i,\n        x,\n        d;\n\n    for (i = 0; i < k; ++i) queue[i] = a[lo++];\n    heap(queue, 0, k);\n\n    if (lo < hi) {\n      min = f(queue[0]);\n      do {\n        if (x = f(d = a[lo]) > min) {\n          queue[0] = d;\n          min = f(heap(queue, 0, k)[0]);\n        }\n      } while (++lo < hi);\n    }\n\n    return queue;\n  }\n\n  return heapselect;\n}\nvar insertionsort = crossfilter.insertionsort = insertionsort_by(crossfilter_identity);\n\ninsertionsort.by = insertionsort_by;\n\nfunction insertionsort_by(f) {\n\n  function insertionsort(a, lo, hi) {\n    for (var i = lo + 1; i < hi; ++i) {\n      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n        a[j] = a[j - 1];\n      }\n      a[j] = t;\n    }\n    return a;\n  }\n\n  return insertionsort;\n}\n// Algorithm designed by Vladimir Yaroslavskiy.\n// Implementation based on the Dart project; see lib/dart/LICENSE for details.\n\nvar quicksort = crossfilter.quicksort = quicksort_by(crossfilter_identity);\n\nquicksort.by = quicksort_by;\n\nfunction quicksort_by(f) {\n  var insertionsort = insertionsort_by(f);\n\n  function sort(a, lo, hi) {\n    return (hi - lo < quicksort_sizeThreshold\n        ? insertionsort\n        : quicksort)(a, lo, hi);\n  }\n\n  function quicksort(a, lo, hi) {\n    // Compute the two pivots by looking at 5 elements.\n    var sixth = (hi - lo) / 6 | 0,\n        i1 = lo + sixth,\n        i5 = hi - 1 - sixth,\n        i3 = lo + hi - 1 >> 1,  // The midpoint.\n        i2 = i3 - sixth,\n        i4 = i3 + sixth;\n\n    var e1 = a[i1], x1 = f(e1),\n        e2 = a[i2], x2 = f(e2),\n        e3 = a[i3], x3 = f(e3),\n        e4 = a[i4], x4 = f(e4),\n        e5 = a[i5], x5 = f(e5);\n\n    var t;\n\n    // Sort the selected 5 elements using a sorting network.\n    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n    var pivot1 = e2, pivotValue1 = x2,\n        pivot2 = e4, pivotValue2 = x4;\n\n    // e2 and e4 have been saved in the pivot variables. They will be written\n    // back, once the partitioning is finished.\n    a[i1] = e1;\n    a[i2] = a[lo];\n    a[i3] = e3;\n    a[i4] = a[hi - 1];\n    a[i5] = e5;\n\n    var less = lo + 1,   // First element in the middle partition.\n        great = hi - 2;  // Last element in the middle partition.\n\n    // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n    // Object.prototype.valueOf; == and === do not, so in order to be consistent\n    // with natural order (such as for Date objects), we must do two compares.\n    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n    if (pivotsEqual) {\n\n      // Degenerated case where the partitioning becomes a dutch national flag\n      // problem.\n      //\n      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n      //  ^             ^          ^             ^            ^\n      // left         less         k           great         right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1) for x in ]left, less[ : x < pivot.\n      //   2) for x in [less, k[ : x == pivot.\n      //   3) for x in ]great, right[ : x > pivot.\n      for (var k = less; k <= great; ++k) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else if (xk > pivotValue1) {\n\n          // Find the first element <= pivot in the range [k - 1, great] and\n          // put [:ek:] there. We know that such an element must exist:\n          // When k == less, then el3 (which is equal to pivot) lies in the\n          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n          // Note that in the latter case invariant 2 will be violated for a\n          // short amount of time. The invariant will be restored when the\n          // pivots are put into their final positions.\n          while (true) {\n            var greatValue = f(a[great]);\n            if (greatValue > pivotValue1) {\n              great--;\n              // This is the only location in the while-loop where a new\n              // iteration is started.\n              continue;\n            } else if (greatValue < pivotValue1) {\n              // Triple exchange.\n              a[k] = a[less];\n              a[less++] = a[great];\n              a[great--] = ek;\n              break;\n            } else {\n              a[k] = a[great];\n              a[great--] = ek;\n              // Note: if great < k then we will exit the outer loop and fix\n              // invariant 2 (which we just violated).\n              break;\n            }\n          }\n        }\n      }\n    } else {\n\n      // We partition the list into three parts:\n      //  1. < pivot1\n      //  2. >= pivot1 && <= pivot2\n      //  3. > pivot2\n      //\n      // During the loop we have:\n      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n      //  ^            ^                        ^              ^             ^\n      // left         less                     k              great        right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1. for x in ]left, less[ : x < pivot1\n      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n      //   3. for x in ]great, right[ : x > pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else {\n          if (xk > pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] <= pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] >= pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Move pivots into their final positions.\n    // We shrunk the list from both sides (a[left] and a[right] have\n    // meaningless values in them) and now we move elements from the first\n    // and third partition into these locations so that we can store the\n    // pivots.\n    a[lo] = a[less - 1];\n    a[less - 1] = pivot1;\n    a[hi - 1] = a[great + 1];\n    a[great + 1] = pivot2;\n\n    // The list is now partitioned into three partitions:\n    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n    //  ^            ^                        ^             ^\n    // left         less                     great        right\n\n    // Recursive descent. (Don't include the pivot values.)\n    sort(a, lo, less - 1);\n    sort(a, great + 2, hi);\n\n    if (pivotsEqual) {\n      // All elements in the second partition are equal to the pivot. No\n      // need to sort them.\n      return a;\n    }\n\n    // In theory it should be enough to call _doSort recursively on the second\n    // partition.\n    // The Android source however removes the pivot elements from the recursive\n    // call if the second partition is too large (more than 2/3 of the list).\n    if (less < i1 && great > i5) {\n      var lessValue, greatValue;\n      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\n      while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\n\n      // Copy paste of the previous 3-way partitioning with adaptions.\n      //\n      // We partition the list into three parts:\n      //  1. == pivot1\n      //  2. > pivot1 && < pivot2\n      //  3. == pivot2\n      //\n      // During the loop we have:\n      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n      //              ^                      ^              ^\n      //            less                     k              great\n      //\n      // Invariants:\n      //   1. for x in [ *, less[ : x == pivot1\n      //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n      //   3. for x in ]great, * ] : x == pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk <= pivotValue1 && xk >= pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          less++;\n        } else {\n          if (xk <= pivotValue2 && xk >= pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] < pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] == pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // The second partition has now been cleared of pivot elements and looks\n    // as follows:\n    // [  *  |  > pivot1 && < pivot2  | * ]\n    //        ^                      ^\n    //       less                  great\n    // Sort the second partition using recursive descent.\n\n    // The second partition looks as follows:\n    // [  *  |  >= pivot1 && <= pivot2  | * ]\n    //        ^                        ^\n    //       less                    great\n    // Simply sort it by recursive descent.\n\n    return sort(a, less, great + 1);\n  }\n\n  return sort;\n}\n\nvar quicksort_sizeThreshold = 32;\nvar crossfilter_array8 = crossfilter_arrayUntyped,\n    crossfilter_array16 = crossfilter_arrayUntyped,\n    crossfilter_array32 = crossfilter_arrayUntyped,\n    crossfilter_arrayLengthen = crossfilter_arrayLengthenUntyped,\n    crossfilter_arrayWiden = crossfilter_arrayWidenUntyped;\n\nif (typeof Uint8Array !== \"undefined\") {\n  crossfilter_array8 = function(n) { return new Uint8Array(n); };\n  crossfilter_array16 = function(n) { return new Uint16Array(n); };\n  crossfilter_array32 = function(n) { return new Uint32Array(n); };\n\n  crossfilter_arrayLengthen = function(array, length) {\n    if (array.length >= length) return array;\n    var copy = new array.constructor(length);\n    copy.set(array);\n    return copy;\n  };\n\n  crossfilter_arrayWiden = function(array, width) {\n    var copy;\n    switch (width) {\n      case 16: copy = crossfilter_array16(array.length); break;\n      case 32: copy = crossfilter_array32(array.length); break;\n      default: throw new Error(\"invalid array width!\");\n    }\n    copy.set(array);\n    return copy;\n  };\n}\n\nfunction crossfilter_arrayUntyped(n) {\n  var array = new Array(n), i = -1;\n  while (++i < n) array[i] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayLengthenUntyped(array, length) {\n  var n = array.length;\n  while (n < length) array[n++] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayWidenUntyped(array, width) {\n  if (width > 32) throw new Error(\"invalid array width!\");\n  return array;\n}\nfunction crossfilter_filterExact(bisect, value) {\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n  };\n}\n\nfunction crossfilter_filterRange(bisect, range) {\n  var min = range[0],\n      max = range[1];\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n  };\n}\n\nfunction crossfilter_filterAll(values) {\n  return [0, values.length];\n}\nfunction crossfilter_null() {\n  return null;\n}\nfunction crossfilter_zero() {\n  return 0;\n}\nfunction crossfilter_reduceIncrement(p) {\n  return p + 1;\n}\n\nfunction crossfilter_reduceDecrement(p) {\n  return p - 1;\n}\n\nfunction crossfilter_reduceAdd(f) {\n  return function(p, v) {\n    return p + +f(v);\n  };\n}\n\nfunction crossfilter_reduceSubtract(f) {\n  return function(p, v) {\n    return p - f(v);\n  };\n}\nexports.crossfilter = crossfilter;\n\nfunction crossfilter() {\n  var crossfilter = {\n    add: add,\n    remove: removeData,\n    dimension: dimension,\n    groupAll: groupAll,\n    size: size\n  };\n\n  var data = [], // the records\n      n = 0, // the number of records; data.length\n      m = 0, // a bit mask representing which dimensions are in use\n      M = 8, // number of dimensions that can fit in `filters`\n      filters = crossfilter_array8(0), // M bits per record; 1 is filtered out\n      filterListeners = [], // when the filters change\n      dataListeners = [], // when data is added\n      removeDataListeners = []; // when data is removed\n\n  // Adds the specified new records to this crossfilter.\n  function add(newData) {\n    var n0 = n,\n        n1 = newData.length;\n\n    // If there's actually new data to add…\n    // Merge the new data into the existing data.\n    // Lengthen the filter bitset to handle the new records.\n    // Notify listeners (dimensions and groups) that new data is available.\n    if (n1) {\n      data = data.concat(newData);\n      filters = crossfilter_arrayLengthen(filters, n += n1);\n      dataListeners.forEach(function(l) { l(newData, n0, n1); });\n    }\n\n    return crossfilter;\n  }\n\n  // Removes all records that match the current filters.\n  function removeData() {\n    var newIndex = crossfilter_index(n, n),\n        removed = [];\n    for (var i = 0, j = 0; i < n; ++i) {\n      if (filters[i]) newIndex[i] = j++;\n      else removed.push(i);\n    }\n\n    // Remove all matching records from groups.\n    filterListeners.forEach(function(l) { l(0, [], removed); });\n\n    // Update indexes.\n    removeDataListeners.forEach(function(l) { l(newIndex); });\n\n    // Remove old filters and data by overwriting.\n    for (var i = 0, j = 0, k; i < n; ++i) {\n      if (k = filters[i]) {\n        if (i !== j) filters[j] = k, data[j] = data[i];\n        ++j;\n      }\n    }\n    data.length = j;\n    while (n > j) filters[--n] = 0;\n  }\n\n  // Adds a new dimension with the specified value accessor function.\n  function dimension(value) {\n    var dimension = {\n      filter: filter,\n      filterExact: filterExact,\n      filterRange: filterRange,\n      filterFunction: filterFunction,\n      filterAll: filterAll,\n      top: top,\n      bottom: bottom,\n      group: group,\n      groupAll: groupAll,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var one = ~m & -~m, // lowest unset bit as mask, e.g., 00001000\n        zero = ~one, // inverted one, e.g., 11110111\n        values, // sorted, cached array\n        index, // value rank ↦ object id\n        newValues, // temporary array storing newly-added values\n        newIndex, // temporary array storing newly-added index\n        sort = quicksort_by(function(i) { return newValues[i]; }),\n        refilter = crossfilter_filterAll, // for recomputing filter\n        refilterFunction, // the custom filter function in use\n        indexListeners = [], // when data is added\n        dimensionGroups = [],\n        lo0 = 0,\n        hi0 = 0;\n\n    // Updating a dimension is a two-stage process. First, we must update the\n    // associated filters for the newly-added records. Once all dimensions have\n    // updated their filters, the groups are notified to update.\n    dataListeners.unshift(preAdd);\n    dataListeners.push(postAdd);\n\n    removeDataListeners.push(removeData);\n\n    // Incorporate any existing data into this dimension, and make sure that the\n    // filter bitset is wide enough to handle the new dimension.\n    m |= one;\n    if (M >= 32 ? !one : m & -(1 << M)) {\n      filters = crossfilter_arrayWiden(filters, M <<= 1);\n    }\n    preAdd(data, 0, n);\n    postAdd(data, 0, n);\n\n    // Incorporates the specified new records into this dimension.\n    // This function is responsible for updating filters, values, and index.\n    function preAdd(newData, n0, n1) {\n\n      // Permute new values into natural order using a sorted index.\n      newValues = newData.map(value);\n      newIndex = sort(crossfilter_range(n1), 0, n1);\n      newValues = permute(newValues, newIndex);\n\n      // Bisect newValues to determine which new records are selected.\n      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1], i;\n      if (refilterFunction) {\n        for (i = 0; i < n1; ++i) {\n          if (!refilterFunction(newValues[i], i)) filters[newIndex[i] + n0] |= one;\n        }\n      } else {\n        for (i = 0; i < lo1; ++i) filters[newIndex[i] + n0] |= one;\n        for (i = hi1; i < n1; ++i) filters[newIndex[i] + n0] |= one;\n      }\n\n      // If this dimension previously had no data, then we don't need to do the\n      // more expensive merge operation; use the new values and index as-is.\n      if (!n0) {\n        values = newValues;\n        index = newIndex;\n        lo0 = lo1;\n        hi0 = hi1;\n        return;\n      }\n\n      var oldValues = values,\n          oldIndex = index,\n          i0 = 0,\n          i1 = 0;\n\n      // Otherwise, create new arrays into which to merge new and old.\n      values = new Array(n);\n      index = crossfilter_index(n, n);\n\n      // Merge the old and new sorted values, and old and new index.\n      for (i = 0; i0 < n0 && i1 < n1; ++i) {\n        if (oldValues[i0] < newValues[i1]) {\n          values[i] = oldValues[i0];\n          index[i] = oldIndex[i0++];\n        } else {\n          values[i] = newValues[i1];\n          index[i] = newIndex[i1++] + n0;\n        }\n      }\n\n      // Add any remaining old values.\n      for (; i0 < n0; ++i0, ++i) {\n        values[i] = oldValues[i0];\n        index[i] = oldIndex[i0];\n      }\n\n      // Add any remaining new values.\n      for (; i1 < n1; ++i1, ++i) {\n        values[i] = newValues[i1];\n        index[i] = newIndex[i1] + n0;\n      }\n\n      // Bisect again to recompute lo0 and hi0.\n      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // When all filters have updated, notify index listeners of the new values.\n    function postAdd(newData, n0, n1) {\n      indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\n      newValues = newIndex = null;\n    }\n\n    function removeData(reIndex) {\n      for (var i = 0, j = 0, k; i < n; ++i) {\n        if (filters[k = index[i]]) {\n          if (i !== j) values[j] = values[i];\n          index[j] = reIndex[k];\n          ++j;\n        }\n      }\n      values.length = j;\n      while (j < n) index[j++] = 0;\n\n      // Bisect again to recompute lo0 and hi0.\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // Updates the selected values based on the specified bounds [lo, hi].\n    // This implementation is used by all the public filter methods.\n    function filterIndexBounds(bounds) {\n      var lo1 = bounds[0],\n          hi1 = bounds[1];\n\n      if (refilterFunction) {\n        refilterFunction = null;\n        filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; });\n        lo0 = lo1;\n        hi0 = hi1;\n        return dimension;\n      }\n\n      var i,\n          j,\n          k,\n          added = [],\n          removed = [];\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      lo0 = lo1;\n      hi0 = hi1;\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n      return dimension;\n    }\n\n    // Filters this dimension using the specified range, value, or null.\n    // If the range is null, this is equivalent to filterAll.\n    // If the range is an array, this is equivalent to filterRange.\n    // Otherwise, this is equivalent to filterExact.\n    function filter(range) {\n      return range == null\n          ? filterAll() : Array.isArray(range)\n          ? filterRange(range) : typeof range === \"function\"\n          ? filterFunction(range)\n          : filterExact(range);\n    }\n\n    // Filters this dimension to select the exact value.\n    function filterExact(value) {\n      return filterIndexBounds((refilter = crossfilter_filterExact(bisect, value))(values));\n    }\n\n    // Filters this dimension to select the specified range [lo, hi].\n    // The lower bound is inclusive, and the upper bound is exclusive.\n    function filterRange(range) {\n      return filterIndexBounds((refilter = crossfilter_filterRange(bisect, range))(values));\n    }\n\n    // Clears any filters on this dimension.\n    function filterAll() {\n      return filterIndexBounds((refilter = crossfilter_filterAll)(values));\n    }\n\n    // Filters this dimension using an arbitrary function.\n    function filterFunction(f) {\n      refilter = crossfilter_filterAll;\n\n      filterIndexFunction(refilterFunction = f);\n\n      lo0 = 0;\n      hi0 = n;\n\n      return dimension;\n    }\n\n    function filterIndexFunction(f) {\n      var i,\n          k,\n          x,\n          added = [],\n          removed = [];\n\n      for (i = 0; i < n; ++i) {\n        if (!(filters[k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n          if (x) filters[k] &= zero, added.push(k);\n          else filters[k] |= one, removed.push(k);\n        }\n      }\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n    }\n\n    // Returns the top K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function top(k) {\n      var array = [],\n          i = hi0,\n          j;\n\n      while (--i >= lo0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n      }\n\n      return array;\n    }\n\n    // Returns the bottom K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function bottom(k) {\n      var array = [],\n          i = lo0,\n          j;\n\n      while (i < hi0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n        i++;\n      }\n\n      return array;\n    }\n\n    // Adds a new group to this dimension, using the specified key function.\n    function group(key) {\n      var group = {\n        top: top,\n        all: all,\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        order: order,\n        orderNatural: orderNatural,\n        size: size,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      // Ensure that this group will be removed when the dimension is removed.\n      dimensionGroups.push(group);\n\n      var groups, // array of {key, value}\n          groupIndex, // object id ↦ group id\n          groupWidth = 8,\n          groupCapacity = crossfilter_capacity(groupWidth),\n          k = 0, // cardinality\n          select,\n          heap,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          update = crossfilter_null,\n          reset = crossfilter_null,\n          resetNeeded = true,\n          groupAll = key === crossfilter_null;\n\n      if (arguments.length < 1) key = crossfilter_identity;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the associated reduce values. It must also listen to\n      // the parent dimension for when data is added, and compute new keys.\n      filterListeners.push(update);\n      indexListeners.push(add);\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into the grouping.\n      add(values, index, 0, n);\n\n      // Incorporates the specified new values into this group.\n      // This function is responsible for updating groups and groupIndex.\n      function add(newValues, newIndex, n0, n1) {\n        var oldGroups = groups,\n            reIndex = crossfilter_index(k, groupCapacity),\n            add = reduceAdd,\n            initial = reduceInitial,\n            k0 = k, // old cardinality\n            i0 = 0, // index of old group\n            i1 = 0, // index of new record\n            j, // object id\n            g0, // old group\n            x0, // old key\n            x1, // new key\n            g, // group to add\n            x; // key of group to add\n\n        // If a reset is needed, we don't need to update the reduce values.\n        if (resetNeeded) add = initial = crossfilter_null;\n\n        // Reset the new groups (k is a lower bound).\n        // Also, make sure that groupIndex exists and is long enough.\n        groups = new Array(k), k = 0;\n        groupIndex = k0 > 1 ? crossfilter_arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n\n        // Get the first old key (x0 of g0), if it exists.\n        if (k0) x0 = (g0 = oldGroups[0]).key;\n\n        // Find the first new key (x1), skipping NaN keys.\n        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\n\n        // While new keys remain…\n        while (i1 < n1) {\n\n          // Determine the lesser of the two current keys; new and old.\n          // If there are no old keys remaining, then always add the new key.\n          if (g0 && x0 <= x1) {\n            g = g0, x = x0;\n\n            // Record the new index of the old group.\n            reIndex[i0] = k;\n\n            // Retrieve the next old key.\n            if (g0 = oldGroups[++i0]) x0 = g0.key;\n          } else {\n            g = {key: x1, value: initial()}, x = x1;\n          }\n\n          // Add the lesser group.\n          groups[k] = g;\n\n          // Add any selected records belonging to the added group, while\n          // advancing the new key and populating the associated group index.\n          while (!(x1 > x)) {\n            groupIndex[j = newIndex[i1] + n0] = k;\n            if (!(filters[j] & zero)) g.value = add(g.value, data[j]);\n            if (++i1 >= n1) break;\n            x1 = key(newValues[i1]);\n          }\n\n          groupIncrement();\n        }\n\n        // Add any remaining old groups that were greater than all new keys.\n        // No incremental reduce is needed; these groups have no new records.\n        // Also record the new index of the old group.\n        while (i0 < k0) {\n          groups[reIndex[i0] = k] = oldGroups[i0++];\n          groupIncrement();\n        }\n\n        // If we added any new groups before any old groups,\n        // update the group index of all the old records.\n        if (k > i0) for (i0 = 0; i0 < n0; ++i0) {\n          groupIndex[i0] = reIndex[groupIndex[i0]];\n        }\n\n        // Modify the update and reset behavior based on the cardinality.\n        // If the cardinality is less than or equal to one, then the groupIndex\n        // is not needed. If the cardinality is zero, then there are no records\n        // and therefore no groups to update or reset. Note that we also must\n        // change the registered listener to point to the new method.\n        j = filterListeners.indexOf(update);\n        if (k > 1) {\n          update = updateMany;\n          reset = resetMany;\n        } else {\n          if (!k && groupAll) {\n            k = 1;\n            groups = [{key: null, value: initial()}];\n          }\n          if (k === 1) {\n            update = updateOne;\n            reset = resetOne;\n          } else {\n            update = crossfilter_null;\n            reset = crossfilter_null;\n          }\n          groupIndex = null;\n        }\n        filterListeners[j] = update;\n\n        // Count the number of added groups,\n        // and widen the group index as needed.\n        function groupIncrement() {\n          if (++k === groupCapacity) {\n            reIndex = crossfilter_arrayWiden(reIndex, groupWidth <<= 1);\n            groupIndex = crossfilter_arrayWiden(groupIndex, groupWidth);\n            groupCapacity = crossfilter_capacity(groupWidth);\n          }\n        }\n      }\n\n      function removeData() {\n        if (k > 1) {\n          var oldK = k,\n              oldGroups = groups,\n              seenGroups = crossfilter_index(oldK, oldK);\n\n          // Filter out non-matches by copying matching group index entries to\n          // the beginning of the array.\n          for (var i = 0, j = 0; i < n; ++i) {\n            if (filters[i]) {\n              seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n              ++j;\n            }\n          }\n\n          // Reassemble groups including only those groups that were referred\n          // to by matching group index entries.  Note the new group index in\n          // seenGroups.\n          groups = [], k = 0;\n          for (i = 0; i < oldK; ++i) {\n            if (seenGroups[i]) {\n              seenGroups[i] = k++;\n              groups.push(oldGroups[i]);\n            }\n          }\n\n          if (k > 1) {\n            // Reindex the group index using seenGroups to find the new index.\n            for (var i = 0; i < j; ++i) groupIndex[i] = seenGroups[groupIndex[i]];\n          } else {\n            groupIndex = null;\n          }\n          filterListeners[filterListeners.indexOf(update)] = k > 1\n              ? (reset = resetMany, update = updateMany)\n              : k === 1 ? (reset = resetOne, update = updateOne)\n              : reset = update = crossfilter_null;\n        } else if (k === 1) {\n          if (groupAll) return;\n          for (var i = 0; i < n; ++i) if (filters[i]) return;\n          groups = [], k = 0;\n          filterListeners[filterListeners.indexOf(update)] =\n          update = reset = crossfilter_null;\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is greater than 1.\n      function updateMany(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g;\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g = groups[groupIndex[k]];\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is 1.\n      function updateOne(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g = groups[0];\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is greater than 1.\n      function resetMany() {\n        var i,\n            g;\n\n        // Reset all group values.\n        for (i = 0; i < k; ++i) {\n          groups[i].value = reduceInitial();\n        }\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g = groups[groupIndex[i]];\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is 1.\n      function resetOne() {\n        var i,\n            g = groups[0];\n\n        // Reset the singleton group values.\n        g.value = reduceInitial();\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Returns the array of group values, in the dimension's natural order.\n      function all() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return groups;\n      }\n\n      // Returns a new array containing the top K group values, in reduce order.\n      function top(k) {\n        var top = select(all(), 0, groups.length, k);\n        return heap.sort(top, 0, top.length);\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce values, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Sets the reduce order, using the specified accessor.\n      function order(value) {\n        select = heapselect_by(valueOf);\n        heap = heap_by(valueOf);\n        function valueOf(d) { return value(d.value); }\n        return group;\n      }\n\n      // A convenience method for natural ordering by reduce value.\n      function orderNatural() {\n        return order(crossfilter_identity);\n      }\n\n      // Returns the cardinality of this group, irrespective of any filters.\n      function size() {\n        return k;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i, 1);\n        i = indexListeners.indexOf(add);\n        if (i >= 0) indexListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        return group;\n      }\n\n      return reduceCount().orderNatural();\n    }\n\n    // A convenience function for generating a singleton group.\n    function groupAll() {\n      var g = group(crossfilter_null), all = g.all;\n      delete g.all;\n      delete g.top;\n      delete g.order;\n      delete g.orderNatural;\n      delete g.size;\n      g.value = function() { return all()[0].value; };\n      return g;\n    }\n\n    // Removes this dimension and associated groups and event listeners.\n    function dispose() {\n      dimensionGroups.forEach(function(group) { group.dispose(); });\n      var i = dataListeners.indexOf(preAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = dataListeners.indexOf(postAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = removeDataListeners.indexOf(removeData);\n      if (i >= 0) removeDataListeners.splice(i, 1);\n      m &= zero;\n      return filterAll();\n    }\n\n    return dimension;\n  }\n\n  // A convenience method for groupAll on a dummy dimension.\n  // This implementation can be optimized since it always has cardinality 1.\n  function groupAll() {\n    var group = {\n      reduce: reduce,\n      reduceCount: reduceCount,\n      reduceSum: reduceSum,\n      value: value,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var reduceValue,\n        reduceAdd,\n        reduceRemove,\n        reduceInitial,\n        resetNeeded = true;\n\n    // The group listens to the crossfilter for when any dimension changes, so\n    // that it can update the reduce value. It must also listen to the parent\n    // dimension for when data is added.\n    filterListeners.push(update);\n    dataListeners.push(add);\n\n    // For consistency; actually a no-op since resetNeeded is true.\n    add(data, 0, n);\n\n    // Incorporates the specified new values into this group.\n    function add(newData, n0) {\n      var i;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = n0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Reduces the specified selected or deselected records.\n    function update(filterOne, added, removed) {\n      var i,\n          k,\n          n;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = 0, n = added.length; i < n; ++i) {\n        if (!filters[k = added[i]]) {\n          reduceValue = reduceAdd(reduceValue, data[k]);\n        }\n      }\n\n      // Remove the removed values.\n      for (i = 0, n = removed.length; i < n; ++i) {\n        if (filters[k = removed[i]] === filterOne) {\n          reduceValue = reduceRemove(reduceValue, data[k]);\n        }\n      }\n    }\n\n    // Recomputes the group reduce value from scratch.\n    function reset() {\n      var i;\n\n      reduceValue = reduceInitial();\n\n      for (i = 0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Sets the reduce behavior for this group to use the specified functions.\n    // This method lazily recomputes the reduce value, waiting until needed.\n    function reduce(add, remove, initial) {\n      reduceAdd = add;\n      reduceRemove = remove;\n      reduceInitial = initial;\n      resetNeeded = true;\n      return group;\n    }\n\n    // A convenience method for reducing by count.\n    function reduceCount() {\n      return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n    }\n\n    // A convenience method for reducing by sum(value).\n    function reduceSum(value) {\n      return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n    }\n\n    // Returns the computed reduce value.\n    function value() {\n      if (resetNeeded) reset(), resetNeeded = false;\n      return reduceValue;\n    }\n\n    // Removes this group and associated event listeners.\n    function dispose() {\n      var i = filterListeners.indexOf(update);\n      if (i >= 0) filterListeners.splice(i);\n      i = dataListeners.indexOf(add);\n      if (i >= 0) dataListeners.splice(i);\n      return group;\n    }\n\n    return reduceCount();\n  }\n\n  // Returns the number of records in this crossfilter, irrespective of any filters.\n  function size() {\n    return n;\n  }\n\n  return arguments.length\n      ? add(arguments[0])\n      : crossfilter;\n}\n\n// Returns an array of size n, big enough to store ids up to m.\nfunction crossfilter_index(n, m) {\n  return (m < 0x101\n      ? crossfilter_array8 : m < 0x10001\n      ? crossfilter_array16\n      : crossfilter_array32)(n);\n}\n\n// Constructs a new array of size n, with sequential values from 0 to n - 1.\nfunction crossfilter_range(n) {\n  var range = crossfilter_index(n, n);\n  for (var i = -1; ++i < n;) range[i] = i;\n  return range;\n}\n\nfunction crossfilter_capacity(w) {\n  return w === 8\n      ? 0x100 : w === 16\n      ? 0x10000\n      : 0x100000000;\n}\n})(typeof exports !== 'undefined' && exports || this);\n\n\n/***/ }),\n\n/***/ 290:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(291);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = __webpack_require__(263)(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../css-loader/index.js??ref--1-oneOf-2-2!../postcss-loader/lib/index.js??postcss!./dc.css\", function() {\n\t\t\tvar newContent = require(\"!!../css-loader/index.js??ref--1-oneOf-2-2!../postcss-loader/lib/index.js??postcss!./dc.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n/***/ }),\n\n/***/ 291:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(262)(true);\n// imports\n\n\n// module\nexports.push([module.i, \".dc-chart path.dc-symbol,.dc-legend g.dc-legend-item.fadeout{fill-opacity:.5;stroke-opacity:.5}div.dc-chart{float:left}.dc-chart rect.bar{stroke:none;cursor:pointer}.dc-chart rect.bar:hover{fill-opacity:.5}.dc-chart rect.deselected{stroke:none;fill:#ccc}.dc-chart .pie-slice{fill:#fff;font-size:12px;cursor:pointer}.dc-chart .pie-slice.external{fill:#000}.dc-chart .pie-slice.highlight,.dc-chart .pie-slice :hover{fill-opacity:.8}.dc-chart .pie-path{fill:none;stroke-width:2px;stroke:#000;opacity:.4}.dc-chart .selected circle,.dc-chart .selected path{stroke-width:3;stroke:#ccc;fill-opacity:1}.dc-chart .deselected circle,.dc-chart .deselected path{stroke:none;fill-opacity:.5;fill:#ccc}.dc-chart .axis line,.dc-chart .axis path{fill:none;stroke:#000;shape-rendering:crispEdges}.dc-chart .axis text{font:10px sans-serif}.dc-chart .axis .grid-line,.dc-chart .axis .grid-line line,.dc-chart .grid-line,.dc-chart .grid-line line{fill:none;stroke:#ccc;opacity:.5;shape-rendering:crispEdges}.dc-chart .brush rect.background{z-index:-999}.dc-chart .brush rect.extent{fill:#4682b4;fill-opacity:.125}.dc-chart .brush .resize path{fill:#eee;stroke:#666}.dc-chart path.line{fill:none;stroke-width:1.5px}.dc-chart path.area{fill-opacity:.3;stroke:none}.dc-chart path.highlight{stroke-width:3;fill-opacity:1;stroke-opacity:1}.dc-chart g.state{cursor:pointer}.dc-chart g.state :hover{fill-opacity:.8}.dc-chart g.state path{stroke:#fff}.dc-chart g.deselected path{fill:gray}.dc-chart g.deselected text{display:none}.dc-chart g.row rect{fill-opacity:.8;cursor:pointer}.dc-chart g.row rect:hover{fill-opacity:.6}.dc-chart g.row text{fill:#fff;font-size:12px;cursor:pointer}.dc-chart g.dc-tooltip path{fill:none;stroke:gray;stroke-opacity:.8}.dc-chart g.county path{stroke:#fff;fill:none}.dc-chart g.debug rect{fill:#00f;fill-opacity:.2}.dc-chart g.axis text{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none}.dc-chart .node{font-size:.7em;cursor:pointer}.dc-chart .node :hover{fill-opacity:.8}.dc-chart .bubble{stroke:none;fill-opacity:.6}.dc-chart .highlight{fill-opacity:1;stroke-opacity:1}.dc-chart .fadeout{fill-opacity:.2;stroke-opacity:.2}.dc-chart .box text{font:10px sans-serif;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none}.dc-chart .box circle,.dc-chart .box line{fill:#fff}.dc-chart .box circle,.dc-chart .box line,.dc-chart .box rect{stroke:#000;stroke-width:1.5px}.dc-chart .box .center{stroke-dasharray:3,3}.dc-chart .box .outlier{fill:none;stroke:#ccc}.dc-chart .box.deselected{opacity:.5}.dc-chart .box.deselected .box{fill:#ccc}.dc-chart .symbol{stroke:none}.dc-chart .heatmap .box-group.deselected rect{stroke:none;fill-opacity:.5;fill:#ccc}.dc-chart .heatmap g.axis text{pointer-events:all;cursor:pointer}.dc-chart .empty-chart .pie-slice{cursor:default}.dc-chart .empty-chart .pie-slice path{fill:#fee;cursor:default}.dc-chart circle.dot{stroke:none}.dc-data-count{float:right;margin-top:15px;margin-right:15px}.dc-data-count .filter-count,.dc-data-count .total-count{color:#3182bd;font-weight:700}.dc-legend{font-size:11px}.dc-legend .dc-legend-item{cursor:pointer}.dc-hard .number-display{float:none}\", \"\", {\"version\":3,\"sources\":[\"D:/projects/personal-blog/node_modules/dc/dc.css\"],\"names\":[],\"mappings\":\"AAAA,6DACE,gBAAkB,AAClB,iBAAoB,CAAE,AAExB,aACE,UAAY,CAAE,AAEhB,mBACE,YAAa,AACb,cAAgB,CAAE,AAClB,yBACE,eAAiB,CAAE,AAEvB,0BACE,YAAa,AACb,SAAW,CAAE,AAEf,qBACE,UAAW,AACX,eAAgB,AAChB,cAAgB,CAAE,AAClB,8BACE,SAAW,CAAE,AACf,2DACE,eAAiB,CAAE,AAEvB,oBACE,UAAW,AACX,iBAAkB,AAClB,YAAa,AACb,UAAa,CAAE,AAEjB,oDACE,eAAgB,AAChB,YAAa,AACb,cAAgB,CAAE,AAEpB,wDACE,YAAa,AACb,gBAAiB,AACjB,SAAW,CAAE,AAEf,0CACE,UAAW,AACX,YAAa,AACb,0BAA4B,CAAE,AAEhC,qBACE,oBAAsB,CAAE,AAE1B,0GACE,UAAW,AACX,YAAa,AACb,WAAY,AACZ,0BAA4B,CAAE,AAEhC,iCACE,YAAc,CAAE,AAElB,6BACE,aAAc,AACd,iBAAmB,CAAE,AAEvB,8BACE,UAAW,AACX,WAAa,CAAE,AAEjB,oBACE,UAAW,AACX,kBAAoB,CAAE,AAExB,oBACE,gBAAiB,AACjB,WAAa,CAAE,AAEjB,yBACE,eAAgB,AAChB,eAAgB,AAChB,gBAAkB,CAAE,AAEtB,kBACE,cAAgB,CAAE,AAClB,yBACE,eAAiB,CAAE,AACrB,uBACE,WAAa,CAAE,AAEnB,4BACE,SAAc,CAAE,AAElB,4BACE,YAAc,CAAE,AAElB,qBACE,gBAAkB,AAClB,cAAgB,CAAE,AAClB,2BACE,eAAkB,CAAE,AAExB,qBACE,UAAW,AACX,eAAgB,AAChB,cAAgB,CAAE,AAEpB,4BACE,UAAW,AACX,YAAgB,AAChB,iBAAmB,CAAE,AAEvB,wBACE,YAAa,AACb,SAAW,CAAE,AAEf,uBACE,UAAW,AACX,eAAiB,CAAE,AAErB,sBACE,2BAA4B,AAC5B,yBAA0B,AAC1B,sBAAuB,AACvB,qBAAsB,AACtB,iBAAkB,AAClB,mBAAqB,CAAE,AAEzB,gBACE,eAAiB,AACjB,cAAgB,CAAE,AAClB,uBACE,eAAiB,CAAE,AAEvB,kBACE,YAAa,AACb,eAAkB,CAAE,AAEtB,qBACE,eAAgB,AAChB,gBAAkB,CAAE,AAEtB,mBACE,gBAAkB,AAClB,iBAAoB,CAAE,AAExB,oBACE,qBAAsB,AACtB,2BAA4B,AAC5B,yBAA0B,AAC1B,sBAAuB,AACvB,qBAAsB,AACtB,iBAAkB,AAClB,mBAAqB,CAAE,AAEzB,0CACE,SAAW,CAAE,AAEf,8DACE,YAAa,AACb,kBAAoB,CAAE,AAExB,uBACE,oBAAuB,CAAE,AAE3B,wBACE,UAAW,AACX,WAAa,CAAE,AAEjB,0BACE,UAAa,CAAE,AACf,+BACE,SAAW,CAAE,AAEjB,kBACE,WAAa,CAAE,AAEjB,8CACE,YAAa,AACb,gBAAkB,AAClB,SAAW,CAAE,AAEf,+BACE,mBAAoB,AACpB,cAAgB,CAAE,AAEpB,kCACE,cAAgB,CAAE,AAClB,uCACE,UAAW,AACX,cAAgB,CAAE,AAEtB,qBACE,WAAa,CAAE,AAEjB,eACE,YAAa,AACb,gBAAiB,AACjB,iBAAmB,CAAE,AACrB,yDACE,cAAe,AACf,eAAkB,CAAE,AAExB,WACE,cAAgB,CAAE,AAClB,2BACE,cAAgB,CAAE,AAEtB,yBACE,UAAY,CAAE\",\"file\":\"dc.css\",\"sourcesContent\":[\".dc-chart path.dc-symbol, .dc-legend g.dc-legend-item.fadeout {\\n  fill-opacity: 0.5;\\n  stroke-opacity: 0.5; }\\n\\ndiv.dc-chart {\\n  float: left; }\\n\\n.dc-chart rect.bar {\\n  stroke: none;\\n  cursor: pointer; }\\n  .dc-chart rect.bar:hover {\\n    fill-opacity: .5; }\\n\\n.dc-chart rect.deselected {\\n  stroke: none;\\n  fill: #ccc; }\\n\\n.dc-chart .pie-slice {\\n  fill: #fff;\\n  font-size: 12px;\\n  cursor: pointer; }\\n  .dc-chart .pie-slice.external {\\n    fill: #000; }\\n  .dc-chart .pie-slice :hover, .dc-chart .pie-slice.highlight {\\n    fill-opacity: .8; }\\n\\n.dc-chart .pie-path {\\n  fill: none;\\n  stroke-width: 2px;\\n  stroke: #000;\\n  opacity: 0.4; }\\n\\n.dc-chart .selected path, .dc-chart .selected circle {\\n  stroke-width: 3;\\n  stroke: #ccc;\\n  fill-opacity: 1; }\\n\\n.dc-chart .deselected path, .dc-chart .deselected circle {\\n  stroke: none;\\n  fill-opacity: .5;\\n  fill: #ccc; }\\n\\n.dc-chart .axis path, .dc-chart .axis line {\\n  fill: none;\\n  stroke: #000;\\n  shape-rendering: crispEdges; }\\n\\n.dc-chart .axis text {\\n  font: 10px sans-serif; }\\n\\n.dc-chart .grid-line, .dc-chart .axis .grid-line, .dc-chart .grid-line line, .dc-chart .axis .grid-line line {\\n  fill: none;\\n  stroke: #ccc;\\n  opacity: .5;\\n  shape-rendering: crispEdges; }\\n\\n.dc-chart .brush rect.background {\\n  z-index: -999; }\\n\\n.dc-chart .brush rect.extent {\\n  fill: #4682b4;\\n  fill-opacity: .125; }\\n\\n.dc-chart .brush .resize path {\\n  fill: #eee;\\n  stroke: #666; }\\n\\n.dc-chart path.line {\\n  fill: none;\\n  stroke-width: 1.5px; }\\n\\n.dc-chart path.area {\\n  fill-opacity: .3;\\n  stroke: none; }\\n\\n.dc-chart path.highlight {\\n  stroke-width: 3;\\n  fill-opacity: 1;\\n  stroke-opacity: 1; }\\n\\n.dc-chart g.state {\\n  cursor: pointer; }\\n  .dc-chart g.state :hover {\\n    fill-opacity: .8; }\\n  .dc-chart g.state path {\\n    stroke: #fff; }\\n\\n.dc-chart g.deselected path {\\n  fill: #808080; }\\n\\n.dc-chart g.deselected text {\\n  display: none; }\\n\\n.dc-chart g.row rect {\\n  fill-opacity: 0.8;\\n  cursor: pointer; }\\n  .dc-chart g.row rect:hover {\\n    fill-opacity: 0.6; }\\n\\n.dc-chart g.row text {\\n  fill: #fff;\\n  font-size: 12px;\\n  cursor: pointer; }\\n\\n.dc-chart g.dc-tooltip path {\\n  fill: none;\\n  stroke: #808080;\\n  stroke-opacity: .8; }\\n\\n.dc-chart g.county path {\\n  stroke: #fff;\\n  fill: none; }\\n\\n.dc-chart g.debug rect {\\n  fill: #00f;\\n  fill-opacity: .2; }\\n\\n.dc-chart g.axis text {\\n  -webkit-touch-callout: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n  pointer-events: none; }\\n\\n.dc-chart .node {\\n  font-size: 0.7em;\\n  cursor: pointer; }\\n  .dc-chart .node :hover {\\n    fill-opacity: .8; }\\n\\n.dc-chart .bubble {\\n  stroke: none;\\n  fill-opacity: 0.6; }\\n\\n.dc-chart .highlight {\\n  fill-opacity: 1;\\n  stroke-opacity: 1; }\\n\\n.dc-chart .fadeout {\\n  fill-opacity: 0.2;\\n  stroke-opacity: 0.2; }\\n\\n.dc-chart .box text {\\n  font: 10px sans-serif;\\n  -webkit-touch-callout: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n  pointer-events: none; }\\n\\n.dc-chart .box line, .dc-chart .box circle {\\n  fill: #fff; }\\n\\n.dc-chart .box rect, .dc-chart .box line, .dc-chart .box circle {\\n  stroke: #000;\\n  stroke-width: 1.5px; }\\n\\n.dc-chart .box .center {\\n  stroke-dasharray: 3, 3; }\\n\\n.dc-chart .box .outlier {\\n  fill: none;\\n  stroke: #ccc; }\\n\\n.dc-chart .box.deselected {\\n  opacity: 0.5; }\\n  .dc-chart .box.deselected .box {\\n    fill: #ccc; }\\n\\n.dc-chart .symbol {\\n  stroke: none; }\\n\\n.dc-chart .heatmap .box-group.deselected rect {\\n  stroke: none;\\n  fill-opacity: 0.5;\\n  fill: #ccc; }\\n\\n.dc-chart .heatmap g.axis text {\\n  pointer-events: all;\\n  cursor: pointer; }\\n\\n.dc-chart .empty-chart .pie-slice {\\n  cursor: default; }\\n  .dc-chart .empty-chart .pie-slice path {\\n    fill: #fee;\\n    cursor: default; }\\n\\n.dc-chart circle.dot {\\n  stroke: none; }\\n\\n.dc-data-count {\\n  float: right;\\n  margin-top: 15px;\\n  margin-right: 15px; }\\n  .dc-data-count .filter-count, .dc-data-count .total-count {\\n    color: #3182bd;\\n    font-weight: bold; }\\n\\n.dc-legend {\\n  font-size: 11px; }\\n  .dc-legend .dc-legend-item {\\n    cursor: pointer; }\\n\\n.dc-hard .number-display {\\n  float: none; }\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 292:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(293);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = __webpack_require__(263)(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js??ref--1-oneOf-2-2!../../node_modules/postcss-loader/lib/index.js??postcss!./chart.css\", function() {\n\t\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js??ref--1-oneOf-2-2!../../node_modules/postcss-loader/lib/index.js??postcss!./chart.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n/***/ }),\n\n/***/ 293:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(262)(true);\n// imports\n\n\n// module\nexports.push([module.i, \"div.dc-chart{float:none;background-color:#b5bdc5}.dc-chart .pie-slice,.dc-chart g.row text{fill:#000}button.reset.btn.btn-sm{font-size:.5em;padding:0 .5em;border-radius:1em;cursor:pointer}.dc-chart legend{position:relative;padding:0 1rem;border-bottom:1px solid #4e5d6c;color:#2b3e50}.dc-chart legend .reset{position:absolute;right:1rem;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%)}\", \"\", {\"version\":3,\"sources\":[\"D:/projects/personal-blog/src/components/chart.css\"],\"names\":[],\"mappings\":\"AAAA,aACE,WAAY,AACZ,wBAA0B,CAC3B,AAED,0CAEE,SAAY,CACb,AAED,wBACE,eAAiB,AACjB,eAAiB,AACjB,kBAAmB,AACnB,cAAgB,CACjB,AAED,iBACE,kBAAmB,AACnB,eAAgB,AAChB,gCAAiC,AACjC,aAAe,CAChB,AAED,wBACE,kBAAmB,AACnB,WAAY,AACZ,QAAS,AACT,mCAAoC,AAChC,+BAAgC,AAC5B,0BAA4B,CACrC\",\"file\":\"chart.css\",\"sourcesContent\":[\"div.dc-chart {\\r\\n  float: none;\\r\\n  background-color: #b5bdc5;\\r\\n}\\r\\n\\r\\n.dc-chart g.row text,\\r\\n.dc-chart .pie-slice {\\r\\n  fill: black;\\r\\n}\\r\\n\\r\\nbutton.reset.btn.btn-sm {\\r\\n  font-size: 0.5em;\\r\\n  padding: 0 0.5em;\\r\\n  border-radius: 1em;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.dc-chart legend {\\r\\n  position: relative;\\r\\n  padding: 0 1rem;\\r\\n  border-bottom: 1px solid #4e5d6c;\\r\\n  color: #2b3e50;\\r\\n}\\r\\n\\r\\n.dc-chart legend .reset {\\r\\n  position: absolute;\\r\\n  right: 1rem;\\r\\n  top: 50%;\\r\\n  -webkit-transform: translateY(-50%);\\r\\n      -ms-transform: translateY(-50%);\\r\\n          transform: translateY(-50%);\\r\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/visualisation.35d781b7.chunk.js","/* eslint import/no-webpack-loader-syntax: off */\r\nimport React, { PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport crossfilter from \"crossfilter2\";\r\nimport dc from \"expose-loader?dc!dc\";\r\nimport Loading from \"react-loading-animation\";\r\n\r\nimport \"dc/dc.css\";\r\nimport \"./chart.css\";\r\n\r\nconst Vis = (data, Charts) => {\r\n  return class Visualisation extends PureComponent {\r\n    constructor() {\r\n      super();\r\n\r\n      this.state = { loading: true };\r\n      this.ndx = {};\r\n      this.resize = this.resize.bind(this);\r\n    }\r\n\r\n    static childContextTypes = {\r\n      ndx: PropTypes.object.isRequired\r\n    };\r\n\r\n    componentDidMount() {\r\n      console.time(\"ndx\");\r\n      this.ndx = crossfilter(data);\r\n      console.timeEnd(\"ndx\");\r\n      this.setState({ loading: false });\r\n      window.addEventListener(\"resize\", this.resize);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      window.removeEventListener(\"resize\", this.resize);\r\n    }\r\n\r\n    getChildContext() {\r\n      return { ndx: this.ndx };\r\n    }\r\n\r\n    resize() {\r\n      // TODO: maybe throttle this\r\n      dc.disableTransitions = true;\r\n      dc.renderAll();\r\n      dc.disableTransitions = false;\r\n    }\r\n\r\n    render() {\r\n      if (this.state.loading) {\r\n        return <Loading width=\"300px\" height=\"300px\" />;\r\n      } else {\r\n        return <Charts />;\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport default Vis;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Visualisation.jsx","'use strict';\n\nfunction crossfilter_identity(d) {\n  return d;\n}\n\nmodule.exports = crossfilter_identity;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/identity.js\n// module id = 269\n// module chunks = 0","'use strict';\n\nvar crossfilter_identity = require('./identity');\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\n\nmodule.exports = heap_by(crossfilter_identity);\nmodule.exports.by = heap_by;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/heap.js\n// module id = 270\n// module chunks = 0","'use strict';\n\nvar crossfilter_identity = require('./identity');\n\nfunction insertionsort_by(f) {\n\n  function insertionsort(a, lo, hi) {\n    for (var i = lo + 1; i < hi; ++i) {\n      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n        a[j] = a[j - 1];\n      }\n      a[j] = t;\n    }\n    return a;\n  }\n\n  return insertionsort;\n}\n\nmodule.exports = insertionsort_by(crossfilter_identity);\nmodule.exports.by = insertionsort_by;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/insertionsort.js\n// module id = 271\n// module chunks = 0","module.exports = require(\"./src/crossfilter\").crossfilter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/index.js\n// module id = 272\n// module chunks = 0","'use strict';\n\nvar xfilterArray = require('./array');\nvar xfilterFilter = require('./filter');\nvar crossfilter_identity = require('./identity');\nvar crossfilter_null = require('./null');\nvar crossfilter_zero = require('./zero');\nvar xfilterHeapselect = require('./heapselect');\nvar xfilterHeap = require('./heap');\nvar bisect = require('./bisect');\nvar insertionsort = require('./insertionsort');\nvar permute = require('./permute');\nvar quicksort = require('./quicksort');\nvar xfilterReduce = require('./reduce');\nvar packageJson = require('./../package.json'); // require own package.json for the version field\nvar result = require('lodash.result');\n// expose API exports\nexports.crossfilter = crossfilter;\nexports.crossfilter.heap = xfilterHeap;\nexports.crossfilter.heapselect = xfilterHeapselect;\nexports.crossfilter.bisect = bisect;\nexports.crossfilter.insertionsort = insertionsort;\nexports.crossfilter.permute = permute;\nexports.crossfilter.quicksort = quicksort;\nexports.crossfilter.version = packageJson.version; // please note use of \"package-json-versionify\" transform\n\nfunction crossfilter() {\n  var crossfilter = {\n    add: add,\n    remove: removeData,\n    dimension: dimension,\n    groupAll: groupAll,\n    size: size,\n    all: all,\n    allFiltered: allFiltered,\n    onChange: onChange,\n    isElementFiltered: isElementFiltered\n  };\n\n  var data = [], // the records\n      n = 0, // the number of records; data.length\n      filters, // 1 is filtered out\n      filterListeners = [], // when the filters change\n      dataListeners = [], // when data is added\n      removeDataListeners = [], // when data is removed\n      callbacks = [];\n\n  filters = new xfilterArray.bitarray(0);\n\n  // Adds the specified new records to this crossfilter.\n  function add(newData) {\n    var n0 = n,\n        n1 = newData.length;\n\n    // If there's actually new data to add…\n    // Merge the new data into the existing data.\n    // Lengthen the filter bitset to handle the new records.\n    // Notify listeners (dimensions and groups) that new data is available.\n    if (n1) {\n      data = data.concat(newData);\n      filters.lengthen(n += n1);\n      dataListeners.forEach(function(l) { l(newData, n0, n1); });\n      triggerOnChange('dataAdded');\n    }\n\n    return crossfilter;\n  }\n\n  // Removes all records that match the current filters.\n  function removeData() {\n    var newIndex = crossfilter_index(n, n),\n        removed = [];\n\n    for (var index1 = 0, index2 = 0; index1 < n; ++index1) {\n      if (!filters.zero(index1)) newIndex[index1] = index2++;\n      else removed.push(index1);\n    }\n\n    // Remove all matching records from groups.\n    filterListeners.forEach(function(l) { l(-1, -1, [], removed, true); });\n\n    // Update indexes.\n    removeDataListeners.forEach(function(l) { l(newIndex); });\n\n    // Remove old filters and data by overwriting.\n    for (var index3 = 0, index4 = 0; index3 < n; ++index3) {\n      if (!filters.zero(index3)) {\n        if (index3 !== index4) filters.copy(index4, index3), data[index4] = data[index3];\n        ++index4;\n      }\n    }\n\n    data.length = n = index4;\n    filters.truncate(index4);\n    triggerOnChange('dataRemoved');\n  }\n\n  // Return true if the data element at index i is filtered IN.\n  // Optionally, ignore the filters of any dimensions in the ignore_dimensions list.\n  function isElementFiltered(i, ignore_dimensions) {\n    var n,\n        d,\n        id,\n        len,\n        mask = Array(filters.subarrays);\n    for (n = 0; n < filters.subarrays; n++) { mask[n] = ~0; }\n    if (ignore_dimensions) {\n      for (d = 0, len = ignore_dimensions.length; d < len; d++) {\n        // The top bits of the ID are the subarray offset and the lower bits are the bit\n        // offset of the \"one\" mask.\n        id = ignore_dimensions[d].id();\n        mask[id >> 7] &= ~(0x1 << (id & 0x3f));\n      }\n    }\n    return filters.zeroExceptMask(i,mask);\n  }\n\n  // Adds a new dimension with the specified value accessor function.\n  function dimension(value, iterable) {\n\n    if (typeof value === 'string') {\n      var accessorPath = value;\n      value = function(d) { return result(d, accessorPath); };\n    }\n\n    var dimension = {\n      filter: filter,\n      filterExact: filterExact,\n      filterRange: filterRange,\n      filterFunction: filterFunction,\n      filterAll: filterAll,\n      top: top,\n      bottom: bottom,\n      group: group,\n      groupAll: groupAll,\n      dispose: dispose,\n      remove: dispose, // for backwards-compatibility\n      accessor: value,\n      id: function() { return id; }\n    };\n\n    var one, // lowest unset bit as mask, e.g., 00001000\n        zero, // inverted one, e.g., 11110111\n        offset, // offset into the filters arrays\n        id, // unique ID for this dimension (reused when dimensions are disposed)\n        values, // sorted, cached array\n        index, // value rank ↦ object id\n        newValues, // temporary array storing newly-added values\n        newIndex, // temporary array storing newly-added index\n        iterablesIndexCount,\n        newIterablesIndexCount,\n        iterablesIndexFilterStatus,\n        newIterablesIndexFilterStatus,\n        iterablesEmptyRows = [],\n        sort = quicksort.by(function(i) { return newValues[i]; }),\n        refilter = xfilterFilter.filterAll, // for recomputing filter\n        refilterFunction, // the custom filter function in use\n        indexListeners = [], // when data is added\n        dimensionGroups = [],\n        lo0 = 0,\n        hi0 = 0,\n        t = 0,\n        k;\n\n    // Updating a dimension is a two-stage process. First, we must update the\n    // associated filters for the newly-added records. Once all dimensions have\n    // updated their filters, the groups are notified to update.\n    dataListeners.unshift(preAdd);\n    dataListeners.push(postAdd);\n\n    removeDataListeners.push(removeData);\n\n    // Add a new dimension in the filter bitmap and store the offset and bitmask.\n    var tmp = filters.add();\n    offset = tmp.offset;\n    one = tmp.one;\n    zero = ~one;\n\n    // Create a unique ID for the dimension\n    // IDs will be re-used if dimensions are disposed.\n    // For internal use the ID is the subarray offset shifted left 7 bits or'd with the\n    // bit offset of the set bit in the dimension's \"one\" mask.\n    id = (offset << 7) | (Math.log(one) / Math.log(2));\n\n    preAdd(data, 0, n);\n    postAdd(data, 0, n);\n\n    // Incorporates the specified new records into this dimension.\n    // This function is responsible for updating filters, values, and index.\n    function preAdd(newData, n0, n1) {\n\n      if (iterable){\n        // Count all the values\n        t = 0;\n        j = 0;\n        k = [];\n\n        for (var i0 = 0; i0 < newData.length; i0++) {\n          for(j = 0, k = value(newData[i0]); j < k.length; j++) {\n            t++;\n          }\n        }\n\n        newValues = [];\n        newIterablesIndexCount = crossfilter_range(newData.length);\n        newIterablesIndexFilterStatus = crossfilter_index(t,1);\n        var unsortedIndex = crossfilter_range(t);\n\n        for (var l = 0, index1 = 0; index1 < newData.length; index1++) {\n          k = value(newData[index1])\n          //\n          if(!k.length){\n            newIterablesIndexCount[index1] = 0;\n            iterablesEmptyRows.push(index1 + n0);\n            continue;\n          }\n          newIterablesIndexCount[index1] = k.length\n          for (j = 0; j < k.length; j++) {\n            newValues.push(k[j]);\n            unsortedIndex[l] = index1;\n            l++;\n          }\n        }\n\n        // Create the Sort map used to sort both the values and the valueToData indices\n        var sortMap = sort(crossfilter_range(t), 0, t);\n\n        // Use the sortMap to sort the newValues\n        newValues = permute(newValues, sortMap);\n\n\n        // Use the sortMap to sort the unsortedIndex map\n        // newIndex should be a map of sortedValue -> crossfilterData\n        newIndex = permute(unsortedIndex, sortMap)\n\n      } else{\n        // Permute new values into natural order using a standard sorted index.\n        newValues = newData.map(value);\n        newIndex = sort(crossfilter_range(n1), 0, n1);\n        newValues = permute(newValues, newIndex);\n      }\n\n      if(iterable) {\n        n1 = t;\n      }\n\n      // Bisect newValues to determine which new records are selected.\n      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1];\n      if (refilterFunction) {\n        for (var index2 = 0; index2 < n1; ++index2) {\n          if (!refilterFunction(newValues[index2], index2)) {\n            filters[offset][newIndex[index2] + n0] |= one;\n            if(iterable) newIterablesIndexFilterStatus[index2] = 1;\n          }\n        }\n      } else {\n        for (var index3 = 0; index3 < lo1; ++index3) {\n          filters[offset][newIndex[index3] + n0] |= one;\n          if(iterable) newIterablesIndexFilterStatus[index3] = 1;\n        }\n        for (var index4 = hi1; index4 < n1; ++index4) {\n          filters[offset][newIndex[index4] + n0] |= one;\n          if(iterable) newIterablesIndexFilterStatus[index4] = 1;\n        }\n      }\n\n      // If this dimension previously had no data, then we don't need to do the\n      // more expensive merge operation; use the new values and index as-is.\n      if (!n0) {\n        values = newValues;\n        index = newIndex;\n        iterablesIndexCount = newIterablesIndexCount;\n        iterablesIndexFilterStatus = newIterablesIndexFilterStatus;\n        lo0 = lo1;\n        hi0 = hi1;\n        return;\n      }\n\n\n\n      var oldValues = values,\n        oldIndex = index,\n        oldIterablesIndexFilterStatus = iterablesIndexFilterStatus,\n        old_n0,\n        i1 = 0;\n\n      i0 = 0;\n\n      if(iterable){\n        old_n0 = n0\n        n0 = oldValues.length;\n        n1 = t\n      }\n\n      // Otherwise, create new arrays into which to merge new and old.\n      values = iterable ? new Array(n0 + n1) : new Array(n);\n      index = iterable ? new Array(n0 + n1) : crossfilter_index(n, n);\n      if(iterable) iterablesIndexFilterStatus = crossfilter_index(n0 + n1, 1);\n\n      // Concatenate the newIterablesIndexCount onto the old one.\n      if(iterable) {\n        var oldiiclength = iterablesIndexCount.length;\n        iterablesIndexCount = xfilterArray.arrayLengthen(iterablesIndexCount, n);\n        for(var j=0; j+oldiiclength < n; j++) {\n          iterablesIndexCount[j+oldiiclength] = newIterablesIndexCount[j];\n        }\n      }\n\n      // Merge the old and new sorted values, and old and new index.\n      var index5 = 0;\n      for (; i0 < n0 && i1 < n1; ++index5) {\n        if (oldValues[i0] < newValues[i1]) {\n          values[index5] = oldValues[i0];\n          if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];\n          index[index5] = oldIndex[i0++];\n        } else {\n          values[index5] = newValues[i1];\n          if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];\n          index[index5] = newIndex[i1++] + (iterable ? old_n0 : n0);\n        }\n      }\n\n      // Add any remaining old values.\n      for (; i0 < n0; ++i0, ++index5) {\n        values[index5] = oldValues[i0];\n        if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];\n        index[index5] = oldIndex[i0];\n      }\n\n      // Add any remaining new values.\n      for (; i1 < n1; ++i1, ++index5) {\n        values[index5] = newValues[i1];\n        if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];\n        index[index5] = newIndex[i1] + (iterable ? old_n0 : n0);\n      }\n\n      // Bisect again to recompute lo0 and hi0.\n      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // When all filters have updated, notify index listeners of the new values.\n    function postAdd(newData, n0, n1) {\n      indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\n      newValues = newIndex = null;\n    }\n\n    function removeData(reIndex) {\n      for (var i = 0, j = 0, k; i < n; ++i) {\n        if (!filters.zero(k = index[i])) {\n          if (i !== j) values[j] = values[i];\n          index[j] = reIndex[k];\n          ++j;\n        }\n      }\n      values.length = j;\n      while (j < n) index[j++] = 0;\n\n      // Bisect again to recompute lo0 and hi0.\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // Updates the selected values based on the specified bounds [lo, hi].\n    // This implementation is used by all the public filter methods.\n    function filterIndexBounds(bounds) {\n\n      var lo1 = bounds[0],\n          hi1 = bounds[1];\n\n      if (refilterFunction) {\n        refilterFunction = null;\n        filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; }, bounds[0] === 0 && bounds[1] === index.length);\n        lo0 = lo1;\n        hi0 = hi1;\n        return dimension;\n      }\n\n      var i,\n          j,\n          k,\n          added = [],\n          removed = [],\n          valueIndexAdded = [],\n          valueIndexRemoved = [];\n\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          added.push(index[i]);\n          valueIndexAdded.push(i);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          removed.push(index[i]);\n          valueIndexRemoved.push(i);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          added.push(index[i]);\n          valueIndexAdded.push(i);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          removed.push(index[i]);\n          valueIndexRemoved.push(i);\n        }\n      }\n\n      if(!iterable) {\n        // Flip filters normally.\n\n        for(i=0; i<added.length; i++) {\n          filters[offset][added[i]] ^= one;\n        }\n\n        for(i=0; i<removed.length; i++) {\n          filters[offset][removed[i]] ^= one;\n        }\n\n      } else {\n        // For iterables, we need to figure out if the row has been completely removed vs partially included\n        // Only count a row as added if it is not already being aggregated. Only count a row\n        // as removed if the last element being aggregated is removed.\n\n        var newAdded = [];\n        var newRemoved = [];\n        for (i = 0; i < added.length; i++) {\n          iterablesIndexCount[added[i]]++\n          iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;\n          if(iterablesIndexCount[added[i]] === 1) {\n            filters[offset][added[i]] ^= one;\n            newAdded.push(added[i]);\n          }\n        }\n        for (i = 0; i < removed.length; i++) {\n          iterablesIndexCount[removed[i]]--\n          iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;\n          if(iterablesIndexCount[removed[i]] === 0) {\n            filters[offset][removed[i]] ^= one;\n            newRemoved.push(removed[i]);\n          }\n        }\n\n        added = newAdded;\n        removed = newRemoved;\n\n        // Now handle empty rows.\n        if(bounds[0] === 0 && bounds[1] === index.length) {\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if((filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was not in the filter, so set the filter and add\n              filters[offset][k] ^= one;\n              added.push(k);\n            }\n          }\n        } else {\n          // filter in place - remove empty rows if necessary\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was in the filter, so set the filter and remove\n              filters[offset][k] ^= one;\n              removed.push(k);\n            }\n          }\n        }\n      }\n\n      lo0 = lo1;\n      hi0 = hi1;\n      filterListeners.forEach(function(l) { l(one, offset, added, removed); });\n      triggerOnChange('filtered');\n      return dimension;\n    }\n\n    // Filters this dimension using the specified range, value, or null.\n    // If the range is null, this is equivalent to filterAll.\n    // If the range is an array, this is equivalent to filterRange.\n    // Otherwise, this is equivalent to filterExact.\n    function filter(range) {\n      return range == null\n          ? filterAll() : Array.isArray(range)\n          ? filterRange(range) : typeof range === \"function\"\n          ? filterFunction(range)\n          : filterExact(range);\n    }\n\n    // Filters this dimension to select the exact value.\n    function filterExact(value) {\n      return filterIndexBounds((refilter = xfilterFilter.filterExact(bisect, value))(values));\n    }\n\n    // Filters this dimension to select the specified range [lo, hi].\n    // The lower bound is inclusive, and the upper bound is exclusive.\n    function filterRange(range) {\n      return filterIndexBounds((refilter = xfilterFilter.filterRange(bisect, range))(values));\n    }\n\n    // Clears any filters on this dimension.\n    function filterAll() {\n      return filterIndexBounds((refilter = xfilterFilter.filterAll)(values));\n    }\n\n    // Filters this dimension using an arbitrary function.\n    function filterFunction(f) {\n      refilterFunction = f;\n      refilter = xfilterFilter.filterAll;\n\n      filterIndexFunction(f, false);\n\n      lo0 = 0;\n      hi0 = n;\n\n      return dimension;\n    }\n\n    function filterIndexFunction(f, filterAll) {\n      var i,\n          k,\n          x,\n          added = [],\n          removed = [],\n          valueIndexAdded = [],\n          valueIndexRemoved = [],\n          indexLength = index.length;\n\n      if(!iterable) {\n        for (i = 0; i < indexLength; ++i) {\n          if (!(filters[offset][k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n            if (x) added.push(k);\n            else removed.push(k);\n          }\n        }\n      }\n\n      if(iterable) {\n        for(i=0; i < indexLength; ++i) {\n          if(f(values[i], i)) {\n            added.push(index[i]);\n            valueIndexAdded.push(i);\n          } else {\n            removed.push(index[i]);\n            valueIndexRemoved.push(i);\n          }\n        }\n      }\n\n      if(!iterable) {\n        for(i=0; i<added.length; i++) {\n          if(filters[offset][added[i]] & one) filters[offset][added[i]] &= zero;\n        }\n\n        for(i=0; i<removed.length; i++) {\n          if(!(filters[offset][removed[i]] & one)) filters[offset][removed[i]] |= one;\n        }\n      } else {\n\n        var newAdded = [];\n        var newRemoved = [];\n        for (i = 0; i < added.length; i++) {\n          // First check this particular value needs to be added\n          if(iterablesIndexFilterStatus[valueIndexAdded[i]] === 1) {\n            iterablesIndexCount[added[i]]++\n            iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;\n            if(iterablesIndexCount[added[i]] === 1) {\n              filters[offset][added[i]] ^= one;\n              newAdded.push(added[i]);\n            }\n          }\n        }\n        for (i = 0; i < removed.length; i++) {\n          // First check this particular value needs to be removed\n          if(iterablesIndexFilterStatus[valueIndexRemoved[i]] === 0) {\n            iterablesIndexCount[removed[i]]--\n            iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;\n            if(iterablesIndexCount[removed[i]] === 0) {\n              filters[offset][removed[i]] ^= one;\n              newRemoved.push(removed[i]);\n            }\n          }\n        }\n\n        added = newAdded;\n        removed = newRemoved;\n\n        // Now handle empty rows.\n        if(filterAll) {\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if((filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was not in the filter, so set the filter and add\n              filters[offset][k] ^= one;\n              added.push(k);\n            }\n          }\n        } else {\n          // filter in place - remove empty rows if necessary\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was in the filter, so set the filter and remove\n              filters[offset][k] ^= one;\n              removed.push(k);\n            }\n          }\n        }\n      }\n\n      filterListeners.forEach(function(l) { l(one, offset, added, removed); });\n      triggerOnChange('filtered');\n    }\n\n    // Returns the top K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function top(k, top_offset) {\n      var array = [],\n          i = hi0,\n          j,\n          toSkip = 0;\n\n      if(top_offset && top_offset > 0) toSkip = top_offset;\n\n      while (--i >= lo0 && k > 0) {\n        if (filters.zero(j = index[i])) {\n          if(toSkip > 0) {\n            //skip matching row\n            --toSkip;\n          } else {\n            array.push(data[j]);\n            --k;\n          }\n        }\n      }\n\n      if(iterable){\n        for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {\n          // Add row with empty iterable column at the end\n          if(filters.zero(j = iterablesEmptyRows[i])) {\n            if(toSkip > 0) {\n              //skip matching row\n              --toSkip;\n            } else {\n              array.push(data[j]);\n              --k;\n            }\n          }\n        }\n      }\n\n      return array;\n    }\n\n    // Returns the bottom K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function bottom(k, bottom_offset) {\n      var array = [],\n          i,\n          j,\n          toSkip = 0;\n\n      if(bottom_offset && bottom_offset > 0) toSkip = bottom_offset;\n\n      if(iterable) {\n        // Add row with empty iterable column at the top\n        for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {\n          if(filters.zero(j = iterablesEmptyRows[i])) {\n            if(toSkip > 0) {\n              //skip matching row\n              --toSkip;\n            } else {\n              array.push(data[j]);\n              --k;\n            }\n          }\n        }\n      }\n\n      i = lo0;\n\n      while (i < hi0 && k > 0) {\n        if (filters.zero(j = index[i])) {\n          if(toSkip > 0) {\n            //skip matching row\n            --toSkip;\n          } else {\n            array.push(data[j]);\n            --k;\n          }\n        }\n        i++;\n      }\n\n      return array;\n    }\n\n    // Adds a new group to this dimension, using the specified key function.\n    function group(key) {\n      var group = {\n        top: top,\n        all: all,\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        order: order,\n        orderNatural: orderNatural,\n        size: size,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      // Ensure that this group will be removed when the dimension is removed.\n      dimensionGroups.push(group);\n\n      var groups, // array of {key, value}\n          groupIndex, // object id ↦ group id\n          groupWidth = 8,\n          groupCapacity = crossfilter_capacity(groupWidth),\n          k = 0, // cardinality\n          select,\n          heap,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          update = crossfilter_null,\n          reset = crossfilter_null,\n          resetNeeded = true,\n          groupAll = key === crossfilter_null,\n          n0old;\n\n      if (arguments.length < 1) key = crossfilter_identity;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the associated reduce values. It must also listen to\n      // the parent dimension for when data is added, and compute new keys.\n      filterListeners.push(update);\n      indexListeners.push(add);\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into the grouping.\n      add(values, index, 0, n);\n\n      // Incorporates the specified new values into this group.\n      // This function is responsible for updating groups and groupIndex.\n      function add(newValues, newIndex, n0, n1) {\n\n        if(iterable) {\n          n0old = n0\n          n0 = values.length - newValues.length\n          n1 = newValues.length;\n        }\n\n        var oldGroups = groups,\n            reIndex = iterable ? [] : crossfilter_index(k, groupCapacity),\n            add = reduceAdd,\n            remove = reduceRemove,\n            initial = reduceInitial,\n            k0 = k, // old cardinality\n            i0 = 0, // index of old group\n            i1 = 0, // index of new record\n            j, // object id\n            g0, // old group\n            x0, // old key\n            x1, // new key\n            g, // group to add\n            x; // key of group to add\n\n        // If a reset is needed, we don't need to update the reduce values.\n        if (resetNeeded) add = initial = crossfilter_null;\n        if (resetNeeded) remove = initial = crossfilter_null;\n\n        // Reset the new groups (k is a lower bound).\n        // Also, make sure that groupIndex exists and is long enough.\n        groups = new Array(k), k = 0;\n        if(iterable){\n          groupIndex = k0 > 1 ? groupIndex : [];\n        }\n        else{\n          groupIndex = k0 > 1 ? xfilterArray.arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n        }\n\n\n        // Get the first old key (x0 of g0), if it exists.\n        if (k0) x0 = (g0 = oldGroups[0]).key;\n\n        // Find the first new key (x1), skipping NaN keys.\n        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\n\n        // While new keys remain…\n        while (i1 < n1) {\n\n          // Determine the lesser of the two current keys; new and old.\n          // If there are no old keys remaining, then always add the new key.\n          if (g0 && x0 <= x1) {\n            g = g0, x = x0;\n\n            // Record the new index of the old group.\n            reIndex[i0] = k;\n\n            // Retrieve the next old key.\n            g0 = oldGroups[++i0];\n            if (g0) x0 = g0.key;\n          } else {\n            g = {key: x1, value: initial()}, x = x1;\n          }\n\n          // Add the lesser group.\n          groups[k] = g;\n\n          // Add any selected records belonging to the added group, while\n          // advancing the new key and populating the associated group index.\n\n          while (x1 <= x) {\n            j = newIndex[i1] + (iterable ? n0old : n0)\n\n\n            if(iterable){\n              if(groupIndex[j]){\n                groupIndex[j].push(k)\n              }\n              else{\n                groupIndex[j] = [k]\n              }\n            }\n            else{\n              groupIndex[j] = k;\n            }\n\n            // Always add new values to groups. Only remove when not in filter.\n            // This gives groups full information on data life-cycle.\n            g.value = add(g.value, data[j], true);\n            if (!filters.zeroExcept(j, offset, zero)) g.value = remove(g.value, data[j], false);\n            if (++i1 >= n1) break;\n            x1 = key(newValues[i1]);\n          }\n\n          groupIncrement();\n        }\n\n        // Add any remaining old groups that were greater th1an all new keys.\n        // No incremental reduce is needed; these groups have no new records.\n        // Also record the new index of the old group.\n        while (i0 < k0) {\n          groups[reIndex[i0] = k] = oldGroups[i0++];\n          groupIncrement();\n        }\n\n\n        // Fill in gaps with empty arrays where there may have been rows with empty iterables\n        if(iterable){\n          for (var index1 = 0; index1 < n; index1++) {\n            if(!groupIndex[index1]){\n              groupIndex[index1] = [];\n            }\n          }\n        }\n\n        // If we added any new groups before any old groups,\n        // update the group index of all the old records.\n        if(k > i0){\n          if(iterable){\n            groupIndex = permute(groupIndex, reIndex, true)\n          }\n          else{\n            for (i0 = 0; i0 < n0; ++i0) {\n              groupIndex[i0] = reIndex[groupIndex[i0]];\n            }\n          }\n        }\n\n        // Modify the update and reset behavior based on the cardinality.\n        // If the cardinality is less than or equal to one, then the groupIndex\n        // is not needed. If the cardinality is zero, then there are no records\n        // and therefore no groups to update or reset. Note that we also must\n        // change the registered listener to point to the new method.\n        j = filterListeners.indexOf(update);\n        if (k > 1) {\n          update = updateMany;\n          reset = resetMany;\n        } else {\n          if (!k && groupAll) {\n            k = 1;\n            groups = [{key: null, value: initial()}];\n          }\n          if (k === 1) {\n            update = updateOne;\n            reset = resetOne;\n          } else {\n            update = crossfilter_null;\n            reset = crossfilter_null;\n          }\n          groupIndex = null;\n        }\n        filterListeners[j] = update;\n\n        // Count the number of added groups,\n        // and widen the group index as needed.\n        function groupIncrement() {\n          if(iterable){\n            k++\n            return\n          }\n          if (++k === groupCapacity) {\n            reIndex = xfilterArray.arrayWiden(reIndex, groupWidth <<= 1);\n            groupIndex = xfilterArray.arrayWiden(groupIndex, groupWidth);\n            groupCapacity = crossfilter_capacity(groupWidth);\n          }\n        }\n      }\n\n      function removeData() {\n        if (k > 1) {\n          var oldK = k,\n              oldGroups = groups,\n              seenGroups = crossfilter_index(oldK, oldK);\n\n          // Filter out non-matches by copying matching group index entries to\n          // the beginning of the array.\n          for (var i = 0, j = 0; i < n; ++i) {\n            if (!filters.zero(i)) {\n              seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n              ++j;\n            }\n          }\n\n          // Reassemble groups including only those groups that were referred\n          // to by matching group index entries.  Note the new group index in\n          // seenGroups.\n          groups = [], k = 0;\n          for (i = 0; i < oldK; ++i) {\n            if (seenGroups[i]) {\n              seenGroups[i] = k++;\n              groups.push(oldGroups[i]);\n            }\n          }\n\n          if (k > 1) {\n            // Reindex the group index using seenGroups to find the new index.\n            for (var index2 = 0; index2 < j; ++index2) groupIndex[index2] = seenGroups[groupIndex[index2]];\n          } else {\n            groupIndex = null;\n          }\n          filterListeners[filterListeners.indexOf(update)] = k > 1\n              ? (reset = resetMany, update = updateMany)\n              : k === 1 ? (reset = resetOne, update = updateOne)\n              : reset = update = crossfilter_null;\n        } else if (k === 1) {\n          if (groupAll) return;\n          for (var index3 = 0; index3 < n; ++index3) if (!filters.zero(index3)) return;\n          groups = [], k = 0;\n          filterListeners[filterListeners.indexOf(update)] =\n          update = reset = crossfilter_null;\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is greater than 1.\n      // notFilter indicates a crossfilter.add/remove operation.\n      function updateMany(filterOne, filterOffset, added, removed, notFilter) {\n\n        if ((filterOne === one && filterOffset === offset) || resetNeeded) return;\n\n        var i,\n            j,\n            k,\n            n,\n            g;\n\n        if(iterable){\n          // Add the added values.\n          for (i = 0, n = added.length; i < n; ++i) {\n            if (filters.zeroExcept(k = added[i], offset, zero)) {\n              for (j = 0; j < groupIndex[k].length; j++) {\n                g = groups[groupIndex[k][j]];\n                g.value = reduceAdd(g.value, data[k], false, j);\n              }\n            }\n          }\n\n          // Remove the removed values.\n          for (i = 0, n = removed.length; i < n; ++i) {\n            if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n              for (j = 0; j < groupIndex[k].length; j++) {\n                g = groups[groupIndex[k][j]];\n                g.value = reduceRemove(g.value, data[k], notFilter, j);\n              }\n            }\n          }\n          return;\n        }\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (filters.zeroExcept(k = added[i], offset, zero)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceAdd(g.value, data[k], false);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceRemove(g.value, data[k], notFilter);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is 1.\n      // notFilter indicates a crossfilter.add/remove operation.\n      function updateOne(filterOne, filterOffset, added, removed, notFilter) {\n        if ((filterOne === one && filterOffset === offset) || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g = groups[0];\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (filters.zeroExcept(k = added[i], offset, zero)) {\n            g.value = reduceAdd(g.value, data[k], false);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n            g.value = reduceRemove(g.value, data[k], notFilter);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is greater than 1.\n      function resetMany() {\n        var i,\n            j,\n            g;\n\n        // Reset all group values.\n        for (i = 0; i < k; ++i) {\n          groups[i].value = reduceInitial();\n        }\n\n        // We add all records and then remove filtered records so that reducers\n        // can build an 'unfiltered' view even if there are already filters in\n        // place on other dimensions.\n        if(iterable){\n          for (i = 0; i < n; ++i) {\n            for (j = 0; j < groupIndex[i].length; j++) {\n              g = groups[groupIndex[i][j]];\n              g.value = reduceAdd(g.value, data[i], true, j);\n            }\n          }\n          for (i = 0; i < n; ++i) {\n            if (!filters.zeroExcept(i, offset, zero)) {\n              for (j = 0; j < groupIndex[i].length; j++) {\n                g = groups[groupIndex[i][j]];\n                g.value = reduceRemove(g.value, data[i], false, j);\n              }\n            }\n          }\n          return;\n        }\n\n        for (i = 0; i < n; ++i) {\n          g = groups[groupIndex[i]];\n          g.value = reduceAdd(g.value, data[i], true);\n        }\n        for (i = 0; i < n; ++i) {\n          if (!filters.zeroExcept(i, offset, zero)) {\n            g = groups[groupIndex[i]];\n            g.value = reduceRemove(g.value, data[i], false);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is 1.\n      function resetOne() {\n        var i,\n            g = groups[0];\n\n        // Reset the singleton group values.\n        g.value = reduceInitial();\n\n        // We add all records and then remove filtered records so that reducers\n        // can build an 'unfiltered' view even if there are already filters in\n        // place on other dimensions.\n        for (i = 0; i < n; ++i) {\n          g.value = reduceAdd(g.value, data[i], true);\n        }\n\n        for (i = 0; i < n; ++i) {\n          if (!filters.zeroExcept(i, offset, zero)) {\n            g.value = reduceRemove(g.value, data[i], false);\n          }\n        }\n      }\n\n      // Returns the array of group values, in the dimension's natural order.\n      function all() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return groups;\n      }\n\n      // Returns a new array containing the top K group values, in reduce order.\n      function top(k) {\n        var top = select(all(), 0, groups.length, k);\n        return heap.sort(top, 0, top.length);\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce values, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Sets the reduce order, using the specified accessor.\n      function order(value) {\n        select = xfilterHeapselect.by(valueOf);\n        heap = xfilterHeap.by(valueOf);\n        function valueOf(d) { return value(d.value); }\n        return group;\n      }\n\n      // A convenience method for natural ordering by reduce value.\n      function orderNatural() {\n        return order(crossfilter_identity);\n      }\n\n      // Returns the cardinality of this group, irrespective of any filters.\n      function size() {\n        return k;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i, 1);\n        i = indexListeners.indexOf(add);\n        if (i >= 0) indexListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        return group;\n      }\n\n      return reduceCount().orderNatural();\n    }\n\n    // A convenience function for generating a singleton group.\n    function groupAll() {\n      var g = group(crossfilter_null), all = g.all;\n      delete g.all;\n      delete g.top;\n      delete g.order;\n      delete g.orderNatural;\n      delete g.size;\n      g.value = function() { return all()[0].value; };\n      return g;\n    }\n\n    // Removes this dimension and associated groups and event listeners.\n    function dispose() {\n      dimensionGroups.forEach(function(group) { group.dispose(); });\n      var i = dataListeners.indexOf(preAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = dataListeners.indexOf(postAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = removeDataListeners.indexOf(removeData);\n      if (i >= 0) removeDataListeners.splice(i, 1);\n      filters.masks[offset] &= zero;\n      return filterAll();\n    }\n\n    return dimension;\n  }\n\n  // A convenience method for groupAll on a dummy dimension.\n  // This implementation can be optimized since it always has cardinality 1.\n  function groupAll() {\n    var group = {\n      reduce: reduce,\n      reduceCount: reduceCount,\n      reduceSum: reduceSum,\n      value: value,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var reduceValue,\n        reduceAdd,\n        reduceRemove,\n        reduceInitial,\n        resetNeeded = true;\n\n    // The group listens to the crossfilter for when any dimension changes, so\n    // that it can update the reduce value. It must also listen to the parent\n    // dimension for when data is added.\n    filterListeners.push(update);\n    dataListeners.push(add);\n\n    // For consistency; actually a no-op since resetNeeded is true.\n    add(data, 0, n);\n\n    // Incorporates the specified new values into this group.\n    function add(newData, n0) {\n      var i;\n\n      if (resetNeeded) return;\n\n      // Cycle through all the values.\n      for (i = n0; i < n; ++i) {\n\n        // Add all values all the time.\n        reduceValue = reduceAdd(reduceValue, data[i], true);\n\n        // Remove the value if filtered.\n        if (!filters.zero(i)) {\n          reduceValue = reduceRemove(reduceValue, data[i], false);\n        }\n      }\n    }\n\n    // Reduces the specified selected or deselected records.\n    function update(filterOne, filterOffset, added, removed, notFilter) {\n      var i,\n          k,\n          n;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = 0, n = added.length; i < n; ++i) {\n        if (filters.zero(k = added[i])) {\n          reduceValue = reduceAdd(reduceValue, data[k], notFilter);\n        }\n      }\n\n      // Remove the removed values.\n      for (i = 0, n = removed.length; i < n; ++i) {\n        if (filters.only(k = removed[i], filterOffset, filterOne)) {\n          reduceValue = reduceRemove(reduceValue, data[k], notFilter);\n        }\n      }\n    }\n\n    // Recomputes the group reduce value from scratch.\n    function reset() {\n      var i;\n\n      reduceValue = reduceInitial();\n\n      // Cycle through all the values.\n      for (i = 0; i < n; ++i) {\n\n        // Add all values all the time.\n        reduceValue = reduceAdd(reduceValue, data[i], true);\n\n        // Remove the value if it is filtered.\n        if (!filters.zero(i)) {\n          reduceValue = reduceRemove(reduceValue, data[i], false);\n        }\n      }\n    }\n\n    // Sets the reduce behavior for this group to use the specified functions.\n    // This method lazily recomputes the reduce value, waiting until needed.\n    function reduce(add, remove, initial) {\n      reduceAdd = add;\n      reduceRemove = remove;\n      reduceInitial = initial;\n      resetNeeded = true;\n      return group;\n    }\n\n    // A convenience method for reducing by count.\n    function reduceCount() {\n      return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, crossfilter_zero);\n    }\n\n    // A convenience method for reducing by sum(value).\n    function reduceSum(value) {\n      return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), crossfilter_zero);\n    }\n\n    // Returns the computed reduce value.\n    function value() {\n      if (resetNeeded) reset(), resetNeeded = false;\n      return reduceValue;\n    }\n\n    // Removes this group and associated event listeners.\n    function dispose() {\n      var i = filterListeners.indexOf(update);\n      if (i >= 0) filterListeners.splice(i);\n      i = dataListeners.indexOf(add);\n      if (i >= 0) dataListeners.splice(i);\n      return group;\n    }\n\n    return reduceCount();\n  }\n\n  // Returns the number of records in this crossfilter, irrespective of any filters.\n  function size() {\n    return n;\n  }\n\n  // Returns the raw row data contained in this crossfilter\n  function all(){\n    return data;\n  }\n\n  // Returns row data with all dimension filters applied\n  function allFiltered() {\n    var array = [],\n        i = 0;\n\n      for (i = 0; i < n; i++) {\n        if (filters.zero(i)) {\n          array.push(data[i]);\n        }\n      }\n\n      return array;\n  }\n\n  function onChange(cb){\n    if(typeof cb !== 'function'){\n      /* eslint no-console: 0 */\n      console.warn('onChange callback parameter must be a function!');\n      return;\n    }\n    callbacks.push(cb);\n    return function(){\n      callbacks.splice(callbacks.indexOf(cb), 1);\n    };\n  }\n\n  function triggerOnChange(eventName){\n    for (var i = 0; i < callbacks.length; i++) {\n      callbacks[i](eventName);\n    }\n  }\n\n  return arguments.length\n      ? add(arguments[0])\n      : crossfilter;\n}\n\n// Returns an array of size n, big enough to store ids up to m.\nfunction crossfilter_index(n, m) {\n  return (m < 0x101\n      ? xfilterArray.array8 : m < 0x10001\n      ? xfilterArray.array16\n      : xfilterArray.array32)(n);\n}\n\n// Constructs a new array of size n, with sequential values from 0 to n - 1.\nfunction crossfilter_range(n) {\n  var range = crossfilter_index(n, n);\n  for (var i = -1; ++i < n;) range[i] = i;\n  return range;\n}\n\nfunction crossfilter_capacity(w) {\n  return w === 8\n      ? 0x100 : w === 16\n      ? 0x10000\n      : 0x100000000;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/crossfilter.js\n// module id = 273\n// module chunks = 0","if (typeof Uint8Array !== \"undefined\") {\n  var crossfilter_array8 = function(n) { return new Uint8Array(n); };\n  var crossfilter_array16 = function(n) { return new Uint16Array(n); };\n  var crossfilter_array32 = function(n) { return new Uint32Array(n); };\n\n  var crossfilter_arrayLengthen = function(array, length) {\n    if (array.length >= length) return array;\n    var copy = new array.constructor(length);\n    copy.set(array);\n    return copy;\n  };\n\n  var crossfilter_arrayWiden = function(array, width) {\n    var copy;\n    switch (width) {\n      case 16: copy = crossfilter_array16(array.length); break;\n      case 32: copy = crossfilter_array32(array.length); break;\n      default: throw new Error(\"invalid array width!\");\n    }\n    copy.set(array);\n    return copy;\n  };\n}\n\nfunction crossfilter_arrayUntyped(n) {\n  var array = new Array(n), i = -1;\n  while (++i < n) array[i] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayLengthenUntyped(array, length) {\n  var n = array.length;\n  while (n < length) array[n++] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayWidenUntyped(array, width) {\n  if (width > 32) throw new Error(\"invalid array width!\");\n  return array;\n}\n\n// An arbitrarily-wide array of bitmasks\nfunction crossfilter_bitarray(n) {\n  this.length = n;\n  this.subarrays = 1;\n  this.width = 8;\n  this.masks = {\n    0: 0\n  }\n\n  this[0] = crossfilter_array8(n);\n}\n\ncrossfilter_bitarray.prototype.lengthen = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    this[i] = crossfilter_arrayLengthen(this[i], n);\n  }\n  this.length = n;\n};\n\n// Reserve a new bit index in the array, returns {offset, one}\ncrossfilter_bitarray.prototype.add = function() {\n  var m, w, one, i, len;\n\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    m = this.masks[i];\n    w = this.width - (32 * i);\n    one = ~m & -~m;\n\n    if (w >= 32 && !one) {\n      continue;\n    }\n\n    if (w < 32 && (one & (1 << w))) {\n      // widen this subarray\n      this[i] = crossfilter_arrayWiden(this[i], w <<= 1);\n      this.width = 32 * i + w;\n    }\n\n    this.masks[i] |= one;\n\n    return {\n      offset: i,\n      one: one\n    };\n  }\n\n  // add a new subarray\n  this[this.subarrays] = crossfilter_array8(this.length);\n  this.masks[this.subarrays] = 1;\n  this.width += 8;\n  return {\n    offset: this.subarrays++,\n    one: 1\n  };\n};\n\n// Copy record from index src to index dest\ncrossfilter_bitarray.prototype.copy = function(dest, src) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    this[i][dest] = this[i][src];\n  }\n};\n\n// Truncate the array to the given length\ncrossfilter_bitarray.prototype.truncate = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    for (var j = this.length - 1; j >= n; j--) {\n      this[i][j] = 0;\n    }\n    this[i].length = n;\n  }\n  this.length = n;\n};\n\n// Checks that all bits for the given index are 0\ncrossfilter_bitarray.prototype.zero = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that all bits for the given index are 0 except for possibly one\ncrossfilter_bitarray.prototype.zeroExcept = function(n, offset, zero) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (i === offset ? this[i][n] & zero : this[i][n]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that all bits for the given indez are 0 except for the specified mask.\n// The mask should be an array of the same size as the filter subarrays width.\ncrossfilter_bitarray.prototype.zeroExceptMask = function(n, mask) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n] & mask[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Checks that only the specified bit is set for the given index\ncrossfilter_bitarray.prototype.only = function(n, offset, one) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n] != (i === offset ? one : 0)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that only the specified bit is set for the given index except for possibly one other\ncrossfilter_bitarray.prototype.onlyExcept = function(n, offset, zero, onlyOffset, onlyOne) {\n  var mask;\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    mask = this[i][n];\n    if (i === offset)\n      mask &= zero;\n    if (mask != (i === onlyOffset ? onlyOne : 0)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  array8: crossfilter_arrayUntyped,\n  array16: crossfilter_arrayUntyped,\n  array32: crossfilter_arrayUntyped,\n  arrayLengthen: crossfilter_arrayLengthenUntyped,\n  arrayWiden: crossfilter_arrayWidenUntyped,\n  bitarray: crossfilter_bitarray\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/array.js\n// module id = 274\n// module chunks = 0","'use strict';\n\nfunction crossfilter_filterExact(bisect, value) {\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n  };\n}\n\nfunction crossfilter_filterRange(bisect, range) {\n  var min = range[0],\n      max = range[1];\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n  };\n}\n\nfunction crossfilter_filterAll(values) {\n  return [0, values.length];\n}\n\nmodule.exports = {\n  filterExact: crossfilter_filterExact,\n  filterRange: crossfilter_filterRange,\n  filterAll: crossfilter_filterAll\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/filter.js\n// module id = 275\n// module chunks = 0","'use strict';\n\nfunction crossfilter_null() {\n  return null;\n}\n\nmodule.exports = crossfilter_null;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/null.js\n// module id = 276\n// module chunks = 0","'use strict';\n\nfunction crossfilter_zero() {\n  return 0;\n}\n\nmodule.exports = crossfilter_zero;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/zero.js\n// module id = 277\n// module chunks = 0","'use strict';\n\nvar crossfilter_identity = require('./identity');\nvar xFilterHeap = require('./heap');\n\nfunction heapselect_by(f) {\n  var heap = xFilterHeap.by(f);\n\n  // Returns a new array containing the top k elements in the array a[lo:hi].\n  // The returned array is not sorted, but maintains the heap property. If k is\n  // greater than hi - lo, then fewer than k elements will be returned. The\n  // order of elements in a is unchanged by this operation.\n  function heapselect(a, lo, hi, k) {\n    var queue = new Array(k = Math.min(hi - lo, k)),\n        min,\n        i,\n        d;\n\n    for (i = 0; i < k; ++i) queue[i] = a[lo++];\n    heap(queue, 0, k);\n\n    if (lo < hi) {\n      min = f(queue[0]);\n      do {\n        if (f(d = a[lo]) > min) {\n          queue[0] = d;\n          min = f(heap(queue, 0, k)[0]);\n        }\n      } while (++lo < hi);\n    }\n\n    return queue;\n  }\n\n  return heapselect;\n}\n\nmodule.exports = heapselect_by(crossfilter_identity);\nmodule.exports.by = heapselect_by; // assign the raw function to the export as well\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/heapselect.js\n// module id = 278\n// module chunks = 0","'use strict';\n\nvar crossfilter_identity = require('./identity');\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\n\nmodule.exports = bisect_by(crossfilter_identity);\nmodule.exports.by = bisect_by; // assign the raw function to the export as well\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/bisect.js\n// module id = 279\n// module chunks = 0","'use strict';\n\nfunction permute(array, index, deep) {\n  for (var i = 0, n = index.length, copy = deep ? JSON.parse(JSON.stringify(array)) : new Array(n); i < n; ++i) {\n    copy[i] = array[index[i]];\n  }\n  return copy;\n}\n\nmodule.exports = permute;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/permute.js\n// module id = 280\n// module chunks = 0","var crossfilter_identity = require('./identity');\nvar xFilterInsertionsort = require('./insertionsort');\n\n// Algorithm designed by Vladimir Yaroslavskiy.\n// Implementation based on the Dart project; see NOTICE and AUTHORS for details.\n\nfunction quicksort_by(f) {\n  var insertionsort = xFilterInsertionsort.by(f);\n\n  function sort(a, lo, hi) {\n    return (hi - lo < quicksort_sizeThreshold\n        ? insertionsort\n        : quicksort)(a, lo, hi);\n  }\n\n  function quicksort(a, lo, hi) {\n    // Compute the two pivots by looking at 5 elements.\n    var sixth = (hi - lo) / 6 | 0,\n        i1 = lo + sixth,\n        i5 = hi - 1 - sixth,\n        i3 = lo + hi - 1 >> 1,  // The midpoint.\n        i2 = i3 - sixth,\n        i4 = i3 + sixth;\n\n    var e1 = a[i1], x1 = f(e1),\n        e2 = a[i2], x2 = f(e2),\n        e3 = a[i3], x3 = f(e3),\n        e4 = a[i4], x4 = f(e4),\n        e5 = a[i5], x5 = f(e5);\n\n    var t;\n\n    // Sort the selected 5 elements using a sorting network.\n    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n    var pivot1 = e2, pivotValue1 = x2,\n        pivot2 = e4, pivotValue2 = x4;\n\n    // e2 and e4 have been saved in the pivot variables. They will be written\n    // back, once the partitioning is finished.\n    a[i1] = e1;\n    a[i2] = a[lo];\n    a[i3] = e3;\n    a[i4] = a[hi - 1];\n    a[i5] = e5;\n\n    var less = lo + 1,   // First element in the middle partition.\n        great = hi - 2;  // Last element in the middle partition.\n\n    // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n    // Object.prototype.valueOf; == and === do not, so in order to be consistent\n    // with natural order (such as for Date objects), we must do two compares.\n    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n    if (pivotsEqual) {\n\n      // Degenerated case where the partitioning becomes a dutch national flag\n      // problem.\n      //\n      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n      //  ^             ^          ^             ^            ^\n      // left         less         k           great         right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1) for x in ]left, less[ : x < pivot.\n      //   2) for x in [less, k[ : x == pivot.\n      //   3) for x in ]great, right[ : x > pivot.\n      for (var k = less; k <= great; ++k) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else if (xk > pivotValue1) {\n\n          // Find the first element <= pivot in the range [k - 1, great] and\n          // put [:ek:] there. We know that such an element must exist:\n          // When k == less, then el3 (which is equal to pivot) lies in the\n          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n          // Note that in the latter case invariant 2 will be violated for a\n          // short amount of time. The invariant will be restored when the\n          // pivots are put into their final positions.\n          /* eslint no-constant-condition: 0 */\n          while (true) {\n            var greatValue = f(a[great]);\n            if (greatValue > pivotValue1) {\n              great--;\n              // This is the only location in the while-loop where a new\n              // iteration is started.\n              continue;\n            } else if (greatValue < pivotValue1) {\n              // Triple exchange.\n              a[k] = a[less];\n              a[less++] = a[great];\n              a[great--] = ek;\n              break;\n            } else {\n              a[k] = a[great];\n              a[great--] = ek;\n              // Note: if great < k then we will exit the outer loop and fix\n              // invariant 2 (which we just violated).\n              break;\n            }\n          }\n        }\n      }\n    } else {\n\n      // We partition the list into three parts:\n      //  1. < pivot1\n      //  2. >= pivot1 && <= pivot2\n      //  3. > pivot2\n      //\n      // During the loop we have:\n      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n      //  ^            ^                        ^              ^             ^\n      // left         less                     k              great        right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1. for x in ]left, less[ : x < pivot1\n      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n      //   3. for x in ]great, right[ : x > pivot2\n      (function () { // isolate scope\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else {\n          if (xk > pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] <= pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] >= pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n      })(); // isolate scope\n    }\n\n    // Move pivots into their final positions.\n    // We shrunk the list from both sides (a[left] and a[right] have\n    // meaningless values in them) and now we move elements from the first\n    // and third partition into these locations so that we can store the\n    // pivots.\n    a[lo] = a[less - 1];\n    a[less - 1] = pivot1;\n    a[hi - 1] = a[great + 1];\n    a[great + 1] = pivot2;\n\n    // The list is now partitioned into three partitions:\n    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n    //  ^            ^                        ^             ^\n    // left         less                     great        right\n\n    // Recursive descent. (Don't include the pivot values.)\n    sort(a, lo, less - 1);\n    sort(a, great + 2, hi);\n\n    if (pivotsEqual) {\n      // All elements in the second partition are equal to the pivot. No\n      // need to sort them.\n      return a;\n    }\n\n    // In theory it should be enough to call _doSort recursively on the second\n    // partition.\n    // The Android source however removes the pivot elements from the recursive\n    // call if the second partition is too large (more than 2/3 of the list).\n    if (less < i1 && great > i5) {\n\n      (function () { // isolate scope\n      var lessValue, greatValue;\n      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\n      while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\n\n      // Copy paste of the previous 3-way partitioning with adaptions.\n      //\n      // We partition the list into three parts:\n      //  1. == pivot1\n      //  2. > pivot1 && < pivot2\n      //  3. == pivot2\n      //\n      // During the loop we have:\n      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n      //              ^                      ^              ^\n      //            less                     k              great\n      //\n      // Invariants:\n      //   1. for x in [ *, less[ : x == pivot1\n      //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n      //   3. for x in ]great, * ] : x == pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk <= pivotValue1 && xk >= pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          less++;\n        } else {\n          if (xk <= pivotValue2 && xk >= pivotValue2) {\n            /* eslint no-constant-condition: 0 */\n            while (true) {\n              greatValue = f(a[great]);\n              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] < pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] == pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n      })(); // isolate scope\n\n    }\n\n    // The second partition has now been cleared of pivot elements and looks\n    // as follows:\n    // [  *  |  > pivot1 && < pivot2  | * ]\n    //        ^                      ^\n    //       less                  great\n    // Sort the second partition using recursive descent.\n\n    // The second partition looks as follows:\n    // [  *  |  >= pivot1 && <= pivot2  | * ]\n    //        ^                        ^\n    //       less                    great\n    // Simply sort it by recursive descent.\n\n    return sort(a, less, great + 1);\n  }\n\n  return sort;\n}\n\nvar quicksort_sizeThreshold = 32;\n\nmodule.exports = quicksort_by(crossfilter_identity);\nmodule.exports.by = quicksort_by;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/quicksort.js\n// module id = 281\n// module chunks = 0","'use strict';\n\nfunction crossfilter_reduceIncrement(p) {\n  return p + 1;\n}\n\nfunction crossfilter_reduceDecrement(p) {\n  return p - 1;\n}\n\nfunction crossfilter_reduceAdd(f) {\n  return function(p, v) {\n    return p + +f(v);\n  };\n}\n\nfunction crossfilter_reduceSubtract(f) {\n  return function(p, v) {\n    return p - f(v);\n  };\n}\n\nmodule.exports = {\n  reduceIncrement: crossfilter_reduceIncrement,\n  reduceDecrement: crossfilter_reduceDecrement,\n  reduceAdd: crossfilter_reduceAdd,\n  reduceSubtract: crossfilter_reduceSubtract\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/src/reduce.js\n// module id = 282\n// module chunks = 0","module.exports = {\"_args\":[[\"crossfilter2@1.4.1\",\"D:\\\\projects\\\\personal-blog\"]],\"_from\":\"crossfilter2@1.4.1\",\"_id\":\"crossfilter2@1.4.1\",\"_inBundle\":false,\"_integrity\":\"sha512-0ykBoUMRMMUUq5aBZk0Dn+pZgD+3a3KuUKRRCi5a/jxlnkwpu9B5FZM4BEaK5j9gUXF8BTDJXr/zIbM4Gi7Wig==\",\"_location\":\"/crossfilter2\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"version\",\"registry\":true,\"raw\":\"crossfilter2@1.4.1\",\"name\":\"crossfilter2\",\"escapedName\":\"crossfilter2\",\"rawSpec\":\"1.4.1\",\"saveSpec\":null,\"fetchSpec\":\"1.4.1\"},\"_requiredBy\":[\"/\"],\"_resolved\":\"https://registry.npmjs.org/crossfilter2/-/crossfilter2-1.4.1.tgz\",\"_spec\":\"1.4.1\",\"_where\":\"D:\\\\projects\\\\personal-blog\",\"author\":{\"name\":\"Mike Bostock\",\"url\":\"http://bost.ocks.org/mike\"},\"bugs\":{\"url\":\"https://github.com/crossfilter/crossfilter/issues\"},\"contributors\":[{\"name\":\"Jason Davies\",\"url\":\"http://www.jasondavies.com/\"}],\"dependencies\":{\"lodash.result\":\"^4.4.0\"},\"description\":\"Fast multidimensional filtering for coordinated views.\",\"devDependencies\":{\"browserify\":\"^13.0.0\",\"d3\":\"3.5\",\"eslint\":\"2.10.2\",\"package-json-versionify\":\"1.0.2\",\"semver\":\"^5.3.0\",\"uglify-js\":\"2.4.0\",\"vows\":\"0.7.0\"},\"eslintConfig\":{\"env\":{\"browser\":true,\"node\":true},\"globals\":{\"Uint8Array\":true,\"Uint16Array\":true,\"Uint32Array\":true},\"extends\":\"eslint:recommended\"},\"files\":[\"src\",\"index.js\",\"crossfilter.js\",\"crossfilter.min.js\"],\"homepage\":\"http://crossfilter.github.com/crossfilter/\",\"keywords\":[\"analytics\",\"visualization\",\"crossfilter\"],\"license\":\"Apache-2.0\",\"main\":\"./index.js\",\"maintainers\":[{\"name\":\"Gordon Woodhull\",\"url\":\"https://github.com/gordonwoodhull\"},{\"name\":\"Tanner Linsley\",\"url\":\"https://github.com/tannerlinsley\"},{\"name\":\"Ethan Jewett\",\"url\":\"https://github.com/esjewett\"}],\"name\":\"crossfilter2\",\"repository\":{\"type\":\"git\",\"url\":\"git+ssh://git@github.com/crossfilter/crossfilter.git\"},\"scripts\":{\"benchmark\":\"node test/benchmark.js\",\"build\":\"browserify index.js -t package-json-versionify --standalone crossfilter -o crossfilter.js && uglifyjs --compress --mangle --screw-ie8 crossfilter.js -o crossfilter.min.js\",\"clean\":\"rm -f crossfilter.js crossfilter.min.js\",\"test\":\"vows --verbose && eslint src/\"},\"version\":\"1.4.1\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crossfilter2/package.json\n// module id = 283\n// module chunks = 0","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * This method is like `_.get` except that if the resolved value is a\n * function it's invoked with the `this` binding of its parent object and\n * its result is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to resolve.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n *\n * _.result(object, 'a[0].b.c1');\n * // => 3\n *\n * _.result(object, 'a[0].b.c2');\n * // => 4\n *\n * _.result(object, 'a[0].b.c3', 'default');\n * // => 'default'\n *\n * _.result(object, 'a[0].b.c3', _.constant('default'));\n * // => 'default'\n */\nfunction result(object, path, defaultValue) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = -1,\n      length = path.length;\n\n  // Ensure the loop is entered when path is empty.\n  if (!length) {\n    object = undefined;\n    length = 1;\n  }\n  while (++index < length) {\n    var value = object == null ? undefined : object[toKey(path[index])];\n    if (value === undefined) {\n      index = length;\n      value = defaultValue;\n    }\n    object = isFunction(value) ? value.call(object) : value;\n  }\n  return object;\n}\n\nmodule.exports = result;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash.result/index.js\n// module id = 284\n// module chunks = 0","module.exports = global[\"dc\"] = require(\"-!.\\\\dc.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/expose-loader?dc!./node_modules/dc/dc.js\n// module id = 285\n// module chunks = 0","/*!\n *  dc 2.1.8\n *  http://dc-js.github.io/dc.js/\n *  Copyright 2012-2016 Nick Zhu & the dc.js Developers\n *  https://github.com/dc-js/dc.js/blob/master/AUTHORS\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n(function() { function _dc(d3, crossfilter) {\n'use strict';\n\n/**\n * The entire dc.js library is scoped under the **dc** name space. It does not introduce\n * anything else into the global name space.\n *\n * Most `dc` functions are designed to allow function chaining, meaning they return the current chart\n * instance whenever it is appropriate.  The getter forms of functions do not participate in function\n * chaining because they return values that are not the chart, although some,\n * such as {@link dc.baseMixin#svg .svg} and {@link dc.coordinateGridMixin#xAxis .xAxis},\n * return values that are themselves chainable d3 objects.\n * @namespace dc\n * @version 2.1.8\n * @example\n * // Example chaining\n * chart.width(300)\n *      .height(300)\n *      .filter('sunday');\n */\n/*jshint -W079*/\nvar dc = {\n    version: '2.1.8',\n    constants: {\n        CHART_CLASS: 'dc-chart',\n        DEBUG_GROUP_CLASS: 'debug',\n        STACK_CLASS: 'stack',\n        DESELECTED_CLASS: 'deselected',\n        SELECTED_CLASS: 'selected',\n        NODE_INDEX_NAME: '__index__',\n        GROUP_INDEX_NAME: '__group_index__',\n        DEFAULT_CHART_GROUP: '__default_chart_group__',\n        EVENT_DELAY: 40,\n        NEGLIGIBLE_NUMBER: 1e-10\n    },\n    _renderlet: null\n};\n/*jshint +W079*/\n\n/**\n * The dc.chartRegistry object maintains sets of all instantiated dc.js charts under named groups\n * and the default group.\n *\n * A chart group often corresponds to a crossfilter instance. It specifies\n * the set of charts which should be updated when a filter changes on one of the charts or when the\n * global functions {@link dc.filterAll dc.filterAll}, {@link dc.refocusAll dc.refocusAll},\n * {@link dc.renderAll dc.renderAll}, {@link dc.redrawAll dc.redrawAll}, or chart functions\n * {@link dc.baseMixin#renderGroup baseMixin.renderGroup},\n * {@link dc.baseMixin#redrawGroup baseMixin.redrawGroup} are called.\n *\n * @namespace chartRegistry\n * @memberof dc\n * @type {{has, register, deregister, clear, list}}\n */\ndc.chartRegistry = (function () {\n    // chartGroup:string => charts:array\n    var _chartMap = {};\n\n    function initializeChartGroup (group) {\n        if (!group) {\n            group = dc.constants.DEFAULT_CHART_GROUP;\n        }\n\n        if (!_chartMap[group]) {\n            _chartMap[group] = [];\n        }\n\n        return group;\n    }\n\n    return {\n        /**\n         * Determine if a given chart instance resides in any group in the registry.\n         * @method has\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @returns {Boolean}\n         */\n        has: function (chart) {\n            for (var e in _chartMap) {\n                if (_chartMap[e].indexOf(chart) >= 0) {\n                    return true;\n                }\n            }\n            return false;\n        },\n\n        /**\n         * Add given chart instance to the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method register\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        register: function (chart, group) {\n            group = initializeChartGroup(group);\n            _chartMap[group].push(chart);\n        },\n\n        /**\n         * Remove given chart instance from the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method deregister\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        deregister: function (chart, group) {\n            group = initializeChartGroup(group);\n            for (var i = 0; i < _chartMap[group].length; i++) {\n                if (_chartMap[group][i].anchorName() === chart.anchorName()) {\n                    _chartMap[group].splice(i, 1);\n                    break;\n                }\n            }\n        },\n\n        /**\n         * Clear given group if one is provided, otherwise clears all groups.\n         * @method clear\n         * @memberof dc.chartRegistry\n         * @param {String} group Group name\n         */\n        clear: function (group) {\n            if (group) {\n                delete _chartMap[group];\n            } else {\n                _chartMap = {};\n            }\n        },\n\n        /**\n         * Get an array of each chart instance in the given group.\n         * If no group is provided, the charts in the default group are returned.\n         * @method list\n         * @memberof dc.chartRegistry\n         * @param {String} [group] Group name\n         * @returns {Array<Object>}\n         */\n        list: function (group) {\n            group = initializeChartGroup(group);\n            return _chartMap[group];\n        }\n    };\n})();\n\n/**\n * Add given chart instance to the given group, creating the group if necessary.\n * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n * @memberof dc\n * @method registerChart\n * @param {Object} chart dc.js chart instance\n * @param {String} [group] Group name\n */\ndc.registerChart = function (chart, group) {\n    dc.chartRegistry.register(chart, group);\n};\n\n/**\n * Remove given chart instance from the given group, creating the group if necessary.\n * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n * @memberof dc\n * @method deregisterChart\n * @param {Object} chart dc.js chart instance\n * @param {String} [group] Group name\n */\ndc.deregisterChart = function (chart, group) {\n    dc.chartRegistry.deregister(chart, group);\n};\n\n/**\n * Determine if a given chart instance resides in any group in the registry.\n * @memberof dc\n * @method hasChart\n * @param {Object} chart dc.js chart instance\n * @returns {Boolean}\n */\ndc.hasChart = function (chart) {\n    return dc.chartRegistry.has(chart);\n};\n\n/**\n * Clear given group if one is provided, otherwise clears all groups.\n * @memberof dc\n * @method deregisterAllCharts\n * @param {String} group Group name\n */\ndc.deregisterAllCharts = function (group) {\n    dc.chartRegistry.clear(group);\n};\n\n/**\n * Clear all filters on all charts within the given chart group. If the chart group is not given then\n * only charts that belong to the default chart group will be reset.\n * @memberof dc\n * @method filterAll\n * @param {String} [group]\n */\ndc.filterAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].filterAll();\n    }\n};\n\n/**\n * Reset zoom level / focus on all charts that belong to the given chart group. If the chart group is\n * not given then only charts that belong to the default chart group will be reset.\n * @memberof dc\n * @method refocusAll\n * @param {String} [group]\n */\ndc.refocusAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        if (charts[i].focus) {\n            charts[i].focus();\n        }\n    }\n};\n\n/**\n * Re-render all charts belong to the given chart group. If the chart group is not given then only\n * charts that belong to the default chart group will be re-rendered.\n * @memberof dc\n * @method renderAll\n * @param {String} [group]\n */\ndc.renderAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].render();\n    }\n\n    if (dc._renderlet !== null) {\n        dc._renderlet(group);\n    }\n};\n\n/**\n * Redraw all charts belong to the given chart group. If the chart group is not given then only charts\n * that belong to the default chart group will be re-drawn. Redraw is different from re-render since\n * when redrawing dc tries to update the graphic incrementally, using transitions, instead of starting\n * from scratch.\n * @memberof dc\n * @method redrawAll\n * @param {String} [group]\n */\ndc.redrawAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].redraw();\n    }\n\n    if (dc._renderlet !== null) {\n        dc._renderlet(group);\n    }\n};\n\n/**\n * If this boolean is set truthy, all transitions will be disabled, and changes to the charts will happen\n * immediately.\n * @memberof dc\n * @member disableTransitions\n * @type {Boolean}\n * @default false\n */\ndc.disableTransitions = false;\n\n/**\n * Start a transition on a selection if transitions are globally enabled\n * ({@link dc.disableTransitions} is false) and the duration is greater than zero; otherwise return\n * the selection. Since most operations are the same on a d3 selection and a d3 transition, this\n * allows a common code path for both cases.\n * @memberof dc\n * @method transition\n * @param {d3.selection} selection - the selection to be transitioned\n * @param {Number|Function} [duration=250] - the duration of the transition in milliseconds, a\n * function returning the duration, or 0 for no transition\n * @param {Number|Function} [delay] - the delay of the transition in milliseconds, or a function\n * returning the delay, or 0 for no delay\n * @param {String} [name] - the name of the transition (if concurrent transitions on the same\n * elements are needed)\n * @returns {d3.transition|d3.selection}\n */\ndc.transition = function (selection, duration, delay, name) {\n    if (dc.disableTransitions || duration <= 0) {\n        return selection;\n    }\n\n    var s = selection.transition(name);\n\n    if (duration >= 0 || duration !== undefined) {\n        s = s.duration(duration);\n    }\n    if (delay >= 0 || delay !== undefined) {\n        s = s.delay(delay);\n    }\n\n    return s;\n};\n\n/* somewhat silly, but to avoid duplicating logic */\ndc.optionalTransition = function (enable, duration, delay, name) {\n    if (enable) {\n        return function (selection) {\n            return dc.transition(selection, duration, delay, name);\n        };\n    } else {\n        return function (selection) {\n            return selection;\n        };\n    }\n};\n\n// See http://stackoverflow.com/a/20773846\ndc.afterTransition = function (transition, callback) {\n    if (transition.empty() || !transition.duration) {\n        callback.call(transition);\n    } else {\n        var n = 0;\n        transition\n            .each(function () { ++n; })\n            .each('end', function () {\n                if (!--n) {\n                    callback.call(transition);\n                }\n            });\n    }\n};\n\n/**\n * @namespace units\n * @memberof dc\n * @type {{}}\n */\ndc.units = {};\n\n/**\n * The default value for {@link dc.coordinateGridMixin#xUnits .xUnits} for the\n * {@link dc.coordinateGridMixin Coordinate Grid Chart} and should\n * be used when the x values are a sequence of integers.\n * It is a function that counts the number of integers in the range supplied in its start and end parameters.\n * @method integers\n * @memberof dc.units\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @example\n * chart.xUnits(dc.units.integers) // already the default\n * @param {Number} start\n * @param {Number} end\n * @returns {Number}\n */\ndc.units.integers = function (start, end) {\n    return Math.abs(end - start);\n};\n\n/**\n * This argument can be passed to the {@link dc.coordinateGridMixin#xUnits .xUnits} function of the to\n * specify ordinal units for the x axis. Usually this parameter is used in combination with passing\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal} to\n * {@link dc.coordinateGridMixin#x .x}.\n * It just returns the domain passed to it, which for ordinal charts is an array of all values.\n * @method ordinal\n * @memberof dc.units\n * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal}\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @see {@link dc.coordinateGridMixin#x coordinateGridMixin.x}\n * @example\n * chart.xUnits(dc.units.ordinal)\n *      .x(d3.scale.ordinal())\n * @param {*} start\n * @param {*} end\n * @param {Array<String>} domain\n * @returns {Array<String>}\n */\ndc.units.ordinal = function (start, end, domain) {\n    return domain;\n};\n\n/**\n * @namespace fp\n * @memberof dc.units\n * @type {{}}\n */\ndc.units.fp = {};\n/**\n * This function generates an argument for the {@link dc.coordinateGridMixin Coordinate Grid Chart}\n * {@link dc.coordinateGridMixin#xUnits .xUnits} function specifying that the x values are floating-point\n * numbers with the given precision.\n * The returned function determines how many values at the given precision will fit into the range\n * supplied in its start and end parameters.\n * @method precision\n * @memberof dc.units.fp\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @example\n * // specify values (and ticks) every 0.1 units\n * chart.xUnits(dc.units.fp.precision(0.1)\n * // there are 500 units between 0.5 and 1 if the precision is 0.001\n * var thousandths = dc.units.fp.precision(0.001);\n * thousandths(0.5, 1.0) // returns 500\n * @param {Number} precision\n * @returns {Function} start-end unit function\n */\ndc.units.fp.precision = function (precision) {\n    var _f = function (s, e) {\n        var d = Math.abs((e - s) / _f.resolution);\n        if (dc.utils.isNegligible(d - Math.floor(d))) {\n            return Math.floor(d);\n        } else {\n            return Math.ceil(d);\n        }\n    };\n    _f.resolution = precision;\n    return _f;\n};\n\ndc.round = {};\ndc.round.floor = function (n) {\n    return Math.floor(n);\n};\ndc.round.ceil = function (n) {\n    return Math.ceil(n);\n};\ndc.round.round = function (n) {\n    return Math.round(n);\n};\n\ndc.override = function (obj, functionName, newFunction) {\n    var existingFunction = obj[functionName];\n    obj['_' + functionName] = existingFunction;\n    obj[functionName] = newFunction;\n};\n\ndc.renderlet = function (_) {\n    if (!arguments.length) {\n        return dc._renderlet;\n    }\n    dc._renderlet = _;\n    return dc;\n};\n\ndc.instanceOfChart = function (o) {\n    return o instanceof Object && o.__dcFlag__ && true;\n};\n\ndc.errors = {};\n\ndc.errors.Exception = function (msg) {\n    var _msg = msg || 'Unexpected internal error';\n\n    this.message = _msg;\n\n    this.toString = function () {\n        return _msg;\n    };\n    this.stack = (new Error()).stack;\n};\ndc.errors.Exception.prototype = Object.create(Error.prototype);\ndc.errors.Exception.prototype.constructor = dc.errors.Exception;\n\ndc.errors.InvalidStateException = function () {\n    dc.errors.Exception.apply(this, arguments);\n};\n\ndc.errors.InvalidStateException.prototype = Object.create(dc.errors.Exception.prototype);\ndc.errors.InvalidStateException.prototype.constructor = dc.errors.InvalidStateException;\n\ndc.errors.BadArgumentException = function () {\n    dc.errors.Exception.apply(this, arguments);\n};\n\ndc.errors.BadArgumentException.prototype = Object.create(dc.errors.Exception.prototype);\ndc.errors.BadArgumentException.prototype.constructor = dc.errors.BadArgumentException;\n\n/**\n * The default date format for dc.js\n * @name dateFormat\n * @memberof dc\n * @type {Function}\n * @default d3.time.format('%m/%d/%Y')\n */\ndc.dateFormat = d3.time.format('%m/%d/%Y');\n\n/**\n * @namespace printers\n * @memberof dc\n * @type {{}}\n */\ndc.printers = {};\n\n/**\n * Converts a list of filters into a readable string.\n * @method filters\n * @memberof dc.printers\n * @param {Array<dc.filters>} filters\n * @returns {String}\n */\ndc.printers.filters = function (filters) {\n    var s = '';\n\n    for (var i = 0; i < filters.length; ++i) {\n        if (i > 0) {\n            s += ', ';\n        }\n        s += dc.printers.filter(filters[i]);\n    }\n\n    return s;\n};\n\n/**\n * Converts a filter into a readable string.\n * @method filter\n * @memberof dc.printers\n * @param {dc.filters|any|Array<any>} filter\n * @returns {String}\n */\ndc.printers.filter = function (filter) {\n    var s = '';\n\n    if (typeof filter !== 'undefined' && filter !== null) {\n        if (filter instanceof Array) {\n            if (filter.length >= 2) {\n                s = '[' + dc.utils.printSingleValue(filter[0]) + ' -> ' + dc.utils.printSingleValue(filter[1]) + ']';\n            } else if (filter.length >= 1) {\n                s = dc.utils.printSingleValue(filter[0]);\n            }\n        } else {\n            s = dc.utils.printSingleValue(filter);\n        }\n    }\n\n    return s;\n};\n\n/**\n * Returns a function that given a string property name, can be used to pluck the property off an object.  A function\n * can be passed as the second argument to also alter the data being returned.\n *\n * This can be a useful shorthand method to create accessor functions.\n * @method pluck\n * @memberof dc\n * @example\n * var xPluck = dc.pluck('x');\n * var objA = {x: 1};\n * xPluck(objA) // 1\n * @example\n * var xPosition = dc.pluck('x', function (x, i) {\n *     // `this` is the original datum,\n *     // `x` is the x property of the datum,\n *     // `i` is the position in the array\n *     return this.radius + x;\n * });\n * dc.selectAll('.circle').data(...).x(xPosition);\n * @param {String} n\n * @param {Function} [f]\n * @returns {Function}\n */\ndc.pluck = function (n, f) {\n    if (!f) {\n        return function (d) { return d[n]; };\n    }\n    return function (d, i) { return f.call(d, d[n], i); };\n};\n\n/**\n * @namespace utils\n * @memberof dc\n * @type {{}}\n */\ndc.utils = {};\n\n/**\n * Print a single value filter.\n * @method printSingleValue\n * @memberof dc.utils\n * @param {any} filter\n * @returns {String}\n */\ndc.utils.printSingleValue = function (filter) {\n    var s = '' + filter;\n\n    if (filter instanceof Date) {\n        s = dc.dateFormat(filter);\n    } else if (typeof(filter) === 'string') {\n        s = filter;\n    } else if (dc.utils.isFloat(filter)) {\n        s = dc.utils.printSingleValue.fformat(filter);\n    } else if (dc.utils.isInteger(filter)) {\n        s = Math.round(filter);\n    }\n\n    return s;\n};\ndc.utils.printSingleValue.fformat = d3.format('.2f');\n\n/**\n * Arbitrary add one value to another.\n * @method add\n * @memberof dc.utils\n * @todo\n * These assume than any string r is a percentage (whether or not it includes %).\n * They also generate strange results if l is a string.\n * @param {String|Date|Number} l the value to modify\n * @param {Number} r the amount by which to modify the value\n * @param {String} [t] if `l` is a `Date`, the\n * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n * the `d3.time` namespace\n * @returns {String|Date|Number}\n */\ndc.utils.add = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() + r);\n        }\n        t = t || 'day';\n        return d3.time[t].offset(l, r);\n    } else if (typeof r === 'string') {\n        var percentage = (+r / 100);\n        return l > 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l + r;\n    }\n};\n\n/**\n * Arbitrary subtract one value from another.\n * @method subtract\n * @memberof dc.utils\n * @todo\n * These assume than any string r is a percentage (whether or not it includes %).\n * They also generate strange results if l is a string.\n * @param {String|Date|Number} l the value to modify\n * @param {Number} r the amount by which to modify the value\n * @param {String} [t] if `l` is a `Date`, the\n * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n * the `d3.time` namespace\n * @returns {String|Date|Number}\n */\ndc.utils.subtract = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() - r);\n        }\n        t = t || 'day';\n        return d3.time[t].offset(l, -r);\n    } else if (typeof r === 'string') {\n        var percentage = (+r / 100);\n        return l < 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l - r;\n    }\n};\n\n/**\n * Is the value a number?\n * @method isNumber\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isNumber = function (n) {\n    return n === +n;\n};\n\n/**\n * Is the value a float?\n * @method isFloat\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isFloat = function (n) {\n    return n === +n && n !== (n | 0);\n};\n\n/**\n * Is the value an integer?\n * @method isInteger\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isInteger = function (n) {\n    return n === +n && n === (n | 0);\n};\n\n/**\n * Is the value very close to zero?\n * @method isNegligible\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isNegligible = function (n) {\n    return !dc.utils.isNumber(n) || (n < dc.constants.NEGLIGIBLE_NUMBER && n > -dc.constants.NEGLIGIBLE_NUMBER);\n};\n\n/**\n * Ensure the value is no greater or less than the min/max values.  If it is return the boundary value.\n * @method clamp\n * @memberof dc.utils\n * @param {any} val\n * @param {any} min\n * @param {any} max\n * @returns {any}\n */\ndc.utils.clamp = function (val, min, max) {\n    return val < min ? min : (val > max ? max : val);\n};\n\n/**\n * Using a simple static counter, provide a unique integer id.\n * @method uniqueId\n * @memberof dc.utils\n * @returns {Number}\n */\nvar _idCounter = 0;\ndc.utils.uniqueId = function () {\n    return ++_idCounter;\n};\n\n/**\n * Convert a name to an ID.\n * @method nameToId\n * @memberof dc.utils\n * @param {String} name\n * @returns {String}\n */\ndc.utils.nameToId = function (name) {\n    return name.toLowerCase().replace(/[\\s]/g, '_').replace(/[\\.']/g, '');\n};\n\n/**\n * Append or select an item on a parent element.\n * @method appendOrSelect\n * @memberof dc.utils\n * @param {d3.selection} parent\n * @param {String} selector\n * @param {String} tag\n * @returns {d3.selection}\n */\ndc.utils.appendOrSelect = function (parent, selector, tag) {\n    tag = tag || selector;\n    var element = parent.select(selector);\n    if (element.empty()) {\n        element = parent.append(tag);\n    }\n    return element;\n};\n\n/**\n * Return the number if the value is a number; else 0.\n * @method safeNumber\n * @memberof dc.utils\n * @param {Number|any} n\n * @returns {Number}\n */\ndc.utils.safeNumber = function (n) { return dc.utils.isNumber(+n) ? +n : 0;};\n\ndc.logger = {};\n\ndc.logger.enableDebugLog = false;\n\ndc.logger.warn = function (msg) {\n    if (console) {\n        if (console.warn) {\n            console.warn(msg);\n        } else if (console.log) {\n            console.log(msg);\n        }\n    }\n\n    return dc.logger;\n};\n\ndc.logger.debug = function (msg) {\n    if (dc.logger.enableDebugLog && console) {\n        if (console.debug) {\n            console.debug(msg);\n        } else if (console.log) {\n            console.log(msg);\n        }\n    }\n\n    return dc.logger;\n};\n\ndc.logger.deprecate = function (fn, msg) {\n    // Allow logging of deprecation\n    var warned = false;\n    function deprecated () {\n        if (!warned) {\n            dc.logger.warn(msg);\n            warned = true;\n        }\n        return fn.apply(this, arguments);\n    }\n    return deprecated;\n};\n\ndc.events = {\n    current: null\n};\n\n/**\n * This function triggers a throttled event function with a specified delay (in milli-seconds).  Events\n * that are triggered repetitively due to user interaction such brush dragging might flood the library\n * and invoke more renders than can be executed in time. Using this function to wrap your event\n * function allows the library to smooth out the rendering by throttling events and only responding to\n * the most recent event.\n * @name events.trigger\n * @memberof dc\n * @example\n * chart.on('renderlet', function(chart) {\n *     // smooth the rendering through event throttling\n *     dc.events.trigger(function(){\n *         // focus some other chart to the range selected by user on this chart\n *         someOtherChart.focus(chart.filter());\n *     });\n * })\n * @param {Function} closure\n * @param {Number} [delay]\n */\ndc.events.trigger = function (closure, delay) {\n    if (!delay) {\n        closure();\n        return;\n    }\n\n    dc.events.current = closure;\n\n    setTimeout(function () {\n        if (closure === dc.events.current) {\n            closure();\n        }\n    }, delay);\n};\n\n/**\n * The dc.js filters are functions which are passed into crossfilter to chose which records will be\n * accumulated to produce values for the charts.  In the crossfilter model, any filters applied on one\n * dimension will affect all the other dimensions but not that one.  dc always applies a filter\n * function to the dimension; the function combines multiple filters and if any of them accept a\n * record, it is filtered in.\n *\n * These filter constructors are used as appropriate by the various charts to implement brushing.  We\n * mention below which chart uses which filter.  In some cases, many instances of a filter will be added.\n *\n * Each of the dc.js filters is an object with the following properties:\n * * `isFiltered` - a function that returns true if a value is within the filter\n * * `filterType` - a string identifying the filter, here the name of the constructor\n *\n * Currently these filter objects are also arrays, but this is not a requirement. Custom filters\n * can be used as long as they have the properties above.\n * @namespace filters\n * @memberof dc\n * @type {{}}\n */\ndc.filters = {};\n\n/**\n * RangedFilter is a filter which accepts keys between `low` and `high`.  It is used to implement X\n * axis brushing for the {@link dc.coordinateGridMixin coordinate grid charts}.\n *\n * Its `filterType` is 'RangedFilter'\n * @name RangedFilter\n * @memberof dc.filters\n * @param {Number} low\n * @param {Number} high\n * @returns {Array<Number>}\n * @constructor\n */\ndc.filters.RangedFilter = function (low, high) {\n    var range = new Array(low, high);\n    range.isFiltered = function (value) {\n        return value >= this[0] && value < this[1];\n    };\n    range.filterType = 'RangedFilter';\n\n    return range;\n};\n\n/**\n * TwoDimensionalFilter is a filter which accepts a single two-dimensional value.  It is used by the\n * {@link dc.heatMap heat map chart} to include particular cells as they are clicked.  (Rows and columns are\n * filtered by filtering all the cells in the row or column.)\n *\n * Its `filterType` is 'TwoDimensionalFilter'\n * @name TwoDimensionalFilter\n * @memberof dc.filters\n * @param {Array<Number>} filter\n * @returns {Array<Number>}\n * @constructor\n */\ndc.filters.TwoDimensionalFilter = function (filter) {\n    if (filter === null) { return null; }\n\n    var f = filter;\n    f.isFiltered = function (value) {\n        return value.length && value.length === f.length &&\n               value[0] === f[0] && value[1] === f[1];\n    };\n    f.filterType = 'TwoDimensionalFilter';\n\n    return f;\n};\n\n/**\n * The RangedTwoDimensionalFilter allows filtering all values which fit within a rectangular\n * region. It is used by the {@link dc.scatterPlot scatter plot} to implement rectangular brushing.\n *\n * It takes two two-dimensional points in the form `[[x1,y1],[x2,y2]]`, and normalizes them so that\n * `x1 <= x2` and `y1 <= y2`. It then returns a filter which accepts any points which are in the\n * rectangular range including the lower values but excluding the higher values.\n *\n * If an array of two values are given to the RangedTwoDimensionalFilter, it interprets the values as\n * two x coordinates `x1` and `x2` and returns a filter which accepts any points for which `x1 <= x <\n * x2`.\n *\n * Its `filterType` is 'RangedTwoDimensionalFilter'\n * @name RangedTwoDimensionalFilter\n * @memberof dc.filters\n * @param {Array<Array<Number>>} filter\n * @returns {Array<Array<Number>>}\n * @constructor\n */\ndc.filters.RangedTwoDimensionalFilter = function (filter) {\n    if (filter === null) { return null; }\n\n    var f = filter;\n    var fromBottomLeft;\n\n    if (f[0] instanceof Array) {\n        fromBottomLeft = [\n            [Math.min(filter[0][0], filter[1][0]), Math.min(filter[0][1], filter[1][1])],\n            [Math.max(filter[0][0], filter[1][0]), Math.max(filter[0][1], filter[1][1])]\n        ];\n    } else {\n        fromBottomLeft = [[filter[0], -Infinity], [filter[1], Infinity]];\n    }\n\n    f.isFiltered = function (value) {\n        var x, y;\n\n        if (value instanceof Array) {\n            x = value[0];\n            y = value[1];\n        } else {\n            x = value;\n            y = fromBottomLeft[0][1];\n        }\n\n        return x >= fromBottomLeft[0][0] && x < fromBottomLeft[1][0] &&\n               y >= fromBottomLeft[0][1] && y < fromBottomLeft[1][1];\n    };\n    f.filterType = 'RangedTwoDimensionalFilter';\n\n    return f;\n};\n\n/**\n * `dc.baseMixin` is an abstract functional object representing a basic `dc` chart object\n * for all chart and widget implementations. Methods from the {@link #dc.baseMixin dc.baseMixin} are inherited\n * and available on all chart implementations in the `dc` library.\n * @name baseMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.baseMixin}\n */\ndc.baseMixin = function (_chart) {\n    _chart.__dcFlag__ = dc.utils.uniqueId();\n\n    var _dimension;\n    var _group;\n\n    var _anchor;\n    var _root;\n    var _svg;\n    var _isChild;\n\n    var _minWidth = 200;\n    var _defaultWidthCalc = function (element) {\n        var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n        return (width && width > _minWidth) ? width : _minWidth;\n    };\n    var _widthCalc = _defaultWidthCalc;\n\n    var _minHeight = 200;\n    var _defaultHeightCalc = function (element) {\n        var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n        return (height && height > _minHeight) ? height : _minHeight;\n    };\n    var _heightCalc = _defaultHeightCalc;\n    var _width, _height;\n    var _useViewBoxResizing = false;\n\n    var _keyAccessor = dc.pluck('key');\n    var _valueAccessor = dc.pluck('value');\n    var _label = dc.pluck('key');\n\n    var _ordering = dc.pluck('key');\n    var _orderSort;\n\n    var _renderLabel = false;\n\n    var _title = function (d) {\n        return _chart.keyAccessor()(d) + ': ' + _chart.valueAccessor()(d);\n    };\n    var _renderTitle = true;\n    var _controlsUseVisibility = false;\n\n    var _transitionDuration = 750;\n\n    var _transitionDelay = 0;\n\n    var _filterPrinter = dc.printers.filters;\n\n    var _mandatoryAttributes = ['dimension', 'group'];\n\n    var _chartGroup = dc.constants.DEFAULT_CHART_GROUP;\n\n    var _listeners = d3.dispatch(\n        'preRender',\n        'postRender',\n        'preRedraw',\n        'postRedraw',\n        'filtered',\n        'zoomed',\n        'renderlet',\n        'pretransition');\n\n    var _legend;\n    var _commitHandler;\n\n    var _filters = [];\n    var _filterHandler = function (dimension, filters) {\n        if (filters.length === 0) {\n            dimension.filter(null);\n        } else if (filters.length === 1 && !filters[0].isFiltered) {\n            // single value and not a function-based filter\n            dimension.filterExact(filters[0]);\n        } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n            // single range-based filter\n            dimension.filterRange(filters[0]);\n        } else {\n            dimension.filterFunction(function (d) {\n                for (var i = 0; i < filters.length; i++) {\n                    var filter = filters[i];\n                    if (filter.isFiltered && filter.isFiltered(d)) {\n                        return true;\n                    } else if (filter <= d && filter >= d) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n        }\n        return filters;\n    };\n\n    var _data = function (group) {\n        return group.all();\n    };\n\n    /**\n     * Set or get the height attribute of a chart. The height is applied to the SVGElement generated by\n     * the chart when rendered (or re-rendered). If a value is given, then it will be used to calculate\n     * the new height and the chart returned for method chaining.  The value can either be a numeric, a\n     * function, or falsy. If no value is specified then the value of the current height attribute will\n     * be returned.\n     *\n     * By default, without an explicit height being given, the chart will select the width of its\n     * anchor element. If that isn't possible it defaults to 200 (provided by the\n     * {@link dc.baseMixin#minHeight minHeight} property). Setting the value falsy will return\n     * the chart to the default behavior.\n     * @method height\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#minHeight minHeight}\n     * @example\n     * // Default height\n     * chart.height(function (element) {\n     *     var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n     *     return (height && height > chart.minHeight()) ? height : chart.minHeight();\n     * });\n     *\n     * chart.height(250); // Set the chart's height to 250px;\n     * chart.height(function(anchor) { return doSomethingWith(anchor); }); // set the chart's height with a function\n     * chart.height(null); // reset the height to the default auto calculation\n     * @param {Number|Function} [height]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.height = function (height) {\n        if (!arguments.length) {\n            if (!dc.utils.isNumber(_height)) {\n                // only calculate once\n                _height = _heightCalc(_root.node());\n            }\n            return _height;\n        }\n        _heightCalc = d3.functor(height || _defaultHeightCalc);\n        _height = undefined;\n        return _chart;\n    };\n\n    /**\n     * Set or get the width attribute of a chart.\n     * @method width\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#height height}\n     * @see {@link dc.baseMixin#minWidth minWidth}\n     * @example\n     * // Default width\n     * chart.width(function (element) {\n     *     var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n     *     return (width && width > chart.minWidth()) ? width : chart.minWidth();\n     * });\n     * @param {Number|Function} [width]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.width = function (width) {\n        if (!arguments.length) {\n            if (!dc.utils.isNumber(_width)) {\n                // only calculate once\n                _width = _widthCalc(_root.node());\n            }\n            return _width;\n        }\n        _widthCalc = d3.functor(width || _defaultWidthCalc);\n        _width = undefined;\n        return _chart;\n    };\n\n    /**\n     * Set or get the minimum width attribute of a chart. This only has effect when used with the default\n     * {@link dc.baseMixin#width width} function.\n     * @method minWidth\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#width width}\n     * @param {Number} [minWidth=200]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.minWidth = function (minWidth) {\n        if (!arguments.length) {\n            return _minWidth;\n        }\n        _minWidth = minWidth;\n        return _chart;\n    };\n\n    /**\n     * Set or get the minimum height attribute of a chart. This only has effect when used with the default\n     * {@link dc.baseMixin#height height} function.\n     * @method minHeight\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#height height}\n     * @param {Number} [minHeight=200]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.minHeight = function (minHeight) {\n        if (!arguments.length) {\n            return _minHeight;\n        }\n        _minHeight = minHeight;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off using the SVG\n     * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox `viewBox` attribute}.\n     * When enabled, `viewBox` will be set on the svg root element instead of `width` and `height`.\n     * Requires that the chart aspect ratio be defined using chart.width(w) and chart.height(h).\n     *\n     * This will maintain the aspect ratio while enabling the chart to resize responsively to the\n     * space given to the chart using CSS. For example, the chart can use `width: 100%; height:\n     * 100%` or absolute positioning to resize to its parent div.\n     *\n     * Since the text will be sized as if the chart is drawn according to the width and height, and\n     * will be resized if the chart is any other size, you need to set the chart width and height so\n     * that the text looks good. In practice, 600x400 seems to work pretty well for most charts.\n     *\n     * You can see examples of this resizing strategy in the [Chart Resizing\n     * Examples](http://dc-js.github.io/dc.js/resizing/); just add `?resize=viewbox` to any of the\n     * one-chart examples to enable `useViewBoxResizing`.\n     * @method useViewBoxResizing\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [useViewBoxResizing=false]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.useViewBoxResizing = function (useViewBoxResizing) {\n        if (!arguments.length) {\n            return _useViewBoxResizing;\n        }\n        _useViewBoxResizing = useViewBoxResizing;\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the dimension attribute of a chart. In `dc`, a dimension can be any valid\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter dimension}\n     *\n     * If a value is given, then it will be used as the new dimension. If no value is specified then\n     * the current dimension will be returned.\n     * @method dimension\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter.dimension}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(dc.pluck('key'));\n     * chart.dimension(dimension);\n     * @param {crossfilter.dimension} [dimension]\n     * @returns {crossfilter.dimension|dc.baseMixin}\n     */\n    _chart.dimension = function (dimension) {\n        if (!arguments.length) {\n            return _dimension;\n        }\n        _dimension = dimension;\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * Set the data callback or retrieve the chart's data set. The data callback is passed the chart's\n     * group and by default will return\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all}.\n     * This behavior may be modified to, for instance, return only the top 5 groups.\n     * @method data\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // Default data function\n     * chart.data(function (group) { return group.all(); });\n     *\n     * chart.data(function (group) { return group.top(5); });\n     * @param {Function} [callback]\n     * @returns {*|dc.baseMixin}\n     */\n    _chart.data = function (callback) {\n        if (!arguments.length) {\n            return _data.call(_chart, _group);\n        }\n        _data = d3.functor(callback);\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the group attribute of a chart. In `dc` a group is a\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter group}.\n     * Usually the group should be created from the particular dimension associated with the same chart. If a value is\n     * given, then it will be used as the new group.\n     *\n     * If no value specified then the current group will be returned.\n     * If `name` is specified then it will be used to generate legend label.\n     * @method group\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(dc.pluck('key'));\n     * chart.dimension(dimension);\n     * chart.group(dimension.group(crossfilter.reduceSum()));\n     * @param {crossfilter.group} [group]\n     * @param {String} [name]\n     * @returns {crossfilter.group|dc.baseMixin}\n     */\n    _chart.group = function (group, name) {\n        if (!arguments.length) {\n            return _group;\n        }\n        _group = group;\n        _chart._groupName = name;\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * Get or set an accessor to order ordinal dimensions.  The chart uses\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n     * to sort elements; this accessor returns the value to order on.\n     * @method ordering\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n     * @example\n     * // Default ordering accessor\n     * _chart.ordering(dc.pluck('key'));\n     * @param {Function} [orderFunction]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.ordering = function (orderFunction) {\n        if (!arguments.length) {\n            return _ordering;\n        }\n        _ordering = orderFunction;\n        _orderSort = crossfilter.quicksort.by(_ordering);\n        _chart.expireCache();\n        return _chart;\n    };\n\n    _chart._computeOrderedGroups = function (data) {\n        var dataCopy = data.slice(0);\n\n        if (dataCopy.length <= 1) {\n            return dataCopy;\n        }\n\n        if (!_orderSort) {\n            _orderSort = crossfilter.quicksort.by(_ordering);\n        }\n\n        return _orderSort(dataCopy, 0, dataCopy.length);\n    };\n\n    /**\n     * Clear all filters associated with this chart. The same effect can be achieved by calling\n     * {@link dc.baseMixin#filter chart.filter(null)}.\n     * @method filterAll\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.filterAll = function () {\n        return _chart.filter(null);\n    };\n\n    /**\n     * Execute d3 single selection in the chart's scope using the given selector and return the d3\n     * selection.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @method select\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_select d3.select}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').select(selector)\n     * chart.select(selector)\n     * @returns {d3.selection}\n     */\n    _chart.select = function (s) {\n        return _root.select(s);\n    };\n\n    /**\n     * Execute in scope d3 selectAll using the given selector and return d3 selection result.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @method selectAll\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_selectAll d3.selectAll}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').selectAll(selector)\n     * chart.selectAll(selector)\n     * @returns {d3.selection}\n     */\n    _chart.selectAll = function (s) {\n        return _root ? _root.selectAll(s) : null;\n    };\n\n    /**\n     * Set the root SVGElement to either be an existing chart's root; or any valid [d3 single\n     * selector](https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements) specifying a dom\n     * block element such as a div; or a dom element or d3 selection. Optionally registers the chart\n     * within the chartGroup. This class is called internally on chart initialization, but be called\n     * again to relocate the chart. However, it will orphan any previously created SVGElements.\n     * @method anchor\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {anchorChart|anchorSelector|anchorNode} [parent]\n     * @param {String} [chartGroup]\n     * @returns {String|node|d3.selection|dc.baseMixin}\n     */\n    _chart.anchor = function (parent, chartGroup) {\n        if (!arguments.length) {\n            return _anchor;\n        }\n        if (dc.instanceOfChart(parent)) {\n            _anchor = parent.anchor();\n            _root = parent.root();\n            _isChild = true;\n        } else if (parent) {\n            if (parent.select && parent.classed) { // detect d3 selection\n                _anchor = parent.node();\n            } else {\n                _anchor = parent;\n            }\n            _root = d3.select(_anchor);\n            _root.classed(dc.constants.CHART_CLASS, true);\n            dc.registerChart(_chart, chartGroup);\n            _isChild = false;\n        } else {\n            throw new dc.errors.BadArgumentException('parent must be defined');\n        }\n        _chartGroup = chartGroup;\n        return _chart;\n    };\n\n    /**\n     * Returns the DOM id for the chart's anchored location.\n     * @method anchorName\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {String}\n     */\n    _chart.anchorName = function () {\n        var a = _chart.anchor();\n        if (a && a.id) {\n            return a.id;\n        }\n        if (a && a.replace) {\n            return a.replace('#', '');\n        }\n        return 'dc-chart' + _chart.chartID();\n    };\n\n    /**\n     * Returns the root element where a chart resides. Usually it will be the parent div element where\n     * the SVGElement was created. You can also pass in a new root element however this is usually handled by\n     * dc internally. Resetting the root element on a chart outside of dc internals may have\n     * unexpected consequences.\n     * @method root\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement HTMLElement}\n     * @param {HTMLElement} [rootElement]\n     * @returns {HTMLElement|dc.baseMixin}\n     */\n    _chart.root = function (rootElement) {\n        if (!arguments.length) {\n            return _root;\n        }\n        _root = rootElement;\n        return _chart;\n    };\n\n    /**\n     * Returns the top SVGElement for this specific chart. You can also pass in a new SVGElement,\n     * however this is usually handled by dc internally. Resetting the SVGElement on a chart outside\n     * of dc internals may have unexpected consequences.\n     * @method svg\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @param {SVGElement|d3.selection} [svgElement]\n     * @returns {SVGElement|d3.selection|dc.baseMixin}\n     */\n    _chart.svg = function (svgElement) {\n        if (!arguments.length) {\n            return _svg;\n        }\n        _svg = svgElement;\n        return _chart;\n    };\n\n    /**\n     * Remove the chart's SVGElements from the dom and recreate the container SVGElement.\n     * @method resetSvg\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @returns {SVGElement}\n     */\n    _chart.resetSvg = function () {\n        _chart.select('svg').remove();\n        return generateSvg();\n    };\n\n    function sizeSvg () {\n        if (_svg) {\n            if (!_useViewBoxResizing) {\n                _svg\n                    .attr('width', _chart.width())\n                    .attr('height', _chart.height());\n            } else if (!_svg.attr('viewBox')) {\n                _svg\n                    .attr('viewBox', '0 0 ' + _chart.width() + ' ' + _chart.height());\n            }\n        }\n    }\n\n    function generateSvg () {\n        _svg = _chart.root().append('svg');\n        sizeSvg();\n        return _svg;\n    }\n\n    /**\n     * Set or get the filter printer function. The filter printer function is used to generate human\n     * friendly text for filter value(s) associated with the chart instance. The text will get shown\n     * in the `.filter element; see {@link dc.baseMixin#turnOnControls turnOnControls}.\n     *\n     * By default dc charts use a default filter printer {@link dc.printers.filters dc.printers.filters}\n     * that provides simple printing support for both single value and ranged filters.\n     * @method filterPrinter\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // for a chart with an ordinal brush, print the filters in upper case\n     * chart.filterPrinter(function(filters) {\n     *   return filters.map(function(f) { return f.toUpperCase(); }).join(', ');\n     * });\n     * // for a chart with a range brush, print the filter as start and extent\n     * chart.filterPrinter(function(filters) {\n     *   return 'start ' + dc.utils.printSingleValue(filters[0][0]) +\n     *     ' extent ' + dc.utils.printSingleValue(filters[0][1] - filters[0][0]);\n     * });\n     * @param {Function} [filterPrinterFunction=dc.printers.filters]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.filterPrinter = function (filterPrinterFunction) {\n        if (!arguments.length) {\n            return _filterPrinter;\n        }\n        _filterPrinter = filterPrinterFunction;\n        return _chart;\n    };\n\n    /**\n     * If set, use the `visibility` attribute instead of the `display` attribute for showing/hiding\n     * chart reset and filter controls, for less disruption to the layout.\n     * @method controlsUseVisibility\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [controlsUseVisibility=false]\n     * @returns {Boolean|dc.baseMixin}\n     **/\n    _chart.controlsUseVisibility = function (useVisibility) {\n        if (!arguments.length) {\n            return _controlsUseVisibility;\n        }\n        _controlsUseVisibility = useVisibility;\n        return _chart;\n    };\n\n    /**\n     * Turn on optional control elements within the root element. dc currently supports the\n     * following html control elements.\n     * * root.selectAll('.reset') - elements are turned on if the chart has an active filter. This type\n     * of control element is usually used to store a reset link to allow user to reset filter on a\n     * certain chart. This element will be turned off automatically if the filter is cleared.\n     * * root.selectAll('.filter') elements are turned on if the chart has an active filter. The text\n     * content of this element is then replaced with the current filter value using the filter printer\n     * function. This type of element will be turned off automatically if the filter is cleared.\n     * @method turnOnControls\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.turnOnControls = function () {\n        if (_root) {\n            var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n            _chart.selectAll('.reset').style(attribute, null);\n            _chart.selectAll('.filter').text(_filterPrinter(_chart.filters())).style(attribute, null);\n        }\n        return _chart;\n    };\n\n    /**\n     * Turn off optional control elements within the root element.\n     * @method turnOffControls\n     * @memberof dc.baseMixin\n     * @see {@link dc.baseMixin#turnOnControls turnOnControls}\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.turnOffControls = function () {\n        if (_root) {\n            var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n            var value = _chart.controlsUseVisibility() ? 'hidden' : 'none';\n            _chart.selectAll('.reset').style(attribute, value);\n            _chart.selectAll('.filter').style(attribute, value).text(_chart.filter());\n        }\n        return _chart;\n    };\n\n    /**\n     * Set or get the animation transition duration (in milliseconds) for this chart instance.\n     * @method transitionDuration\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Number} [duration=750]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.transitionDuration = function (duration) {\n        if (!arguments.length) {\n            return _transitionDuration;\n        }\n        _transitionDuration = duration;\n        return _chart;\n    };\n\n    /**\n     * Set or get the animation transition delay (in milliseconds) for this chart instance.\n     * @method transitionDelay\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Number} [delay=0]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.transitionDelay = function (delay) {\n        if (!arguments.length) {\n            return _transitionDelay;\n        }\n        _transitionDelay = delay;\n        return _chart;\n    };\n\n    _chart._mandatoryAttributes = function (_) {\n        if (!arguments.length) {\n            return _mandatoryAttributes;\n        }\n        _mandatoryAttributes = _;\n        return _chart;\n    };\n\n    function checkForMandatoryAttributes (a) {\n        if (!_chart[a] || !_chart[a]()) {\n            throw new dc.errors.InvalidStateException('Mandatory attribute chart.' + a +\n                ' is missing on chart[#' + _chart.anchorName() + ']');\n        }\n    }\n\n    /**\n     * Invoking this method will force the chart to re-render everything from scratch. Generally it\n     * should only be used to render the chart for the first time on the page or if you want to make\n     * sure everything is redrawn from scratch instead of relying on the default incremental redrawing\n     * behaviour.\n     * @method render\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.render = function () {\n        _height = _width = undefined; // force recalculate\n        _listeners.preRender(_chart);\n\n        if (_mandatoryAttributes) {\n            _mandatoryAttributes.forEach(checkForMandatoryAttributes);\n        }\n\n        var result = _chart._doRender();\n\n        if (_legend) {\n            _legend.render();\n        }\n\n        _chart._activateRenderlets('postRender');\n\n        return result;\n    };\n\n    _chart._activateRenderlets = function (event) {\n        _listeners.pretransition(_chart);\n        if (_chart.transitionDuration() > 0 && _svg) {\n            _svg.transition().duration(_chart.transitionDuration()).delay(_chart.transitionDelay())\n                .each('end', function () {\n                    _listeners.renderlet(_chart);\n                    if (event) {\n                        _listeners[event](_chart);\n                    }\n                });\n        } else {\n            _listeners.renderlet(_chart);\n            if (event) {\n                _listeners[event](_chart);\n            }\n        }\n    };\n\n    /**\n     * Calling redraw will cause the chart to re-render data changes incrementally. If there is no\n     * change in the underlying data dimension then calling this method will have no effect on the\n     * chart. Most chart interaction in dc will automatically trigger this method through internal\n     * events (in particular {@link dc.redrawAll dc.redrawAll}); therefore, you only need to\n     * manually invoke this function if data is manipulated outside of dc's control (for example if\n     * data is loaded in the background using\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}).\n     * @method redraw\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.redraw = function () {\n        sizeSvg();\n        _listeners.preRedraw(_chart);\n\n        var result = _chart._doRedraw();\n\n        if (_legend) {\n            _legend.render();\n        }\n\n        _chart._activateRenderlets('postRedraw');\n\n        return result;\n    };\n\n    /**\n     * Gets/sets the commit handler. If the chart has a commit handler, the handler will be called when\n     * the chart's filters have changed, in order to send the filter data asynchronously to a server.\n     *\n     * Unlike other functions in dc.js, the commit handler is asynchronous. It takes two arguments:\n     * a flag indicating whether this is a render (true) or a redraw (false), and a callback to be\n     * triggered once the commit is filtered. The callback has the standard node.js continuation signature\n     * with error first and result second.\n     * @method commitHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.commitHandler = function (commitHandler) {\n        if (!arguments.length) {\n            return _commitHandler;\n        }\n        _commitHandler = commitHandler;\n        return _chart;\n    };\n\n    /**\n     * Redraws all charts in the same group as this chart, typically in reaction to a filter\n     * change. If the chart has a {@link dc.baseMixin.commitFilter commitHandler}, it will\n     * be executed and waited for.\n     * @method redrawGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.redrawGroup = function () {\n        if (_commitHandler) {\n            _commitHandler(false, function (error, result) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    dc.redrawAll(_chart.chartGroup());\n                }\n            });\n        } else {\n            dc.redrawAll(_chart.chartGroup());\n        }\n        return _chart;\n    };\n\n    /**\n     * Renders all charts in the same group as this chart. If the chart has a\n     * {@link dc.baseMixin.commitFilter commitHandler}, it will be executed and waited for\n     * @method renderGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.renderGroup = function () {\n        if (_commitHandler) {\n            _commitHandler(false, function (error, result) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    dc.renderAll(_chart.chartGroup());\n                }\n            });\n        } else {\n            dc.renderAll(_chart.chartGroup());\n        }\n        return _chart;\n    };\n\n    _chart._invokeFilteredListener = function (f) {\n        if (f !== undefined) {\n            _listeners.filtered(_chart, f);\n        }\n    };\n\n    _chart._invokeZoomedListener = function () {\n        _listeners.zoomed(_chart);\n    };\n\n    var _hasFilterHandler = function (filters, filter) {\n        if (filter === null || typeof(filter) === 'undefined') {\n            return filters.length > 0;\n        }\n        return filters.some(function (f) {\n            return filter <= f && filter >= f;\n        });\n    };\n\n    /**\n     * Set or get the has-filter handler. The has-filter handler is a function that checks to see if\n     * the chart's current filters (first argument) include a specific filter (second argument).  Using a custom has-filter handler allows\n     * you to change the way filters are checked for and replaced.\n     * @method hasFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default has-filter handler\n     * chart.hasFilterHandler(function (filters, filter) {\n     *     if (filter === null || typeof(filter) === 'undefined') {\n     *         return filters.length > 0;\n     *     }\n     *     return filters.some(function (f) {\n     *         return filter <= f && filter >= f;\n     *     });\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.hasFilterHandler(function(filters, filter) {\n     *     return false;\n     * });\n     * @param {Function} [hasFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.hasFilterHandler = function (hasFilterHandler) {\n        if (!arguments.length) {\n            return _hasFilterHandler;\n        }\n        _hasFilterHandler = hasFilterHandler;\n        return _chart;\n    };\n\n    /**\n     * Check whether any active filter or a specific filter is associated with particular chart instance.\n     * This function is **not chainable**.\n     * @method hasFilter\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#hasFilterHandler hasFilterHandler}\n     * @param {*} [filter]\n     * @returns {Boolean}\n     */\n    _chart.hasFilter = function (filter) {\n        return _hasFilterHandler(_filters, filter);\n    };\n\n    var _removeFilterHandler = function (filters, filter) {\n        for (var i = 0; i < filters.length; i++) {\n            if (filters[i] <= filter && filters[i] >= filter) {\n                filters.splice(i, 1);\n                break;\n            }\n        }\n        return filters;\n    };\n\n    /**\n     * Set or get the remove filter handler. The remove filter handler is a function that removes a\n     * filter from the chart's current filters. Using a custom remove filter handler allows you to\n     * change how filters are removed or perform additional work when removing a filter, e.g. when\n     * using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method removeFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default remove filter handler\n     * chart.removeFilterHandler(function (filters, filter) {\n     *     for (var i = 0; i < filters.length; i++) {\n     *         if (filters[i] <= filter && filters[i] >= filter) {\n     *             filters.splice(i, 1);\n     *             break;\n     *         }\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.removeFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [removeFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.removeFilterHandler = function (removeFilterHandler) {\n        if (!arguments.length) {\n            return _removeFilterHandler;\n        }\n        _removeFilterHandler = removeFilterHandler;\n        return _chart;\n    };\n\n    var _addFilterHandler = function (filters, filter) {\n        filters.push(filter);\n        return filters;\n    };\n\n    /**\n     * Set or get the add filter handler. The add filter handler is a function that adds a filter to\n     * the chart's filter list. Using a custom add filter handler allows you to change the way filters\n     * are added or perform additional work when adding a filter, e.g. when using a filter server other\n     * than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method addFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default add filter handler\n     * chart.addFilterHandler(function (filters, filter) {\n     *     filters.push(filter);\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.addFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [addFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.addFilterHandler = function (addFilterHandler) {\n        if (!arguments.length) {\n            return _addFilterHandler;\n        }\n        _addFilterHandler = addFilterHandler;\n        return _chart;\n    };\n\n    var _resetFilterHandler = function (filters) {\n        return [];\n    };\n\n    /**\n     * Set or get the reset filter handler. The reset filter handler is a function that resets the\n     * chart's filter list by returning a new list. Using a custom reset filter handler allows you to\n     * change the way filters are reset, or perform additional work when resetting the filters,\n     * e.g. when using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method resetFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default remove filter handler\n     * function (filters) {\n     *     return [];\n     * }\n     *\n     * // custom filter handler (no-op)\n     * chart.resetFilterHandler(function(filters) {\n     *     return filters;\n     * });\n     * @param {Function} [resetFilterHandler]\n     * @returns {dc.baseMixin}\n     */\n    _chart.resetFilterHandler = function (resetFilterHandler) {\n        if (!arguments.length) {\n            return _resetFilterHandler;\n        }\n        _resetFilterHandler = resetFilterHandler;\n        return _chart;\n    };\n\n    function applyFilters (filters) {\n        if (_chart.dimension() && _chart.dimension().filter) {\n            var fs = _filterHandler(_chart.dimension(), filters);\n            if (fs) {\n                filters = fs;\n            }\n        }\n        return filters;\n    }\n\n    /**\n     * Replace the chart filter. This is equivalent to calling `chart.filter(null).filter(filter)`\n     * but more efficient because the filter is only applied once.\n     *\n     * @method replaceFilter\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {*} [filter]\n     * @returns {dc.baseMixin}\n     **/\n    _chart.replaceFilter = function (filter) {\n        _filters = _resetFilterHandler(_filters);\n        _chart.filter(filter);\n        return _chart;\n    };\n\n    /**\n     * Filter the chart by the given parameter, or return the current filter if no input parameter\n     * is given.\n     *\n     * The filter parameter can take one of these forms:\n     * * A single value: the value will be toggled (added if it is not present in the current\n     * filters, removed if it is present)\n     * * An array containing a single array of values (`[[value,value,value]]`): each value is\n     * toggled\n     * * When appropriate for the chart, a {@link dc.filters dc filter object} such as\n     *   * {@link dc.filters.RangedFilter `dc.filters.RangedFilter`} for the\n     * {@link dc.coordinateGridMixin dc.coordinateGridMixin} charts\n     *   * {@link dc.filters.TwoDimensionalFilter `dc.filters.TwoDimensionalFilter`} for the\n     * {@link dc.heatMap heat map}\n     *   * {@link dc.filters.RangedTwoDimensionalFilter `dc.filters.RangedTwoDimensionalFilter`}\n     * for the {@link dc.scatterPlot scatter plot}\n     * * `null`: the filter will be reset using the\n     * {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n     *\n     * Note that this is always a toggle (even when it doesn't make sense for the filter type). If\n     * you wish to replace the current filter, either call `chart.filter(null)` first - or it's more\n     * efficient to call {@link dc.baseMixin#replaceFilter `chart.replaceFilter(filter)`} instead.\n     *\n     * Each toggle is executed by checking if the value is already present using the\n     * {@link dc.baseMixin#hasFilterHandler hasFilterHandler}; if it is not present, it is added\n     * using the {@link dc.baseMixin#addFilterHandler addFilterHandler}; if it is already present,\n     * it is removed using the {@link dc.baseMixin#removeFilterHandler removeFilterHandler}.\n     *\n     * Once the filters array has been updated, the filters are applied to the\n     * crossfilter dimension, using the {@link dc.baseMixin#filterHandler filterHandler}.\n     *\n     * Once you have set the filters, call {@link dc.baseMixin#redrawGroup `chart.redrawGroup()`}\n     * (or {@link dc.redrawAll `dc.redrawAll()`}) to redraw the chart's group.\n     * @method filter\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#addFilterHandler addFilterHandler}\n     * @see {@link dc.baseMixin#removeFilterHandler removeFilterHandler}\n     * @see {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n     * @see {@link dc.baseMixin#filterHandler filterHandler}\n     * @example\n     * // filter by a single string\n     * chart.filter('Sunday');\n     * // filter by a single age\n     * chart.filter(18);\n     * // filter by a set of states\n     * chart.filter([['MA', 'TX', 'ND', 'WA']]);\n     * // filter by range -- note the use of dc.filters.RangedFilter, which is different\n     * // from the syntax for filtering a crossfilter dimension directly, dimension.filter([15,20])\n     * chart.filter(dc.filters.RangedFilter(15,20));\n     * @param {*} [filter]\n     * @returns {dc.baseMixin}\n     */\n    _chart.filter = function (filter) {\n        if (!arguments.length) {\n            return _filters.length > 0 ? _filters[0] : null;\n        }\n        var filters = _filters;\n        if (filter instanceof Array && filter[0] instanceof Array && !filter.isFiltered) {\n            // toggle each filter\n            filter[0].forEach(function (f) {\n                if (_hasFilterHandler(filters, f)) {\n                    filters = _removeFilterHandler(filters, f);\n                } else {\n                    filters = _addFilterHandler(filters, f);\n                }\n            });\n        } else if (filter === null) {\n            filters = _resetFilterHandler(filters);\n        } else {\n            if (_hasFilterHandler(filters, filter)) {\n                filters = _removeFilterHandler(filters, filter);\n            } else {\n                filters = _addFilterHandler(filters, filter);\n            }\n        }\n        _filters = applyFilters(filters);\n        _chart._invokeFilteredListener(filter);\n\n        if (_root !== null && _chart.hasFilter()) {\n            _chart.turnOnControls();\n        } else {\n            _chart.turnOffControls();\n        }\n\n        return _chart;\n    };\n\n    /**\n     * Returns all current filters. This method does not perform defensive cloning of the internal\n     * filter array before returning, therefore any modification of the returned array will effect the\n     * chart's internal filter storage.\n     * @method filters\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {Array<*>}\n     */\n    _chart.filters = function () {\n        return _filters;\n    };\n\n    _chart.highlightSelected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, true);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n    };\n\n    _chart.fadeDeselected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, true);\n    };\n\n    _chart.resetHighlight = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n    };\n\n    /**\n     * This function is passed to d3 as the onClick handler for each chart. The default behavior is to\n     * filter on the clicked datum (passed to the callback) and redraw the chart group.\n     * @method onClick\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {*} datum\n     */\n    _chart.onClick = function (datum) {\n        var filter = _chart.keyAccessor()(datum);\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    /**\n     * Set or get the filter handler. The filter handler is a function that performs the filter action\n     * on a specific dimension. Using a custom filter handler allows you to perform additional logic\n     * before or after filtering.\n     * @method filterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter crossfilter.dimension.filter}\n     * @example\n     * // the default filter handler handles all possible cases for the charts in dc.js\n     * // you can replace it with something more specialized for your own chart\n     * chart.filterHandler(function (dimension, filters) {\n     *     if (filters.length === 0) {\n     *         // the empty case (no filtering)\n     *         dimension.filter(null);\n     *     } else if (filters.length === 1 && !filters[0].isFiltered) {\n     *         // single value and not a function-based filter\n     *         dimension.filterExact(filters[0]);\n     *     } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n     *         // single range-based filter\n     *         dimension.filterRange(filters[0]);\n     *     } else {\n     *         // an array of values, or an array of filter objects\n     *         dimension.filterFunction(function (d) {\n     *             for (var i = 0; i < filters.length; i++) {\n     *                 var filter = filters[i];\n     *                 if (filter.isFiltered && filter.isFiltered(d)) {\n     *                     return true;\n     *                 } else if (filter <= d && filter >= d) {\n     *                     return true;\n     *                 }\n     *             }\n     *             return false;\n     *         });\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler\n     * chart.filterHandler(function(dimension, filter){\n     *     var newFilter = filter + 10;\n     *     dimension.filter(newFilter);\n     *     return newFilter; // set the actual filter value to the new value\n     * });\n     * @param {Function} [filterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.filterHandler = function (filterHandler) {\n        if (!arguments.length) {\n            return _filterHandler;\n        }\n        _filterHandler = filterHandler;\n        return _chart;\n    };\n\n    // abstract function stub\n    _chart._doRender = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    _chart.legendables = function () {\n        // do nothing in base, should be overridden by sub-function\n        return [];\n    };\n\n    _chart.legendHighlight = function () {\n        // do nothing in base, should be overridden by sub-function\n    };\n\n    _chart.legendReset = function () {\n        // do nothing in base, should be overridden by sub-function\n    };\n\n    _chart.legendToggle = function () {\n        // do nothing in base, should be overriden by sub-function\n    };\n\n    _chart.isLegendableHidden = function () {\n        // do nothing in base, should be overridden by sub-function\n        return false;\n    };\n\n    /**\n     * Set or get the key accessor function. The key accessor function is used to retrieve the key\n     * value from the crossfilter group. Key values are used differently in different charts, for\n     * example keys correspond to slices in a pie chart and x axis positions in a grid coordinate chart.\n     * @method keyAccessor\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default key accessor\n     * chart.keyAccessor(function(d) { return d.key; });\n     * // custom key accessor for a multi-value crossfilter reduction\n     * chart.keyAccessor(function(p) { return p.value.absGain; });\n     * @param {Function} [keyAccessor]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.keyAccessor = function (keyAccessor) {\n        if (!arguments.length) {\n            return _keyAccessor;\n        }\n        _keyAccessor = keyAccessor;\n        return _chart;\n    };\n\n    /**\n     * Set or get the value accessor function. The value accessor function is used to retrieve the\n     * value from the crossfilter group. Group values are used differently in different charts, for\n     * example values correspond to slice sizes in a pie chart and y axis positions in a grid\n     * coordinate chart.\n     * @method valueAccessor\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default value accessor\n     * chart.valueAccessor(function(d) { return d.value; });\n     * // custom value accessor for a multi-value crossfilter reduction\n     * chart.valueAccessor(function(p) { return p.value.percentageGain; });\n     * @param {Function} [valueAccessor]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.valueAccessor = function (valueAccessor) {\n        if (!arguments.length) {\n            return _valueAccessor;\n        }\n        _valueAccessor = valueAccessor;\n        return _chart;\n    };\n\n    /**\n     * Set or get the label function. The chart class will use this function to render labels for each\n     * child element in the chart, e.g. slices in a pie chart or bubbles in a bubble chart. Not every\n     * chart supports the label function, for example line chart does not use this function\n     * at all. By default, enables labels; pass false for the second parameter if this is not desired.\n     * @method label\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default label function just return the key\n     * chart.label(function(d) { return d.key; });\n     * // label function has access to the standard d3 data binding and can get quite complicated\n     * chart.label(function(d) { return d.data.key + '(' + Math.floor(d.data.value / all.value() * 100) + '%)'; });\n     * @param {Function} [labelFunction]\n     * @param {Boolean} [enableLabels=true]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.label = function (labelFunction, enableLabels) {\n        if (!arguments.length) {\n            return _label;\n        }\n        _label = labelFunction;\n        if ((enableLabels === undefined) || enableLabels) {\n            _renderLabel = true;\n        }\n        return _chart;\n    };\n\n    /**\n     * Turn on/off label rendering\n     * @method renderLabel\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [renderLabel=false]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.renderLabel = function (renderLabel) {\n        if (!arguments.length) {\n            return _renderLabel;\n        }\n        _renderLabel = renderLabel;\n        return _chart;\n    };\n\n    /**\n     * Set or get the title function. The chart class will use this function to render the SVGElement title\n     * (usually interpreted by browser as tooltips) for each child element in the chart, e.g. a slice\n     * in a pie chart or a bubble in a bubble chart. Almost every chart supports the title function;\n     * however in grid coordinate charts you need to turn off the brush in order to see titles, because\n     * otherwise the brush layer will block tooltip triggering.\n     * @method title\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default title function shows \"key: value\"\n     * chart.title(function(d) { return d.key + ': ' + d.value; });\n     * // title function has access to the standard d3 data binding and can get quite complicated\n     * chart.title(function(p) {\n     *    return p.key.getFullYear()\n     *        + '\\n'\n     *        + 'Index Gain: ' + numberFormat(p.value.absGain) + '\\n'\n     *        + 'Index Gain in Percentage: ' + numberFormat(p.value.percentageGain) + '%\\n'\n     *        + 'Fluctuation / Index Ratio: ' + numberFormat(p.value.fluctuationPercentage) + '%';\n     * });\n     * @param {Function} [titleFunction]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.title = function (titleFunction) {\n        if (!arguments.length) {\n            return _title;\n        }\n        _title = titleFunction;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off title rendering, or return the state of the render title flag if no arguments are\n     * given.\n     * @method renderTitle\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [renderTitle=true]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.renderTitle = function (renderTitle) {\n        if (!arguments.length) {\n            return _renderTitle;\n        }\n        _renderTitle = renderTitle;\n        return _chart;\n    };\n\n    /**\n     * A renderlet is similar to an event listener on rendering event. Multiple renderlets can be added\n     * to an individual chart.  Each time a chart is rerendered or redrawn the renderlets are invoked\n     * right after the chart finishes its transitions, giving you a way to modify the SVGElements.\n     * Renderlet functions take the chart instance as the only input parameter and you can\n     * use the dc API or use raw d3 to achieve pretty much any effect.\n     *\n     * Use {@link dc.baseMixin#on on} with a 'renderlet' prefix.\n     * Generates a random key for the renderlet, which makes it hard to remove.\n     * @method renderlet\n     * @memberof dc.baseMixin\n     * @instance\n     * @deprecated\n     * @example\n     * // do this instead of .renderlet(function(chart) { ... })\n     * chart.on(\"renderlet\", function(chart){\n     *     // mix of dc API and d3 manipulation\n     *     chart.select('g.y').style('display', 'none');\n     *     // its a closure so you can also access other chart variable available in the closure scope\n     *     moveChart.filter(chart.filter());\n     * });\n     * @param {Function} renderletFunction\n     * @returns {dc.baseMixin}\n     */\n    _chart.renderlet = dc.logger.deprecate(function (renderletFunction) {\n        _chart.on('renderlet.' + dc.utils.uniqueId(), renderletFunction);\n        return _chart;\n    }, 'chart.renderlet has been deprecated.  Please use chart.on(\"renderlet.<renderletKey>\", renderletFunction)');\n\n    /**\n     * Get or set the chart group to which this chart belongs. Chart groups are rendered or redrawn\n     * together since it is expected they share the same underlying crossfilter data set.\n     * @method chartGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {String} [chartGroup]\n     * @returns {String|dc.baseMixin}\n     */\n    _chart.chartGroup = function (chartGroup) {\n        if (!arguments.length) {\n            return _chartGroup;\n        }\n        if (!_isChild) {\n            dc.deregisterChart(_chart, _chartGroup);\n        }\n        _chartGroup = chartGroup;\n        if (!_isChild) {\n            dc.registerChart(_chart, _chartGroup);\n        }\n        return _chart;\n    };\n\n    /**\n     * Expire the internal chart cache. dc charts cache some data internally on a per chart basis to\n     * speed up rendering and avoid unnecessary calculation; however it might be useful to clear the\n     * cache if you have changed state which will affect rendering.  For example, if you invoke\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}\n     * function or reset group or dimension after rendering, it is a good idea to\n     * clear the cache to make sure charts are rendered properly.\n     * @method expireCache\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.expireCache = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    /**\n     * Attach a dc.legend widget to this chart. The legend widget will automatically draw legend labels\n     * based on the color setting and names associated with each group.\n     * @method legend\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n     * @param {dc.legend} [legend]\n     * @returns {dc.legend|dc.baseMixin}\n     */\n    _chart.legend = function (legend) {\n        if (!arguments.length) {\n            return _legend;\n        }\n        _legend = legend;\n        _legend.parent(_chart);\n        return _chart;\n    };\n\n    /**\n     * Returns the internal numeric ID of the chart.\n     * @method chartID\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {String}\n     */\n    _chart.chartID = function () {\n        return _chart.__dcFlag__;\n    };\n\n    /**\n     * Set chart options using a configuration object. Each key in the object will cause the method of\n     * the same name to be called with the value to set that attribute for the chart.\n     * @method options\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * chart.options({dimension: myDimension, group: myGroup});\n     * @param {{}} opts\n     * @returns {dc.baseMixin}\n     */\n    _chart.options = function (opts) {\n        var applyOptions = [\n            'anchor',\n            'group',\n            'xAxisLabel',\n            'yAxisLabel',\n            'stack',\n            'title',\n            'point',\n            'getColor',\n            'overlayGeoJson'\n        ];\n\n        for (var o in opts) {\n            if (typeof(_chart[o]) === 'function') {\n                if (opts[o] instanceof Array && applyOptions.indexOf(o) !== -1) {\n                    _chart[o].apply(_chart, opts[o]);\n                } else {\n                    _chart[o].call(_chart, opts[o]);\n                }\n            } else {\n                dc.logger.debug('Not a valid option setter name: ' + o);\n            }\n        }\n        return _chart;\n    };\n\n    /**\n     * All dc chart instance supports the following listeners.\n     * Supports the following events:\n     * * `renderlet` - This listener function will be invoked after transitions after redraw and render. Replaces the\n     * deprecated {@link dc.baseMixin#renderlet renderlet} method.\n     * * `pretransition` - Like `.on('renderlet', ...)` but the event is fired before transitions start.\n     * * `preRender` - This listener function will be invoked before chart rendering.\n     * * `postRender` - This listener function will be invoked after chart finish rendering including\n     * all renderlets' logic.\n     * * `preRedraw` - This listener function will be invoked before chart redrawing.\n     * * `postRedraw` - This listener function will be invoked after chart finish redrawing\n     * including all renderlets' logic.\n     * * `filtered` - This listener function will be invoked after a filter is applied, added or removed.\n     * * `zoomed` - This listener function will be invoked after a zoom is triggered.\n     * @method on\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Internals.md#dispatch_on d3.dispatch.on}\n     * @example\n     * .on('renderlet', function(chart, filter){...})\n     * .on('pretransition', function(chart, filter){...})\n     * .on('preRender', function(chart){...})\n     * .on('postRender', function(chart){...})\n     * .on('preRedraw', function(chart){...})\n     * .on('postRedraw', function(chart){...})\n     * .on('filtered', function(chart, filter){...})\n     * .on('zoomed', function(chart, filter){...})\n     * @param {String} event\n     * @param {Function} listener\n     * @returns {dc.baseMixin}\n     */\n    _chart.on = function (event, listener) {\n        _listeners.on(event, listener);\n        return _chart;\n    };\n\n    return _chart;\n};\n\n/**\n * Margin is a mixin that provides margin utility functions for both the Row Chart and Coordinate Grid\n * Charts.\n * @name marginMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.marginMixin}\n */\ndc.marginMixin = function (_chart) {\n    var _margin = {top: 10, right: 50, bottom: 30, left: 30};\n\n    /**\n     * Get or set the margins for a particular coordinate grid chart instance. The margins is stored as\n     * an associative Javascript array.\n     * @method margins\n     * @memberof dc.marginMixin\n     * @instance\n     * @example\n     * var leftMargin = chart.margins().left; // 30 by default\n     * chart.margins().left = 50;\n     * leftMargin = chart.margins().left; // now 50\n     * @param {{top: Number, right: Number, left: Number, bottom: Number}} [margins={top: 10, right: 50, bottom: 30, left: 30}]\n     * @returns {{top: Number, right: Number, left: Number, bottom: Number}|dc.marginMixin}\n     */\n    _chart.margins = function (margins) {\n        if (!arguments.length) {\n            return _margin;\n        }\n        _margin = margins;\n        return _chart;\n    };\n\n    _chart.effectiveWidth = function () {\n        return _chart.width() - _chart.margins().left - _chart.margins().right;\n    };\n\n    _chart.effectiveHeight = function () {\n        return _chart.height() - _chart.margins().top - _chart.margins().bottom;\n    };\n\n    return _chart;\n};\n\n/**\n * The Color Mixin is an abstract chart functional class providing universal coloring support\n * as a mix-in for any concrete chart implementation.\n * @name colorMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.colorMixin}\n */\ndc.colorMixin = function (_chart) {\n    var _colors = d3.scale.category20c();\n    var _defaultAccessor = true;\n\n    var _colorAccessor = function (d) { return _chart.keyAccessor()(d); };\n\n    /**\n     * Retrieve current color scale or set a new color scale. This methods accepts any function that\n     * operates like a d3 scale.\n     * @method colors\n     * @memberof dc.colorMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @example\n     * // alternate categorical scale\n     * chart.colors(d3.scale.category20b());\n     * // ordinal scale\n     * chart.colors(d3.scale.ordinal().range(['red','green','blue']));\n     * // convenience method, the same as above\n     * chart.ordinalColors(['red','green','blue']);\n     * // set a linear scale\n     * chart.linearColors([\"#4575b4\", \"#ffffbf\", \"#a50026\"]);\n     * @param {d3.scale} [colorScale=d3.scale.category20c()]\n     * @returns {d3.scale|dc.colorMixin}\n     */\n    _chart.colors = function (colorScale) {\n        if (!arguments.length) {\n            return _colors;\n        }\n        if (colorScale instanceof Array) {\n            _colors = d3.scale.quantize().range(colorScale); // deprecated legacy support, note: this fails for ordinal domains\n        } else {\n            _colors = d3.functor(colorScale);\n        }\n        return _chart;\n    };\n\n    /**\n     * Convenience method to set the color scale to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal d3.scale.ordinal} with\n     * range `r`.\n     * @method ordinalColors\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<String>} r\n     * @returns {dc.colorMixin}\n     */\n    _chart.ordinalColors = function (r) {\n        return _chart.colors(d3.scale.ordinal().range(r));\n    };\n\n    /**\n     * Convenience method to set the color scale to an Hcl interpolated linear scale with range `r`.\n     * @method linearColors\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<Number>} r\n     * @returns {dc.colorMixin}\n     */\n    _chart.linearColors = function (r) {\n        return _chart.colors(d3.scale.linear()\n                             .range(r)\n                             .interpolate(d3.interpolateHcl));\n    };\n\n    /**\n     * Set or the get color accessor function. This function will be used to map a data point in a\n     * crossfilter group to a color value on the color scale. The default function uses the key\n     * accessor.\n     * @method colorAccessor\n     * @memberof dc.colorMixin\n     * @instance\n     * @example\n     * // default index based color accessor\n     * .colorAccessor(function (d, i){return i;})\n     * // color accessor for a multi-value crossfilter reduction\n     * .colorAccessor(function (d){return d.value.absGain;})\n     * @param {Function} [colorAccessor]\n     * @returns {Function|dc.colorMixin}\n     */\n    _chart.colorAccessor = function (colorAccessor) {\n        if (!arguments.length) {\n            return _colorAccessor;\n        }\n        _colorAccessor = colorAccessor;\n        _defaultAccessor = false;\n        return _chart;\n    };\n\n    // what is this?\n    _chart.defaultColorAccessor = function () {\n        return _defaultAccessor;\n    };\n\n    /**\n     * Set or get the current domain for the color mapping function. The domain must be supplied as an\n     * array.\n     *\n     * Note: previously this method accepted a callback function. Instead you may use a custom scale\n     * set by {@link dc.colorMixin#colors .colors}.\n     * @method colorDomain\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<String>} [domain]\n     * @returns {Array<String>|dc.colorMixin}\n     */\n    _chart.colorDomain = function (domain) {\n        if (!arguments.length) {\n            return _colors.domain();\n        }\n        _colors.domain(domain);\n        return _chart;\n    };\n\n    /**\n     * Set the domain by determining the min and max values as retrieved by\n     * {@link dc.colorMixin#colorAccessor .colorAccessor} over the chart's dataset.\n     * @method calculateColorDomain\n     * @memberof dc.colorMixin\n     * @instance\n     * @returns {dc.colorMixin}\n     */\n    _chart.calculateColorDomain = function () {\n        var newDomain = [d3.min(_chart.data(), _chart.colorAccessor()),\n                         d3.max(_chart.data(), _chart.colorAccessor())];\n        _colors.domain(newDomain);\n        return _chart;\n    };\n\n    /**\n     * Get the color for the datum d and counter i. This is used internally by charts to retrieve a color.\n     * @method getColor\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {*} d\n     * @param {Number} [i]\n     * @returns {String}\n     */\n    _chart.getColor = function (d, i) {\n        return _colors(_colorAccessor.call(this, d, i));\n    };\n\n    /**\n     * **Deprecated.** Get/set the color calculator. This actually replaces the\n     * {@link dc.colorMixin#getColor getColor} method!\n     *\n     * This is not recommended, since using a {@link dc.colorMixin#colorAccessor colorAccessor} and\n     * color scale ({@link dc.colorMixin#colors .colors}) is more powerful and idiomatic d3.\n     * @method colorCalculator\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {*} [colorCalculator]\n     * @returns {Function|dc.colorMixin}\n     */\n    _chart.colorCalculator = dc.logger.deprecate(function (colorCalculator) {\n        if (!arguments.length) {\n            return _chart.getColor;\n        }\n        _chart.getColor = colorCalculator;\n        return _chart;\n    }, 'colorMixin.colorCalculator has been deprecated. Please colorMixin.colors and colorMixin.colorAccessor instead');\n\n    return _chart;\n};\n\n/**\n * Coordinate Grid is an abstract base chart designed to support a number of coordinate grid based\n * concrete chart types, e.g. bar chart, line chart, and bubble chart.\n * @name coordinateGridMixin\n * @memberof dc\n * @mixin\n * @mixes dc.colorMixin\n * @mixes dc.marginMixin\n * @mixes dc.baseMixin\n * @param {Object} _chart\n * @returns {dc.coordinateGridMixin}\n */\ndc.coordinateGridMixin = function (_chart) {\n    var GRID_LINE_CLASS = 'grid-line';\n    var HORIZONTAL_CLASS = 'horizontal';\n    var VERTICAL_CLASS = 'vertical';\n    var Y_AXIS_LABEL_CLASS = 'y-axis-label';\n    var X_AXIS_LABEL_CLASS = 'x-axis-label';\n    var DEFAULT_AXIS_LABEL_PADDING = 12;\n\n    _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin(_chart)));\n\n    _chart.colors(d3.scale.category10());\n    _chart._mandatoryAttributes().push('x');\n    var _parent;\n    var _g;\n    var _chartBodyG;\n\n    var _x;\n    var _xOriginalDomain;\n    var _xAxis = d3.svg.axis().orient('bottom');\n    var _xUnits = dc.units.integers;\n    var _xAxisPadding = 0;\n    var _xAxisPaddingUnit = 'day';\n    var _xElasticity = false;\n    var _xAxisLabel;\n    var _xAxisLabelPadding = 0;\n    var _lastXDomain;\n\n    var _y;\n    var _yAxis = d3.svg.axis().orient('left');\n    var _yAxisPadding = 0;\n    var _yElasticity = false;\n    var _yAxisLabel;\n    var _yAxisLabelPadding = 0;\n\n    var _brush = d3.svg.brush();\n    var _brushOn = true;\n    var _round;\n\n    var _renderHorizontalGridLine = false;\n    var _renderVerticalGridLine = false;\n\n    var _refocused = false, _resizing = false;\n    var _unitCount;\n\n    var _zoomScale = [1, Infinity];\n    var _zoomOutRestrict = true;\n\n    var _zoom = d3.behavior.zoom().on('zoom', zoomHandler);\n    var _nullZoom = d3.behavior.zoom().on('zoom', null);\n    var _hasBeenMouseZoomable = false;\n\n    var _rangeChart;\n    var _focusChart;\n\n    var _mouseZoomable = false;\n    var _clipPadding = 0;\n\n    var _outerRangeBandPadding = 0.5;\n    var _rangeBandPadding = 0;\n\n    var _useRightYAxis = false;\n\n    /**\n     * When changing the domain of the x or y scale, it is necessary to tell the chart to recalculate\n     * and redraw the axes. (`.rescale()` is called automatically when the x or y scale is replaced\n     * with {@link dc.coordinateGridMixin+x .x()} or {@link dc.coordinateGridMixin#y .y()}, and has\n     * no effect on elastic scales.)\n     * @method rescale\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {dc.coordinateGridMixin}\n     */\n    _chart.rescale = function () {\n        _unitCount = undefined;\n        _resizing = true;\n        return _chart;\n    };\n\n    _chart.resizing = function () {\n        return _resizing;\n    };\n\n    /**\n     * Get or set the range selection chart associated with this instance. Setting the range selection\n     * chart using this function will automatically update its selection brush when the current chart\n     * zooms in. In return the given range chart will also automatically attach this chart as its focus\n     * chart hence zoom in when range brush updates.\n     *\n     * Usually the range and focus charts will share a dimension. The range chart will set the zoom\n     * boundaries for the focus chart, so its dimension values must be compatible with the domain of\n     * the focus chart.\n     *\n     * See the [Nasdaq 100 Index](http://dc-js.github.com/dc.js/) example for this effect in action.\n     * @method rangeChart\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {dc.coordinateGridMixin} [rangeChart]\n     * @returns {dc.coordinateGridMixin}\n     */\n    _chart.rangeChart = function (rangeChart) {\n        if (!arguments.length) {\n            return _rangeChart;\n        }\n        _rangeChart = rangeChart;\n        _rangeChart.focusChart(_chart);\n        return _chart;\n    };\n\n    /**\n     * Get or set the scale extent for mouse zooms.\n     * @method zoomScale\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Array<Number|Date>} [extent=[1, Infinity]]\n     * @returns {Array<Number|Date>|dc.coordinateGridMixin}\n     */\n    _chart.zoomScale = function (extent) {\n        if (!arguments.length) {\n            return _zoomScale;\n        }\n        _zoomScale = extent;\n        return _chart;\n    };\n\n    /**\n     * Get or set the zoom restriction for the chart. If true limits the zoom to origional domain of the chart.\n     * @method zoomOutRestrict\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [zoomOutRestrict=true]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.zoomOutRestrict = function (zoomOutRestrict) {\n        if (!arguments.length) {\n            return _zoomOutRestrict;\n        }\n        _zoomScale[0] = zoomOutRestrict ? 1 : 0;\n        _zoomOutRestrict = zoomOutRestrict;\n        return _chart;\n    };\n\n    _chart._generateG = function (parent) {\n        if (parent === undefined) {\n            _parent = _chart.svg();\n        } else {\n            _parent = parent;\n        }\n\n        var href = window.location.href.split('#')[0];\n\n        _g = _parent.append('g');\n\n        _chartBodyG = _g.append('g').attr('class', 'chart-body')\n            .attr('transform', 'translate(' + _chart.margins().left + ', ' + _chart.margins().top + ')')\n            .attr('clip-path', 'url(' + href + '#' + getClipPathId() + ')');\n\n        return _g;\n    };\n\n    /**\n     * Get or set the root g element. This method is usually used to retrieve the g element in order to\n     * overlay custom svg drawing programatically. **Caution**: The root g element is usually generated\n     * by dc.js internals, and resetting it might produce unpredictable result.\n     * @method g\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {SVGElement} [gElement]\n     * @returns {SVGElement|dc.coordinateGridMixin}\n     */\n    _chart.g = function (gElement) {\n        if (!arguments.length) {\n            return _g;\n        }\n        _g = gElement;\n        return _chart;\n    };\n\n    /**\n     * Set or get mouse zoom capability flag (default: false). When turned on the chart will be\n     * zoomable using the mouse wheel. If the range selector chart is attached zooming will also update\n     * the range selection brush on the associated range selector chart.\n     * @method mouseZoomable\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [mouseZoomable=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.mouseZoomable = function (mouseZoomable) {\n        if (!arguments.length) {\n            return _mouseZoomable;\n        }\n        _mouseZoomable = mouseZoomable;\n        return _chart;\n    };\n\n    /**\n     * Retrieve the svg group for the chart body.\n     * @method chartBodyG\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {SVGElement} [chartBodyG]\n     * @returns {SVGElement}\n     */\n    _chart.chartBodyG = function (chartBodyG) {\n        if (!arguments.length) {\n            return _chartBodyG;\n        }\n        _chartBodyG = chartBodyG;\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Get or set the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale} or\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md ordinal scale}.\n     * @method x\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @example\n     * // set x to a linear scale\n     * chart.x(d3.scale.linear().domain([-2500, 2500]))\n     * // set x to a time scale to generate histogram\n     * chart.x(d3.time.scale().domain([new Date(1985, 0, 1), new Date(2012, 11, 31)]))\n     * @param {d3.scale} [xScale]\n     * @returns {d3.scale|dc.coordinateGridMixin}\n     */\n    _chart.x = function (xScale) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = xScale;\n        _xOriginalDomain = _x.domain();\n        _chart.rescale();\n        return _chart;\n    };\n\n    _chart.xOriginalDomain = function () {\n        return _xOriginalDomain;\n    };\n\n    /**\n     * Set or get the xUnits function. The coordinate grid chart uses the xUnits function to calculate\n     * the number of data projections on x axis such as the number of bars for a bar chart or the\n     * number of dots for a line chart. This function is expected to return a Javascript array of all\n     * data points on x axis, or the number of points on the axis. [d3 time range functions\n     * d3.time.days, d3.time.months, and\n     * d3.time.years](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#aliases) are all valid xUnits\n     * function. dc.js also provides a few units function, see the {@link dc.units Units Namespace} for\n     * a list of built-in units functions.\n     * @method xUnits\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @todo Add docs for utilities\n     * @example\n     * // set x units to count days\n     * chart.xUnits(d3.time.days);\n     * // set x units to count months\n     * chart.xUnits(d3.time.months);\n     *\n     * // A custom xUnits function can be used as long as it follows the following interface:\n     * // units in integer\n     * function(start, end, xDomain) {\n     *      // simply calculates how many integers in the domain\n     *      return Math.abs(end - start);\n     * };\n     *\n     * // fixed units\n     * function(start, end, xDomain) {\n     *      // be aware using fixed units will disable the focus/zoom ability on the chart\n     *      return 1000;\n     * @param {Function} [xUnits=dc.units.integers]\n     * @returns {Function|dc.coordinateGridMixin}\n     */\n    _chart.xUnits = function (xUnits) {\n        if (!arguments.length) {\n            return _xUnits;\n        }\n        _xUnits = xUnits;\n        return _chart;\n    };\n\n    /**\n     * Set or get the x axis used by a particular coordinate grid chart instance. This function is most\n     * useful when x axis customization is required. The x axis in dc.js is an instance of a\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object};\n     * therefore it supports any valid d3 axis manipulation.\n     *\n     * **Caution**: The x axis is usually generated internally by dc; resetting it may cause\n     * unexpected results. Note also that when used as a getter, this function is not chainable:\n     * it returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n     * so attempting to call chart functions after calling `.xAxis()` will fail}.\n     * @method xAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function(v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [xAxis=d3.svg.axis().orient('bottom')]\n     * @returns {d3.svg.axis|dc.coordinateGridMixin}\n     */\n    _chart.xAxis = function (xAxis) {\n        if (!arguments.length) {\n            return _xAxis;\n        }\n        _xAxis = xAxis;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off elastic x axis behavior. If x axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the x axis range whenever a redraw event is triggered.\n     * @method elasticX\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [elasticX=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n            return _xElasticity;\n        }\n        _xElasticity = elasticX;\n        return _chart;\n    };\n\n    /**\n     * Set or get x axis padding for the elastic x axis. The padding will be added to both end of the x\n     * axis if elasticX is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date x axes.  When padding a date axis, an integer represents number of units being padded\n     * and a percentage string will be treated the same as an integer. The unit will be determined by the\n     * xAxisPaddingUnit variable.\n     * @method xAxisPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number|String} [padding=0]\n     * @returns {Number|String|dc.coordinateGridMixin}\n     */\n    _chart.xAxisPadding = function (padding) {\n        if (!arguments.length) {\n            return _xAxisPadding;\n        }\n        _xAxisPadding = padding;\n        return _chart;\n    };\n\n    /**\n     * Set or get x axis padding unit for the elastic x axis. The padding unit will determine which unit to\n     * use when applying xAxis padding if elasticX is turned on and if x-axis uses a time dimension;\n     * otherwise it is ignored.\n     *\n     * Padding unit is a string that will be used when the padding is calculated. Available parameters are\n     * the available d3 time intervals; see\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval d3.time.interval}.\n     * @method xAxisPaddingUnit\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [unit='days']\n     * @returns {String|dc.coordinateGridMixin}\n     */\n    _chart.xAxisPaddingUnit = function (unit) {\n        if (!arguments.length) {\n            return _xAxisPaddingUnit;\n        }\n        _xAxisPaddingUnit = unit;\n        return _chart;\n    };\n\n    /**\n     * Returns the number of units displayed on the x axis using the unit measure configured by\n     * {@link dc.coordinateGridMixin#xUnits xUnits}.\n     * @method xUnitCount\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {Number}\n     */\n    _chart.xUnitCount = function () {\n        if (_unitCount === undefined) {\n            var units = _chart.xUnits()(_chart.x().domain()[0], _chart.x().domain()[1], _chart.x().domain());\n\n            if (units instanceof Array) {\n                _unitCount = units.length;\n            } else {\n                _unitCount = units;\n            }\n        }\n\n        return _unitCount;\n    };\n\n    /**\n     * Gets or sets whether the chart should be drawn with a right axis instead of a left axis. When\n     * used with a chart in a composite chart, allows both left and right Y axes to be shown on a\n     * chart.\n     * @method useRightYAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [useRightYAxis=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.useRightYAxis = function (useRightYAxis) {\n        if (!arguments.length) {\n            return _useRightYAxis;\n        }\n        _useRightYAxis = useRightYAxis;\n        return _chart;\n    };\n\n    /**\n     * Returns true if the chart is using ordinal xUnits ({@link dc.units.ordinal dc.units.ordinal}, or false\n     * otherwise. Most charts behave differently with ordinal data and use the result of this method to\n     * trigger the appropriate logic.\n     * @method isOrdinal\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {Boolean}\n     */\n    _chart.isOrdinal = function () {\n        return _chart.xUnits() === dc.units.ordinal;\n    };\n\n    _chart._useOuterPadding = function () {\n        return true;\n    };\n\n    _chart._ordinalXDomain = function () {\n        var groups = _chart._computeOrderedGroups(_chart.data());\n        return groups.map(_chart.keyAccessor());\n    };\n\n    function compareDomains (d1, d2) {\n        return !d1 || !d2 || d1.length !== d2.length ||\n            d1.some(function (elem, i) { return (elem && d2[i]) ? elem.toString() !== d2[i].toString() : elem === d2[i]; });\n    }\n\n    function prepareXAxis (g, render) {\n        if (!_chart.isOrdinal()) {\n            if (_chart.elasticX()) {\n                _x.domain([_chart.xAxisMin(), _chart.xAxisMax()]);\n            }\n        } else { // _chart.isOrdinal()\n            if (_chart.elasticX() || _x.domain().length === 0) {\n                _x.domain(_chart._ordinalXDomain());\n            }\n        }\n\n        // has the domain changed?\n        var xdom = _x.domain();\n        if (render || compareDomains(_lastXDomain, xdom)) {\n            _chart.rescale();\n        }\n        _lastXDomain = xdom;\n\n        // please can't we always use rangeBands for bar charts?\n        if (_chart.isOrdinal()) {\n            _x.rangeBands([0, _chart.xAxisLength()], _rangeBandPadding,\n                          _chart._useOuterPadding() ? _outerRangeBandPadding : 0);\n        } else {\n            _x.range([0, _chart.xAxisLength()]);\n        }\n\n        _xAxis = _xAxis.scale(_chart.x());\n\n        renderVerticalGridLines(g);\n    }\n\n    _chart.renderXAxis = function (g) {\n        var axisXG = g.select('g.x');\n\n        if (axisXG.empty()) {\n            axisXG = g.append('g')\n                .attr('class', 'axis x')\n                .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')');\n        }\n\n        var axisXLab = g.select('text.' + X_AXIS_LABEL_CLASS);\n        if (axisXLab.empty() && _chart.xAxisLabel()) {\n            axisXLab = g.append('text')\n                .attr('class', X_AXIS_LABEL_CLASS)\n                .attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' +\n                      (_chart.height() - _xAxisLabelPadding) + ')')\n                .attr('text-anchor', 'middle');\n        }\n        if (_chart.xAxisLabel() && axisXLab.text() !== _chart.xAxisLabel()) {\n            axisXLab.text(_chart.xAxisLabel());\n        }\n\n        dc.transition(axisXG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')')\n            .call(_xAxis);\n        dc.transition(axisXLab, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' +\n                  (_chart.height() - _xAxisLabelPadding) + ')');\n    };\n\n    function renderVerticalGridLines (g) {\n        var gridLineG = g.select('g.' + VERTICAL_CLASS);\n\n        if (_renderVerticalGridLine) {\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child')\n                    .attr('class', GRID_LINE_CLASS + ' ' + VERTICAL_CLASS)\n                    .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n            }\n\n            var ticks = _xAxis.tickValues() ? _xAxis.tickValues() :\n                    (typeof _x.ticks === 'function' ? _x.ticks(_xAxis.ticks()[0]) : _x.domain());\n\n            var lines = gridLineG.selectAll('line')\n                .data(ticks);\n\n            // enter\n            var linesGEnter = lines.enter()\n                .append('line')\n                .attr('x1', function (d) {\n                    return _x(d);\n                })\n                .attr('y1', _chart._xAxisY() - _chart.margins().top)\n                .attr('x2', function (d) {\n                    return _x(d);\n                })\n                .attr('y2', 0)\n                .attr('opacity', 0);\n            dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', 1);\n\n            // update\n            dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('x1', function (d) {\n                    return _x(d);\n                })\n                .attr('y1', _chart._xAxisY() - _chart.margins().top)\n                .attr('x2', function (d) {\n                    return _x(d);\n                })\n                .attr('y2', 0);\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    }\n\n    _chart._xAxisY = function () {\n        return (_chart.height() - _chart.margins().bottom);\n    };\n\n    _chart.xAxisLength = function () {\n        return _chart.effectiveWidth();\n    };\n\n    /**\n     * Set or get the x axis label. If setting the label, you may optionally include additional padding to\n     * the margin to make room for the label. By default the padded is set to 12 to accomodate the text height.\n     * @method xAxisLabel\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String}\n     */\n    _chart.xAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n            return _xAxisLabel;\n        }\n        _xAxisLabel = labelText;\n        _chart.margins().bottom -= _xAxisLabelPadding;\n        _xAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().bottom += _xAxisLabelPadding;\n        return _chart;\n    };\n\n    _chart._prepareYAxis = function (g) {\n        if (_y === undefined || _chart.elasticY()) {\n            if (_y === undefined) {\n                _y = d3.scale.linear();\n            }\n            var min = _chart.yAxisMin() || 0,\n                max = _chart.yAxisMax() || 0;\n            _y.domain([min, max]).rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _y.range([_chart.yAxisHeight(), 0]);\n        _yAxis = _yAxis.scale(_y);\n\n        if (_useRightYAxis) {\n            _yAxis.orient('right');\n        }\n\n        _chart._renderHorizontalGridLinesForAxis(g, _y, _yAxis);\n    };\n\n    _chart.renderYAxisLabel = function (axisClass, text, rotation, labelXPosition) {\n        labelXPosition = labelXPosition || _yAxisLabelPadding;\n\n        var axisYLab = _chart.g().select('text.' + Y_AXIS_LABEL_CLASS + '.' + axisClass + '-label');\n        var labelYPosition = (_chart.margins().top + _chart.yAxisHeight() / 2);\n        if (axisYLab.empty() && text) {\n            axisYLab = _chart.g().append('text')\n                .attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')')\n                .attr('class', Y_AXIS_LABEL_CLASS + ' ' + axisClass + '-label')\n                .attr('text-anchor', 'middle')\n                .text(text);\n        }\n        if (text && axisYLab.text() !== text) {\n            axisYLab.text(text);\n        }\n        dc.transition(axisYLab, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')');\n    };\n\n    _chart.renderYAxisAt = function (axisClass, axis, position) {\n        var axisYG = _chart.g().select('g.' + axisClass);\n        if (axisYG.empty()) {\n            axisYG = _chart.g().append('g')\n                .attr('class', 'axis ' + axisClass)\n                .attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')');\n        }\n\n        dc.transition(axisYG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')')\n            .call(axis);\n    };\n\n    _chart.renderYAxis = function () {\n        var axisPosition = _useRightYAxis ? (_chart.width() - _chart.margins().right) : _chart._yAxisX();\n        _chart.renderYAxisAt('y', _yAxis, axisPosition);\n        var labelPosition = _useRightYAxis ? (_chart.width() - _yAxisLabelPadding) : _yAxisLabelPadding;\n        var rotation = _useRightYAxis ? 90 : -90;\n        _chart.renderYAxisLabel('y', _chart.yAxisLabel(), rotation, labelPosition);\n    };\n\n    _chart._renderHorizontalGridLinesForAxis = function (g, scale, axis) {\n        var gridLineG = g.select('g.' + HORIZONTAL_CLASS);\n\n        if (_renderHorizontalGridLine) {\n            var ticks = axis.tickValues() ? axis.tickValues() : scale.ticks(axis.ticks()[0]);\n\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child')\n                    .attr('class', GRID_LINE_CLASS + ' ' + HORIZONTAL_CLASS)\n                    .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n            }\n\n            var lines = gridLineG.selectAll('line')\n                .data(ticks);\n\n            // enter\n            var linesGEnter = lines.enter()\n                .append('line')\n                .attr('x1', 1)\n                .attr('y1', function (d) {\n                    return scale(d);\n                })\n                .attr('x2', _chart.xAxisLength())\n                .attr('y2', function (d) {\n                    return scale(d);\n                })\n                .attr('opacity', 0);\n            dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', 1);\n\n            // update\n            dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('x1', 1)\n                .attr('y1', function (d) {\n                    return scale(d);\n                })\n                .attr('x2', _chart.xAxisLength())\n                .attr('y2', function (d) {\n                    return scale(d);\n                });\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    };\n\n    _chart._yAxisX = function () {\n        return _chart.useRightYAxis() ? _chart.width() - _chart.margins().right : _chart.margins().left;\n    };\n\n    /**\n     * Set or get the y axis label. If setting the label, you may optionally include additional padding\n     * to the margin to make room for the label. By default the padding is set to 12 to accommodate the\n     * text height.\n     * @method yAxisLabel\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String|dc.coordinateGridMixin}\n     */\n    _chart.yAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n            return _yAxisLabel;\n        }\n        _yAxisLabel = labelText;\n        _chart.margins().left -= _yAxisLabelPadding;\n        _yAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().left += _yAxisLabelPadding;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y scale. The y scale is typically automatically determined by the chart implementation.\n     * @method y\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|dc.coordinateGridMixin}\n     */\n    _chart.y = function (yScale) {\n        if (!arguments.length) {\n            return _y;\n        }\n        _y = yScale;\n        _chart.rescale();\n        return _chart;\n    };\n\n    /**\n     * Set or get the y axis used by the coordinate grid chart instance. This function is most useful\n     * when y axis customization is required. The y axis in dc.js is simply an instance of a [d3 axis\n     * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis); therefore it supports any\n     * valid d3 axis manipulation.\n     *\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.  Note also that when used as a getter, this function is not chainable: it\n     * returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n     * so attempting to call chart functions after calling `.yAxis()` will fail}.\n     * @method yAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize y axis tick format\n     * chart.yAxis().tickFormat(function(v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.yAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [yAxis=d3.svg.axis().orient('left')]\n     * @returns {d3.svg.axis|dc.coordinateGridMixin}\n     */\n    _chart.yAxis = function (yAxis) {\n        if (!arguments.length) {\n            return _yAxis;\n        }\n        _yAxis = yAxis;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off elastic y axis behavior. If y axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the y axis range whenever a redraw event is triggered.\n     * @method elasticY\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [elasticY=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.elasticY = function (elasticY) {\n        if (!arguments.length) {\n            return _yElasticity;\n        }\n        _yElasticity = elasticY;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off horizontal grid lines.\n     * @method renderHorizontalGridLines\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [renderHorizontalGridLines=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.renderHorizontalGridLines = function (renderHorizontalGridLines) {\n        if (!arguments.length) {\n            return _renderHorizontalGridLine;\n        }\n        _renderHorizontalGridLine = renderHorizontalGridLines;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off vertical grid lines.\n     * @method renderVerticalGridLines\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [renderVerticalGridLines=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.renderVerticalGridLines = function (renderVerticalGridLines) {\n        if (!arguments.length) {\n            return _renderVerticalGridLine;\n        }\n        _renderVerticalGridLine = renderVerticalGridLines;\n        return _chart;\n    };\n\n    /**\n     * Calculates the minimum x value to display in the chart. Includes xAxisPadding if set.\n     * @method xAxisMin\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.xAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.keyAccessor()(e);\n        });\n        return dc.utils.subtract(min, _xAxisPadding, _xAxisPaddingUnit);\n    };\n\n    /**\n     * Calculates the maximum x value to display in the chart. Includes xAxisPadding if set.\n     * @method xAxisMax\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.xAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.keyAccessor()(e);\n        });\n        return dc.utils.add(max, _xAxisPadding, _xAxisPaddingUnit);\n    };\n\n    /**\n     * Calculates the minimum y value to display in the chart. Includes yAxisPadding if set.\n     * @method yAxisMin\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.yAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.valueAccessor()(e);\n        });\n        return dc.utils.subtract(min, _yAxisPadding);\n    };\n\n    /**\n     * Calculates the maximum y value to display in the chart. Includes yAxisPadding if set.\n     * @method yAxisMax\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.yAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.valueAccessor()(e);\n        });\n        return dc.utils.add(max, _yAxisPadding);\n    };\n\n    /**\n     * Set or get y axis padding for the elastic y axis. The padding will be added to the top and\n     * bottom of the y axis if elasticY is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date axes. When padding a date axis, an integer represents number of days being padded\n     * and a percentage string will be treated the same as an integer.\n     * @method yAxisPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number|String} [padding=0]\n     * @returns {Number|dc.coordinateGridMixin}\n     */\n    _chart.yAxisPadding = function (padding) {\n        if (!arguments.length) {\n            return _yAxisPadding;\n        }\n        _yAxisPadding = padding;\n        return _chart;\n    };\n\n    _chart.yAxisHeight = function () {\n        return _chart.effectiveHeight();\n    };\n\n    /**\n     * Set or get the rounding function used to quantize the selection when brushing is enabled.\n     * @method round\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @example\n     * // set x unit round to by month, this will make sure range selection brush will\n     * // select whole months\n     * chart.round(d3.time.month.round);\n     * @param {Function} [round]\n     * @returns {Function|dc.coordinateGridMixin}\n     */\n    _chart.round = function (round) {\n        if (!arguments.length) {\n            return _round;\n        }\n        _round = round;\n        return _chart;\n    };\n\n    _chart._rangeBandPadding = function (_) {\n        if (!arguments.length) {\n            return _rangeBandPadding;\n        }\n        _rangeBandPadding = _;\n        return _chart;\n    };\n\n    _chart._outerRangeBandPadding = function (_) {\n        if (!arguments.length) {\n            return _outerRangeBandPadding;\n        }\n        _outerRangeBandPadding = _;\n        return _chart;\n    };\n\n    dc.override(_chart, 'filter', function (_) {\n        if (!arguments.length) {\n            return _chart._filter();\n        }\n\n        _chart._filter(_);\n\n        if (_) {\n            _chart.brush().extent(_);\n        } else {\n            _chart.brush().clear();\n        }\n\n        return _chart;\n    });\n\n    _chart.brush = function (_) {\n        if (!arguments.length) {\n            return _brush;\n        }\n        _brush = _;\n        return _chart;\n    };\n\n    function brushHeight () {\n        return _chart._xAxisY() - _chart.margins().top;\n    }\n\n    _chart.renderBrush = function (g) {\n        if (_brushOn) {\n            _brush.on('brush', _chart._brushing);\n            _brush.on('brushstart', _chart._disableMouseZoom);\n            _brush.on('brushend', configureMouseZoom);\n\n            var gBrush = g.append('g')\n                .attr('class', 'brush')\n                .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')')\n                .call(_brush.x(_chart.x()));\n            _chart.setBrushY(gBrush, false);\n            _chart.setHandlePaths(gBrush);\n\n            if (_chart.hasFilter()) {\n                _chart.redrawBrush(g, false);\n            }\n        }\n    };\n\n    _chart.setHandlePaths = function (gBrush) {\n        gBrush.selectAll('.resize').append('path').attr('d', _chart.resizeHandlePath);\n    };\n\n    _chart.setBrushY = function (gBrush) {\n        gBrush.selectAll('rect')\n            .attr('height', brushHeight());\n        gBrush.selectAll('.resize path')\n            .attr('d', _chart.resizeHandlePath);\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _brush.extent();\n        if (_chart.round()) {\n            extent[0] = extent.map(_chart.round())[0];\n            extent[1] = extent.map(_chart.round())[1];\n\n            _g.select('.brush')\n                .call(_brush.extent(extent));\n        }\n        return extent;\n    };\n\n    _chart.brushIsEmpty = function (extent) {\n        return _brush.empty() || !extent || extent[1] <= extent[0];\n    };\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n\n        _chart.redrawBrush(_g, false);\n\n        if (_chart.brushIsEmpty(extent)) {\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n        } else {\n            var rangedFilter = dc.filters.RangedFilter(extent[0], extent[1]);\n\n            dc.events.trigger(function () {\n                _chart.replaceFilter(rangedFilter);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n        }\n    };\n\n    _chart.redrawBrush = function (g, doTransition) {\n        if (_brushOn) {\n            if (_chart.filter() && _chart.brush().empty()) {\n                _chart.brush().extent(_chart.filter());\n            }\n\n            var gBrush = dc.optionalTransition(doTransition, _chart.transitionDuration(), _chart.transitionDelay())(g.select('g.brush'));\n            _chart.setBrushY(gBrush);\n            gBrush.call(_chart.brush()\n                      .x(_chart.x())\n                      .extent(_chart.brush().extent()));\n        }\n\n        _chart.fadeDeselectedArea();\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        // do nothing, sub-chart should override this function\n    };\n\n    // borrowed from Crossfilter example\n    _chart.resizeHandlePath = function (d) {\n        var e = +(d === 'e'), x = e ? 1 : -1, y = brushHeight() / 3;\n        return 'M' + (0.5 * x) + ',' + y +\n            'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6) +\n            'V' + (2 * y - 6) +\n            'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y) +\n            'Z' +\n            'M' + (2.5 * x) + ',' + (y + 8) +\n            'V' + (2 * y - 8) +\n            'M' + (4.5 * x) + ',' + (y + 8) +\n            'V' + (2 * y - 8);\n    };\n\n    function getClipPathId () {\n        return _chart.anchorName().replace(/[ .#=\\[\\]\"]/g, '-') + '-clip';\n    }\n\n    /**\n     * Get or set the padding in pixels for the clip path. Once set padding will be applied evenly to\n     * the top, left, right, and bottom when the clip path is generated. If set to zero, the clip area\n     * will be exactly the chart body area minus the margins.\n     * @method clipPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number} [padding=5]\n     * @returns {Number|dc.coordinateGridMixin}\n     */\n    _chart.clipPadding = function (padding) {\n        if (!arguments.length) {\n            return _clipPadding;\n        }\n        _clipPadding = padding;\n        return _chart;\n    };\n\n    function generateClipPath () {\n        var defs = dc.utils.appendOrSelect(_parent, 'defs');\n        // cannot select <clippath> elements; bug in WebKit, must select by id\n        // https://groups.google.com/forum/#!topic/d3-js/6EpAzQ2gU9I\n        var id = getClipPathId();\n        var chartBodyClip = dc.utils.appendOrSelect(defs, '#' + id, 'clipPath').attr('id', id);\n\n        var padding = _clipPadding * 2;\n\n        dc.utils.appendOrSelect(chartBodyClip, 'rect')\n            .attr('width', _chart.xAxisLength() + padding)\n            .attr('height', _chart.yAxisHeight() + padding)\n            .attr('transform', 'translate(-' + _clipPadding + ', -' + _clipPadding + ')');\n    }\n\n    _chart._preprocessData = function () {};\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chart._preprocessData();\n\n        _chart._generateG();\n        generateClipPath();\n\n        drawChart(true);\n\n        configureMouseZoom();\n\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        _chart._preprocessData();\n\n        drawChart(false);\n        generateClipPath();\n\n        return _chart;\n    };\n\n    function drawChart (render) {\n        if (_chart.isOrdinal()) {\n            _brushOn = false;\n        }\n\n        prepareXAxis(_chart.g(), render);\n        _chart._prepareYAxis(_chart.g());\n\n        _chart.plotData();\n\n        if (_chart.elasticX() || _resizing || render) {\n            _chart.renderXAxis(_chart.g());\n        }\n\n        if (_chart.elasticY() || _resizing || render) {\n            _chart.renderYAxis(_chart.g());\n        }\n\n        if (render) {\n            _chart.renderBrush(_chart.g(), false);\n        } else {\n            _chart.redrawBrush(_chart.g(), _resizing);\n        }\n        _chart.fadeDeselectedArea();\n        _resizing = false;\n    }\n\n    function configureMouseZoom () {\n        if (_mouseZoomable) {\n            _chart._enableMouseZoom();\n        } else if (_hasBeenMouseZoomable) {\n            _chart._disableMouseZoom();\n        }\n    }\n\n    _chart._enableMouseZoom = function () {\n        _hasBeenMouseZoomable = true;\n        _zoom.x(_chart.x())\n            .scaleExtent(_zoomScale)\n            .size([_chart.width(), _chart.height()])\n            .duration(_chart.transitionDuration());\n        _chart.root().call(_zoom);\n    };\n\n    _chart._disableMouseZoom = function () {\n        _chart.root().call(_nullZoom);\n    };\n\n    function zoomHandler () {\n        _refocused = true;\n        if (_zoomOutRestrict) {\n            var constraint = _xOriginalDomain;\n            if (_rangeChart) {\n                constraint = intersectExtents(constraint, _rangeChart.x().domain());\n            }\n            var constrained = constrainExtent(_chart.x().domain(), constraint);\n            if (constrained) {\n                _chart.x().domain(constrained);\n            }\n        }\n\n        var domain = _chart.x().domain();\n        var domFilter = dc.filters.RangedFilter(domain[0], domain[1]);\n\n        _chart.replaceFilter(domFilter);\n        _chart.rescale();\n        _chart.redraw();\n\n        if (_rangeChart && !rangesEqual(_chart.filter(), _rangeChart.filter())) {\n            dc.events.trigger(function () {\n                _rangeChart.replaceFilter(domFilter);\n                _rangeChart.redraw();\n            });\n        }\n\n        _chart._invokeZoomedListener();\n\n        dc.events.trigger(function () {\n            _chart.redrawGroup();\n        }, dc.constants.EVENT_DELAY);\n\n        _refocused = !rangesEqual(domain, _xOriginalDomain);\n    }\n\n    function intersectExtents (ext1, ext2) {\n        if (ext1[0] > ext2[1] || ext1[1] < ext2[0]) {\n            console.warn('could not intersect extents');\n        }\n        return [Math.max(ext1[0], ext2[0]), Math.min(ext1[1], ext2[1])];\n    }\n\n    function constrainExtent (extent, constraint) {\n        var size = extent[1] - extent[0];\n        if (extent[0] < constraint[0]) {\n            return [constraint[0], Math.min(constraint[1], dc.utils.add(constraint[0], size, 'millis'))];\n        } else if (extent[1] > constraint[1]) {\n            return [Math.max(constraint[0], dc.utils.subtract(constraint[1], size, 'millis')), constraint[1]];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Zoom this chart to focus on the given range. The given range should be an array containing only\n     * 2 elements (`[start, end]`) defining a range in the x domain. If the range is not given or set\n     * to null, then the zoom will be reset. _For focus to work elasticX has to be turned off;\n     * otherwise focus will be ignored.\n     * @method focus\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @example\n     * chart.on('renderlet', function(chart) {\n     *     // smooth the rendering through event throttling\n     *     dc.events.trigger(function(){\n     *          // focus some other chart to the range selected by user on this chart\n     *          someOtherChart.focus(chart.filter());\n     *     });\n     * })\n     * @param {Array<Number>} [range]\n     */\n    _chart.focus = function (range) {\n        if (hasRangeSelected(range)) {\n            _chart.x().domain(range);\n        } else {\n            _chart.x().domain(_xOriginalDomain);\n        }\n\n        _zoom.x(_chart.x());\n        zoomHandler();\n    };\n\n    _chart.refocused = function () {\n        return _refocused;\n    };\n\n    _chart.focusChart = function (c) {\n        if (!arguments.length) {\n            return _focusChart;\n        }\n        _focusChart = c;\n        _chart.on('filtered', function (chart) {\n            if (!chart.filter()) {\n                dc.events.trigger(function () {\n                    _focusChart.x().domain(_focusChart.xOriginalDomain());\n                });\n            } else if (!rangesEqual(chart.filter(), _focusChart.filter())) {\n                dc.events.trigger(function () {\n                    _focusChart.focus(chart.filter());\n                });\n            }\n        });\n        return _chart;\n    };\n\n    function rangesEqual (range1, range2) {\n        if (!range1 && !range2) {\n            return true;\n        } else if (!range1 || !range2) {\n            return false;\n        } else if (range1.length === 0 && range2.length === 0) {\n            return true;\n        } else if (range1[0].valueOf() === range2[0].valueOf() &&\n            range1[1].valueOf() === range2[1].valueOf()) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Turn on/off the brush-based range filter. When brushing is on then user can drag the mouse\n     * across a chart with a quantitative scale to perform range filtering based on the extent of the\n     * brush, or click on the bars of an ordinal bar chart or slices of a pie chart to filter and\n     * un-filter them. However turning on the brush filter will disable other interactive elements on\n     * the chart such as highlighting, tool tips, and reference lines. Zooming will still be possible\n     * if enabled, but only via scrolling (panning will be disabled.)\n     * @method brushOn\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [brushOn=true]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.brushOn = function (brushOn) {\n        if (!arguments.length) {\n            return _brushOn;\n        }\n        _brushOn = brushOn;\n        return _chart;\n    };\n\n    function hasRangeSelected (range) {\n        return range instanceof Array && range.length > 1;\n    }\n\n    return _chart;\n};\n\n/**\n * Stack Mixin is an mixin that provides cross-chart support of stackability using d3.layout.stack.\n * @name stackMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.stackMixin}\n */\ndc.stackMixin = function (_chart) {\n\n    function prepareValues (layer, layerIdx) {\n        var valAccessor = layer.accessor || _chart.valueAccessor();\n        layer.name = String(layer.name || layerIdx);\n        layer.values = layer.group.all().map(function (d, i) {\n            return {\n                x: _chart.keyAccessor()(d, i),\n                y: layer.hidden ? null : valAccessor(d, i),\n                data: d,\n                layer: layer.name,\n                hidden: layer.hidden\n            };\n        });\n\n        layer.values = layer.values.filter(domainFilter());\n        return layer.values;\n    }\n\n    var _stackLayout = d3.layout.stack()\n        .values(prepareValues);\n\n    var _stack = [];\n    var _titles = {};\n\n    var _hidableStacks = false;\n    var _evadeDomainFilter = false;\n\n    function domainFilter () {\n        if (!_chart.x() || _evadeDomainFilter) {\n            return d3.functor(true);\n        }\n        var xDomain = _chart.x().domain();\n        if (_chart.isOrdinal()) {\n            // TODO #416\n            //var domainSet = d3.set(xDomain);\n            return function () {\n                return true; //domainSet.has(p.x);\n            };\n        }\n        if (_chart.elasticX()) {\n            return function () { return true; };\n        }\n        return function (p) {\n            //return true;\n            return p.x >= xDomain[0] && p.x <= xDomain[xDomain.length - 1];\n        };\n    }\n\n    /**\n     * Stack a new crossfilter group onto this chart with an optional custom value accessor. All stacks\n     * in the same chart will share the same key accessor and therefore the same set of keys.\n     *\n     * For example, in a stacked bar chart, the bars of each stack will be positioned using the same set\n     * of keys on the x axis, while stacked vertically. If name is specified then it will be used to\n     * generate the legend label.\n     * @method stack\n     * @memberof dc.stackMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * // stack group using default accessor\n     * chart.stack(valueSumGroup)\n     * // stack group using custom accessor\n     * .stack(avgByDayGroup, function(d){return d.value.avgByDay;});\n     * @param {crossfilter.group} group\n     * @param {String} [name]\n     * @param {Function} [accessor]\n     * @returns {Array<{group: crossfilter.group, name: String, accessor: Function}>|dc.stackMixin}\n     */\n    _chart.stack = function (group, name, accessor) {\n        if (!arguments.length) {\n            return _stack;\n        }\n\n        if (arguments.length <= 2) {\n            accessor = name;\n        }\n\n        var layer = {group: group};\n        if (typeof name === 'string') {\n            layer.name = name;\n        }\n        if (typeof accessor === 'function') {\n            layer.accessor = accessor;\n        }\n        _stack.push(layer);\n\n        return _chart;\n    };\n\n    dc.override(_chart, 'group', function (g, n, f) {\n        if (!arguments.length) {\n            return _chart._group();\n        }\n        _stack = [];\n        _titles = {};\n        _chart.stack(g, n);\n        if (f) {\n            _chart.valueAccessor(f);\n        }\n        return _chart._group(g, n);\n    });\n\n    /**\n     * Allow named stacks to be hidden or shown by clicking on legend items.\n     * This does not affect the behavior of hideStack or showStack.\n     * @method hidableStacks\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {Boolean} [hidableStacks=false]\n     * @returns {Boolean|dc.stackMixin}\n     */\n    _chart.hidableStacks = function (hidableStacks) {\n        if (!arguments.length) {\n            return _hidableStacks;\n        }\n        _hidableStacks = hidableStacks;\n        return _chart;\n    };\n\n    function findLayerByName (n) {\n        var i = _stack.map(dc.pluck('name')).indexOf(n);\n        return _stack[i];\n    }\n\n    /**\n     * Hide all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @method hideStack\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {String} stackName\n     * @returns {dc.stackMixin}\n     */\n    _chart.hideStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = true;\n        }\n        return _chart;\n    };\n\n    /**\n     * Show all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @method showStack\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {String} stackName\n     * @returns {dc.stackMixin}\n     */\n    _chart.showStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = false;\n        }\n        return _chart;\n    };\n\n    _chart.getValueAccessorByIndex = function (index) {\n        return _stack[index].accessor || _chart.valueAccessor();\n    };\n\n    _chart.yAxisMin = function () {\n        var min = d3.min(flattenStack(), function (p) {\n            return (p.y < 0) ? (p.y + p.y0) : p.y0;\n        });\n\n        return dc.utils.subtract(min, _chart.yAxisPadding());\n\n    };\n\n    _chart.yAxisMax = function () {\n        var max = d3.max(flattenStack(), function (p) {\n            return (p.y > 0) ? (p.y + p.y0) : p.y0;\n        });\n\n        return dc.utils.add(max, _chart.yAxisPadding());\n    };\n\n    function flattenStack () {\n        var valueses = _chart.data().map(function (layer) { return layer.values; });\n        return Array.prototype.concat.apply([], valueses);\n    }\n\n    _chart.xAxisMin = function () {\n        var min = d3.min(flattenStack(), dc.pluck('x'));\n        return dc.utils.subtract(min, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    };\n\n    _chart.xAxisMax = function () {\n        var max = d3.max(flattenStack(), dc.pluck('x'));\n        return dc.utils.add(max, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    };\n\n    /**\n     * Set or get the title function. Chart class will use this function to render svg title (usually interpreted by\n     * browser as tooltips) for each child element in the chart, i.e. a slice in a pie chart or a bubble in a bubble chart.\n     * Almost every chart supports title function however in grid coordinate chart you need to turn off brush in order to\n     * use title otherwise the brush layer will block tooltip trigger.\n     *\n     * If the first argument is a stack name, the title function will get or set the title for that stack. If stackName\n     * is not provided, the first stack is implied.\n     * @method title\n     * @memberof dc.stackMixin\n     * @instance\n     * @example\n     * // set a title function on 'first stack'\n     * chart.title('first stack', function(d) { return d.key + ': ' + d.value; });\n     * // get a title function from 'second stack'\n     * var secondTitleFunction = chart.title('second stack');\n     * @param {String} [stackName]\n     * @param {Function} [titleAccessor]\n     * @returns {String|dc.stackMixin}\n     */\n    dc.override(_chart, 'title', function (stackName, titleAccessor) {\n        if (!stackName) {\n            return _chart._title();\n        }\n\n        if (typeof stackName === 'function') {\n            return _chart._title(stackName);\n        }\n        if (stackName === _chart._groupName && typeof titleAccessor === 'function') {\n            return _chart._title(titleAccessor);\n        }\n\n        if (typeof titleAccessor !== 'function') {\n            return _titles[stackName] || _chart._title();\n        }\n\n        _titles[stackName] = titleAccessor;\n\n        return _chart;\n    });\n\n    /**\n     * Gets or sets the stack layout algorithm, which computes a baseline for each stack and\n     * propagates it to the next.\n     * @method stackLayout\n     * @memberof dc.stackMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Stack-Layout.md d3.layout.stack}\n     * @param {Function} [stack=d3.layout.stack]\n     * @returns {Function|dc.stackMixin}\n     */\n    _chart.stackLayout = function (stack) {\n        if (!arguments.length) {\n            return _stackLayout;\n        }\n        _stackLayout = stack;\n        if (_stackLayout.values() === d3.layout.stack().values()) {\n            _stackLayout.values(prepareValues);\n        }\n        return _chart;\n    };\n\n    /**\n     * Since dc.js 2.0, there has been {@link https://github.com/dc-js/dc.js/issues/949 an issue}\n     * where points are filtered to the current domain. While this is a useful optimization, it is\n     * incorrectly implemented: the next point outside the domain is required in order to draw lines\n     * that are clipped to the bounds, as well as bars that are partly clipped.\n     *\n     * A fix will be included in dc.js 2.1.x, but a workaround is needed for dc.js 2.0 and until\n     * that fix is published, so set this flag to skip any filtering of points.\n     *\n     * Once the bug is fixed, this flag will have no effect, and it will be deprecated.\n     * @method evadeDomainFilter\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {Boolean} [evadeDomainFilter=false]\n     * @returns {Boolean|dc.stackMixin}\n     */\n    _chart.evadeDomainFilter = function (evadeDomainFilter) {\n        if (!arguments.length) {\n            return _evadeDomainFilter;\n        }\n        _evadeDomainFilter = evadeDomainFilter;\n        return _chart;\n    };\n\n    function visability (l) {\n        return !l.hidden;\n    }\n\n    _chart.data(function () {\n        var layers = _stack.filter(visability);\n        return layers.length ? _chart.stackLayout()(layers) : [];\n    });\n\n    _chart._ordinalXDomain = function () {\n        var flat = flattenStack().map(dc.pluck('data'));\n        var ordered = _chart._computeOrderedGroups(flat);\n        return ordered.map(_chart.keyAccessor());\n    };\n\n    _chart.colorAccessor(function (d) {\n        var layer = this.layer || this.name || d.name || d.layer;\n        return layer;\n    });\n\n    _chart.legendables = function () {\n        return _stack.map(function (layer, i) {\n            return {\n                chart: _chart,\n                name: layer.name,\n                hidden: layer.hidden || false,\n                color: _chart.getColor.call(layer, layer.values, i)\n            };\n        });\n    };\n\n    _chart.isLegendableHidden = function (d) {\n        var layer = findLayerByName(d.name);\n        return layer ? layer.hidden : false;\n    };\n\n    _chart.legendToggle = function (d) {\n        if (_hidableStacks) {\n            if (_chart.isLegendableHidden(d)) {\n                _chart.showStack(d.name);\n            } else {\n                _chart.hideStack(d.name);\n            }\n            //_chart.redraw();\n            _chart.renderGroup();\n        }\n    };\n\n    return _chart;\n};\n\n/**\n * Cap is a mixin that groups small data elements below a _cap_ into an *others* grouping for both the\n * Row and Pie Charts.\n *\n * The top ordered elements in the group up to the cap amount will be kept in the chart, and the rest\n * will be replaced with an *others* element, with value equal to the sum of the replaced values. The\n * keys of the elements below the cap limit are recorded in order to filter by those keys when the\n * others* element is clicked.\n * @name capMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.capMixin}\n */\ndc.capMixin = function (_chart) {\n    var _cap = Infinity, _takeFront = true;\n    var _othersLabel = 'Others';\n\n    // emulate old group.top(N) ordering\n    _chart.ordering(function (kv) {\n        return -kv.value;\n    });\n\n    var _othersGrouper = function (topItems, restItems) {\n        var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n            restKeys = restItems.map(_chart.keyAccessor());\n        if (restItemsSum > 0) {\n            return topItems.concat([{\n                others: restKeys,\n                key: _chart.othersLabel(),\n                value: restItemsSum\n            }]);\n        }\n        return topItems;\n    };\n\n    _chart.cappedKeyAccessor = function (d, i) {\n        if (d.others) {\n            return d.key;\n        }\n        return _chart.keyAccessor()(d, i);\n    };\n\n    _chart.cappedValueAccessor = function (d, i) {\n        if (d.others) {\n            return d.value;\n        }\n        return _chart.valueAccessor()(d, i);\n    };\n\n    // return N \"top\" groups, where N is the cap, sorted by baseMixin.ordering\n    // whether top means front or back depends on takeFront\n    _chart.data(function (group) {\n        if (_cap === Infinity) {\n            return _chart._computeOrderedGroups(group.all());\n        } else {\n            var items = group.all(), rest;\n            items = _chart._computeOrderedGroups(items); // sort by baseMixin.ordering\n\n            if (_cap) {\n                if (_takeFront) {\n                    rest = items.slice(_cap);\n                    items = items.slice(0, _cap);\n                } else {\n                    var start = Math.max(0, items.length - _cap);\n                    rest = items.slice(0, start);\n                    items = items.slice(start);\n                }\n            }\n\n            if (_othersGrouper) {\n                return _othersGrouper(items, rest);\n            }\n            return items;\n        }\n    });\n\n    /**\n     * Get or set the count of elements to that will be included in the cap. If there is an\n     * {@link dc.capMixin#othersGrouper othersGrouper}, any further elements will be combined in an\n     * extra element with its name determined by {@link dc.capMixin#othersLabel othersLabel}.\n     *\n     * As of dc.js 2.1 and onward, the capped charts use\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all()}\n     * and {@link dc.baseMixin#ordering baseMixin.ordering()} to determine the order of\n     * elements. Then `cap` and {@link dc.capMixin#takeFront takeFront} determine how many elements\n     * to keep, from which end of the resulting array.\n     *\n     * **Migration note:** Up through dc.js 2.0.*, capping used\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_top group.top(N)},\n     * which selects the largest items according to\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_order group.order()}.\n     * The chart then sorted the items according to {@link dc.baseMixin#ordering baseMixin.ordering()}.\n     * So the two values essentially had to agree, but if the `group.order()` was incorrect (it's\n     * easy to forget about), the wrong rows or slices would be displayed, in the correct order.\n     *\n     * If your chart previously relied on `group.order()`, use `chart.ordering()` instead. As of\n     * 2.1.5, the ordering defaults to sorting from greatest to least like `group.top(N)` did.\n     *\n     * If you want to cap by one ordering but sort by another, please\n     * [file an issue](https://github.com/dc-js/dc.js/issues/new) - it's still possible but we'll\n     * need to work up an example.\n     * @method cap\n     * @memberof dc.capMixin\n     * @instance\n     * @param {Number} [count=Infinity]\n     * @returns {Number|dc.capMixin}\n     */\n    _chart.cap = function (count) {\n        if (!arguments.length) {\n            return _cap;\n        }\n        _cap = count;\n        return _chart;\n    };\n\n    /**\n     * Get or set the direction of capping. If set, the chart takes the first\n     * {@link dc.capMixin#cap cap} elements from the sorted array of elements; otherwise\n     * it takes the last `cap` elements.\n     * @method takeFront\n     * @memberof dc.capMixin\n     * @instance\n     * @param {Boolean} [takeFront=true]\n     * @returns {Boolean|dc.capMixin}\n     */\n    _chart.takeFront = function (takeFront) {\n        if (!arguments.length) {\n            return _takeFront;\n        }\n        _takeFront = takeFront;\n        return _chart;\n    };\n\n    /**\n     * Get or set the label for *Others* slice when slices cap is specified.\n     * @method othersLabel\n     * @memberof dc.capMixin\n     * @instance\n     * @param {String} [label=\"Others\"]\n     * @returns {String|dc.capMixin}\n     */\n    _chart.othersLabel = function (label) {\n        if (!arguments.length) {\n            return _othersLabel;\n        }\n        _othersLabel = label;\n        return _chart;\n    };\n\n    /**\n     * Get or set the grouper function that will perform the insertion of data for the *Others* slice\n     * if the slices cap is specified. If set to a falsy value, no others will be added.\n     *\n     * The grouper function takes an array of included (\"top\") items, and an array of the rest of\n     * the items. By default the grouper function computes the sum of the rest.\n     * @method othersGrouper\n     * @memberof dc.capMixin\n     * @instance\n     * @example\n     * // Do not show others\n     * chart.othersGrouper(null);\n     * // Default others grouper\n     * chart.othersGrouper(function (topItems, restItems) {\n     *     var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n     *         restKeys = restItems.map(_chart.keyAccessor());\n     *     if (restItemsSum > 0) {\n     *         return topItems.concat([{\n     *             others: restKeys,\n     *             key: _chart.othersLabel(),\n     *             value: restItemsSum\n     *         }]);\n     *     }\n     *     return topItems;\n     * });\n     * @param {Function} [grouperFunction]\n     * @returns {Function|dc.capMixin}\n     */\n    _chart.othersGrouper = function (grouperFunction) {\n        if (!arguments.length) {\n            return _othersGrouper;\n        }\n        _othersGrouper = grouperFunction;\n        return _chart;\n    };\n\n    dc.override(_chart, 'onClick', function (d) {\n        if (d.others) {\n            _chart.filter([d.others]);\n        }\n        _chart._onClick(d);\n    });\n\n    return _chart;\n};\n\n/**\n * This Mixin provides reusable functionalities for any chart that needs to visualize data using bubbles.\n * @name bubbleMixin\n * @memberof dc\n * @mixin\n * @mixes dc.colorMixin\n * @param {Object} _chart\n * @returns {dc.bubbleMixin}\n */\ndc.bubbleMixin = function (_chart) {\n    var _maxBubbleRelativeSize = 0.3;\n    var _minRadiusWithLabel = 10;\n    var _sortBubbleSize = false;\n    var _elasticRadius = false;\n\n    _chart.BUBBLE_NODE_CLASS = 'node';\n    _chart.BUBBLE_CLASS = 'bubble';\n    _chart.MIN_RADIUS = 10;\n\n    _chart = dc.colorMixin(_chart);\n\n    _chart.renderLabel(true);\n\n    _chart.data(function (group) {\n        var data = group.all();\n        if (_sortBubbleSize) {\n            // sort descending so smaller bubbles are on top\n            var radiusAccessor = _chart.radiusValueAccessor();\n            data.sort(function (a, b) { return d3.descending(radiusAccessor(a), radiusAccessor(b)); });\n        }\n        return data;\n    });\n\n    var _r = d3.scale.linear().domain([0, 100]);\n\n    var _rValueAccessor = function (d) {\n        return d.r;\n    };\n\n    /**\n     * Get or set the bubble radius scale. By default the bubble chart uses\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md#linear d3.scale.linear().domain([0, 100])}\n     * as its radius scale.\n     * @method r\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [bubbleRadiusScale=d3.scale.linear().domain([0, 100])]\n     * @returns {d3.scale|dc.bubbleMixin}\n     */\n    _chart.r = function (bubbleRadiusScale) {\n        if (!arguments.length) {\n            return _r;\n        }\n        _r = bubbleRadiusScale;\n        return _chart;\n    };\n\n    /**\n     * Turn on or off the elastic bubble radius feature, or return the value of the flag. If this\n     * feature is turned on, then bubble radii will be automatically rescaled to fit the chart better.\n     * @method elasticRadius\n     * @memberof dc.bubbleChart\n     * @instance\n     * @param {Boolean} [elasticRadius=false]\n     * @returns {Boolean|dc.bubbleChart}\n     */\n    _chart.elasticRadius = function (elasticRadius) {\n        if (!arguments.length) {\n            return _elasticRadius;\n        }\n        _elasticRadius = elasticRadius;\n        return _chart;\n    };\n\n    _chart.calculateRadiusDomain = function () {\n        if (_elasticRadius) {\n            _chart.r().domain([_chart.rMin(), _chart.rMax()]);\n        }\n    };\n\n    /**\n     * Get or set the radius value accessor function. If set, the radius value accessor function will\n     * be used to retrieve a data value for each bubble. The data retrieved then will be mapped using\n     * the r scale to the actual bubble radius. This allows you to encode a data dimension using bubble\n     * size.\n     * @method radiusValueAccessor\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Function} [radiusValueAccessor]\n     * @returns {Function|dc.bubbleMixin}\n     */\n    _chart.radiusValueAccessor = function (radiusValueAccessor) {\n        if (!arguments.length) {\n            return _rValueAccessor;\n        }\n        _rValueAccessor = radiusValueAccessor;\n        return _chart;\n    };\n\n    _chart.rMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.radiusValueAccessor()(e);\n        });\n        return min;\n    };\n\n    _chart.rMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.radiusValueAccessor()(e);\n        });\n        return max;\n    };\n\n    _chart.bubbleR = function (d) {\n        var value = _chart.radiusValueAccessor()(d);\n        var r = _chart.r()(value);\n        if (isNaN(r) || value <= 0) {\n            r = 0;\n        }\n        return r;\n    };\n\n    var labelFunction = function (d) {\n        return _chart.label()(d);\n    };\n\n    var shouldLabel = function (d) {\n        return (_chart.bubbleR(d) > _minRadiusWithLabel);\n    };\n\n    var labelOpacity = function (d) {\n        return shouldLabel(d) ? 1 : 0;\n    };\n\n    var labelPointerEvent = function (d) {\n        return shouldLabel(d) ? 'all' : 'none';\n    };\n\n    _chart._doRenderLabel = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n            var label = bubbleGEnter.select('text');\n\n            if (label.empty()) {\n                label = bubbleGEnter.append('text')\n                    .attr('text-anchor', 'middle')\n                    .attr('dy', '.3em')\n                    .on('click', _chart.onClick);\n            }\n\n            label\n                .attr('opacity', 0)\n                .attr('pointer-events', labelPointerEvent)\n                .text(labelFunction);\n            dc.transition(label, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', labelOpacity);\n        }\n    };\n\n    _chart.doUpdateLabels = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n            var labels = bubbleGEnter.select('text')\n                .attr('pointer-events', labelPointerEvent)\n                .text(labelFunction);\n            dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', labelOpacity);\n        }\n    };\n\n    var titleFunction = function (d) {\n        return _chart.title()(d);\n    };\n\n    _chart._doRenderTitles = function (g) {\n        if (_chart.renderTitle()) {\n            var title = g.select('title');\n\n            if (title.empty()) {\n                g.append('title').text(titleFunction);\n            }\n        }\n    };\n\n    _chart.doUpdateTitles = function (g) {\n        if (_chart.renderTitle()) {\n            g.select('title').text(titleFunction);\n        }\n    };\n\n    /**\n     * Turn on or off the bubble sorting feature, or return the value of the flag. If enabled,\n     * bubbles will be sorted by their radius, with smaller bubbles in front.\n     * @method sortBubbleSize\n     * @memberof dc.bubbleChart\n     * @instance\n     * @param {Boolean} [sortBubbleSize=false]\n     * @returns {Boolean|dc.bubbleChart}\n     */\n    _chart.sortBubbleSize = function (sortBubbleSize) {\n        if (!arguments.length) {\n            return _sortBubbleSize;\n        }\n        _sortBubbleSize = sortBubbleSize;\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimum radius. This will be used to initialize the radius scale's range.\n     * @method minRadius\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [radius=10]\n     * @returns {Number|dc.bubbleMixin}\n     */\n    _chart.minRadius = function (radius) {\n        if (!arguments.length) {\n            return _chart.MIN_RADIUS;\n        }\n        _chart.MIN_RADIUS = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimum radius for label rendering. If a bubble's radius is less than this value\n     * then no label will be rendered.\n     * @method minRadiusWithLabel\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [radius=10]\n     * @returns {Number|dc.bubbleMixin}\n     */\n\n    _chart.minRadiusWithLabel = function (radius) {\n        if (!arguments.length) {\n            return _minRadiusWithLabel;\n        }\n        _minRadiusWithLabel = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the maximum relative size of a bubble to the length of x axis. This value is useful\n     * when the difference in radius between bubbles is too great.\n     * @method maxBubbleRelativeSize\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [relativeSize=0.3]\n     * @returns {Number|dc.bubbleMixin}\n     */\n    _chart.maxBubbleRelativeSize = function (relativeSize) {\n        if (!arguments.length) {\n            return _maxBubbleRelativeSize;\n        }\n        _maxBubbleRelativeSize = relativeSize;\n        return _chart;\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function (d) {\n                if (_chart.isSelectedNode(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n    };\n\n    _chart.onClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    return _chart;\n};\n\n/**\n * The pie chart implementation is usually used to visualize a small categorical distribution.  The pie\n * chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each\n * slice relative to the sum of all values. Slices are ordered by {@link dc.baseMixin#ordering ordering}\n * which defaults to sorting by key.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class pieChart\n * @memberof dc\n * @mixes dc.capMixin\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a pie chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.pieChart('#chart-container1');\n * // create a pie chart under #chart-container2 element using chart group A\n * var chart2 = dc.pieChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.pieChart}\n */\ndc.pieChart = function (parent, chartGroup) {\n    var DEFAULT_MIN_ANGLE_FOR_LABEL = 0.5;\n\n    var _sliceCssClass = 'pie-slice';\n    var _labelCssClass = 'pie-label';\n    var _sliceGroupCssClass = 'pie-slice-group';\n    var _labelGroupCssClass = 'pie-label-group';\n    var _emptyCssClass = 'empty-chart';\n    var _emptyTitle = 'empty';\n\n    var _radius,\n        _givenRadius, // specified radius, if any\n        _innerRadius = 0,\n        _externalRadiusPadding = 0;\n\n    var _g;\n    var _cx;\n    var _cy;\n    var _minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL;\n    var _externalLabelRadius;\n    var _drawPaths = false;\n    var _chart = dc.capMixin(dc.colorMixin(dc.baseMixin({})));\n\n    _chart.colorAccessor(_chart.cappedKeyAccessor);\n\n    _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n    });\n\n    /**\n     * Get or set the maximum number of slices the pie chart will generate. The top slices are determined by\n     * value from high to low. Other slices exeeding the cap will be rolled up into one single *Others* slice.\n     * @method slicesCap\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cap]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.slicesCap = _chart.cap;\n\n    _chart.label(_chart.cappedKeyAccessor);\n    _chart.renderLabel(true);\n\n    _chart.transitionDuration(350);\n    _chart.transitionDelay(0);\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg()\n            .append('g')\n            .attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n\n        _g.append('g').attr('class', _sliceGroupCssClass);\n        _g.append('g').attr('class', _labelGroupCssClass);\n\n        drawChart();\n\n        return _chart;\n    };\n\n    function drawChart () {\n        // set radius from chart size if none given, or if given radius is too large\n        var maxRadius =  d3.min([_chart.width(), _chart.height()]) / 2;\n        _radius = _givenRadius && _givenRadius < maxRadius ? _givenRadius : maxRadius;\n\n        var arc = buildArcs();\n\n        var pie = pieLayout();\n        var pieData;\n        // if we have data...\n        if (d3.sum(_chart.data(), _chart.valueAccessor())) {\n            pieData = pie(_chart.data());\n            _g.classed(_emptyCssClass, false);\n        } else {\n            // otherwise we'd be getting NaNs, so override\n            // note: abuse others for its ignoring the value accessor\n            pieData = pie([{key: _emptyTitle, value: 1, others: [_emptyTitle]}]);\n            _g.classed(_emptyCssClass, true);\n        }\n\n        if (_g) {\n            var slices = _g.select('g.' + _sliceGroupCssClass)\n                .selectAll('g.' + _sliceCssClass)\n                .data(pieData);\n\n            var labels = _g.select('g.' + _labelGroupCssClass)\n                .selectAll('text.' + _labelCssClass)\n                .data(pieData);\n\n            createElements(slices, labels, arc, pieData);\n\n            updateElements(pieData, arc);\n\n            removeElements(slices, labels);\n\n            highlightFilter();\n\n            dc.transition(_g, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n        }\n    }\n\n    function createElements (slices, labels, arc, pieData) {\n        var slicesEnter = createSliceNodes(slices);\n\n        createSlicePath(slicesEnter, arc);\n\n        createTitles(slicesEnter);\n\n        createLabels(labels, pieData, arc);\n    }\n\n    function createSliceNodes (slices) {\n        var slicesEnter = slices\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return _sliceCssClass + ' _' + i;\n            });\n        return slicesEnter;\n    }\n\n    function createSlicePath (slicesEnter, arc) {\n        var slicePath = slicesEnter.append('path')\n            .attr('fill', fill)\n            .on('click', onClick)\n            .attr('d', function (d, i) {\n                return safeArc(d, i, arc);\n            });\n\n        var transition = dc.transition(slicePath, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenPie);\n        }\n    }\n\n    function createTitles (slicesEnter) {\n        if (_chart.renderTitle()) {\n            slicesEnter.append('title').text(function (d) {\n                return _chart.title()(d.data);\n            });\n        }\n    }\n\n    _chart._applyLabelText = function (labels) {\n        labels\n            .text(function (d) {\n                var data = d.data;\n                if ((sliceHasNoData(data) || sliceTooSmall(d)) && !isSelectedSlice(d)) {\n                    return '';\n                }\n                return _chart.label()(d.data);\n            });\n    };\n\n    function positionLabels (labels, arc) {\n        _chart._applyLabelText(labels);\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', function (d) {\n                return labelPosition(d, arc);\n            })\n            .attr('text-anchor', 'middle');\n    }\n\n    function highlightSlice (i, whether) {\n        _chart.select('g.pie-slice._' + i)\n            .classed('highlight', whether);\n    }\n\n    function createLabels (labels, pieData, arc) {\n        if (_chart.renderLabel()) {\n            var labelsEnter = labels\n                .enter()\n                .append('text')\n                .attr('class', function (d, i) {\n                    var classes = _sliceCssClass + ' ' + _labelCssClass + ' _' + i;\n                    if (_externalLabelRadius) {\n                        classes += ' external';\n                    }\n                    return classes;\n                })\n                .on('click', onClick)\n                .on('mouseover', function (d, i) {\n                    highlightSlice(i, true);\n                })\n                .on('mouseout', function (d, i) {\n                    highlightSlice(i, false);\n                });\n            positionLabels(labelsEnter, arc);\n            if (_externalLabelRadius && _drawPaths) {\n                updateLabelPaths(pieData, arc);\n            }\n        }\n    }\n\n    function updateLabelPaths (pieData, arc) {\n        var polyline = _g.selectAll('polyline.' + _sliceCssClass)\n                .data(pieData);\n\n        polyline\n                .enter()\n                .append('polyline')\n                .attr('class', function (d, i) {\n                    return 'pie-path _' + i + ' ' + _sliceCssClass;\n                })\n                .on('click', onClick)\n                .on('mouseover', function (d, i) {\n                    highlightSlice(i, true);\n                })\n                .on('mouseout', function (d, i) {\n                    highlightSlice(i, false);\n                });\n\n        polyline.exit().remove();\n        var arc2 = d3.svg.arc()\n                .outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .innerRadius(_radius - _externalRadiusPadding);\n        var transition = dc.transition(polyline, _chart.transitionDuration(), _chart.transitionDelay());\n        // this is one rare case where d3.selection differs from d3.transition\n        if (transition.attrTween) {\n            transition\n                .attrTween('points', function (d) {\n                    var current = this._current || d;\n                    current = {startAngle: current.startAngle, endAngle: current.endAngle};\n                    var interpolate = d3.interpolate(current, d);\n                    this._current = interpolate(0);\n                    return function (t) {\n                        var d2 = interpolate(t);\n                        return [arc.centroid(d2), arc2.centroid(d2)];\n                    };\n                });\n        } else {\n            transition.attr('points', function (d) {\n                return [arc.centroid(d), arc2.centroid(d)];\n            });\n        }\n        transition.style('visibility', function (d) {\n            return d.endAngle - d.startAngle < 0.0001 ? 'hidden' : 'visible';\n        });\n\n    }\n\n    function updateElements (pieData, arc) {\n        updateSlicePaths(pieData, arc);\n        updateLabels(pieData, arc);\n        updateTitles(pieData);\n    }\n\n    function updateSlicePaths (pieData, arc) {\n        var slicePaths = _g.selectAll('g.' + _sliceCssClass)\n            .data(pieData)\n            .select('path')\n            .attr('d', function (d, i) {\n                return safeArc(d, i, arc);\n            });\n        var transition = dc.transition(slicePaths, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenPie);\n        }\n        transition.attr('fill', fill);\n    }\n\n    function updateLabels (pieData, arc) {\n        if (_chart.renderLabel()) {\n            var labels = _g.selectAll('text.' + _labelCssClass)\n                .data(pieData);\n            positionLabels(labels, arc);\n            if (_externalLabelRadius && _drawPaths) {\n                updateLabelPaths(pieData, arc);\n            }\n        }\n    }\n\n    function updateTitles (pieData) {\n        if (_chart.renderTitle()) {\n            _g.selectAll('g.' + _sliceCssClass)\n                .data(pieData)\n                .select('title')\n                .text(function (d) {\n                    return _chart.title()(d.data);\n                });\n        }\n    }\n\n    function removeElements (slices, labels) {\n        slices.exit().remove();\n        labels.exit().remove();\n    }\n\n    function highlightFilter () {\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.' + _sliceCssClass).each(function (d) {\n                if (isSelectedSlice(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.' + _sliceCssClass).each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    }\n\n    /**\n     * Get or set the external radius padding of the pie chart. This will force the radius of the\n     * pie chart to become smaller or larger depending on the value.\n     * @method externalRadiusPadding\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [externalRadiusPadding=0]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.externalRadiusPadding = function (externalRadiusPadding) {\n        if (!arguments.length) {\n            return _externalRadiusPadding;\n        }\n        _externalRadiusPadding = externalRadiusPadding;\n        return _chart;\n    };\n\n    /**\n     * Get or set the inner radius of the pie chart. If the inner radius is greater than 0px then the\n     * pie chart will be rendered as a doughnut chart.\n     * @method innerRadius\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [innerRadius=0]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.innerRadius = function (innerRadius) {\n        if (!arguments.length) {\n            return _innerRadius;\n        }\n        _innerRadius = innerRadius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the outer radius. If the radius is not set, it will be half of the minimum of the\n     * chart width and height.\n     * @method radius\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [radius]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.radius = function (radius) {\n        if (!arguments.length) {\n            return _givenRadius;\n        }\n        _givenRadius = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set center x coordinate position. Default is center of svg.\n     * @method cx\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cx]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.cx = function (cx) {\n        if (!arguments.length) {\n            return (_cx ||  _chart.width() / 2);\n        }\n        _cx = cx;\n        return _chart;\n    };\n\n    /**\n     * Get or set center y coordinate position. Default is center of svg.\n     * @method cy\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cy]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.cy = function (cy) {\n        if (!arguments.length) {\n            return (_cy ||  _chart.height() / 2);\n        }\n        _cy = cy;\n        return _chart;\n    };\n\n    function buildArcs () {\n        return d3.svg.arc()\n            .outerRadius(_radius - _externalRadiusPadding)\n            .innerRadius(_innerRadius);\n    }\n\n    function isSelectedSlice (d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d.data));\n    }\n\n    _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not\n     * display a slice label.\n     * @method minAngleForLabel\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [minAngleForLabel=0.5]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.minAngleForLabel = function (minAngleForLabel) {\n        if (!arguments.length) {\n            return _minAngleForLabel;\n        }\n        _minAngleForLabel = minAngleForLabel;\n        return _chart;\n    };\n\n    function pieLayout () {\n        return d3.layout.pie().sort(null).value(_chart.cappedValueAccessor);\n    }\n\n    function sliceTooSmall (d) {\n        var angle = (d.endAngle - d.startAngle);\n        return isNaN(angle) || angle < _minAngleForLabel;\n    }\n\n    function sliceHasNoData (d) {\n        return _chart.cappedValueAccessor(d) === 0;\n    }\n\n    function tweenPie (b) {\n        b.innerRadius = _innerRadius;\n        var current = this._current;\n        if (isOffCanvas(current)) {\n            current = {startAngle: 0, endAngle: 0};\n        } else {\n            // only interpolate startAngle & endAngle, not the whole data object\n            current = {startAngle: current.startAngle, endAngle: current.endAngle};\n        }\n        var i = d3.interpolate(current, b);\n        this._current = i(0);\n        return function (t) {\n            return safeArc(i(t), 0, buildArcs());\n        };\n    }\n\n    function isOffCanvas (current) {\n        return !current || isNaN(current.startAngle) || isNaN(current.endAngle);\n    }\n\n    function fill (d, i) {\n        return _chart.getColor(d.data, i);\n    }\n\n    function onClick (d, i) {\n        if (_g.attr('class') !== _emptyCssClass) {\n            _chart.onClick(d.data, i);\n        }\n    }\n\n    function safeArc (d, i, arc) {\n        var path = arc(d, i);\n        if (path.indexOf('NaN') >= 0) {\n            path = 'M0,0';\n        }\n        return path;\n    }\n\n    /**\n     * Title to use for the only slice when there is no data.\n     * @method emptyTitle\n     * @memberof dc.pieChart\n     * @instance\n     * @param {String} [title]\n     * @returns {String|dc.pieChart}\n     */\n    _chart.emptyTitle = function (title) {\n        if (arguments.length === 0) {\n            return _emptyTitle;\n        }\n        _emptyTitle = title;\n        return _chart;\n    };\n\n    /**\n     * Position slice labels offset from the outer edge of the chart.\n     *\n     * The argument specifies the extra radius to be added for slice labels.\n     * @method externalLabels\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [externalLabelRadius]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.externalLabels = function (externalLabelRadius) {\n        if (arguments.length === 0) {\n            return _externalLabelRadius;\n        } else if (externalLabelRadius) {\n            _externalLabelRadius = externalLabelRadius;\n        } else {\n            _externalLabelRadius = undefined;\n        }\n\n        return _chart;\n    };\n\n    /**\n     * Get or set whether to draw lines from pie slices to their labels.\n     *\n     * @method drawPaths\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Boolean} [drawPaths]\n     * @returns {Boolean|dc.pieChart}\n     */\n    _chart.drawPaths = function (drawPaths) {\n        if (arguments.length === 0) {\n            return _drawPaths;\n        }\n        _drawPaths = drawPaths;\n        return _chart;\n    };\n\n    function labelPosition (d, arc) {\n        var centroid;\n        if (_externalLabelRadius) {\n            centroid = d3.svg.arc()\n                .outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .innerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .centroid(d);\n        } else {\n            centroid = arc.centroid(d);\n        }\n        if (isNaN(centroid[0]) || isNaN(centroid[1])) {\n            return 'translate(0,0)';\n        } else {\n            return 'translate(' + centroid + ')';\n        }\n    }\n\n    _chart.legendables = function () {\n        return _chart.data().map(function (d, i) {\n            var legendable = {name: d.key, data: d.value, others: d.others, chart: _chart};\n            legendable.color = _chart.getColor(d, i);\n            return legendable;\n        });\n    };\n\n    _chart.legendHighlight = function (d) {\n        highlightSliceFromLegendable(d, true);\n    };\n\n    _chart.legendReset = function (d) {\n        highlightSliceFromLegendable(d, false);\n    };\n\n    _chart.legendToggle = function (d) {\n        _chart.onClick({key: d.name, others: d.others});\n    };\n\n    function highlightSliceFromLegendable (legendable, highlighted) {\n        _chart.selectAll('g.pie-slice').each(function (d) {\n            if (legendable.name === d.data.key) {\n                d3.select(this).classed('highlight', highlighted);\n            }\n        });\n    }\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Concrete bar chart/histogram implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class barChart\n * @memberof dc\n * @mixes dc.stackMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a bar chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.barChart('#chart-container1');\n * // create a bar chart under #chart-container2 element using chart group A\n * var chart2 = dc.barChart('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.barChart(compositeChart);\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n * specifying a dom block element such as a div; or a dom element or d3 selection.  If the bar\n * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n * composite chart instance instead.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.barChart}\n */\ndc.barChart = function (parent, chartGroup) {\n    var MIN_BAR_WIDTH = 1;\n    var DEFAULT_GAP_BETWEEN_BARS = 2;\n    var LABEL_PADDING = 3;\n\n    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n\n    var _gap = DEFAULT_GAP_BETWEEN_BARS;\n    var _centerBar = false;\n    var _alwaysUseRounding = false;\n\n    var _barWidth;\n\n    dc.override(_chart, 'rescale', function () {\n        _chart._rescale();\n        _barWidth = undefined;\n        return _chart;\n    });\n\n    dc.override(_chart, 'render', function () {\n        if (_chart.round() && _centerBar && !_alwaysUseRounding) {\n            dc.logger.warn('By default, brush rounding is disabled if bars are centered. ' +\n                         'See dc.js bar chart API documentation for details.');\n        }\n\n        return _chart._render();\n    });\n\n    _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n    }, false);\n\n    _chart.plotData = function () {\n        var layers = _chart.chartBodyG().selectAll('g.stack')\n            .data(_chart.data());\n\n        calculateBarWidth();\n\n        layers\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return 'stack ' + '_' + i;\n            });\n\n        var last = layers.size() - 1;\n        layers.each(function (d, i) {\n            var layer = d3.select(this);\n\n            renderBars(layer, i, d);\n\n            if (_chart.renderLabel() && last === i) {\n                renderLabels(layer, i, d);\n            }\n        });\n    };\n\n    function barHeight (d) {\n        return dc.utils.safeNumber(Math.abs(_chart.y()(d.y + d.y0) - _chart.y()(d.y0)));\n    }\n\n    function renderLabels (layer, layerIndex, d) {\n        var labels = layer.selectAll('text.barLabel')\n            .data(d.values, dc.pluck('x'));\n\n        labels.enter()\n            .append('text')\n            .attr('class', 'barLabel')\n            .attr('text-anchor', 'middle');\n\n        if (_chart.isOrdinal()) {\n            labels.on('click', _chart.onClick);\n            labels.attr('cursor', 'pointer');\n        }\n\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) {\n                var x = _chart.x()(d.x);\n                if (!_centerBar) {\n                    x += _barWidth / 2;\n                }\n                return dc.utils.safeNumber(x);\n            })\n            .attr('y', function (d) {\n                var y = _chart.y()(d.y + d.y0);\n\n                if (d.y < 0) {\n                    y -= barHeight(d);\n                }\n\n                return dc.utils.safeNumber(y - LABEL_PADDING);\n            })\n            .text(function (d) {\n                return _chart.label()(d);\n            });\n\n        dc.transition(labels.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('height', 0)\n            .remove();\n    }\n\n    function renderBars (layer, layerIndex, d) {\n        var bars = layer.selectAll('rect.bar')\n            .data(d.values, dc.pluck('x'));\n\n        var enter = bars.enter()\n            .append('rect')\n            .attr('class', 'bar')\n            .attr('fill', dc.pluck('data', _chart.getColor))\n            .attr('y', _chart.yAxisHeight())\n            .attr('height', 0);\n\n        if (_chart.renderTitle()) {\n            enter.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n\n        if (_chart.isOrdinal()) {\n            bars.on('click', _chart.onClick);\n        }\n\n        dc.transition(bars, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) {\n                var x = _chart.x()(d.x);\n                if (_centerBar) {\n                    x -= _barWidth / 2;\n                }\n                if (_chart.isOrdinal() && _gap !== undefined) {\n                    x += _gap / 2;\n                }\n                return dc.utils.safeNumber(x);\n            })\n            .attr('y', function (d) {\n                var y = _chart.y()(d.y + d.y0);\n\n                if (d.y < 0) {\n                    y -= barHeight(d);\n                }\n\n                return dc.utils.safeNumber(y);\n            })\n            .attr('width', _barWidth)\n            .attr('height', function (d) {\n                return barHeight(d);\n            })\n            .attr('fill', dc.pluck('data', _chart.getColor))\n            .select('title').text(dc.pluck('data', _chart.title(d.name)));\n\n        dc.transition(bars.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) { return _chart.x()(d.x); })\n            .attr('width', _barWidth * 0.9)\n            .remove();\n    }\n\n    function calculateBarWidth () {\n        if (_barWidth === undefined) {\n            var numberOfBars = _chart.xUnitCount();\n\n            // please can't we always use rangeBands for bar charts?\n            if (_chart.isOrdinal() && _gap === undefined) {\n                _barWidth = Math.floor(_chart.x().rangeBand());\n            } else if (_gap) {\n                _barWidth = Math.floor((_chart.xAxisLength() - (numberOfBars - 1) * _gap) / numberOfBars);\n            } else {\n                _barWidth = Math.floor(_chart.xAxisLength() / (1 + _chart.barPadding()) / numberOfBars);\n            }\n\n            if (_barWidth === Infinity || isNaN(_barWidth) || _barWidth < MIN_BAR_WIDTH) {\n                _barWidth = MIN_BAR_WIDTH;\n            }\n        }\n    }\n\n    _chart.fadeDeselectedArea = function () {\n        var bars = _chart.chartBodyG().selectAll('rect.bar');\n        var extent = _chart.brush().extent();\n\n        if (_chart.isOrdinal()) {\n            if (_chart.hasFilter()) {\n                bars.classed(dc.constants.SELECTED_CLASS, function (d) {\n                    return _chart.hasFilter(d.x);\n                });\n                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n                    return !_chart.hasFilter(d.x);\n                });\n            } else {\n                bars.classed(dc.constants.SELECTED_CLASS, false);\n                bars.classed(dc.constants.DESELECTED_CLASS, false);\n            }\n        } else {\n            if (!_chart.brushIsEmpty(extent)) {\n                var start = extent[0];\n                var end = extent[1];\n\n                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n                    return d.x < start || d.x >= end;\n                });\n            } else {\n                bars.classed(dc.constants.DESELECTED_CLASS, false);\n            }\n        }\n    };\n\n    /**\n     * Whether the bar chart will render each bar centered around the data position on the x-axis.\n     * @method centerBar\n     * @memberof dc.barChart\n     * @instance\n     * @param {Boolean} [centerBar=false]\n     * @returns {Boolean|dc.barChart}\n     */\n    _chart.centerBar = function (centerBar) {\n        if (!arguments.length) {\n            return _centerBar;\n        }\n        _centerBar = centerBar;\n        return _chart;\n    };\n\n    dc.override(_chart, 'onClick', function (d) {\n        _chart._onClick(d.data);\n    });\n\n    /**\n     * Get or set the spacing between bars as a fraction of bar size. Valid values are between 0-1.\n     * Setting this value will also remove any previously set {@link dc.barChart#gap gap}. See the\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n     * for a visual description of how the padding is applied.\n     * @method barPadding\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [barPadding=0]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.barPadding = function (barPadding) {\n        if (!arguments.length) {\n            return _chart._rangeBandPadding();\n        }\n        _chart._rangeBandPadding(barPadding);\n        _gap = undefined;\n        return _chart;\n    };\n\n    _chart._useOuterPadding = function () {\n        return _gap === undefined;\n    };\n\n    /**\n     * Get or set the outer padding on an ordinal bar chart. This setting has no effect on non-ordinal charts.\n     * Will pad the width by `padding * barWidth` on each side of the chart.\n     * @method outerPadding\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [padding=0.5]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.outerPadding = _chart._outerRangeBandPadding;\n\n    /**\n     * Manually set fixed gap (in px) between bars instead of relying on the default auto-generated\n     * gap.  By default the bar chart implementation will calculate and set the gap automatically\n     * based on the number of data points and the length of the x axis.\n     * @method gap\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [gap=2]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _chart;\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n        if (_chart.round() && (!_centerBar || _alwaysUseRounding)) {\n            extent[0] = extent.map(_chart.round())[0];\n            extent[1] = extent.map(_chart.round())[1];\n\n            _chart.chartBodyG().select('.brush')\n                .call(_chart.brush().extent(extent));\n        }\n\n        return extent;\n    };\n\n    /**\n     * Set or get whether rounding is enabled when bars are centered. If false, using\n     * rounding with centered bars will result in a warning and rounding will be ignored.  This flag\n     * has no effect if bars are not {@link dc.barChart#centerBar centered}.\n     * When using standard d3.js rounding methods, the brush often doesn't align correctly with\n     * centered bars since the bars are offset.  The rounding function must add an offset to\n     * compensate, such as in the following example.\n     * @method alwaysUseRounding\n     * @memberof dc.barChart\n     * @instance\n     * @example\n     * chart.round(function(n) { return Math.floor(n) + 0.5; });\n     * @param {Boolean} [alwaysUseRounding=false]\n     * @returns {Boolean|dc.barChart}\n     */\n    _chart.alwaysUseRounding = function (alwaysUseRounding) {\n        if (!arguments.length) {\n            return _alwaysUseRounding;\n        }\n        _alwaysUseRounding = alwaysUseRounding;\n        return _chart;\n    };\n\n    function colorFilter (color, inv) {\n        return function () {\n            var item = d3.select(this);\n            var match = item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n    }\n\n    _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n            _chart.g().selectAll('rect.bar')\n                .classed('highlight', colorFilter(d.color))\n                .classed('fadeout', colorFilter(d.color, true));\n        }\n    };\n\n    _chart.legendReset = function () {\n        _chart.g().selectAll('rect.bar')\n            .classed('highlight', false)\n            .classed('fadeout', false);\n    };\n\n    dc.override(_chart, 'xAxisMax', function () {\n        var max = this._xAxisMax();\n        if ('resolution' in _chart.xUnits()) {\n            var res = _chart.xUnits().resolution;\n            max += res;\n        }\n        return max;\n    });\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Concrete line/area chart implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class lineChart\n * @memberof dc\n * @mixes dc.stackMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a line chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.lineChart('#chart-container1');\n * // create a line chart under #chart-container2 element using chart group A\n * var chart2 = dc.lineChart('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.lineChart(compositeChart);\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n * specifying a dom block element such as a div; or a dom element or d3 selection.  If the line\n * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n * composite chart instance instead.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.lineChart}\n */\ndc.lineChart = function (parent, chartGroup) {\n    var DEFAULT_DOT_RADIUS = 5;\n    var TOOLTIP_G_CLASS = 'dc-tooltip';\n    var DOT_CIRCLE_CLASS = 'dot';\n    var Y_AXIS_REF_LINE_CLASS = 'yRef';\n    var X_AXIS_REF_LINE_CLASS = 'xRef';\n    var DEFAULT_DOT_OPACITY = 1e-6;\n    var LABEL_PADDING = 3;\n\n    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n    var _renderArea = false;\n    var _dotRadius = DEFAULT_DOT_RADIUS;\n    var _dataPointRadius = null;\n    var _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n    var _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n    var _interpolate = 'linear';\n    var _tension = 0.7;\n    var _defined;\n    var _dashStyle;\n    var _xyTipsOn = true;\n\n    _chart.transitionDuration(500);\n    _chart.transitionDelay(0);\n    _chart._rangeBandPadding(1);\n\n    _chart.plotData = function () {\n        var chartBody = _chart.chartBodyG();\n        var layersList = chartBody.select('g.stack-list');\n\n        if (layersList.empty()) {\n            layersList = chartBody.append('g').attr('class', 'stack-list');\n        }\n\n        var layers = layersList.selectAll('g.stack').data(_chart.data());\n\n        var layersEnter = layers\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return 'stack ' + '_' + i;\n            });\n\n        drawLine(layersEnter, layers);\n\n        drawArea(layersEnter, layers);\n\n        drawDots(chartBody, layers);\n\n        if (_chart.renderLabel()) {\n            drawLabels(layers);\n        }\n    };\n\n    /**\n     * Gets or sets the interpolator to use for lines drawn, by string name, allowing e.g. step\n     * functions, splines, and cubic interpolation.  This is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate} and\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate},\n     * where you can find a complete list of valid arguments.\n     * @method interpolate\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n     * @param  {String} [interpolate='linear']\n     * @returns {String|dc.lineChart}\n     */\n    _chart.interpolate = function (interpolate) {\n        if (!arguments.length) {\n            return _interpolate;\n        }\n        _interpolate = interpolate;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the tension to use for lines drawn, in the range 0 to 1.\n     * This parameter further customizes the interpolation behavior.  It is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_tension d3.svg.line.tension} and\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_tension d3.svg.area.tension}.\n     * @method tension\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n     * @param  {Number} [tension=0.7]\n     * @returns {Number|dc.lineChart}\n     */\n    _chart.tension = function (tension) {\n        if (!arguments.length) {\n            return _tension;\n        }\n        _tension = tension;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets a function that will determine discontinuities in the line which should be\n     * skipped: the path will be broken into separate subpaths if some points are undefined.\n     * This function is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n     *\n     * Note: crossfilter will sometimes coerce nulls to 0, so you may need to carefully write\n     * custom reduce functions to get this to work, depending on your data. See\n     * {@link https://github.com/dc-js/dc.js/issues/615#issuecomment-49089248 this GitHub comment}\n     * for more details and an example.\n     * @method defined\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n     * @param  {Function} [defined]\n     * @returns {Function|dc.lineChart}\n     */\n    _chart.defined = function (defined) {\n        if (!arguments.length) {\n            return _defined;\n        }\n        _defined = defined;\n        return _chart;\n    };\n\n    /**\n     * Set the line's d3 dashstyle. This value becomes the 'stroke-dasharray' of line. Defaults to empty\n     * array (solid line).\n     * @method dashStyle\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray stroke-dasharray}\n     * @example\n     * // create a Dash Dot Dot Dot\n     * chart.dashStyle([3,1,1,1]);\n     * @param  {Array<Number>} [dashStyle=[]]\n     * @returns {Array<Number>|dc.lineChart}\n     */\n    _chart.dashStyle = function (dashStyle) {\n        if (!arguments.length) {\n            return _dashStyle;\n        }\n        _dashStyle = dashStyle;\n        return _chart;\n    };\n\n    /**\n     * Get or set render area flag. If the flag is set to true then the chart will render the area\n     * beneath each line and the line chart effectively becomes an area chart.\n     * @method renderArea\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Boolean} [renderArea=false]\n     * @returns {Boolean|dc.lineChart}\n     */\n    _chart.renderArea = function (renderArea) {\n        if (!arguments.length) {\n            return _renderArea;\n        }\n        _renderArea = renderArea;\n        return _chart;\n    };\n\n    function colors (d, i) {\n        return _chart.getColor.call(d, d.values, i);\n    }\n\n    function drawLine (layersEnter, layers) {\n        var line = d3.svg.line()\n            .x(function (d) {\n                return _chart.x()(d.x);\n            })\n            .y(function (d) {\n                return _chart.y()(d.y + d.y0);\n            })\n            .interpolate(_interpolate)\n            .tension(_tension);\n        if (_defined) {\n            line.defined(_defined);\n        }\n\n        var path = layersEnter.append('path')\n            .attr('class', 'line')\n            .attr('stroke', colors);\n        if (_dashStyle) {\n            path.attr('stroke-dasharray', _dashStyle);\n        }\n\n        dc.transition(layers.select('path.line'), _chart.transitionDuration(), _chart.transitionDelay())\n            //.ease('linear')\n            .attr('stroke', colors)\n            .attr('d', function (d) {\n                return safeD(line(d.values));\n            });\n    }\n\n    function drawArea (layersEnter, layers) {\n        if (_renderArea) {\n            var area = d3.svg.area()\n                .x(function (d) {\n                    return _chart.x()(d.x);\n                })\n                .y(function (d) {\n                    return _chart.y()(d.y + d.y0);\n                })\n                .y0(function (d) {\n                    return _chart.y()(d.y0);\n                })\n                .interpolate(_interpolate)\n                .tension(_tension);\n            if (_defined) {\n                area.defined(_defined);\n            }\n\n            layersEnter.append('path')\n                .attr('class', 'area')\n                .attr('fill', colors)\n                .attr('d', function (d) {\n                    return safeD(area(d.values));\n                });\n\n            dc.transition(layers.select('path.area'), _chart.transitionDuration(), _chart.transitionDelay())\n                //.ease('linear')\n                .attr('fill', colors)\n                .attr('d', function (d) {\n                    return safeD(area(d.values));\n                });\n        }\n    }\n\n    function safeD (d) {\n        return (!d || d.indexOf('NaN') >= 0) ? 'M0,0' : d;\n    }\n\n    function drawDots (chartBody, layers) {\n        if (_chart.xyTipsOn() === 'always' || (!_chart.brushOn() && _chart.xyTipsOn())) {\n            var tooltipListClass = TOOLTIP_G_CLASS + '-list';\n            var tooltips = chartBody.select('g.' + tooltipListClass);\n\n            if (tooltips.empty()) {\n                tooltips = chartBody.append('g').attr('class', tooltipListClass);\n            }\n\n            layers.each(function (d, layerIndex) {\n                var points = d.values;\n                if (_defined) {\n                    points = points.filter(_defined);\n                }\n\n                var g = tooltips.select('g.' + TOOLTIP_G_CLASS + '._' + layerIndex);\n                if (g.empty()) {\n                    g = tooltips.append('g').attr('class', TOOLTIP_G_CLASS + ' _' + layerIndex);\n                }\n\n                createRefLines(g);\n\n                var dots = g.selectAll('circle.' + DOT_CIRCLE_CLASS)\n                    .data(points, dc.pluck('x'));\n\n                dots.enter()\n                    .append('circle')\n                    .attr('class', DOT_CIRCLE_CLASS)\n                    .attr('r', getDotRadius())\n                    .style('fill-opacity', _dataPointFillOpacity)\n                    .style('stroke-opacity', _dataPointStrokeOpacity)\n                    .attr('fill', _chart.getColor)\n                    .on('mousemove', function () {\n                        var dot = d3.select(this);\n                        showDot(dot);\n                        showRefLines(dot, g);\n                    })\n                    .on('mouseout', function () {\n                        var dot = d3.select(this);\n                        hideDot(dot);\n                        hideRefLines(g);\n                    });\n\n                dots.call(renderTitle, d);\n\n                dc.transition(dots, _chart.transitionDuration())\n                    .attr('cx', function (d) {\n                        return dc.utils.safeNumber(_chart.x()(d.x));\n                    })\n                    .attr('cy', function (d) {\n                        return dc.utils.safeNumber(_chart.y()(d.y + d.y0));\n                    })\n                    .attr('fill', _chart.getColor);\n\n                dots.exit().remove();\n            });\n        }\n    }\n\n    _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n    }, false);\n\n    function drawLabels (layers) {\n        layers.each(function (d, layerIndex) {\n            var layer = d3.select(this);\n            var labels = layer.selectAll('text.lineLabel')\n                .data(d.values, dc.pluck('x'));\n\n            labels.enter()\n                .append('text')\n                .attr('class', 'lineLabel')\n                .attr('text-anchor', 'middle');\n\n            dc.transition(labels, _chart.transitionDuration())\n                .attr('x', function (d) {\n                    return dc.utils.safeNumber(_chart.x()(d.x));\n                })\n                .attr('y', function (d) {\n                    var y = _chart.y()(d.y + d.y0) - LABEL_PADDING;\n                    return dc.utils.safeNumber(y);\n                })\n                .text(function (d) {\n                    return _chart.label()(d);\n                });\n\n            dc.transition(labels.exit(), _chart.transitionDuration())\n                .attr('height', 0)\n                .remove();\n        });\n    }\n\n    function createRefLines (g) {\n        var yRefLine = g.select('path.' + Y_AXIS_REF_LINE_CLASS).empty() ?\n            g.append('path').attr('class', Y_AXIS_REF_LINE_CLASS) : g.select('path.' + Y_AXIS_REF_LINE_CLASS);\n        yRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n\n        var xRefLine = g.select('path.' + X_AXIS_REF_LINE_CLASS).empty() ?\n            g.append('path').attr('class', X_AXIS_REF_LINE_CLASS) : g.select('path.' + X_AXIS_REF_LINE_CLASS);\n        xRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n    }\n\n    function showDot (dot) {\n        dot.style('fill-opacity', 0.8);\n        dot.style('stroke-opacity', 0.8);\n        dot.attr('r', _dotRadius);\n        return dot;\n    }\n\n    function showRefLines (dot, g) {\n        var x = dot.attr('cx');\n        var y = dot.attr('cy');\n        var yAxisX = (_chart._yAxisX() - _chart.margins().left);\n        var yAxisRefPathD = 'M' + yAxisX + ' ' + y + 'L' + (x) + ' ' + (y);\n        var xAxisRefPathD = 'M' + x + ' ' + _chart.yAxisHeight() + 'L' + x + ' ' + y;\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', '').attr('d', yAxisRefPathD);\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', '').attr('d', xAxisRefPathD);\n    }\n\n    function getDotRadius () {\n        return _dataPointRadius || _dotRadius;\n    }\n\n    function hideDot (dot) {\n        dot.style('fill-opacity', _dataPointFillOpacity)\n            .style('stroke-opacity', _dataPointStrokeOpacity)\n            .attr('r', getDotRadius());\n    }\n\n    function hideRefLines (g) {\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', 'none');\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', 'none');\n    }\n\n    function renderTitle (dot, d) {\n        if (_chart.renderTitle()) {\n            dot.select('title').remove();\n            dot.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n    }\n\n    /**\n     * Turn on/off the mouseover behavior of an individual data point which renders a circle and x/y axis\n     * dashed lines back to each respective axis.  This is ignored if the chart\n     * {@link dc.coordinateGridMixin#brushOn brush} is on\n     * @method xyTipsOn\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Boolean} [xyTipsOn=false]\n     * @returns {Boolean|dc.lineChart}\n     */\n    _chart.xyTipsOn = function (xyTipsOn) {\n        if (!arguments.length) {\n            return _xyTipsOn;\n        }\n        _xyTipsOn = xyTipsOn;\n        return _chart;\n    };\n\n    /**\n     * Get or set the radius (in px) for dots displayed on the data points.\n     * @method dotRadius\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Number} [dotRadius=5]\n     * @returns {Number|dc.lineChart}\n     */\n    _chart.dotRadius = function (dotRadius) {\n        if (!arguments.length) {\n            return _dotRadius;\n        }\n        _dotRadius = dotRadius;\n        return _chart;\n    };\n\n    /**\n     * Always show individual dots for each datapoint.\n     *\n     * If `options` is falsy, it disables data point rendering. If no `options` are provided, the\n     * current `options` values are instead returned.\n     * @method renderDataPoints\n     * @memberof dc.lineChart\n     * @instance\n     * @example\n     * chart.renderDataPoints({radius: 2, fillOpacity: 0.8, strokeOpacity: 0.8})\n     * @param  {{fillOpacity: Number, strokeOpacity: Number, radius: Number}} [options={fillOpacity: 0.8, strokeOpacity: 0.8, radius: 2}]\n     * @returns {{fillOpacity: Number, strokeOpacity: Number, radius: Number}|dc.lineChart}\n     */\n    _chart.renderDataPoints = function (options) {\n        if (!arguments.length) {\n            return {\n                fillOpacity: _dataPointFillOpacity,\n                strokeOpacity: _dataPointStrokeOpacity,\n                radius: _dataPointRadius\n            };\n        } else if (!options) {\n            _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n            _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n            _dataPointRadius = null;\n        } else {\n            _dataPointFillOpacity = options.fillOpacity || 0.8;\n            _dataPointStrokeOpacity = options.strokeOpacity || 0.8;\n            _dataPointRadius = options.radius || 2;\n        }\n        return _chart;\n    };\n\n    function colorFilter (color, dashstyle, inv) {\n        return function () {\n            var item = d3.select(this);\n            var match = (item.attr('stroke') === color &&\n                item.attr('stroke-dasharray') === ((dashstyle instanceof Array) ?\n                    dashstyle.join(',') : null)) || item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n    }\n\n    _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n            _chart.g().selectAll('path.line, path.area')\n                .classed('highlight', colorFilter(d.color, d.dashstyle))\n                .classed('fadeout', colorFilter(d.color, d.dashstyle, true));\n        }\n    };\n\n    _chart.legendReset = function () {\n        _chart.g().selectAll('path.line, path.area')\n            .classed('highlight', false)\n            .classed('fadeout', false);\n    };\n\n    dc.override(_chart, 'legendables', function () {\n        var legendables = _chart._legendables();\n        if (!_dashStyle) {\n            return legendables;\n        }\n        return legendables.map(function (l) {\n            l.dashstyle = _dashStyle;\n            return l;\n        });\n    });\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The data count widget is a simple widget designed to display the number of records selected by the\n * current filters out of the total number of records in the data set. Once created the data count widget\n * will automatically update the text content of child elements with the following classes:\n *\n * * `.total-count` - total number of records\n * * `.filter-count` - number of records matched by the current filters\n *\n * Note: this widget works best for the specific case of showing the number of records out of a\n * total. If you want a more general-purpose numeric display, please use the\n * {@link dc.numberDisplay} widget instead.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class dataCount\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * var ndx = crossfilter(data);\n * var all = ndx.groupAll();\n *\n * dc.dataCount('.dc-data-count')\n *     .dimension(ndx)\n *     .group(all);\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataCount}\n */\ndc.dataCount = function (parent, chartGroup) {\n    var _formatNumber = d3.format(',d');\n    var _chart = dc.baseMixin({});\n    var _html = {some: '', all: ''};\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending how many items are\n     * selected. The text `%total-count` will replaced with the total number of records, and the text\n     * `%filter-count` will be replaced with the number of selected records.\n     * - all: HTML template to use if all items are selected\n     * - some: HTML template to use if not all items are selected\n     * @method html\n     * @memberof dc.dataCount\n     * @instance\n     * @example\n     * counter.html({\n     *      some: '%filter-count out of %total-count records selected',\n     *      all: 'All records selected. Click on charts to apply filters'\n     * })\n     * @param {{some:String, all: String}} [options]\n     * @returns {{some:String, all: String}|dc.dataCount}\n     */\n    _chart.html = function (options) {\n        if (!arguments.length) {\n            return _html;\n        }\n        if (options.all) {\n            _html.all = options.all;\n        }\n        if (options.some) {\n            _html.some = options.some;\n        }\n        return _chart;\n    };\n\n    /**\n     * Gets or sets an optional function to format the filter count and total count.\n     * @method formatNumber\n     * @memberof dc.dataCount\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n     * @example\n     * counter.formatNumber(d3.format('.2g'))\n     * @param {Function} [formatter=d3.format('.2g')]\n     * @returns {Function|dc.dataCount}\n     */\n    _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n            return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        var tot = _chart.dimension().size(),\n            val = _chart.group().value();\n        var all = _formatNumber(tot);\n        var selected = _formatNumber(val);\n\n        if ((tot === val) && (_html.all !== '')) {\n            _chart.root().html(_html.all.replace('%total-count', all).replace('%filter-count', selected));\n        } else if (_html.some !== '') {\n            _chart.root().html(_html.some.replace('%total-count', all).replace('%filter-count', selected));\n        } else {\n            _chart.selectAll('.total-count').text(all);\n            _chart.selectAll('.filter-count').text(selected);\n        }\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The data table is a simple widget designed to list crossfilter focused data set (rows being\n * filtered) in a good old tabular fashion.\n *\n * Note: Unlike other charts, the data table (and data grid chart) use the {@link dc.dataTable#group group} attribute as a\n * keying function for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data\n * together in groups.  Do not pass in a crossfilter group as this will not work.\n *\n * Another interesting feature of the data table is that you can pass a crossfilter group to the `dimension`, as\n * long as you specify the {@link dc.dataTable#order order} as `d3.descending`, since the data\n * table will use `dimension.top()` to fetch the data in that case, and the method is equally\n * supported on the crossfilter group as the crossfilter dimension.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.io/dc.js/examples/table-on-aggregated-data.html dataTable on a crossfilter group}\n * ({@link https://github.com/dc-js/dc.js/blob/develop/web/examples/table-on-aggregated-data.html source})\n * @class dataTable\n * @memberof dc\n * @mixes dc.baseMixin\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataTable}\n */\ndc.dataTable = function (parent, chartGroup) {\n    var LABEL_CSS_CLASS = 'dc-table-label';\n    var ROW_CSS_CLASS = 'dc-table-row';\n    var COLUMN_CSS_CLASS = 'dc-table-column';\n    var GROUP_CSS_CLASS = 'dc-table-group';\n    var HEAD_CSS_CLASS = 'dc-table-head';\n\n    var _chart = dc.baseMixin({});\n\n    var _size = 25;\n    var _columns = [];\n    var _sortBy = function (d) {\n        return d;\n    };\n    var _order = d3.ascending;\n    var _beginSlice = 0;\n    var _endSlice;\n    var _showGroups = true;\n\n    _chart._doRender = function () {\n        _chart.selectAll('tbody').remove();\n\n        renderRows(renderGroups());\n\n        return _chart;\n    };\n\n    _chart._doColumnValueFormat = function (v, d) {\n        return ((typeof v === 'function') ?\n                v(d) :                          // v as function\n                ((typeof v === 'string') ?\n                 d[v] :                         // v is field name string\n                 v.format(d)                        // v is Object, use fn (element 2)\n                )\n               );\n    };\n\n    _chart._doColumnHeaderFormat = function (d) {\n        // if 'function', convert to string representation\n        // show a string capitalized\n        // if an object then display its label string as-is.\n        return (typeof d === 'function') ?\n                _chart._doColumnHeaderFnToString(d) :\n                ((typeof d === 'string') ?\n                 _chart._doColumnHeaderCapitalize(d) : String(d.label));\n    };\n\n    _chart._doColumnHeaderCapitalize = function (s) {\n        // capitalize\n        return s.charAt(0).toUpperCase() + s.slice(1);\n    };\n\n    _chart._doColumnHeaderFnToString = function (f) {\n        // columnString(f) {\n        var s = String(f);\n        var i1 = s.indexOf('return ');\n        if (i1 >= 0) {\n            var i2 = s.lastIndexOf(';');\n            if (i2 >= 0) {\n                s = s.substring(i1 + 7, i2);\n                var i3 = s.indexOf('numberFormat');\n                if (i3 >= 0) {\n                    s = s.replace('numberFormat', '');\n                }\n            }\n        }\n        return s;\n    };\n\n    function renderGroups () {\n        // The 'original' example uses all 'functions'.\n        // If all 'functions' are used, then don't remove/add a header, and leave\n        // the html alone. This preserves the functionality of earlier releases.\n        // A 2nd option is a string representing a field in the data.\n        // A third option is to supply an Object such as an array of 'information', and\n        // supply your own _doColumnHeaderFormat and _doColumnValueFormat functions to\n        // create what you need.\n        var bAllFunctions = true;\n        _columns.forEach(function (f) {\n            bAllFunctions = bAllFunctions & (typeof f === 'function');\n        });\n\n        if (!bAllFunctions) {\n            // ensure one thead\n            var thead = _chart.selectAll('thead').data([0]);\n            thead.enter().append('thead');\n            thead.exit().remove();\n\n            // with one tr\n            var headrow = thead.selectAll('tr').data([0]);\n            headrow.enter().append('tr');\n            headrow.exit().remove();\n\n            // with a th for each column\n            var headcols = headrow.selectAll('th')\n                .data(_columns);\n            headcols.enter().append('th');\n            headcols.exit().remove();\n\n            headcols\n                .attr('class', HEAD_CSS_CLASS)\n                    .html(function (d) {\n                        return (_chart._doColumnHeaderFormat(d));\n\n                    });\n        }\n\n        var groups = _chart.root().selectAll('tbody')\n            .data(nestEntries(), function (d) {\n                return _chart.keyAccessor()(d);\n            });\n\n        var rowGroup = groups\n            .enter()\n            .append('tbody');\n\n        if (_showGroups === true) {\n            rowGroup\n                .append('tr')\n                .attr('class', GROUP_CSS_CLASS)\n                    .append('td')\n                    .attr('class', LABEL_CSS_CLASS)\n                    .attr('colspan', _columns.length)\n                    .html(function (d) {\n                        return _chart.keyAccessor()(d);\n                    });\n        }\n\n        groups.exit().remove();\n\n        return rowGroup;\n    }\n\n    function nestEntries () {\n        var entries;\n        if (_order === d3.ascending) {\n            entries = _chart.dimension().bottom(_size);\n        } else {\n            entries = _chart.dimension().top(_size);\n        }\n\n        return d3.nest()\n            .key(_chart.group())\n            .sortKeys(_order)\n            .entries(entries.sort(function (a, b) {\n                return _order(_sortBy(a), _sortBy(b));\n            }).slice(_beginSlice, _endSlice));\n    }\n\n    function renderRows (groups) {\n        var rows = groups.order()\n            .selectAll('tr.' + ROW_CSS_CLASS)\n            .data(function (d) {\n                return d.values;\n            });\n\n        var rowEnter = rows.enter()\n            .append('tr')\n            .attr('class', ROW_CSS_CLASS);\n\n        _columns.forEach(function (v, i) {\n            rowEnter.append('td')\n                .attr('class', COLUMN_CSS_CLASS + ' _' + i)\n                .html(function (d) {\n                    return _chart._doColumnValueFormat(v, d);\n                });\n        });\n\n        rows.exit().remove();\n\n        return rows;\n    }\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set the group function for the data table. The group function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n     * to split rows into groups.\n     *\n     * Do not pass in a crossfilter group as this will not work.\n     * @method group\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * // group rows by the value of their field\n     * chart\n     *     .group(function(d) { return d.field; })\n     * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n     * @returns {Function|dc.dataTable}\n     */\n\n    /**\n     * Get or set the table size which determines the number of rows displayed by the widget.\n     * @method size\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number} [size=25]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.size = function (size) {\n        if (!arguments.length) {\n            return _size;\n        }\n        _size = size;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed\n     * by the widget. Useful when implementing pagination.\n     *\n     * Note: the sortBy function will determine how the rows are ordered for pagination purposes.\n\n     * See the {@link http://dc-js.github.io/dc.js/examples/table-pagination.html table pagination example}\n     * to see how to implement the pagination user interface using `beginSlice` and `endSlice`.\n     * @method beginSlice\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n            return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the\n     * widget. Useful when implementing pagination. See {@link dc.dataTable#beginSlice `beginSlice`} for more information.\n     * @method endSlice\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number|undefined} [endSlice=undefined]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n            return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set column functions. The data table widget supports several methods of specifying the\n     * columns to display.\n     *\n     * The original method uses an array of functions to generate dynamic columns. Column functions\n     * are simple javascript functions with only one input argument `d` which represents a row in\n     * the data set. The return value of these functions will be used to generate the content for\n     * each cell. However, this method requires the HTML for the table to have a fixed set of column\n     * headers.\n     *\n     * <pre><code>chart.columns([\n     *     function(d) { return d.date; },\n     *     function(d) { return d.open; },\n     *     function(d) { return d.close; },\n     *     function(d) { return numberFormat(d.close - d.open); },\n     *     function(d) { return d.volume; }\n     * ]);\n     * </code></pre>\n     *\n     * In the second method, you can list the columns to read from the data without specifying it as\n     * a function, except where necessary (ie, computed columns).  Note the data element name is\n     * capitalized when displayed in the table header. You can also mix in functions as necessary,\n     * using the third `{label, format}` form, as shown below.\n     *\n     * <pre><code>chart.columns([\n     *     \"date\",    // d[\"date\"], ie, a field accessor; capitalized automatically\n     *     \"open\",    // ...\n     *     \"close\",   // ...\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) {\n     *             return numberFormat(d.close - d.open);\n     *         }\n     *     },\n     *     \"volume\"   // d[\"volume\"], ie, a field accessor; capitalized automatically\n     * ]);\n     * </code></pre>\n     *\n     * In the third example, we specify all fields using the `{label, format}` method:\n     * <pre><code>chart.columns([\n     *     {\n     *         label: \"Date\",\n     *         format: function (d) { return d.date; }\n     *     },\n     *     {\n     *         label: \"Open\",\n     *         format: function (d) { return numberFormat(d.open); }\n     *     },\n     *     {\n     *         label: \"Close\",\n     *         format: function (d) { return numberFormat(d.close); }\n     *     },\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) { return numberFormat(d.close - d.open); }\n     *     },\n     *     {\n     *         label: \"Volume\",\n     *         format: function (d) { return d.volume; }\n     *     }\n     * ]);\n     * </code></pre>\n     *\n     * You may wish to override the dataTable functions `_doColumnHeaderCapitalize` and\n     * `_doColumnHeaderFnToString`, which are used internally to translate the column information or\n     * function into a displayed header. The first one is used on the \"string\" column specifier; the\n     * second is used to transform a stringified function into something displayable. For the Stock\n     * example, the function for Change becomes the table header **d.close - d.open**.\n     *\n     * Finally, you can even specify a completely different form of column definition. To do this,\n     * override `_chart._doColumnHeaderFormat` and `_chart._doColumnValueFormat` Be aware that\n     * fields without numberFormat specification will be displayed just as they are stored in the\n     * data, unformatted.\n     * @method columns\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Array<Function>} [columns=[]]\n     * @returns {Array<Function>}|dc.dataTable}\n     */\n    _chart.columns = function (columns) {\n        if (!arguments.length) {\n            return _columns;\n        }\n        _columns = columns;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at row level and returns a\n     * particular field to be sorted by.\n     * @method sortBy\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortBy=identity function]\n     * @returns {Function|dc.dataTable}\n     */\n    _chart.sortBy = function (sortBy) {\n        if (!arguments.length) {\n            return _sortBy;\n        }\n        _sortBy = sortBy;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort order. If the order is `d3.ascending`, the data table will use\n     * `dimension().bottom()` to fetch the data; otherwise it will use `dimension().top()`\n     * @method order\n     * @memberof dc.dataTable\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|dc.dataTable}\n     */\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    /**\n     * Get or set if group rows will be shown. The dataTable {@link dc.dataTable#group group}\n     * function must be specified even if groups are not shown.\n     * @method showGroups\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * chart\n     *     .group([value], [name])\n     *     .showGroups(true|false);\n     * @param {Boolean} [showGroups=true]\n     * @returns {Boolean|dc.dataTable}\n     */\n    _chart.showGroups = function (showGroups) {\n        if (!arguments.length) {\n            return _showGroups;\n        }\n        _showGroups = showGroups;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Data grid is a simple widget designed to list the filtered records, providing\n * a simple way to define how the items are displayed.\n *\n * Note: Unlike other charts, the data grid chart (and data table) use the {@link dc.dataGrid#group group} attribute as a keying function\n * for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data together in groups.\n * Do not pass in a crossfilter group as this will not work.\n *\n * Examples:\n * - {@link http://europarl.me/dc.js/web/ep/index.html List of members of the european parliament}\n * @class dataGrid\n * @memberof dc\n * @mixes dc.baseMixin\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataGrid}\n */\ndc.dataGrid = function (parent, chartGroup) {\n    var LABEL_CSS_CLASS = 'dc-grid-label';\n    var ITEM_CSS_CLASS = 'dc-grid-item';\n    var GROUP_CSS_CLASS = 'dc-grid-group';\n    var GRID_CSS_CLASS = 'dc-grid-top';\n\n    var _chart = dc.baseMixin({});\n\n    var _size = 999; // shouldn't be needed, but you might\n    var _html = function (d) { return 'you need to provide an html() handling param:  ' + JSON.stringify(d); };\n    var _sortBy = function (d) {\n        return d;\n    };\n    var _order = d3.ascending;\n    var _beginSlice = 0, _endSlice;\n\n    var _htmlGroup = function (d) {\n        return '<div class=\\'' + GROUP_CSS_CLASS + '\\'><h1 class=\\'' + LABEL_CSS_CLASS + '\\'>' +\n            _chart.keyAccessor()(d) + '</h1></div>';\n    };\n\n    _chart._doRender = function () {\n        _chart.selectAll('div.' + GRID_CSS_CLASS).remove();\n\n        renderItems(renderGroups());\n\n        return _chart;\n    };\n\n    function renderGroups () {\n        var groups = _chart.root().selectAll('div.' + GRID_CSS_CLASS)\n                .data(nestEntries(), function (d) {\n                    return _chart.keyAccessor()(d);\n                });\n\n        var itemGroup = groups\n                .enter()\n                .append('div')\n                .attr('class', GRID_CSS_CLASS);\n\n        if (_htmlGroup) {\n            itemGroup\n                .html(function (d) {\n                    return _htmlGroup(d);\n                });\n        }\n\n        groups.exit().remove();\n        return itemGroup;\n    }\n\n    function nestEntries () {\n        var entries = _chart.dimension().top(_size);\n\n        return d3.nest()\n            .key(_chart.group())\n            .sortKeys(_order)\n            .entries(entries.sort(function (a, b) {\n                return _order(_sortBy(a), _sortBy(b));\n            }).slice(_beginSlice, _endSlice));\n    }\n\n    function renderItems (groups) {\n        var items = groups.order()\n                .selectAll('div.' + ITEM_CSS_CLASS)\n                .data(function (d) {\n                    return d.values;\n                });\n\n        items.enter()\n            .append('div')\n            .attr('class', ITEM_CSS_CLASS)\n            .html(function (d) {\n                return _html(d);\n            });\n\n        items.exit().remove();\n\n        return items;\n    }\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set the group function for the data grid. The group function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n     * to split rows into groups.\n     *\n     * Do not pass in a crossfilter group as this will not work.\n     * @method group\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * // group rows by the value of their field\n     * chart\n     *     .group(function(d) { return d.field; })\n     * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n     * @returns {Function|dc.dataTable}\n     */\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @method beginSlice\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n            return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @method endSlice\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [endSlice]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n            return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the grid size which determines the number of items displayed by the widget.\n     * @method size\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [size=999]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.size = function (size) {\n        if (!arguments.length) {\n            return _size;\n        }\n        _size = size;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that formats an item. The data grid widget uses a\n     * function to generate dynamic html. Use your favourite templating engine or\n     * generate the string directly.\n     * @method html\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.html(function (d) { return '<div class='item '+data.exampleCategory+''>'+data.exampleString+'</div>';});\n     * @param {Function} [html]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.html = function (html) {\n        if (!arguments.length) {\n            return _html;\n        }\n        _html = html;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that formats a group label.\n     * @method htmlGroup\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.htmlGroup (function (d) { return '<h2>'.d.key . 'with ' . d.values.length .' items</h2>'});\n     * @param {Function} [htmlGroup]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.htmlGroup = function (htmlGroup) {\n        if (!arguments.length) {\n            return _htmlGroup;\n        }\n        _htmlGroup = htmlGroup;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at the item\n     * level and returns a particular field to be sorted.\n     * @method sortBy\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortByFunction]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.sortBy = function (sortByFunction) {\n        if (!arguments.length) {\n            return _sortBy;\n        }\n        _sortBy = sortByFunction;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort the order function.\n     * @method order\n     * @memberof dc.dataGrid\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A concrete implementation of a general purpose bubble chart that allows data visualization using the\n * following dimensions:\n * - x axis position\n * - y axis position\n * - bubble radius\n * - color\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n * @class bubbleChart\n * @memberof dc\n * @mixes dc.bubbleMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a bubble chart under #chart-container1 element using the default global chart group\n * var bubbleChart1 = dc.bubbleChart('#chart-container1');\n * // create a bubble chart under #chart-container2 element using chart group A\n * var bubbleChart2 = dc.bubbleChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.bubbleChart}\n */\ndc.bubbleChart = function (parent, chartGroup) {\n    var _chart = dc.bubbleMixin(dc.coordinateGridMixin({}));\n\n    _chart.transitionDuration(750);\n\n    _chart.transitionDelay(0);\n\n    var bubbleLocator = function (d) {\n        return 'translate(' + (bubbleX(d)) + ',' + (bubbleY(d)) + ')';\n    };\n\n    _chart.plotData = function () {\n        _chart.calculateRadiusDomain();\n        _chart.r().range([_chart.MIN_RADIUS, _chart.xAxisLength() * _chart.maxBubbleRelativeSize()]);\n\n        var data = _chart.data();\n        var bubbleG = _chart.chartBodyG().selectAll('g.' + _chart.BUBBLE_NODE_CLASS)\n                .data(data, function (d) { return d.key; });\n        if (_chart.sortBubbleSize()) {\n            // update dom order based on sort\n            bubbleG.order();\n        }\n\n        renderNodes(bubbleG);\n\n        updateNodes(bubbleG);\n\n        removeNodes(bubbleG);\n\n        _chart.fadeDeselectedArea();\n    };\n\n    function renderNodes (bubbleG) {\n        var bubbleGEnter = bubbleG.enter().append('g');\n\n        bubbleGEnter\n            .attr('class', _chart.BUBBLE_NODE_CLASS)\n            .attr('transform', bubbleLocator)\n            .append('circle').attr('class', function (d, i) {\n                return _chart.BUBBLE_CLASS + ' _' + i;\n            })\n            .on('click', _chart.onClick)\n            .attr('fill', _chart.getColor)\n            .attr('r', 0);\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay())\n            .select('circle.' + _chart.BUBBLE_CLASS)\n            .attr('r', function (d) {\n                return _chart.bubbleR(d);\n            })\n            .attr('opacity', function (d) {\n                return (_chart.bubbleR(d) > 0) ? 1 : 0;\n            });\n\n        _chart._doRenderLabel(bubbleGEnter);\n\n        _chart._doRenderTitles(bubbleGEnter);\n    }\n\n    function updateNodes (bubbleG) {\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', bubbleLocator)\n            .select('circle.' + _chart.BUBBLE_CLASS)\n            .attr('fill', _chart.getColor)\n            .attr('r', function (d) {\n                return _chart.bubbleR(d);\n            })\n            .attr('opacity', function (d) {\n                return (_chart.bubbleR(d) > 0) ? 1 : 0;\n            });\n\n        _chart.doUpdateLabels(bubbleG);\n        _chart.doUpdateTitles(bubbleG);\n    }\n\n    function removeNodes (bubbleG) {\n        bubbleG.exit().remove();\n    }\n\n    function bubbleX (d) {\n        var x = _chart.x()(_chart.keyAccessor()(d));\n        if (isNaN(x)) {\n            x = 0;\n        }\n        return x;\n    }\n\n    function bubbleY (d) {\n        var y = _chart.y()(_chart.valueAccessor()(d));\n        if (isNaN(y)) {\n            y = 0;\n        }\n        return y;\n    }\n\n    _chart.renderBrush = function () {\n        // override default x axis brush from parent chart\n    };\n\n    _chart.redrawBrush = function () {\n        // override default x axis brush from parent chart\n        _chart.fadeDeselectedArea();\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Composite charts are a special kind of chart that render multiple charts on the same Coordinate\n * Grid. You can overlay (compose) different bar/line/area charts in a single composite chart to\n * achieve some quite flexible charting effects.\n * @class compositeChart\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a composite chart under #chart-container1 element using the default global chart group\n * var compositeChart1 = dc.compositeChart('#chart-container1');\n * // create a composite chart under #chart-container2 element using chart group A\n * var compositeChart2 = dc.compositeChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.compositeChart}\n */\ndc.compositeChart = function (parent, chartGroup) {\n\n    var SUB_CHART_CLASS = 'sub';\n    var DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING = 12;\n\n    var _chart = dc.coordinateGridMixin({});\n    var _children = [];\n\n    var _childOptions = {};\n\n    var _shareColors = false,\n        _shareTitle = true,\n        _alignYAxes = false;\n\n    var _rightYAxis = d3.svg.axis(),\n        _rightYAxisLabel = 0,\n        _rightYAxisLabelPadding = DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING,\n        _rightY,\n        _rightAxisGridLines = false;\n\n    _chart._mandatoryAttributes([]);\n    _chart.transitionDuration(500);\n    _chart.transitionDelay(0);\n\n    dc.override(_chart, '_generateG', function () {\n        var g = this.__generateG();\n\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n\n            generateChildG(child, i);\n\n            if (!child.dimension()) {\n                child.dimension(_chart.dimension());\n            }\n            if (!child.group()) {\n                child.group(_chart.group());\n            }\n\n            child.chartGroup(_chart.chartGroup());\n            child.svg(_chart.svg());\n            child.xUnits(_chart.xUnits());\n            child.transitionDuration(_chart.transitionDuration(), _chart.transitionDelay());\n            child.brushOn(_chart.brushOn());\n            child.renderTitle(_chart.renderTitle());\n            child.elasticX(_chart.elasticX());\n        }\n\n        return g;\n    });\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n        var brushIsEmpty = _chart.brushIsEmpty(extent);\n\n        for (var i = 0; i < _children.length; ++i) {\n            _children[i].replaceFilter(brushIsEmpty ? null : extent);\n        }\n    };\n\n    _chart._prepareYAxis = function () {\n        var left = (leftYAxisChildren().length !== 0);\n        var right = (rightYAxisChildren().length !== 0);\n        var ranges = calculateYAxisRanges(left, right);\n\n        if (left) { prepareLeftYAxis(ranges); }\n        if (right) { prepareRightYAxis(ranges); }\n\n        if (leftYAxisChildren().length > 0 && !_rightAxisGridLines) {\n            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _chart.y(), _chart.yAxis());\n        } else if (rightYAxisChildren().length > 0) {\n            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _rightY, _rightYAxis);\n        }\n    };\n\n    _chart.renderYAxis = function () {\n        if (leftYAxisChildren().length !== 0) {\n            _chart.renderYAxisAt('y', _chart.yAxis(), _chart.margins().left);\n            _chart.renderYAxisLabel('y', _chart.yAxisLabel(), -90);\n        }\n\n        if (rightYAxisChildren().length !== 0) {\n            _chart.renderYAxisAt('yr', _chart.rightYAxis(), _chart.width() - _chart.margins().right);\n            _chart.renderYAxisLabel('yr', _chart.rightYAxisLabel(), 90, _chart.width() - _rightYAxisLabelPadding);\n        }\n    };\n\n    function calculateYAxisRanges (left, right) {\n        var lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax;\n        var ranges;\n\n        if (left) {\n            lyAxisMin = yAxisMin();\n            lyAxisMax = yAxisMax();\n        }\n\n        if (right) {\n            ryAxisMin = rightYAxisMin();\n            ryAxisMax = rightYAxisMax();\n        }\n\n        if (_chart.alignYAxes() && left && right) {\n            ranges = alignYAxisRanges(lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax);\n        }\n\n        return ranges || {\n            lyAxisMin: lyAxisMin,\n            lyAxisMax: lyAxisMax,\n            ryAxisMin: ryAxisMin,\n            ryAxisMax: ryAxisMax\n        };\n    }\n\n    function alignYAxisRanges (lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax) {\n        // since the two series will share a zero, each Y is just a multiple\n        // of the other. and the ratio should be the ratio of the ranges of the\n        // input data, so that they come out the same height. so we just min/max\n\n        // note: both ranges already include zero due to the stack mixin (#667)\n        // if #667 changes, we can reconsider whether we want data height or\n        // height from zero to be equal. and it will be possible for the axes\n        // to be aligned but not visible.\n        var extentRatio = (ryAxisMax - ryAxisMin) / (lyAxisMax - lyAxisMin);\n\n        return {\n            lyAxisMin: Math.min(lyAxisMin, ryAxisMin / extentRatio),\n            lyAxisMax: Math.max(lyAxisMax, ryAxisMax / extentRatio),\n            ryAxisMin: Math.min(ryAxisMin, lyAxisMin * extentRatio),\n            ryAxisMax: Math.max(ryAxisMax, lyAxisMax * extentRatio)\n        };\n    }\n\n    function prepareRightYAxis (ranges) {\n        var needDomain = _chart.rightY() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n        if (_chart.rightY() === undefined) {\n            _chart.rightY(d3.scale.linear());\n        }\n        if (needDomain) {\n            _chart.rightY().domain([ranges.ryAxisMin, ranges.ryAxisMax]);\n        }\n        if (needRange) {\n            _chart.rightY().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.rightY().range([_chart.yAxisHeight(), 0]);\n        _chart.rightYAxis(_chart.rightYAxis().scale(_chart.rightY()));\n\n        _chart.rightYAxis().orient('right');\n    }\n\n    function prepareLeftYAxis (ranges) {\n        var needDomain = _chart.y() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n        if (_chart.y() === undefined) {\n            _chart.y(d3.scale.linear());\n        }\n        if (needDomain) {\n            _chart.y().domain([ranges.lyAxisMin, ranges.lyAxisMax]);\n        }\n        if (needRange) {\n            _chart.y().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.y().range([_chart.yAxisHeight(), 0]);\n        _chart.yAxis(_chart.yAxis().scale(_chart.y()));\n\n        _chart.yAxis().orient('left');\n    }\n\n    function generateChildG (child, i) {\n        child._generateG(_chart.g());\n        child.g().attr('class', SUB_CHART_CLASS + ' _' + i);\n    }\n\n    _chart.plotData = function () {\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n\n            if (!child.g()) {\n                generateChildG(child, i);\n            }\n\n            if (_shareColors) {\n                child.colors(_chart.colors());\n            }\n\n            child.x(_chart.x());\n\n            child.xAxis(_chart.xAxis());\n\n            if (child.useRightYAxis()) {\n                child.y(_chart.rightY());\n                child.yAxis(_chart.rightYAxis());\n            } else {\n                child.y(_chart.y());\n                child.yAxis(_chart.yAxis());\n            }\n\n            child.plotData();\n\n            child._activateRenderlets();\n        }\n    };\n\n    /**\n     * Get or set whether to draw gridlines from the right y axis.  Drawing from the left y axis is the\n     * default behavior. This option is only respected when subcharts with both left and right y-axes\n     * are present.\n     * @method useRightAxisGridLines\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [useRightAxisGridLines=false]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.useRightAxisGridLines = function (useRightAxisGridLines) {\n        if (!arguments) {\n            return _rightAxisGridLines;\n        }\n\n        _rightAxisGridLines = useRightAxisGridLines;\n        return _chart;\n    };\n\n    /**\n     * Get or set chart-specific options for all child charts. This is equivalent to calling\n     * {@link dc.baseMixin#options .options} on each child chart.\n     * @method childOptions\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Object} [childOptions]\n     * @returns {Object|dc.compositeChart}\n     */\n    _chart.childOptions = function (childOptions) {\n        if (!arguments.length) {\n            return _childOptions;\n        }\n        _childOptions = childOptions;\n        _children.forEach(function (child) {\n            child.options(_childOptions);\n        });\n        return _chart;\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n            child.brush(_chart.brush());\n            child.fadeDeselectedArea();\n        }\n    };\n\n    /**\n     * Set or get the right y axis label.\n     * @method rightYAxisLabel\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {String} [rightYAxisLabel]\n     * @param {Number} [padding]\n     * @returns {String|dc.compositeChart}\n     */\n    _chart.rightYAxisLabel = function (rightYAxisLabel, padding) {\n        if (!arguments.length) {\n            return _rightYAxisLabel;\n        }\n        _rightYAxisLabel = rightYAxisLabel;\n        _chart.margins().right -= _rightYAxisLabelPadding;\n        _rightYAxisLabelPadding = (padding === undefined) ? DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING : padding;\n        _chart.margins().right += _rightYAxisLabelPadding;\n        return _chart;\n    };\n\n    /**\n     * Combine the given charts into one single composite coordinate grid chart.\n     * @method compose\n     * @memberof dc.compositeChart\n     * @instance\n     * @example\n     * moveChart.compose([\n     *     // when creating sub-chart you need to pass in the parent chart\n     *     dc.lineChart(moveChart)\n     *         .group(indexAvgByMonthGroup) // if group is missing then parent's group will be used\n     *         .valueAccessor(function (d){return d.value.avg;})\n     *         // most of the normal functions will continue to work in a composed chart\n     *         .renderArea(true)\n     *         .stack(monthlyMoveGroup, function (d){return d.value;})\n     *         .title(function (d){\n     *             var value = d.value.avg?d.value.avg:d.value;\n     *             if(isNaN(value)) value = 0;\n     *             return dateFormat(d.key) + '\\n' + numberFormat(value);\n     *         }),\n     *     dc.barChart(moveChart)\n     *         .group(volumeByMonthGroup)\n     *         .centerBar(true)\n     * ]);\n     * @param {Array<Chart>} [subChartArray]\n     * @returns {dc.compositeChart}\n     */\n    _chart.compose = function (subChartArray) {\n        _children = subChartArray;\n        _children.forEach(function (child) {\n            child.height(_chart.height());\n            child.width(_chart.width());\n            child.margins(_chart.margins());\n\n            if (_shareTitle) {\n                child.title(_chart.title());\n            }\n\n            child.options(_childOptions);\n        });\n        return _chart;\n    };\n\n    /**\n     * Returns the child charts which are composed into the composite chart.\n     * @method children\n     * @memberof dc.compositeChart\n     * @instance\n     * @returns {Array<dc.baseMixin>}\n     */\n    _chart.children = function () {\n        return _children;\n    };\n\n    /**\n     * Get or set color sharing for the chart. If set, the {@link dc.colorMixin#colors .colors()} value from this chart\n     * will be shared with composed children. Additionally if the child chart implements\n     * Stackable and has not set a custom .colorAccessor, then it will generate a color\n     * specific to its order in the composition.\n     * @method shareColors\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [shareColors=false]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.shareColors = function (shareColors) {\n        if (!arguments.length) {\n            return _shareColors;\n        }\n        _shareColors = shareColors;\n        return _chart;\n    };\n\n    /**\n     * Get or set title sharing for the chart. If set, the {@link dc.baseMixin#title .title()} value from\n     * this chart will be shared with composed children.\n     * @method shareTitle\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [shareTitle=true]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.shareTitle = function (shareTitle) {\n        if (!arguments.length) {\n            return _shareTitle;\n        }\n        _shareTitle = shareTitle;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y scale for the right axis. The right y scale is typically automatically\n     * generated by the chart implementation.\n     * @method rightY\n     * @memberof dc.compositeChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|dc.compositeChart}\n     */\n    _chart.rightY = function (yScale) {\n        if (!arguments.length) {\n            return _rightY;\n        }\n        _rightY = yScale;\n        _chart.rescale();\n        return _chart;\n    };\n\n    /**\n     * Get or set alignment between left and right y axes. A line connecting '0' on both y axis\n     * will be parallel to x axis. This only has effect when {@link #dc.coordinateGridMixin+elasticY elasticY} is true.\n     * @method alignYAxes\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [alignYAxes=false]\n     * @returns {Chart}\n     */\n    _chart.alignYAxes = function (alignYAxes) {\n        if (!arguments.length) {\n            return _alignYAxes;\n        }\n        _alignYAxes = alignYAxes;\n        _chart.rescale();\n        return _chart;\n    };\n\n    function leftYAxisChildren () {\n        return _children.filter(function (child) {\n            return !child.useRightYAxis();\n        });\n    }\n\n    function rightYAxisChildren () {\n        return _children.filter(function (child) {\n            return child.useRightYAxis();\n        });\n    }\n\n    function getYAxisMin (charts) {\n        return charts.map(function (c) {\n            return c.yAxisMin();\n        });\n    }\n\n    delete _chart.yAxisMin;\n    function yAxisMin () {\n        return d3.min(getYAxisMin(leftYAxisChildren()));\n    }\n\n    function rightYAxisMin () {\n        return d3.min(getYAxisMin(rightYAxisChildren()));\n    }\n\n    function getYAxisMax (charts) {\n        return charts.map(function (c) {\n            return c.yAxisMax();\n        });\n    }\n\n    delete _chart.yAxisMax;\n    function yAxisMax () {\n        return dc.utils.add(d3.max(getYAxisMax(leftYAxisChildren())), _chart.yAxisPadding());\n    }\n\n    function rightYAxisMax () {\n        return dc.utils.add(d3.max(getYAxisMax(rightYAxisChildren())), _chart.yAxisPadding());\n    }\n\n    function getAllXAxisMinFromChildCharts () {\n        return _children.map(function (c) {\n            return c.xAxisMin();\n        });\n    }\n\n    dc.override(_chart, 'xAxisMin', function () {\n        return dc.utils.subtract(d3.min(getAllXAxisMinFromChildCharts()), _chart.xAxisPadding());\n    });\n\n    function getAllXAxisMaxFromChildCharts () {\n        return _children.map(function (c) {\n            return c.xAxisMax();\n        });\n    }\n\n    dc.override(_chart, 'xAxisMax', function () {\n        return dc.utils.add(d3.max(getAllXAxisMaxFromChildCharts()), _chart.xAxisPadding());\n    });\n\n    _chart.legendables = function () {\n        return _children.reduce(function (items, child) {\n            if (_shareColors) {\n                child.colors(_chart.colors());\n            }\n            items.push.apply(items, child.legendables());\n            return items;\n        }, []);\n    };\n\n    _chart.legendHighlight = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n            var child = _children[j];\n            child.legendHighlight(d);\n        }\n    };\n\n    _chart.legendReset = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n            var child = _children[j];\n            child.legendReset(d);\n        }\n    };\n\n    _chart.legendToggle = function () {\n        console.log('composite should not be getting legendToggle itself');\n    };\n\n    /**\n     * Set or get the right y axis used by the composite chart. This function is most useful when y\n     * axis customization is required. The y axis in dc.js is an instance of a [d3 axis\n     * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis) therefore it supports any valid\n     * d3 axis manipulation.\n     *\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.\n     * @method rightYAxis\n     * @memberof dc.compositeChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize y axis tick format\n     * chart.rightYAxis().tickFormat(function (v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.rightYAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [rightYAxis]\n     * @returns {d3.svg.axis|dc.compositeChart}\n     */\n    _chart.rightYAxis = function (rightYAxis) {\n        if (!arguments.length) {\n            return _rightYAxis;\n        }\n        _rightYAxis = rightYAxis;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A series chart is a chart that shows multiple series of data overlaid on one chart, where the\n * series is specified in the data. It is a specialization of Composite Chart and inherits all\n * composite features other than recomposing the chart.\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/series.html Series Chart}\n * @class seriesChart\n * @memberof dc\n * @mixes dc.compositeChart\n * @example\n * // create a series chart under #chart-container1 element using the default global chart group\n * var seriesChart1 = dc.seriesChart(\"#chart-container1\");\n * // create a series chart under #chart-container2 element using chart group A\n * var seriesChart2 = dc.seriesChart(\"#chart-container2\", \"chartGroupA\");\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.seriesChart}\n */\ndc.seriesChart = function (parent, chartGroup) {\n    var _chart = dc.compositeChart(parent, chartGroup);\n\n    function keySort (a, b) {\n        return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n    }\n\n    var _charts = {};\n    var _chartFunction = dc.lineChart;\n    var _seriesAccessor;\n    var _seriesSort = d3.ascending;\n    var _valueSort = keySort;\n\n    _chart._mandatoryAttributes().push('seriesAccessor', 'chart');\n    _chart.shareColors(true);\n\n    _chart._preprocessData = function () {\n        var keep = [];\n        var childrenChanged;\n        var nester = d3.nest().key(_seriesAccessor);\n        if (_seriesSort) {\n            nester.sortKeys(_seriesSort);\n        }\n        if (_valueSort) {\n            nester.sortValues(_valueSort);\n        }\n        var nesting = nester.entries(_chart.data());\n        var children =\n            nesting.map(function (sub, i) {\n                var subChart = _charts[sub.key] || _chartFunction.call(_chart, _chart, chartGroup, sub.key, i);\n                if (!_charts[sub.key]) {\n                    childrenChanged = true;\n                }\n                _charts[sub.key] = subChart;\n                keep.push(sub.key);\n                return subChart\n                    .dimension(_chart.dimension())\n                    .group({all: d3.functor(sub.values)}, sub.key)\n                    .keyAccessor(_chart.keyAccessor())\n                    .valueAccessor(_chart.valueAccessor())\n                    .brushOn(_chart.brushOn());\n            });\n        // this works around the fact compositeChart doesn't really\n        // have a removal interface\n        Object.keys(_charts)\n            .filter(function (c) {return keep.indexOf(c) === -1;})\n            .forEach(function (c) {\n                clearChart(c);\n                childrenChanged = true;\n            });\n        _chart._compose(children);\n        if (childrenChanged && _chart.legend()) {\n            _chart.legend().render();\n        }\n    };\n\n    function clearChart (c) {\n        if (_charts[c].g()) {\n            _charts[c].g().remove();\n        }\n        delete _charts[c];\n    }\n\n    function resetChildren () {\n        Object.keys(_charts).map(clearChart);\n        _charts = {};\n    }\n\n    /**\n     * Get or set the chart function, which generates the child charts.\n     * @method chart\n     * @memberof dc.seriesChart\n     * @instance\n     * @example\n     * // put interpolation on the line charts used for the series\n     * chart.chart(function(c) { return dc.lineChart(c).interpolate('basis'); })\n     * // do a scatter series chart\n     * chart.chart(dc.scatterPlot)\n     * @param {Function} [chartFunction=dc.lineChart]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.chart = function (chartFunction) {\n        if (!arguments.length) {\n            return _chartFunction;\n        }\n        _chartFunction = chartFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Get or set accessor function for the displayed series. Given a datum, this function\n     * should return the series that datum belongs to.\n     * @method seriesAccessor\n     * @memberof dc.seriesChart\n     * @instance\n     * @example\n     * // simple series accessor\n     * chart.seriesAccessor(function(d) { return \"Expt: \" + d.key[0]; })\n     * @param {Function} [accessor]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.seriesAccessor = function (accessor) {\n        if (!arguments.length) {\n            return _seriesAccessor;\n        }\n        _seriesAccessor = accessor;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * Get or set a function to sort the list of series by, given series values.\n     * @method seriesSort\n     * @memberof dc.seriesChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.seriesSort(d3.descending);\n     * @param {Function} [sortFunction=d3.ascending]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.seriesSort = function (sortFunction) {\n        if (!arguments.length) {\n            return _seriesSort;\n        }\n        _seriesSort = sortFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * Get or set a function to sort each series values by. By default this is the key accessor which,\n     * for example, will ensure a lineChart series connects its points in increasing key/x order,\n     * rather than haphazardly.\n     * @method valueSort\n     * @memberof dc.seriesChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * // Default value sort\n     * _chart.valueSort(function keySort (a, b) {\n     *     return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n     * });\n     * @param {Function} [sortFunction]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.valueSort = function (sortFunction) {\n        if (!arguments.length) {\n            return _valueSort;\n        }\n        _valueSort = sortFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    // make compose private\n    _chart._compose = _chart.compose;\n    delete _chart.compose;\n\n    return _chart;\n};\n\n/**\n * The geo choropleth chart is designed as an easy way to create a crossfilter driven choropleth map\n * from GeoJson data. This chart implementation was inspired by\n * {@link http://bl.ocks.org/4060606 the great d3 choropleth example}.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n * @class geoChoroplethChart\n * @memberof dc\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a choropleth chart under '#us-chart' element using the default global chart group\n * var chart1 = dc.geoChoroplethChart('#us-chart');\n * // create a choropleth chart under '#us-chart2' element using chart group A\n * var chart2 = dc.compositeChart('#us-chart2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.geoChoroplethChart}\n */\ndc.geoChoroplethChart = function (parent, chartGroup) {\n    var _chart = dc.colorMixin(dc.baseMixin({}));\n\n    _chart.colorAccessor(function (d) {\n        return d || 0;\n    });\n\n    var _geoPath = d3.geo.path();\n    var _projectionFlag;\n\n    var _geoJsons = [];\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n            var states = _chart.svg().append('g')\n                .attr('class', 'layer' + layerIndex);\n\n            var regionG = states.selectAll('g.' + geoJson(layerIndex).name)\n                .data(geoJson(layerIndex).data)\n                .enter()\n                .append('g')\n                .attr('class', geoJson(layerIndex).name);\n\n            regionG\n                .append('path')\n                .attr('fill', 'white')\n                .attr('d', _geoPath);\n\n            regionG.append('title');\n\n            plotData(layerIndex);\n        }\n        _projectionFlag = false;\n    };\n\n    function plotData (layerIndex) {\n        var data = generateLayeredData();\n\n        if (isDataLayer(layerIndex)) {\n            var regionG = renderRegionG(layerIndex);\n\n            renderPaths(regionG, layerIndex, data);\n\n            renderTitle(regionG, layerIndex, data);\n        }\n    }\n\n    function generateLayeredData () {\n        var data = {};\n        var groupAll = _chart.data();\n        for (var i = 0; i < groupAll.length; ++i) {\n            data[_chart.keyAccessor()(groupAll[i])] = _chart.valueAccessor()(groupAll[i]);\n        }\n        return data;\n    }\n\n    function isDataLayer (layerIndex) {\n        return geoJson(layerIndex).keyAccessor;\n    }\n\n    function renderRegionG (layerIndex) {\n        var regionG = _chart.svg()\n            .selectAll(layerSelector(layerIndex))\n            .classed('selected', function (d) {\n                return isSelected(layerIndex, d);\n            })\n            .classed('deselected', function (d) {\n                return isDeselected(layerIndex, d);\n            })\n            .attr('class', function (d) {\n                var layerNameClass = geoJson(layerIndex).name;\n                var regionClass = dc.utils.nameToId(geoJson(layerIndex).keyAccessor(d));\n                var baseClasses = layerNameClass + ' ' + regionClass;\n                if (isSelected(layerIndex, d)) {\n                    baseClasses += ' selected';\n                }\n                if (isDeselected(layerIndex, d)) {\n                    baseClasses += ' deselected';\n                }\n                return baseClasses;\n            });\n        return regionG;\n    }\n\n    function layerSelector (layerIndex) {\n        return 'g.layer' + layerIndex + ' g.' + geoJson(layerIndex).name;\n    }\n\n    function isSelected (layerIndex, d) {\n        return _chart.hasFilter() && _chart.hasFilter(getKey(layerIndex, d));\n    }\n\n    function isDeselected (layerIndex, d) {\n        return _chart.hasFilter() && !_chart.hasFilter(getKey(layerIndex, d));\n    }\n\n    function getKey (layerIndex, d) {\n        return geoJson(layerIndex).keyAccessor(d);\n    }\n\n    function geoJson (index) {\n        return _geoJsons[index];\n    }\n\n    function renderPaths (regionG, layerIndex, data) {\n        var paths = regionG\n            .select('path')\n            .attr('fill', function () {\n                var currentFill = d3.select(this).attr('fill');\n                if (currentFill) {\n                    return currentFill;\n                }\n                return 'none';\n            })\n            .on('click', function (d) {\n                return _chart.onClick(d, layerIndex);\n            });\n\n        dc.transition(paths, _chart.transitionDuration(), _chart.transitionDelay()).attr('fill', function (d, i) {\n            return _chart.getColor(data[geoJson(layerIndex).keyAccessor(d)], i);\n        });\n    }\n\n    _chart.onClick = function (d, layerIndex) {\n        var selectedRegion = geoJson(layerIndex).keyAccessor(d);\n        dc.events.trigger(function () {\n            _chart.filter(selectedRegion);\n            _chart.redrawGroup();\n        });\n    };\n\n    function renderTitle (regionG, layerIndex, data) {\n        if (_chart.renderTitle()) {\n            regionG.selectAll('title').text(function (d) {\n                var key = getKey(layerIndex, d);\n                var value = data[key];\n                return _chart.title()({key: key, value: value});\n            });\n        }\n    }\n\n    _chart._doRedraw = function () {\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n            plotData(layerIndex);\n            if (_projectionFlag) {\n                _chart.svg().selectAll('g.' + geoJson(layerIndex).name + ' path').attr('d', _geoPath);\n            }\n        }\n        _projectionFlag = false;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Use this function to insert a new GeoJson map layer. This function can be invoked multiple times\n     * if you have multiple GeoJson data layers to render on top of each other. If you overlay multiple\n     * layers with the same name the new overlay will override the existing one.\n     * @method overlayGeoJson\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link http://geojson.org/ GeoJSON}\n     * @see {@link https://github.com/topojson/topojson/wiki TopoJSON}\n     * @see {@link https://github.com/topojson/topojson-1.x-api-reference/blob/master/API-Reference.md#wiki-feature topojson.feature}\n     * @example\n     * // insert a layer for rendering US states\n     * chart.overlayGeoJson(statesJson.features, 'state', function(d) {\n     *      return d.properties.name;\n     * });\n     * @param {geoJson} json - a geojson feed\n     * @param {String} name - name of the layer\n     * @param {Function} keyAccessor - accessor function used to extract 'key' from the GeoJson data. The key extracted by\n     * this function should match the keys returned by the crossfilter groups.\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.overlayGeoJson = function (json, name, keyAccessor) {\n        for (var i = 0; i < _geoJsons.length; ++i) {\n            if (_geoJsons[i].name === name) {\n                _geoJsons[i].data = json;\n                _geoJsons[i].keyAccessor = keyAccessor;\n                return _chart;\n            }\n        }\n        _geoJsons.push({name: name, data: json, keyAccessor: keyAccessor});\n        return _chart;\n    };\n\n    /**\n     * Set custom geo projection function. See the available\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3 geo projection functions}.\n     * @method projection\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3.geo.projection}\n     * @see {@link https://github.com/d3/d3-geo-projection Extended d3.geo.projection}\n     * @param {d3.projection} [projection=d3.geo.albersUsa()]\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.projection = function (projection) {\n        _geoPath.projection(projection);\n        _projectionFlag = true;\n        return _chart;\n    };\n\n    /**\n     * Returns all GeoJson layers currently registered with this chart. The returned array is a\n     * reference to this chart's internal data structure, so any modification to this array will also\n     * modify this chart's internal registration.\n     * @method geoJsons\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @returns {Array<{name:String, data: Object, accessor: Function}>}\n     */\n    _chart.geoJsons = function () {\n        return _geoJsons;\n    };\n\n    /**\n     * Returns the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path} object used to\n     * render the projection and features.  Can be useful for figuring out the bounding box of the\n     * feature set and thus a way to calculate scale and translation for the projection.\n     * @method geoPath\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path}\n     * @returns {d3.geo.path}\n     */\n    _chart.geoPath = function () {\n        return _geoPath;\n    };\n\n    /**\n     * Remove a GeoJson layer from this chart by name\n     * @method removeGeoJson\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @param {String} name\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.removeGeoJson = function (name) {\n        var geoJsons = [];\n\n        for (var i = 0; i < _geoJsons.length; ++i) {\n            var layer = _geoJsons[i];\n            if (layer.name !== name) {\n                geoJsons.push(layer);\n            }\n        }\n\n        _geoJsons = geoJsons;\n\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The bubble overlay chart is quite different from the typical bubble chart. With the bubble overlay\n * chart you can arbitrarily place bubbles on an existing svg or bitmap image, thus changing the\n * typical x and y positioning while retaining the capability to visualize data using bubble radius\n * and coloring.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class bubbleOverlay\n * @memberof dc\n * @mixes dc.bubbleMixin\n * @mixes dc.baseMixin\n * @example\n * // create a bubble overlay chart on top of the '#chart-container1 svg' element using the default global chart group\n * var bubbleChart1 = dc.bubbleOverlayChart('#chart-container1').svg(d3.select('#chart-container1 svg'));\n * // create a bubble overlay chart on top of the '#chart-container2 svg' element using chart group A\n * var bubbleChart2 = dc.compositeChart('#chart-container2', 'chartGroupA').svg(d3.select('#chart-container2 svg'));\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.bubbleOverlay}\n */\ndc.bubbleOverlay = function (parent, chartGroup) {\n    var BUBBLE_OVERLAY_CLASS = 'bubble-overlay';\n    var BUBBLE_NODE_CLASS = 'node';\n    var BUBBLE_CLASS = 'bubble';\n\n    /**\n     * **mandatory**\n     *\n     * Set the underlying svg image element. Unlike other dc charts this chart will not generate a svg\n     * element; therefore the bubble overlay chart will not work if this function is not invoked. If the\n     * underlying image is a bitmap, then an empty svg will need to be created on top of the image.\n     * @method svg\n     * @memberof dc.bubbleOverlay\n     * @instance\n     * @example\n     * // set up underlying svg element\n     * chart.svg(d3.select('#chart svg'));\n     * @param {SVGElement|d3.selection} [imageElement]\n     * @returns {dc.bubbleOverlay}\n     */\n    var _chart = dc.bubbleMixin(dc.baseMixin({}));\n    var _g;\n    var _points = [];\n\n    _chart.transitionDuration(750);\n\n    _chart.transitionDelay(0);\n\n    _chart.radiusValueAccessor(function (d) {\n        return d.value;\n    });\n\n    /**\n     * **mandatory**\n     *\n     * Set up a data point on the overlay. The name of a data point should match a specific 'key' among\n     * data groups generated using keyAccessor.  If a match is found (point name <-> data group key)\n     * then a bubble will be generated at the position specified by the function. x and y\n     * value specified here are relative to the underlying svg.\n     * @method point\n     * @memberof dc.bubbleOverlay\n     * @instance\n     * @param {String} name\n     * @param {Number} x\n     * @param {Number} y\n     * @returns {dc.bubbleOverlay}\n     */\n    _chart.point = function (name, x, y) {\n        _points.push({name: name, x: x, y: y});\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        _g = initOverlayG();\n\n        _chart.r().range([_chart.MIN_RADIUS, _chart.width() * _chart.maxBubbleRelativeSize()]);\n\n        initializeBubbles();\n\n        _chart.fadeDeselectedArea();\n\n        return _chart;\n    };\n\n    function initOverlayG () {\n        _g = _chart.select('g.' + BUBBLE_OVERLAY_CLASS);\n        if (_g.empty()) {\n            _g = _chart.svg().append('g').attr('class', BUBBLE_OVERLAY_CLASS);\n        }\n        return _g;\n    }\n\n    function initializeBubbles () {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n            var nodeG = getNodeG(point, data);\n\n            var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n\n            if (circle.empty()) {\n                circle = nodeG.append('circle')\n                    .attr('class', BUBBLE_CLASS)\n                    .attr('r', 0)\n                    .attr('fill', _chart.getColor)\n                    .on('click', _chart.onClick);\n            }\n\n            dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('r', function (d) {\n                    return _chart.bubbleR(d);\n                });\n\n            _chart._doRenderLabel(nodeG);\n\n            _chart._doRenderTitles(nodeG);\n        });\n    }\n\n    function mapData () {\n        var data = {};\n        _chart.data().forEach(function (datum) {\n            data[_chart.keyAccessor()(datum)] = datum;\n        });\n        return data;\n    }\n\n    function getNodeG (point, data) {\n        var bubbleNodeClass = BUBBLE_NODE_CLASS + ' ' + dc.utils.nameToId(point.name);\n\n        var nodeG = _g.select('g.' + dc.utils.nameToId(point.name));\n\n        if (nodeG.empty()) {\n            nodeG = _g.append('g')\n                .attr('class', bubbleNodeClass)\n                .attr('transform', 'translate(' + point.x + ',' + point.y + ')');\n        }\n\n        nodeG.datum(data[point.name]);\n\n        return nodeG;\n    }\n\n    _chart._doRedraw = function () {\n        updateBubbles();\n\n        _chart.fadeDeselectedArea();\n\n        return _chart;\n    };\n\n    function updateBubbles () {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n            var nodeG = getNodeG(point, data);\n\n            var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n\n            dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('r', function (d) {\n                    return _chart.bubbleR(d);\n                })\n                .attr('fill', _chart.getColor);\n\n            _chart.doUpdateLabels(nodeG);\n\n            _chart.doUpdateTitles(nodeG);\n        });\n    }\n\n    _chart.debug = function (flag) {\n        if (flag) {\n            var debugG = _chart.select('g.' + dc.constants.DEBUG_GROUP_CLASS);\n\n            if (debugG.empty()) {\n                debugG = _chart.svg()\n                    .append('g')\n                    .attr('class', dc.constants.DEBUG_GROUP_CLASS);\n            }\n\n            var debugText = debugG.append('text')\n                .attr('x', 10)\n                .attr('y', 20);\n\n            debugG\n                .append('rect')\n                .attr('width', _chart.width())\n                .attr('height', _chart.height())\n                .on('mousemove', function () {\n                    var position = d3.mouse(debugG.node());\n                    var msg = position[0] + ', ' + position[1];\n                    debugText.text(msg);\n                });\n        } else {\n            _chart.selectAll('.debug').remove();\n        }\n\n        return _chart;\n    };\n\n    _chart.anchor(parent, chartGroup);\n\n    return _chart;\n};\n\n/**\n * Concrete row chart implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class rowChart\n * @memberof dc\n * @mixes dc.capMixin\n * @mixes dc.marginMixin\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a row chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.rowChart('#chart-container1');\n * // create a row chart under #chart-container2 element using chart group A\n * var chart2 = dc.rowChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.rowChart}\n */\ndc.rowChart = function (parent, chartGroup) {\n\n    var _g;\n\n    var _labelOffsetX = 10;\n    var _labelOffsetY = 15;\n    var _hasLabelOffsetY = false;\n    var _dyOffset = '0.35em';  // this helps center labels https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#svg_text\n    var _titleLabelOffsetX = 2;\n\n    var _gap = 5;\n\n    var _fixedBarHeight = false;\n    var _rowCssClass = 'row';\n    var _titleRowCssClass = 'titlerow';\n    var _renderTitleLabel = false;\n\n    var _chart = dc.capMixin(dc.marginMixin(dc.colorMixin(dc.baseMixin({}))));\n\n    var _x;\n\n    var _elasticX;\n\n    var _xAxis = d3.svg.axis().orient('bottom');\n\n    var _rowData;\n\n    _chart.rowsCap = _chart.cap;\n\n    function calculateAxisScale () {\n        if (!_x || _elasticX) {\n            var extent = d3.extent(_rowData, _chart.cappedValueAccessor);\n            if (extent[0] > 0) {\n                extent[0] = 0;\n            }\n            if (extent[1] < 0) {\n                extent[1] = 0;\n            }\n            _x = d3.scale.linear().domain(extent)\n                .range([0, _chart.effectiveWidth()]);\n        }\n        _xAxis.scale(_x);\n    }\n\n    function drawAxis () {\n        var axisG = _g.select('g.axis');\n\n        calculateAxisScale();\n\n        if (axisG.empty()) {\n            axisG = _g.append('g').attr('class', 'axis');\n        }\n        axisG.attr('transform', 'translate(0, ' + _chart.effectiveHeight() + ')');\n\n        dc.transition(axisG, _chart.transitionDuration(), _chart.transitionDelay())\n            .call(_xAxis);\n    }\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg()\n            .append('g')\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n\n        drawChart();\n\n        return _chart;\n    };\n\n    _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n    });\n\n    _chart.label(_chart.cappedKeyAccessor);\n\n    /**\n     * Gets or sets the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}.\n     * @method x\n     * @memberof dc.rowChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}\n     * @param {d3.scale} [scale]\n     * @returns {d3.scale|dc.rowChart}\n     */\n    _chart.x = function (scale) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = scale;\n        return _chart;\n    };\n\n    function drawGridLines () {\n        _g.selectAll('g.tick')\n            .select('line.grid-line')\n            .remove();\n\n        _g.selectAll('g.tick')\n            .append('line')\n            .attr('class', 'grid-line')\n            .attr('x1', 0)\n            .attr('y1', 0)\n            .attr('x2', 0)\n            .attr('y2', function () {\n                return -_chart.effectiveHeight();\n            });\n    }\n\n    function drawChart () {\n        _rowData = _chart.data();\n\n        drawAxis();\n        drawGridLines();\n\n        var rows = _g.selectAll('g.' + _rowCssClass)\n            .data(_rowData);\n\n        createElements(rows);\n        removeElements(rows);\n        updateElements(rows);\n    }\n\n    function createElements (rows) {\n        var rowEnter = rows.enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return _rowCssClass + ' _' + i;\n            });\n\n        rowEnter.append('rect').attr('width', 0);\n\n        createLabels(rowEnter);\n    }\n\n    function removeElements (rows) {\n        rows.exit().remove();\n    }\n\n    function rootValue () {\n        var root = _x(0);\n        return (root === -Infinity || root !== root) ? _x(1) : root;\n    }\n\n    function updateElements (rows) {\n        var n = _rowData.length;\n\n        var height;\n        if (!_fixedBarHeight) {\n            height = (_chart.effectiveHeight() - (n + 1) * _gap) / n;\n        } else {\n            height = _fixedBarHeight;\n        }\n\n        // vertically align label in center unless they override the value via property setter\n        if (!_hasLabelOffsetY) {\n            _labelOffsetY = height / 2;\n        }\n\n        var rect = rows.attr('transform', function (d, i) {\n                return 'translate(0,' + ((i + 1) * _gap + i * height) + ')';\n            }).select('rect')\n            .attr('height', height)\n            .attr('fill', _chart.getColor)\n            .on('click', onClick)\n            .classed('deselected', function (d) {\n                return (_chart.hasFilter()) ? !isSelectedRow(d) : false;\n            })\n            .classed('selected', function (d) {\n                return (_chart.hasFilter()) ? isSelectedRow(d) : false;\n            });\n\n        dc.transition(rect, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('width', function (d) {\n                return Math.abs(rootValue() - _x(_chart.valueAccessor()(d)));\n            })\n            .attr('transform', translateX);\n\n        createTitles(rows);\n        updateLabels(rows);\n    }\n\n    function createTitles (rows) {\n        if (_chart.renderTitle()) {\n            rows.select('title').remove();\n            rows.append('title').text(_chart.title());\n        }\n    }\n\n    function createLabels (rowEnter) {\n        if (_chart.renderLabel()) {\n            rowEnter.append('text')\n                .on('click', onClick);\n        }\n        if (_chart.renderTitleLabel()) {\n            rowEnter.append('text')\n                .attr('class', _titleRowCssClass)\n                .on('click', onClick);\n        }\n    }\n\n    function updateLabels (rows) {\n        if (_chart.renderLabel()) {\n            var lab = rows.select('text')\n                .attr('x', _labelOffsetX)\n                .attr('y', _labelOffsetY)\n                .attr('dy', _dyOffset)\n                .on('click', onClick)\n                .attr('class', function (d, i) {\n                    return _rowCssClass + ' _' + i;\n                })\n                .text(function (d) {\n                    return _chart.label()(d);\n                });\n            dc.transition(lab, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', translateX);\n        }\n        if (_chart.renderTitleLabel()) {\n            var titlelab = rows.select('.' + _titleRowCssClass)\n                    .attr('x', _chart.effectiveWidth() - _titleLabelOffsetX)\n                    .attr('y', _labelOffsetY)\n                    .attr('dy', _dyOffset)\n                    .attr('text-anchor', 'end')\n                    .on('click', onClick)\n                    .attr('class', function (d, i) {\n                        return _titleRowCssClass + ' _' + i ;\n                    })\n                    .text(function (d) {\n                        return _chart.title()(d);\n                    });\n            dc.transition(titlelab, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', translateX);\n        }\n    }\n\n    /**\n     * Turn on/off Title label rendering (values) using SVG style of text-anchor 'end'.\n     * @method renderTitleLabel\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Boolean} [renderTitleLabel=false]\n     * @returns {Boolean|dc.rowChart}\n     */\n    _chart.renderTitleLabel = function (renderTitleLabel) {\n        if (!arguments.length) {\n            return _renderTitleLabel;\n        }\n        _renderTitleLabel = renderTitleLabel;\n        return _chart;\n    };\n\n    function onClick (d) {\n        _chart.onClick(d);\n    }\n\n    function translateX (d) {\n        var x = _x(_chart.cappedValueAccessor(d)),\n            x0 = rootValue(),\n            s = x > x0 ? x0 : x;\n        return 'translate(' + s + ',0)';\n    }\n\n    _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n    };\n\n    /**\n     * Get the x axis for the row chart instance.  Note: not settable for row charts.\n     * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object}\n     * documention for more information.\n     * @method xAxis\n     * @memberof dc.rowChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function (v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * @returns {d3.svg.axis}\n     */\n    _chart.xAxis = function () {\n        return _xAxis;\n    };\n\n    /**\n     * Get or set the fixed bar height. Default is [false] which will auto-scale bars.\n     * For example, if you want to fix the height for a specific number of bars (useful in TopN charts)\n     * you could fix height as follows (where count = total number of bars in your TopN and gap is\n     * your vertical gap space).\n     * @method fixedBarHeight\n     * @memberof dc.rowChart\n     * @instance\n     * @example\n     * chart.fixedBarHeight( chartheight - (count + 1) * gap / count);\n     * @param {Boolean|Number} [fixedBarHeight=false]\n     * @returns {Boolean|Number|dc.rowChart}\n     */\n    _chart.fixedBarHeight = function (fixedBarHeight) {\n        if (!arguments.length) {\n            return _fixedBarHeight;\n        }\n        _fixedBarHeight = fixedBarHeight;\n        return _chart;\n    };\n\n    /**\n     * Get or set the vertical gap space between rows on a particular row chart instance.\n     * @method gap\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [gap=5]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _chart;\n    };\n\n    /**\n     * Get or set the elasticity on x axis. If this attribute is set to true, then the x axis will rescle to auto-fit the\n     * data range when filtered.\n     * @method elasticX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Boolean} [elasticX]\n     * @returns {Boolean|dc.rowChart}\n     */\n    _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n            return _elasticX;\n        }\n        _elasticX = elasticX;\n        return _chart;\n    };\n\n    /**\n     * Get or set the x offset (horizontal space to the top left corner of a row) for labels on a particular row chart.\n     * @method labelOffsetX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [labelOffsetX=10]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.labelOffsetX = function (labelOffsetX) {\n        if (!arguments.length) {\n            return _labelOffsetX;\n        }\n        _labelOffsetX = labelOffsetX;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y offset (vertical space to the top left corner of a row) for labels on a particular row chart.\n     * @method labelOffsetY\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [labelOffsety=15]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.labelOffsetY = function (labelOffsety) {\n        if (!arguments.length) {\n            return _labelOffsetY;\n        }\n        _labelOffsetY = labelOffsety;\n        _hasLabelOffsetY = true;\n        return _chart;\n    };\n\n    /**\n     * Get of set the x offset (horizontal space between right edge of row and right edge or text.\n     * @method titleLabelOffsetX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [titleLabelOffsetX=2]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.titleLabelOffsetX = function (titleLabelOffsetX) {\n        if (!arguments.length) {\n            return _titleLabelOffsetX;\n        }\n        _titleLabelOffsetX = titleLabelOffsetX;\n        return _chart;\n    };\n\n    function isSelectedRow (d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d));\n    }\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * Legend is a attachable widget that can be added to other dc charts to render horizontal legend\n * labels.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class legend\n * @memberof dc\n * @example\n * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n * @returns {dc.legend}\n */\ndc.legend = function () {\n    var LABEL_GAP = 2;\n\n    var _legend = {},\n        _parent,\n        _x = 0,\n        _y = 0,\n        _itemHeight = 12,\n        _gap = 5,\n        _horizontal = false,\n        _legendWidth = 560,\n        _itemWidth = 70,\n        _autoItemWidth = false,\n        _legendText = dc.pluck('name'),\n        _maxItems;\n\n    var _g;\n\n    _legend.parent = function (p) {\n        if (!arguments.length) {\n            return _parent;\n        }\n        _parent = p;\n        return _legend;\n    };\n\n    _legend.render = function () {\n        _parent.svg().select('g.dc-legend').remove();\n        _g = _parent.svg().append('g')\n            .attr('class', 'dc-legend')\n            .attr('transform', 'translate(' + _x + ',' + _y + ')');\n        var legendables = _parent.legendables();\n\n        if (_maxItems !== undefined) {\n            legendables = legendables.slice(0, _maxItems);\n        }\n\n        var itemEnter = _g.selectAll('g.dc-legend-item')\n            .data(legendables)\n            .enter()\n            .append('g')\n            .attr('class', 'dc-legend-item')\n            .on('mouseover', function (d) {\n                _parent.legendHighlight(d);\n            })\n            .on('mouseout', function (d) {\n                _parent.legendReset(d);\n            })\n            .on('click', function (d) {\n                d.chart.legendToggle(d);\n            });\n\n        _g.selectAll('g.dc-legend-item')\n            .classed('fadeout', function (d) {\n                return d.chart.isLegendableHidden(d);\n            });\n\n        if (legendables.some(dc.pluck('dashstyle'))) {\n            itemEnter\n                .append('line')\n                .attr('x1', 0)\n                .attr('y1', _itemHeight / 2)\n                .attr('x2', _itemHeight)\n                .attr('y2', _itemHeight / 2)\n                .attr('stroke-width', 2)\n                .attr('stroke-dasharray', dc.pluck('dashstyle'))\n                .attr('stroke', dc.pluck('color'));\n        } else {\n            itemEnter\n                .append('rect')\n                .attr('width', _itemHeight)\n                .attr('height', _itemHeight)\n                .attr('fill', function (d) {return d ? d.color : 'blue';});\n        }\n\n        itemEnter.append('text')\n                .text(_legendText)\n                .attr('x', _itemHeight + LABEL_GAP)\n                .attr('y', function () {\n                    return _itemHeight / 2 + (this.clientHeight ? this.clientHeight : 13) / 2 - 2;\n                });\n\n        var _cumulativeLegendTextWidth = 0;\n        var row = 0;\n        itemEnter.attr('transform', function (d, i) {\n            if (_horizontal) {\n                var itemWidth   = _autoItemWidth === true ? this.getBBox().width + _gap : _itemWidth;\n                if ((_cumulativeLegendTextWidth + itemWidth) > _legendWidth && _cumulativeLegendTextWidth > 0) {\n                    ++row;\n                    _cumulativeLegendTextWidth = 0;\n                }\n                var translateBy = 'translate(' + _cumulativeLegendTextWidth + ',' + row * legendItemHeight() + ')';\n                _cumulativeLegendTextWidth += itemWidth;\n                return translateBy;\n            } else {\n                return 'translate(0,' + i * legendItemHeight() + ')';\n            }\n        });\n    };\n\n    function legendItemHeight () {\n        return _gap + _itemHeight;\n    }\n\n    /**\n     * Set or get x coordinate for legend widget.\n     * @method x\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [x=0]\n     * @returns {Number|dc.legend}\n     */\n    _legend.x = function (x) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = x;\n        return _legend;\n    };\n\n    /**\n     * Set or get y coordinate for legend widget.\n     * @method y\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [y=0]\n     * @returns {Number|dc.legend}\n     */\n    _legend.y = function (y) {\n        if (!arguments.length) {\n            return _y;\n        }\n        _y = y;\n        return _legend;\n    };\n\n    /**\n     * Set or get gap between legend items.\n     * @method gap\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [gap=5]\n     * @returns {Number|dc.legend}\n     */\n    _legend.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _legend;\n    };\n\n    /**\n     * Set or get legend item height.\n     * @method itemHeight\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [itemHeight=12]\n     * @returns {Number|dc.legend}\n     */\n    _legend.itemHeight = function (itemHeight) {\n        if (!arguments.length) {\n            return _itemHeight;\n        }\n        _itemHeight = itemHeight;\n        return _legend;\n    };\n\n    /**\n     * Position legend horizontally instead of vertically.\n     * @method horizontal\n     * @memberof dc.legend\n     * @instance\n     * @param  {Boolean} [horizontal=false]\n     * @returns {Boolean|dc.legend}\n     */\n    _legend.horizontal = function (horizontal) {\n        if (!arguments.length) {\n            return _horizontal;\n        }\n        _horizontal = horizontal;\n        return _legend;\n    };\n\n    /**\n     * Maximum width for horizontal legend.\n     * @method legendWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [legendWidth=500]\n     * @returns {Number|dc.legend}\n     */\n    _legend.legendWidth = function (legendWidth) {\n        if (!arguments.length) {\n            return _legendWidth;\n        }\n        _legendWidth = legendWidth;\n        return _legend;\n    };\n\n    /**\n     * Legend item width for horizontal legend.\n     * @method itemWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [itemWidth=70]\n     * @returns {Number|dc.legend}\n     */\n    _legend.itemWidth = function (itemWidth) {\n        if (!arguments.length) {\n            return _itemWidth;\n        }\n        _itemWidth = itemWidth;\n        return _legend;\n    };\n\n    /**\n     * Turn automatic width for legend items on or off. If true, {@link dc.legend#itemWidth itemWidth} is ignored.\n     * This setting takes into account the {@link dc.legend#gap gap}.\n     * @method autoItemWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Boolean} [autoItemWidth=false]\n     * @returns {Boolean|dc.legend}\n     */\n    _legend.autoItemWidth = function (autoItemWidth) {\n        if (!arguments.length) {\n            return _autoItemWidth;\n        }\n        _autoItemWidth = autoItemWidth;\n        return _legend;\n    };\n\n    /**\n     * Set or get the legend text function. The legend widget uses this function to render the legend\n     * text for each item. If no function is specified the legend widget will display the names\n     * associated with each group.\n     * @method legendText\n     * @memberof dc.legend\n     * @instance\n     * @param  {Function} [legendText]\n     * @returns {Function|dc.legend}\n     * @example\n     * // default legendText\n     * legend.legendText(dc.pluck('name'))\n     *\n     * // create numbered legend items\n     * chart.legend(dc.legend().legendText(function(d, i) { return i + '. ' + d.name; }))\n     *\n     * // create legend displaying group counts\n     * chart.legend(dc.legend().legendText(function(d) { return d.name + ': ' d.data; }))\n     **/\n    _legend.legendText = function (legendText) {\n        if (!arguments.length) {\n            return _legendText;\n        }\n        _legendText = legendText;\n        return _legend;\n    };\n\n    /**\n     * Maximum number of legend items to display\n     * @method maxItems\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [maxItems]\n     * @return {dc.legend}\n     */\n    _legend.maxItems = function (maxItems) {\n        if (!arguments.length) {\n            return _maxItems;\n        }\n        _maxItems = dc.utils.isNumber(maxItems) ? maxItems : undefined;\n        return _legend;\n    };\n\n    return _legend;\n};\n\n/**\n * A scatter plot chart\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/scatter.html Scatter Chart}\n * - {@link http://dc-js.github.io/dc.js/examples/multi-scatter.html Multi-Scatter Chart}\n * @class scatterPlot\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a scatter plot under #chart-container1 element using the default global chart group\n * var chart1 = dc.scatterPlot('#chart-container1');\n * // create a scatter plot under #chart-container2 element using chart group A\n * var chart2 = dc.scatterPlot('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.scatterPlot(compositeChart);\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.scatterPlot}\n */\ndc.scatterPlot = function (parent, chartGroup) {\n    var _chart = dc.coordinateGridMixin({});\n    var _symbol = d3.svg.symbol();\n\n    var _existenceAccessor = function (d) { return d.value; };\n\n    var originalKeyAccessor = _chart.keyAccessor();\n    _chart.keyAccessor(function (d) { return originalKeyAccessor(d)[0]; });\n    _chart.valueAccessor(function (d) { return originalKeyAccessor(d)[1]; });\n    _chart.colorAccessor(function () { return _chart._groupName; });\n\n    _chart.title(function (d) {\n        // this basically just counteracts the setting of its own key/value accessors\n        // see https://github.com/dc-js/dc.js/issues/702\n        return _chart.keyAccessor()(d) + ',' + _chart.valueAccessor()(d) + ': ' +\n            _chart.existenceAccessor()(d);\n    });\n\n    var _locator = function (d) {\n        return 'translate(' + _chart.x()(_chart.keyAccessor()(d)) + ',' +\n                              _chart.y()(_chart.valueAccessor()(d)) + ')';\n    };\n\n    var _highlightedSize = 7;\n    var _symbolSize = 5;\n    var _excludedSize = 3;\n    var _excludedColor = null;\n    var _excludedOpacity = 1.0;\n    var _emptySize = 0;\n    var _emptyOpacity = 0;\n    var _nonemptyOpacity = 1;\n    var _emptyColor = null;\n    var _filtered = [];\n\n    function elementSize (d, i) {\n        if (!_existenceAccessor(d)) {\n            return Math.pow(_emptySize, 2);\n        } else if (_filtered[i]) {\n            return Math.pow(_symbolSize, 2);\n        } else {\n            return Math.pow(_excludedSize, 2);\n        }\n    }\n    _symbol.size(elementSize);\n\n    dc.override(_chart, '_filter', function (filter) {\n        if (!arguments.length) {\n            return _chart.__filter();\n        }\n\n        return _chart.__filter(dc.filters.RangedTwoDimensionalFilter(filter));\n    });\n\n    _chart.plotData = function () {\n        var symbols = _chart.chartBodyG().selectAll('path.symbol')\n            .data(_chart.data());\n\n        symbols\n            .enter()\n        .append('path')\n            .attr('class', 'symbol')\n            .attr('opacity', 0)\n            .attr('fill', _chart.getColor)\n            .attr('transform', _locator);\n\n        symbols.call(renderTitles, _chart.data());\n\n        symbols.each(function (d, i) {\n            _filtered[i] = !_chart.filter() || _chart.filter().isFiltered([d.key[0], d.key[1]]);\n        });\n\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('opacity', function (d, i) {\n                if (!_existenceAccessor(d)) {\n                    return _emptyOpacity;\n                } else if (_filtered[i]) {\n                    return _nonemptyOpacity;\n                } else {\n                    return _chart.excludedOpacity();\n                }\n            })\n            .attr('fill', function (d, i) {\n                if (_emptyColor && !_existenceAccessor(d)) {\n                    return _emptyColor;\n                } else if (_chart.excludedColor() && !_filtered[i]) {\n                    return _chart.excludedColor();\n                } else {\n                    return _chart.getColor(d);\n                }\n            })\n            .attr('transform', _locator)\n            .attr('d', _symbol);\n\n        dc.transition(symbols.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('opacity', 0).remove();\n    };\n\n    function renderTitles (symbol, d) {\n        if (_chart.renderTitle()) {\n            symbol.selectAll('title').remove();\n            symbol.append('title').text(function (d) {\n                return _chart.title()(d);\n            });\n        }\n    }\n\n    /**\n     * Get or set the existence accessor.  If a point exists, it is drawn with\n     * {@link dc.scatterPlot#symbolSize symbolSize} radius and\n     * opacity 1; if it does not exist, it is drawn with\n     * {@link dc.scatterPlot#emptySize emptySize} radius and opacity 0. By default,\n     * the existence accessor checks if the reduced value is truthy.\n     * @method existenceAccessor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link dc.scatterPlot#symbolSize symbolSize}\n     * @see {@link dc.scatterPlot#emptySize emptySize}\n     * @example\n     * // default accessor\n     * chart.existenceAccessor(function (d) { return d.value; });\n     * @param {Function} [accessor]\n     * @returns {Function|dc.scatterPlot}\n     */\n    _chart.existenceAccessor = function (accessor) {\n        if (!arguments.length) {\n            return _existenceAccessor;\n        }\n        _existenceAccessor = accessor;\n        return this;\n    };\n\n    /**\n     * Get or set the symbol type used for each point. By default the symbol is a circle.\n     * Type can be a constant or an accessor.\n     * @method symbol\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_type d3.svg.symbol.type}\n     * @example\n     * // Circle type\n     * chart.symbol('circle');\n     * // Square type\n     * chart.symbol('square');\n     * @param {String|Function} [type='circle']\n     * @returns {String|Function|dc.scatterPlot}\n     */\n    _chart.symbol = function (type) {\n        if (!arguments.length) {\n            return _symbol.type();\n        }\n        _symbol.type(type);\n        return _chart;\n    };\n\n    /**\n     * Get or set the symbol generator. By default `dc.scatterPlot` will use\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol()}\n     * to generate symbols. `dc.scatterPlot` will set the\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size size accessor}\n     * on the symbol generator.\n     * @method customSymbol\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol}\n     * @see {@link https://stackoverflow.com/questions/25332120/create-additional-d3-js-symbols Create additional D3.js symbols}\n     * @param {String|Function} [customSymbol=d3.svg.symbol()]\n     * @returns {String|Function|dc.scatterPlot}\n     */\n    _chart.customSymbol = function (customSymbol) {\n        if (!arguments.length) {\n            return _symbol;\n        }\n        _symbol = customSymbol;\n        _symbol.size(elementSize);\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for symbols.\n     * @method symbolSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [symbolSize=3]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.symbolSize = function (symbolSize) {\n        if (!arguments.length) {\n            return _symbolSize;\n        }\n        _symbolSize = symbolSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for highlighted symbols.\n     * @method highlightedSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [highlightedSize=5]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.highlightedSize = function (highlightedSize) {\n        if (!arguments.length) {\n            return _highlightedSize;\n        }\n        _highlightedSize = highlightedSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get size for symbols excluded from this chart's filter. If null, no\n     * special size is applied for symbols based on their filter status.\n     * @method excludedSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [excludedSize=null]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedSize = function (excludedSize) {\n        if (!arguments.length) {\n            return _excludedSize;\n        }\n        _excludedSize = excludedSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get color for symbols excluded from this chart's filter. If null, no\n     * special color is applied for symbols based on their filter status.\n     * @method excludedColor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [excludedColor=null]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedColor = function (excludedColor) {\n        if (!arguments.length) {\n            return _excludedColor;\n        }\n        _excludedColor = excludedColor;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols excluded from this chart's filter.\n     * @method excludedOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [excludedOpacity=1.0]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedOpacity = function (excludedOpacity) {\n        if (!arguments.length) {\n            return _excludedOpacity;\n        }\n        _excludedOpacity = excludedOpacity;\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for symbols when the group is empty.\n     * @method emptySize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [emptySize=0]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.hiddenSize = _chart.emptySize = function (emptySize) {\n        if (!arguments.length) {\n            return _emptySize;\n        }\n        _emptySize = emptySize;\n        return _chart;\n    };\n\n    /**\n     * Set or get color for symbols when the group is empty. If null, just use the\n     * {@link dc.colorMixin#colors colorMixin.colors} color scale zero value.\n     * @name emptyColor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {String} [emptyColor=null]\n     * @return {String}\n     * @return {dc.scatterPlot}/\n     */\n    _chart.emptyColor = function (emptyColor) {\n        if (!arguments.length) {\n            return _emptyColor;\n        }\n        _emptyColor = emptyColor;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols when the group is empty.\n     * @name emptyOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [emptyOpacity=0]\n     * @return {Number}\n     * @return {dc.scatterPlot}\n     */\n    _chart.emptyOpacity = function (emptyOpacity) {\n        if (!arguments.length) {\n            return _emptyOpacity;\n        }\n        _emptyOpacity = emptyOpacity;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols when the group is not empty.\n     * @name nonemptyOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [nonemptyOpacity=1]\n     * @return {Number}\n     * @return {dc.scatterPlot}\n     */\n    _chart.nonemptyOpacity = function (nonemptyOpacity) {\n        if (!arguments.length) {\n            return _emptyOpacity;\n        }\n        _nonemptyOpacity = nonemptyOpacity;\n        return _chart;\n    };\n\n    _chart.legendables = function () {\n        return [{chart: _chart, name: _chart._groupName, color: _chart.getColor()}];\n    };\n\n    _chart.legendHighlight = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n            return symbol.attr('fill') === d.color;\n        }, _highlightedSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', true);\n    };\n\n    _chart.legendReset = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n            return symbol.attr('fill') === d.color;\n        }, _symbolSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', false);\n    };\n\n    function resizeSymbolsWhere (condition, size) {\n        var symbols = _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return condition(d3.select(this));\n        });\n        var oldSize = _symbol.size();\n        _symbol.size(Math.pow(size, 2));\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay()).attr('d', _symbol);\n        _symbol.size(oldSize);\n    }\n\n    _chart.setHandlePaths = function () {\n        // no handle paths for poly-brushes\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n        if (_chart.round()) {\n            extent[0] = extent[0].map(_chart.round());\n            extent[1] = extent[1].map(_chart.round());\n\n            _chart.g().select('.brush')\n                .call(_chart.brush().extent(extent));\n        }\n        return extent;\n    };\n\n    _chart.brushIsEmpty = function (extent) {\n        return _chart.brush().empty() || !extent || extent[0][0] >= extent[1][0] || extent[0][1] >= extent[1][1];\n    };\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n\n        _chart.redrawBrush(_chart.g());\n\n        if (_chart.brushIsEmpty(extent)) {\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.redrawGroup();\n            });\n\n        } else {\n            var ranged2DFilter = dc.filters.RangedTwoDimensionalFilter(extent);\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.filter(ranged2DFilter);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n\n        }\n    };\n\n    _chart.setBrushY = function (gBrush) {\n        gBrush.call(_chart.brush().y(_chart.y()));\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A display of a single numeric value.\n * Unlike other charts, you do not need to set a dimension. Instead a group object must be provided and\n * a valueAccessor that returns a single value.\n * @class numberDisplay\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * // create a number display under #chart-container1 element using the default global chart group\n * var display1 = dc.numberDisplay('#chart-container1');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.numberDisplay}\n */\ndc.numberDisplay = function (parent, chartGroup) {\n    var SPAN_CLASS = 'number-display';\n    var _formatNumber = d3.format('.2s');\n    var _chart = dc.baseMixin({});\n    var _html = {one: '', some: '', none: ''};\n    var _lastValue;\n\n    // dimension not required\n    _chart._mandatoryAttributes(['group']);\n\n    // default to ordering by value, to emulate old group.top(1) behavior when multiple groups\n    _chart.ordering(function (kv) { return kv.value; });\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending on the number\n     * displayed.  The text `%number` will be replaced with the current value.\n     * - one: HTML template to use if the number is 1\n     * - zero: HTML template to use if the number is 0\n     * - some: HTML template to use otherwise\n     * @method html\n     * @memberof dc.numberDisplay\n     * @instance\n     * @example\n     * numberWidget.html({\n     *      one:'%number record',\n     *      some:'%number records',\n     *      none:'no records'})\n     * @param {{one:String, some:String, none:String}} [html={one: '', some: '', none: ''}]\n     * @returns {{one:String, some:String, none:String}|dc.numberDisplay}\n     */\n    _chart.html = function (html) {\n        if (!arguments.length) {\n            return _html;\n        }\n        if (html.none) {\n            _html.none = html.none;//if none available\n        } else if (html.one) {\n            _html.none = html.one;//if none not available use one\n        } else if (html.some) {\n            _html.none = html.some;//if none and one not available use some\n        }\n        if (html.one) {\n            _html.one = html.one;//if one available\n        } else if (html.some) {\n            _html.one = html.some;//if one not available use some\n        }\n        if (html.some) {\n            _html.some = html.some;//if some available\n        } else if (html.one) {\n            _html.some = html.one;//if some not available use one\n        }\n        return _chart;\n    };\n\n    /**\n     * Calculate and return the underlying value of the display.\n     * @method value\n     * @memberof dc.numberDisplay\n     * @instance\n     * @returns {Number}\n     */\n    _chart.value = function () {\n        return _chart.data();\n    };\n\n    function maxBin (all) {\n        if (!all.length) {\n            return null;\n        }\n        var sorted = _chart._computeOrderedGroups(all);\n        return sorted[sorted.length - 1];\n    }\n    _chart.data(function (group) {\n        var valObj = group.value ? group.value() : maxBin(group.all());\n        return _chart.valueAccessor()(valObj);\n    });\n\n    _chart.transitionDuration(250); // good default\n    _chart.transitionDelay(0);\n\n    _chart._doRender = function () {\n        var newValue = _chart.value(),\n            span = _chart.selectAll('.' + SPAN_CLASS);\n\n        if (span.empty()) {\n            span = span.data([0])\n                .enter()\n                .append('span')\n                .attr('class', SPAN_CLASS);\n        }\n\n        span.transition()\n            .duration(_chart.transitionDuration())\n            .delay(_chart.transitionDelay())\n            .ease('quad-out-in')\n            .tween('text', function () {\n                // [XA] don't try and interpolate from Infinity, else this breaks.\n                var interpStart = isFinite(_lastValue) ? _lastValue : 0;\n                var interp = d3.interpolateNumber(interpStart || 0, newValue);\n                _lastValue = newValue;\n                return function (t) {\n                    var html = null, num = _chart.formatNumber()(interp(t));\n                    if (newValue === 0 && (_html.none !== '')) {\n                        html = _html.none;\n                    } else if (newValue === 1 && (_html.one !== '')) {\n                        html = _html.one;\n                    } else if (_html.some !== '') {\n                        html = _html.some;\n                    }\n                    this.innerHTML = html ? html.replace('%number', num) : num;\n                };\n            });\n    };\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set a function to format the value for the display.\n     * @method formatNumber\n     * @memberof dc.numberDisplay\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n     * @param {Function} [formatter=d3.format('.2s')]\n     * @returns {Function|dc.numberDisplay}\n     */\n    _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n            return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * A heat map is matrix that represents the values of two dimensions of data using colors.\n * @class heatMap\n * @memberof dc\n * @mixes dc.colorMixin\n * @mixes dc.marginMixin\n * @mixes dc.baseMixin\n * @example\n * // create a heat map under #chart-container1 element using the default global chart group\n * var heatMap1 = dc.heatMap('#chart-container1');\n * // create a heat map under #chart-container2 element using chart group A\n * var heatMap2 = dc.heatMap('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.heatMap}\n */\ndc.heatMap = function (parent, chartGroup) {\n\n    var DEFAULT_BORDER_RADIUS = 6.75;\n\n    var _chartBody;\n\n    var _cols;\n    var _rows;\n    var _colOrdering = d3.ascending;\n    var _rowOrdering = d3.ascending;\n    var _colScale = d3.scale.ordinal();\n    var _rowScale = d3.scale.ordinal();\n\n    var _xBorderRadius = DEFAULT_BORDER_RADIUS;\n    var _yBorderRadius = DEFAULT_BORDER_RADIUS;\n\n    var _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin({})));\n    _chart._mandatoryAttributes(['group']);\n    _chart.title(_chart.colorAccessor());\n\n    var _colsLabel = function (d) {\n        return d;\n    };\n    var _rowsLabel = function (d) {\n        return d;\n    };\n\n    /**\n     * Set or get the column label function. The chart class uses this function to render\n     * column labels on the X axis. It is passed the column name.\n     * @method colsLabel\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // the default label function just returns the name\n     * chart.colsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.colsLabel = function (labelFunction) {\n        if (!arguments.length) {\n            return _colsLabel;\n        }\n        _colsLabel = labelFunction;\n        return _chart;\n    };\n\n    /**\n     * Set or get the row label function. The chart class uses this function to render\n     * row labels on the Y axis. It is passed the row name.\n     * @method rowsLabel\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // the default label function just returns the name\n     * chart.rowsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.rowsLabel = function (labelFunction) {\n        if (!arguments.length) {\n            return _rowsLabel;\n        }\n        _rowsLabel = labelFunction;\n        return _chart;\n    };\n\n    var _xAxisOnClick = function (d) { filterAxis(0, d); };\n    var _yAxisOnClick = function (d) { filterAxis(1, d); };\n    var _boxOnClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    function filterAxis (axis, value) {\n        var cellsOnAxis = _chart.selectAll('.box-group').filter(function (d) {\n            return d.key[axis] === value;\n        });\n        var unfilteredCellsOnAxis = cellsOnAxis.filter(function (d) {\n            return !_chart.hasFilter(d.key);\n        });\n        dc.events.trigger(function () {\n            var selection = unfilteredCellsOnAxis.empty() ? cellsOnAxis : unfilteredCellsOnAxis;\n            var filters = selection.data().map(function (kv) {\n                return dc.filters.TwoDimensionalFilter(kv.key);\n            });\n            _chart._filter([filters]);\n            _chart.redrawGroup();\n        });\n    }\n\n    dc.override(_chart, 'filter', function (filter) {\n        if (!arguments.length) {\n            return _chart._filter();\n        }\n\n        return _chart._filter(dc.filters.TwoDimensionalFilter(filter));\n    });\n\n    /**\n     * Gets or sets the values used to create the rows of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the value accessor.\n     * @method rows\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Array<String|Number>} [rows]\n     * @returns {Array<String|Number>|dc.heatMap}\n     */\n\n    _chart.rows = function (rows) {\n        if (!arguments.length) {\n            return _rows;\n        }\n        _rows = rows;\n        return _chart;\n    };\n\n    /**\n     #### .rowOrdering([orderFunction])\n     Get or set an accessor to order the rows.  Default is d3.ascending.\n     */\n    _chart.rowOrdering = function (_) {\n        if (!arguments.length) {\n            return _rowOrdering;\n        }\n        _rowOrdering = _;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the keys used to create the columns of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the key accessor.\n     * @method cols\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Array<String|Number>} [cols]\n     * @returns {Array<String|Number>|dc.heatMap}\n     */\n    _chart.cols = function (cols) {\n        if (!arguments.length) {\n            return _cols;\n        }\n        _cols = cols;\n        return _chart;\n    };\n\n    /**\n     #### .colOrdering([orderFunction])\n     Get or set an accessor to order the cols.  Default is ascending.\n     */\n    _chart.colOrdering = function (_) {\n        if (!arguments.length) {\n            return _colOrdering;\n        }\n        _colOrdering = _;\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chartBody = _chart.svg()\n            .append('g')\n            .attr('class', 'heatmap')\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n\n        return _chart._doRedraw();\n    };\n\n    _chart._doRedraw = function () {\n        var data = _chart.data(),\n            rows = _chart.rows() || data.map(_chart.valueAccessor()),\n            cols = _chart.cols() || data.map(_chart.keyAccessor());\n        if (_rowOrdering) {\n            rows = rows.sort(_rowOrdering);\n        }\n        if (_colOrdering) {\n            cols = cols.sort(_colOrdering);\n        }\n        rows = _rowScale.domain(rows);\n        cols = _colScale.domain(cols);\n\n        var rowCount = rows.domain().length,\n            colCount = cols.domain().length,\n            boxWidth = Math.floor(_chart.effectiveWidth() / colCount),\n            boxHeight = Math.floor(_chart.effectiveHeight() / rowCount);\n\n        cols.rangeRoundBands([0, _chart.effectiveWidth()]);\n        rows.rangeRoundBands([_chart.effectiveHeight(), 0]);\n\n        var boxes = _chartBody.selectAll('g.box-group').data(_chart.data(), function (d, i) {\n            return _chart.keyAccessor()(d, i) + '\\0' + _chart.valueAccessor()(d, i);\n        });\n        var gEnter = boxes.enter().append('g')\n            .attr('class', 'box-group');\n\n        gEnter.append('rect')\n            .attr('class', 'heat-box')\n            .attr('fill', 'white')\n            .on('click', _chart.boxOnClick());\n\n        if (_chart.renderTitle()) {\n            gEnter.append('title');\n            boxes.select('title').text(_chart.title());\n        }\n\n        dc.transition(boxes.select('rect'), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d, i) { return cols(_chart.keyAccessor()(d, i)); })\n            .attr('y', function (d, i) { return rows(_chart.valueAccessor()(d, i)); })\n            .attr('rx', _xBorderRadius)\n            .attr('ry', _yBorderRadius)\n            .attr('fill', _chart.getColor)\n            .attr('width', boxWidth)\n            .attr('height', boxHeight);\n\n        boxes.exit().remove();\n\n        var gCols = _chartBody.select('g.cols');\n        if (gCols.empty()) {\n            gCols = _chartBody.append('g').attr('class', 'cols axis');\n        }\n        var gColsText = gCols.selectAll('text').data(cols.domain());\n        gColsText.enter().append('text')\n              .attr('x', function (d) { return cols(d) + boxWidth / 2; })\n              .style('text-anchor', 'middle')\n              .attr('y', _chart.effectiveHeight())\n              .attr('dy', 12)\n              .on('click', _chart.xAxisOnClick())\n              .text(_chart.colsLabel());\n        dc.transition(gColsText, _chart.transitionDuration(), _chart.transitionDelay())\n               .text(_chart.colsLabel())\n               .attr('x', function (d) { return cols(d) + boxWidth / 2; })\n               .attr('y', _chart.effectiveHeight());\n        gColsText.exit().remove();\n        var gRows = _chartBody.select('g.rows');\n        if (gRows.empty()) {\n            gRows = _chartBody.append('g').attr('class', 'rows axis');\n        }\n        var gRowsText = gRows.selectAll('text').data(rows.domain());\n        gRowsText.enter().append('text')\n              .attr('dy', 6)\n              .style('text-anchor', 'end')\n              .attr('x', 0)\n              .attr('dx', -2)\n              .on('click', _chart.yAxisOnClick())\n              .text(_chart.rowsLabel());\n        dc.transition(gRowsText, _chart.transitionDuration(), _chart.transitionDelay())\n              .text(_chart.rowsLabel())\n              .attr('y', function (d) { return rows(d) + boxHeight / 2; });\n        gRowsText.exit().remove();\n\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.box-group').each(function (d) {\n                if (_chart.isSelectedNode(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.box-group').each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when an individual cell is clicked in the heatmap.\n     * By default, filtering of the cell will be toggled.\n     * @method boxOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // default box on click handler\n     * chart.boxOnClick(function (d) {\n     *     var filter = d.key;\n     *     dc.events.trigger(function () {\n     *         _chart.filter(filter);\n     *         _chart.redrawGroup();\n     *     });\n     * });\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.boxOnClick = function (handler) {\n        if (!arguments.length) {\n            return _boxOnClick;\n        }\n        _boxOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when a column tick is clicked in the x axis.\n     * By default, if any cells in the column are unselected, the whole column will be selected,\n     * otherwise the whole column will be unselected.\n     * @method xAxisOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.xAxisOnClick = function (handler) {\n        if (!arguments.length) {\n            return _xAxisOnClick;\n        }\n        _xAxisOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when a row tick is clicked in the y axis.\n     * By default, if any cells in the row are unselected, the whole row will be selected,\n     * otherwise the whole row will be unselected.\n     * @method yAxisOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.yAxisOnClick = function (handler) {\n        if (!arguments.length) {\n            return _yAxisOnClick;\n        }\n        _yAxisOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the X border radius.  Set to 0 to get full rectangles.\n     * @method xBorderRadius\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Number} [xBorderRadius=6.75]\n     * @returns {Number|dc.heatMap}\n     */\n    _chart.xBorderRadius = function (xBorderRadius) {\n        if (!arguments.length) {\n            return _xBorderRadius;\n        }\n        _xBorderRadius = xBorderRadius;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the Y border radius.  Set to 0 to get full rectangles.\n     * @method yBorderRadius\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Number} [yBorderRadius=6.75]\n     * @returns {Number|dc.heatMap}\n     */\n    _chart.yBorderRadius = function (yBorderRadius) {\n        if (!arguments.length) {\n            return _yBorderRadius;\n        }\n        _yBorderRadius = yBorderRadius;\n        return _chart;\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n// https://github.com/d3/d3-plugins/blob/master/box/box.js\n(function () {\n\n    // Inspired by http://informationandvisualization.de/blog/box-plot\n    d3.box = function () {\n        var width = 1,\n            height = 1,\n            duration = 0,\n            delay = 0,\n            domain = null,\n            value = Number,\n            whiskers = boxWhiskers,\n            quartiles = boxQuartiles,\n            tickFormat = null;\n\n        // For each small multiple…\n        function box (g) {\n            g.each(function (d, i) {\n                d = d.map(value).sort(d3.ascending);\n                var g = d3.select(this),\n                    n = d.length,\n                    min = d[0],\n                    max = d[n - 1];\n\n                // Compute quartiles. Must return exactly 3 elements.\n                var quartileData = d.quartiles = quartiles(d);\n\n                // Compute whiskers. Must return exactly 2 elements, or null.\n                var whiskerIndices = whiskers && whiskers.call(this, d, i),\n                    whiskerData = whiskerIndices && whiskerIndices.map(function (i) { return d[i]; });\n\n                // Compute outliers. If no whiskers are specified, all data are 'outliers'.\n                // We compute the outliers as indices, so that we can join across transitions!\n                var outlierIndices = whiskerIndices ?\n                    d3.range(0, whiskerIndices[0]).concat(d3.range(whiskerIndices[1] + 1, n)) : d3.range(n);\n\n                // Compute the new x-scale.\n                var x1 = d3.scale.linear()\n                    .domain(domain && domain.call(this, d, i) || [min, max])\n                    .range([height, 0]);\n\n                // Retrieve the old x-scale, if this is an update.\n                var x0 = this.__chart__ || d3.scale.linear()\n                    .domain([0, Infinity])\n                    .range(x1.range());\n\n                // Stash the new scale.\n                this.__chart__ = x1;\n\n                // Note: the box, median, and box tick elements are fixed in number,\n                // so we only have to handle enter and update. In contrast, the outliers\n                // and other elements are variable, so we need to exit them! Variable\n                // elements also fade in and out.\n\n                // Update center line: the vertical line spanning the whiskers.\n                var center = g.selectAll('line.center')\n                    .data(whiskerData ? [whiskerData] : []);\n\n                center.enter().insert('line', 'rect')\n                    .attr('class', 'center')\n                    .attr('x1', width / 2)\n                    .attr('y1', function (d) { return x0(d[0]); })\n                    .attr('x2', width / 2)\n                    .attr('y2', function (d) { return x0(d[1]); })\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); });\n\n                center.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1)\n                    .attr('x1', width / 2)\n                    .attr('x2', width / 2)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); });\n\n                center.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1e-6)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); })\n                    .remove();\n\n                // Update innerquartile box.\n                var box = g.selectAll('rect.box')\n                    .data([quartileData]);\n\n                box.enter().append('rect')\n                    .attr('class', 'box')\n                    .attr('x', 0)\n                    .attr('y', function (d) { return x0(d[2]); })\n                    .attr('width', width)\n                    .attr('height', function (d) { return x0(d[0]) - x0(d[2]); })\n                  .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', function (d) { return x1(d[2]); })\n                    .attr('height', function (d) { return x1(d[0]) - x1(d[2]); });\n\n                box.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('width', width)\n                    .attr('y', function (d) { return x1(d[2]); })\n                    .attr('height', function (d) { return x1(d[0]) - x1(d[2]); });\n\n                // Update median line.\n                var medianLine = g.selectAll('line.median')\n                    .data([quartileData[1]]);\n\n                medianLine.enter().append('line')\n                    .attr('class', 'median')\n                    .attr('x1', 0)\n                    .attr('y1', x0)\n                    .attr('x2', width)\n                    .attr('y2', x0)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1);\n\n                medianLine.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('x1', 0)\n                    .attr('x2', width)\n                    .attr('y1', x1)\n                    .attr('y2', x1);\n\n                // Update whiskers.\n                var whisker = g.selectAll('line.whisker')\n                    .data(whiskerData || []);\n\n                whisker.enter().insert('line', 'circle, text')\n                    .attr('class', 'whisker')\n                    .attr('x1', 0)\n                    .attr('y1', x0)\n                    .attr('x2', width)\n                    .attr('y2', x0)\n                    .style('opacity', 1e-6)\n                  .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1);\n\n                whisker.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('x1', 0)\n                    .attr('x2', width)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1);\n\n                whisker.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1e-6)\n                    .remove();\n\n                // Update outliers.\n                var outlier = g.selectAll('circle.outlier')\n                    .data(outlierIndices, Number);\n\n                outlier.enter().insert('circle', 'text')\n                    .attr('class', 'outlier')\n                    .attr('r', 5)\n                    .attr('cx', width / 2)\n                    .attr('cy', function (i) { return x0(d[i]); })\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1);\n\n                outlier.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cx', width / 2)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1);\n\n                outlier.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cy', function (i) { return x1(d[i]); })\n                    .style('opacity', 1e-6)\n                    .remove();\n\n                // Compute the tick format.\n                var format = tickFormat || x1.tickFormat(8);\n\n                // Update box ticks.\n                var boxTick = g.selectAll('text.box')\n                    .data(quartileData);\n\n                boxTick.enter().append('text')\n                    .attr('class', 'box')\n                    .attr('dy', '.3em')\n                    .attr('dx', function (d, i) { return i & 1 ? 6 : -6; })\n                    .attr('x', function (d, i) { return i & 1 ? width : 0; })\n                    .attr('y', x0)\n                    .attr('text-anchor', function (d, i) { return i & 1 ? 'start' : 'end'; })\n                    .text(format)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1);\n\n                boxTick.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .text(format)\n                    .attr('x', function (d, i) { return i & 1 ? width : 0; })\n                    .attr('y', x1);\n\n                // Update whisker ticks. These are handled separately from the box\n                // ticks because they may or may not exist, and we want don't want\n                // to join box ticks pre-transition with whisker ticks post-.\n                var whiskerTick = g.selectAll('text.whisker')\n                    .data(whiskerData || []);\n\n                whiskerTick.enter().append('text')\n                    .attr('class', 'whisker')\n                    .attr('dy', '.3em')\n                    .attr('dx', 6)\n                    .attr('x', width)\n                    .attr('y', x0)\n                    .text(format)\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1)\n                    .style('opacity', 1);\n\n                whiskerTick.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .text(format)\n                    .attr('x', width)\n                    .attr('y', x1)\n                    .style('opacity', 1);\n\n                whiskerTick.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1)\n                    .style('opacity', 1e-6)\n                    .remove();\n            });\n            d3.timer.flush();\n        }\n\n        box.width = function (x) {\n            if (!arguments.length) {\n                return width;\n            }\n            width = x;\n            return box;\n        };\n\n        box.height = function (x) {\n            if (!arguments.length) {\n                return height;\n            }\n            height = x;\n            return box;\n        };\n\n        box.tickFormat = function (x) {\n            if (!arguments.length) {\n                return tickFormat;\n            }\n            tickFormat = x;\n            return box;\n        };\n\n        box.duration = function (x) {\n            if (!arguments.length) {\n                return duration;\n            }\n            duration = x;\n            return box;\n        };\n\n        box.domain = function (x) {\n            if (!arguments.length) {\n                return domain;\n            }\n            domain = x === null ? x : d3.functor(x);\n            return box;\n        };\n\n        box.value = function (x) {\n            if (!arguments.length) {\n                return value;\n            }\n            value = x;\n            return box;\n        };\n\n        box.whiskers = function (x) {\n            if (!arguments.length) {\n                return whiskers;\n            }\n            whiskers = x;\n            return box;\n        };\n\n        box.quartiles = function (x) {\n            if (!arguments.length) {\n                return quartiles;\n            }\n            quartiles = x;\n            return box;\n        };\n\n        return box;\n    };\n\n    function boxWhiskers (d) {\n        return [0, d.length - 1];\n    }\n\n    function boxQuartiles (d) {\n        return [\n            d3.quantile(d, 0.25),\n            d3.quantile(d, 0.5),\n            d3.quantile(d, 0.75)\n        ];\n    }\n\n})();\n\n\n/**\n * A box plot is a chart that depicts numerical data via their quartile ranges.\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/box-plot-time.html Box plot time example}\n * - {@link http://dc-js.github.io/dc.js/examples/box-plot.html Box plot example}\n * @class boxPlot\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a box plot under #chart-container1 element using the default global chart group\n * var boxPlot1 = dc.boxPlot('#chart-container1');\n * // create a box plot under #chart-container2 element using chart group A\n * var boxPlot2 = dc.boxPlot('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.boxPlot}\n */\ndc.boxPlot = function (parent, chartGroup) {\n    var _chart = dc.coordinateGridMixin({});\n\n    // Returns a function to compute the interquartile range.\n    function DEFAULT_WHISKERS_IQR (k) {\n        return function (d) {\n            var q1 = d.quartiles[0],\n                q3 = d.quartiles[2],\n                iqr = (q3 - q1) * k,\n                i = -1,\n                j = d.length;\n            do { ++i; } while (d[i] < q1 - iqr);\n            do { --j; } while (d[j] > q3 + iqr);\n            return [i, j];\n        };\n    }\n\n    var _whiskerIqrFactor = 1.5;\n    var _whiskersIqr = DEFAULT_WHISKERS_IQR;\n    var _whiskers = _whiskersIqr(_whiskerIqrFactor);\n\n    var _box = d3.box();\n    var _tickFormat = null;\n\n    var _boxWidth = function (innerChartWidth, xUnits) {\n        if (_chart.isOrdinal()) {\n            return _chart.x().rangeBand();\n        } else {\n            return innerChartWidth / (1 + _chart.boxPadding()) / xUnits;\n        }\n    };\n\n    // default padding to handle min/max whisker text\n    _chart.yAxisPadding(12);\n\n    // default to ordinal\n    _chart.x(d3.scale.ordinal());\n    _chart.xUnits(dc.units.ordinal);\n\n    // valueAccessor should return an array of values that can be coerced into numbers\n    // or if data is overloaded for a static array of arrays, it should be `Number`.\n    // Empty arrays are not included.\n    _chart.data(function (group) {\n        return group.all().map(function (d) {\n            d.map = function (accessor) { return accessor.call(d, d); };\n            return d;\n        }).filter(function (d) {\n            var values = _chart.valueAccessor()(d);\n            return values.length !== 0;\n        });\n    });\n\n    /**\n     * Get or set the spacing between boxes as a fraction of box size. Valid values are within 0-1.\n     * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n     * for a visual description of how the padding is applied.\n     * @method boxPadding\n     * @memberof dc.boxPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3.scale.ordinal.rangeBands}\n     * @param {Number} [padding=0.8]\n     * @returns {Number|dc.boxPlot}\n     */\n    _chart.boxPadding = _chart._rangeBandPadding;\n    _chart.boxPadding(0.8);\n\n    /**\n     * Get or set the outer padding on an ordinal box chart. This setting has no effect on non-ordinal charts\n     * or on charts with a custom {@link dc.boxPlot#boxWidth .boxWidth}. Will pad the width by\n     * `padding * barWidth` on each side of the chart.\n     * @method outerPadding\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Number} [padding=0.5]\n     * @returns {Number|dc.boxPlot}\n     */\n    _chart.outerPadding = _chart._outerRangeBandPadding;\n    _chart.outerPadding(0.5);\n\n    /**\n     * Get or set the numerical width of the boxplot box. The width may also be a function taking as\n     * parameters the chart width excluding the right and left margins, as well as the number of x\n     * units.\n     * @example\n     * // Using numerical parameter\n     * chart.boxWidth(10);\n     * // Using function\n     * chart.boxWidth((innerChartWidth, xUnits) { ... });\n     * @method boxWidth\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Number|Function} [boxWidth=0.5]\n     * @returns {Number|Function|dc.boxPlot}\n     */\n    _chart.boxWidth = function (boxWidth) {\n        if (!arguments.length) {\n            return _boxWidth;\n        }\n        _boxWidth = d3.functor(boxWidth);\n        return _chart;\n    };\n\n    var boxTransform = function (d, i) {\n        var xOffset = _chart.x()(_chart.keyAccessor()(d, i));\n        return 'translate(' + xOffset + ', 0)';\n    };\n\n    _chart._preprocessData = function () {\n        if (_chart.elasticX()) {\n            _chart.x().domain([]);\n        }\n    };\n\n    _chart.plotData = function () {\n        var _calculatedBoxWidth = _boxWidth(_chart.effectiveWidth(), _chart.xUnitCount());\n\n        _box.whiskers(_whiskers)\n            .width(_calculatedBoxWidth)\n            .height(_chart.effectiveHeight())\n            .value(_chart.valueAccessor())\n            .domain(_chart.y().domain())\n            .duration(_chart.transitionDuration())\n            .tickFormat(_tickFormat);\n\n        var boxesG = _chart.chartBodyG().selectAll('g.box').data(_chart.data(), _chart.keyAccessor());\n\n        renderBoxes(boxesG);\n        updateBoxes(boxesG);\n        removeBoxes(boxesG);\n\n        _chart.fadeDeselectedArea();\n    };\n\n    function renderBoxes (boxesG) {\n        var boxesGEnter = boxesG.enter().append('g');\n\n        boxesGEnter\n            .attr('class', 'box')\n            .attr('transform', boxTransform)\n            .call(_box)\n            .on('click', function (d) {\n                _chart.filter(_chart.keyAccessor()(d));\n                _chart.redrawGroup();\n            });\n    }\n\n    function updateBoxes (boxesG) {\n        dc.transition(boxesG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', boxTransform)\n            .call(_box)\n            .each(function () {\n                d3.select(this).select('rect.box').attr('fill', _chart.getColor);\n            });\n    }\n\n    function removeBoxes (boxesG) {\n        boxesG.exit().remove().call(_box);\n    }\n\n    _chart.fadeDeselectedArea = function () {\n        if (_chart.hasFilter()) {\n            if (_chart.isOrdinal()) {\n                _chart.g().selectAll('g.box').each(function (d) {\n                    if (_chart.isSelectedNode(d)) {\n                        _chart.highlightSelected(this);\n                    } else {\n                        _chart.fadeDeselected(this);\n                    }\n                });\n            } else {\n                var extent = _chart.brush().extent();\n                var start = extent[0];\n                var end = extent[1];\n                var keyAccessor = _chart.keyAccessor();\n                _chart.g().selectAll('g.box').each(function (d) {\n                    var key = keyAccessor(d);\n                    if (key < start || key >= end) {\n                        _chart.fadeDeselected(this);\n                    } else {\n                        _chart.highlightSelected(this);\n                    }\n                });\n            }\n        } else {\n            _chart.g().selectAll('g.box').each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(_chart.keyAccessor()(d));\n    };\n\n    _chart.yAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return d3.min(_chart.valueAccessor()(e));\n        });\n        return dc.utils.subtract(min, _chart.yAxisPadding());\n    };\n\n    _chart.yAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return d3.max(_chart.valueAccessor()(e));\n        });\n        return dc.utils.add(max, _chart.yAxisPadding());\n    };\n\n    /**\n     * Set the numerical format of the boxplot median, whiskers and quartile labels. Defaults to\n     * integer formatting.\n     * @example\n     * // format ticks to 2 decimal places\n     * chart.tickFormat(d3.format('.2f'));\n     * @method tickFormat\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Function} [tickFormat]\n     * @returns {Number|Function|dc.boxPlot}\n     */\n    _chart.tickFormat = function (tickFormat) {\n        if (!arguments.length) {\n            return _tickFormat;\n        }\n        _tickFormat = tickFormat;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\n * The select menu is a simple widget designed to filter a dimension by selecting an option from\n * an HTML `<select/>` menu. The menu can be optionally turned into a multiselect.\n * @class selectMenu\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * // create a select menu under #select-container using the default global chart group\n * var select = dc.selectMenu('#select-container')\n *                .dimension(states)\n *                .group(stateGroup);\n * // the option text can be set via the title() function\n * // by default the option text is '`key`: `value`'\n * select.title(function (d){\n *     return 'STATE: ' + d.key;\n * })\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this widget should be placed in.\n * Interaction with the widget will only trigger events and redraws within its group.\n * @returns {selectMenu}\n **/\ndc.selectMenu = function (parent, chartGroup) {\n    var SELECT_CSS_CLASS = 'dc-select-menu';\n    var OPTION_CSS_CLASS = 'dc-select-option';\n\n    var _chart = dc.baseMixin({});\n\n    var _select;\n    var _promptText = 'Select all';\n    var _multiple = false;\n    var _promptValue = null;\n    var _numberVisible = null;\n    var _order = function (a, b) {\n        return _chart.keyAccessor()(a) > _chart.keyAccessor()(b) ?\n             1 : _chart.keyAccessor()(b) > _chart.keyAccessor()(a) ?\n            -1 : 0;\n    };\n\n    var _filterDisplayed = function (d) {\n        return _chart.valueAccessor()(d) > 0;\n    };\n\n    _chart.data(function (group) {\n        return group.all().filter(_filterDisplayed);\n    });\n\n    _chart._doRender = function () {\n        _chart.select('select').remove();\n        _select = _chart.root().append('select')\n                        .classed(SELECT_CSS_CLASS, true);\n        _select.append('option').text(_promptText).attr('value', '');\n\n        _chart._doRedraw();\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        setAttributes();\n        renderOptions();\n        // select the option(s) corresponding to current filter(s)\n        if (_chart.hasFilter() && _multiple) {\n            _select.selectAll('option')\n                .property('selected', function (d) {\n                    return d && _chart.filters().indexOf(String(_chart.keyAccessor()(d))) >= 0;\n                });\n        } else if (_chart.hasFilter()) {\n            _select.property('value', _chart.filter());\n        } else {\n            _select.property('value', '');\n        }\n        return _chart;\n    };\n\n    function renderOptions () {\n        var options = _select.selectAll('option.' + OPTION_CSS_CLASS)\n          .data(_chart.data(), function (d) { return _chart.keyAccessor()(d); });\n\n        options.enter()\n              .append('option')\n              .classed(OPTION_CSS_CLASS, true)\n              .attr('value', function (d) { return _chart.keyAccessor()(d); });\n\n        options.text(_chart.title());\n        options.exit().remove();\n        _select.selectAll('option.' + OPTION_CSS_CLASS).sort(_order);\n\n        _select.on('change', onChange);\n        return options;\n    }\n\n    function onChange (d, i) {\n        var values;\n        var target = d3.event.target;\n        if (target.selectedOptions) {\n            var selectedOptions = Array.prototype.slice.call(target.selectedOptions);\n            values = selectedOptions.map(function (d) {\n                return d.value;\n            });\n        } else { // IE and other browsers do not support selectedOptions\n            // adapted from this polyfill: https://gist.github.com/brettz9/4212217\n            var options = [].slice.call(d3.event.target.options);\n            values = options.filter(function (option) {\n                return option.selected;\n            }).map(function (option) {\n                return option.value;\n            });\n        }\n        // console.log(values);\n        // check if only prompt option is selected\n        if (values.length === 1 && values[0] === '') {\n            values = _promptValue || null;\n        } else if (!_multiple && values.length === 1) {\n            values = values[0];\n        }\n        _chart.onChange(values);\n    }\n\n    _chart.onChange = function (val) {\n        if (val && _multiple) {\n            _chart.replaceFilter([val]);\n        } else if (val) {\n            _chart.replaceFilter(val);\n        } else {\n            _chart.filterAll();\n        }\n        dc.events.trigger(function () {\n            _chart.redrawGroup();\n        });\n    };\n\n    function setAttributes () {\n        if (_multiple) {\n            _select.attr('multiple', true);\n        } else {\n            _select.attr('multiple', null);\n        }\n        if (_numberVisible !== null) {\n            _select.attr('size', _numberVisible);\n        } else {\n            _select.attr('size', null);\n        }\n    }\n\n    /**\n     * Get or set the function that controls the ordering of option tags in the\n     * select menu. By default options are ordered by the group key in ascending\n     * order.\n     * @name order\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {Function} [order]\n     * @example\n     * // order by the group's value\n     * chart.order(function (a,b) {\n     *     return a.value > b.value ? 1 : b.value > a.value ? -1 : 0;\n     * });\n     **/\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    /**\n     * Get or set the text displayed in the options used to prompt selection.\n     * @name promptText\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {String} [promptText='Select all']\n     * @example\n     * chart.promptText('All states');\n     **/\n    _chart.promptText = function (_) {\n        if (!arguments.length) {\n            return _promptText;\n        }\n        _promptText = _;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that filters option tags prior to display. By default options\n     * with a value of < 1 are not displayed.\n     * @name filterDisplayed\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {function} [filterDisplayed]\n     * @example\n     * // display all options override the `filterDisplayed` function:\n     * chart.filterDisplayed(function () {\n     *     return true;\n     * });\n     **/\n    _chart.filterDisplayed = function (filterDisplayed) {\n        if (!arguments.length) {\n            return _filterDisplayed;\n        }\n        _filterDisplayed = filterDisplayed;\n        return _chart;\n    };\n\n    /**\n     * Controls the type of select menu. Setting it to true converts the underlying\n     * HTML tag into a multiple select.\n     * @name multiple\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {boolean} [multiple=false]\n     * @example\n     * chart.multiple(true);\n     **/\n    _chart.multiple = function (multiple) {\n        if (!arguments.length) {\n            return _multiple;\n        }\n        _multiple = multiple;\n\n        return _chart;\n    };\n\n    /**\n     * Controls the default value to be used for\n     * [dimension.filter](https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter)\n     * when only the prompt value is selected. If `null` (the default), no filtering will occur when\n     * just the prompt is selected.\n     * @name promptValue\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {?*} [promptValue=null]\n     **/\n    _chart.promptValue = function (promptValue) {\n        if (!arguments.length) {\n            return _promptValue;\n        }\n        _promptValue = promptValue;\n\n        return _chart;\n    };\n\n    /**\n     * Controls the number of items to show in the select menu, when `.multiple()` is true. This\n     * controls the [`size` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#Attributes) of\n     * the `select` element. If `null` (the default), uses the browser's default height.\n     * @name numberItems\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {?number} [numberVisible=null]\n     * @example\n     * chart.numberVisible(10);\n     **/\n    _chart.numberVisible = function (numberVisible) {\n        if (!arguments.length) {\n            return _numberVisible;\n        }\n        _numberVisible = numberVisible;\n\n        return _chart;\n    };\n\n    _chart.size = dc.logger.deprecate(_chart.numberVisible, 'selectMenu.size is ambiguous - use numberVisible instead');\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n// Renamed functions\n\ndc.abstractBubbleChart = dc.bubbleMixin;\ndc.baseChart = dc.baseMixin;\ndc.capped = dc.capMixin;\ndc.colorChart = dc.colorMixin;\ndc.coordinateGridChart = dc.coordinateGridMixin;\ndc.marginable = dc.marginMixin;\ndc.stackableChart = dc.stackMixin;\n\n// Expose d3 and crossfilter, so that clients in browserify\n// case can obtain them if they need them.\ndc.d3 = d3;\ndc.crossfilter = crossfilter;\n\nreturn dc;}\n    if(typeof define === \"function\" && define.amd) {\n        define([\"d3\", \"crossfilter2\"], _dc);\n    } else if(typeof module === \"object\" && module.exports) {\n        var _d3 = require('d3');\n        var _crossfilter = require('crossfilter2');\n        // When using npm + browserify, 'crossfilter' is a function,\n        // since package.json specifies index.js as main function, and it\n        // does special handling. When using bower + browserify,\n        // there's no main in bower.json (in fact, there's no bower.json),\n        // so we need to fix it.\n        if (typeof _crossfilter !== \"function\") {\n            _crossfilter = _crossfilter.crossfilter;\n        }\n        module.exports = _dc(_d3, _crossfilter);\n    } else {\n        this.dc = _dc(d3, crossfilter);\n    }\n}\n)();\n\n//# sourceMappingURL=dc.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dc/dc.js\n// module id = 286\n// module chunks = 0","!function() {\n  var d3 = {\n    version: \"3.5.17\"\n  };\n  var d3_arraySlice = [].slice, d3_array = function(list) {\n    return d3_arraySlice.call(list);\n  };\n  var d3_document = this.document;\n  function d3_documentElement(node) {\n    return node && (node.ownerDocument || node.document || node).documentElement;\n  }\n  function d3_window(node) {\n    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n  }\n  if (d3_document) {\n    try {\n      d3_array(d3_document.documentElement.childNodes)[0].nodeType;\n    } catch (e) {\n      d3_array = function(list) {\n        var i = list.length, array = new Array(i);\n        while (i--) array[i] = list[i];\n        return array;\n      };\n    }\n  }\n  if (!Date.now) Date.now = function() {\n    return +new Date();\n  };\n  if (d3_document) {\n    try {\n      d3_document.createElement(\"DIV\").style.setProperty(\"opacity\", 0, \"\");\n    } catch (error) {\n      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n      d3_element_prototype.setAttribute = function(name, value) {\n        d3_element_setAttribute.call(this, name, value + \"\");\n      };\n      d3_element_prototype.setAttributeNS = function(space, local, value) {\n        d3_element_setAttributeNS.call(this, space, local, value + \"\");\n      };\n      d3_style_prototype.setProperty = function(name, value, priority) {\n        d3_style_setProperty.call(this, name, value + \"\", priority);\n      };\n    }\n  }\n  d3.ascending = d3_ascending;\n  function d3_ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n  d3.descending = function(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  };\n  d3.min = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;\n    }\n    return a;\n  };\n  d3.max = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;\n    }\n    return a;\n  };\n  d3.extent = function(array, f) {\n    var i = -1, n = array.length, a, b, c;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n    return [ a, c ];\n  };\n  function d3_number(x) {\n    return x === null ? NaN : +x;\n  }\n  function d3_numeric(x) {\n    return !isNaN(x);\n  }\n  d3.sum = function(array, f) {\n    var s = 0, n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = +array[i])) s += a;\n    } else {\n      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n    }\n    return s;\n  };\n  d3.mean = function(array, f) {\n    var s = 0, n = array.length, a, i = -1, j = n;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;\n    }\n    if (j) return s / j;\n  };\n  d3.quantile = function(values, p) {\n    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;\n    return e ? v + e * (values[h] - v) : v;\n  };\n  d3.median = function(array, f) {\n    var numbers = [], n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n    }\n    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n  };\n  d3.variance = function(array, f) {\n    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    } else {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n    if (j > 1) return s / (j - 1);\n  };\n  d3.deviation = function() {\n    var v = d3.variance.apply(this, arguments);\n    return v ? Math.sqrt(v) : v;\n  };\n  function d3_bisector(compare) {\n    return {\n      left: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n  var d3_bisect = d3_bisector(d3_ascending);\n  d3.bisectLeft = d3_bisect.left;\n  d3.bisect = d3.bisectRight = d3_bisect.right;\n  d3.bisector = function(f) {\n    return d3_bisector(f.length === 1 ? function(d, x) {\n      return d3_ascending(f(d), x);\n    } : f);\n  };\n  d3.shuffle = function(array, i0, i1) {\n    if ((m = arguments.length) < 3) {\n      i1 = array.length;\n      if (m < 2) i0 = 0;\n    }\n    var m = i1 - i0, t, i;\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n    }\n    return array;\n  };\n  d3.permute = function(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  };\n  d3.pairs = function(array) {\n    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];\n    return pairs;\n  };\n  d3.transpose = function(matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  };\n  function d3_transposeLength(d) {\n    return d.length;\n  }\n  d3.zip = function() {\n    return d3.transpose(arguments);\n  };\n  d3.keys = function(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  };\n  d3.values = function(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  };\n  d3.entries = function(map) {\n    var entries = [];\n    for (var key in map) entries.push({\n      key: key,\n      value: map[key]\n    });\n    return entries;\n  };\n  d3.merge = function(arrays) {\n    var n = arrays.length, m, i = -1, j = 0, merged, array;\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n    return merged;\n  };\n  var abs = Math.abs;\n  d3.range = function(start, stop, step) {\n    if (arguments.length < 3) {\n      step = 1;\n      if (arguments.length < 2) {\n        stop = start;\n        start = 0;\n      }\n    }\n    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n    start *= k, stop *= k, step *= k;\n    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n    return range;\n  };\n  function d3_range_integerScale(x) {\n    var k = 1;\n    while (x * k % 1) k *= 10;\n    return k;\n  }\n  function d3_class(ctor, properties) {\n    for (var key in properties) {\n      Object.defineProperty(ctor.prototype, key, {\n        value: properties[key],\n        enumerable: false\n      });\n    }\n  }\n  d3.map = function(object, f) {\n    var map = new d3_Map();\n    if (object instanceof d3_Map) {\n      object.forEach(function(key, value) {\n        map.set(key, value);\n      });\n    } else if (Array.isArray(object)) {\n      var i = -1, n = object.length, o;\n      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);\n    } else {\n      for (var key in object) map.set(key, object[key]);\n    }\n    return map;\n  };\n  function d3_Map() {\n    this._ = Object.create(null);\n  }\n  var d3_map_proto = \"__proto__\", d3_map_zero = \"\\x00\";\n  d3_class(d3_Map, {\n    has: d3_map_has,\n    get: function(key) {\n      return this._[d3_map_escape(key)];\n    },\n    set: function(key, value) {\n      return this._[d3_map_escape(key)] = value;\n    },\n    remove: d3_map_remove,\n    keys: d3_map_keys,\n    values: function() {\n      var values = [];\n      for (var key in this._) values.push(this._[key]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var key in this._) entries.push({\n        key: d3_map_unescape(key),\n        value: this._[key]\n      });\n      return entries;\n    },\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);\n    }\n  });\n  function d3_map_escape(key) {\n    return (key += \"\") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n  }\n  function d3_map_unescape(key) {\n    return (key += \"\")[0] === d3_map_zero ? key.slice(1) : key;\n  }\n  function d3_map_has(key) {\n    return d3_map_escape(key) in this._;\n  }\n  function d3_map_remove(key) {\n    return (key = d3_map_escape(key)) in this._ && delete this._[key];\n  }\n  function d3_map_keys() {\n    var keys = [];\n    for (var key in this._) keys.push(d3_map_unescape(key));\n    return keys;\n  }\n  function d3_map_size() {\n    var size = 0;\n    for (var key in this._) ++size;\n    return size;\n  }\n  function d3_map_empty() {\n    for (var key in this._) return false;\n    return true;\n  }\n  d3.nest = function() {\n    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;\n    function map(mapType, array, depth) {\n      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n          values.push(object);\n        } else {\n          valuesByKey.set(keyValue, [ object ]);\n        }\n      }\n      if (mapType) {\n        object = mapType();\n        setter = function(keyValue, values) {\n          object.set(keyValue, map(mapType, values, depth));\n        };\n      } else {\n        object = {};\n        setter = function(keyValue, values) {\n          object[keyValue] = map(mapType, values, depth);\n        };\n      }\n      valuesByKey.forEach(setter);\n      return object;\n    }\n    function entries(map, depth) {\n      if (depth >= keys.length) return map;\n      var array = [], sortKey = sortKeys[depth++];\n      map.forEach(function(key, keyMap) {\n        array.push({\n          key: key,\n          values: entries(keyMap, depth)\n        });\n      });\n      return sortKey ? array.sort(function(a, b) {\n        return sortKey(a.key, b.key);\n      }) : array;\n    }\n    nest.map = function(array, mapType) {\n      return map(mapType, array, 0);\n    };\n    nest.entries = function(array) {\n      return entries(map(d3.map, array, 0), 0);\n    };\n    nest.key = function(d) {\n      keys.push(d);\n      return nest;\n    };\n    nest.sortKeys = function(order) {\n      sortKeys[keys.length - 1] = order;\n      return nest;\n    };\n    nest.sortValues = function(order) {\n      sortValues = order;\n      return nest;\n    };\n    nest.rollup = function(f) {\n      rollup = f;\n      return nest;\n    };\n    return nest;\n  };\n  d3.set = function(array) {\n    var set = new d3_Set();\n    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);\n    return set;\n  };\n  function d3_Set() {\n    this._ = Object.create(null);\n  }\n  d3_class(d3_Set, {\n    has: d3_map_has,\n    add: function(key) {\n      this._[d3_map_escape(key += \"\")] = true;\n      return key;\n    },\n    remove: d3_map_remove,\n    values: d3_map_keys,\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key));\n    }\n  });\n  d3.behavior = {};\n  function d3_identity(d) {\n    return d;\n  }\n  d3.rebind = function(target, source) {\n    var i = 1, n = arguments.length, method;\n    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n    return target;\n  };\n  function d3_rebind(target, source, method) {\n    return function() {\n      var value = method.apply(source, arguments);\n      return value === source ? target : value;\n    };\n  }\n  function d3_vendorSymbol(object, name) {\n    if (name in object) return name;\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {\n      var prefixName = d3_vendorPrefixes[i] + name;\n      if (prefixName in object) return prefixName;\n    }\n  }\n  var d3_vendorPrefixes = [ \"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\" ];\n  function d3_noop() {}\n  d3.dispatch = function() {\n    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    return dispatch;\n  };\n  function d3_dispatch() {}\n  d3_dispatch.prototype.on = function(type, listener) {\n    var i = type.indexOf(\".\"), name = \"\";\n    if (i >= 0) {\n      name = type.slice(i + 1);\n      type = type.slice(0, i);\n    }\n    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);\n    if (arguments.length === 2) {\n      if (listener == null) for (type in this) {\n        if (this.hasOwnProperty(type)) this[type].on(name, null);\n      }\n      return this;\n    }\n  };\n  function d3_dispatch_event(dispatch) {\n    var listeners = [], listenerByName = new d3_Map();\n    function event() {\n      var z = listeners, i = -1, n = z.length, l;\n      while (++i < n) if (l = z[i].on) l.apply(this, arguments);\n      return dispatch;\n    }\n    event.on = function(name, listener) {\n      var l = listenerByName.get(name), i;\n      if (arguments.length < 2) return l && l.on;\n      if (l) {\n        l.on = null;\n        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n        listenerByName.remove(name);\n      }\n      if (listener) listeners.push(listenerByName.set(name, {\n        on: listener\n      }));\n      return dispatch;\n    };\n    return event;\n  }\n  d3.event = null;\n  function d3_eventPreventDefault() {\n    d3.event.preventDefault();\n  }\n  function d3_eventSource() {\n    var e = d3.event, s;\n    while (s = e.sourceEvent) e = s;\n    return e;\n  }\n  function d3_eventDispatch(target) {\n    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    dispatch.of = function(thiz, argumentz) {\n      return function(e1) {\n        try {\n          var e0 = e1.sourceEvent = d3.event;\n          e1.target = target;\n          d3.event = e1;\n          dispatch[e1.type].apply(thiz, argumentz);\n        } finally {\n          d3.event = e0;\n        }\n      };\n    };\n    return dispatch;\n  }\n  d3.requote = function(s) {\n    return s.replace(d3_requote_re, \"\\\\$&\");\n  };\n  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  var d3_subclass = {}.__proto__ ? function(object, prototype) {\n    object.__proto__ = prototype;\n  } : function(object, prototype) {\n    for (var property in prototype) object[property] = prototype[property];\n  };\n  function d3_selection(groups) {\n    d3_subclass(groups, d3_selectionPrototype);\n    return groups;\n  }\n  var d3_select = function(s, n) {\n    return n.querySelector(s);\n  }, d3_selectAll = function(s, n) {\n    return n.querySelectorAll(s);\n  }, d3_selectMatches = function(n, s) {\n    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, \"matchesSelector\")];\n    d3_selectMatches = function(n, s) {\n      return d3_selectMatcher.call(n, s);\n    };\n    return d3_selectMatches(n, s);\n  };\n  if (typeof Sizzle === \"function\") {\n    d3_select = function(s, n) {\n      return Sizzle(s, n)[0] || null;\n    };\n    d3_selectAll = Sizzle;\n    d3_selectMatches = Sizzle.matchesSelector;\n  }\n  d3.selection = function() {\n    return d3.select(d3_document.documentElement);\n  };\n  var d3_selectionPrototype = d3.selection.prototype = [];\n  d3_selectionPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, group, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selector(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_select(selector, this);\n    };\n  }\n  d3_selectionPrototype.selectAll = function(selector) {\n    var subgroups = [], subgroup, node;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n          subgroup.parentNode = node;\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selectorAll(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_selectAll(selector, this);\n    };\n  }\n  var d3_nsXhtml = \"http://www.w3.org/1999/xhtml\";\n  var d3_nsPrefix = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: d3_nsXhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n  d3.ns = {\n    prefix: d3_nsPrefix,\n    qualify: function(name) {\n      var i = name.indexOf(\":\"), prefix = name;\n      if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n        space: d3_nsPrefix[prefix],\n        local: name\n      } : name;\n    }\n  };\n  d3_selectionPrototype.attr = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node();\n        name = d3.ns.qualify(name);\n        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n      }\n      for (value in name) this.each(d3_selection_attr(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_attr(name, value));\n  };\n  function d3_selection_attr(name, value) {\n    name = d3.ns.qualify(name);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrConstant() {\n      this.setAttribute(name, value);\n    }\n    function attrConstantNS() {\n      this.setAttributeNS(name.space, name.local, value);\n    }\n    function attrFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);\n    }\n    function attrFunctionNS() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n    }\n    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n  }\n  function d3_collapse(s) {\n    return s.trim().replace(/\\s+/g, \" \");\n  }\n  d3_selectionPrototype.classed = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;\n        if (value = node.classList) {\n          while (++i < n) if (!value.contains(name[i])) return false;\n        } else {\n          value = node.getAttribute(\"class\");\n          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;\n        }\n        return true;\n      }\n      for (value in name) this.each(d3_selection_classed(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_classed(name, value));\n  };\n  function d3_selection_classedRe(name) {\n    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");\n  }\n  function d3_selection_classes(name) {\n    return (name + \"\").trim().split(/^|\\s+/);\n  }\n  function d3_selection_classed(name, value) {\n    name = d3_selection_classes(name).map(d3_selection_classedName);\n    var n = name.length;\n    function classedConstant() {\n      var i = -1;\n      while (++i < n) name[i](this, value);\n    }\n    function classedFunction() {\n      var i = -1, x = value.apply(this, arguments);\n      while (++i < n) name[i](this, x);\n    }\n    return typeof value === \"function\" ? classedFunction : classedConstant;\n  }\n  function d3_selection_classedName(name) {\n    var re = d3_selection_classedRe(name);\n    return function(node, value) {\n      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n      var c = node.getAttribute(\"class\") || \"\";\n      if (value) {\n        re.lastIndex = 0;\n        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));\n      } else {\n        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));\n      }\n    };\n  }\n  d3_selectionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));\n        return this;\n      }\n      if (n < 2) {\n        var node = this.node();\n        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);\n      }\n      priority = \"\";\n    }\n    return this.each(d3_selection_style(name, value, priority));\n  };\n  function d3_selection_style(name, value, priority) {\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleConstant() {\n      this.style.setProperty(name, value, priority);\n    }\n    function styleFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);\n    }\n    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;\n  }\n  d3_selectionPrototype.property = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") return this.node()[name];\n      for (value in name) this.each(d3_selection_property(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_property(name, value));\n  };\n  function d3_selection_property(name, value) {\n    function propertyNull() {\n      delete this[name];\n    }\n    function propertyConstant() {\n      this[name] = value;\n    }\n    function propertyFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) delete this[name]; else this[name] = x;\n    }\n    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;\n  }\n  d3_selectionPrototype.text = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.textContent = \"\";\n    } : function() {\n      this.textContent = value;\n    }) : this.node().textContent;\n  };\n  d3_selectionPrototype.html = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.innerHTML = \"\";\n    } : function() {\n      this.innerHTML = value;\n    }) : this.node().innerHTML;\n  };\n  d3_selectionPrototype.append = function(name) {\n    name = d3_selection_creator(name);\n    return this.select(function() {\n      return this.appendChild(name.apply(this, arguments));\n    });\n  };\n  function d3_selection_creator(name) {\n    function create() {\n      var document = this.ownerDocument, namespace = this.namespaceURI;\n      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);\n    }\n    function createNS() {\n      return this.ownerDocument.createElementNS(name.space, name.local);\n    }\n    return typeof name === \"function\" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;\n  }\n  d3_selectionPrototype.insert = function(name, before) {\n    name = d3_selection_creator(name);\n    before = d3_selection_selector(before);\n    return this.select(function() {\n      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n    });\n  };\n  d3_selectionPrototype.remove = function() {\n    return this.each(d3_selectionRemove);\n  };\n  function d3_selectionRemove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n  d3_selectionPrototype.data = function(value, key) {\n    var i = -1, n = this.length, group, node;\n    if (!arguments.length) {\n      value = new Array(n = (group = this[0]).length);\n      while (++i < n) {\n        if (node = group[i]) {\n          value[i] = node.__data__;\n        }\n      }\n      return value;\n    }\n    function bind(group, groupData) {\n      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n      if (key) {\n        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;\n        for (i = -1; ++i < n; ) {\n          if (node = group[i]) {\n            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {\n              exitNodes[i] = node;\n            } else {\n              nodeByKeyValue.set(keyValue, node);\n            }\n            keyValues[i] = keyValue;\n          }\n        }\n        for (i = -1; ++i < m; ) {\n          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          } else if (node !== true) {\n            updateNodes[i] = node;\n            node.__data__ = nodeData;\n          }\n          nodeByKeyValue.set(keyValue, true);\n        }\n        for (i = -1; ++i < n; ) {\n          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {\n            exitNodes[i] = group[i];\n          }\n        }\n      } else {\n        for (i = -1; ++i < n0; ) {\n          node = group[i];\n          nodeData = groupData[i];\n          if (node) {\n            node.__data__ = nodeData;\n            updateNodes[i] = node;\n          } else {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          }\n        }\n        for (;i < m; ++i) {\n          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n        }\n        for (;i < n; ++i) {\n          exitNodes[i] = group[i];\n        }\n      }\n      enterNodes.update = updateNodes;\n      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n      enter.push(enterNodes);\n      update.push(updateNodes);\n      exit.push(exitNodes);\n    }\n    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);\n    if (typeof value === \"function\") {\n      while (++i < n) {\n        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n      }\n    } else {\n      while (++i < n) {\n        bind(group = this[i], value);\n      }\n    }\n    update.enter = function() {\n      return enter;\n    };\n    update.exit = function() {\n      return exit;\n    };\n    return update;\n  };\n  function d3_selection_dataNode(data) {\n    return {\n      __data__: data\n    };\n  }\n  d3_selectionPrototype.datum = function(value) {\n    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");\n  };\n  d3_selectionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_filter(selector) {\n    return function() {\n      return d3_selectMatches(this, selector);\n    };\n  }\n  d3_selectionPrototype.order = function() {\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n    return this;\n  };\n  d3_selectionPrototype.sort = function(comparator) {\n    comparator = d3_selection_sortComparator.apply(this, arguments);\n    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);\n    return this.order();\n  };\n  function d3_selection_sortComparator(comparator) {\n    if (!arguments.length) comparator = d3_ascending;\n    return function(a, b) {\n      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;\n    };\n  }\n  d3_selectionPrototype.each = function(callback) {\n    return d3_selection_each(this, function(node, i, j) {\n      callback.call(node, node.__data__, i, j);\n    });\n  };\n  function d3_selection_each(groups, callback) {\n    for (var j = 0, m = groups.length; j < m; j++) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {\n        if (node = group[i]) callback(node, i, j);\n      }\n    }\n    return groups;\n  }\n  d3_selectionPrototype.call = function(callback) {\n    var args = d3_array(arguments);\n    callback.apply(args[0] = this, args);\n    return this;\n  };\n  d3_selectionPrototype.empty = function() {\n    return !this.node();\n  };\n  d3_selectionPrototype.node = function() {\n    for (var j = 0, m = this.length; j < m; j++) {\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n    return null;\n  };\n  d3_selectionPrototype.size = function() {\n    var n = 0;\n    d3_selection_each(this, function() {\n      ++n;\n    });\n    return n;\n  };\n  function d3_selection_enter(selection) {\n    d3_subclass(selection, d3_selection_enterPrototype);\n    return selection;\n  }\n  var d3_selection_enterPrototype = [];\n  d3.selection.enter = d3_selection_enter;\n  d3.selection.enter.prototype = d3_selection_enterPrototype;\n  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n  d3_selection_enterPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, upgroup, group, node;\n    for (var j = -1, m = this.length; ++j < m; ) {\n      upgroup = (group = this[j]).update;\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = group.parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n          subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  d3_selection_enterPrototype.insert = function(name, before) {\n    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);\n    return d3_selectionPrototype.insert.call(this, name, before);\n  };\n  function d3_selection_enterInsertBefore(enter) {\n    var i0, j0;\n    return function(d, i, j) {\n      var group = enter[j].update, n = group.length, node;\n      if (j != j0) j0 = j, i0 = 0;\n      if (i >= i0) i0 = i + 1;\n      while (!(node = group[i0]) && ++i0 < n) ;\n      return node;\n    };\n  }\n  d3.select = function(node) {\n    var group;\n    if (typeof node === \"string\") {\n      group = [ d3_select(node, d3_document) ];\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = [ node ];\n      group.parentNode = d3_documentElement(node);\n    }\n    return d3_selection([ group ]);\n  };\n  d3.selectAll = function(nodes) {\n    var group;\n    if (typeof nodes === \"string\") {\n      group = d3_array(d3_selectAll(nodes, d3_document));\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = d3_array(nodes);\n      group.parentNode = null;\n    }\n    return d3_selection([ group ]);\n  };\n  d3_selectionPrototype.on = function(type, listener, capture) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof type !== \"string\") {\n        if (n < 2) listener = false;\n        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));\n        return this;\n      }\n      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;\n      capture = false;\n    }\n    return this.each(d3_selection_on(type, listener, capture));\n  };\n  function d3_selection_on(type, listener, capture) {\n    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;\n    if (i > 0) type = type.slice(0, i);\n    var filter = d3_selection_onFilters.get(type);\n    if (filter) type = filter, wrap = d3_selection_onFilter;\n    function onRemove() {\n      var l = this[name];\n      if (l) {\n        this.removeEventListener(type, l, l.$);\n        delete this[name];\n      }\n    }\n    function onAdd() {\n      var l = wrap(listener, d3_array(arguments));\n      onRemove.call(this);\n      this.addEventListener(type, this[name] = l, l.$ = capture);\n      l._ = listener;\n    }\n    function removeAll() {\n      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;\n      for (var name in this) {\n        if (match = name.match(re)) {\n          var l = this[name];\n          this.removeEventListener(match[1], l, l.$);\n          delete this[name];\n        }\n      }\n    }\n    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n  }\n  var d3_selection_onFilters = d3.map({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n  });\n  if (d3_document) {\n    d3_selection_onFilters.forEach(function(k) {\n      if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);\n    });\n  }\n  function d3_selection_onListener(listener, argumentz) {\n    return function(e) {\n      var o = d3.event;\n      d3.event = e;\n      argumentz[0] = this.__data__;\n      try {\n        listener.apply(this, argumentz);\n      } finally {\n        d3.event = o;\n      }\n    };\n  }\n  function d3_selection_onFilter(listener, argumentz) {\n    var l = d3_selection_onListener(listener, argumentz);\n    return function(e) {\n      var target = this, related = e.relatedTarget;\n      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {\n        l.call(target, e);\n      }\n    };\n  }\n  var d3_event_dragSelect, d3_event_dragId = 0;\n  function d3_event_dragSuppress(node) {\n    var name = \".dragsuppress-\" + ++d3_event_dragId, click = \"click\" + name, w = d3.select(d3_window(node)).on(\"touchmove\" + name, d3_eventPreventDefault).on(\"dragstart\" + name, d3_eventPreventDefault).on(\"selectstart\" + name, d3_eventPreventDefault);\n    if (d3_event_dragSelect == null) {\n      d3_event_dragSelect = \"onselectstart\" in node ? false : d3_vendorSymbol(node.style, \"userSelect\");\n    }\n    if (d3_event_dragSelect) {\n      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];\n      style[d3_event_dragSelect] = \"none\";\n    }\n    return function(suppressClick) {\n      w.on(name, null);\n      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n      if (suppressClick) {\n        var off = function() {\n          w.on(click, null);\n        };\n        w.on(click, function() {\n          d3_eventPreventDefault();\n          off();\n        }, true);\n        setTimeout(off, 0);\n      }\n    };\n  }\n  d3.mouse = function(container) {\n    return d3_mousePoint(container, d3_eventSource());\n  };\n  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;\n  function d3_mousePoint(container, e) {\n    if (e.changedTouches) e = e.changedTouches[0];\n    var svg = container.ownerSVGElement || container;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      if (d3_mouse_bug44083 < 0) {\n        var window = d3_window(container);\n        if (window.scrollX || window.scrollY) {\n          svg = d3.select(\"body\").append(\"svg\").style({\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            margin: 0,\n            padding: 0,\n            border: \"none\"\n          }, \"important\");\n          var ctm = svg[0][0].getScreenCTM();\n          d3_mouse_bug44083 = !(ctm.f || ctm.e);\n          svg.remove();\n        }\n      }\n      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, \n      point.y = e.clientY;\n      point = point.matrixTransform(container.getScreenCTM().inverse());\n      return [ point.x, point.y ];\n    }\n    var rect = container.getBoundingClientRect();\n    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];\n  }\n  d3.touch = function(container, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;\n    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return d3_mousePoint(container, touch);\n      }\n    }\n  };\n  d3.behavior.drag = function() {\n    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, \"mousemove\", \"mouseup\"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, \"touchmove\", \"touchend\");\n    function drag() {\n      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", touchstart);\n    }\n    function dragstart(id, position, subject, move, end) {\n      return function() {\n        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \".drag\" + (dragId == null ? \"\" : \"-\" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);\n        if (origin) {\n          dragOffset = origin.apply(that, arguments);\n          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];\n        } else {\n          dragOffset = [ 0, 0 ];\n        }\n        dispatch({\n          type: \"dragstart\"\n        });\n        function moved() {\n          var position1 = position(parent, dragId), dx, dy;\n          if (!position1) return;\n          dx = position1[0] - position0[0];\n          dy = position1[1] - position0[1];\n          dragged |= dx | dy;\n          position0 = position1;\n          dispatch({\n            type: \"drag\",\n            x: position1[0] + dragOffset[0],\n            y: position1[1] + dragOffset[1],\n            dx: dx,\n            dy: dy\n          });\n        }\n        function ended() {\n          if (!position(parent, dragId)) return;\n          dragSubject.on(move + dragName, null).on(end + dragName, null);\n          dragRestore(dragged);\n          dispatch({\n            type: \"dragend\"\n          });\n        }\n      };\n    }\n    drag.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return drag;\n    };\n    return d3.rebind(drag, event, \"on\");\n  };\n  function d3_behavior_dragTouchId() {\n    return d3.event.changedTouches[0].identifier;\n  }\n  d3.touches = function(container, touches) {\n    if (arguments.length < 2) touches = d3_eventSource().touches;\n    return touches ? d3_array(touches).map(function(touch) {\n      var point = d3_mousePoint(container, touch);\n      point.identifier = touch.identifier;\n      return point;\n    }) : [];\n  };\n  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n  function d3_sgn(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  }\n  function d3_cross2d(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n  function d3_acos(x) {\n    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);\n  }\n  function d3_asin(x) {\n    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);\n  }\n  function d3_sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n  function d3_cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n  function d3_tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n  function d3_haversin(x) {\n    return (x = Math.sin(x / 2)) * x;\n  }\n  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;\n  d3.interpolateZoom = function(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;\n    if (d2 < ε2) {\n      S = Math.log(w1 / w0) / ρ;\n      i = function(t) {\n        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];\n      };\n    } else {\n      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / ρ;\n      i = function(t) {\n        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];\n      };\n    }\n    i.duration = S * 1e3;\n    return i;\n  };\n  d3.behavior.zoom = function() {\n    var view = {\n      x: 0,\n      y: 0,\n      k: 1\n    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \"mousedown.zoom\", mousemove = \"mousemove.zoom\", mouseup = \"mouseup.zoom\", mousewheelTimer, touchstart = \"touchstart.zoom\", touchtime, event = d3_eventDispatch(zoom, \"zoomstart\", \"zoom\", \"zoomend\"), x0, x1, y0, y1;\n    if (!d3_behavior_zoomWheel) {\n      d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n      }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return d3.event.wheelDelta;\n      }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {\n        return -d3.event.detail;\n      }, \"MozMousePixelScroll\");\n    }\n    function zoom(g) {\n      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \".zoom\", mousewheeled).on(\"dblclick.zoom\", dblclicked).on(touchstart, touchstarted);\n    }\n    zoom.event = function(g) {\n      g.each(function() {\n        var dispatch = event.of(this, arguments), view1 = view;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.zoom\", function() {\n            view = this.__chart__ || {\n              x: 0,\n              y: 0,\n              k: 1\n            };\n            zoomstarted(dispatch);\n          }).tween(\"zoom:zoom\", function() {\n            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n            return function(t) {\n              var l = i(t), k = dx / l[2];\n              this.__chart__ = view = {\n                x: cx - l[0] * k,\n                y: cy - l[1] * k,\n                k: k\n              };\n              zoomed(dispatch);\n            };\n          }).each(\"interrupt.zoom\", function() {\n            zoomended(dispatch);\n          }).each(\"end.zoom\", function() {\n            zoomended(dispatch);\n          });\n        } else {\n          this.__chart__ = view;\n          zoomstarted(dispatch);\n          zoomed(dispatch);\n          zoomended(dispatch);\n        }\n      });\n    };\n    zoom.translate = function(_) {\n      if (!arguments.length) return [ view.x, view.y ];\n      view = {\n        x: +_[0],\n        y: +_[1],\n        k: view.k\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scale = function(_) {\n      if (!arguments.length) return view.k;\n      view = {\n        x: view.x,\n        y: view.y,\n        k: null\n      };\n      scaleTo(+_);\n      rescale();\n      return zoom;\n    };\n    zoom.scaleExtent = function(_) {\n      if (!arguments.length) return scaleExtent;\n      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.center = function(_) {\n      if (!arguments.length) return center;\n      center = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.size = function(_) {\n      if (!arguments.length) return size;\n      size = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.duration = function(_) {\n      if (!arguments.length) return duration;\n      duration = +_;\n      return zoom;\n    };\n    zoom.x = function(z) {\n      if (!arguments.length) return x1;\n      x1 = z;\n      x0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    zoom.y = function(z) {\n      if (!arguments.length) return y1;\n      y1 = z;\n      y0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    function location(p) {\n      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];\n    }\n    function point(l) {\n      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];\n    }\n    function scaleTo(s) {\n      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n    }\n    function translateTo(p, l) {\n      l = point(l);\n      view.x += p[0] - l[0];\n      view.y += p[1] - l[1];\n    }\n    function zoomTo(that, p, l, k) {\n      that.__chart__ = {\n        x: view.x,\n        y: view.y,\n        k: view.k\n      };\n      scaleTo(Math.pow(2, k));\n      translateTo(center0 = p, l);\n      that = d3.select(that);\n      if (duration > 0) that = that.transition().duration(duration);\n      that.call(zoom.event);\n    }\n    function rescale() {\n      if (x1) x1.domain(x0.range().map(function(x) {\n        return (x - view.x) / view.k;\n      }).map(x0.invert));\n      if (y1) y1.domain(y0.range().map(function(y) {\n        return (y - view.y) / view.k;\n      }).map(y0.invert));\n    }\n    function zoomstarted(dispatch) {\n      if (!zooming++) dispatch({\n        type: \"zoomstart\"\n      });\n    }\n    function zoomed(dispatch) {\n      rescale();\n      dispatch({\n        type: \"zoom\",\n        scale: view.k,\n        translate: [ view.x, view.y ]\n      });\n    }\n    function zoomended(dispatch) {\n      if (!--zooming) dispatch({\n        type: \"zoomend\"\n      }), center0 = null;\n    }\n    function mousedowned() {\n      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);\n      d3_selection_interrupt.call(that);\n      zoomstarted(dispatch);\n      function moved() {\n        dragged = 1;\n        translateTo(d3.mouse(that), location0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        subject.on(mousemove, null).on(mouseup, null);\n        dragRestore(dragged);\n        zoomended(dispatch);\n      }\n    }\n    function touchstarted() {\n      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \".zoom-\" + d3.event.changedTouches[0].identifier, touchmove = \"touchmove\" + zoomName, touchend = \"touchend\" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);\n      started();\n      zoomstarted(dispatch);\n      subject.on(mousedown, null).on(touchstart, started);\n      function relocate() {\n        var touches = d3.touches(that);\n        scale0 = view.k;\n        touches.forEach(function(t) {\n          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n        });\n        return touches;\n      }\n      function started() {\n        var target = d3.event.target;\n        d3.select(target).on(touchmove, moved).on(touchend, ended);\n        targets.push(target);\n        var changed = d3.event.changedTouches;\n        for (var i = 0, n = changed.length; i < n; ++i) {\n          locations0[changed[i].identifier] = null;\n        }\n        var touches = relocate(), now = Date.now();\n        if (touches.length === 1) {\n          if (now - touchtime < 500) {\n            var p = touches[0];\n            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n            d3_eventPreventDefault();\n          }\n          touchtime = now;\n        } else if (touches.length > 1) {\n          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];\n          distance0 = dx * dx + dy * dy;\n        }\n      }\n      function moved() {\n        var touches = d3.touches(that), p0, l0, p1, l1;\n        d3_selection_interrupt.call(that);\n        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {\n          p1 = touches[i];\n          if (l1 = locations0[p1.identifier]) {\n            if (l0) break;\n            p0 = p1, l0 = l1;\n          }\n        }\n        if (l1) {\n          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);\n          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];\n          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];\n          scaleTo(scale1 * scale0);\n        }\n        touchtime = null;\n        translateTo(p0, l0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        if (d3.event.touches.length) {\n          var changed = d3.event.changedTouches;\n          for (var i = 0, n = changed.length; i < n; ++i) {\n            delete locations0[changed[i].identifier];\n          }\n          for (var identifier in locations0) {\n            return void relocate();\n          }\n        }\n        d3.selectAll(targets).on(zoomName, null);\n        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n        dragRestore();\n        zoomended(dispatch);\n      }\n    }\n    function mousewheeled() {\n      var dispatch = event.of(this, arguments);\n      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), \n      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);\n      mousewheelTimer = setTimeout(function() {\n        mousewheelTimer = null;\n        zoomended(dispatch);\n      }, 50);\n      d3_eventPreventDefault();\n      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n      translateTo(center0, translate0);\n      zoomed(dispatch);\n    }\n    function dblclicked() {\n      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;\n      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n    }\n    return d3.rebind(zoom, event, \"on\");\n  };\n  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;\n  d3.color = d3_color;\n  function d3_color() {}\n  d3_color.prototype.toString = function() {\n    return this.rgb() + \"\";\n  };\n  d3.hsl = d3_hsl;\n  function d3_hsl(h, s, l) {\n    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n  }\n  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n  d3_hslPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, this.l / k);\n  };\n  d3_hslPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, k * this.l);\n  };\n  d3_hslPrototype.rgb = function() {\n    return d3_hsl_rgb(this.h, this.s, this.l);\n  };\n  function d3_hsl_rgb(h, s, l) {\n    var m1, m2;\n    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;\n    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;\n    l = l < 0 ? 0 : l > 1 ? 1 : l;\n    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;\n    m1 = 2 * l - m2;\n    function v(h) {\n      if (h > 360) h -= 360; else if (h < 0) h += 360;\n      if (h < 60) return m1 + (m2 - m1) * h / 60;\n      if (h < 180) return m2;\n      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;\n      return m1;\n    }\n    function vv(h) {\n      return Math.round(v(h) * 255);\n    }\n    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n  }\n  d3.hcl = d3_hcl;\n  function d3_hcl(h, c, l) {\n    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n  }\n  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n  d3_hclPrototype.brighter = function(k) {\n    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.darker = function(k) {\n    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.rgb = function() {\n    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n  };\n  function d3_hcl_lab(h, c, l) {\n    if (isNaN(h)) h = 0;\n    if (isNaN(c)) c = 0;\n    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n  }\n  d3.lab = d3_lab;\n  function d3_lab(l, a, b) {\n    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n  }\n  var d3_lab_K = 18;\n  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;\n  var d3_labPrototype = d3_lab.prototype = new d3_color();\n  d3_labPrototype.brighter = function(k) {\n    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.darker = function(k) {\n    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.rgb = function() {\n    return d3_lab_rgb(this.l, this.a, this.b);\n  };\n  function d3_lab_rgb(l, a, b) {\n    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;\n    x = d3_lab_xyz(x) * d3_lab_X;\n    y = d3_lab_xyz(y) * d3_lab_Y;\n    z = d3_lab_xyz(z) * d3_lab_Z;\n    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n  }\n  function d3_lab_hcl(l, a, b) {\n    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n  }\n  function d3_lab_xyz(x) {\n    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n  }\n  function d3_xyz_lab(x) {\n    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n  }\n  function d3_xyz_rgb(r) {\n    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n  }\n  d3.rgb = d3_rgb;\n  function d3_rgb(r, g, b) {\n    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n  }\n  function d3_rgbNumber(value) {\n    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);\n  }\n  function d3_rgbString(value) {\n    return d3_rgbNumber(value) + \"\";\n  }\n  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n  d3_rgbPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    var r = this.r, g = this.g, b = this.b, i = 30;\n    if (!r && !g && !b) return new d3_rgb(i, i, i);\n    if (r && r < i) r = i;\n    if (g && g < i) g = i;\n    if (b && b < i) b = i;\n    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n  };\n  d3_rgbPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n  };\n  d3_rgbPrototype.hsl = function() {\n    return d3_rgb_hsl(this.r, this.g, this.b);\n  };\n  d3_rgbPrototype.toString = function() {\n    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n  };\n  function d3_rgb_hex(v) {\n    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n  }\n  function d3_rgb_parse(format, rgb, hsl) {\n    var r = 0, g = 0, b = 0, m1, m2, color;\n    m1 = /([a-z]+)\\((.*)\\)/.exec(format = format.toLowerCase());\n    if (m1) {\n      m2 = m1[2].split(\",\");\n      switch (m1[1]) {\n       case \"hsl\":\n        {\n          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n        }\n\n       case \"rgb\":\n        {\n          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n        }\n      }\n    }\n    if (color = d3_rgb_names.get(format)) {\n      return rgb(color.r, color.g, color.b);\n    }\n    if (format != null && format.charAt(0) === \"#\" && !isNaN(color = parseInt(format.slice(1), 16))) {\n      if (format.length === 4) {\n        r = (color & 3840) >> 4;\n        r = r >> 4 | r;\n        g = color & 240;\n        g = g >> 4 | g;\n        b = color & 15;\n        b = b << 4 | b;\n      } else if (format.length === 7) {\n        r = (color & 16711680) >> 16;\n        g = (color & 65280) >> 8;\n        b = color & 255;\n      }\n    }\n    return rgb(r, g, b);\n  }\n  function d3_rgb_hsl(r, g, b) {\n    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n    if (d) {\n      s = l < .5 ? d / (max + min) : d / (2 - max - min);\n      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n      h *= 60;\n    } else {\n      h = NaN;\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new d3_hsl(h, s, l);\n  }\n  function d3_rgb_lab(r, g, b) {\n    r = d3_rgb_xyz(r);\n    g = d3_rgb_xyz(g);\n    b = d3_rgb_xyz(b);\n    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n  }\n  function d3_rgb_xyz(r) {\n    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n  }\n  function d3_rgb_parseNumber(c) {\n    var f = parseFloat(c);\n    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;\n  }\n  var d3_rgb_names = d3.map({\n    aliceblue: 15792383,\n    antiquewhite: 16444375,\n    aqua: 65535,\n    aquamarine: 8388564,\n    azure: 15794175,\n    beige: 16119260,\n    bisque: 16770244,\n    black: 0,\n    blanchedalmond: 16772045,\n    blue: 255,\n    blueviolet: 9055202,\n    brown: 10824234,\n    burlywood: 14596231,\n    cadetblue: 6266528,\n    chartreuse: 8388352,\n    chocolate: 13789470,\n    coral: 16744272,\n    cornflowerblue: 6591981,\n    cornsilk: 16775388,\n    crimson: 14423100,\n    cyan: 65535,\n    darkblue: 139,\n    darkcyan: 35723,\n    darkgoldenrod: 12092939,\n    darkgray: 11119017,\n    darkgreen: 25600,\n    darkgrey: 11119017,\n    darkkhaki: 12433259,\n    darkmagenta: 9109643,\n    darkolivegreen: 5597999,\n    darkorange: 16747520,\n    darkorchid: 10040012,\n    darkred: 9109504,\n    darksalmon: 15308410,\n    darkseagreen: 9419919,\n    darkslateblue: 4734347,\n    darkslategray: 3100495,\n    darkslategrey: 3100495,\n    darkturquoise: 52945,\n    darkviolet: 9699539,\n    deeppink: 16716947,\n    deepskyblue: 49151,\n    dimgray: 6908265,\n    dimgrey: 6908265,\n    dodgerblue: 2003199,\n    firebrick: 11674146,\n    floralwhite: 16775920,\n    forestgreen: 2263842,\n    fuchsia: 16711935,\n    gainsboro: 14474460,\n    ghostwhite: 16316671,\n    gold: 16766720,\n    goldenrod: 14329120,\n    gray: 8421504,\n    green: 32768,\n    greenyellow: 11403055,\n    grey: 8421504,\n    honeydew: 15794160,\n    hotpink: 16738740,\n    indianred: 13458524,\n    indigo: 4915330,\n    ivory: 16777200,\n    khaki: 15787660,\n    lavender: 15132410,\n    lavenderblush: 16773365,\n    lawngreen: 8190976,\n    lemonchiffon: 16775885,\n    lightblue: 11393254,\n    lightcoral: 15761536,\n    lightcyan: 14745599,\n    lightgoldenrodyellow: 16448210,\n    lightgray: 13882323,\n    lightgreen: 9498256,\n    lightgrey: 13882323,\n    lightpink: 16758465,\n    lightsalmon: 16752762,\n    lightseagreen: 2142890,\n    lightskyblue: 8900346,\n    lightslategray: 7833753,\n    lightslategrey: 7833753,\n    lightsteelblue: 11584734,\n    lightyellow: 16777184,\n    lime: 65280,\n    limegreen: 3329330,\n    linen: 16445670,\n    magenta: 16711935,\n    maroon: 8388608,\n    mediumaquamarine: 6737322,\n    mediumblue: 205,\n    mediumorchid: 12211667,\n    mediumpurple: 9662683,\n    mediumseagreen: 3978097,\n    mediumslateblue: 8087790,\n    mediumspringgreen: 64154,\n    mediumturquoise: 4772300,\n    mediumvioletred: 13047173,\n    midnightblue: 1644912,\n    mintcream: 16121850,\n    mistyrose: 16770273,\n    moccasin: 16770229,\n    navajowhite: 16768685,\n    navy: 128,\n    oldlace: 16643558,\n    olive: 8421376,\n    olivedrab: 7048739,\n    orange: 16753920,\n    orangered: 16729344,\n    orchid: 14315734,\n    palegoldenrod: 15657130,\n    palegreen: 10025880,\n    paleturquoise: 11529966,\n    palevioletred: 14381203,\n    papayawhip: 16773077,\n    peachpuff: 16767673,\n    peru: 13468991,\n    pink: 16761035,\n    plum: 14524637,\n    powderblue: 11591910,\n    purple: 8388736,\n    rebeccapurple: 6697881,\n    red: 16711680,\n    rosybrown: 12357519,\n    royalblue: 4286945,\n    saddlebrown: 9127187,\n    salmon: 16416882,\n    sandybrown: 16032864,\n    seagreen: 3050327,\n    seashell: 16774638,\n    sienna: 10506797,\n    silver: 12632256,\n    skyblue: 8900331,\n    slateblue: 6970061,\n    slategray: 7372944,\n    slategrey: 7372944,\n    snow: 16775930,\n    springgreen: 65407,\n    steelblue: 4620980,\n    tan: 13808780,\n    teal: 32896,\n    thistle: 14204888,\n    tomato: 16737095,\n    turquoise: 4251856,\n    violet: 15631086,\n    wheat: 16113331,\n    white: 16777215,\n    whitesmoke: 16119285,\n    yellow: 16776960,\n    yellowgreen: 10145074\n  });\n  d3_rgb_names.forEach(function(key, value) {\n    d3_rgb_names.set(key, d3_rgbNumber(value));\n  });\n  function d3_functor(v) {\n    return typeof v === \"function\" ? v : function() {\n      return v;\n    };\n  }\n  d3.functor = d3_functor;\n  d3.xhr = d3_xhrType(d3_identity);\n  function d3_xhrType(response) {\n    return function(url, mimeType, callback) {\n      if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType, \n      mimeType = null;\n      return d3_xhr(url, mimeType, response, callback);\n    };\n  }\n  function d3_xhr(url, mimeType, response, callback) {\n    var xhr = {}, dispatch = d3.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"), headers = {}, request = new XMLHttpRequest(), responseType = null;\n    if (this.XDomainRequest && !(\"withCredentials\" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {\n      request.readyState > 3 && respond();\n    };\n    function respond() {\n      var status = request.status, result;\n      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {\n        try {\n          result = response.call(xhr, request);\n        } catch (e) {\n          dispatch.error.call(xhr, e);\n          return;\n        }\n        dispatch.load.call(xhr, result);\n      } else {\n        dispatch.error.call(xhr, request);\n      }\n    }\n    request.onprogress = function(event) {\n      var o = d3.event;\n      d3.event = event;\n      try {\n        dispatch.progress.call(xhr, request);\n      } finally {\n        d3.event = o;\n      }\n    };\n    xhr.header = function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers[name];\n      if (value == null) delete headers[name]; else headers[name] = value + \"\";\n      return xhr;\n    };\n    xhr.mimeType = function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return xhr;\n    };\n    xhr.responseType = function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return xhr;\n    };\n    xhr.response = function(value) {\n      response = value;\n      return xhr;\n    };\n    [ \"get\", \"post\" ].forEach(function(method) {\n      xhr[method] = function() {\n        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));\n      };\n    });\n    xhr.send = function(method, data, callback) {\n      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;\n      request.open(method, url, true);\n      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";\n      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);\n      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);\n      if (responseType != null) request.responseType = responseType;\n      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {\n        callback(null, request);\n      });\n      dispatch.beforesend.call(xhr, request);\n      request.send(data == null ? null : data);\n      return xhr;\n    };\n    xhr.abort = function() {\n      request.abort();\n      return xhr;\n    };\n    d3.rebind(xhr, dispatch, \"on\");\n    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n  }\n  function d3_xhr_fixCallback(callback) {\n    return callback.length === 1 ? function(error, request) {\n      callback(error == null ? request : null);\n    } : callback;\n  }\n  function d3_xhrHasResponse(request) {\n    var type = request.responseType;\n    return type && type !== \"text\" ? request.response : request.responseText;\n  }\n  d3.dsv = function(delimiter, mimeType) {\n    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);\n    function dsv(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n      xhr.row = function(_) {\n        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n      };\n      return xhr;\n    }\n    function response(request) {\n      return dsv.parse(request.responseText);\n    }\n    function typedResponse(f) {\n      return function(request) {\n        return dsv.parse(request.responseText, f);\n      };\n    }\n    dsv.parse = function(text, f) {\n      var o;\n      return dsv.parseRows(text, function(row, i) {\n        if (o) return o(row, i - 1);\n        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {\n          return JSON.stringify(name) + \": d[\" + i + \"]\";\n        }).join(\",\") + \"}\");\n        o = f ? function(row, i) {\n          return f(a(row), i);\n        } : a;\n      });\n    };\n    dsv.parseRows = function(text, f) {\n      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n      function token() {\n        if (I >= N) return EOF;\n        if (eol) return eol = false, EOL;\n        var j = I;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          var c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, '\"');\n        }\n        while (I < N) {\n          var c = text.charCodeAt(I++), k = 1;\n          if (c === 10) eol = true; else if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(I) === 10) ++I, ++k;\n          } else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n        return text.slice(j);\n      }\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n      return rows;\n    };\n    dsv.format = function(rows) {\n      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n      var fieldSet = new d3_Set(), fields = [];\n      rows.forEach(function(row) {\n        for (var field in row) {\n          if (!fieldSet.has(field)) {\n            fields.push(fieldSet.add(field));\n          }\n        }\n      });\n      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {\n        return fields.map(function(field) {\n          return formatValue(row[field]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    };\n    dsv.formatRows = function(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    };\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n    function formatValue(text) {\n      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;\n    }\n    return dsv;\n  };\n  d3.csv = d3.dsv(\",\", \"text/csv\");\n  d3.tsv = d3.dsv(\"\t\", \"text/tab-separated-values\");\n  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, \"requestAnimationFrame\")] || function(callback) {\n    setTimeout(callback, 17);\n  };\n  d3.timer = function() {\n    d3_timer.apply(this, arguments);\n  };\n  function d3_timer(callback, delay, then) {\n    var n = arguments.length;\n    if (n < 2) delay = 0;\n    if (n < 3) then = Date.now();\n    var time = then + delay, timer = {\n      c: callback,\n      t: time,\n      n: null\n    };\n    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;\n    d3_timer_queueTail = timer;\n    if (!d3_timer_interval) {\n      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n    return timer;\n  }\n  function d3_timer_step() {\n    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;\n    if (delay > 24) {\n      if (isFinite(delay)) {\n        clearTimeout(d3_timer_timeout);\n        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n      }\n      d3_timer_interval = 0;\n    } else {\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  }\n  d3.timer.flush = function() {\n    d3_timer_mark();\n    d3_timer_sweep();\n  };\n  function d3_timer_mark() {\n    var now = Date.now(), timer = d3_timer_queueHead;\n    while (timer) {\n      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;\n      timer = timer.n;\n    }\n    return now;\n  }\n  function d3_timer_sweep() {\n    var t0, t1 = d3_timer_queueHead, time = Infinity;\n    while (t1) {\n      if (t1.c) {\n        if (t1.t < time) time = t1.t;\n        t1 = (t0 = t1).n;\n      } else {\n        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n      }\n    }\n    d3_timer_queueTail = t0;\n    return time;\n  }\n  function d3_format_precision(x, p) {\n    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n  }\n  d3.round = function(x, n) {\n    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n  };\n  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n  d3.formatPrefix = function(value, precision) {\n    var i = 0;\n    if (value = +value) {\n      if (value < 0) value *= -1;\n      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n    }\n    return d3_formatPrefixes[8 + i / 3];\n  };\n  function d3_formatPrefix(d, i) {\n    var k = Math.pow(10, abs(8 - i) * 3);\n    return {\n      scale: i > 8 ? function(d) {\n        return d / k;\n      } : function(d) {\n        return d * k;\n      },\n      symbol: d\n    };\n  }\n  function d3_locale_numberFormat(locale) {\n    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {\n      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n      }\n      return t.reverse().join(locale_thousands);\n    } : d3_identity;\n    return function(specifier) {\n      var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"-\", symbol = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \"\", suffix = \"\", integer = false, exponent = true;\n      if (precision) precision = +precision.substring(1);\n      if (zfill || fill === \"0\" && align === \"=\") {\n        zfill = fill = \"0\";\n        align = \"=\";\n      }\n      switch (type) {\n       case \"n\":\n        comma = true;\n        type = \"g\";\n        break;\n\n       case \"%\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"f\";\n        break;\n\n       case \"p\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"r\";\n        break;\n\n       case \"b\":\n       case \"o\":\n       case \"x\":\n       case \"X\":\n        if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();\n\n       case \"c\":\n        exponent = false;\n\n       case \"d\":\n        integer = true;\n        precision = 0;\n        break;\n\n       case \"s\":\n        scale = -1;\n        type = \"r\";\n        break;\n      }\n      if (symbol === \"$\") prefix = locale_currency[0], suffix = locale_currency[1];\n      if (type == \"r\" && !precision) type = \"g\";\n      if (precision != null) {\n        if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n      }\n      type = d3_format_types.get(type) || d3_format_typeDefault;\n      var zcomma = zfill && comma;\n      return function(value) {\n        var fullSuffix = suffix;\n        if (integer && value % 1) return \"\";\n        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign === \"-\" ? \"\" : sign;\n        if (scale < 0) {\n          var unit = d3.formatPrefix(value, precision);\n          value = unit.scale(value);\n          fullSuffix = unit.symbol + suffix;\n        } else {\n          value *= scale;\n        }\n        value = type(value, precision);\n        var i = value.lastIndexOf(\".\"), before, after;\n        if (i < 0) {\n          var j = exponent ? value.lastIndexOf(\"e\") : -1;\n          if (j < 0) before = value, after = \"\"; else before = value.substring(0, j), after = value.substring(j);\n        } else {\n          before = value.substring(0, i);\n          after = locale_decimal + value.substring(i + 1);\n        }\n        if (!zfill && comma) before = formatGroup(before, Infinity);\n        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n        negative += prefix;\n        value = before + after;\n        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n      };\n    };\n  }\n  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n  var d3_format_types = d3.map({\n    b: function(x) {\n      return x.toString(2);\n    },\n    c: function(x) {\n      return String.fromCharCode(x);\n    },\n    o: function(x) {\n      return x.toString(8);\n    },\n    x: function(x) {\n      return x.toString(16);\n    },\n    X: function(x) {\n      return x.toString(16).toUpperCase();\n    },\n    g: function(x, p) {\n      return x.toPrecision(p);\n    },\n    e: function(x, p) {\n      return x.toExponential(p);\n    },\n    f: function(x, p) {\n      return x.toFixed(p);\n    },\n    r: function(x, p) {\n      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n    }\n  });\n  function d3_format_typeDefault(x) {\n    return x + \"\";\n  }\n  var d3_time = d3.time = {}, d3_date = Date;\n  function d3_date_utc() {\n    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n  }\n  d3_date_utc.prototype = {\n    getDate: function() {\n      return this._.getUTCDate();\n    },\n    getDay: function() {\n      return this._.getUTCDay();\n    },\n    getFullYear: function() {\n      return this._.getUTCFullYear();\n    },\n    getHours: function() {\n      return this._.getUTCHours();\n    },\n    getMilliseconds: function() {\n      return this._.getUTCMilliseconds();\n    },\n    getMinutes: function() {\n      return this._.getUTCMinutes();\n    },\n    getMonth: function() {\n      return this._.getUTCMonth();\n    },\n    getSeconds: function() {\n      return this._.getUTCSeconds();\n    },\n    getTime: function() {\n      return this._.getTime();\n    },\n    getTimezoneOffset: function() {\n      return 0;\n    },\n    valueOf: function() {\n      return this._.valueOf();\n    },\n    setDate: function() {\n      d3_time_prototype.setUTCDate.apply(this._, arguments);\n    },\n    setDay: function() {\n      d3_time_prototype.setUTCDay.apply(this._, arguments);\n    },\n    setFullYear: function() {\n      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n    },\n    setHours: function() {\n      d3_time_prototype.setUTCHours.apply(this._, arguments);\n    },\n    setMilliseconds: function() {\n      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n    },\n    setMinutes: function() {\n      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n    },\n    setMonth: function() {\n      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n    },\n    setSeconds: function() {\n      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n    },\n    setTime: function() {\n      d3_time_prototype.setTime.apply(this._, arguments);\n    }\n  };\n  var d3_time_prototype = Date.prototype;\n  function d3_time_interval(local, step, number) {\n    function round(date) {\n      var d0 = local(date), d1 = offset(d0, 1);\n      return date - d0 < d1 - date ? d0 : d1;\n    }\n    function ceil(date) {\n      step(date = local(new d3_date(date - 1)), 1);\n      return date;\n    }\n    function offset(date, k) {\n      step(date = new d3_date(+date), k);\n      return date;\n    }\n    function range(t0, t1, dt) {\n      var time = ceil(t0), times = [];\n      if (dt > 1) {\n        while (time < t1) {\n          if (!(number(time) % dt)) times.push(new Date(+time));\n          step(time, 1);\n        }\n      } else {\n        while (time < t1) times.push(new Date(+time)), step(time, 1);\n      }\n      return times;\n    }\n    function range_utc(t0, t1, dt) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = t0;\n        return range(utc, t1, dt);\n      } finally {\n        d3_date = Date;\n      }\n    }\n    local.floor = local;\n    local.round = round;\n    local.ceil = ceil;\n    local.offset = offset;\n    local.range = range;\n    var utc = local.utc = d3_time_interval_utc(local);\n    utc.floor = utc;\n    utc.round = d3_time_interval_utc(round);\n    utc.ceil = d3_time_interval_utc(ceil);\n    utc.offset = d3_time_interval_utc(offset);\n    utc.range = range_utc;\n    return local;\n  }\n  function d3_time_interval_utc(method) {\n    return function(date, k) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = date;\n        return method(utc, k)._;\n      } finally {\n        d3_date = Date;\n      }\n    };\n  }\n  d3_time.year = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setMonth(0, 1);\n    return date;\n  }, function(date, offset) {\n    date.setFullYear(date.getFullYear() + offset);\n  }, function(date) {\n    return date.getFullYear();\n  });\n  d3_time.years = d3_time.year.range;\n  d3_time.years.utc = d3_time.year.utc.range;\n  d3_time.day = d3_time_interval(function(date) {\n    var day = new d3_date(2e3, 0);\n    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    return day;\n  }, function(date, offset) {\n    date.setDate(date.getDate() + offset);\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n  d3_time.days = d3_time.day.range;\n  d3_time.days.utc = d3_time.day.utc.range;\n  d3_time.dayOfYear = function(date) {\n    var year = d3_time.year(date);\n    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n  };\n  [ \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\" ].forEach(function(day, i) {\n    i = 7 - i;\n    var interval = d3_time[day] = d3_time_interval(function(date) {\n      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n      return date;\n    }, function(date, offset) {\n      date.setDate(date.getDate() + Math.floor(offset) * 7);\n    }, function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n    });\n    d3_time[day + \"s\"] = interval.range;\n    d3_time[day + \"s\"].utc = interval.utc.range;\n    d3_time[day + \"OfYear\"] = function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n    };\n  });\n  d3_time.week = d3_time.sunday;\n  d3_time.weeks = d3_time.sunday.range;\n  d3_time.weeks.utc = d3_time.sunday.utc.range;\n  d3_time.weekOfYear = d3_time.sundayOfYear;\n  function d3_locale_timeFormat(locale) {\n    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n    function d3_time_format(template) {\n      var n = template.length;\n      function format(date) {\n        var string = [], i = -1, j = 0, c, p, f;\n        while (++i < n) {\n          if (template.charCodeAt(i) === 37) {\n            string.push(template.slice(j, i));\n            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n        string.push(template.slice(j, i));\n        return string.join(\"\");\n      }\n      format.parse = function(string) {\n        var d = {\n          y: 1900,\n          m: 0,\n          d: 1,\n          H: 0,\n          M: 0,\n          S: 0,\n          L: 0,\n          Z: null\n        }, i = d3_time_parse(d, template, string, 0);\n        if (i != string.length) return null;\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();\n        if (\"j\" in d) date.setFullYear(d.y, 0, d.j); else if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n          date.setFullYear(d.y, 0, 1);\n          date.setFullYear(d.y, 0, \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n        } else date.setFullYear(d.y, d.m, d.d);\n        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n        return localZ ? date._ : date;\n      };\n      format.toString = function() {\n        return template;\n      };\n      return format;\n    }\n    function d3_time_parse(date, template, string, j) {\n      var c, p, t, i = 0, n = template.length, m = string.length;\n      while (i < n) {\n        if (j >= m) return -1;\n        c = template.charCodeAt(i++);\n        if (c === 37) {\n          t = template.charAt(i++);\n          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n          if (!p || (j = p(date, string, j)) < 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n      return j;\n    }\n    d3_time_format.utc = function(template) {\n      var local = d3_time_format(template);\n      function format(date) {\n        try {\n          d3_date = d3_date_utc;\n          var utc = new d3_date();\n          utc._ = date;\n          return local(utc);\n        } finally {\n          d3_date = Date;\n        }\n      }\n      format.parse = function(string) {\n        try {\n          d3_date = d3_date_utc;\n          var date = local.parse(string);\n          return date && date._;\n        } finally {\n          d3_date = Date;\n        }\n      };\n      format.toString = local.toString;\n      return format;\n    };\n    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n    locale_periods.forEach(function(p, i) {\n      d3_time_periodLookup.set(p.toLowerCase(), i);\n    });\n    var d3_time_formats = {\n      a: function(d) {\n        return locale_shortDays[d.getDay()];\n      },\n      A: function(d) {\n        return locale_days[d.getDay()];\n      },\n      b: function(d) {\n        return locale_shortMonths[d.getMonth()];\n      },\n      B: function(d) {\n        return locale_months[d.getMonth()];\n      },\n      c: d3_time_format(locale_dateTime),\n      d: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      e: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      H: function(d, p) {\n        return d3_time_formatPad(d.getHours(), p, 2);\n      },\n      I: function(d, p) {\n        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n      },\n      j: function(d, p) {\n        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n      },\n      L: function(d, p) {\n        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n      },\n      m: function(d, p) {\n        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n      },\n      M: function(d, p) {\n        return d3_time_formatPad(d.getMinutes(), p, 2);\n      },\n      p: function(d) {\n        return locale_periods[+(d.getHours() >= 12)];\n      },\n      S: function(d, p) {\n        return d3_time_formatPad(d.getSeconds(), p, 2);\n      },\n      U: function(d, p) {\n        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n      },\n      w: function(d) {\n        return d.getDay();\n      },\n      W: function(d, p) {\n        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n      },\n      x: d3_time_format(locale_date),\n      X: d3_time_format(locale_time),\n      y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n      },\n      Y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n      },\n      Z: d3_time_zone,\n      \"%\": function() {\n        return \"%\";\n      }\n    };\n    var d3_time_parsers = {\n      a: d3_time_parseWeekdayAbbrev,\n      A: d3_time_parseWeekday,\n      b: d3_time_parseMonthAbbrev,\n      B: d3_time_parseMonth,\n      c: d3_time_parseLocaleFull,\n      d: d3_time_parseDay,\n      e: d3_time_parseDay,\n      H: d3_time_parseHour24,\n      I: d3_time_parseHour24,\n      j: d3_time_parseDayOfYear,\n      L: d3_time_parseMilliseconds,\n      m: d3_time_parseMonthNumber,\n      M: d3_time_parseMinutes,\n      p: d3_time_parseAmPm,\n      S: d3_time_parseSeconds,\n      U: d3_time_parseWeekNumberSunday,\n      w: d3_time_parseWeekdayNumber,\n      W: d3_time_parseWeekNumberMonday,\n      x: d3_time_parseLocaleDate,\n      X: d3_time_parseLocaleTime,\n      y: d3_time_parseYear,\n      Y: d3_time_parseFullYear,\n      Z: d3_time_parseZone,\n      \"%\": d3_time_parseLiteralPercent\n    };\n    function d3_time_parseWeekdayAbbrev(date, string, i) {\n      d3_time_dayAbbrevRe.lastIndex = 0;\n      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseWeekday(date, string, i) {\n      d3_time_dayRe.lastIndex = 0;\n      var n = d3_time_dayRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonthAbbrev(date, string, i) {\n      d3_time_monthAbbrevRe.lastIndex = 0;\n      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonth(date, string, i) {\n      d3_time_monthRe.lastIndex = 0;\n      var n = d3_time_monthRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseLocaleFull(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n    }\n    function d3_time_parseLocaleDate(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n    }\n    function d3_time_parseLocaleTime(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n    }\n    function d3_time_parseAmPm(date, string, i) {\n      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n      return n == null ? -1 : (date.p = n, i);\n    }\n    return d3_time_format;\n  }\n  var d3_time_formatPads = {\n    \"-\": \"\",\n    _: \" \",\n    \"0\": \"0\"\n  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;\n  function d3_time_formatPad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\", string = (sign ? -value : value) + \"\", length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n  function d3_time_formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");\n  }\n  function d3_time_formatLookup(names) {\n    var map = new d3_Map(), i = -1, n = names.length;\n    while (++i < n) map.set(names[i].toLowerCase(), i);\n    return map;\n  }\n  function d3_time_parseWeekdayNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n    return n ? (date.w = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberSunday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.U = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberMonday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.W = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseFullYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n    return n ? (date.y = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n  }\n  function d3_time_parseZone(date, string, i) {\n    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, \n    i + 5) : -1;\n  }\n  function d3_time_expandYear(d) {\n    return d + (d > 68 ? 1900 : 2e3);\n  }\n  function d3_time_parseMonthNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n  }\n  function d3_time_parseDay(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.d = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseDayOfYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.j = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseHour24(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.H = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMinutes(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.M = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseSeconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.S = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMilliseconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.L = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_zone(d) {\n    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = abs(z) / 60 | 0, zm = abs(z) % 60;\n    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);\n  }\n  function d3_time_parseLiteralPercent(date, string, i) {\n    d3_time_percentRe.lastIndex = 0;\n    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n  function d3_time_formatMulti(formats) {\n    var n = formats.length, i = -1;\n    while (++i < n) formats[i][0] = this(formats[i][0]);\n    return function(date) {\n      var i = 0, f = formats[i];\n      while (!f[1](date)) f = formats[++i];\n      return f[0](date);\n    };\n  }\n  d3.locale = function(locale) {\n    return {\n      numberFormat: d3_locale_numberFormat(locale),\n      timeFormat: d3_locale_timeFormat(locale)\n    };\n  };\n  var d3_locale_enUS = d3.locale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [ 3 ],\n    currency: [ \"$\", \"\" ],\n    dateTime: \"%a %b %e %X %Y\",\n    date: \"%m/%d/%Y\",\n    time: \"%H:%M:%S\",\n    periods: [ \"AM\", \"PM\" ],\n    days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],\n    shortDays: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],\n    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n    shortMonths: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\n  });\n  d3.format = d3_locale_enUS.numberFormat;\n  d3.geo = {};\n  function d3_adder() {}\n  d3_adder.prototype = {\n    s: 0,\n    t: 0,\n    add: function(y) {\n      d3_adderSum(y, this.t, d3_adderTemp);\n      d3_adderSum(d3_adderTemp.s, this.s, this);\n      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;\n    },\n    reset: function() {\n      this.s = this.t = 0;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n  var d3_adderTemp = new d3_adder();\n  function d3_adderSum(a, b, o) {\n    var x = o.s = a + b, bv = x - a, av = x - bv;\n    o.t = a - av + (b - bv);\n  }\n  d3.geo.stream = function(object, listener) {\n    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n      d3_geo_streamObjectType[object.type](object, listener);\n    } else {\n      d3_geo_streamGeometry(object, listener);\n    }\n  };\n  function d3_geo_streamGeometry(geometry, listener) {\n    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n    }\n  }\n  var d3_geo_streamObjectType = {\n    Feature: function(feature, listener) {\n      d3_geo_streamGeometry(feature.geometry, listener);\n    },\n    FeatureCollection: function(object, listener) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);\n    }\n  };\n  var d3_geo_streamGeometryType = {\n    Sphere: function(object, listener) {\n      listener.sphere();\n    },\n    Point: function(object, listener) {\n      object = object.coordinates;\n      listener.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, listener) {\n      d3_geo_streamLine(object.coordinates, listener, 0);\n    },\n    MultiLineString: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);\n    },\n    Polygon: function(object, listener) {\n      d3_geo_streamPolygon(object.coordinates, listener);\n    },\n    MultiPolygon: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);\n    },\n    GeometryCollection: function(object, listener) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);\n    }\n  };\n  function d3_geo_streamLine(coordinates, listener, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    listener.lineStart();\n    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n    listener.lineEnd();\n  }\n  function d3_geo_streamPolygon(coordinates, listener) {\n    var i = -1, n = coordinates.length;\n    listener.polygonStart();\n    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);\n    listener.polygonEnd();\n  }\n  d3.geo.area = function(object) {\n    d3_geo_areaSum = 0;\n    d3.geo.stream(object, d3_geo_area);\n    return d3_geo_areaSum;\n  };\n  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();\n  var d3_geo_area = {\n    sphere: function() {\n      d3_geo_areaSum += 4 * π;\n    },\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_areaRingSum.reset();\n      d3_geo_area.lineStart = d3_geo_areaRingStart;\n    },\n    polygonEnd: function() {\n      var area = 2 * d3_geo_areaRingSum;\n      d3_geo_areaSum += area < 0 ? 4 * π + area : area;\n      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n    }\n  };\n  function d3_geo_areaRingStart() {\n    var λ00, φ00, λ0, cosφ0, sinφ0;\n    d3_geo_area.point = function(λ, φ) {\n      d3_geo_area.point = nextPoint;\n      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), \n      sinφ0 = Math.sin(φ);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      φ = φ * d3_radians / 2 + π / 4;\n      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n      d3_geo_areaRingSum.add(Math.atan2(v, u));\n      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n    }\n    d3_geo_area.lineEnd = function() {\n      nextPoint(λ00, φ00);\n    };\n  }\n  function d3_geo_cartesian(spherical) {\n    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);\n    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];\n  }\n  function d3_geo_cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n  function d3_geo_cartesianCross(a, b) {\n    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];\n  }\n  function d3_geo_cartesianAdd(a, b) {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n  }\n  function d3_geo_cartesianScale(vector, k) {\n    return [ vector[0] * k, vector[1] * k, vector[2] * k ];\n  }\n  function d3_geo_cartesianNormalize(d) {\n    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l;\n    d[1] /= l;\n    d[2] /= l;\n  }\n  function d3_geo_spherical(cartesian) {\n    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];\n  }\n  function d3_geo_sphericalEqual(a, b) {\n    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;\n  }\n  d3.geo.bounds = function() {\n    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n    var bound = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        bound.point = ringPoint;\n        bound.lineStart = ringStart;\n        bound.lineEnd = ringEnd;\n        dλSum = 0;\n        d3_geo_area.polygonStart();\n      },\n      polygonEnd: function() {\n        d3_geo_area.polygonEnd();\n        bound.point = point;\n        bound.lineStart = lineStart;\n        bound.lineEnd = lineEnd;\n        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;\n        range[0] = λ0, range[1] = λ1;\n      }\n    };\n    function point(λ, φ) {\n      ranges.push(range = [ λ0 = λ, λ1 = λ ]);\n      if (φ < φ0) φ0 = φ;\n      if (φ > φ1) φ1 = φ;\n    }\n    function linePoint(λ, φ) {\n      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);\n      if (p0) {\n        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n        d3_geo_cartesianNormalize(inflection);\n        inflection = d3_geo_spherical(inflection);\n        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;\n        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = inflection[1] * d3_degrees;\n          if (φi > φ1) φ1 = φi;\n        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = -inflection[1] * d3_degrees;\n          if (φi < φ0) φ0 = φi;\n        } else {\n          if (φ < φ0) φ0 = φ;\n          if (φ > φ1) φ1 = φ;\n        }\n        if (antimeridian) {\n          if (λ < λ_) {\n            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n          } else {\n            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n          }\n        } else {\n          if (λ1 >= λ0) {\n            if (λ < λ0) λ0 = λ;\n            if (λ > λ1) λ1 = λ;\n          } else {\n            if (λ > λ_) {\n              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n            } else {\n              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n            }\n          }\n        }\n      } else {\n        point(λ, φ);\n      }\n      p0 = p, λ_ = λ;\n    }\n    function lineStart() {\n      bound.point = linePoint;\n    }\n    function lineEnd() {\n      range[0] = λ0, range[1] = λ1;\n      bound.point = point;\n      p0 = null;\n    }\n    function ringPoint(λ, φ) {\n      if (p0) {\n        var dλ = λ - λ_;\n        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;\n      } else λ__ = λ, φ__ = φ;\n      d3_geo_area.point(λ, φ);\n      linePoint(λ, φ);\n    }\n    function ringStart() {\n      d3_geo_area.lineStart();\n    }\n    function ringEnd() {\n      ringPoint(λ__, φ__);\n      d3_geo_area.lineEnd();\n      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);\n      range[0] = λ0, range[1] = λ1;\n      p0 = null;\n    }\n    function angle(λ0, λ1) {\n      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;\n    }\n    function compareRanges(a, b) {\n      return a[0] - b[0];\n    }\n    function withinRange(x, range) {\n      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n    }\n    return function(feature) {\n      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n      ranges = [];\n      d3.geo.stream(feature, bound);\n      var n = ranges.length;\n      if (n) {\n        ranges.sort(compareRanges);\n        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {\n          b = ranges[i];\n          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n          } else {\n            merged.push(a = b);\n          }\n        }\n        var best = -Infinity, dλ;\n        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {\n          b = merged[i];\n          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];\n        }\n      }\n      ranges = range = null;\n      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];\n    };\n  }();\n  d3.geo.centroid = function(object) {\n    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n    d3.geo.stream(object, d3_geo_centroid);\n    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;\n    if (m < ε2) {\n      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n      m = x * x + y * y + z * z;\n      if (m < ε2) return [ NaN, NaN ];\n    }\n    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];\n  };\n  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n  var d3_geo_centroid = {\n    sphere: d3_noop,\n    point: d3_geo_centroidPoint,\n    lineStart: d3_geo_centroidLineStart,\n    lineEnd: d3_geo_centroidLineEnd,\n    polygonStart: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n    }\n  };\n  function d3_geo_centroidPoint(λ, φ) {\n    λ *= d3_radians;\n    var cosφ = Math.cos(φ *= d3_radians);\n    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n  }\n  function d3_geo_centroidPointXYZ(x, y, z) {\n    ++d3_geo_centroidW0;\n    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n  }\n  function d3_geo_centroidLineStart() {\n    var x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroid.point = nextPoint;\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_centroidLineEnd() {\n    d3_geo_centroid.point = d3_geo_centroidPoint;\n  }\n  function d3_geo_centroidRingStart() {\n    var λ00, φ00, x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ00 = λ, φ00 = φ;\n      d3_geo_centroid.point = nextPoint;\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    d3_geo_centroid.lineEnd = function() {\n      nextPoint(λ00, φ00);\n      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n      d3_geo_centroid.point = d3_geo_centroidPoint;\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);\n      d3_geo_centroidX2 += v * cx;\n      d3_geo_centroidY2 += v * cy;\n      d3_geo_centroidZ2 += v * cz;\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_compose(a, b) {\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n    return compose;\n  }\n  function d3_true() {\n    return true;\n  }\n  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n    var subject = [], clip = [];\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n];\n      if (d3_geo_sphericalEqual(p0, p1)) {\n        listener.lineStart();\n        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);\n        listener.lineEnd();\n        return;\n      }\n      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n    });\n    clip.sort(compare);\n    d3_geo_clipPolygonLinkCircular(subject);\n    d3_geo_clipPolygonLinkCircular(clip);\n    if (!subject.length) return;\n    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {\n      clip[i].e = entry = !entry;\n    }\n    var start = subject[0], points, point;\n    while (1) {\n      var current = start, isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      listener.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, listener);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, listener);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      listener.lineEnd();\n    }\n  }\n  function d3_geo_clipPolygonLinkCircular(array) {\n    if (!(n = array.length)) return;\n    var n, i = 0, a = array[0], b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other;\n    this.e = entry;\n    this.v = false;\n    this.n = this.p = null;\n  }\n  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n    return function(rotate, listener) {\n      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = d3.merge(segments);\n          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n          if (segments.length) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n          } else if (clipStartInside) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            interpolate(null, null, 1, listener);\n            listener.lineEnd();\n          }\n          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          listener.polygonStart();\n          listener.lineStart();\n          interpolate(null, null, 1, listener);\n          listener.lineEnd();\n          listener.polygonEnd();\n        }\n      };\n      function point(λ, φ) {\n        var point = rotate(λ, φ);\n        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n      }\n      function pointLine(λ, φ) {\n        var point = rotate(λ, φ);\n        line.point(point[0], point[1]);\n      }\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n      var segments;\n      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n      function pointRing(λ, φ) {\n        ring.push([ λ, φ ]);\n        var point = rotate(λ, φ);\n        ringListener.point(point[0], point[1]);\n      }\n      function ringStart() {\n        ringListener.lineStart();\n        ring = [];\n      }\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringListener.lineEnd();\n        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n        if (!n) return;\n        if (clean & 1) {\n          segment = ringSegments[0];\n          var n = segment.length - 1, i = -1, point;\n          if (n > 0) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            while (++i < n) listener.point((point = segment[i])[0], point[1]);\n            listener.lineEnd();\n          }\n          return;\n        }\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n      }\n      return clip;\n    };\n  }\n  function d3_geo_clipSegmentLength1(segment) {\n    return segment.length > 1;\n  }\n  function d3_geo_clipBufferListener() {\n    var lines = [], line;\n    return {\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      point: function(λ, φ) {\n        line.push([ λ, φ ]);\n      },\n      lineEnd: d3_noop,\n      buffer: function() {\n        var buffer = lines;\n        lines = [];\n        line = null;\n        return buffer;\n      },\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      }\n    };\n  }\n  function d3_geo_clipSort(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n  }\n  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n  function d3_geo_clipAntimeridianLine(listener) {\n    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;\n    return {\n      lineStart: function() {\n        listener.lineStart();\n        clean = 1;\n      },\n      point: function(λ1, φ1) {\n        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);\n        if (abs(dλ - π) < ε) {\n          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          listener.point(λ1, φ0);\n          clean = 0;\n        } else if (sλ0 !== sλ1 && dλ >= π) {\n          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;\n          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;\n          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          clean = 0;\n        }\n        listener.point(λ0 = λ1, φ0 = φ1);\n        sλ0 = sλ1;\n      },\n      lineEnd: function() {\n        listener.lineEnd();\n        λ0 = φ0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean;\n      }\n    };\n  }\n  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);\n    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n  }\n  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n    var φ;\n    if (from == null) {\n      φ = direction * halfπ;\n      listener.point(-π, φ);\n      listener.point(0, φ);\n      listener.point(π, φ);\n      listener.point(π, 0);\n      listener.point(π, -φ);\n      listener.point(0, -φ);\n      listener.point(-π, -φ);\n      listener.point(-π, 0);\n      listener.point(-π, φ);\n    } else if (abs(from[0] - to[0]) > ε) {\n      var s = from[0] < to[0] ? π : -π;\n      φ = direction * s / 2;\n      listener.point(-s, φ);\n      listener.point(0, φ);\n      listener.point(s, φ);\n    } else {\n      listener.point(to[0], to[1]);\n    }\n  }\n  function d3_geo_pointInPolygon(point, polygon) {\n    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n    d3_geo_areaRingSum.reset();\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      var ring = polygon[i], m = ring.length;\n      if (!m) continue;\n      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n      while (true) {\n        if (j === m) j = 0;\n        point = ring[j];\n        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;\n        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {\n          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n          d3_geo_cartesianNormalize(arc);\n          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n          d3_geo_cartesianNormalize(intersection);\n          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);\n          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ dλ >= 0 ? 1 : -1;\n          }\n        }\n        if (!j++) break;\n        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n      }\n    }\n    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;\n  }\n  function d3_geo_clipCircle(radius) {\n    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);\n    function visible(λ, φ) {\n      return Math.cos(λ) * Math.cos(φ) > cr;\n    }\n    function clipLine(listener) {\n      var point0, c0, v0, v00, clean;\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(λ, φ) {\n          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n          if (!point0 && (v00 = v0 = v)) listener.lineStart();\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n              point1[0] += ε;\n              point1[1] += ε;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              listener.lineStart();\n              point2 = intersect(point1, point0);\n              listener.point(point2[0], point2[1]);\n            } else {\n              point2 = intersect(point0, point1);\n              listener.point(point2[0], point2[1]);\n              listener.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n              } else {\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n            listener.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) listener.lineEnd();\n          point0 = null;\n        },\n        clean: function() {\n          return clean | (v00 && v0) << 1;\n        }\n      };\n    }\n    function intersect(a, b, two) {\n      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);\n      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n      if (!determinant) return !two && a;\n      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n      d3_geo_cartesianAdd(A, B);\n      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n      if (t2 < 0) return;\n      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);\n      d3_geo_cartesianAdd(q, A);\n      q = d3_geo_spherical(q);\n      if (!two) return q;\n      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;\n      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;\n      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;\n      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;\n      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n        d3_geo_cartesianAdd(q1, A);\n        return [ q, d3_geo_spherical(q1) ];\n      }\n    }\n    function code(λ, φ) {\n      var r = smallRadius ? radius : π - radius, code = 0;\n      if (λ < -r) code |= 1; else if (λ > r) code |= 2;\n      if (φ < -r) code |= 4; else if (φ > r) code |= 8;\n      return code;\n    }\n  }\n  function d3_geom_clipLine(x0, y0, x1, y1) {\n    return function(line) {\n      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n      r = x0 - ax;\n      if (!dx && r > 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dx > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = x1 - ax;\n      if (!dx && r < 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dx > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      r = y0 - ay;\n      if (!dy && r > 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dy > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = y1 - ay;\n      if (!dy && r < 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dy > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      if (t0 > 0) line.a = {\n        x: ax + t0 * dx,\n        y: ay + t0 * dy\n      };\n      if (t1 < 1) line.b = {\n        x: ax + t1 * dx,\n        y: ay + t1 * dy\n      };\n      return line;\n    };\n  }\n  var d3_geo_clipExtentMAX = 1e9;\n  d3.geo.clipExtent = function() {\n    var x0, y0, x1, y1, stream, clip, clipExtent = {\n      stream: function(output) {\n        if (stream) stream.valid = false;\n        stream = clip(output);\n        stream.valid = true;\n        return stream;\n      },\n      extent: function(_) {\n        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n        if (stream) stream.valid = false, stream = null;\n        return clipExtent;\n      }\n    };\n    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);\n  };\n  function d3_geo_clipExtent(x0, y0, x1, y1) {\n    return function(listener) {\n      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          listener = bufferListener;\n          segments = [];\n          polygon = [];\n          clean = true;\n        },\n        polygonEnd: function() {\n          listener = listener_;\n          segments = d3.merge(segments);\n          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;\n          if (inside || visible) {\n            listener.polygonStart();\n            if (inside) {\n              listener.lineStart();\n              interpolate(null, null, 1, listener);\n              listener.lineEnd();\n            }\n            if (visible) {\n              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n            }\n            listener.polygonEnd();\n          }\n          segments = polygon = ring = null;\n        }\n      };\n      function insidePolygon(p) {\n        var wn = 0, n = polygon.length, y = p[1];\n        for (var i = 0; i < n; ++i) {\n          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {\n            b = v[j];\n            if (a[1] <= y) {\n              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;\n            } else {\n              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;\n            }\n            a = b;\n          }\n        }\n        return wn !== 0;\n      }\n      function interpolate(from, to, direction, listener) {\n        var a = 0, a1 = 0;\n        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n          do {\n            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n          } while ((a = (a + direction + 4) % 4) !== a1);\n        } else {\n          listener.point(to[0], to[1]);\n        }\n      }\n      function pointVisible(x, y) {\n        return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n      }\n      function point(x, y) {\n        if (pointVisible(x, y)) listener.point(x, y);\n      }\n      var x__, y__, v__, x_, y_, v_, first, clean;\n      function lineStart() {\n        clip.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferListener.rejoin();\n          segments.push(bufferListener.buffer());\n        }\n        clip.point = point;\n        if (v_) listener.lineEnd();\n      }\n      function linePoint(x, y) {\n        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n        var v = pointVisible(x, y);\n        if (polygon) ring.push([ x, y ]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            listener.lineStart();\n            listener.point(x, y);\n          }\n        } else {\n          if (v && v_) listener.point(x, y); else {\n            var l = {\n              a: {\n                x: x_,\n                y: y_\n              },\n              b: {\n                x: x,\n                y: y\n              }\n            };\n            if (clipLine(l)) {\n              if (!v_) {\n                listener.lineStart();\n                listener.point(l.a.x, l.a.y);\n              }\n              listener.point(l.b.x, l.b.y);\n              if (!v) listener.lineEnd();\n              clean = false;\n            } else if (v) {\n              listener.lineStart();\n              listener.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n      return clip;\n    };\n    function corner(p, direction) {\n      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n    }\n    function compare(a, b) {\n      return comparePoints(a.x, b.x);\n    }\n    function comparePoints(a, b) {\n      var ca = corner(a, 1), cb = corner(b, 1);\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }\n  }\n  function d3_geo_conic(projectAt) {\n    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);\n    p.parallels = function(_) {\n      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];\n      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n    };\n    return p;\n  }\n  function d3_geo_conicEqualArea(φ0, φ1) {\n    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;\n    function forward(λ, φ) {\n      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = ρ0 - y;\n      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEqualArea = function() {\n    return d3_geo_conic(d3_geo_conicEqualArea);\n  }).raw = d3_geo_conicEqualArea;\n  d3.geo.albers = function() {\n    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);\n  };\n  d3.geo.albersUsa = function() {\n    var lower48 = d3.geo.albers();\n    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);\n    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);\n    var point, pointStream = {\n      point: function(x, y) {\n        point = [ x, y ];\n      }\n    }, lower48Point, alaskaPoint, hawaiiPoint;\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      point = null;\n      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);\n      return point;\n    }\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n    };\n    albersUsa.stream = function(stream) {\n      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n      return {\n        point: function(x, y) {\n          lower48Stream.point(x, y);\n          alaskaStream.point(x, y);\n          hawaiiStream.point(x, y);\n        },\n        sphere: function() {\n          lower48Stream.sphere();\n          alaskaStream.sphere();\n          hawaiiStream.sphere();\n        },\n        lineStart: function() {\n          lower48Stream.lineStart();\n          alaskaStream.lineStart();\n          hawaiiStream.lineStart();\n        },\n        lineEnd: function() {\n          lower48Stream.lineEnd();\n          alaskaStream.lineEnd();\n          hawaiiStream.lineEnd();\n        },\n        polygonStart: function() {\n          lower48Stream.polygonStart();\n          alaskaStream.polygonStart();\n          hawaiiStream.polygonStart();\n        },\n        polygonEnd: function() {\n          lower48Stream.polygonEnd();\n          alaskaStream.polygonEnd();\n          hawaiiStream.polygonEnd();\n        }\n      };\n    };\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_);\n      alaska.precision(_);\n      hawaii.precision(_);\n      return albersUsa;\n    };\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_);\n      alaska.scale(_ * .35);\n      hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      return albersUsa;\n    };\n    return albersUsa.scale(1070);\n  };\n  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_pathAreaPolygon = 0;\n      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n    }\n  };\n  function d3_geo_pathAreaRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathArea.point = function(x, y) {\n      d3_geo_pathArea.point = nextPoint;\n      x00 = x0 = x, y00 = y0 = y;\n    };\n    function nextPoint(x, y) {\n      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n      x0 = x, y0 = y;\n    }\n    d3_geo_pathArea.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n  var d3_geo_pathBounds = {\n    point: d3_geo_pathBoundsPoint,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_pathBoundsPoint(x, y) {\n    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n  }\n  function d3_geo_pathBuffer() {\n    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = d3_geo_pathBufferCircle(_);\n        return stream;\n      },\n      result: function() {\n        if (buffer.length) {\n          var result = buffer.join(\"\");\n          buffer = [];\n          return result;\n        }\n      }\n    };\n    function point(x, y) {\n      buffer.push(\"M\", x, \",\", y, pointCircle);\n    }\n    function pointLineStart(x, y) {\n      buffer.push(\"M\", x, \",\", y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      buffer.push(\"L\", x, \",\", y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      buffer.push(\"Z\");\n    }\n    return stream;\n  }\n  function d3_geo_pathBufferCircle(radius) {\n    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n  }\n  var d3_geo_pathCentroid = {\n    point: d3_geo_pathCentroidPoint,\n    lineStart: d3_geo_pathCentroidLineStart,\n    lineEnd: d3_geo_pathCentroidLineEnd,\n    polygonStart: function() {\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n    }\n  };\n  function d3_geo_pathCentroidPoint(x, y) {\n    d3_geo_centroidX0 += x;\n    d3_geo_centroidY0 += y;\n    ++d3_geo_centroidZ0;\n  }\n  function d3_geo_pathCentroidLineStart() {\n    var x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n  }\n  function d3_geo_pathCentroidLineEnd() {\n    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n  }\n  function d3_geo_pathCentroidRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      z = y0 * x - x0 * y;\n      d3_geo_centroidX2 += z * (x0 + x);\n      d3_geo_centroidY2 += z * (y0 + y);\n      d3_geo_centroidZ2 += z * 3;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n    d3_geo_pathCentroid.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  function d3_geo_pathContext(context) {\n    var pointRadius = 4.5;\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n      result: d3_noop\n    };\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, τ);\n    }\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      context.closePath();\n    }\n    return stream;\n  }\n  function d3_geo_resample(project) {\n    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;\n    function resample(stream) {\n      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n    }\n    function resampleNone(stream) {\n      return d3_geo_transformPoint(stream, function(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      });\n    }\n    function resampleRecursive(stream) {\n      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n      var resample = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          stream.polygonStart();\n          resample.lineStart = ringStart;\n        },\n        polygonEnd: function() {\n          stream.polygonEnd();\n          resample.lineStart = lineStart;\n        }\n      };\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n      function lineStart() {\n        x0 = NaN;\n        resample.point = linePoint;\n        stream.lineStart();\n      }\n      function linePoint(λ, φ) {\n        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n      function lineEnd() {\n        resample.point = point;\n        stream.lineEnd();\n      }\n      function ringStart() {\n        lineStart();\n        resample.point = ringPoint;\n        resample.lineEnd = ringEnd;\n      }\n      function ringPoint(λ, φ) {\n        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resample.point = linePoint;\n      }\n      function ringEnd() {\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n        resample.lineEnd = lineEnd;\n        lineEnd();\n      }\n      return resample;\n    }\n    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n      if (d2 > 4 * δ2 && depth--) {\n        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    resample.precision = function(_) {\n      if (!arguments.length) return Math.sqrt(δ2);\n      maxDepth = (δ2 = _ * _) > 0 && 16;\n      return resample;\n    };\n    return resample;\n  }\n  d3.geo.path = function() {\n    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n        d3.geo.stream(object, cacheStream);\n      }\n      return contextStream.result();\n    }\n    path.area = function(object) {\n      d3_geo_pathAreaSum = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n      return d3_geo_pathAreaSum;\n    };\n    path.centroid = function(object) {\n      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n    };\n    path.bounds = function(object) {\n      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];\n    };\n    path.projection = function(_) {\n      if (!arguments.length) return projection;\n      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n      return reset();\n    };\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return reset();\n    };\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n    function reset() {\n      cacheStream = null;\n      return path;\n    }\n    return path.projection(d3.geo.albersUsa()).context(null);\n  };\n  function d3_geo_pathProjectStream(project) {\n    var resample = d3_geo_resample(function(x, y) {\n      return project([ x * d3_degrees, y * d3_degrees ]);\n    });\n    return function(stream) {\n      return d3_geo_projectionRadians(resample(stream));\n    };\n  }\n  d3.geo.transform = function(methods) {\n    return {\n      stream: function(stream) {\n        var transform = new d3_geo_transform(stream);\n        for (var k in methods) transform[k] = methods[k];\n        return transform;\n      }\n    };\n  };\n  function d3_geo_transform(stream) {\n    this.stream = stream;\n  }\n  d3_geo_transform.prototype = {\n    point: function(x, y) {\n      this.stream.point(x, y);\n    },\n    sphere: function() {\n      this.stream.sphere();\n    },\n    lineStart: function() {\n      this.stream.lineStart();\n    },\n    lineEnd: function() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function() {\n      this.stream.polygonEnd();\n    }\n  };\n  function d3_geo_transformPoint(stream, point) {\n    return {\n      point: point,\n      sphere: function() {\n        stream.sphere();\n      },\n      lineStart: function() {\n        stream.lineStart();\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n      },\n      polygonStart: function() {\n        stream.polygonStart();\n      },\n      polygonEnd: function() {\n        stream.polygonEnd();\n      }\n    };\n  }\n  d3.geo.projection = d3_geo_projection;\n  d3.geo.projectionMutator = d3_geo_projectionMutator;\n  function d3_geo_projection(project) {\n    return d3_geo_projectionMutator(function() {\n      return project;\n    })();\n  }\n  function d3_geo_projectionMutator(projectAt) {\n    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {\n      x = project(x, y);\n      return [ x[0] * k + δx, δy - x[1] * k ];\n    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n    function projection(point) {\n      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n      return [ point[0] * k + δx, δy - point[1] * k ];\n    }\n    function invert(point) {\n      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];\n    }\n    projection.stream = function(output) {\n      if (stream) stream.valid = false;\n      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n      stream.valid = true;\n      return stream;\n    };\n    projection.clipAngle = function(_) {\n      if (!arguments.length) return clipAngle;\n      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n      return invalidate();\n    };\n    projection.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent;\n      clipExtent = _;\n      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n      return invalidate();\n    };\n    projection.scale = function(_) {\n      if (!arguments.length) return k;\n      k = +_;\n      return reset();\n    };\n    projection.translate = function(_) {\n      if (!arguments.length) return [ x, y ];\n      x = +_[0];\n      y = +_[1];\n      return reset();\n    };\n    projection.center = function(_) {\n      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];\n      λ = _[0] % 360 * d3_radians;\n      φ = _[1] % 360 * d3_radians;\n      return reset();\n    };\n    projection.rotate = function(_) {\n      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];\n      δλ = _[0] % 360 * d3_radians;\n      δφ = _[1] % 360 * d3_radians;\n      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;\n      return reset();\n    };\n    d3.rebind(projection, projectResample, \"precision\");\n    function reset() {\n      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n      var center = project(λ, φ);\n      δx = x - center[0] * k;\n      δy = y + center[1] * k;\n      return invalidate();\n    }\n    function invalidate() {\n      if (stream) stream.valid = false, stream = null;\n      return projection;\n    }\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return reset();\n    };\n  }\n  function d3_geo_projectionRadians(stream) {\n    return d3_geo_transformPoint(stream, function(x, y) {\n      stream.point(x * d3_radians, y * d3_radians);\n    });\n  }\n  function d3_geo_equirectangular(λ, φ) {\n    return [ λ, φ ];\n  }\n  (d3.geo.equirectangular = function() {\n    return d3_geo_projection(d3_geo_equirectangular);\n  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n  d3.geo.rotation = function(rotate) {\n    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    }\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    };\n    return forward;\n  };\n  function d3_geo_identityRotation(λ, φ) {\n    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n  }\n  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n  function d3_geo_rotation(δλ, δφ, δγ) {\n    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n  }\n  function d3_geo_forwardRotationλ(δλ) {\n    return function(λ, φ) {\n      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n    };\n  }\n  function d3_geo_rotationλ(δλ) {\n    var rotation = d3_geo_forwardRotationλ(δλ);\n    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n    return rotation;\n  }\n  function d3_geo_rotationφγ(δφ, δγ) {\n    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);\n    function rotation(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];\n    }\n    rotation.invert = function(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];\n    };\n    return rotation;\n  }\n  d3.geo.circle = function() {\n    var origin = [ 0, 0 ], angle, precision = 6, interpolate;\n    function circle() {\n      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n      interpolate(null, null, 1, {\n        point: function(x, y) {\n          ring.push(x = rotate(x, y));\n          x[0] *= d3_degrees, x[1] *= d3_degrees;\n        }\n      });\n      return {\n        type: \"Polygon\",\n        coordinates: [ ring ]\n      };\n    }\n    circle.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return circle;\n    };\n    circle.angle = function(x) {\n      if (!arguments.length) return angle;\n      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n      return circle;\n    };\n    circle.precision = function(_) {\n      if (!arguments.length) return precision;\n      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n      return circle;\n    };\n    return circle.angle(90);\n  };\n  function d3_geo_circleInterpolate(radius, precision) {\n    var cr = Math.cos(radius), sr = Math.sin(radius);\n    return function(from, to, direction, listener) {\n      var step = direction * precision;\n      if (from != null) {\n        from = d3_geo_circleAngle(cr, from);\n        to = d3_geo_circleAngle(cr, to);\n        if (direction > 0 ? from < to : from > to) from += direction * τ;\n      } else {\n        from = radius + direction * τ;\n        to = radius - .5 * step;\n      }\n      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {\n        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);\n      }\n    };\n  }\n  function d3_geo_circleAngle(cr, point) {\n    var a = d3_geo_cartesian(point);\n    a[0] -= cr;\n    d3_geo_cartesianNormalize(a);\n    var angle = d3_acos(-a[1]);\n    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n  }\n  d3.geo.distance = function(a, b) {\n    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n  };\n  d3.geo.graticule = function() {\n    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;\n    function graticule() {\n      return {\n        type: \"MultiLineString\",\n        coordinates: lines()\n      };\n    }\n    function lines() {\n      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n        return abs(x % DX) > ε;\n      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {\n        return abs(y % DY) > ε;\n      }).map(y));\n    }\n    graticule.lines = function() {\n      return lines().map(function(coordinates) {\n        return {\n          type: \"LineString\",\n          coordinates: coordinates\n        };\n      });\n    };\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]\n      };\n    };\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.minorExtent();\n      return graticule.majorExtent(_).minorExtent(_);\n    };\n    graticule.majorExtent = function(_) {\n      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.minorExtent = function(_) {\n      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.minorStep();\n      return graticule.majorStep(_).minorStep(_);\n    };\n    graticule.majorStep = function(_) {\n      if (!arguments.length) return [ DX, DY ];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n    graticule.minorStep = function(_) {\n      if (!arguments.length) return [ dx, dy ];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = d3_geo_graticuleX(y0, y1, 90);\n      y = d3_geo_graticuleY(x0, x1, precision);\n      X = d3_geo_graticuleX(Y0, Y1, 90);\n      Y = d3_geo_graticuleY(X0, X1, precision);\n      return graticule;\n    };\n    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n  };\n  function d3_geo_graticuleX(y0, y1, dy) {\n    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n    return function(x) {\n      return y.map(function(y) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_geo_graticuleY(x0, x1, dx) {\n    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n    return function(y) {\n      return x.map(function(x) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_source(d) {\n    return d.source;\n  }\n  function d3_target(d) {\n    return d.target;\n  }\n  d3.geo.greatArc = function() {\n    var source = d3_source, source_, target = d3_target, target_;\n    function greatArc() {\n      return {\n        type: \"LineString\",\n        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]\n      };\n    }\n    greatArc.distance = function() {\n      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n    };\n    greatArc.source = function(_) {\n      if (!arguments.length) return source;\n      source = _, source_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.target = function(_) {\n      if (!arguments.length) return target;\n      target = _, target_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.precision = function() {\n      return arguments.length ? greatArc : 0;\n    };\n    return greatArc;\n  };\n  d3.geo.interpolate = function(source, target) {\n    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n  };\n  function d3_geo_interpolate(x0, y0, x1, y1) {\n    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n    var interpolate = d ? function(t) {\n      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];\n    } : function() {\n      return [ x0 * d3_degrees, y0 * d3_degrees ];\n    };\n    interpolate.distance = d;\n    return interpolate;\n  }\n  d3.geo.length = function(object) {\n    d3_geo_lengthSum = 0;\n    d3.geo.stream(object, d3_geo_length);\n    return d3_geo_lengthSum;\n  };\n  var d3_geo_lengthSum;\n  var d3_geo_length = {\n    sphere: d3_noop,\n    point: d3_noop,\n    lineStart: d3_geo_lengthLineStart,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_lengthLineStart() {\n    var λ0, sinφ0, cosφ0;\n    d3_geo_length.point = function(λ, φ) {\n      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n      d3_geo_length.point = nextPoint;\n    };\n    d3_geo_length.lineEnd = function() {\n      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n    };\n    function nextPoint(λ, φ) {\n      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n    }\n  }\n  function d3_geo_azimuthal(scale, angle) {\n    function azimuthal(λ, φ) {\n      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);\n      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];\n    }\n    azimuthal.invert = function(x, y) {\n      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);\n      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];\n    };\n    return azimuthal;\n  }\n  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {\n    return Math.sqrt(2 / (1 + cosλcosφ));\n  }, function(ρ) {\n    return 2 * Math.asin(ρ / 2);\n  });\n  (d3.geo.azimuthalEqualArea = function() {\n    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n  }).raw = d3_geo_azimuthalEqualArea;\n  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {\n    var c = Math.acos(cosλcosφ);\n    return c && c / Math.sin(c);\n  }, d3_identity);\n  (d3.geo.azimuthalEquidistant = function() {\n    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n  }).raw = d3_geo_azimuthalEquidistant;\n  function d3_geo_conicConformal(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), t = function(φ) {\n      return Math.tan(π / 4 + φ / 2);\n    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n    if (!n) return d3_geo_mercator;\n    function forward(λ, φ) {\n      if (F > 0) {\n        if (φ < -halfπ + ε) φ = -halfπ + ε;\n      } else {\n        if (φ > halfπ - ε) φ = halfπ - ε;\n      }\n      var ρ = F / Math.pow(t(φ), n);\n      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];\n    };\n    return forward;\n  }\n  (d3.geo.conicConformal = function() {\n    return d3_geo_conic(d3_geo_conicConformal);\n  }).raw = d3_geo_conicConformal;\n  function d3_geo_conicEquidistant(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;\n    if (abs(n) < ε) return d3_geo_equirectangular;\n    function forward(λ, φ) {\n      var ρ = G - φ;\n      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = G - y;\n      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEquidistant = function() {\n    return d3_geo_conic(d3_geo_conicEquidistant);\n  }).raw = d3_geo_conicEquidistant;\n  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / cosλcosφ;\n  }, Math.atan);\n  (d3.geo.gnomonic = function() {\n    return d3_geo_projection(d3_geo_gnomonic);\n  }).raw = d3_geo_gnomonic;\n  function d3_geo_mercator(λ, φ) {\n    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];\n  }\n  d3_geo_mercator.invert = function(x, y) {\n    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];\n  };\n  function d3_geo_mercatorProjection(project) {\n    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;\n    m.scale = function() {\n      var v = scale.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.translate = function() {\n      var v = translate.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.clipExtent = function(_) {\n      var v = clipExtent.apply(m, arguments);\n      if (v === m) {\n        if (clipAuto = _ == null) {\n          var k = π * scale(), t = translate();\n          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);\n        }\n      } else if (clipAuto) {\n        v = null;\n      }\n      return v;\n    };\n    return m.clipExtent(null);\n  }\n  (d3.geo.mercator = function() {\n    return d3_geo_mercatorProjection(d3_geo_mercator);\n  }).raw = d3_geo_mercator;\n  var d3_geo_orthographic = d3_geo_azimuthal(function() {\n    return 1;\n  }, Math.asin);\n  (d3.geo.orthographic = function() {\n    return d3_geo_projection(d3_geo_orthographic);\n  }).raw = d3_geo_orthographic;\n  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / (1 + cosλcosφ);\n  }, function(ρ) {\n    return 2 * Math.atan(ρ);\n  });\n  (d3.geo.stereographic = function() {\n    return d3_geo_projection(d3_geo_stereographic);\n  }).raw = d3_geo_stereographic;\n  function d3_geo_transverseMercator(λ, φ) {\n    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];\n  }\n  d3_geo_transverseMercator.invert = function(x, y) {\n    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];\n  };\n  (d3.geo.transverseMercator = function() {\n    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n    projection.center = function(_) {\n      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);\n    };\n    projection.rotate = function(_) {\n      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), \n      [ _[0], _[1], _[2] - 90 ]);\n    };\n    return rotate([ 0, 0, 90 ]);\n  }).raw = d3_geo_transverseMercator;\n  d3.geom = {};\n  function d3_geom_pointX(d) {\n    return d[0];\n  }\n  function d3_geom_pointY(d) {\n    return d[1];\n  }\n  d3.geom.hull = function(vertices) {\n    var x = d3_geom_pointX, y = d3_geom_pointY;\n    if (arguments.length) return hull(vertices);\n    function hull(data) {\n      if (data.length < 3) return [];\n      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];\n      for (i = 0; i < n; i++) {\n        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);\n      }\n      points.sort(d3_geom_hullOrder);\n      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);\n      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);\n      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);\n      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);\n      return polygon;\n    }\n    hull.x = function(_) {\n      return arguments.length ? (x = _, hull) : x;\n    };\n    hull.y = function(_) {\n      return arguments.length ? (y = _, hull) : y;\n    };\n    return hull;\n  };\n  function d3_geom_hullUpper(points) {\n    var n = points.length, hull = [ 0, 1 ], hs = 2;\n    for (var i = 2; i < n; i++) {\n      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;\n      hull[hs++] = i;\n    }\n    return hull.slice(0, hs);\n  }\n  function d3_geom_hullOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n  d3.geom.polygon = function(coordinates) {\n    d3_subclass(coordinates, d3_geom_polygonPrototype);\n    return coordinates;\n  };\n  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n  d3_geom_polygonPrototype.area = function() {\n    var i = -1, n = this.length, a, b = this[n - 1], area = 0;\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n    return area * .5;\n  };\n  d3_geom_polygonPrototype.centroid = function(k) {\n    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;\n    if (!arguments.length) k = -1 / (6 * this.area());\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n    return [ x * k, y * k ];\n  };\n  d3_geom_polygonPrototype.clip = function(subject) {\n    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n    while (++i < n) {\n      input = subject.slice();\n      subject.length = 0;\n      b = this[i];\n      c = input[(m = input.length - closed) - 1];\n      j = -1;\n      while (++j < m) {\n        d = input[j];\n        if (d3_geom_polygonInside(d, a, b)) {\n          if (!d3_geom_polygonInside(c, a, b)) {\n            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n          }\n          subject.push(d);\n        } else if (d3_geom_polygonInside(c, a, b)) {\n          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n        }\n        c = d;\n      }\n      if (closed) subject.push(subject[0]);\n      a = b;\n    }\n    return subject;\n  };\n  function d3_geom_polygonInside(p, a, b) {\n    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);\n  }\n  function d3_geom_polygonIntersect(c, d, a, b) {\n    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n    return [ x1 + ua * x21, y1 + ua * y21 ];\n  }\n  function d3_geom_polygonClosed(coordinates) {\n    var a = coordinates[0], b = coordinates[coordinates.length - 1];\n    return !(a[0] - b[0] || a[1] - b[1]);\n  }\n  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n  function d3_geom_voronoiBeach() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.edge = this.site = this.circle = null;\n  }\n  function d3_geom_voronoiCreateBeach(site) {\n    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n    beach.site = site;\n    return beach;\n  }\n  function d3_geom_voronoiDetachBeach(beach) {\n    d3_geom_voronoiDetachCircle(beach);\n    d3_geom_voronoiBeaches.remove(beach);\n    d3_geom_voronoiBeachPool.push(beach);\n    d3_geom_voronoiRedBlackNode(beach);\n  }\n  function d3_geom_voronoiRemoveBeach(beach) {\n    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {\n      x: x,\n      y: y\n    }, previous = beach.P, next = beach.N, disappearing = [ beach ];\n    d3_geom_voronoiDetachBeach(beach);\n    var lArc = previous;\n    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      d3_geom_voronoiDetachBeach(lArc);\n      lArc = previous;\n    }\n    disappearing.unshift(lArc);\n    d3_geom_voronoiDetachCircle(lArc);\n    var rArc = next;\n    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      d3_geom_voronoiDetachBeach(rArc);\n      rArc = next;\n    }\n    disappearing.push(rArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var nArcs = disappearing.length, iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiAddBeach(site) {\n    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;\n    while (node) {\n      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n      if (dxl > ε) node = node.L; else {\n        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n        if (dxr > ε) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -ε) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -ε) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n    var newArc = d3_geom_voronoiCreateBeach(site);\n    d3_geom_voronoiBeaches.insert(lArc, newArc);\n    if (!lArc && !rArc) return;\n    if (lArc === rArc) {\n      d3_geom_voronoiDetachCircle(lArc);\n      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n      d3_geom_voronoiBeaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      d3_geom_voronoiAttachCircle(lArc);\n      d3_geom_voronoiAttachCircle(rArc);\n      return;\n    }\n    if (!rArc) {\n      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      return;\n    }\n    d3_geom_voronoiDetachCircle(lArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n      x: (cy * hb - by * hc) / d + ax,\n      y: (bx * hc - cx * hb) / d + ay\n    };\n    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;\n    if (!pby2) return rfocx;\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n    site = lArc.site;\n    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;\n    if (!plby2) return lfocx;\n    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n    return (rfocx + lfocx) / 2;\n  }\n  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site.y === directrix ? site.x : Infinity;\n  }\n  function d3_geom_voronoiCell(site) {\n    this.site = site;\n    this.edges = [];\n  }\n  d3_geom_voronoiCell.prototype.prepare = function() {\n    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;\n    while (iHalfEdge--) {\n      edge = halfEdges[iHalfEdge].edge;\n      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n    }\n    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n    return halfEdges.length;\n  };\n  function d3_geom_voronoiCloseCells(extent) {\n    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n    while (iCell--) {\n      cell = cells[iCell];\n      if (!cell || !cell.prepare()) continue;\n      halfEdges = cell.edges;\n      nHalfEdges = halfEdges.length;\n      iHalfEdge = 0;\n      while (iHalfEdge < nHalfEdges) {\n        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {\n          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n            x: x0,\n            y: abs(x2 - x0) < ε ? y2 : y1\n          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {\n            x: abs(y2 - y1) < ε ? x2 : x1,\n            y: y1\n          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {\n            x: x1,\n            y: abs(x2 - x1) < ε ? y2 : y0\n          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {\n            x: abs(y2 - y0) < ε ? x2 : x0,\n            y: y0\n          } : null), cell.site, null));\n          ++nHalfEdges;\n        }\n      }\n    }\n  }\n  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n    return b.angle - a.angle;\n  }\n  function d3_geom_voronoiCircle() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.x = this.y = this.arc = this.site = this.cy = null;\n  }\n  function d3_geom_voronoiAttachCircle(arc) {\n    var lArc = arc.P, rArc = arc.N;\n    if (!lArc || !rArc) return;\n    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\n    if (lSite === rSite) return;\n    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -ε2) return;\n    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = cy + Math.sqrt(x * x + y * y);\n    circle.cy = cy;\n    arc.circle = circle;\n    var before = null, node = d3_geom_voronoiCircles._;\n    while (node) {\n      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n        if (node.L) node = node.L; else {\n          before = node.P;\n          break;\n        }\n      } else {\n        if (node.R) node = node.R; else {\n          before = node;\n          break;\n        }\n      }\n    }\n    d3_geom_voronoiCircles.insert(before, circle);\n    if (!before) d3_geom_voronoiFirstCircle = circle;\n  }\n  function d3_geom_voronoiDetachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n      d3_geom_voronoiCircles.remove(circle);\n      d3_geom_voronoiCirclePool.push(circle);\n      d3_geom_voronoiRedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n  function d3_geom_voronoiClipEdges(extent) {\n    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n    while (i--) {\n      e = edges[i];\n      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {\n        e.a = e.b = null;\n        edges.splice(i, 1);\n      }\n    }\n  }\n  function d3_geom_voronoiConnectEdge(edge, extent) {\n    var vb = edge.b;\n    if (vb) return true;\n    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!va) va = {\n          x: fx,\n          y: y0\n        }; else if (va.y >= y1) return;\n        vb = {\n          x: fx,\n          y: y1\n        };\n      } else {\n        if (!va) va = {\n          x: fx,\n          y: y1\n        }; else if (va.y < y0) return;\n        vb = {\n          x: fx,\n          y: y0\n        };\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!va) va = {\n            x: (y0 - fb) / fm,\n            y: y0\n          }; else if (va.y >= y1) return;\n          vb = {\n            x: (y1 - fb) / fm,\n            y: y1\n          };\n        } else {\n          if (!va) va = {\n            x: (y1 - fb) / fm,\n            y: y1\n          }; else if (va.y < y0) return;\n          vb = {\n            x: (y0 - fb) / fm,\n            y: y0\n          };\n        }\n      } else {\n        if (ly < ry) {\n          if (!va) va = {\n            x: x0,\n            y: fm * x0 + fb\n          }; else if (va.x >= x1) return;\n          vb = {\n            x: x1,\n            y: fm * x1 + fb\n          };\n        } else {\n          if (!va) va = {\n            x: x1,\n            y: fm * x1 + fb\n          }; else if (va.x < x0) return;\n          vb = {\n            x: x0,\n            y: fm * x0 + fb\n          };\n        }\n      }\n    }\n    edge.a = va;\n    edge.b = vb;\n    return true;\n  }\n  function d3_geom_voronoiEdge(lSite, rSite) {\n    this.l = lSite;\n    this.r = rSite;\n    this.a = this.b = null;\n  }\n  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n    d3_geom_voronoiEdges.push(edge);\n    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n    return edge;\n  }\n  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, null);\n    edge.a = va;\n    edge.b = vb;\n    d3_geom_voronoiEdges.push(edge);\n    return edge;\n  }\n  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n    if (!edge.a && !edge.b) {\n      edge.a = vertex;\n      edge.l = lSite;\n      edge.r = rSite;\n    } else if (edge.l === rSite) {\n      edge.b = vertex;\n    } else {\n      edge.a = vertex;\n    }\n  }\n  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n    var va = edge.a, vb = edge.b;\n    this.edge = edge;\n    this.site = lSite;\n    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n  }\n  d3_geom_voronoiHalfEdge.prototype = {\n    start: function() {\n      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n    },\n    end: function() {\n      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n    }\n  };\n  function d3_geom_voronoiRedBlackTree() {\n    this._ = null;\n  }\n  function d3_geom_voronoiRedBlackNode(node) {\n    node.U = node.C = node.L = node.R = node.P = node.N = null;\n  }\n  d3_geom_voronoiRedBlackTree.prototype = {\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = d3_geom_voronoiRedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              d3_geom_voronoiRedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n      var parent = node.U, sibling, left = node.L, right = node.R, next, red;\n      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);\n      if (parent) {\n        if (parent.L === node) parent.L = next; else parent.R = next;\n      } else {\n        this._ = next;\n      }\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) {\n        node.C = false;\n        return;\n      }\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n      if (node) node.C = false;\n    }\n  };\n  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n    var p = node, q = node.R, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n    var p = node, q = node.L, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n  function d3_geom_voronoiRedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n  function d3_geom_voronoi(sites, bbox) {\n    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;\n    d3_geom_voronoiEdges = [];\n    d3_geom_voronoiCells = new Array(sites.length);\n    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n    while (true) {\n      circle = d3_geom_voronoiFirstCircle;\n      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {\n        if (site.x !== x0 || site.y !== y0) {\n          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n          d3_geom_voronoiAddBeach(site);\n          x0 = site.x, y0 = site.y;\n        }\n        site = sites.pop();\n      } else if (circle) {\n        d3_geom_voronoiRemoveBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n    var diagram = {\n      cells: d3_geom_voronoiCells,\n      edges: d3_geom_voronoiEdges\n    };\n    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n    return diagram;\n  }\n  function d3_geom_voronoiVertexOrder(a, b) {\n    return b.y - a.y || b.x - a.x;\n  }\n  d3.geom.voronoi = function(points) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;\n    if (points) return voronoi(points);\n    function voronoi(data) {\n      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {\n        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {\n          var s = e.start();\n          return [ s.x, s.y ];\n        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n        polygon.point = data[i];\n      });\n      return polygons;\n    }\n    function sites(data) {\n      return data.map(function(d, i) {\n        return {\n          x: Math.round(fx(d, i) / ε) * ε,\n          y: Math.round(fy(d, i) / ε) * ε,\n          i: i\n        };\n      });\n    }\n    voronoi.links = function(data) {\n      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {\n        return edge.l && edge.r;\n      }).map(function(edge) {\n        return {\n          source: data[edge.l.i],\n          target: data[edge.r.i]\n        };\n      });\n    };\n    voronoi.triangles = function(data) {\n      var triangles = [];\n      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {\n        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n        while (++j < m) {\n          e0 = e1;\n          s0 = s1;\n          e1 = edges[j].edge;\n          s1 = e1.l === site ? e1.r : e1.l;\n          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {\n            triangles.push([ data[i], data[s0.i], data[s1.i] ]);\n          }\n        }\n      });\n      return triangles;\n    };\n    voronoi.x = function(_) {\n      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n    };\n    voronoi.y = function(_) {\n      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n    };\n    voronoi.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n      return voronoi;\n    };\n    voronoi.size = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];\n      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);\n    };\n    return voronoi;\n  };\n  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];\n  function d3_geom_voronoiTriangleArea(a, b, c) {\n    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n  }\n  d3.geom.delaunay = function(vertices) {\n    return d3.geom.voronoi().triangles(vertices);\n  };\n  d3.geom.quadtree = function(points, x1, y1, x2, y2) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, compat;\n    if (compat = arguments.length) {\n      x = d3_geom_quadtreeCompatX;\n      y = d3_geom_quadtreeCompatY;\n      if (compat === 3) {\n        y2 = y1;\n        x2 = x1;\n        y1 = x1 = 0;\n      }\n      return quadtree(points);\n    }\n    function quadtree(data) {\n      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;\n      if (x1 != null) {\n        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n      } else {\n        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n        xs = [], ys = [];\n        n = data.length;\n        if (compat) for (i = 0; i < n; ++i) {\n          d = data[i];\n          if (d.x < x1_) x1_ = d.x;\n          if (d.y < y1_) y1_ = d.y;\n          if (d.x > x2_) x2_ = d.x;\n          if (d.y > y2_) y2_ = d.y;\n          xs.push(d.x);\n          ys.push(d.y);\n        } else for (i = 0; i < n; ++i) {\n          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);\n          if (x_ < x1_) x1_ = x_;\n          if (y_ < y1_) y1_ = y_;\n          if (x_ > x2_) x2_ = x_;\n          if (y_ > y2_) y2_ = y_;\n          xs.push(x_);\n          ys.push(y_);\n        }\n      }\n      var dx = x2_ - x1_, dy = y2_ - y1_;\n      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;\n      function insert(n, d, x, y, x1, y1, x2, y2) {\n        if (isNaN(x) || isNaN(y)) return;\n        if (n.leaf) {\n          var nx = n.x, ny = n.y;\n          if (nx != null) {\n            if (abs(nx - x) + abs(ny - y) < .01) {\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            } else {\n              var nPoint = n.point;\n              n.x = n.y = n.point = null;\n              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            }\n          } else {\n            n.x = x, n.y = y, n.point = d;\n          }\n        } else {\n          insertChild(n, d, x, y, x1, y1, x2, y2);\n        }\n      }\n      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;\n        n.leaf = false;\n        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n        if (right) x1 = xm; else x2 = xm;\n        if (below) y1 = ym; else y2 = ym;\n        insert(n, d, x, y, x1, y1, x2, y2);\n      }\n      var root = d3_geom_quadtreeNode();\n      root.add = function(d) {\n        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n      };\n      root.visit = function(f) {\n        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n      };\n      root.find = function(point) {\n        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n      };\n      i = -1;\n      if (x1 == null) {\n        while (++i < n) {\n          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n        }\n        --i;\n      } else data.forEach(root.add);\n      xs = ys = data = d = null;\n      return root;\n    }\n    quadtree.x = function(_) {\n      return arguments.length ? (x = _, quadtree) : x;\n    };\n    quadtree.y = function(_) {\n      return arguments.length ? (y = _, quadtree) : y;\n    };\n    quadtree.extent = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], \n      y2 = +_[1][1];\n      return quadtree;\n    };\n    quadtree.size = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n      return quadtree;\n    };\n    return quadtree;\n  };\n  function d3_geom_quadtreeCompatX(d) {\n    return d.x;\n  }\n  function d3_geom_quadtreeCompatY(d) {\n    return d.y;\n  }\n  function d3_geom_quadtreeNode() {\n    return {\n      leaf: true,\n      nodes: [],\n      point: null,\n      x: null,\n      y: null\n    };\n  }\n  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n    if (!f(node, x1, y1, x2, y2)) {\n      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;\n      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n    }\n  }\n  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n    var minDistance2 = Infinity, closestPoint;\n    (function find(node, x1, y1, x2, y2) {\n      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\n      if (point = node.point) {\n        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;\n        if (distance2 < minDistance2) {\n          var distance = Math.sqrt(minDistance2 = distance2);\n          x0 = x - distance, y0 = y - distance;\n          x3 = x + distance, y3 = y + distance;\n          closestPoint = point;\n        }\n      }\n      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;\n      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {\n        if (node = children[i & 3]) switch (i & 3) {\n         case 0:\n          find(node, x1, y1, xm, ym);\n          break;\n\n         case 1:\n          find(node, xm, y1, x2, ym);\n          break;\n\n         case 2:\n          find(node, x1, ym, xm, y2);\n          break;\n\n         case 3:\n          find(node, xm, ym, x2, y2);\n          break;\n        }\n      }\n    })(root, x0, y0, x3, y3);\n    return closestPoint;\n  }\n  d3.interpolateRgb = d3_interpolateRgb;\n  function d3_interpolateRgb(a, b) {\n    a = d3.rgb(a);\n    b = d3.rgb(b);\n    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;\n    return function(t) {\n      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n    };\n  }\n  d3.interpolateObject = d3_interpolateObject;\n  function d3_interpolateObject(a, b) {\n    var i = {}, c = {}, k;\n    for (k in a) {\n      if (k in b) {\n        i[k] = d3_interpolate(a[k], b[k]);\n      } else {\n        c[k] = a[k];\n      }\n    }\n    for (k in b) {\n      if (!(k in a)) {\n        c[k] = b[k];\n      }\n    }\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n  d3.interpolateNumber = d3_interpolateNumber;\n  function d3_interpolateNumber(a, b) {\n    a = +a, b = +b;\n    return function(t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n  d3.interpolateString = d3_interpolateString;\n  function d3_interpolateString(a, b) {\n    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n    a = a + \"\", b = b + \"\";\n    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) {\n        if (s[i]) s[i] += bm; else s[++i] = bm;\n      } else {\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: d3_interpolateNumber(am, bm)\n        });\n      }\n      bi = d3_interpolate_numberB.lastIndex;\n    }\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; else s[++i] = bs;\n    }\n    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {\n      return b(t) + \"\";\n    }) : function() {\n      return b;\n    } : (b = q.length, function(t) {\n      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    });\n  }\n  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \"g\");\n  d3.interpolate = d3_interpolate;\n  function d3_interpolate(a, b) {\n    var i = d3.interpolators.length, f;\n    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;\n    return f;\n  }\n  d3.interpolators = [ function(a, b) {\n    var t = typeof b;\n    return (t === \"string\" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\\(|hsl\\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \"object\" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n  } ];\n  d3.interpolateArray = d3_interpolateArray;\n  function d3_interpolateArray(a, b) {\n    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;\n    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));\n    for (;i < na; ++i) c[i] = a[i];\n    for (;i < nb; ++i) c[i] = b[i];\n    return function(t) {\n      for (i = 0; i < n0; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n  var d3_ease_default = function() {\n    return d3_identity;\n  };\n  var d3_ease = d3.map({\n    linear: d3_ease_default,\n    poly: d3_ease_poly,\n    quad: function() {\n      return d3_ease_quad;\n    },\n    cubic: function() {\n      return d3_ease_cubic;\n    },\n    sin: function() {\n      return d3_ease_sin;\n    },\n    exp: function() {\n      return d3_ease_exp;\n    },\n    circle: function() {\n      return d3_ease_circle;\n    },\n    elastic: d3_ease_elastic,\n    back: d3_ease_back,\n    bounce: function() {\n      return d3_ease_bounce;\n    }\n  });\n  var d3_ease_mode = d3.map({\n    \"in\": d3_identity,\n    out: d3_ease_reverse,\n    \"in-out\": d3_ease_reflect,\n    \"out-in\": function(f) {\n      return d3_ease_reflect(d3_ease_reverse(f));\n    }\n  });\n  d3.ease = function(name) {\n    var i = name.indexOf(\"-\"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : \"in\";\n    t = d3_ease.get(t) || d3_ease_default;\n    m = d3_ease_mode.get(m) || d3_identity;\n    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n  };\n  function d3_ease_clamp(f) {\n    return function(t) {\n      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);\n    };\n  }\n  function d3_ease_reverse(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n  function d3_ease_reflect(f) {\n    return function(t) {\n      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n    };\n  }\n  function d3_ease_quad(t) {\n    return t * t;\n  }\n  function d3_ease_cubic(t) {\n    return t * t * t;\n  }\n  function d3_ease_cubicInOut(t) {\n    if (t <= 0) return 0;\n    if (t >= 1) return 1;\n    var t2 = t * t, t3 = t2 * t;\n    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n  }\n  function d3_ease_poly(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n  function d3_ease_sin(t) {\n    return 1 - Math.cos(t * halfπ);\n  }\n  function d3_ease_exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  function d3_ease_circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  function d3_ease_elastic(a, p) {\n    var s;\n    if (arguments.length < 2) p = .45;\n    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n    };\n  }\n  function d3_ease_back(s) {\n    if (!s) s = 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n  function d3_ease_bounce(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }\n  d3.interpolateHcl = d3_interpolateHcl;\n  function d3_interpolateHcl(a, b) {\n    a = d3.hcl(a);\n    b = d3.hcl(b);\n    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;\n    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateHsl = d3_interpolateHsl;\n  function d3_interpolateHsl(a, b) {\n    a = d3.hsl(a);\n    b = d3.hsl(b);\n    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;\n    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateLab = d3_interpolateLab;\n  function d3_interpolateLab(a, b) {\n    a = d3.lab(a);\n    b = d3.lab(b);\n    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;\n    return function(t) {\n      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";\n    };\n  }\n  d3.interpolateRound = d3_interpolateRound;\n  function d3_interpolateRound(a, b) {\n    b -= a;\n    return function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n  d3.transform = function(string) {\n    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");\n    return (d3.transform = function(string) {\n      if (string != null) {\n        g.setAttribute(\"transform\", string);\n        var t = g.transform.baseVal.consolidate();\n      }\n      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n    })(string);\n  };\n  function d3_transform(m) {\n    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n    if (r0[0] * r1[1] < r1[0] * r0[1]) {\n      r0[0] *= -1;\n      r0[1] *= -1;\n      kx *= -1;\n      kz *= -1;\n    }\n    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n    this.translate = [ m.e, m.f ];\n    this.scale = [ kx, ky ];\n    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n  }\n  d3_transform.prototype.toString = function() {\n    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n  };\n  function d3_transformDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n  function d3_transformNormalize(a) {\n    var k = Math.sqrt(d3_transformDot(a, a));\n    if (k) {\n      a[0] /= k;\n      a[1] /= k;\n    }\n    return k;\n  }\n  function d3_transformCombine(a, b, k) {\n    a[0] += k * b[0];\n    a[1] += k * b[1];\n    return a;\n  }\n  var d3_transformIdentity = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0\n  };\n  d3.interpolateTransform = d3_interpolateTransform;\n  function d3_interpolateTransformPop(s) {\n    return s.length ? s.pop() + \",\" : \"\";\n  }\n  function d3_interpolateTranslate(ta, tb, s, q) {\n    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {\n      var i = s.push(\"translate(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ta[0], tb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ta[1], tb[1])\n      });\n    } else if (tb[0] || tb[1]) {\n      s.push(\"translate(\" + tb + \")\");\n    }\n  }\n  function d3_interpolateRotate(ra, rb, s, q) {\n    if (ra !== rb) {\n      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"rotate(\", null, \")\") - 2,\n        x: d3_interpolateNumber(ra, rb)\n      });\n    } else if (rb) {\n      s.push(d3_interpolateTransformPop(s) + \"rotate(\" + rb + \")\");\n    }\n  }\n  function d3_interpolateSkew(wa, wb, s, q) {\n    if (wa !== wb) {\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"skewX(\", null, \")\") - 2,\n        x: d3_interpolateNumber(wa, wb)\n      });\n    } else if (wb) {\n      s.push(d3_interpolateTransformPop(s) + \"skewX(\" + wb + \")\");\n    }\n  }\n  function d3_interpolateScale(ka, kb, s, q) {\n    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {\n      var i = s.push(d3_interpolateTransformPop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ka[0], kb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ka[1], kb[1])\n      });\n    } else if (kb[0] !== 1 || kb[1] !== 1) {\n      s.push(d3_interpolateTransformPop(s) + \"scale(\" + kb + \")\");\n    }\n  }\n  function d3_interpolateTransform(a, b) {\n    var s = [], q = [];\n    a = d3.transform(a), b = d3.transform(b);\n    d3_interpolateTranslate(a.translate, b.translate, s, q);\n    d3_interpolateRotate(a.rotate, b.rotate, s, q);\n    d3_interpolateSkew(a.skew, b.skew, s, q);\n    d3_interpolateScale(a.scale, b.scale, s, q);\n    a = b = null;\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  }\n  function d3_uninterpolateNumber(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return (x - a) / b;\n    };\n  }\n  function d3_uninterpolateClamp(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return Math.max(0, Math.min(1, (x - a) / b));\n    };\n  }\n  d3.layout = {};\n  d3.layout.bundle = function() {\n    return function(links) {\n      var paths = [], i = -1, n = links.length;\n      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));\n      return paths;\n    };\n  };\n  function d3_layout_bundlePath(link) {\n    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n    while (start !== lca) {\n      start = start.parent;\n      points.push(start);\n    }\n    var k = points.length;\n    while (end !== lca) {\n      points.splice(k, 0, end);\n      end = end.parent;\n    }\n    return points;\n  }\n  function d3_layout_bundleAncestors(node) {\n    var ancestors = [], parent = node.parent;\n    while (parent != null) {\n      ancestors.push(node);\n      node = parent;\n      parent = parent.parent;\n    }\n    ancestors.push(node);\n    return ancestors;\n  }\n  function d3_layout_bundleLeastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n    while (aNode === bNode) {\n      sharedNode = aNode;\n      aNode = aNodes.pop();\n      bNode = bNodes.pop();\n    }\n    return sharedNode;\n  }\n  d3.layout.chord = function() {\n    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n    function relayout() {\n      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n      chords = [];\n      groups = [];\n      k = 0, i = -1;\n      while (++i < n) {\n        x = 0, j = -1;\n        while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(d3.range(n));\n        k += x;\n      }\n      if (sortGroups) {\n        groupIndex.sort(function(a, b) {\n          return sortGroups(groupSums[a], groupSums[b]);\n        });\n      }\n      if (sortSubgroups) {\n        subgroupIndex.forEach(function(d, i) {\n          d.sort(function(a, b) {\n            return sortSubgroups(matrix[i][a], matrix[i][b]);\n          });\n        });\n      }\n      k = (τ - padding * n) / k;\n      x = 0, i = -1;\n      while (++i < n) {\n        x0 = x, j = -1;\n        while (++j < n) {\n          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;\n          subgroups[di + \"-\" + dj] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: groupSums[di]\n        };\n        x += padding;\n      }\n      i = -1;\n      while (++i < n) {\n        j = i - 1;\n        while (++j < n) {\n          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value ? {\n              source: target,\n              target: source\n            } : {\n              source: source,\n              target: target\n            });\n          }\n        }\n      }\n      if (sortChords) resort();\n    }\n    function resort() {\n      chords.sort(function(a, b) {\n        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n      });\n    }\n    chord.matrix = function(x) {\n      if (!arguments.length) return matrix;\n      n = (matrix = x) && matrix.length;\n      chords = groups = null;\n      return chord;\n    };\n    chord.padding = function(x) {\n      if (!arguments.length) return padding;\n      padding = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortGroups = function(x) {\n      if (!arguments.length) return sortGroups;\n      sortGroups = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortSubgroups = function(x) {\n      if (!arguments.length) return sortSubgroups;\n      sortSubgroups = x;\n      chords = null;\n      return chord;\n    };\n    chord.sortChords = function(x) {\n      if (!arguments.length) return sortChords;\n      sortChords = x;\n      if (chords) resort();\n      return chord;\n    };\n    chord.chords = function() {\n      if (!chords) relayout();\n      return chords;\n    };\n    chord.groups = function() {\n      if (!groups) relayout();\n      return groups;\n    };\n    return chord;\n  };\n  d3.layout.force = function() {\n    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n    function repulse(node) {\n      return function(quad, x1, _, x2) {\n        if (quad.point !== node) {\n          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;\n          if (dw * dw / theta2 < dn) {\n            if (dn < chargeDistance2) {\n              var k = quad.charge / dn;\n              node.px -= dx * k;\n              node.py -= dy * k;\n            }\n            return true;\n          }\n          if (quad.point && dn && dn < chargeDistance2) {\n            var k = quad.pointCharge / dn;\n            node.px -= dx * k;\n            node.py -= dy * k;\n          }\n        }\n        return !quad.charge;\n      };\n    }\n    force.tick = function() {\n      if ((alpha *= .99) < .005) {\n        timer = null;\n        event.end({\n          type: \"end\",\n          alpha: alpha = 0\n        });\n        return true;\n      }\n      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        s = o.source;\n        t = o.target;\n        x = t.x - s.x;\n        y = t.y - s.y;\n        if (l = x * x + y * y) {\n          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n          x *= l;\n          y *= l;\n          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);\n          t.y -= y * k;\n          s.x += x * (k = 1 - k);\n          s.y += y * k;\n        }\n      }\n      if (k = alpha * gravity) {\n        x = size[0] / 2;\n        y = size[1] / 2;\n        i = -1;\n        if (k) while (++i < n) {\n          o = nodes[i];\n          o.x += (x - o.x) * k;\n          o.y += (y - o.y) * k;\n        }\n      }\n      if (charge) {\n        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n        i = -1;\n        while (++i < n) {\n          if (!(o = nodes[i]).fixed) {\n            q.visit(repulse(o));\n          }\n        }\n      }\n      i = -1;\n      while (++i < n) {\n        o = nodes[i];\n        if (o.fixed) {\n          o.x = o.px;\n          o.y = o.py;\n        } else {\n          o.x -= (o.px - (o.px = o.x)) * friction;\n          o.y -= (o.py - (o.py = o.y)) * friction;\n        }\n      }\n      event.tick({\n        type: \"tick\",\n        alpha: alpha\n      });\n    };\n    force.nodes = function(x) {\n      if (!arguments.length) return nodes;\n      nodes = x;\n      return force;\n    };\n    force.links = function(x) {\n      if (!arguments.length) return links;\n      links = x;\n      return force;\n    };\n    force.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return force;\n    };\n    force.linkDistance = function(x) {\n      if (!arguments.length) return linkDistance;\n      linkDistance = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.distance = force.linkDistance;\n    force.linkStrength = function(x) {\n      if (!arguments.length) return linkStrength;\n      linkStrength = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.friction = function(x) {\n      if (!arguments.length) return friction;\n      friction = +x;\n      return force;\n    };\n    force.charge = function(x) {\n      if (!arguments.length) return charge;\n      charge = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.chargeDistance = function(x) {\n      if (!arguments.length) return Math.sqrt(chargeDistance2);\n      chargeDistance2 = x * x;\n      return force;\n    };\n    force.gravity = function(x) {\n      if (!arguments.length) return gravity;\n      gravity = +x;\n      return force;\n    };\n    force.theta = function(x) {\n      if (!arguments.length) return Math.sqrt(theta2);\n      theta2 = x * x;\n      return force;\n    };\n    force.alpha = function(x) {\n      if (!arguments.length) return alpha;\n      x = +x;\n      if (alpha) {\n        if (x > 0) {\n          alpha = x;\n        } else {\n          timer.c = null, timer.t = NaN, timer = null;\n          event.end({\n            type: \"end\",\n            alpha: alpha = 0\n          });\n        }\n      } else if (x > 0) {\n        event.start({\n          type: \"start\",\n          alpha: alpha = x\n        });\n        timer = d3_timer(force.tick);\n      }\n      return force;\n    };\n    force.start = function() {\n      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;\n      for (i = 0; i < n; ++i) {\n        (o = nodes[i]).index = i;\n        o.weight = 0;\n      }\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        if (typeof o.source == \"number\") o.source = nodes[o.source];\n        if (typeof o.target == \"number\") o.target = nodes[o.target];\n        ++o.source.weight;\n        ++o.target.weight;\n      }\n      for (i = 0; i < n; ++i) {\n        o = nodes[i];\n        if (isNaN(o.x)) o.x = position(\"x\", w);\n        if (isNaN(o.y)) o.y = position(\"y\", h);\n        if (isNaN(o.px)) o.px = o.x;\n        if (isNaN(o.py)) o.py = o.y;\n      }\n      distances = [];\n      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n      strengths = [];\n      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n      charges = [];\n      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n      function position(dimension, size) {\n        if (!neighbors) {\n          neighbors = new Array(n);\n          for (j = 0; j < n; ++j) {\n            neighbors[j] = [];\n          }\n          for (j = 0; j < m; ++j) {\n            var o = links[j];\n            neighbors[o.source.index].push(o.target);\n            neighbors[o.target.index].push(o.source);\n          }\n        }\n        var candidates = neighbors[i], j = -1, l = candidates.length, x;\n        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;\n        return Math.random() * size;\n      }\n      return force.resume();\n    };\n    force.resume = function() {\n      return force.alpha(.1);\n    };\n    force.stop = function() {\n      return force.alpha(0);\n    };\n    force.drag = function() {\n      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n      if (!arguments.length) return drag;\n      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);\n    };\n    function dragmove(d) {\n      d.px = d3.event.x, d.py = d3.event.y;\n      force.resume();\n    }\n    return d3.rebind(force, event, \"on\");\n  };\n  function d3_layout_forceDragstart(d) {\n    d.fixed |= 2;\n  }\n  function d3_layout_forceDragend(d) {\n    d.fixed &= ~6;\n  }\n  function d3_layout_forceMouseover(d) {\n    d.fixed |= 4;\n    d.px = d.x, d.py = d.y;\n  }\n  function d3_layout_forceMouseout(d) {\n    d.fixed &= ~4;\n  }\n  function d3_layout_forceAccumulate(quad, alpha, charges) {\n    var cx = 0, cy = 0;\n    quad.charge = 0;\n    if (!quad.leaf) {\n      var nodes = quad.nodes, n = nodes.length, i = -1, c;\n      while (++i < n) {\n        c = nodes[i];\n        if (c == null) continue;\n        d3_layout_forceAccumulate(c, alpha, charges);\n        quad.charge += c.charge;\n        cx += c.charge * c.cx;\n        cy += c.charge * c.cy;\n      }\n    }\n    if (quad.point) {\n      if (!quad.leaf) {\n        quad.point.x += Math.random() - .5;\n        quad.point.y += Math.random() - .5;\n      }\n      var k = alpha * charges[quad.point.index];\n      quad.charge += quad.pointCharge = k;\n      cx += k * quad.point.x;\n      cy += k * quad.point.y;\n    }\n    quad.cx = cx / quad.charge;\n    quad.cy = cy / quad.charge;\n  }\n  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;\n  d3.layout.hierarchy = function() {\n    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;\n    function hierarchy(root) {\n      var stack = [ root ], nodes = [], node;\n      root.depth = 0;\n      while ((node = stack.pop()) != null) {\n        nodes.push(node);\n        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {\n          var n, childs, child;\n          while (--n >= 0) {\n            stack.push(child = childs[n]);\n            child.parent = node;\n            child.depth = node.depth + 1;\n          }\n          if (value) node.value = 0;\n          node.children = childs;\n        } else {\n          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          delete node.children;\n        }\n      }\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var childs, parent;\n        if (sort && (childs = node.children)) childs.sort(sort);\n        if (value && (parent = node.parent)) parent.value += node.value;\n      });\n      return nodes;\n    }\n    hierarchy.sort = function(x) {\n      if (!arguments.length) return sort;\n      sort = x;\n      return hierarchy;\n    };\n    hierarchy.children = function(x) {\n      if (!arguments.length) return children;\n      children = x;\n      return hierarchy;\n    };\n    hierarchy.value = function(x) {\n      if (!arguments.length) return value;\n      value = x;\n      return hierarchy;\n    };\n    hierarchy.revalue = function(root) {\n      if (value) {\n        d3_layout_hierarchyVisitBefore(root, function(node) {\n          if (node.children) node.value = 0;\n        });\n        d3_layout_hierarchyVisitAfter(root, function(node) {\n          var parent;\n          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          if (parent = node.parent) parent.value += node.value;\n        });\n      }\n      return root;\n    };\n    return hierarchy;\n  };\n  function d3_layout_hierarchyRebind(object, hierarchy) {\n    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");\n    object.nodes = object;\n    object.links = d3_layout_hierarchyLinks;\n    return object;\n  }\n  function d3_layout_hierarchyVisitBefore(node, callback) {\n    var nodes = [ node ];\n    while ((node = nodes.pop()) != null) {\n      callback(node);\n      if ((children = node.children) && (n = children.length)) {\n        var n, children;\n        while (--n >= 0) nodes.push(children[n]);\n      }\n    }\n  }\n  function d3_layout_hierarchyVisitAfter(node, callback) {\n    var nodes = [ node ], nodes2 = [];\n    while ((node = nodes.pop()) != null) {\n      nodes2.push(node);\n      if ((children = node.children) && (n = children.length)) {\n        var i = -1, n, children;\n        while (++i < n) nodes.push(children[i]);\n      }\n    }\n    while ((node = nodes2.pop()) != null) {\n      callback(node);\n    }\n  }\n  function d3_layout_hierarchyChildren(d) {\n    return d.children;\n  }\n  function d3_layout_hierarchyValue(d) {\n    return d.value;\n  }\n  function d3_layout_hierarchySort(a, b) {\n    return b.value - a.value;\n  }\n  function d3_layout_hierarchyLinks(nodes) {\n    return d3.merge(nodes.map(function(parent) {\n      return (parent.children || []).map(function(child) {\n        return {\n          source: parent,\n          target: child\n        };\n      });\n    }));\n  }\n  d3.layout.partition = function() {\n    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];\n    function position(node, x, dx, dy) {\n      var children = node.children;\n      node.x = x;\n      node.y = node.depth * dy;\n      node.dx = dx;\n      node.dy = dy;\n      if (children && (n = children.length)) {\n        var i = -1, n, c, d;\n        dx = node.value ? dx / node.value : 0;\n        while (++i < n) {\n          position(c = children[i], x, d = c.value * dx, dy);\n          x += d;\n        }\n      }\n    }\n    function depth(node) {\n      var children = node.children, d = 0;\n      if (children && (n = children.length)) {\n        var i = -1, n;\n        while (++i < n) d = Math.max(d, depth(children[i]));\n      }\n      return 1 + d;\n    }\n    function partition(d, i) {\n      var nodes = hierarchy.call(this, d, i);\n      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n      return nodes;\n    }\n    partition.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return partition;\n    };\n    return d3_layout_hierarchyRebind(partition, hierarchy);\n  };\n  d3.layout.pie = function() {\n    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;\n    function pie(data) {\n      var n = data.length, values = data.map(function(d, i) {\n        return +value.call(pie, d, i);\n      }), a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \"function\" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;\n      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {\n        return values[j] - values[i];\n      } : function(i, j) {\n        return sort(data[i], data[j]);\n      });\n      index.forEach(function(i) {\n        arcs[i] = {\n          data: data[i],\n          value: v = values[i],\n          startAngle: a,\n          endAngle: a += v * k + pa,\n          padAngle: p\n        };\n      });\n      return arcs;\n    }\n    pie.value = function(_) {\n      if (!arguments.length) return value;\n      value = _;\n      return pie;\n    };\n    pie.sort = function(_) {\n      if (!arguments.length) return sort;\n      sort = _;\n      return pie;\n    };\n    pie.startAngle = function(_) {\n      if (!arguments.length) return startAngle;\n      startAngle = _;\n      return pie;\n    };\n    pie.endAngle = function(_) {\n      if (!arguments.length) return endAngle;\n      endAngle = _;\n      return pie;\n    };\n    pie.padAngle = function(_) {\n      if (!arguments.length) return padAngle;\n      padAngle = _;\n      return pie;\n    };\n    return pie;\n  };\n  var d3_layout_pieSortByValue = {};\n  d3.layout.stack = function() {\n    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n    function stack(data, index) {\n      if (!(n = data.length)) return data;\n      var series = data.map(function(d, i) {\n        return values.call(stack, d, i);\n      });\n      var points = series.map(function(d) {\n        return d.map(function(v, i) {\n          return [ x.call(stack, v, i), y.call(stack, v, i) ];\n        });\n      });\n      var orders = order.call(stack, points, index);\n      series = d3.permute(series, orders);\n      points = d3.permute(points, orders);\n      var offsets = offset.call(stack, points, index);\n      var m = series[0].length, n, i, j, o;\n      for (j = 0; j < m; ++j) {\n        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n        for (i = 1; i < n; ++i) {\n          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n        }\n      }\n      return data;\n    }\n    stack.values = function(x) {\n      if (!arguments.length) return values;\n      values = x;\n      return stack;\n    };\n    stack.order = function(x) {\n      if (!arguments.length) return order;\n      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n      return stack;\n    };\n    stack.offset = function(x) {\n      if (!arguments.length) return offset;\n      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n      return stack;\n    };\n    stack.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      return stack;\n    };\n    stack.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      return stack;\n    };\n    stack.out = function(z) {\n      if (!arguments.length) return out;\n      out = z;\n      return stack;\n    };\n    return stack;\n  };\n  function d3_layout_stackX(d) {\n    return d.x;\n  }\n  function d3_layout_stackY(d) {\n    return d.y;\n  }\n  function d3_layout_stackOut(d, y0, y) {\n    d.y0 = y0;\n    d.y = y;\n  }\n  var d3_layout_stackOrders = d3.map({\n    \"inside-out\": function(data) {\n      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n        return max[a] - max[b];\n      }), top = 0, bottom = 0, tops = [], bottoms = [];\n      for (i = 0; i < n; ++i) {\n        j = index[i];\n        if (top < bottom) {\n          top += sums[j];\n          tops.push(j);\n        } else {\n          bottom += sums[j];\n          bottoms.push(j);\n        }\n      }\n      return bottoms.reverse().concat(tops);\n    },\n    reverse: function(data) {\n      return d3.range(data.length).reverse();\n    },\n    \"default\": d3_layout_stackOrderDefault\n  });\n  var d3_layout_stackOffsets = d3.map({\n    silhouette: function(data) {\n      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o > max) max = o;\n        sums.push(o);\n      }\n      for (j = 0; j < m; ++j) {\n        y0[j] = (max - sums[j]) / 2;\n      }\n      return y0;\n    },\n    wiggle: function(data) {\n      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];\n      y0[0] = o = o0 = 0;\n      for (j = 1; j < m; ++j) {\n        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];\n        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {\n          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {\n            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n          }\n          s2 += s3 * data[i][j][1];\n        }\n        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n        if (o < o0) o0 = o;\n      }\n      for (j = 0; j < m; ++j) y0[j] -= o0;\n      return y0;\n    },\n    expand: function(data) {\n      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;\n      }\n      for (j = 0; j < m; ++j) y0[j] = 0;\n      return y0;\n    },\n    zero: d3_layout_stackOffsetZero\n  });\n  function d3_layout_stackOrderDefault(data) {\n    return d3.range(data.length);\n  }\n  function d3_layout_stackOffsetZero(data) {\n    var j = -1, m = data[0].length, y0 = [];\n    while (++j < m) y0[j] = 0;\n    return y0;\n  }\n  function d3_layout_stackMaxIndex(array) {\n    var i = 1, j = 0, v = array[0][1], k, n = array.length;\n    for (;i < n; ++i) {\n      if ((k = array[i][1]) > v) {\n        j = i;\n        v = k;\n      }\n    }\n    return j;\n  }\n  function d3_layout_stackReduceSum(d) {\n    return d.reduce(d3_layout_stackSum, 0);\n  }\n  function d3_layout_stackSum(p, d) {\n    return p + d[1];\n  }\n  d3.layout.histogram = function() {\n    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;\n    function histogram(data, i) {\n      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n      while (++i < m) {\n        bin = bins[i] = [];\n        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n        bin.y = 0;\n      }\n      if (m > 0) {\n        i = -1;\n        while (++i < n) {\n          x = values[i];\n          if (x >= range[0] && x <= range[1]) {\n            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n            bin.y += k;\n            bin.push(data[i]);\n          }\n        }\n      }\n      return bins;\n    }\n    histogram.value = function(x) {\n      if (!arguments.length) return valuer;\n      valuer = x;\n      return histogram;\n    };\n    histogram.range = function(x) {\n      if (!arguments.length) return ranger;\n      ranger = d3_functor(x);\n      return histogram;\n    };\n    histogram.bins = function(x) {\n      if (!arguments.length) return binner;\n      binner = typeof x === \"number\" ? function(range) {\n        return d3_layout_histogramBinFixed(range, x);\n      } : d3_functor(x);\n      return histogram;\n    };\n    histogram.frequency = function(x) {\n      if (!arguments.length) return frequency;\n      frequency = !!x;\n      return histogram;\n    };\n    return histogram;\n  };\n  function d3_layout_histogramBinSturges(range, values) {\n    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n  }\n  function d3_layout_histogramBinFixed(range, n) {\n    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];\n    while (++x <= n) f[x] = m * x + b;\n    return f;\n  }\n  function d3_layout_histogramRange(values) {\n    return [ d3.min(values), d3.max(values) ];\n  }\n  d3.layout.pack = function() {\n    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;\n    function pack(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \"function\" ? radius : function() {\n        return radius;\n      };\n      root.x = root.y = 0;\n      d3_layout_hierarchyVisitAfter(root, function(d) {\n        d.r = +r(d.value);\n      });\n      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n      if (padding) {\n        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r += dr;\n        });\n        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r -= dr;\n        });\n      }\n      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n      return nodes;\n    }\n    pack.size = function(_) {\n      if (!arguments.length) return size;\n      size = _;\n      return pack;\n    };\n    pack.radius = function(_) {\n      if (!arguments.length) return radius;\n      radius = _ == null || typeof _ === \"function\" ? _ : +_;\n      return pack;\n    };\n    pack.padding = function(_) {\n      if (!arguments.length) return padding;\n      padding = +_;\n      return pack;\n    };\n    return d3_layout_hierarchyRebind(pack, hierarchy);\n  };\n  function d3_layout_packSort(a, b) {\n    return a.value - b.value;\n  }\n  function d3_layout_packInsert(a, b) {\n    var c = a._pack_next;\n    a._pack_next = b;\n    b._pack_prev = a;\n    b._pack_next = c;\n    c._pack_prev = b;\n  }\n  function d3_layout_packSplice(a, b) {\n    a._pack_next = b;\n    b._pack_prev = a;\n  }\n  function d3_layout_packIntersects(a, b) {\n    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;\n    return .999 * dr * dr > dx * dx + dy * dy;\n  }\n  function d3_layout_packSiblings(node) {\n    if (!(nodes = node.children) || !(n = nodes.length)) return;\n    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;\n    function bound(node) {\n      xMin = Math.min(node.x - node.r, xMin);\n      xMax = Math.max(node.x + node.r, xMax);\n      yMin = Math.min(node.y - node.r, yMin);\n      yMax = Math.max(node.y + node.r, yMax);\n    }\n    nodes.forEach(d3_layout_packLink);\n    a = nodes[0];\n    a.x = -a.r;\n    a.y = 0;\n    bound(a);\n    if (n > 1) {\n      b = nodes[1];\n      b.x = b.r;\n      b.y = 0;\n      bound(b);\n      if (n > 2) {\n        c = nodes[2];\n        d3_layout_packPlace(a, b, c);\n        bound(c);\n        d3_layout_packInsert(a, c);\n        a._pack_prev = c;\n        d3_layout_packInsert(c, b);\n        b = a._pack_next;\n        for (i = 3; i < n; i++) {\n          d3_layout_packPlace(a, b, c = nodes[i]);\n          var isect = 0, s1 = 1, s2 = 1;\n          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n            if (d3_layout_packIntersects(j, c)) {\n              isect = 1;\n              break;\n            }\n          }\n          if (isect == 1) {\n            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n              if (d3_layout_packIntersects(k, c)) {\n                break;\n              }\n            }\n          }\n          if (isect) {\n            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);\n            i--;\n          } else {\n            d3_layout_packInsert(a, c);\n            b = c;\n            bound(c);\n          }\n        }\n      }\n    }\n    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;\n    for (i = 0; i < n; i++) {\n      c = nodes[i];\n      c.x -= cx;\n      c.y -= cy;\n      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n    }\n    node.r = cr;\n    nodes.forEach(d3_layout_packUnlink);\n  }\n  function d3_layout_packLink(node) {\n    node._pack_next = node._pack_prev = node;\n  }\n  function d3_layout_packUnlink(node) {\n    delete node._pack_next;\n    delete node._pack_prev;\n  }\n  function d3_layout_packTransform(node, x, y, k) {\n    var children = node.children;\n    node.x = x += k * node.x;\n    node.y = y += k * node.y;\n    node.r *= k;\n    if (children) {\n      var i = -1, n = children.length;\n      while (++i < n) d3_layout_packTransform(children[i], x, y, k);\n    }\n  }\n  function d3_layout_packPlace(a, b, c) {\n    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;\n    if (db && (dx || dy)) {\n      var da = b.r + c.r, dc = dx * dx + dy * dy;\n      da *= da;\n      db *= db;\n      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = a.x + x * dx + y * dy;\n      c.y = a.y + x * dy - y * dx;\n    } else {\n      c.x = a.x + db;\n      c.y = a.y;\n    }\n  }\n  d3.layout.tree = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n    function tree(d, i) {\n      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);\n      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {\n        var left = root0, right = root0, bottom = root0;\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n      return nodes;\n    }\n    function wrapTree(root0) {\n      var root1 = {\n        A: null,\n        children: [ root0 ]\n      }, queue = [ root1 ], node1;\n      while ((node1 = queue.pop()) != null) {\n        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {\n          queue.push((children[i] = child = {\n            _: children[i],\n            parent: node1,\n            children: (child = children[i].children) && child.slice() || [],\n            A: null,\n            a: null,\n            z: 0,\n            m: 0,\n            c: 0,\n            s: 0,\n            t: null,\n            i: i\n          }).a = child);\n        }\n      }\n      return root1.children[0];\n    }\n    function firstWalk(v) {\n      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;\n      if (children.length) {\n        d3_layout_treeShift(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {\n          vom = d3_layout_treeLeft(vom);\n          vop = d3_layout_treeRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !d3_layout_treeRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !d3_layout_treeLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n    function sizeNode(node) {\n      node.x *= size[0];\n      node.y = node.depth * size[1];\n    }\n    tree.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return tree;\n    };\n    tree.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null ? sizeNode : null;\n      return tree;\n    };\n    tree.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) == null ? null : sizeNode;\n      return tree;\n    };\n    return d3_layout_hierarchyRebind(tree, hierarchy);\n  };\n  function d3_layout_treeSeparation(a, b) {\n    return a.parent == b.parent ? 1 : 2;\n  }\n  function d3_layout_treeLeft(v) {\n    var children = v.children;\n    return children.length ? children[0] : v.t;\n  }\n  function d3_layout_treeRight(v) {\n    var children = v.children, n;\n    return (n = children.length) ? children[n - 1] : v.t;\n  }\n  function d3_layout_treeMove(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n  function d3_layout_treeShift(v) {\n    var shift = 0, change = 0, children = v.children, i = children.length, w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n  function d3_layout_treeAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n  d3.layout.cluster = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n    function cluster(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var children = node.children;\n        if (children && children.length) {\n          node.x = d3_layout_clusterX(children);\n          node.y = d3_layout_clusterY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {\n        node.x = (node.x - root.x) * size[0];\n        node.y = (root.y - node.y) * size[1];\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * size[0];\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n      });\n      return nodes;\n    }\n    cluster.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return cluster;\n    };\n    cluster.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null;\n      return cluster;\n    };\n    cluster.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) != null;\n      return cluster;\n    };\n    return d3_layout_hierarchyRebind(cluster, hierarchy);\n  };\n  function d3_layout_clusterY(children) {\n    return 1 + d3.max(children, function(child) {\n      return child.y;\n    });\n  }\n  function d3_layout_clusterX(children) {\n    return children.reduce(function(x, child) {\n      return x + child.x;\n    }, 0) / children.length;\n  }\n  function d3_layout_clusterLeft(node) {\n    var children = node.children;\n    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;\n  }\n  function d3_layout_clusterRight(node) {\n    var children = node.children, n;\n    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n  }\n  d3.layout.treemap = function() {\n    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n    function scale(children, k) {\n      var i = -1, n = children.length, child, area;\n      while (++i < n) {\n        area = (child = children[i]).value * (k < 0 ? 0 : k);\n        child.area = isNaN(area) || area <= 0 ? 0 : area;\n      }\n    }\n    function squarify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while ((n = remaining.length) > 0) {\n          row.push(child = remaining[n - 1]);\n          row.area += child.area;\n          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {\n            remaining.pop();\n            best = score;\n          } else {\n            row.area -= row.pop().area;\n            position(row, u, rect, false);\n            u = Math.min(rect.dx, rect.dy);\n            row.length = row.area = 0;\n            best = Infinity;\n          }\n        }\n        if (row.length) {\n          position(row, u, rect, true);\n          row.length = row.area = 0;\n        }\n        children.forEach(squarify);\n      }\n    }\n    function stickify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), remaining = children.slice(), child, row = [];\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while (child = remaining.pop()) {\n          row.push(child);\n          row.area += child.area;\n          if (child.z != null) {\n            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n            row.length = row.area = 0;\n          }\n        }\n        children.forEach(stickify);\n      }\n    }\n    function worst(row, u) {\n      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;\n      while (++i < n) {\n        if (!(r = row[i].area)) continue;\n        if (r < rmin) rmin = r;\n        if (r > rmax) rmax = r;\n      }\n      s *= s;\n      u *= u;\n      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n    }\n    function position(row, u, rect, flush) {\n      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;\n      if (u == rect.dx) {\n        if (flush || v > rect.dy) v = rect.dy;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dy = v;\n          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n        }\n        o.z = true;\n        o.dx += rect.x + rect.dx - x;\n        rect.y += v;\n        rect.dy -= v;\n      } else {\n        if (flush || v > rect.dx) v = rect.dx;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dx = v;\n          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n        }\n        o.z = false;\n        o.dy += rect.y + rect.dy - y;\n        rect.x += v;\n        rect.dx -= v;\n      }\n    }\n    function treemap(d) {\n      var nodes = stickies || hierarchy(d), root = nodes[0];\n      root.x = root.y = 0;\n      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;\n      if (stickies) hierarchy.revalue(root);\n      scale([ root ], root.dx * root.dy / root.value);\n      (stickies ? stickify : squarify)(root);\n      if (sticky) stickies = nodes;\n      return nodes;\n    }\n    treemap.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return treemap;\n    };\n    treemap.padding = function(x) {\n      if (!arguments.length) return padding;\n      function padFunction(node) {\n        var p = x.call(treemap, node, node.depth);\n        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n      }\n      function padConstant(node) {\n        return d3_layout_treemapPad(node, x);\n      }\n      var type;\n      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ], \n      padConstant) : padConstant;\n      return treemap;\n    };\n    treemap.round = function(x) {\n      if (!arguments.length) return round != Number;\n      round = x ? Math.round : Number;\n      return treemap;\n    };\n    treemap.sticky = function(x) {\n      if (!arguments.length) return sticky;\n      sticky = x;\n      stickies = null;\n      return treemap;\n    };\n    treemap.ratio = function(x) {\n      if (!arguments.length) return ratio;\n      ratio = x;\n      return treemap;\n    };\n    treemap.mode = function(x) {\n      if (!arguments.length) return mode;\n      mode = x + \"\";\n      return treemap;\n    };\n    return d3_layout_hierarchyRebind(treemap, hierarchy);\n  };\n  function d3_layout_treemapPadNull(node) {\n    return {\n      x: node.x,\n      y: node.y,\n      dx: node.dx,\n      dy: node.dy\n    };\n  }\n  function d3_layout_treemapPad(node, padding) {\n    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n    if (dx < 0) {\n      x += dx / 2;\n      dx = 0;\n    }\n    if (dy < 0) {\n      y += dy / 2;\n      dy = 0;\n    }\n    return {\n      x: x,\n      y: y,\n      dx: dx,\n      dy: dy\n    };\n  }\n  d3.random = {\n    normal: function(µ, σ) {\n      var n = arguments.length;\n      if (n < 2) σ = 1;\n      if (n < 1) µ = 0;\n      return function() {\n        var x, y, r;\n        do {\n          x = Math.random() * 2 - 1;\n          y = Math.random() * 2 - 1;\n          r = x * x + y * y;\n        } while (!r || r > 1);\n        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n      };\n    },\n    logNormal: function() {\n      var random = d3.random.normal.apply(d3, arguments);\n      return function() {\n        return Math.exp(random());\n      };\n    },\n    bates: function(m) {\n      var random = d3.random.irwinHall(m);\n      return function() {\n        return random() / m;\n      };\n    },\n    irwinHall: function(m) {\n      return function() {\n        for (var s = 0, j = 0; j < m; j++) s += Math.random();\n        return s;\n      };\n    }\n  };\n  d3.scale = {};\n  function d3_scaleExtent(domain) {\n    var start = domain[0], stop = domain[domain.length - 1];\n    return start < stop ? [ start, stop ] : [ stop, start ];\n  }\n  function d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n  }\n  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);\n    return function(x) {\n      return i(u(x));\n    };\n  }\n  function d3_scale_nice(domain, nice) {\n    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;\n    if (x1 < x0) {\n      dx = i0, i0 = i1, i1 = dx;\n      dx = x0, x0 = x1, x1 = dx;\n    }\n    domain[i0] = nice.floor(x0);\n    domain[i1] = nice.ceil(x1);\n    return domain;\n  }\n  function d3_scale_niceStep(step) {\n    return step ? {\n      floor: function(x) {\n        return Math.floor(x / step) * step;\n      },\n      ceil: function(x) {\n        return Math.ceil(x / step) * step;\n      }\n    } : d3_scale_niceIdentity;\n  }\n  var d3_scale_niceIdentity = {\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;\n    if (domain[k] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n    while (++j <= k) {\n      u.push(uninterpolate(domain[j - 1], domain[j]));\n      i.push(interpolate(range[j - 1], range[j]));\n    }\n    return function(x) {\n      var j = d3.bisect(domain, x, 1, k) - 1;\n      return i[j](u[j](x));\n    };\n  }\n  d3.scale.linear = function() {\n    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);\n  };\n  function d3_scale_linear(domain, range, interpolate, clamp) {\n    var output, input;\n    function rescale() {\n      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n      output = linear(domain, range, uninterpolate, interpolate);\n      input = linear(range, domain, uninterpolate, d3_interpolate);\n      return scale;\n    }\n    function scale(x) {\n      return output(x);\n    }\n    scale.invert = function(y) {\n      return input(y);\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(Number);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.rangeRound = function(x) {\n      return scale.range(x).interpolate(d3_interpolateRound);\n    };\n    scale.clamp = function(x) {\n      if (!arguments.length) return clamp;\n      clamp = x;\n      return rescale();\n    };\n    scale.interpolate = function(x) {\n      if (!arguments.length) return interpolate;\n      interpolate = x;\n      return rescale();\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      d3_scale_linearNice(domain, m);\n      return rescale();\n    };\n    scale.copy = function() {\n      return d3_scale_linear(domain, range, interpolate, clamp);\n    };\n    return rescale();\n  }\n  function d3_scale_linearRebind(scale, linear) {\n    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");\n  }\n  function d3_scale_linearNice(domain, m) {\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    return domain;\n  }\n  function d3_scale_linearTickRange(domain, m) {\n    if (m == null) m = 10;\n    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;\n    extent[0] = Math.ceil(extent[0] / step) * step;\n    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n    extent[2] = step;\n    return extent;\n  }\n  function d3_scale_linearTicks(domain, m) {\n    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n  }\n  function d3_scale_linearTickFormat(domain, m, format) {\n    var range = d3_scale_linearTickRange(domain, m);\n    if (format) {\n      var match = d3_format_re.exec(format);\n      match.shift();\n      if (match[8] === \"s\") {\n        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n        if (!match[7]) match[7] = \".\" + d3_scale_linearPrecision(prefix.scale(range[2]));\n        match[8] = \"f\";\n        format = d3.format(match.join(\"\"));\n        return function(d) {\n          return format(prefix.scale(d)) + prefix.symbol;\n        };\n      }\n      if (!match[7]) match[7] = \".\" + d3_scale_linearFormatPrecision(match[8], range);\n      format = match.join(\"\");\n    } else {\n      format = \",.\" + d3_scale_linearPrecision(range[2]) + \"f\";\n    }\n    return d3.format(format);\n  }\n  var d3_scale_linearFormatSignificant = {\n    s: 1,\n    g: 1,\n    p: 1,\n    r: 1,\n    e: 1\n  };\n  function d3_scale_linearPrecision(value) {\n    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n  }\n  function d3_scale_linearFormatPrecision(type, range) {\n    var p = d3_scale_linearPrecision(range[2]);\n    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \"e\") : p - (type === \"%\") * 2;\n  }\n  d3.scale.log = function() {\n    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);\n  };\n  function d3_scale_log(linear, base, positive, domain) {\n    function log(x) {\n      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);\n    }\n    function pow(x) {\n      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n    }\n    function scale(x) {\n      return linear(log(x));\n    }\n    scale.invert = function(x) {\n      return pow(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      positive = x[0] >= 0;\n      linear.domain((domain = x.map(Number)).map(log));\n      return scale;\n    };\n    scale.base = function(_) {\n      if (!arguments.length) return base;\n      base = +_;\n      linear.domain(domain.map(log));\n      return scale;\n    };\n    scale.nice = function() {\n      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n      linear.domain(niced);\n      domain = niced.map(pow);\n      return scale;\n    };\n    scale.ticks = function() {\n      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n      if (isFinite(j - i)) {\n        if (positive) {\n          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);\n          ticks.push(pow(i));\n        } else {\n          ticks.push(pow(i));\n          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);\n        }\n        for (i = 0; ticks[i] < u; i++) {}\n        for (j = ticks.length; ticks[j - 1] > v; j--) {}\n        ticks = ticks.slice(i, j);\n      }\n      return ticks;\n    };\n    scale.tickFormat = function(n, format) {\n      if (!arguments.length) return d3_scale_logFormat;\n      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== \"function\") format = d3.format(format);\n      var k = Math.max(1, base * n / scale.ticks().length);\n      return function(d) {\n        var i = d / pow(Math.round(log(d)));\n        if (i * base < base - .5) i *= base;\n        return i <= k ? format(d) : \"\";\n      };\n    };\n    scale.copy = function() {\n      return d3_scale_log(linear.copy(), base, positive, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  var d3_scale_logFormat = d3.format(\".0e\"), d3_scale_logNiceNegative = {\n    floor: function(x) {\n      return -Math.ceil(-x);\n    },\n    ceil: function(x) {\n      return -Math.floor(-x);\n    }\n  };\n  d3.scale.pow = function() {\n    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);\n  };\n  function d3_scale_pow(linear, exponent, domain) {\n    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);\n    function scale(x) {\n      return linear(powp(x));\n    }\n    scale.invert = function(x) {\n      return powb(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      linear.domain((domain = x.map(Number)).map(powp));\n      return scale;\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      return scale.domain(d3_scale_linearNice(domain, m));\n    };\n    scale.exponent = function(x) {\n      if (!arguments.length) return exponent;\n      powp = d3_scale_powPow(exponent = x);\n      powb = d3_scale_powPow(1 / exponent);\n      linear.domain(domain.map(powp));\n      return scale;\n    };\n    scale.copy = function() {\n      return d3_scale_pow(linear.copy(), exponent, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_scale_powPow(e) {\n    return function(x) {\n      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n    };\n  }\n  d3.scale.sqrt = function() {\n    return d3.scale.pow().exponent(.5);\n  };\n  d3.scale.ordinal = function() {\n    return d3_scale_ordinal([], {\n      t: \"range\",\n      a: [ [] ]\n    });\n  };\n  function d3_scale_ordinal(domain, ranger) {\n    var index, range, rangeBand;\n    function scale(x) {\n      return range[((index.get(x) || (ranger.t === \"range\" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n    }\n    function steps(start, step) {\n      return d3.range(domain.length).map(function(i) {\n        return start + step * i;\n      });\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = [];\n      index = new d3_Map();\n      var i = -1, n = x.length, xi;\n      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n      return scale[ranger.t].apply(scale, ranger.a);\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      rangeBand = 0;\n      ranger = {\n        t: \"range\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangePoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, \n      0) : (stop - start) / (domain.length - 1 + padding);\n      range = steps(start + step * padding / 2, step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangePoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundPoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), \n      0) : (stop - start) / (domain.length - 1 + padding) | 0;\n      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangeRoundPoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n      range = steps(start + step * outerPadding, step);\n      if (reverse) range.reverse();\n      rangeBand = step * (1 - padding);\n      ranger = {\n        t: \"rangeBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n      if (reverse) range.reverse();\n      rangeBand = Math.round(step * (1 - padding));\n      ranger = {\n        t: \"rangeRoundBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBand = function() {\n      return rangeBand;\n    };\n    scale.rangeExtent = function() {\n      return d3_scaleExtent(ranger.a[0]);\n    };\n    scale.copy = function() {\n      return d3_scale_ordinal(domain, ranger);\n    };\n    return scale.domain(domain);\n  }\n  d3.scale.category10 = function() {\n    return d3.scale.ordinal().range(d3_category10);\n  };\n  d3.scale.category20 = function() {\n    return d3.scale.ordinal().range(d3_category20);\n  };\n  d3.scale.category20b = function() {\n    return d3.scale.ordinal().range(d3_category20b);\n  };\n  d3.scale.category20c = function() {\n    return d3.scale.ordinal().range(d3_category20c);\n  };\n  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n  d3.scale.quantile = function() {\n    return d3_scale_quantile([], []);\n  };\n  function d3_scale_quantile(domain, range) {\n    var thresholds;\n    function rescale() {\n      var k = 0, q = range.length;\n      thresholds = [];\n      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);\n      return scale;\n    }\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.quantiles = function() {\n      return thresholds;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantile(domain, range);\n    };\n    return rescale();\n  }\n  d3.scale.quantize = function() {\n    return d3_scale_quantize(0, 1, [ 0, 1 ]);\n  };\n  function d3_scale_quantize(x0, x1, range) {\n    var kx, i;\n    function scale(x) {\n      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n    }\n    function rescale() {\n      kx = range.length / (x1 - x0);\n      i = range.length - 1;\n      return scale;\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return [ x0, x1 ];\n      x0 = +x[0];\n      x1 = +x[x.length - 1];\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      y = y < 0 ? NaN : y / kx + x0;\n      return [ y, y + 1 / kx ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantize(x0, x1, range);\n    };\n    return rescale();\n  }\n  d3.scale.threshold = function() {\n    return d3_scale_threshold([ .5 ], [ 0, 1 ]);\n  };\n  function d3_scale_threshold(domain, range) {\n    function scale(x) {\n      if (x <= x) return range[d3.bisect(domain, x)];\n    }\n    scale.domain = function(_) {\n      if (!arguments.length) return domain;\n      domain = _;\n      return scale;\n    };\n    scale.range = function(_) {\n      if (!arguments.length) return range;\n      range = _;\n      return scale;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return [ domain[y - 1], domain[y] ];\n    };\n    scale.copy = function() {\n      return d3_scale_threshold(domain, range);\n    };\n    return scale;\n  }\n  d3.scale.identity = function() {\n    return d3_scale_identity([ 0, 1 ]);\n  };\n  function d3_scale_identity(domain) {\n    function identity(x) {\n      return +x;\n    }\n    identity.invert = identity;\n    identity.domain = identity.range = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(identity);\n      return identity;\n    };\n    identity.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    identity.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    identity.copy = function() {\n      return d3_scale_identity(domain);\n    };\n    return identity;\n  }\n  d3.svg = {};\n  function d3_zero() {\n    return 0;\n  }\n  d3.svg.arc = function() {\n    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n    function arc() {\n      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;\n      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;\n      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \"\") + \"Z\";\n      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];\n      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n        if (!cw) p1 *= -1;\n        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n      }\n      if (r1) {\n        x0 = r1 * Math.cos(a0 + p1);\n        y0 = r1 * Math.sin(a0 + p1);\n        x1 = r1 * Math.cos(a1 - p1);\n        y1 = r1 * Math.sin(a1 - p1);\n        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;\n        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n          var h1 = (a0 + a1) / 2;\n          x0 = r1 * Math.cos(h1);\n          y0 = r1 * Math.sin(h1);\n          x1 = y1 = null;\n        }\n      } else {\n        x0 = y0 = 0;\n      }\n      if (r0) {\n        x2 = r0 * Math.cos(a1 - p0);\n        y2 = r0 * Math.sin(a1 - p0);\n        x3 = r0 * Math.cos(a0 + p0);\n        y3 = r0 * Math.sin(a0 + p0);\n        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;\n        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n          var h0 = (a0 + a1) / 2;\n          x2 = r0 * Math.cos(h0);\n          y2 = r0 * Math.sin(h0);\n          x3 = y3 = null;\n        }\n      } else {\n        x2 = y2 = 0;\n      }\n      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {\n        cr = r0 < r1 ^ cw ? 0 : 1;\n        var rc1 = rc, rc0 = rc;\n        if (da < π) {\n          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n        }\n        if (x1 != null) {\n          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n          if (rc === rc1) {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t30[1], \"A\", r1, \",\", r1, \" 0 \", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \",\", cw, \" \", t12[1], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t12[0]);\n          } else {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 1,\", cr, \" \", t12[0]);\n          }\n        } else {\n          path.push(\"M\", x0, \",\", y0);\n        }\n        if (x3 != null) {\n          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n          if (rc === rc0) {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t21[1], \"A\", r0, \",\", r0, \" 0 \", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \",\", 1 - cw, \" \", t03[1], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          } else {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          }\n        } else {\n          path.push(\"L\", x2, \",\", y2);\n        }\n      } else {\n        path.push(\"M\", x0, \",\", y0);\n        if (x1 != null) path.push(\"A\", r1, \",\", r1, \" 0 \", l1, \",\", cw, \" \", x1, \",\", y1);\n        path.push(\"L\", x2, \",\", y2);\n        if (x3 != null) path.push(\"A\", r0, \",\", r0, \" 0 \", l0, \",\", 1 - cw, \" \", x3, \",\", y3);\n      }\n      path.push(\"Z\");\n      return path.join(\"\");\n    }\n    function circleSegment(r1, cw) {\n      return \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + r1;\n    }\n    arc.innerRadius = function(v) {\n      if (!arguments.length) return innerRadius;\n      innerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.outerRadius = function(v) {\n      if (!arguments.length) return outerRadius;\n      outerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.cornerRadius = function(v) {\n      if (!arguments.length) return cornerRadius;\n      cornerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.padRadius = function(v) {\n      if (!arguments.length) return padRadius;\n      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n      return arc;\n    };\n    arc.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return arc;\n    };\n    arc.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return arc;\n    };\n    arc.padAngle = function(v) {\n      if (!arguments.length) return padAngle;\n      padAngle = d3_functor(v);\n      return arc;\n    };\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n      return [ Math.cos(a) * r, Math.sin(a) * r ];\n    };\n    return arc;\n  };\n  var d3_svg_arcAuto = \"auto\";\n  function d3_svg_arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n  function d3_svg_arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n  function d3_svg_arcStartAngle(d) {\n    return d.startAngle;\n  }\n  function d3_svg_arcEndAngle(d) {\n    return d.endAngle;\n  }\n  function d3_svg_arcPadAngle(d) {\n    return d && d.padAngle;\n  }\n  function d3_svg_arcSweep(x0, y0, x1, y1) {\n    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;\n  }\n  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];\n  }\n  function d3_svg_line(projection) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n    function line(data) {\n      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points), tension));\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);\n        } else if (points.length) {\n          segment();\n          points = [];\n        }\n      }\n      if (points.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    line.x = function(_) {\n      if (!arguments.length) return x;\n      x = _;\n      return line;\n    };\n    line.y = function(_) {\n      if (!arguments.length) return y;\n      y = _;\n      return line;\n    };\n    line.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return line;\n    };\n    line.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      return line;\n    };\n    line.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return line;\n    };\n    return line;\n  }\n  d3.svg.line = function() {\n    return d3_svg_line(d3_identity);\n  };\n  var d3_svg_lineInterpolators = d3.map({\n    linear: d3_svg_lineLinear,\n    \"linear-closed\": d3_svg_lineLinearClosed,\n    step: d3_svg_lineStep,\n    \"step-before\": d3_svg_lineStepBefore,\n    \"step-after\": d3_svg_lineStepAfter,\n    basis: d3_svg_lineBasis,\n    \"basis-open\": d3_svg_lineBasisOpen,\n    \"basis-closed\": d3_svg_lineBasisClosed,\n    bundle: d3_svg_lineBundle,\n    cardinal: d3_svg_lineCardinal,\n    \"cardinal-open\": d3_svg_lineCardinalOpen,\n    \"cardinal-closed\": d3_svg_lineCardinalClosed,\n    monotone: d3_svg_lineMonotone\n  });\n  d3_svg_lineInterpolators.forEach(function(key, value) {\n    value.key = key;\n    value.closed = /-closed$/.test(key);\n  });\n  function d3_svg_lineLinear(points) {\n    return points.length > 1 ? points.join(\"L\") : points + \"Z\";\n  }\n  function d3_svg_lineLinearClosed(points) {\n    return points.join(\"L\") + \"Z\";\n  }\n  function d3_svg_lineStep(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p[0] + (p = points[i])[0]) / 2, \"V\", p[1]);\n    if (n > 1) path.push(\"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepBefore(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepAfter(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineCardinalOpen(points, tension) {\n    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineCardinalClosed(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));\n  }\n  function d3_svg_lineCardinal(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineHermite(points, tangents) {\n    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {\n      return d3_svg_lineLinear(points);\n    }\n    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n    if (quad) {\n      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];\n      p0 = points[1];\n      pi = 2;\n    }\n    if (tangents.length > 1) {\n      t = tangents[1];\n      p = points[pi];\n      pi++;\n      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      for (var i = 2; i < tangents.length; i++, pi++) {\n        p = points[pi];\n        t = tangents[i];\n        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      }\n    }\n    if (quad) {\n      var lp = points[pi];\n      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];\n    }\n    return path;\n  }\n  function d3_svg_lineCardinalTangents(points, tension) {\n    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;\n    while (++i < n) {\n      p0 = p1;\n      p1 = p2;\n      p2 = points[i];\n      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineBasis(points) {\n    if (points.length < 3) return d3_svg_lineLinear(points);\n    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0, \"L\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    points.push(points[n - 1]);\n    while (++i <= n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    points.pop();\n    path.push(\"L\", pi);\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisOpen(points) {\n    if (points.length < 4) return d3_svg_lineLinear(points);\n    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];\n    while (++i < 3) {\n      pi = points[i];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n    --i;\n    while (++i < n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisClosed(points) {\n    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];\n    while (++i < 4) {\n      pi = points[i % n];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    --i;\n    while (++i < m) {\n      pi = points[i % n];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBundle(points, tension) {\n    var n = points.length - 1;\n    if (n) {\n      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;\n      while (++i <= n) {\n        p = points[i];\n        t = i / n;\n        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n      }\n    }\n    return d3_svg_lineBasis(points);\n  }\n  function d3_svg_lineDot4(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n  function d3_svg_lineBasisBezier(path, x, y) {\n    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n  }\n  function d3_svg_lineSlope(p0, p1) {\n    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n  }\n  function d3_svg_lineFiniteDifferences(points) {\n    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);\n    while (++i < j) {\n      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n    }\n    m[i] = d;\n    return m;\n  }\n  function d3_svg_lineMonotoneTangents(points) {\n    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;\n    while (++i < j) {\n      d = d3_svg_lineSlope(points[i], points[i + 1]);\n      if (abs(d) < ε) {\n        m[i] = m[i + 1] = 0;\n      } else {\n        a = m[i] / d;\n        b = m[i + 1] / d;\n        s = a * a + b * b;\n        if (s > 9) {\n          s = d * 3 / Math.sqrt(s);\n          m[i] = s * a;\n          m[i + 1] = s * b;\n        }\n      }\n    }\n    i = -1;\n    while (++i <= j) {\n      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n      tangents.push([ s || 0, m[i] * s || 0 ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineMonotone(points) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n  }\n  d3.svg.line.radial = function() {\n    var line = d3_svg_line(d3_svg_lineRadial);\n    line.radius = line.x, delete line.x;\n    line.angle = line.y, delete line.y;\n    return line;\n  };\n  function d3_svg_lineRadial(points) {\n    var point, i = -1, n = points.length, r, a;\n    while (++i < n) {\n      point = points[i];\n      r = point[0];\n      a = point[1] - halfπ;\n      point[0] = r * Math.cos(a);\n      point[1] = r * Math.sin(a);\n    }\n    return points;\n  }\n  function d3_svg_area(projection) {\n    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n    function area(data) {\n      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n        return x;\n      } : d3_functor(x1), fy1 = y0 === y1 ? function() {\n        return y;\n      } : d3_functor(y1), x, y;\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);\n          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);\n        } else if (points0.length) {\n          segment();\n          points0 = [];\n          points1 = [];\n        }\n      }\n      if (points0.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    area.x = function(_) {\n      if (!arguments.length) return x1;\n      x0 = x1 = _;\n      return area;\n    };\n    area.x0 = function(_) {\n      if (!arguments.length) return x0;\n      x0 = _;\n      return area;\n    };\n    area.x1 = function(_) {\n      if (!arguments.length) return x1;\n      x1 = _;\n      return area;\n    };\n    area.y = function(_) {\n      if (!arguments.length) return y1;\n      y0 = y1 = _;\n      return area;\n    };\n    area.y0 = function(_) {\n      if (!arguments.length) return y0;\n      y0 = _;\n      return area;\n    };\n    area.y1 = function(_) {\n      if (!arguments.length) return y1;\n      y1 = _;\n      return area;\n    };\n    area.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return area;\n    };\n    area.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      interpolateReverse = interpolate.reverse || interpolate;\n      L = interpolate.closed ? \"M\" : \"L\";\n      return area;\n    };\n    area.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return area;\n    };\n    return area;\n  }\n  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n  d3.svg.area = function() {\n    return d3_svg_area(d3_identity);\n  };\n  d3.svg.area.radial = function() {\n    var area = d3_svg_area(d3_svg_lineRadial);\n    area.radius = area.x, delete area.x;\n    area.innerRadius = area.x0, delete area.x0;\n    area.outerRadius = area.x1, delete area.x1;\n    area.angle = area.y, delete area.y;\n    area.startAngle = area.y0, delete area.y0;\n    area.endAngle = area.y1, delete area.y1;\n    return area;\n  };\n  d3.svg.chord = function() {\n    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n    function chord(d, i) {\n      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);\n      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n    }\n    function subgroup(self, f, d, i) {\n      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n      return {\n        r: r,\n        a0: a0,\n        a1: a1,\n        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],\n        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]\n      };\n    }\n    function equals(a, b) {\n      return a.a0 == b.a0 && a.a1 == b.a1;\n    }\n    function arc(r, p, a) {\n      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;\n    }\n    function curve(r0, p0, r1, p1) {\n      return \"Q 0,0 \" + p1;\n    }\n    chord.radius = function(v) {\n      if (!arguments.length) return radius;\n      radius = d3_functor(v);\n      return chord;\n    };\n    chord.source = function(v) {\n      if (!arguments.length) return source;\n      source = d3_functor(v);\n      return chord;\n    };\n    chord.target = function(v) {\n      if (!arguments.length) return target;\n      target = d3_functor(v);\n      return chord;\n    };\n    chord.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return chord;\n    };\n    chord.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return chord;\n    };\n    return chord;\n  };\n  function d3_svg_chordRadius(d) {\n    return d.radius;\n  }\n  d3.svg.diagonal = function() {\n    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;\n    function diagonal(d, i) {\n      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {\n        x: p0.x,\n        y: m\n      }, {\n        x: p3.x,\n        y: m\n      }, p3 ];\n      p = p.map(projection);\n      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];\n    }\n    diagonal.source = function(x) {\n      if (!arguments.length) return source;\n      source = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.target = function(x) {\n      if (!arguments.length) return target;\n      target = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.projection = function(x) {\n      if (!arguments.length) return projection;\n      projection = x;\n      return diagonal;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalProjection(d) {\n    return [ d.x, d.y ];\n  }\n  d3.svg.diagonal.radial = function() {\n    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;\n    diagonal.projection = function(x) {\n      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalRadialProjection(projection) {\n    return function() {\n      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;\n      return [ r * Math.cos(a), r * Math.sin(a) ];\n    };\n  }\n  d3.svg.symbol = function() {\n    var type = d3_svg_symbolType, size = d3_svg_symbolSize;\n    function symbol(d, i) {\n      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n    }\n    symbol.type = function(x) {\n      if (!arguments.length) return type;\n      type = d3_functor(x);\n      return symbol;\n    };\n    symbol.size = function(x) {\n      if (!arguments.length) return size;\n      size = d3_functor(x);\n      return symbol;\n    };\n    return symbol;\n  };\n  function d3_svg_symbolSize() {\n    return 64;\n  }\n  function d3_svg_symbolType() {\n    return \"circle\";\n  }\n  function d3_svg_symbolCircle(size) {\n    var r = Math.sqrt(size / π);\n    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";\n  }\n  var d3_svg_symbols = d3.map({\n    circle: d3_svg_symbolCircle,\n    cross: function(size) {\n      var r = Math.sqrt(size / 5) / 2;\n      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n    },\n    diamond: function(size) {\n      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;\n      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";\n    },\n    square: function(size) {\n      var r = Math.sqrt(size) / 2;\n      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";\n    },\n    \"triangle-down\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";\n    },\n    \"triangle-up\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";\n    }\n  });\n  d3.svg.symbolTypes = d3_svg_symbols.keys();\n  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n  d3_selectionPrototype.transition = function(name) {\n    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n      time: Date.now(),\n      ease: d3_ease_cubicInOut,\n      delay: 0,\n      duration: 250\n    };\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_selectionPrototype.interrupt = function(name) {\n    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));\n  };\n  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());\n  function d3_selection_interruptNS(ns) {\n    return function() {\n      var lock, activeId, active;\n      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        if (--lock.count) delete lock[activeId]; else delete this[ns];\n        lock.active += .5;\n        active.event && active.event.interrupt.call(this, this.__data__, active.index);\n      }\n    };\n  }\n  function d3_transition(groups, ns, id) {\n    d3_subclass(groups, d3_transitionPrototype);\n    groups.namespace = ns;\n    groups.id = id;\n    return groups;\n  }\n  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;\n  d3_transitionPrototype.call = d3_selectionPrototype.call;\n  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n  d3_transitionPrototype.node = d3_selectionPrototype.node;\n  d3_transitionPrototype.size = d3_selectionPrototype.size;\n  d3.transition = function(selection, name) {\n    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);\n  };\n  d3.transition.prototype = d3_transitionPrototype;\n  d3_transitionPrototype.select = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n          subgroup.push(subnode);\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.selectAll = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          transition = node[ns][id];\n          subnodes = selector.call(node, node.__data__, i, j);\n          subgroups.push(subgroup = []);\n          for (var k = -1, o = subnodes.length; ++k < o; ) {\n            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n            subgroup.push(subnode);\n          }\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_transition(subgroups, this.namespace, this.id);\n  };\n  d3_transitionPrototype.tween = function(name, tween) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);\n    return d3_selection_each(this, tween == null ? function(node) {\n      node[ns][id].tween.remove(name);\n    } : function(node) {\n      node[ns][id].tween.set(name, tween);\n    });\n  };\n  function d3_transition_tween(groups, name, value, tween) {\n    var id = groups.id, ns = groups.namespace;\n    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n    } : (value = tween(value), function(node) {\n      node[ns][id].tween.set(name, value);\n    }));\n  }\n  d3_transitionPrototype.attr = function(nameNS, value) {\n    if (arguments.length < 2) {\n      for (value in nameNS) this.attr(value, nameNS[value]);\n      return this;\n    }\n    var interpolate = nameNS == \"transform\" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrTween(b) {\n      return b == null ? attrNull : (b += \"\", function() {\n        var a = this.getAttribute(name), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttribute(name, i(t));\n        });\n      });\n    }\n    function attrTweenNS(b) {\n      return b == null ? attrNullNS : (b += \"\", function() {\n        var a = this.getAttributeNS(name.space, name.local), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttributeNS(name.space, name.local, i(t));\n        });\n      });\n    }\n    return d3_transition_tween(this, \"attr.\" + nameNS, value, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.attrTween = function(nameNS, tween) {\n    var name = d3.ns.qualify(nameNS);\n    function attrTween(d, i) {\n      var f = tween.call(this, d, i, this.getAttribute(name));\n      return f && function(t) {\n        this.setAttribute(name, f(t));\n      };\n    }\n    function attrTweenNS(d, i) {\n      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n      return f && function(t) {\n        this.setAttributeNS(name.space, name.local, f(t));\n      };\n    }\n    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.style(priority, name[priority], value);\n        return this;\n      }\n      priority = \"\";\n    }\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleString(b) {\n      return b == null ? styleNull : (b += \"\", function() {\n        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;\n        return a !== b && (i = d3_interpolate(a, b), function(t) {\n          this.style.setProperty(name, i(t), priority);\n        });\n      });\n    }\n    return d3_transition_tween(this, \"style.\" + name, value, styleString);\n  };\n  d3_transitionPrototype.styleTween = function(name, tween, priority) {\n    if (arguments.length < 3) priority = \"\";\n    function styleTween(d, i) {\n      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));\n      return f && function(t) {\n        this.style.setProperty(name, f(t), priority);\n      };\n    }\n    return this.tween(\"style.\" + name, styleTween);\n  };\n  d3_transitionPrototype.text = function(value) {\n    return d3_transition_tween(this, \"text\", value, d3_transition_text);\n  };\n  function d3_transition_text(b) {\n    if (b == null) b = \"\";\n    return function() {\n      this.textContent = b;\n    };\n  }\n  d3_transitionPrototype.remove = function() {\n    var ns = this.namespace;\n    return this.each(\"end.transition\", function() {\n      var p;\n      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);\n    });\n  };\n  d3_transitionPrototype.ease = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].ease;\n    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);\n    return d3_selection_each(this, function(node) {\n      node[ns][id].ease = value;\n    });\n  };\n  d3_transitionPrototype.delay = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].delay;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n    } : (value = +value, function(node) {\n      node[ns][id].delay = value;\n    }));\n  };\n  d3_transitionPrototype.duration = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].duration;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n    } : (value = Math.max(1, value), function(node) {\n      node[ns][id].duration = value;\n    }));\n  };\n  d3_transitionPrototype.each = function(type, listener) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) {\n      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;\n      try {\n        d3_transitionInheritId = id;\n        d3_selection_each(this, function(node, i, j) {\n          d3_transitionInherit = node[ns][id];\n          type.call(node, node.__data__, i, j);\n        });\n      } finally {\n        d3_transitionInherit = inherit;\n        d3_transitionInheritId = inheritId;\n      }\n    } else {\n      d3_selection_each(this, function(node) {\n        var transition = node[ns][id];\n        (transition.event || (transition.event = d3.dispatch(\"start\", \"end\", \"interrupt\"))).on(type, listener);\n      });\n    }\n    return this;\n  };\n  d3_transitionPrototype.transition = function() {\n    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if (node = group[i]) {\n          transition = node[ns][id0];\n          d3_transitionNode(node, i, ns, id1, {\n            time: transition.time,\n            ease: transition.ease,\n            delay: transition.delay + transition.duration,\n            duration: transition.duration\n          });\n        }\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id1);\n  };\n  function d3_transitionNamespace(name) {\n    return name == null ? \"__transition__\" : \"__transition_\" + name + \"__\";\n  }\n  function d3_transitionNode(node, i, ns, id, inherit) {\n    var lock = node[ns] || (node[ns] = {\n      active: 0,\n      count: 0\n    }), transition = lock[id], time, timer, duration, ease, tweens;\n    function schedule(elapsed) {\n      var delay = transition.delay;\n      timer.t = delay + time;\n      if (delay <= elapsed) return start(elapsed - delay);\n      timer.c = start;\n    }\n    function start(elapsed) {\n      var activeId = lock.active, active = lock[activeId];\n      if (active) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        --lock.count;\n        delete lock[activeId];\n        active.event && active.event.interrupt.call(node, node.__data__, active.index);\n      }\n      for (var cancelId in lock) {\n        if (+cancelId < id) {\n          var cancel = lock[cancelId];\n          cancel.timer.c = null;\n          cancel.timer.t = NaN;\n          --lock.count;\n          delete lock[cancelId];\n        }\n      }\n      timer.c = tick;\n      d3_timer(function() {\n        if (timer.c && tick(elapsed || 1)) {\n          timer.c = null;\n          timer.t = NaN;\n        }\n        return 1;\n      }, 0, time);\n      lock.active = id;\n      transition.event && transition.event.start.call(node, node.__data__, i);\n      tweens = [];\n      transition.tween.forEach(function(key, value) {\n        if (value = value.call(node, node.__data__, i)) {\n          tweens.push(value);\n        }\n      });\n      ease = transition.ease;\n      duration = transition.duration;\n    }\n    function tick(elapsed) {\n      var t = elapsed / duration, e = ease(t), n = tweens.length;\n      while (n > 0) {\n        tweens[--n].call(node, e);\n      }\n      if (t >= 1) {\n        transition.event && transition.event.end.call(node, node.__data__, i);\n        if (--lock.count) delete lock[id]; else delete node[ns];\n        return 1;\n      }\n    }\n    if (!transition) {\n      time = inherit.time;\n      timer = d3_timer(schedule, 0, time);\n      transition = lock[id] = {\n        tween: new d3_Map(),\n        time: time,\n        timer: timer,\n        delay: inherit.delay,\n        duration: inherit.duration,\n        ease: inherit.ease,\n        index: i\n      };\n      inherit = null;\n      ++lock.count;\n    }\n  }\n  d3.svg.axis = function() {\n    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n    function axis(g) {\n      g.each(function() {\n        var g = d3.select(this);\n        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();\n        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\".tick\").data(ticks, scale1), tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", ε), tickExit = d3.transition(tick.exit()).style(\"opacity\", ε).remove(), tickUpdate = d3.transition(tick.order()).style(\"opacity\", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n        var range = d3_scaleRange(scale1), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), \n        d3.transition(path));\n        tickEnter.append(\"line\");\n        tickEnter.append(\"text\");\n        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\"), sign = orient === \"top\" || orient === \"left\" ? -1 : 1, x1, x2, y1, y2;\n        if (orient === \"bottom\" || orient === \"top\") {\n          tickTransform = d3_svg_axisX, x1 = \"x\", y1 = \"y\", x2 = \"x2\", y2 = \"y2\";\n          text.attr(\"dy\", sign < 0 ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\");\n          pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + sign * outerTickSize + \"V0H\" + range[1] + \"V\" + sign * outerTickSize);\n        } else {\n          tickTransform = d3_svg_axisY, x1 = \"y\", y1 = \"x\", x2 = \"y2\", y2 = \"x2\";\n          text.attr(\"dy\", \".32em\").style(\"text-anchor\", sign < 0 ? \"end\" : \"start\");\n          pathUpdate.attr(\"d\", \"M\" + sign * outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * outerTickSize);\n        }\n        lineEnter.attr(y2, sign * innerTickSize);\n        textEnter.attr(y1, sign * tickSpacing);\n        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n        if (scale1.rangeBand) {\n          var x = scale1, dx = x.rangeBand() / 2;\n          scale0 = scale1 = function(d) {\n            return x(d) + dx;\n          };\n        } else if (scale0.rangeBand) {\n          scale0 = scale1;\n        } else {\n          tickExit.call(tickTransform, scale1, scale0);\n        }\n        tickEnter.call(tickTransform, scale0, scale1);\n        tickUpdate.call(tickTransform, scale1, scale1);\n      });\n    }\n    axis.scale = function(x) {\n      if (!arguments.length) return scale;\n      scale = x;\n      return axis;\n    };\n    axis.orient = function(x) {\n      if (!arguments.length) return orient;\n      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;\n      return axis;\n    };\n    axis.ticks = function() {\n      if (!arguments.length) return tickArguments_;\n      tickArguments_ = d3_array(arguments);\n      return axis;\n    };\n    axis.tickValues = function(x) {\n      if (!arguments.length) return tickValues;\n      tickValues = x;\n      return axis;\n    };\n    axis.tickFormat = function(x) {\n      if (!arguments.length) return tickFormat_;\n      tickFormat_ = x;\n      return axis;\n    };\n    axis.tickSize = function(x) {\n      var n = arguments.length;\n      if (!n) return innerTickSize;\n      innerTickSize = +x;\n      outerTickSize = +arguments[n - 1];\n      return axis;\n    };\n    axis.innerTickSize = function(x) {\n      if (!arguments.length) return innerTickSize;\n      innerTickSize = +x;\n      return axis;\n    };\n    axis.outerTickSize = function(x) {\n      if (!arguments.length) return outerTickSize;\n      outerTickSize = +x;\n      return axis;\n    };\n    axis.tickPadding = function(x) {\n      if (!arguments.length) return tickPadding;\n      tickPadding = +x;\n      return axis;\n    };\n    axis.tickSubdivide = function() {\n      return arguments.length && axis;\n    };\n    return axis;\n  };\n  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  };\n  function d3_svg_axisX(selection, x0, x1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = x0(d);\n      return \"translate(\" + (isFinite(v0) ? v0 : x1(d)) + \",0)\";\n    });\n  }\n  function d3_svg_axisY(selection, y0, y1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = y0(d);\n      return \"translate(0,\" + (isFinite(v0) ? v0 : y1(d)) + \")\";\n    });\n  }\n  d3.svg.brush = function() {\n    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n    function brush(g) {\n      g.each(function() {\n        var g = d3.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);\n        var background = g.selectAll(\".background\").data([ 0 ]);\n        background.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n        g.selectAll(\".extent\").data([ 0 ]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");\n        var resize = g.selectAll(\".resize\").data(resizes, d3_identity);\n        resize.exit().remove();\n        resize.enter().append(\"g\").attr(\"class\", function(d) {\n          return \"resize \" + d;\n        }).style(\"cursor\", function(d) {\n          return d3_svg_brushCursor[d];\n        }).append(\"rect\").attr(\"x\", function(d) {\n          return /[ew]$/.test(d) ? -3 : null;\n        }).attr(\"y\", function(d) {\n          return /^[ns]/.test(d) ? -3 : null;\n        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");\n        resize.style(\"display\", brush.empty() ? \"none\" : null);\n        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;\n        if (x) {\n          range = d3_scaleRange(x);\n          backgroundUpdate.attr(\"x\", range[0]).attr(\"width\", range[1] - range[0]);\n          redrawX(gUpdate);\n        }\n        if (y) {\n          range = d3_scaleRange(y);\n          backgroundUpdate.attr(\"y\", range[0]).attr(\"height\", range[1] - range[0]);\n          redrawY(gUpdate);\n        }\n        redraw(gUpdate);\n      });\n    }\n    brush.event = function(g) {\n      g.each(function() {\n        var event_ = event.of(this, arguments), extent1 = {\n          x: xExtent,\n          y: yExtent,\n          i: xExtentDomain,\n          j: yExtentDomain\n        }, extent0 = this.__chart__ || extent1;\n        this.__chart__ = extent1;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.brush\", function() {\n            xExtentDomain = extent0.i;\n            yExtentDomain = extent0.j;\n            xExtent = extent0.x;\n            yExtent = extent0.y;\n            event_({\n              type: \"brushstart\"\n            });\n          }).tween(\"brush:brush\", function() {\n            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);\n            xExtentDomain = yExtentDomain = null;\n            return function(t) {\n              xExtent = extent1.x = xi(t);\n              yExtent = extent1.y = yi(t);\n              event_({\n                type: \"brush\",\n                mode: \"resize\"\n              });\n            };\n          }).each(\"end.brush\", function() {\n            xExtentDomain = extent1.i;\n            yExtentDomain = extent1.j;\n            event_({\n              type: \"brush\",\n              mode: \"resize\"\n            });\n            event_({\n              type: \"brushend\"\n            });\n          });\n        } else {\n          event_({\n            type: \"brushstart\"\n          });\n          event_({\n            type: \"brush\",\n            mode: \"resize\"\n          });\n          event_({\n            type: \"brushend\"\n          });\n        }\n      });\n    };\n    function redraw(g) {\n      g.selectAll(\".resize\").attr(\"transform\", function(d) {\n        return \"translate(\" + xExtent[+/e$/.test(d)] + \",\" + yExtent[+/^s/.test(d)] + \")\";\n      });\n    }\n    function redrawX(g) {\n      g.select(\".extent\").attr(\"x\", xExtent[0]);\n      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", xExtent[1] - xExtent[0]);\n    }\n    function redrawY(g) {\n      g.select(\".extent\").attr(\"y\", yExtent[0]);\n      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", yExtent[1] - yExtent[0]);\n    }\n    function brushstart() {\n      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;\n      var w = d3.select(d3_window(target)).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);\n      if (d3.event.changedTouches) {\n        w.on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend);\n      } else {\n        w.on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend);\n      }\n      g.interrupt().selectAll(\"*\").interrupt();\n      if (dragging) {\n        origin[0] = xExtent[0] - origin[0];\n        origin[1] = yExtent[0] - origin[1];\n      } else if (resizing) {\n        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);\n        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];\n        origin[0] = xExtent[ex];\n        origin[1] = yExtent[ey];\n      } else if (d3.event.altKey) center = origin.slice();\n      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);\n      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));\n      event_({\n        type: \"brushstart\"\n      });\n      brushmove();\n      function keydown() {\n        if (d3.event.keyCode == 32) {\n          if (!dragging) {\n            center = null;\n            origin[0] -= xExtent[1];\n            origin[1] -= yExtent[1];\n            dragging = 2;\n          }\n          d3_eventPreventDefault();\n        }\n      }\n      function keyup() {\n        if (d3.event.keyCode == 32 && dragging == 2) {\n          origin[0] += xExtent[1];\n          origin[1] += yExtent[1];\n          dragging = 0;\n          d3_eventPreventDefault();\n        }\n      }\n      function brushmove() {\n        var point = d3.mouse(target), moved = false;\n        if (offset) {\n          point[0] += offset[0];\n          point[1] += offset[1];\n        }\n        if (!dragging) {\n          if (d3.event.altKey) {\n            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];\n            origin[0] = xExtent[+(point[0] < center[0])];\n            origin[1] = yExtent[+(point[1] < center[1])];\n          } else center = null;\n        }\n        if (resizingX && move1(point, x, 0)) {\n          redrawX(g);\n          moved = true;\n        }\n        if (resizingY && move1(point, y, 1)) {\n          redrawY(g);\n          moved = true;\n        }\n        if (moved) {\n          redraw(g);\n          event_({\n            type: \"brush\",\n            mode: dragging ? \"move\" : \"resize\"\n          });\n        }\n      }\n      function move1(point, scale, i) {\n        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n        if (dragging) {\n          r0 -= position;\n          r1 -= size + position;\n        }\n        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n        if (dragging) {\n          max = (min += position) + size;\n        } else {\n          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n          if (position < min) {\n            max = min;\n            min = position;\n          } else {\n            max = position;\n          }\n        }\n        if (extent[0] != min || extent[1] != max) {\n          if (i) yExtentDomain = null; else xExtentDomain = null;\n          extent[0] = min;\n          extent[1] = max;\n          return true;\n        }\n      }\n      function brushend() {\n        brushmove();\n        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);\n        d3.select(\"body\").style(\"cursor\", null);\n        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n        dragRestore();\n        event_({\n          type: \"brushend\"\n        });\n      }\n    }\n    brush.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.clamp = function(z) {\n      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;\n      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;\n      return brush;\n    };\n    brush.extent = function(z) {\n      var x0, x1, y0, y1, t;\n      if (!arguments.length) {\n        if (x) {\n          if (xExtentDomain) {\n            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n          } else {\n            x0 = xExtent[0], x1 = xExtent[1];\n            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n          }\n        }\n        if (y) {\n          if (yExtentDomain) {\n            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n          } else {\n            y0 = yExtent[0], y1 = yExtent[1];\n            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n          }\n        }\n        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];\n      }\n      if (x) {\n        x0 = z[0], x1 = z[1];\n        if (y) x0 = x0[0], x1 = x1[0];\n        xExtentDomain = [ x0, x1 ];\n        if (x.invert) x0 = x(x0), x1 = x(x1);\n        if (x1 < x0) t = x0, x0 = x1, x1 = t;\n        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];\n      }\n      if (y) {\n        y0 = z[0], y1 = z[1];\n        if (x) y0 = y0[1], y1 = y1[1];\n        yExtentDomain = [ y0, y1 ];\n        if (y.invert) y0 = y(y0), y1 = y(y1);\n        if (y1 < y0) t = y0, y0 = y1, y1 = t;\n        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];\n      }\n      return brush;\n    };\n    brush.clear = function() {\n      if (!brush.empty()) {\n        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];\n        xExtentDomain = yExtentDomain = null;\n      }\n      return brush;\n    };\n    brush.empty = function() {\n      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];\n    };\n    return d3.rebind(brush, event, \"on\");\n  };\n  var d3_svg_brushCursor = {\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];\n  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n  var d3_time_formatUtc = d3_time_format.utc;\n  var d3_time_formatIso = d3_time_formatUtc(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n  d3_time_format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n  function d3_time_formatIsoNative(date) {\n    return date.toISOString();\n  }\n  d3_time_formatIsoNative.parse = function(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  };\n  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n  d3_time.second = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 1e3) * 1e3);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n  }, function(date) {\n    return date.getSeconds();\n  });\n  d3_time.seconds = d3_time.second.range;\n  d3_time.seconds.utc = d3_time.second.utc.range;\n  d3_time.minute = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 6e4) * 6e4);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n  }, function(date) {\n    return date.getMinutes();\n  });\n  d3_time.minutes = d3_time.minute.range;\n  d3_time.minutes.utc = d3_time.minute.utc.range;\n  d3_time.hour = d3_time_interval(function(date) {\n    var timezone = date.getTimezoneOffset() / 60;\n    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n  }, function(date) {\n    return date.getHours();\n  });\n  d3_time.hours = d3_time.hour.range;\n  d3_time.hours.utc = d3_time.hour.utc.range;\n  d3_time.month = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setDate(1);\n    return date;\n  }, function(date, offset) {\n    date.setMonth(date.getMonth() + offset);\n  }, function(date) {\n    return date.getMonth();\n  });\n  d3_time.months = d3_time.month.range;\n  d3_time.months.utc = d3_time.month.utc.range;\n  function d3_time_scale(linear, methods, format) {\n    function scale(x) {\n      return linear(x);\n    }\n    scale.invert = function(x) {\n      return d3_time_scaleDate(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n      linear.domain(x);\n      return scale;\n    };\n    function tickMethod(extent, count) {\n      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);\n      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {\n        return d / 31536e6;\n      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n    }\n    scale.nice = function(interval, skip) {\n      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" && tickMethod(extent, interval);\n      if (method) interval = method[0], skip = method[1];\n      function skipped(date) {\n        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n      }\n      return scale.domain(d3_scale_nice(domain, skip > 1 ? {\n        floor: function(date) {\n          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);\n          return date;\n        },\n        ceil: function(date) {\n          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);\n          return date;\n        }\n      } : interval));\n    };\n    scale.ticks = function(interval, skip) {\n      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" ? tickMethod(extent, interval) : !interval.range && [ {\n        range: interval\n      }, skip ];\n      if (method) interval = method[0], skip = method[1];\n      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);\n    };\n    scale.tickFormat = function() {\n      return format;\n    };\n    scale.copy = function() {\n      return d3_time_scale(linear.copy(), methods, format);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_time_scaleDate(t) {\n    return new Date(t);\n  }\n  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \".%L\", function(d) {\n    return d.getMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getDay() && d.getDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  var d3_time_scaleMilliseconds = {\n    range: function(start, stop, step) {\n      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n    },\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  d3_time_scaleLocalMethods.year = d3_time.year;\n  d3_time.scale = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n  };\n  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {\n    return [ m[0].utc, m[1] ];\n  });\n  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \".%L\", function(d) {\n    return d.getUTCMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getUTCSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getUTCMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getUTCHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getUTCDay() && d.getUTCDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getUTCDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getUTCMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n  d3_time.scale.utc = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n  };\n  d3.text = d3_xhrType(function(request) {\n    return request.responseText;\n  });\n  d3.json = function(url, callback) {\n    return d3_xhr(url, \"application/json\", d3_json, callback);\n  };\n  function d3_json(request) {\n    return JSON.parse(request.responseText);\n  }\n  d3.html = function(url, callback) {\n    return d3_xhr(url, \"text/html\", d3_html, callback);\n  };\n  function d3_html(request) {\n    var range = d3_document.createRange();\n    range.selectNode(d3_document.body);\n    return range.createContextualFragment(request.responseText);\n  }\n  d3.xml = d3_xhrType(function(request) {\n    return request.responseXML;\n  });\n  if (typeof define === \"function\" && define.amd) this.d3 = d3, define(d3); else if (typeof module === \"object\" && module.exports) module.exports = d3; else this.d3 = d3;\n}();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/d3/d3.js\n// module id = 287\n// module chunks = 0","module.exports = require(\"./crossfilter\").crossfilter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dc/node_modules/crossfilter2/index.js\n// module id = 288\n// module chunks = 0","(function(exports){\ncrossfilter.version = \"1.3.14\";\nfunction crossfilter_identity(d) {\n  return d;\n}\ncrossfilter.permute = permute;\n\nfunction permute(array, index) {\n  for (var i = 0, n = index.length, copy = new Array(n); i < n; ++i) {\n    copy[i] = array[index[i]];\n  }\n  return copy;\n}\nvar bisect = crossfilter.bisect = bisect_by(crossfilter_identity);\n\nbisect.by = bisect_by;\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\nvar heap = crossfilter.heap = heap_by(crossfilter_identity);\n\nheap.by = heap_by;\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\nvar heapselect = crossfilter.heapselect = heapselect_by(crossfilter_identity);\n\nheapselect.by = heapselect_by;\n\nfunction heapselect_by(f) {\n  var heap = heap_by(f);\n\n  // Returns a new array containing the top k elements in the array a[lo:hi].\n  // The returned array is not sorted, but maintains the heap property. If k is\n  // greater than hi - lo, then fewer than k elements will be returned. The\n  // order of elements in a is unchanged by this operation.\n  function heapselect(a, lo, hi, k) {\n    var queue = new Array(k = Math.min(hi - lo, k)),\n        min,\n        i,\n        x,\n        d;\n\n    for (i = 0; i < k; ++i) queue[i] = a[lo++];\n    heap(queue, 0, k);\n\n    if (lo < hi) {\n      min = f(queue[0]);\n      do {\n        if (x = f(d = a[lo]) > min) {\n          queue[0] = d;\n          min = f(heap(queue, 0, k)[0]);\n        }\n      } while (++lo < hi);\n    }\n\n    return queue;\n  }\n\n  return heapselect;\n}\nvar insertionsort = crossfilter.insertionsort = insertionsort_by(crossfilter_identity);\n\ninsertionsort.by = insertionsort_by;\n\nfunction insertionsort_by(f) {\n\n  function insertionsort(a, lo, hi) {\n    for (var i = lo + 1; i < hi; ++i) {\n      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n        a[j] = a[j - 1];\n      }\n      a[j] = t;\n    }\n    return a;\n  }\n\n  return insertionsort;\n}\n// Algorithm designed by Vladimir Yaroslavskiy.\n// Implementation based on the Dart project; see lib/dart/LICENSE for details.\n\nvar quicksort = crossfilter.quicksort = quicksort_by(crossfilter_identity);\n\nquicksort.by = quicksort_by;\n\nfunction quicksort_by(f) {\n  var insertionsort = insertionsort_by(f);\n\n  function sort(a, lo, hi) {\n    return (hi - lo < quicksort_sizeThreshold\n        ? insertionsort\n        : quicksort)(a, lo, hi);\n  }\n\n  function quicksort(a, lo, hi) {\n    // Compute the two pivots by looking at 5 elements.\n    var sixth = (hi - lo) / 6 | 0,\n        i1 = lo + sixth,\n        i5 = hi - 1 - sixth,\n        i3 = lo + hi - 1 >> 1,  // The midpoint.\n        i2 = i3 - sixth,\n        i4 = i3 + sixth;\n\n    var e1 = a[i1], x1 = f(e1),\n        e2 = a[i2], x2 = f(e2),\n        e3 = a[i3], x3 = f(e3),\n        e4 = a[i4], x4 = f(e4),\n        e5 = a[i5], x5 = f(e5);\n\n    var t;\n\n    // Sort the selected 5 elements using a sorting network.\n    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n    var pivot1 = e2, pivotValue1 = x2,\n        pivot2 = e4, pivotValue2 = x4;\n\n    // e2 and e4 have been saved in the pivot variables. They will be written\n    // back, once the partitioning is finished.\n    a[i1] = e1;\n    a[i2] = a[lo];\n    a[i3] = e3;\n    a[i4] = a[hi - 1];\n    a[i5] = e5;\n\n    var less = lo + 1,   // First element in the middle partition.\n        great = hi - 2;  // Last element in the middle partition.\n\n    // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n    // Object.prototype.valueOf; == and === do not, so in order to be consistent\n    // with natural order (such as for Date objects), we must do two compares.\n    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n    if (pivotsEqual) {\n\n      // Degenerated case where the partitioning becomes a dutch national flag\n      // problem.\n      //\n      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n      //  ^             ^          ^             ^            ^\n      // left         less         k           great         right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1) for x in ]left, less[ : x < pivot.\n      //   2) for x in [less, k[ : x == pivot.\n      //   3) for x in ]great, right[ : x > pivot.\n      for (var k = less; k <= great; ++k) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else if (xk > pivotValue1) {\n\n          // Find the first element <= pivot in the range [k - 1, great] and\n          // put [:ek:] there. We know that such an element must exist:\n          // When k == less, then el3 (which is equal to pivot) lies in the\n          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n          // Note that in the latter case invariant 2 will be violated for a\n          // short amount of time. The invariant will be restored when the\n          // pivots are put into their final positions.\n          while (true) {\n            var greatValue = f(a[great]);\n            if (greatValue > pivotValue1) {\n              great--;\n              // This is the only location in the while-loop where a new\n              // iteration is started.\n              continue;\n            } else if (greatValue < pivotValue1) {\n              // Triple exchange.\n              a[k] = a[less];\n              a[less++] = a[great];\n              a[great--] = ek;\n              break;\n            } else {\n              a[k] = a[great];\n              a[great--] = ek;\n              // Note: if great < k then we will exit the outer loop and fix\n              // invariant 2 (which we just violated).\n              break;\n            }\n          }\n        }\n      }\n    } else {\n\n      // We partition the list into three parts:\n      //  1. < pivot1\n      //  2. >= pivot1 && <= pivot2\n      //  3. > pivot2\n      //\n      // During the loop we have:\n      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n      //  ^            ^                        ^              ^             ^\n      // left         less                     k              great        right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1. for x in ]left, less[ : x < pivot1\n      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n      //   3. for x in ]great, right[ : x > pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else {\n          if (xk > pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] <= pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] >= pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Move pivots into their final positions.\n    // We shrunk the list from both sides (a[left] and a[right] have\n    // meaningless values in them) and now we move elements from the first\n    // and third partition into these locations so that we can store the\n    // pivots.\n    a[lo] = a[less - 1];\n    a[less - 1] = pivot1;\n    a[hi - 1] = a[great + 1];\n    a[great + 1] = pivot2;\n\n    // The list is now partitioned into three partitions:\n    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n    //  ^            ^                        ^             ^\n    // left         less                     great        right\n\n    // Recursive descent. (Don't include the pivot values.)\n    sort(a, lo, less - 1);\n    sort(a, great + 2, hi);\n\n    if (pivotsEqual) {\n      // All elements in the second partition are equal to the pivot. No\n      // need to sort them.\n      return a;\n    }\n\n    // In theory it should be enough to call _doSort recursively on the second\n    // partition.\n    // The Android source however removes the pivot elements from the recursive\n    // call if the second partition is too large (more than 2/3 of the list).\n    if (less < i1 && great > i5) {\n      var lessValue, greatValue;\n      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\n      while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\n\n      // Copy paste of the previous 3-way partitioning with adaptions.\n      //\n      // We partition the list into three parts:\n      //  1. == pivot1\n      //  2. > pivot1 && < pivot2\n      //  3. == pivot2\n      //\n      // During the loop we have:\n      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n      //              ^                      ^              ^\n      //            less                     k              great\n      //\n      // Invariants:\n      //   1. for x in [ *, less[ : x == pivot1\n      //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n      //   3. for x in ]great, * ] : x == pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk <= pivotValue1 && xk >= pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          less++;\n        } else {\n          if (xk <= pivotValue2 && xk >= pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] < pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] == pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // The second partition has now been cleared of pivot elements and looks\n    // as follows:\n    // [  *  |  > pivot1 && < pivot2  | * ]\n    //        ^                      ^\n    //       less                  great\n    // Sort the second partition using recursive descent.\n\n    // The second partition looks as follows:\n    // [  *  |  >= pivot1 && <= pivot2  | * ]\n    //        ^                        ^\n    //       less                    great\n    // Simply sort it by recursive descent.\n\n    return sort(a, less, great + 1);\n  }\n\n  return sort;\n}\n\nvar quicksort_sizeThreshold = 32;\nvar crossfilter_array8 = crossfilter_arrayUntyped,\n    crossfilter_array16 = crossfilter_arrayUntyped,\n    crossfilter_array32 = crossfilter_arrayUntyped,\n    crossfilter_arrayLengthen = crossfilter_arrayLengthenUntyped,\n    crossfilter_arrayWiden = crossfilter_arrayWidenUntyped;\n\nif (typeof Uint8Array !== \"undefined\") {\n  crossfilter_array8 = function(n) { return new Uint8Array(n); };\n  crossfilter_array16 = function(n) { return new Uint16Array(n); };\n  crossfilter_array32 = function(n) { return new Uint32Array(n); };\n\n  crossfilter_arrayLengthen = function(array, length) {\n    if (array.length >= length) return array;\n    var copy = new array.constructor(length);\n    copy.set(array);\n    return copy;\n  };\n\n  crossfilter_arrayWiden = function(array, width) {\n    var copy;\n    switch (width) {\n      case 16: copy = crossfilter_array16(array.length); break;\n      case 32: copy = crossfilter_array32(array.length); break;\n      default: throw new Error(\"invalid array width!\");\n    }\n    copy.set(array);\n    return copy;\n  };\n}\n\nfunction crossfilter_arrayUntyped(n) {\n  var array = new Array(n), i = -1;\n  while (++i < n) array[i] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayLengthenUntyped(array, length) {\n  var n = array.length;\n  while (n < length) array[n++] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayWidenUntyped(array, width) {\n  if (width > 32) throw new Error(\"invalid array width!\");\n  return array;\n}\nfunction crossfilter_filterExact(bisect, value) {\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n  };\n}\n\nfunction crossfilter_filterRange(bisect, range) {\n  var min = range[0],\n      max = range[1];\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n  };\n}\n\nfunction crossfilter_filterAll(values) {\n  return [0, values.length];\n}\nfunction crossfilter_null() {\n  return null;\n}\nfunction crossfilter_zero() {\n  return 0;\n}\nfunction crossfilter_reduceIncrement(p) {\n  return p + 1;\n}\n\nfunction crossfilter_reduceDecrement(p) {\n  return p - 1;\n}\n\nfunction crossfilter_reduceAdd(f) {\n  return function(p, v) {\n    return p + +f(v);\n  };\n}\n\nfunction crossfilter_reduceSubtract(f) {\n  return function(p, v) {\n    return p - f(v);\n  };\n}\nexports.crossfilter = crossfilter;\n\nfunction crossfilter() {\n  var crossfilter = {\n    add: add,\n    remove: removeData,\n    dimension: dimension,\n    groupAll: groupAll,\n    size: size\n  };\n\n  var data = [], // the records\n      n = 0, // the number of records; data.length\n      m = 0, // a bit mask representing which dimensions are in use\n      M = 8, // number of dimensions that can fit in `filters`\n      filters = crossfilter_array8(0), // M bits per record; 1 is filtered out\n      filterListeners = [], // when the filters change\n      dataListeners = [], // when data is added\n      removeDataListeners = []; // when data is removed\n\n  // Adds the specified new records to this crossfilter.\n  function add(newData) {\n    var n0 = n,\n        n1 = newData.length;\n\n    // If there's actually new data to add…\n    // Merge the new data into the existing data.\n    // Lengthen the filter bitset to handle the new records.\n    // Notify listeners (dimensions and groups) that new data is available.\n    if (n1) {\n      data = data.concat(newData);\n      filters = crossfilter_arrayLengthen(filters, n += n1);\n      dataListeners.forEach(function(l) { l(newData, n0, n1); });\n    }\n\n    return crossfilter;\n  }\n\n  // Removes all records that match the current filters.\n  function removeData() {\n    var newIndex = crossfilter_index(n, n),\n        removed = [];\n    for (var i = 0, j = 0; i < n; ++i) {\n      if (filters[i]) newIndex[i] = j++;\n      else removed.push(i);\n    }\n\n    // Remove all matching records from groups.\n    filterListeners.forEach(function(l) { l(0, [], removed); });\n\n    // Update indexes.\n    removeDataListeners.forEach(function(l) { l(newIndex); });\n\n    // Remove old filters and data by overwriting.\n    for (var i = 0, j = 0, k; i < n; ++i) {\n      if (k = filters[i]) {\n        if (i !== j) filters[j] = k, data[j] = data[i];\n        ++j;\n      }\n    }\n    data.length = j;\n    while (n > j) filters[--n] = 0;\n  }\n\n  // Adds a new dimension with the specified value accessor function.\n  function dimension(value) {\n    var dimension = {\n      filter: filter,\n      filterExact: filterExact,\n      filterRange: filterRange,\n      filterFunction: filterFunction,\n      filterAll: filterAll,\n      top: top,\n      bottom: bottom,\n      group: group,\n      groupAll: groupAll,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var one = ~m & -~m, // lowest unset bit as mask, e.g., 00001000\n        zero = ~one, // inverted one, e.g., 11110111\n        values, // sorted, cached array\n        index, // value rank ↦ object id\n        newValues, // temporary array storing newly-added values\n        newIndex, // temporary array storing newly-added index\n        sort = quicksort_by(function(i) { return newValues[i]; }),\n        refilter = crossfilter_filterAll, // for recomputing filter\n        refilterFunction, // the custom filter function in use\n        indexListeners = [], // when data is added\n        dimensionGroups = [],\n        lo0 = 0,\n        hi0 = 0;\n\n    // Updating a dimension is a two-stage process. First, we must update the\n    // associated filters for the newly-added records. Once all dimensions have\n    // updated their filters, the groups are notified to update.\n    dataListeners.unshift(preAdd);\n    dataListeners.push(postAdd);\n\n    removeDataListeners.push(removeData);\n\n    // Incorporate any existing data into this dimension, and make sure that the\n    // filter bitset is wide enough to handle the new dimension.\n    m |= one;\n    if (M >= 32 ? !one : m & -(1 << M)) {\n      filters = crossfilter_arrayWiden(filters, M <<= 1);\n    }\n    preAdd(data, 0, n);\n    postAdd(data, 0, n);\n\n    // Incorporates the specified new records into this dimension.\n    // This function is responsible for updating filters, values, and index.\n    function preAdd(newData, n0, n1) {\n\n      // Permute new values into natural order using a sorted index.\n      newValues = newData.map(value);\n      newIndex = sort(crossfilter_range(n1), 0, n1);\n      newValues = permute(newValues, newIndex);\n\n      // Bisect newValues to determine which new records are selected.\n      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1], i;\n      if (refilterFunction) {\n        for (i = 0; i < n1; ++i) {\n          if (!refilterFunction(newValues[i], i)) filters[newIndex[i] + n0] |= one;\n        }\n      } else {\n        for (i = 0; i < lo1; ++i) filters[newIndex[i] + n0] |= one;\n        for (i = hi1; i < n1; ++i) filters[newIndex[i] + n0] |= one;\n      }\n\n      // If this dimension previously had no data, then we don't need to do the\n      // more expensive merge operation; use the new values and index as-is.\n      if (!n0) {\n        values = newValues;\n        index = newIndex;\n        lo0 = lo1;\n        hi0 = hi1;\n        return;\n      }\n\n      var oldValues = values,\n          oldIndex = index,\n          i0 = 0,\n          i1 = 0;\n\n      // Otherwise, create new arrays into which to merge new and old.\n      values = new Array(n);\n      index = crossfilter_index(n, n);\n\n      // Merge the old and new sorted values, and old and new index.\n      for (i = 0; i0 < n0 && i1 < n1; ++i) {\n        if (oldValues[i0] < newValues[i1]) {\n          values[i] = oldValues[i0];\n          index[i] = oldIndex[i0++];\n        } else {\n          values[i] = newValues[i1];\n          index[i] = newIndex[i1++] + n0;\n        }\n      }\n\n      // Add any remaining old values.\n      for (; i0 < n0; ++i0, ++i) {\n        values[i] = oldValues[i0];\n        index[i] = oldIndex[i0];\n      }\n\n      // Add any remaining new values.\n      for (; i1 < n1; ++i1, ++i) {\n        values[i] = newValues[i1];\n        index[i] = newIndex[i1] + n0;\n      }\n\n      // Bisect again to recompute lo0 and hi0.\n      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // When all filters have updated, notify index listeners of the new values.\n    function postAdd(newData, n0, n1) {\n      indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\n      newValues = newIndex = null;\n    }\n\n    function removeData(reIndex) {\n      for (var i = 0, j = 0, k; i < n; ++i) {\n        if (filters[k = index[i]]) {\n          if (i !== j) values[j] = values[i];\n          index[j] = reIndex[k];\n          ++j;\n        }\n      }\n      values.length = j;\n      while (j < n) index[j++] = 0;\n\n      // Bisect again to recompute lo0 and hi0.\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // Updates the selected values based on the specified bounds [lo, hi].\n    // This implementation is used by all the public filter methods.\n    function filterIndexBounds(bounds) {\n      var lo1 = bounds[0],\n          hi1 = bounds[1];\n\n      if (refilterFunction) {\n        refilterFunction = null;\n        filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; });\n        lo0 = lo1;\n        hi0 = hi1;\n        return dimension;\n      }\n\n      var i,\n          j,\n          k,\n          added = [],\n          removed = [];\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      lo0 = lo1;\n      hi0 = hi1;\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n      return dimension;\n    }\n\n    // Filters this dimension using the specified range, value, or null.\n    // If the range is null, this is equivalent to filterAll.\n    // If the range is an array, this is equivalent to filterRange.\n    // Otherwise, this is equivalent to filterExact.\n    function filter(range) {\n      return range == null\n          ? filterAll() : Array.isArray(range)\n          ? filterRange(range) : typeof range === \"function\"\n          ? filterFunction(range)\n          : filterExact(range);\n    }\n\n    // Filters this dimension to select the exact value.\n    function filterExact(value) {\n      return filterIndexBounds((refilter = crossfilter_filterExact(bisect, value))(values));\n    }\n\n    // Filters this dimension to select the specified range [lo, hi].\n    // The lower bound is inclusive, and the upper bound is exclusive.\n    function filterRange(range) {\n      return filterIndexBounds((refilter = crossfilter_filterRange(bisect, range))(values));\n    }\n\n    // Clears any filters on this dimension.\n    function filterAll() {\n      return filterIndexBounds((refilter = crossfilter_filterAll)(values));\n    }\n\n    // Filters this dimension using an arbitrary function.\n    function filterFunction(f) {\n      refilter = crossfilter_filterAll;\n\n      filterIndexFunction(refilterFunction = f);\n\n      lo0 = 0;\n      hi0 = n;\n\n      return dimension;\n    }\n\n    function filterIndexFunction(f) {\n      var i,\n          k,\n          x,\n          added = [],\n          removed = [];\n\n      for (i = 0; i < n; ++i) {\n        if (!(filters[k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n          if (x) filters[k] &= zero, added.push(k);\n          else filters[k] |= one, removed.push(k);\n        }\n      }\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n    }\n\n    // Returns the top K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function top(k) {\n      var array = [],\n          i = hi0,\n          j;\n\n      while (--i >= lo0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n      }\n\n      return array;\n    }\n\n    // Returns the bottom K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function bottom(k) {\n      var array = [],\n          i = lo0,\n          j;\n\n      while (i < hi0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n        i++;\n      }\n\n      return array;\n    }\n\n    // Adds a new group to this dimension, using the specified key function.\n    function group(key) {\n      var group = {\n        top: top,\n        all: all,\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        order: order,\n        orderNatural: orderNatural,\n        size: size,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      // Ensure that this group will be removed when the dimension is removed.\n      dimensionGroups.push(group);\n\n      var groups, // array of {key, value}\n          groupIndex, // object id ↦ group id\n          groupWidth = 8,\n          groupCapacity = crossfilter_capacity(groupWidth),\n          k = 0, // cardinality\n          select,\n          heap,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          update = crossfilter_null,\n          reset = crossfilter_null,\n          resetNeeded = true,\n          groupAll = key === crossfilter_null;\n\n      if (arguments.length < 1) key = crossfilter_identity;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the associated reduce values. It must also listen to\n      // the parent dimension for when data is added, and compute new keys.\n      filterListeners.push(update);\n      indexListeners.push(add);\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into the grouping.\n      add(values, index, 0, n);\n\n      // Incorporates the specified new values into this group.\n      // This function is responsible for updating groups and groupIndex.\n      function add(newValues, newIndex, n0, n1) {\n        var oldGroups = groups,\n            reIndex = crossfilter_index(k, groupCapacity),\n            add = reduceAdd,\n            initial = reduceInitial,\n            k0 = k, // old cardinality\n            i0 = 0, // index of old group\n            i1 = 0, // index of new record\n            j, // object id\n            g0, // old group\n            x0, // old key\n            x1, // new key\n            g, // group to add\n            x; // key of group to add\n\n        // If a reset is needed, we don't need to update the reduce values.\n        if (resetNeeded) add = initial = crossfilter_null;\n\n        // Reset the new groups (k is a lower bound).\n        // Also, make sure that groupIndex exists and is long enough.\n        groups = new Array(k), k = 0;\n        groupIndex = k0 > 1 ? crossfilter_arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n\n        // Get the first old key (x0 of g0), if it exists.\n        if (k0) x0 = (g0 = oldGroups[0]).key;\n\n        // Find the first new key (x1), skipping NaN keys.\n        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\n\n        // While new keys remain…\n        while (i1 < n1) {\n\n          // Determine the lesser of the two current keys; new and old.\n          // If there are no old keys remaining, then always add the new key.\n          if (g0 && x0 <= x1) {\n            g = g0, x = x0;\n\n            // Record the new index of the old group.\n            reIndex[i0] = k;\n\n            // Retrieve the next old key.\n            if (g0 = oldGroups[++i0]) x0 = g0.key;\n          } else {\n            g = {key: x1, value: initial()}, x = x1;\n          }\n\n          // Add the lesser group.\n          groups[k] = g;\n\n          // Add any selected records belonging to the added group, while\n          // advancing the new key and populating the associated group index.\n          while (!(x1 > x)) {\n            groupIndex[j = newIndex[i1] + n0] = k;\n            if (!(filters[j] & zero)) g.value = add(g.value, data[j]);\n            if (++i1 >= n1) break;\n            x1 = key(newValues[i1]);\n          }\n\n          groupIncrement();\n        }\n\n        // Add any remaining old groups that were greater than all new keys.\n        // No incremental reduce is needed; these groups have no new records.\n        // Also record the new index of the old group.\n        while (i0 < k0) {\n          groups[reIndex[i0] = k] = oldGroups[i0++];\n          groupIncrement();\n        }\n\n        // If we added any new groups before any old groups,\n        // update the group index of all the old records.\n        if (k > i0) for (i0 = 0; i0 < n0; ++i0) {\n          groupIndex[i0] = reIndex[groupIndex[i0]];\n        }\n\n        // Modify the update and reset behavior based on the cardinality.\n        // If the cardinality is less than or equal to one, then the groupIndex\n        // is not needed. If the cardinality is zero, then there are no records\n        // and therefore no groups to update or reset. Note that we also must\n        // change the registered listener to point to the new method.\n        j = filterListeners.indexOf(update);\n        if (k > 1) {\n          update = updateMany;\n          reset = resetMany;\n        } else {\n          if (!k && groupAll) {\n            k = 1;\n            groups = [{key: null, value: initial()}];\n          }\n          if (k === 1) {\n            update = updateOne;\n            reset = resetOne;\n          } else {\n            update = crossfilter_null;\n            reset = crossfilter_null;\n          }\n          groupIndex = null;\n        }\n        filterListeners[j] = update;\n\n        // Count the number of added groups,\n        // and widen the group index as needed.\n        function groupIncrement() {\n          if (++k === groupCapacity) {\n            reIndex = crossfilter_arrayWiden(reIndex, groupWidth <<= 1);\n            groupIndex = crossfilter_arrayWiden(groupIndex, groupWidth);\n            groupCapacity = crossfilter_capacity(groupWidth);\n          }\n        }\n      }\n\n      function removeData() {\n        if (k > 1) {\n          var oldK = k,\n              oldGroups = groups,\n              seenGroups = crossfilter_index(oldK, oldK);\n\n          // Filter out non-matches by copying matching group index entries to\n          // the beginning of the array.\n          for (var i = 0, j = 0; i < n; ++i) {\n            if (filters[i]) {\n              seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n              ++j;\n            }\n          }\n\n          // Reassemble groups including only those groups that were referred\n          // to by matching group index entries.  Note the new group index in\n          // seenGroups.\n          groups = [], k = 0;\n          for (i = 0; i < oldK; ++i) {\n            if (seenGroups[i]) {\n              seenGroups[i] = k++;\n              groups.push(oldGroups[i]);\n            }\n          }\n\n          if (k > 1) {\n            // Reindex the group index using seenGroups to find the new index.\n            for (var i = 0; i < j; ++i) groupIndex[i] = seenGroups[groupIndex[i]];\n          } else {\n            groupIndex = null;\n          }\n          filterListeners[filterListeners.indexOf(update)] = k > 1\n              ? (reset = resetMany, update = updateMany)\n              : k === 1 ? (reset = resetOne, update = updateOne)\n              : reset = update = crossfilter_null;\n        } else if (k === 1) {\n          if (groupAll) return;\n          for (var i = 0; i < n; ++i) if (filters[i]) return;\n          groups = [], k = 0;\n          filterListeners[filterListeners.indexOf(update)] =\n          update = reset = crossfilter_null;\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is greater than 1.\n      function updateMany(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g;\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g = groups[groupIndex[k]];\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is 1.\n      function updateOne(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g = groups[0];\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is greater than 1.\n      function resetMany() {\n        var i,\n            g;\n\n        // Reset all group values.\n        for (i = 0; i < k; ++i) {\n          groups[i].value = reduceInitial();\n        }\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g = groups[groupIndex[i]];\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is 1.\n      function resetOne() {\n        var i,\n            g = groups[0];\n\n        // Reset the singleton group values.\n        g.value = reduceInitial();\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Returns the array of group values, in the dimension's natural order.\n      function all() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return groups;\n      }\n\n      // Returns a new array containing the top K group values, in reduce order.\n      function top(k) {\n        var top = select(all(), 0, groups.length, k);\n        return heap.sort(top, 0, top.length);\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce values, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Sets the reduce order, using the specified accessor.\n      function order(value) {\n        select = heapselect_by(valueOf);\n        heap = heap_by(valueOf);\n        function valueOf(d) { return value(d.value); }\n        return group;\n      }\n\n      // A convenience method for natural ordering by reduce value.\n      function orderNatural() {\n        return order(crossfilter_identity);\n      }\n\n      // Returns the cardinality of this group, irrespective of any filters.\n      function size() {\n        return k;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i, 1);\n        i = indexListeners.indexOf(add);\n        if (i >= 0) indexListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        return group;\n      }\n\n      return reduceCount().orderNatural();\n    }\n\n    // A convenience function for generating a singleton group.\n    function groupAll() {\n      var g = group(crossfilter_null), all = g.all;\n      delete g.all;\n      delete g.top;\n      delete g.order;\n      delete g.orderNatural;\n      delete g.size;\n      g.value = function() { return all()[0].value; };\n      return g;\n    }\n\n    // Removes this dimension and associated groups and event listeners.\n    function dispose() {\n      dimensionGroups.forEach(function(group) { group.dispose(); });\n      var i = dataListeners.indexOf(preAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = dataListeners.indexOf(postAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = removeDataListeners.indexOf(removeData);\n      if (i >= 0) removeDataListeners.splice(i, 1);\n      m &= zero;\n      return filterAll();\n    }\n\n    return dimension;\n  }\n\n  // A convenience method for groupAll on a dummy dimension.\n  // This implementation can be optimized since it always has cardinality 1.\n  function groupAll() {\n    var group = {\n      reduce: reduce,\n      reduceCount: reduceCount,\n      reduceSum: reduceSum,\n      value: value,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var reduceValue,\n        reduceAdd,\n        reduceRemove,\n        reduceInitial,\n        resetNeeded = true;\n\n    // The group listens to the crossfilter for when any dimension changes, so\n    // that it can update the reduce value. It must also listen to the parent\n    // dimension for when data is added.\n    filterListeners.push(update);\n    dataListeners.push(add);\n\n    // For consistency; actually a no-op since resetNeeded is true.\n    add(data, 0, n);\n\n    // Incorporates the specified new values into this group.\n    function add(newData, n0) {\n      var i;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = n0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Reduces the specified selected or deselected records.\n    function update(filterOne, added, removed) {\n      var i,\n          k,\n          n;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = 0, n = added.length; i < n; ++i) {\n        if (!filters[k = added[i]]) {\n          reduceValue = reduceAdd(reduceValue, data[k]);\n        }\n      }\n\n      // Remove the removed values.\n      for (i = 0, n = removed.length; i < n; ++i) {\n        if (filters[k = removed[i]] === filterOne) {\n          reduceValue = reduceRemove(reduceValue, data[k]);\n        }\n      }\n    }\n\n    // Recomputes the group reduce value from scratch.\n    function reset() {\n      var i;\n\n      reduceValue = reduceInitial();\n\n      for (i = 0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Sets the reduce behavior for this group to use the specified functions.\n    // This method lazily recomputes the reduce value, waiting until needed.\n    function reduce(add, remove, initial) {\n      reduceAdd = add;\n      reduceRemove = remove;\n      reduceInitial = initial;\n      resetNeeded = true;\n      return group;\n    }\n\n    // A convenience method for reducing by count.\n    function reduceCount() {\n      return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n    }\n\n    // A convenience method for reducing by sum(value).\n    function reduceSum(value) {\n      return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n    }\n\n    // Returns the computed reduce value.\n    function value() {\n      if (resetNeeded) reset(), resetNeeded = false;\n      return reduceValue;\n    }\n\n    // Removes this group and associated event listeners.\n    function dispose() {\n      var i = filterListeners.indexOf(update);\n      if (i >= 0) filterListeners.splice(i);\n      i = dataListeners.indexOf(add);\n      if (i >= 0) dataListeners.splice(i);\n      return group;\n    }\n\n    return reduceCount();\n  }\n\n  // Returns the number of records in this crossfilter, irrespective of any filters.\n  function size() {\n    return n;\n  }\n\n  return arguments.length\n      ? add(arguments[0])\n      : crossfilter;\n}\n\n// Returns an array of size n, big enough to store ids up to m.\nfunction crossfilter_index(n, m) {\n  return (m < 0x101\n      ? crossfilter_array8 : m < 0x10001\n      ? crossfilter_array16\n      : crossfilter_array32)(n);\n}\n\n// Constructs a new array of size n, with sequential values from 0 to n - 1.\nfunction crossfilter_range(n) {\n  var range = crossfilter_index(n, n);\n  for (var i = -1; ++i < n;) range[i] = i;\n  return range;\n}\n\nfunction crossfilter_capacity(w) {\n  return w === 8\n      ? 0x100 : w === 16\n      ? 0x10000\n      : 0x100000000;\n}\n})(typeof exports !== 'undefined' && exports || this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dc/node_modules/crossfilter2/crossfilter.js\n// module id = 289\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../css-loader/index.js??ref--1-oneOf-2-2!../postcss-loader/lib/index.js??postcss!./dc.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../css-loader/index.js??ref--1-oneOf-2-2!../postcss-loader/lib/index.js??postcss!./dc.css\", function() {\n\t\t\tvar newContent = require(\"!!../css-loader/index.js??ref--1-oneOf-2-2!../postcss-loader/lib/index.js??postcss!./dc.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dc/dc.css\n// module id = 290\n// module chunks = 0","exports = module.exports = require(\"../css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".dc-chart path.dc-symbol,.dc-legend g.dc-legend-item.fadeout{fill-opacity:.5;stroke-opacity:.5}div.dc-chart{float:left}.dc-chart rect.bar{stroke:none;cursor:pointer}.dc-chart rect.bar:hover{fill-opacity:.5}.dc-chart rect.deselected{stroke:none;fill:#ccc}.dc-chart .pie-slice{fill:#fff;font-size:12px;cursor:pointer}.dc-chart .pie-slice.external{fill:#000}.dc-chart .pie-slice.highlight,.dc-chart .pie-slice :hover{fill-opacity:.8}.dc-chart .pie-path{fill:none;stroke-width:2px;stroke:#000;opacity:.4}.dc-chart .selected circle,.dc-chart .selected path{stroke-width:3;stroke:#ccc;fill-opacity:1}.dc-chart .deselected circle,.dc-chart .deselected path{stroke:none;fill-opacity:.5;fill:#ccc}.dc-chart .axis line,.dc-chart .axis path{fill:none;stroke:#000;shape-rendering:crispEdges}.dc-chart .axis text{font:10px sans-serif}.dc-chart .axis .grid-line,.dc-chart .axis .grid-line line,.dc-chart .grid-line,.dc-chart .grid-line line{fill:none;stroke:#ccc;opacity:.5;shape-rendering:crispEdges}.dc-chart .brush rect.background{z-index:-999}.dc-chart .brush rect.extent{fill:#4682b4;fill-opacity:.125}.dc-chart .brush .resize path{fill:#eee;stroke:#666}.dc-chart path.line{fill:none;stroke-width:1.5px}.dc-chart path.area{fill-opacity:.3;stroke:none}.dc-chart path.highlight{stroke-width:3;fill-opacity:1;stroke-opacity:1}.dc-chart g.state{cursor:pointer}.dc-chart g.state :hover{fill-opacity:.8}.dc-chart g.state path{stroke:#fff}.dc-chart g.deselected path{fill:gray}.dc-chart g.deselected text{display:none}.dc-chart g.row rect{fill-opacity:.8;cursor:pointer}.dc-chart g.row rect:hover{fill-opacity:.6}.dc-chart g.row text{fill:#fff;font-size:12px;cursor:pointer}.dc-chart g.dc-tooltip path{fill:none;stroke:gray;stroke-opacity:.8}.dc-chart g.county path{stroke:#fff;fill:none}.dc-chart g.debug rect{fill:#00f;fill-opacity:.2}.dc-chart g.axis text{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none}.dc-chart .node{font-size:.7em;cursor:pointer}.dc-chart .node :hover{fill-opacity:.8}.dc-chart .bubble{stroke:none;fill-opacity:.6}.dc-chart .highlight{fill-opacity:1;stroke-opacity:1}.dc-chart .fadeout{fill-opacity:.2;stroke-opacity:.2}.dc-chart .box text{font:10px sans-serif;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none}.dc-chart .box circle,.dc-chart .box line{fill:#fff}.dc-chart .box circle,.dc-chart .box line,.dc-chart .box rect{stroke:#000;stroke-width:1.5px}.dc-chart .box .center{stroke-dasharray:3,3}.dc-chart .box .outlier{fill:none;stroke:#ccc}.dc-chart .box.deselected{opacity:.5}.dc-chart .box.deselected .box{fill:#ccc}.dc-chart .symbol{stroke:none}.dc-chart .heatmap .box-group.deselected rect{stroke:none;fill-opacity:.5;fill:#ccc}.dc-chart .heatmap g.axis text{pointer-events:all;cursor:pointer}.dc-chart .empty-chart .pie-slice{cursor:default}.dc-chart .empty-chart .pie-slice path{fill:#fee;cursor:default}.dc-chart circle.dot{stroke:none}.dc-data-count{float:right;margin-top:15px;margin-right:15px}.dc-data-count .filter-count,.dc-data-count .total-count{color:#3182bd;font-weight:700}.dc-legend{font-size:11px}.dc-legend .dc-legend-item{cursor:pointer}.dc-hard .number-display{float:none}\", \"\", {\"version\":3,\"sources\":[\"D:/projects/personal-blog/node_modules/dc/dc.css\"],\"names\":[],\"mappings\":\"AAAA,6DACE,gBAAkB,AAClB,iBAAoB,CAAE,AAExB,aACE,UAAY,CAAE,AAEhB,mBACE,YAAa,AACb,cAAgB,CAAE,AAClB,yBACE,eAAiB,CAAE,AAEvB,0BACE,YAAa,AACb,SAAW,CAAE,AAEf,qBACE,UAAW,AACX,eAAgB,AAChB,cAAgB,CAAE,AAClB,8BACE,SAAW,CAAE,AACf,2DACE,eAAiB,CAAE,AAEvB,oBACE,UAAW,AACX,iBAAkB,AAClB,YAAa,AACb,UAAa,CAAE,AAEjB,oDACE,eAAgB,AAChB,YAAa,AACb,cAAgB,CAAE,AAEpB,wDACE,YAAa,AACb,gBAAiB,AACjB,SAAW,CAAE,AAEf,0CACE,UAAW,AACX,YAAa,AACb,0BAA4B,CAAE,AAEhC,qBACE,oBAAsB,CAAE,AAE1B,0GACE,UAAW,AACX,YAAa,AACb,WAAY,AACZ,0BAA4B,CAAE,AAEhC,iCACE,YAAc,CAAE,AAElB,6BACE,aAAc,AACd,iBAAmB,CAAE,AAEvB,8BACE,UAAW,AACX,WAAa,CAAE,AAEjB,oBACE,UAAW,AACX,kBAAoB,CAAE,AAExB,oBACE,gBAAiB,AACjB,WAAa,CAAE,AAEjB,yBACE,eAAgB,AAChB,eAAgB,AAChB,gBAAkB,CAAE,AAEtB,kBACE,cAAgB,CAAE,AAClB,yBACE,eAAiB,CAAE,AACrB,uBACE,WAAa,CAAE,AAEnB,4BACE,SAAc,CAAE,AAElB,4BACE,YAAc,CAAE,AAElB,qBACE,gBAAkB,AAClB,cAAgB,CAAE,AAClB,2BACE,eAAkB,CAAE,AAExB,qBACE,UAAW,AACX,eAAgB,AAChB,cAAgB,CAAE,AAEpB,4BACE,UAAW,AACX,YAAgB,AAChB,iBAAmB,CAAE,AAEvB,wBACE,YAAa,AACb,SAAW,CAAE,AAEf,uBACE,UAAW,AACX,eAAiB,CAAE,AAErB,sBACE,2BAA4B,AAC5B,yBAA0B,AAC1B,sBAAuB,AACvB,qBAAsB,AACtB,iBAAkB,AAClB,mBAAqB,CAAE,AAEzB,gBACE,eAAiB,AACjB,cAAgB,CAAE,AAClB,uBACE,eAAiB,CAAE,AAEvB,kBACE,YAAa,AACb,eAAkB,CAAE,AAEtB,qBACE,eAAgB,AAChB,gBAAkB,CAAE,AAEtB,mBACE,gBAAkB,AAClB,iBAAoB,CAAE,AAExB,oBACE,qBAAsB,AACtB,2BAA4B,AAC5B,yBAA0B,AAC1B,sBAAuB,AACvB,qBAAsB,AACtB,iBAAkB,AAClB,mBAAqB,CAAE,AAEzB,0CACE,SAAW,CAAE,AAEf,8DACE,YAAa,AACb,kBAAoB,CAAE,AAExB,uBACE,oBAAuB,CAAE,AAE3B,wBACE,UAAW,AACX,WAAa,CAAE,AAEjB,0BACE,UAAa,CAAE,AACf,+BACE,SAAW,CAAE,AAEjB,kBACE,WAAa,CAAE,AAEjB,8CACE,YAAa,AACb,gBAAkB,AAClB,SAAW,CAAE,AAEf,+BACE,mBAAoB,AACpB,cAAgB,CAAE,AAEpB,kCACE,cAAgB,CAAE,AAClB,uCACE,UAAW,AACX,cAAgB,CAAE,AAEtB,qBACE,WAAa,CAAE,AAEjB,eACE,YAAa,AACb,gBAAiB,AACjB,iBAAmB,CAAE,AACrB,yDACE,cAAe,AACf,eAAkB,CAAE,AAExB,WACE,cAAgB,CAAE,AAClB,2BACE,cAAgB,CAAE,AAEtB,yBACE,UAAY,CAAE\",\"file\":\"dc.css\",\"sourcesContent\":[\".dc-chart path.dc-symbol, .dc-legend g.dc-legend-item.fadeout {\\n  fill-opacity: 0.5;\\n  stroke-opacity: 0.5; }\\n\\ndiv.dc-chart {\\n  float: left; }\\n\\n.dc-chart rect.bar {\\n  stroke: none;\\n  cursor: pointer; }\\n  .dc-chart rect.bar:hover {\\n    fill-opacity: .5; }\\n\\n.dc-chart rect.deselected {\\n  stroke: none;\\n  fill: #ccc; }\\n\\n.dc-chart .pie-slice {\\n  fill: #fff;\\n  font-size: 12px;\\n  cursor: pointer; }\\n  .dc-chart .pie-slice.external {\\n    fill: #000; }\\n  .dc-chart .pie-slice :hover, .dc-chart .pie-slice.highlight {\\n    fill-opacity: .8; }\\n\\n.dc-chart .pie-path {\\n  fill: none;\\n  stroke-width: 2px;\\n  stroke: #000;\\n  opacity: 0.4; }\\n\\n.dc-chart .selected path, .dc-chart .selected circle {\\n  stroke-width: 3;\\n  stroke: #ccc;\\n  fill-opacity: 1; }\\n\\n.dc-chart .deselected path, .dc-chart .deselected circle {\\n  stroke: none;\\n  fill-opacity: .5;\\n  fill: #ccc; }\\n\\n.dc-chart .axis path, .dc-chart .axis line {\\n  fill: none;\\n  stroke: #000;\\n  shape-rendering: crispEdges; }\\n\\n.dc-chart .axis text {\\n  font: 10px sans-serif; }\\n\\n.dc-chart .grid-line, .dc-chart .axis .grid-line, .dc-chart .grid-line line, .dc-chart .axis .grid-line line {\\n  fill: none;\\n  stroke: #ccc;\\n  opacity: .5;\\n  shape-rendering: crispEdges; }\\n\\n.dc-chart .brush rect.background {\\n  z-index: -999; }\\n\\n.dc-chart .brush rect.extent {\\n  fill: #4682b4;\\n  fill-opacity: .125; }\\n\\n.dc-chart .brush .resize path {\\n  fill: #eee;\\n  stroke: #666; }\\n\\n.dc-chart path.line {\\n  fill: none;\\n  stroke-width: 1.5px; }\\n\\n.dc-chart path.area {\\n  fill-opacity: .3;\\n  stroke: none; }\\n\\n.dc-chart path.highlight {\\n  stroke-width: 3;\\n  fill-opacity: 1;\\n  stroke-opacity: 1; }\\n\\n.dc-chart g.state {\\n  cursor: pointer; }\\n  .dc-chart g.state :hover {\\n    fill-opacity: .8; }\\n  .dc-chart g.state path {\\n    stroke: #fff; }\\n\\n.dc-chart g.deselected path {\\n  fill: #808080; }\\n\\n.dc-chart g.deselected text {\\n  display: none; }\\n\\n.dc-chart g.row rect {\\n  fill-opacity: 0.8;\\n  cursor: pointer; }\\n  .dc-chart g.row rect:hover {\\n    fill-opacity: 0.6; }\\n\\n.dc-chart g.row text {\\n  fill: #fff;\\n  font-size: 12px;\\n  cursor: pointer; }\\n\\n.dc-chart g.dc-tooltip path {\\n  fill: none;\\n  stroke: #808080;\\n  stroke-opacity: .8; }\\n\\n.dc-chart g.county path {\\n  stroke: #fff;\\n  fill: none; }\\n\\n.dc-chart g.debug rect {\\n  fill: #00f;\\n  fill-opacity: .2; }\\n\\n.dc-chart g.axis text {\\n  -webkit-touch-callout: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n  pointer-events: none; }\\n\\n.dc-chart .node {\\n  font-size: 0.7em;\\n  cursor: pointer; }\\n  .dc-chart .node :hover {\\n    fill-opacity: .8; }\\n\\n.dc-chart .bubble {\\n  stroke: none;\\n  fill-opacity: 0.6; }\\n\\n.dc-chart .highlight {\\n  fill-opacity: 1;\\n  stroke-opacity: 1; }\\n\\n.dc-chart .fadeout {\\n  fill-opacity: 0.2;\\n  stroke-opacity: 0.2; }\\n\\n.dc-chart .box text {\\n  font: 10px sans-serif;\\n  -webkit-touch-callout: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n  pointer-events: none; }\\n\\n.dc-chart .box line, .dc-chart .box circle {\\n  fill: #fff; }\\n\\n.dc-chart .box rect, .dc-chart .box line, .dc-chart .box circle {\\n  stroke: #000;\\n  stroke-width: 1.5px; }\\n\\n.dc-chart .box .center {\\n  stroke-dasharray: 3, 3; }\\n\\n.dc-chart .box .outlier {\\n  fill: none;\\n  stroke: #ccc; }\\n\\n.dc-chart .box.deselected {\\n  opacity: 0.5; }\\n  .dc-chart .box.deselected .box {\\n    fill: #ccc; }\\n\\n.dc-chart .symbol {\\n  stroke: none; }\\n\\n.dc-chart .heatmap .box-group.deselected rect {\\n  stroke: none;\\n  fill-opacity: 0.5;\\n  fill: #ccc; }\\n\\n.dc-chart .heatmap g.axis text {\\n  pointer-events: all;\\n  cursor: pointer; }\\n\\n.dc-chart .empty-chart .pie-slice {\\n  cursor: default; }\\n  .dc-chart .empty-chart .pie-slice path {\\n    fill: #fee;\\n    cursor: default; }\\n\\n.dc-chart circle.dot {\\n  stroke: none; }\\n\\n.dc-data-count {\\n  float: right;\\n  margin-top: 15px;\\n  margin-right: 15px; }\\n  .dc-data-count .filter-count, .dc-data-count .total-count {\\n    color: #3182bd;\\n    font-weight: bold; }\\n\\n.dc-legend {\\n  font-size: 11px; }\\n  .dc-legend .dc-legend-item {\\n    cursor: pointer; }\\n\\n.dc-hard .number-display {\\n  float: none; }\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader?{\"importLoaders\":1,\"minimize\":true,\"sourceMap\":true}!./node_modules/postcss-loader/lib?{\"ident\":\"postcss\",\"plugins\":[null,null]}!./node_modules/dc/dc.css\n// module id = 291\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js??ref--1-oneOf-2-2!../../node_modules/postcss-loader/lib/index.js??postcss!./chart.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js??ref--1-oneOf-2-2!../../node_modules/postcss-loader/lib/index.js??postcss!./chart.css\", function() {\n\t\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js??ref--1-oneOf-2-2!../../node_modules/postcss-loader/lib/index.js??postcss!./chart.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/chart.css\n// module id = 292\n// module chunks = 0","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \"div.dc-chart{float:none;background-color:#b5bdc5}.dc-chart .pie-slice,.dc-chart g.row text{fill:#000}button.reset.btn.btn-sm{font-size:.5em;padding:0 .5em;border-radius:1em;cursor:pointer}.dc-chart legend{position:relative;padding:0 1rem;border-bottom:1px solid #4e5d6c;color:#2b3e50}.dc-chart legend .reset{position:absolute;right:1rem;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%)}\", \"\", {\"version\":3,\"sources\":[\"D:/projects/personal-blog/src/components/chart.css\"],\"names\":[],\"mappings\":\"AAAA,aACE,WAAY,AACZ,wBAA0B,CAC3B,AAED,0CAEE,SAAY,CACb,AAED,wBACE,eAAiB,AACjB,eAAiB,AACjB,kBAAmB,AACnB,cAAgB,CACjB,AAED,iBACE,kBAAmB,AACnB,eAAgB,AAChB,gCAAiC,AACjC,aAAe,CAChB,AAED,wBACE,kBAAmB,AACnB,WAAY,AACZ,QAAS,AACT,mCAAoC,AAChC,+BAAgC,AAC5B,0BAA4B,CACrC\",\"file\":\"chart.css\",\"sourcesContent\":[\"div.dc-chart {\\r\\n  float: none;\\r\\n  background-color: #b5bdc5;\\r\\n}\\r\\n\\r\\n.dc-chart g.row text,\\r\\n.dc-chart .pie-slice {\\r\\n  fill: black;\\r\\n}\\r\\n\\r\\nbutton.reset.btn.btn-sm {\\r\\n  font-size: 0.5em;\\r\\n  padding: 0 0.5em;\\r\\n  border-radius: 1em;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.dc-chart legend {\\r\\n  position: relative;\\r\\n  padding: 0 1rem;\\r\\n  border-bottom: 1px solid #4e5d6c;\\r\\n  color: #2b3e50;\\r\\n}\\r\\n\\r\\n.dc-chart legend .reset {\\r\\n  position: absolute;\\r\\n  right: 1rem;\\r\\n  top: 50%;\\r\\n  -webkit-transform: translateY(-50%);\\r\\n      -ms-transform: translateY(-50%);\\r\\n          transform: translateY(-50%);\\r\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader?{\"importLoaders\":1,\"minimize\":true,\"sourceMap\":true}!./node_modules/postcss-loader/lib?{\"ident\":\"postcss\",\"plugins\":[null,null]}!./src/components/chart.css\n// module id = 293\n// module chunks = 0"],"sourceRoot":""}